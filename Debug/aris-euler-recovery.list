
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08016638  08016638  00026638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ec8  08016ec8  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08016ec8  08016ec8  00026ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ed0  08016ed0  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ed0  08016ed0  00026ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016ed4  08016ed4  00026ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08016ed8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000feec  20000350  08017224  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 0000224c  2001023c  08017224  0004023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002835d  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000591f  00000000  00000000  000586d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  0005dff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001470  00000000  00000000  0005f720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000277fc  00000000  00000000  00060b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d7a1  00000000  00000000  0008838c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9545  00000000  00000000  000a5b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016f072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007200  00000000  00000000  0016f0f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801661c 	.word	0x0801661c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0801661c 	.word	0x0801661c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <fire_HAWKs>:

#include "IO.h"
#include "adc.h"


void fire_HAWKs(uint8_t * armed){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <fire_HAWKs+0x1c>
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <fire_HAWKs+0x38>)
 8000fa0:	f007 fe94 	bl	8008ccc <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d105      	bne.n	8000fb8 <fire_HAWKs+0x30>
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <fire_HAWKs+0x38>)
 8000fb4:	f007 fe8a 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <turn_off_HAWKs>:

void turn_off_HAWKs(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <turn_off_HAWKs+0x20>)
 8000fd0:	f007 fe7c 	bl	8008ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <turn_off_HAWKs+0x20>)
 8000fdc:	f007 fe76 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <fire_TDs>:

void fire_TDs(uint8_t * armed){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d105      	bne.n	8001004 <fire_TDs+0x1c>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <fire_TDs+0x38>)
 8001000:	f007 fe64 	bl	8008ccc <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <fire_TDs+0x30>
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <fire_TDs+0x38>)
 8001014:	f007 fe5a 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000

08001024 <turn_off_TDs>:

void turn_off_TDs(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <turn_off_TDs+0x20>)
 8001030:	f007 fe4c 	bl	8008ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <turn_off_TDs+0x20>)
 800103c:	f007 fe46 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000

08001048 <init_ADC>:

void init_ADC(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <init_ADC+0x18>)
 800104e:	f006 fc65 	bl	800791c <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 8001052:	2208      	movs	r2, #8
 8001054:	4903      	ldr	r1, [pc, #12]	; (8001064 <init_ADC+0x1c>)
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <init_ADC+0x18>)
 8001058:	f006 fb6e 	bl	8007738 <HAL_ADC_Start_DMA>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20004998 	.word	0x20004998
 8001064:	200008a8 	.word	0x200008a8

08001068 <read_ADC>:

void read_ADC(float * out){
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8001070:	4b89      	ldr	r3, [pc, #548]	; (8001298 <read_ADC+0x230>)
 8001072:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 8001074:	4b89      	ldr	r3, [pc, #548]	; (800129c <read_ADC+0x234>)
 8001076:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001078:	4b89      	ldr	r3, [pc, #548]	; (80012a0 <read_ADC+0x238>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001084:	edd7 7a03 	vldr	s15, [r7, #12]
 8001088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 800109a:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <read_ADC+0x238>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3304      	adds	r3, #4
 80010b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <read_ADC+0x238>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3308      	adds	r3, #8
 80010d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010de:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <read_ADC+0x238>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	461a      	mov	r2, r3
 8001104:	4623      	mov	r3, r4
 8001106:	a15c      	add	r1, pc, #368	; (adr r1, 8001278 <read_ADC+0x210>)
 8001108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800110c:	f7ff f8bc 	bl	8000288 <__aeabi_dsub>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4618      	mov	r0, r3
 8001116:	4621      	mov	r1, r4
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <read_ADC+0x23c>)
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	4618      	mov	r0, r3
 8001128:	4621      	mov	r1, r4
 800112a:	a355      	add	r3, pc, #340	; (adr r3, 8001280 <read_ADC+0x218>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fb8c 	bl	800084c <__aeabi_ddiv>
 8001134:	4603      	mov	r3, r0
 8001136:	460c      	mov	r4, r1
 8001138:	4618      	mov	r0, r3
 800113a:	4621      	mov	r1, r4
 800113c:	f7ff fd54 	bl	8000be8 <__aeabi_d2f>
 8001140:	4602      	mov	r2, r0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	330c      	adds	r3, #12
 8001146:	ee07 2a90 	vmov	s15, r2
 800114a:	eef1 7a67 	vneg.f32	s15, s15
 800114e:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <read_ADC+0x238>)
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	461a      	mov	r2, r3
 8001174:	4623      	mov	r3, r4
 8001176:	a140      	add	r1, pc, #256	; (adr r1, 8001278 <read_ADC+0x210>)
 8001178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800117c:	f7ff f884 	bl	8000288 <__aeabi_dsub>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4618      	mov	r0, r3
 8001186:	4621      	mov	r1, r4
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <read_ADC+0x23c>)
 800118e:	f7ff fa33 	bl	80005f8 <__aeabi_dmul>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	4618      	mov	r0, r3
 8001198:	4621      	mov	r1, r4
 800119a:	a339      	add	r3, pc, #228	; (adr r3, 8001280 <read_ADC+0x218>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb54 	bl	800084c <__aeabi_ddiv>
 80011a4:	4603      	mov	r3, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	4618      	mov	r0, r3
 80011aa:	4621      	mov	r1, r4
 80011ac:	f7ff fd1c 	bl	8000be8 <__aeabi_d2f>
 80011b0:	4602      	mov	r2, r0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3310      	adds	r3, #16
 80011b6:	ee07 2a90 	vmov	s15, r2
 80011ba:	eef1 7a67 	vneg.f32	s15, s15
 80011be:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <read_ADC+0x238>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3314      	adds	r3, #20
 80011da:	edd7 7a02 	vldr	s15, [r7, #8]
 80011de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <read_ADC+0x238>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3318      	adds	r3, #24
 80011fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <read_ADC+0x238>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001216:	edd7 7a03 	vldr	s15, [r7, #12]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	ee17 0a90 	vmov	r0, s15
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	a318      	add	r3, pc, #96	; (adr r3, 8001288 <read_ADC+0x220>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f82c 	bl	8000288 <__aeabi_dsub>
 8001230:	4603      	mov	r3, r0
 8001232:	460c      	mov	r4, r1
 8001234:	4618      	mov	r0, r3
 8001236:	4621      	mov	r1, r4
 8001238:	a315      	add	r3, pc, #84	; (adr r3, 8001290 <read_ADC+0x228>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4603      	mov	r3, r0
 8001244:	460c      	mov	r4, r1
 8001246:	4618      	mov	r0, r3
 8001248:	4621      	mov	r1, r4
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <read_ADC+0x240>)
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4603      	mov	r3, r0
 8001256:	460c      	mov	r4, r1
 8001258:	4619      	mov	r1, r3
 800125a:	4622      	mov	r2, r4
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f103 041c 	add.w	r4, r3, #28
 8001262:	4608      	mov	r0, r1
 8001264:	4611      	mov	r1, r2
 8001266:	f7ff fcbf 	bl	8000be8 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	6023      	str	r3, [r4, #0]

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	bf00      	nop
 8001278:	66666666 	.word	0x66666666
 800127c:	3ffa6666 	.word	0x3ffa6666
 8001280:	4189374c 	.word	0x4189374c
 8001284:	3fb0e560 	.word	0x3fb0e560
 8001288:	851eb852 	.word	0x851eb852
 800128c:	3fe851eb 	.word	0x3fe851eb
 8001290:	47ae147b 	.word	0x47ae147b
 8001294:	3f647ae1 	.word	0x3f647ae1
 8001298:	3a533333 	.word	0x3a533333
 800129c:	409b26ca 	.word	0x409b26ca
 80012a0:	200008a8 	.word	0x200008a8
 80012a4:	408f4000 	.word	0x408f4000
 80012a8:	40390000 	.word	0x40390000

080012ac <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e007      	b.n	80012ca <bufclear+0x1e>
	{
		buffer[i] = '\0';
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d0:	dbf3      	blt.n	80012ba <bufclear+0xe>
	}
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b09d      	sub	sp, #116	; 0x74
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	DWORD fre_clust;
	uint32_t total, free_space;

	if (DEBUG_PRINT == 1) printf("mounting SD card...\n");

	FRESULT ret = f_mount(&fs, SDPath, 1);
 80012ea:	2201      	movs	r2, #1
 80012ec:	4955      	ldr	r1, [pc, #340]	; (8001444 <init_sd+0x164>)
 80012ee:	4856      	ldr	r0, [pc, #344]	; (8001448 <init_sd+0x168>)
 80012f0:	f00e f8d4 	bl	800f49c <f_mount>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 80012fa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <init_sd+0x26>
	{
		if (DEBUG_PRINT == 1) printf("mounted SD card\n");
	} else {
		if (DEBUG_PRINT == 1) printf("no SD connection established\n");
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
	  return 0;
 8001302:	2300      	movs	r3, #0
 8001304:	e09a      	b.n	800143c <init_sd+0x15c>
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 8001306:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800130a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800130e:	4619      	mov	r1, r3
 8001310:	484c      	ldr	r0, [pc, #304]	; (8001444 <init_sd+0x164>)
 8001312:	f00f f944 	bl	801059e <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	3b02      	subs	r3, #2
 800131c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800131e:	8952      	ldrh	r2, [r2, #10]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8ed 	bl	8000504 <__aeabi_ui2d>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <init_sd+0x16c>)
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f7ff fc34 	bl	8000ba8 <__aeabi_d2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	667b      	str	r3, [r7, #100]	; 0x64
	if (DEBUG_PRINT == 1) printf("SD CARD Total Size: \t%lu\n",total);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001346:	895b      	ldrh	r3, [r3, #10]
 8001348:	461a      	mov	r2, r3
 800134a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134c:	fb03 f302 	mul.w	r3, r3, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8d7 	bl	8000504 <__aeabi_ui2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <init_sd+0x16c>)
 800135c:	f7ff f94c 	bl	80005f8 <__aeabi_dmul>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4618      	mov	r0, r3
 8001366:	4621      	mov	r1, r4
 8001368:	f7ff fc1e 	bl	8000ba8 <__aeabi_d2uiz>
 800136c:	4603      	mov	r3, r0
 800136e:	663b      	str	r3, [r7, #96]	; 0x60

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint16_t cnt2 = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4930      	ldr	r1, [pc, #192]	; (8001444 <init_sd+0x164>)
 8001382:	4618      	mov	r0, r3
 8001384:	f00f f85b 	bl	801043e <f_opendir>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <init_sd+0x170>)
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <init_sd+0x170>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d148      	bne.n	800142a <init_sd+0x14a>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 8001398:	e034      	b.n	8001404 <init_sd+0x124>
			{
				fn = Finfo.fname;
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	3309      	adds	r3, #9
 80013a0:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 80013a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b46      	cmp	r3, #70	; 0x46
 80013a8:	bf0c      	ite	eq
 80013aa:	2301      	moveq	r3, #1
 80013ac:	2300      	movne	r3, #0
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b2:	3301      	adds	r3, #1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b4c      	cmp	r3, #76	; 0x4c
 80013b8:	bf0c      	ite	eq
 80013ba:	2301      	moveq	r3, #1
 80013bc:	2300      	movne	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4013      	ands	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <init_sd+0xf4>
				{
					if (DEBUG_PRINT == 1) printf("found flight log: %s \n",fn);
					cnt1 ++;
 80013c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80013cc:	3301      	adds	r3, #1
 80013ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80013d2:	e017      	b.n	8001404 <init_sd+0x124>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 80013d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b4c      	cmp	r3, #76	; 0x4c
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e4:	3301      	adds	r3, #1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b4f      	cmp	r3, #79	; 0x4f
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <init_sd+0x124>
				{
					if (DEBUG_PRINT == 1) printf("found log file: %s \n",fn);
					cnt2 ++;
 80013fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80013fe:	3301      	adds	r3, #1
 8001400:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 8001404:	f107 020c 	add.w	r2, r7, #12
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f00f f888 	bl	8010524 <f_readdir>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <init_sd+0x170>)
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <init_sd+0x170>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <init_sd+0x14a>
 8001424:	7d7b      	ldrb	r3, [r7, #21]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1b7      	bne.n	800139a <init_sd+0xba>
				}

			}
	}
	*file_count = cnt1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001430:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001438:	801a      	strh	r2, [r3, #0]
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th flight. \n", *file_count);
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th log file. \n", *log_count);
	return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3774      	adds	r7, #116	; 0x74
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	2000e1d0 	.word	0x2000e1d0
 8001448:	200008c8 	.word	0x200008c8
 800144c:	3fe00000 	.word	0x3fe00000
 8001450:	20003964 	.word	0x20003964

08001454 <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 8001454:	b580      	push	{r7, lr}
 8001456:	b0e4      	sub	sp, #400	; 0x190
 8001458:	af00      	add	r7, sp, #0
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	6018      	str	r0, [r3, #0]
 800145e:	463b      	mov	r3, r7
 8001460:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	220a      	movs	r2, #10
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	483c      	ldr	r0, [pc, #240]	; (800155c <init_file+0x108>)
 800146a:	f00e f85d 	bl	800f528 <f_open>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <init_file+0x10c>)
 8001474:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <init_file+0x10c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <init_file+0x2e>
		if (DEBUG_PRINT == 1) printf("trying to open datalog file, error-code: %d \n",fresult);
		return 0;
 800147e:	2300      	movs	r3, #0
 8001480:	e067      	b.n	8001552 <init_file+0xfe>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State2,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 8001482:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001486:	4a37      	ldr	r2, [pc, #220]	; (8001564 <init_file+0x110>)
 8001488:	4618      	mov	r0, r3
 800148a:	4611      	mov	r1, r2
 800148c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001490:	461a      	mov	r2, r3
 8001492:	f00f fa99 	bl	80109c8 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 8001496:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <init_file+0x114>)
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	482e      	ldr	r0, [pc, #184]	; (800155c <init_file+0x108>)
 80014a2:	f00e fb6c 	bl	800fb7e <f_write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <init_file+0x10c>)
 80014ac:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 80014ae:	482b      	ldr	r0, [pc, #172]	; (800155c <init_file+0x108>)
 80014b0:	f00e fd77 	bl	800ffa2 <f_close>

	if (fresult != FR_OK){
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <init_file+0x10c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <init_file+0x6c>
		if (DEBUG_PRINT == 1) printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
		return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	e048      	b.n	8001552 <init_file+0xfe>
	}
	//bufclear();

	HAL_Delay(100);
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f006 f8d3 	bl	800766c <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 80014c6:	463b      	mov	r3, r7
 80014c8:	2206      	movs	r2, #6
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	4827      	ldr	r0, [pc, #156]	; (800156c <init_file+0x118>)
 80014ce:	f00e f82b 	bl	800f528 <f_open>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <init_file+0x10c>)
 80014d8:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <init_file+0x10c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <init_file+0x92>
		if (DEBUG_PRINT == 1) printf("trying to open setuplog file, error-code: %d \n",fresult);
		return 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e035      	b.n	8001552 <init_file+0xfe>

	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	bw = 0;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <init_file+0x114>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
	char myLog[128];

	for (int i=0; i<128; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80014f2:	e00b      	b.n	800150c <init_file+0xb8>
	{
		myLog[i] = '\0';
 80014f4:	f107 020c 	add.w	r2, r7, #12
 80014f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014fc:	4413      	add	r3, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<128; i++)
 8001502:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001506:	3301      	adds	r3, #1
 8001508:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800150c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001510:	2b7f      	cmp	r3, #127	; 0x7f
 8001512:	ddef      	ble.n	80014f4 <init_file+0xa0>
	}

	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 8001514:	f006 f89e 	bl	8007654 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	f107 000c 	add.w	r0, r7, #12
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4913      	ldr	r1, [pc, #76]	; (8001570 <init_file+0x11c>)
 8001524:	f00f ff3c 	bl	80113a0 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 8001528:	f107 010c 	add.w	r1, r7, #12
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <init_file+0x114>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <init_file+0x118>)
 8001532:	f00e fb24 	bl	800fb7e <f_write>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <init_file+0x10c>)
 800153c:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <init_file+0x10c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <init_file+0xf6>
		if (DEBUG_PRINT == 1) printf ("LOG FILE not created, error-code: %d \n",fresult);
		return 0;
 8001546:	2300      	movs	r3, #0
 8001548:	e003      	b.n	8001552 <init_file+0xfe>
	}

	/* Close file */
	f_close(&log_file);
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <init_file+0x118>)
 800154c:	f00e fd29 	bl	800ffa2 <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 8001550:	2301      	movs	r3, #1

}
 8001552:	4618      	mov	r0, r3
 8001554:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200018fc 	.word	0x200018fc
 8001560:	20003964 	.word	0x20003964
 8001564:	08016674 	.word	0x08016674
 8001568:	20003960 	.word	0x20003960
 800156c:	20003968 	.word	0x20003968
 8001570:	08016638 	.word	0x08016638

08001574 <extract_from_str>:

float extract_from_str(char* buffer, uint8_t *start, uint8_t *end){
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	uint8_t x = *start;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t y = *end;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    char c[30];
	for (int j=0; j<30; j++) {
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
 8001594:	e008      	b.n	80015a8 <extract_from_str+0x34>
		c[j] = '\0';
 8001596:	f107 0210 	add.w	r2, r7, #16
 800159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159c:	4413      	add	r3, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
	for (int j=0; j<30; j++) {
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	3301      	adds	r3, #1
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b1d      	cmp	r3, #29
 80015ac:	ddf3      	ble.n	8001596 <extract_from_str+0x22>
	}
	while (buffer[y] != ','){
 80015ae:	e004      	b.n	80015ba <extract_from_str+0x46>
		y ++;
 80015b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015b4:	3301      	adds	r3, #1
 80015b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (buffer[y] != ','){
 80015ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2c      	cmp	r3, #44	; 0x2c
 80015c6:	d1f3      	bne.n	80015b0 <extract_from_str+0x3c>
	}
	*end = y;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80015ce:	701a      	strb	r2, [r3, #0]
	strncpy(c, buffer + x, y - x);
 80015d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	18d1      	adds	r1, r2, r3
 80015d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80015dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00f fef9 	bl	80113e0 <strncpy>

	return strtof(c,NULL);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f010 fd1b 	bl	8012030 <strtof>
 80015fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	3738      	adds	r7, #56	; 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <read_from_SD>:

void read_from_SD(char * FILE_NAME, float * TIME, float * P1, float * P2, float * Ax1, float * Ay1, float * Az1, float * Ax2, float * Ay2, float * Az2){
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 800160e:	af00      	add	r7, sp, #0
 8001610:	f107 040c 	add.w	r4, r7, #12
 8001614:	6020      	str	r0, [r4, #0]
 8001616:	f107 0008 	add.w	r0, r7, #8
 800161a:	6001      	str	r1, [r0, #0]
 800161c:	1d39      	adds	r1, r7, #4
 800161e:	600a      	str	r2, [r1, #0]
 8001620:	463a      	mov	r2, r7
 8001622:	6013      	str	r3, [r2, #0]

	char buffer[FAKE_LINE_LEN];

	for (int i = 0; i < FAKE_FILE_LEN; i++){
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800162a:	e164      	b.n	80018f6 <read_from_SD+0x2ee>
	        f_gets(buffer, f_size(&fake_file), &fake_file);
 800162c:	4bb9      	ldr	r3, [pc, #740]	; (8001914 <read_from_SD+0x30c>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4619      	mov	r1, r3
 8001632:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001636:	4ab7      	ldr	r2, [pc, #732]	; (8001914 <read_from_SD+0x30c>)
 8001638:	4618      	mov	r0, r3
 800163a:	f00f f865 	bl	8010708 <f_gets>
	        printf("reading line: %d  \n",i);
 800163e:	f8d7 1434 	ldr.w	r1, [r7, #1076]	; 0x434
 8001642:	48b5      	ldr	r0, [pc, #724]	; (8001918 <read_from_SD+0x310>)
 8001644:	f00f fe30 	bl	80112a8 <iprintf>
	        uint8_t x = 0;
 8001648:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
	        uint8_t y = 0;
 8001650:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]

			TIME[i] = extract_from_str(buffer, &x, &y);
 8001658:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	f107 0208 	add.w	r2, r7, #8
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	18d4      	adds	r4, r2, r3
 8001666:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800166a:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800166e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff7e 	bl	8001574 <extract_from_str>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
 800167c:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001680:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800168e:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001690:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800169e:	701a      	strb	r2, [r3, #0]

			P1[i] = extract_from_str(buffer, &x, &y);
 80016a0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	1d3a      	adds	r2, r7, #4
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	18d4      	adds	r4, r2, r3
 80016ac:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80016b0:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80016b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5b 	bl	8001574 <extract_from_str>
 80016be:	eef0 7a40 	vmov.f32	s15, s0
 80016c2:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 80016c6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80016d4:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80016d6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016e4:	701a      	strb	r2, [r3, #0]

			P2[i] = extract_from_str(buffer, &x, &y);
 80016e6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	463a      	mov	r2, r7
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	18d4      	adds	r4, r2, r3
 80016f2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80016f6:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80016fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff38 	bl	8001574 <extract_from_str>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 800170c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800171a:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 800171c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800172a:	701a      	strb	r2, [r3, #0]

			Ax1[i] = extract_from_str(buffer, &x, &y);
 800172c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8001736:	18d4      	adds	r4, r2, r3
 8001738:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800173c:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff15 	bl	8001574 <extract_from_str>
 800174a:	eef0 7a40 	vmov.f32	s15, s0
 800174e:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001752:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001760:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001762:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001770:	701a      	strb	r2, [r3, #0]

	 		Ay1[i] = extract_from_str(buffer, &x, &y);
 8001772:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800177c:	18d4      	adds	r4, r2, r3
 800177e:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001782:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fef2 	bl	8001574 <extract_from_str>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 8001798:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80017a6:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80017a8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017b6:	701a      	strb	r2, [r3, #0]

			Az1[i] = extract_from_str(buffer, &x, &y);
 80017b8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80017c2:	18d4      	adds	r4, r2, r3
 80017c4:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80017c8:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80017cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fecf 	bl	8001574 <extract_from_str>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 80017de:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80017ec:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80017ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017fc:	701a      	strb	r2, [r3, #0]

	 		Ax2[i] = extract_from_str(buffer, &x, &y);
 80017fe:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001808:	18d4      	adds	r4, r2, r3
 800180a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800180e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff feac 	bl	8001574 <extract_from_str>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 8001824:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001832:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001834:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001842:	701a      	strb	r2, [r3, #0]

	 		Ay2[i] = extract_from_str(buffer, &x, &y);
 8001844:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800184e:	18d4      	adds	r4, r2, r3
 8001850:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001854:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe89 	bl	8001574 <extract_from_str>
 8001862:	eef0 7a40 	vmov.f32	s15, s0
 8001866:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 800186a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001878:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 800187a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001888:	701a      	strb	r2, [r3, #0]

		    char c[30];

			for (int j=0; j<30; j++) {
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001890:	e00b      	b.n	80018aa <read_from_SD+0x2a2>
				c[j] = '\0';
 8001892:	f107 0210 	add.w	r2, r7, #16
 8001896:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800189a:	4413      	add	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
			for (int j=0; j<30; j++) {
 80018a0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80018a4:	3301      	adds	r3, #1
 80018a6:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80018aa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80018ae:	2b1d      	cmp	r3, #29
 80018b0:	ddef      	ble.n	8001892 <read_from_SD+0x28a>
			}

			strncpy(c, buffer + x, 10);
 80018b2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018be:	1899      	adds	r1, r3, r2
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	220a      	movs	r2, #10
 80018c6:	4618      	mov	r0, r3
 80018c8:	f00f fd8a 	bl	80113e0 <strncpy>

	 		Az2[i] = strtof(c,NULL);
 80018cc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 80018d6:	18d4      	adds	r4, r2, r3
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f010 fba6 	bl	8012030 <strtof>
 80018e4:	eef0 7a40 	vmov.f32	s15, s0
 80018e8:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < FAKE_FILE_LEN; i++){
 80018ec:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80018f0:	3301      	adds	r3, #1
 80018f2:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80018f6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	f6ff ae95 	blt.w	800162c <read_from_SD+0x24>
	    }

		// Close file
		f_close(&fake_file);
 8001902:	4804      	ldr	r0, [pc, #16]	; (8001914 <read_from_SD+0x30c>)
 8001904:	f00e fb4d 	bl	800ffa2 <f_close>


}
 8001908:	bf00      	nop
 800190a:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	bf00      	nop
 8001914:	20002930 	.word	0x20002930
 8001918:	08016774 	.word	0x08016774

0800191c <write_to_SD>:


void write_to_SD(char * FILE_NAME, char * buffer){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001926:	2212      	movs	r2, #18
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	481f      	ldr	r0, [pc, #124]	; (80019a8 <write_to_SD+0x8c>)
 800192c:	f00d fdfc 	bl	800f528 <f_open>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <write_to_SD+0x90>)
 8001936:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <write_to_SD+0x90>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d016      	beq.n	800196e <write_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 8001940:	2201      	movs	r2, #1
 8001942:	491b      	ldr	r1, [pc, #108]	; (80019b0 <write_to_SD+0x94>)
 8001944:	2000      	movs	r0, #0
 8001946:	f00d fda9 	bl	800f49c <f_mount>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <write_to_SD+0x90>)
 8001950:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <write_to_SD+0x90>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <write_to_SD+0x44>
 800195a:	4816      	ldr	r0, [pc, #88]	; (80019b4 <write_to_SD+0x98>)
 800195c:	f00f fd18 	bl	8011390 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	4913      	ldr	r1, [pc, #76]	; (80019b0 <write_to_SD+0x94>)
 8001964:	4814      	ldr	r0, [pc, #80]	; (80019b8 <write_to_SD+0x9c>)
 8001966:	f00d fd99 	bl	800f49c <f_mount>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <write_to_SD+0x8c>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4619      	mov	r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <write_to_SD+0x8c>)
 8001976:	f00e fb3e 	bl	800fff6 <f_lseek>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <write_to_SD+0x90>)
 8001980:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 8001982:	4909      	ldr	r1, [pc, #36]	; (80019a8 <write_to_SD+0x8c>)
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f00e ff74 	bl	8010872 <f_puts>
 800198a:	4603      	mov	r3, r0
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <write_to_SD+0x90>)
 8001990:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <write_to_SD+0x8c>)
 8001994:	f00e fb05 	bl	800ffa2 <f_close>

	bufclear(buffer);
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7ff fc87 	bl	80012ac <bufclear>

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200018fc 	.word	0x200018fc
 80019ac:	20003964 	.word	0x20003964
 80019b0:	2000e1d0 	.word	0x2000e1d0
 80019b4:	08016788 	.word	0x08016788
 80019b8:	200008c8 	.word	0x200008c8

080019bc <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 80019c6:	2212      	movs	r2, #18
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	481f      	ldr	r0, [pc, #124]	; (8001a48 <log_to_SD+0x8c>)
 80019cc:	f00d fdac 	bl	800f528 <f_open>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <log_to_SD+0x90>)
 80019d6:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <log_to_SD+0x90>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d016      	beq.n	8001a0e <log_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening log file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <log_to_SD+0x94>)
 80019e4:	2000      	movs	r0, #0
 80019e6:	f00d fd59 	bl	800f49c <f_mount>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <log_to_SD+0x90>)
 80019f0:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <log_to_SD+0x90>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <log_to_SD+0x44>
 80019fa:	4816      	ldr	r0, [pc, #88]	; (8001a54 <log_to_SD+0x98>)
 80019fc:	f00f fcc8 	bl	8011390 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	4913      	ldr	r1, [pc, #76]	; (8001a50 <log_to_SD+0x94>)
 8001a04:	4814      	ldr	r0, [pc, #80]	; (8001a58 <log_to_SD+0x9c>)
 8001a06:	f00d fd49 	bl	800f49c <f_mount>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <log_to_SD+0x8c>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <log_to_SD+0x8c>)
 8001a16:	f00e faee 	bl	800fff6 <f_lseek>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <log_to_SD+0x90>)
 8001a20:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 8001a22:	4909      	ldr	r1, [pc, #36]	; (8001a48 <log_to_SD+0x8c>)
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f00e ff24 	bl	8010872 <f_puts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <log_to_SD+0x90>)
 8001a30:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <log_to_SD+0x8c>)
 8001a34:	f00e fab5 	bl	800ffa2 <f_close>

	bufclear(buffer);
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f7ff fc37 	bl	80012ac <bufclear>

}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20003968 	.word	0x20003968
 8001a4c:	20003964 	.word	0x20003964
 8001a50:	2000e1d0 	.word	0x2000e1d0
 8001a54:	08016788 	.word	0x08016788
 8001a58:	200008c8 	.word	0x200008c8

08001a5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a6e:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a70:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <MX_ADC1_Init+0x160>)
 8001a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a82:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a88:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a9c:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a9e:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <MX_ADC1_Init+0x164>)
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001aaa:	2208      	movs	r2, #8
 8001aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001aae:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001abc:	483e      	ldr	r0, [pc, #248]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001abe:	f005 fdf7 	bl	80076b0 <HAL_ADC_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ac8:	f000 fe42 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4836      	ldr	r0, [pc, #216]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ade:	f005 ff85 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ae8:	f000 fe32 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	4619      	mov	r1, r3
 8001af8:	482f      	ldr	r0, [pc, #188]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001afa:	f005 ff77 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b04:	f000 fe24 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b16:	f005 ff69 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b20:	f000 fe16 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b24:	230a      	movs	r3, #10
 8001b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b32:	f005 ff5b 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b3c:	f000 fe08 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b40:	230b      	movs	r3, #11
 8001b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001b44:	2305      	movs	r3, #5
 8001b46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b4e:	f005 ff4d 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001b58:	f000 fdfa 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001b60:	2306      	movs	r3, #6
 8001b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b6a:	f005 ff3f 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001b74:	f000 fdec 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b78:	230d      	movs	r3, #13
 8001b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b86:	f005 ff31 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001b90:	f000 fdde 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b94:	2310      	movs	r3, #16
 8001b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ba2:	f005 ff23 	bl	80079ec <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001bac:	f000 fdd0 	bl	8002750 <Error_Handler>
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20004998 	.word	0x20004998
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	0f000001 	.word	0x0f000001

08001bc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_ADC_MspInit+0x110>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d171      	bne.n	8001cca <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4823      	ldr	r0, [pc, #140]	; (8001cdc <HAL_ADC_MspInit+0x118>)
 8001c4e:	f006 fe8b 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c52:	2307      	movs	r3, #7
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c66:	f006 fe7f 	bl	8008968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_ADC_MspInit+0x124>)
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cb0:	f006 fa4e 	bl	8008150 <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001cba:	f000 fd49 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	200049e0 	.word	0x200049e0
 8001ce8:	40026410 	.word	0x40026410

08001cec <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <DWT_Delay_us+0x3c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001cfa:	f008 fce7 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <DWT_Delay_us+0x40>)
 8001d02:	fba3 2302 	umull	r2, r3, r3, r2
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001d10:	bf00      	nop
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <DWT_Delay_us+0x3c>)
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad2      	subs	r2, r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3f8      	bcc.n	8001d12 <DWT_Delay_us+0x26>
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	e0001000 	.word	0xe0001000
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <play>:
float eighth = 256.0;
float fourth = 512.0;


void play(float freq, float time)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d3a:	edc7 0a00 	vstr	s1, [r7]
	float value = 0.0;
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
	while(value < time){
 8001d44:	e01b      	b.n	8001d7e <play+0x4e>
		HAL_GPIO_TogglePin(BUZ_GPIO_Port, BUZ_Pin);
 8001d46:	2120      	movs	r1, #32
 8001d48:	4816      	ldr	r0, [pc, #88]	; (8001da4 <play+0x74>)
 8001d4a:	f006 ffd8 	bl	8008cfe <HAL_GPIO_TogglePin>
		DWT_Delay_us (1000*1000/freq);
 8001d4e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001da8 <play+0x78>
 8001d52:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7ff ffc3 	bl	8001cec <DWT_Delay_us>
		value += 1000/freq;
 8001d66:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001dac <play+0x7c>
 8001d6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	edc7 7a03 	vstr	s15, [r7, #12]
	while(value < time){
 8001d7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d82:	edd7 7a00 	vldr	s15, [r7]
 8001d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d4da      	bmi.n	8001d46 <play+0x16>
	}
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2120      	movs	r1, #32
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <play+0x74>)
 8001d96:	f006 ff99 	bl	8008ccc <HAL_GPIO_WritePin>
};
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020800 	.word	0x40020800
 8001da8:	49742400 	.word	0x49742400
 8001dac:	447a0000 	.word	0x447a0000

08001db0 <take_on_me>:

void take_on_me(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	play(2 * Fis,sixteenth);
 8001db4:	4be0      	ldr	r3, [pc, #896]	; (8002138 <take_on_me+0x388>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dbe:	4bdf      	ldr	r3, [pc, #892]	; (800213c <take_on_me+0x38c>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	eef0 0a47 	vmov.f32	s1, s14
 8001dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dcc:	f7ff ffb0 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001dd0:	4bda      	ldr	r3, [pc, #872]	; (800213c <take_on_me+0x38c>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dda:	ee17 0a90 	vmov	r0, s15
 8001dde:	f005 fc45 	bl	800766c <HAL_Delay>
	play(2 * Fis,sixteenth);
 8001de2:	4bd5      	ldr	r3, [pc, #852]	; (8002138 <take_on_me+0x388>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dec:	4bd3      	ldr	r3, [pc, #844]	; (800213c <take_on_me+0x38c>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	eef0 0a47 	vmov.f32	s1, s14
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	f7ff ff99 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001dfe:	4bcf      	ldr	r3, [pc, #828]	; (800213c <take_on_me+0x38c>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f005 fc2e 	bl	800766c <HAL_Delay>
	play(2 * D,eighth);
 8001e10:	4bcb      	ldr	r3, [pc, #812]	; (8002140 <take_on_me+0x390>)
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e1a:	4bca      	ldr	r3, [pc, #808]	; (8002144 <take_on_me+0x394>)
 8001e1c:	ed93 7a00 	vldr	s14, [r3]
 8001e20:	eef0 0a47 	vmov.f32	s1, s14
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f7ff ff82 	bl	8001d30 <play>
	play(B,eighth);
 8001e2c:	4bc6      	ldr	r3, [pc, #792]	; (8002148 <take_on_me+0x398>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	4bc4      	ldr	r3, [pc, #784]	; (8002144 <take_on_me+0x394>)
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	eef0 0a47 	vmov.f32	s1, s14
 8001e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e40:	f7ff ff76 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001e44:	4bbf      	ldr	r3, [pc, #764]	; (8002144 <take_on_me+0x394>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4e:	ee17 0a90 	vmov	r0, s15
 8001e52:	f005 fc0b 	bl	800766c <HAL_Delay>
	play(B,eighth);
 8001e56:	4bbc      	ldr	r3, [pc, #752]	; (8002148 <take_on_me+0x398>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	4bb9      	ldr	r3, [pc, #740]	; (8002144 <take_on_me+0x394>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	eef0 0a47 	vmov.f32	s1, s14
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f7ff ff61 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001e6e:	4bb5      	ldr	r3, [pc, #724]	; (8002144 <take_on_me+0x394>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e78:	ee17 0a90 	vmov	r0, s15
 8001e7c:	f005 fbf6 	bl	800766c <HAL_Delay>
	play(2 * E,eighth);
 8001e80:	4bb2      	ldr	r3, [pc, #712]	; (800214c <take_on_me+0x39c>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e8a:	4bae      	ldr	r3, [pc, #696]	; (8002144 <take_on_me+0x394>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	eef0 0a47 	vmov.f32	s1, s14
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f7ff ff4a 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001e9c:	4ba9      	ldr	r3, [pc, #676]	; (8002144 <take_on_me+0x394>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea6:	ee17 0a90 	vmov	r0, s15
 8001eaa:	f005 fbdf 	bl	800766c <HAL_Delay>
	play(2 * E,eighth);
 8001eae:	4ba7      	ldr	r3, [pc, #668]	; (800214c <take_on_me+0x39c>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eb8:	4ba2      	ldr	r3, [pc, #648]	; (8002144 <take_on_me+0x394>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	eef0 0a47 	vmov.f32	s1, s14
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	f7ff ff33 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001eca:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <take_on_me+0x394>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f005 fbc8 	bl	800766c <HAL_Delay>
	play(2 * E,eighth);
 8001edc:	4b9b      	ldr	r3, [pc, #620]	; (800214c <take_on_me+0x39c>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <take_on_me+0x394>)
 8001ee8:	ed93 7a00 	vldr	s14, [r3]
 8001eec:	eef0 0a47 	vmov.f32	s1, s14
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	f7ff ff1c 	bl	8001d30 <play>
	play(2 * Gis,sixteenth);
 8001ef8:	4b95      	ldr	r3, [pc, #596]	; (8002150 <take_on_me+0x3a0>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f02:	4b8e      	ldr	r3, [pc, #568]	; (800213c <take_on_me+0x38c>)
 8001f04:	ed93 7a00 	vldr	s14, [r3]
 8001f08:	eef0 0a47 	vmov.f32	s1, s14
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	f7ff ff0e 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001f14:	4b89      	ldr	r3, [pc, #548]	; (800213c <take_on_me+0x38c>)
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1e:	ee17 0a90 	vmov	r0, s15
 8001f22:	f005 fba3 	bl	800766c <HAL_Delay>
	play(2 * Gis,sixteenth);
 8001f26:	4b8a      	ldr	r3, [pc, #552]	; (8002150 <take_on_me+0x3a0>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f30:	4b82      	ldr	r3, [pc, #520]	; (800213c <take_on_me+0x38c>)
 8001f32:	ed93 7a00 	vldr	s14, [r3]
 8001f36:	eef0 0a47 	vmov.f32	s1, s14
 8001f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3e:	f7ff fef7 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001f42:	4b7e      	ldr	r3, [pc, #504]	; (800213c <take_on_me+0x38c>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4c:	ee17 0a90 	vmov	r0, s15
 8001f50:	f005 fb8c 	bl	800766c <HAL_Delay>
	play(2 * A,eighth);
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <take_on_me+0x3a4>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f5e:	4b79      	ldr	r3, [pc, #484]	; (8002144 <take_on_me+0x394>)
 8001f60:	ed93 7a00 	vldr	s14, [r3]
 8001f64:	eef0 0a47 	vmov.f32	s1, s14
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	f7ff fee0 	bl	8001d30 <play>
	play(4 * Cis,eighth);
 8001f70:	4b79      	ldr	r3, [pc, #484]	; (8002158 <take_on_me+0x3a8>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	4b71      	ldr	r3, [pc, #452]	; (8002144 <take_on_me+0x394>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	eef0 0a47 	vmov.f32	s1, s14
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	f7ff fed0 	bl	8001d30 <play>
	play(2 * A,sixteenth);
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <take_on_me+0x3a4>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f9a:	4b68      	ldr	r3, [pc, #416]	; (800213c <take_on_me+0x38c>)
 8001f9c:	ed93 7a00 	vldr	s14, [r3]
 8001fa0:	eef0 0a47 	vmov.f32	s1, s14
 8001fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa8:	f7ff fec2 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001fac:	4b63      	ldr	r3, [pc, #396]	; (800213c <take_on_me+0x38c>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb6:	ee17 0a90 	vmov	r0, s15
 8001fba:	f005 fb57 	bl	800766c <HAL_Delay>
	play(2 * A,sixteenth);
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <take_on_me+0x3a4>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	; (800213c <take_on_me+0x38c>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	eef0 0a47 	vmov.f32	s1, s14
 8001fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd6:	f7ff feab 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001fda:	4b58      	ldr	r3, [pc, #352]	; (800213c <take_on_me+0x38c>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe4:	ee17 0a90 	vmov	r0, s15
 8001fe8:	f005 fb40 	bl	800766c <HAL_Delay>
	play(2 * A,sixteenth);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <take_on_me+0x3a4>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <take_on_me+0x38c>)
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	eef0 0a47 	vmov.f32	s1, s14
 8002000:	eeb0 0a67 	vmov.f32	s0, s15
 8002004:	f7ff fe94 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <take_on_me+0x38c>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002012:	ee17 0a90 	vmov	r0, s15
 8002016:	f005 fb29 	bl	800766c <HAL_Delay>
	play(2 * E,eighth);
 800201a:	4b4c      	ldr	r3, [pc, #304]	; (800214c <take_on_me+0x39c>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <take_on_me+0x394>)
 8002026:	ed93 7a00 	vldr	s14, [r3]
 800202a:	eef0 0a47 	vmov.f32	s1, s14
 800202e:	eeb0 0a67 	vmov.f32	s0, s15
 8002032:	f7ff fe7d 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <take_on_me+0x394>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002040:	ee17 0a90 	vmov	r0, s15
 8002044:	f005 fb12 	bl	800766c <HAL_Delay>
	play(2 * D,eighth);
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <take_on_me+0x390>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <take_on_me+0x394>)
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	eef0 0a47 	vmov.f32	s1, s14
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	f7ff fe66 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <take_on_me+0x394>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206e:	ee17 0a90 	vmov	r0, s15
 8002072:	f005 fafb 	bl	800766c <HAL_Delay>
	play(2 * Fis,eighth);
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <take_on_me+0x388>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <take_on_me+0x394>)
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	eef0 0a47 	vmov.f32	s1, s14
 800208a:	eeb0 0a67 	vmov.f32	s0, s15
 800208e:	f7ff fe4f 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <take_on_me+0x394>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209c:	ee17 0a90 	vmov	r0, s15
 80020a0:	f005 fae4 	bl	800766c <HAL_Delay>
	play(2 * Fis,eighth);
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <take_on_me+0x388>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <take_on_me+0x394>)
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	eef0 0a47 	vmov.f32	s1, s14
 80020b8:	eeb0 0a67 	vmov.f32	s0, s15
 80020bc:	f7ff fe38 	bl	8001d30 <play>
	HAL_Delay(eighth);
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <take_on_me+0x394>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ca:	ee17 0a90 	vmov	r0, s15
 80020ce:	f005 facd 	bl	800766c <HAL_Delay>
	play(2 * Fis,eighth);
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <take_on_me+0x388>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <take_on_me+0x394>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	eef0 0a47 	vmov.f32	s1, s14
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	f7ff fe21 	bl	8001d30 <play>
	HAL_Delay(eighth);
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <take_on_me+0x394>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f8:	ee17 0a90 	vmov	r0, s15
 80020fc:	f005 fab6 	bl	800766c <HAL_Delay>
	play(2 * Fis,eighth);
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <take_on_me+0x388>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <take_on_me+0x394>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	eef0 0a47 	vmov.f32	s1, s14
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	f7ff fe0a 	bl	8001d30 <play>
	play(2 * E,sixteenth);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <take_on_me+0x39c>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <take_on_me+0x38c>)
 8002128:	ed93 7a00 	vldr	s14, [r3]
 800212c:	eef0 0a47 	vmov.f32	s1, s14
 8002130:	eeb0 0a67 	vmov.f32	s0, s15
 8002134:	e012      	b.n	800215c <take_on_me+0x3ac>
 8002136:	bf00      	nop
 8002138:	2000000c 	.word	0x2000000c
 800213c:	2000001c 	.word	0x2000001c
 8002140:	20000004 	.word	0x20000004
 8002144:	20000020 	.word	0x20000020
 8002148:	20000018 	.word	0x20000018
 800214c:	20000008 	.word	0x20000008
 8002150:	20000010 	.word	0x20000010
 8002154:	20000014 	.word	0x20000014
 8002158:	20000000 	.word	0x20000000
 800215c:	f7ff fde8 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <take_on_me+0x42c>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216a:	ee17 0a90 	vmov	r0, s15
 800216e:	f005 fa7d 	bl	800766c <HAL_Delay>
	play(2 * E,sixteenth);
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <take_on_me+0x430>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <take_on_me+0x42c>)
 800217e:	ed93 7a00 	vldr	s14, [r3]
 8002182:	eef0 0a47 	vmov.f32	s1, s14
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	f7ff fdd1 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <take_on_me+0x42c>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002198:	ee17 0a90 	vmov	r0, s15
 800219c:	f005 fa66 	bl	800766c <HAL_Delay>
	play(2 * Fis,eighth);
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <take_on_me+0x434>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <take_on_me+0x438>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	eef0 0a47 	vmov.f32	s1, s14
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	f7ff fdba 	bl	8001d30 <play>
	play(2 * E,eighth);
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <take_on_me+0x430>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <take_on_me+0x438>)
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	eef0 0a47 	vmov.f32	s1, s14
 80021d0:	eeb0 0a67 	vmov.f32	s0, s15
 80021d4:	f7ff fdac 	bl	8001d30 <play>

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000001c 	.word	0x2000001c
 80021e0:	20000008 	.word	0x20000008
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	20000020 	.word	0x20000020

080021ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <MX_DMA_Init+0x5c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <MX_DMA_Init+0x5c>)
 80021fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_DMA_Init+0x5c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2038      	movs	r0, #56	; 0x38
 8002214:	f005 ff65 	bl	80080e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002218:	2038      	movs	r0, #56	; 0x38
 800221a:	f005 ff7e 	bl	800811a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	203b      	movs	r0, #59	; 0x3b
 8002224:	f005 ff5d 	bl	80080e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002228:	203b      	movs	r0, #59	; 0x3b
 800222a:	f005 ff76 	bl	800811a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2045      	movs	r0, #69	; 0x45
 8002234:	f005 ff55 	bl	80080e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002238:	2045      	movs	r0, #69	; 0x45
 800223a:	f005 ff6e 	bl	800811a <HAL_NVIC_EnableIRQ>

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <start_timer>:
 *      Author: linus
 */

#include "fs_timer.h"

void start_timer(struct timer_t * t, uint32_t * tick){
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	if (t->active == 0){
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7a1b      	ldrb	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <start_timer+0x26>
		t->end = *tick + t->value;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	441a      	add	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	605a      	str	r2, [r3, #4]
		t->active = 1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	721a      	strb	r2, [r3, #8]
	}
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <check_timer>:

uint8_t check_timer(struct timer_t * t, uint32_t * tick){
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
	if ((*tick > t->end) & (t->active == 1)) return 1;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	bf8c      	ite	hi
 8002294:	2301      	movhi	r3, #1
 8002296:	2300      	movls	r3, #0
 8002298:	b2da      	uxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7a1b      	ldrb	r3, [r3, #8]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <check_timer+0x36>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <check_timer+0x38>
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b64      	ldr	r3, [pc, #400]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a63      	ldr	r2, [pc, #396]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022e4:	f043 0310 	orr.w	r3, r3, #16
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b61      	ldr	r3, [pc, #388]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a5c      	ldr	r2, [pc, #368]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b5a      	ldr	r3, [pc, #360]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b56      	ldr	r3, [pc, #344]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a55      	ldr	r2, [pc, #340]	; (8002470 <MX_GPIO_Init+0x1ac>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b4f      	ldr	r3, [pc, #316]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b48      	ldr	r3, [pc, #288]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a47      	ldr	r2, [pc, #284]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002354:	f043 0308 	orr.w	r3, r3, #8
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <MX_GPIO_Init+0x1ac>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	2110      	movs	r1, #16
 800236a:	4842      	ldr	r0, [pc, #264]	; (8002474 <MX_GPIO_Init+0x1b0>)
 800236c:	f006 fcae 	bl	8008ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	2120      	movs	r1, #32
 8002374:	4840      	ldr	r0, [pc, #256]	; (8002478 <MX_GPIO_Init+0x1b4>)
 8002376:	f006 fca9 	bl	8008ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 800237a:	2200      	movs	r2, #0
 800237c:	f64f 7180 	movw	r1, #65408	; 0xff80
 8002380:	483e      	ldr	r0, [pc, #248]	; (800247c <MX_GPIO_Init+0x1b8>)
 8002382:	f006 fca3 	bl	8008ccc <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800238c:	483c      	ldr	r0, [pc, #240]	; (8002480 <MX_GPIO_Init+0x1bc>)
 800238e:	f006 fc9d 	bl	8008ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 8002392:	2308      	movs	r3, #8
 8002394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4835      	ldr	r0, [pc, #212]	; (800247c <MX_GPIO_Init+0x1b8>)
 80023a6:	f006 fadf 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	482e      	ldr	r0, [pc, #184]	; (8002478 <MX_GPIO_Init+0x1b4>)
 80023c0:	f006 fad2 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80023c4:	2310      	movs	r3, #16
 80023c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c8:	2301      	movs	r3, #1
 80023ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	4826      	ldr	r0, [pc, #152]	; (8002474 <MX_GPIO_Init+0x1b0>)
 80023dc:	f006 fac4 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80023e0:	2320      	movs	r3, #32
 80023e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	4820      	ldr	r0, [pc, #128]	; (8002478 <MX_GPIO_Init+0x1b4>)
 80023f8:	f006 fab6 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 80023fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002400:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4819      	ldr	r0, [pc, #100]	; (800247c <MX_GPIO_Init+0x1b8>)
 8002416:	f006 faa7 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 800241a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4813      	ldr	r0, [pc, #76]	; (8002480 <MX_GPIO_Init+0x1bc>)
 8002434:	f006 fa98 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8002438:	2301      	movs	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	480e      	ldr	r0, [pc, #56]	; (8002484 <MX_GPIO_Init+0x1c0>)
 800244c:	f006 fa8c 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8002450:	2310      	movs	r3, #16
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <MX_GPIO_Init+0x1bc>)
 8002464:	f006 fa80 	bl	8008968 <HAL_GPIO_Init>

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020800 	.word	0x40020800
 800247c:	40021000 	.word	0x40021000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020c00 	.word	0x40020c00

08002488 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_I2C1_Init+0x50>)
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <MX_I2C1_Init+0x54>)
 8002490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_I2C1_Init+0x50>)
 8002494:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <MX_I2C1_Init+0x58>)
 8002496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_I2C1_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024c6:	f006 fc35 	bl	8008d34 <HAL_I2C_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024d0:	f000 f93e 	bl	8002750 <Error_Handler>
  }

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20004a40 	.word	0x20004a40
 80024dc:	40005400 	.word	0x40005400
 80024e0:	00061a80 	.word	0x00061a80

080024e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <MX_I2C2_Init+0x50>)
 80024ea:	4a13      	ldr	r2, [pc, #76]	; (8002538 <MX_I2C2_Init+0x54>)
 80024ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_I2C2_Init+0x50>)
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <MX_I2C2_Init+0x58>)
 80024f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MX_I2C2_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_I2C2_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_I2C2_Init+0x50>)
 8002502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002506:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <MX_I2C2_Init+0x50>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_I2C2_Init+0x50>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <MX_I2C2_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_I2C2_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	; (8002534 <MX_I2C2_Init+0x50>)
 8002522:	f006 fc07 	bl	8008d34 <HAL_I2C_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800252c:	f000 f910 	bl	8002750 <Error_Handler>
  }

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20004a94 	.word	0x20004a94
 8002538:	40005800 	.word	0x40005800
 800253c:	000186a0 	.word	0x000186a0

08002540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_I2C_MspInit+0xe8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d12c      	bne.n	80025bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_I2C_MspInit+0xec>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a30      	ldr	r2, [pc, #192]	; (800262c <HAL_I2C_MspInit+0xec>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_I2C_MspInit+0xec>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800257e:	23c0      	movs	r3, #192	; 0xc0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002582:	2312      	movs	r3, #18
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002586:	2301      	movs	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800258e:	2304      	movs	r3, #4
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	4825      	ldr	r0, [pc, #148]	; (8002630 <HAL_I2C_MspInit+0xf0>)
 800259a:	f006 f9e5 	bl	8008968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a21      	ldr	r2, [pc, #132]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80025ba:	e031      	b.n	8002620 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_I2C_MspInit+0xf4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12c      	bne.n	8002620 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e8:	2312      	movs	r3, #18
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025f4:	2304      	movs	r3, #4
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	4619      	mov	r1, r3
 80025fe:	480c      	ldr	r0, [pc, #48]	; (8002630 <HAL_I2C_MspInit+0xf0>)
 8002600:	f006 f9b2 	bl	8008968 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_I2C_MspInit+0xec>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_I2C_MspInit+0xec>)
 800260e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002612:	6413      	str	r3, [r2, #64]	; 0x40
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_I2C_MspInit+0xec>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	bf00      	nop
 8002622:	3730      	adds	r7, #48	; 0x30
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40005400 	.word	0x40005400
 800262c:	40023800 	.word	0x40023800
 8002630:	40020400 	.word	0x40020400
 8002634:	40005800 	.word	0x40005800

08002638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f004 ffa4 	bl	8007588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f81c 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f7ff fe3e 	bl	80022c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002648:	f7ff fdd0 	bl	80021ec <MX_DMA_Init>
  MX_I2C1_Init();
 800264c:	f7ff ff1c 	bl	8002488 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002650:	f001 fba6 	bl	8003da0 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002654:	f7ff fa02 	bl	8001a5c <MX_ADC1_Init>
  MX_I2C2_Init();
 8002658:	f7ff ff44 	bl	80024e4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800265c:	f000 ff6e 	bl	800353c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8002660:	f001 fb68 	bl	8003d34 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002664:	f00a fe08 	bl	800d278 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8002668:	f7fe fcac 	bl	8000fc4 <turn_off_HAWKs>
  turn_off_TDs();
 800266c:	f7fe fcda 	bl	8001024 <turn_off_TDs>

  schedulerinit();
 8002670:	f000 f8d6 	bl	8002820 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8002674:	f000 f9ec 	bl	8002a50 <scheduler>
 8002678:	e7fc      	b.n	8002674 <main+0x3c>
	...

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b094      	sub	sp, #80	; 0x50
 8002680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	2230      	movs	r2, #48	; 0x30
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f00e f9a7 	bl	80109de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <SystemClock_Config+0xcc>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <SystemClock_Config+0xcc>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6413      	str	r3, [r2, #64]	; 0x40
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <SystemClock_Config+0xcc>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026bc:	2300      	movs	r3, #0
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <SystemClock_Config+0xd0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <SystemClock_Config+0xd0>)
 80026c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <SystemClock_Config+0xd0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026d8:	2302      	movs	r3, #2
 80026da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026dc:	2301      	movs	r3, #1
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026e0:	2310      	movs	r3, #16
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e4:	2302      	movs	r3, #2
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026ec:	2308      	movs	r3, #8
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026f0:	23a8      	movs	r3, #168	; 0xa8
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f4:	2302      	movs	r3, #2
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026f8:	2307      	movs	r3, #7
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fc:	f107 0320 	add.w	r3, r7, #32
 8002700:	4618      	mov	r0, r3
 8002702:	f007 fbdb 	bl	8009ebc <HAL_RCC_OscConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800270c:	f000 f820 	bl	8002750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002710:	230f      	movs	r3, #15
 8002712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002714:	2302      	movs	r3, #2
 8002716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800271c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	2105      	movs	r1, #5
 800272e:	4618      	mov	r0, r3
 8002730:	f007 fe34 	bl	800a39c <HAL_RCC_ClockConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800273a:	f000 f809 	bl	8002750 <Error_Handler>
  }
}
 800273e:	bf00      	nop
 8002740:	3750      	adds	r7, #80	; 0x50
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <launch_detect>:
float Ay2[FAKE_FILE_LEN];
float Az2[FAKE_FILE_LEN];

float launch_detect_buffer[5];

uint8_t launch_detect(float a1, float a2){
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	ed87 0a01 	vstr	s0, [r7, #4]
 800276a:	edc7 0a00 	vstr	s1, [r7]
	for (int i = 1; i < 5; i++){
 800276e:	2301      	movs	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e00e      	b.n	8002792 <launch_detect+0x32>
		launch_detect_buffer[i-1] = launch_detect_buffer[i-1];
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3b01      	subs	r3, #1
 800277c:	4926      	ldr	r1, [pc, #152]	; (8002818 <launch_detect+0xb8>)
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	440a      	add	r2, r1
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	4924      	ldr	r1, [pc, #144]	; (8002818 <launch_detect+0xb8>)
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < 5; i++){
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b04      	cmp	r3, #4
 8002796:	dded      	ble.n	8002774 <launch_detect+0x14>
	}
	launch_detect_buffer[4] = (a1 + a2) / 2;
 8002798:	ed97 7a01 	vldr	s14, [r7, #4]
 800279c:	edd7 7a00 	vldr	s15, [r7]
 80027a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ac:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <launch_detect+0xb8>)
 80027ae:	edc3 7a04 	vstr	s15, [r3, #16]
	float sum_a = 0;
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 5; i++){
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e00e      	b.n	80027dc <launch_detect+0x7c>
		sum_a += launch_detect_buffer[i];
 80027be:	4a16      	ldr	r2, [pc, #88]	; (8002818 <launch_detect+0xb8>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80027ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d2:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < 5; i++){
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	dded      	ble.n	80027be <launch_detect+0x5e>
	}
	sum_a /= 5;
 80027e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80027ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ee:	edc7 7a04 	vstr	s15, [r7, #16]

	// if average of acceleration over 5 measurements is higher than 4G, launch has been detected.
	if (sum_a >= 40) return 1;
 80027f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800281c <launch_detect+0xbc>
 80027fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	db01      	blt.n	8002808 <launch_detect+0xa8>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <launch_detect+0xaa>
	return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	2000cf38 	.word	0x2000cf38
 800281c:	42200000 	.word	0x42200000

08002820 <schedulerinit>:

void schedulerinit () {
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af06      	add	r7, sp, #24
	ms5607_init(&BARO1);
 8002826:	486b      	ldr	r0, [pc, #428]	; (80029d4 <schedulerinit+0x1b4>)
 8002828:	f002 fa34 	bl	8004c94 <ms5607_init>
	ms5607_init(&BARO2);
 800282c:	486a      	ldr	r0, [pc, #424]	; (80029d8 <schedulerinit+0x1b8>)
 800282e:	f002 fa31 	bl	8004c94 <ms5607_init>
	sht31_init(&TEMP);
 8002832:	486a      	ldr	r0, [pc, #424]	; (80029dc <schedulerinit+0x1bc>)
 8002834:	f002 fdd6 	bl	80053e4 <sht31_init>
	icm20601_init(&IMU1);
 8002838:	4869      	ldr	r0, [pc, #420]	; (80029e0 <schedulerinit+0x1c0>)
 800283a:	f001 ff82 	bl	8004742 <icm20601_init>
	icm20601_init(&IMU2);
 800283e:	4869      	ldr	r0, [pc, #420]	; (80029e4 <schedulerinit+0x1c4>)
 8002840:	f001 ff7f 	bl	8004742 <icm20601_init>
	h3l_init(&ACCEL);
 8002844:	4868      	ldr	r0, [pc, #416]	; (80029e8 <schedulerinit+0x1c8>)
 8002846:	f001 fcb3 	bl	80041b0 <h3l_init>
	init_ADC();
 800284a:	f7fe fbfd 	bl	8001048 <init_ADC>

	turn_on(&STAT);
 800284e:	4867      	ldr	r0, [pc, #412]	; (80029ec <schedulerinit+0x1cc>)
 8002850:	f002 fa00 	bl	8004c54 <turn_on>
	HAL_Delay(300);
 8002854:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002858:	f004 ff08 	bl	800766c <HAL_Delay>
	turn_on(&SAVE);
 800285c:	4864      	ldr	r0, [pc, #400]	; (80029f0 <schedulerinit+0x1d0>)
 800285e:	f002 f9f9 	bl	8004c54 <turn_on>
	HAL_Delay(300);
 8002862:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002866:	f004 ff01 	bl	800766c <HAL_Delay>
	turn_on(&PRGM);
 800286a:	4862      	ldr	r0, [pc, #392]	; (80029f4 <schedulerinit+0x1d4>)
 800286c:	f002 f9f2 	bl	8004c54 <turn_on>
	HAL_Delay(300);
 8002870:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002874:	f004 fefa 	bl	800766c <HAL_Delay>

	turn_off(&STAT);
 8002878:	485c      	ldr	r0, [pc, #368]	; (80029ec <schedulerinit+0x1cc>)
 800287a:	f002 f9fb 	bl	8004c74 <turn_off>
	turn_off(&SAVE);
 800287e:	485c      	ldr	r0, [pc, #368]	; (80029f0 <schedulerinit+0x1d0>)
 8002880:	f002 f9f8 	bl	8004c74 <turn_off>
	turn_off(&PRGM);
 8002884:	485b      	ldr	r0, [pc, #364]	; (80029f4 <schedulerinit+0x1d4>)
 8002886:	f002 f9f5 	bl	8004c74 <turn_off>

	turn_on(&SAVE);
 800288a:	4859      	ldr	r0, [pc, #356]	; (80029f0 <schedulerinit+0x1d0>)
 800288c:	f002 f9e2 	bl	8004c54 <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 8002890:	4959      	ldr	r1, [pc, #356]	; (80029f8 <schedulerinit+0x1d8>)
 8002892:	485a      	ldr	r0, [pc, #360]	; (80029fc <schedulerinit+0x1dc>)
 8002894:	f7fe fd24 	bl	80012e0 <init_sd>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <schedulerinit+0x1e0>)
 800289e:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 80028a0:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <schedulerinit+0x1e0>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <schedulerinit+0x90>
		turn_off(&SAVE);
 80028a8:	4851      	ldr	r0, [pc, #324]	; (80029f0 <schedulerinit+0x1d0>)
 80028aa:	f002 f9e3 	bl	8004c74 <turn_off>
 80028ae:	e00b      	b.n	80028c8 <schedulerinit+0xa8>
	} else {
		turn_on(&RDY);
 80028b0:	4854      	ldr	r0, [pc, #336]	; (8002a04 <schedulerinit+0x1e4>)
 80028b2:	f002 f9cf 	bl	8004c54 <turn_on>
		HAL_Delay(100);
 80028b6:	2064      	movs	r0, #100	; 0x64
 80028b8:	f004 fed8 	bl	800766c <HAL_Delay>
		turn_off(&RDY);
 80028bc:	4851      	ldr	r0, [pc, #324]	; (8002a04 <schedulerinit+0x1e4>)
 80028be:	f002 f9d9 	bl	8004c74 <turn_off>
		HAL_Delay(100);
 80028c2:	2064      	movs	r0, #100	; 0x64
 80028c4:	f004 fed2 	bl	800766c <HAL_Delay>
	}
	if (DEBUG_PRINT == 1) printf("num_dat_file: %hu \n",num_dat_file);
	if (DEBUG_PRINT == 1) printf("num_log_file: %hu \n",num_log_file);

	num_log_file ++;
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <schedulerinit+0x1d8>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <schedulerinit+0x1d8>)
 80028d2:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 80028d4:	4b49      	ldr	r3, [pc, #292]	; (80029fc <schedulerinit+0x1dc>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b47      	ldr	r3, [pc, #284]	; (80029fc <schedulerinit+0x1dc>)
 80028de:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <schedulerinit+0x1dc>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4948      	ldr	r1, [pc, #288]	; (8002a08 <schedulerinit+0x1e8>)
 80028e8:	4848      	ldr	r0, [pc, #288]	; (8002a0c <schedulerinit+0x1ec>)
 80028ea:	f00e fd59 	bl	80113a0 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",FILE_NAME);

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 80028ee:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <schedulerinit+0x1d8>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	4946      	ldr	r1, [pc, #280]	; (8002a10 <schedulerinit+0x1f0>)
 80028f6:	4847      	ldr	r0, [pc, #284]	; (8002a14 <schedulerinit+0x1f4>)
 80028f8:	f00e fd52 	bl	80113a0 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",LOG_NAME);

	SD_state = init_file(FILE_NAME, LOG_NAME);
 80028fc:	4945      	ldr	r1, [pc, #276]	; (8002a14 <schedulerinit+0x1f4>)
 80028fe:	4843      	ldr	r0, [pc, #268]	; (8002a0c <schedulerinit+0x1ec>)
 8002900:	f7fe fda8 	bl	8001454 <init_file>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <schedulerinit+0x1e0>)
 800290a:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 800290c:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <schedulerinit+0x1e0>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <schedulerinit+0xfc>
		turn_off(&SAVE);
 8002914:	4836      	ldr	r0, [pc, #216]	; (80029f0 <schedulerinit+0x1d0>)
 8002916:	f002 f9ad 	bl	8004c74 <turn_off>
 800291a:	e00b      	b.n	8002934 <schedulerinit+0x114>
	} else {
		turn_on(&RDY);
 800291c:	4839      	ldr	r0, [pc, #228]	; (8002a04 <schedulerinit+0x1e4>)
 800291e:	f002 f999 	bl	8004c54 <turn_on>
		HAL_Delay(100);
 8002922:	2064      	movs	r0, #100	; 0x64
 8002924:	f004 fea2 	bl	800766c <HAL_Delay>
		turn_off(&RDY);
 8002928:	4836      	ldr	r0, [pc, #216]	; (8002a04 <schedulerinit+0x1e4>)
 800292a:	f002 f9a3 	bl	8004c74 <turn_off>
		HAL_Delay(100);
 800292e:	2064      	movs	r0, #100	; 0x64
 8002930:	f004 fe9c 	bl	800766c <HAL_Delay>
	}
	turn_on(&RDY);
 8002934:	4833      	ldr	r0, [pc, #204]	; (8002a04 <schedulerinit+0x1e4>)
 8002936:	f002 f98d 	bl	8004c54 <turn_on>
	HAL_Delay(1000);
 800293a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293e:	f004 fe95 	bl	800766c <HAL_Delay>

	bufclear(buffer);
 8002942:	4835      	ldr	r0, [pc, #212]	; (8002a18 <schedulerinit+0x1f8>)
 8002944:	f7fe fcb2 	bl	80012ac <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 8002948:	f004 fe84 	bl	8007654 <HAL_GetTick>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	4932      	ldr	r1, [pc, #200]	; (8002a1c <schedulerinit+0x1fc>)
 8002952:	4831      	ldr	r0, [pc, #196]	; (8002a18 <schedulerinit+0x1f8>)
 8002954:	f00e fd24 	bl	80113a0 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 8002958:	492f      	ldr	r1, [pc, #188]	; (8002a18 <schedulerinit+0x1f8>)
 800295a:	482e      	ldr	r0, [pc, #184]	; (8002a14 <schedulerinit+0x1f4>)
 800295c:	f7ff f82e 	bl	80019bc <log_to_SD>

	//coffin_dance(1);
	take_on_me();
 8002960:	f7ff fa26 	bl	8001db0 <take_on_me>

	if (FAKE_DATA == 1)
 8002964:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <schedulerinit+0x200>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d111      	bne.n	8002990 <schedulerinit+0x170>
	{
		read_from_SD("FAKE.CSV", TIME, P1, P2, Ax1, Ay1, Az1, Ax2, Ay2, Az2);
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <schedulerinit+0x204>)
 800296e:	9305      	str	r3, [sp, #20]
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <schedulerinit+0x208>)
 8002972:	9304      	str	r3, [sp, #16]
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <schedulerinit+0x20c>)
 8002976:	9303      	str	r3, [sp, #12]
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <schedulerinit+0x210>)
 800297a:	9302      	str	r3, [sp, #8]
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <schedulerinit+0x214>)
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <schedulerinit+0x218>)
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <schedulerinit+0x21c>)
 8002986:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <schedulerinit+0x220>)
 8002988:	492e      	ldr	r1, [pc, #184]	; (8002a44 <schedulerinit+0x224>)
 800298a:	482f      	ldr	r0, [pc, #188]	; (8002a48 <schedulerinit+0x228>)
 800298c:	f7fe fe3c 	bl	8001608 <read_from_SD>
	}

	float ground_pressure = 0;
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
	float ground_temperature = 0;
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	603b      	str	r3, [r7, #0]

	config_baro(&TEMP, &BARO1, &BARO2, &ground_temperature, &ground_pressure);
 800299c:	463a      	mov	r2, r7
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <schedulerinit+0x1b8>)
 80029a6:	490b      	ldr	r1, [pc, #44]	; (80029d4 <schedulerinit+0x1b4>)
 80029a8:	480c      	ldr	r0, [pc, #48]	; (80029dc <schedulerinit+0x1bc>)
 80029aa:	f000 ffe9 	bl	8003980 <config_baro>
	config_imu(&IMU1, &IMU2);
 80029ae:	490d      	ldr	r1, [pc, #52]	; (80029e4 <schedulerinit+0x1c4>)
 80029b0:	480b      	ldr	r0, [pc, #44]	; (80029e0 <schedulerinit+0x1c0>)
 80029b2:	f001 f8e7 	bl	8003b84 <config_imu>

	reset_state_est_state(ground_pressure, ground_temperature, &state_est_state);
 80029b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ba:	ed97 7a00 	vldr	s14, [r7]
 80029be:	4823      	ldr	r0, [pc, #140]	; (8002a4c <schedulerinit+0x22c>)
 80029c0:	eef0 0a47 	vmov.f32	s1, s14
 80029c4:	eeb0 0a67 	vmov.f32	s0, s15
 80029c8:	f003 fc04 	bl	80061d4 <reset_state_est_state>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200000e8 	.word	0x200000e8
 80029d8:	20000108 	.word	0x20000108
 80029dc:	20000148 	.word	0x20000148
 80029e0:	20000128 	.word	0x20000128
 80029e4:	20000138 	.word	0x20000138
 80029e8:	20000158 	.word	0x20000158
 80029ec:	200000c8 	.word	0x200000c8
 80029f0:	200000d0 	.word	0x200000d0
 80029f4:	200000d8 	.word	0x200000d8
 80029f8:	200003b2 	.word	0x200003b2
 80029fc:	200003b0 	.word	0x200003b0
 8002a00:	200003b4 	.word	0x200003b4
 8002a04:	200000e0 	.word	0x200000e0
 8002a08:	080167ac 	.word	0x080167ac
 8002a0c:	2000dfc8 	.word	0x2000dfc8
 8002a10:	080167b8 	.word	0x080167b8
 8002a14:	20006af0 	.word	0x20006af0
 8002a18:	2000cb30 	.word	0x2000cb30
 8002a1c:	080167c4 	.word	0x080167c4
 8002a20:	20000858 	.word	0x20000858
 8002a24:	20004af0 	.word	0x20004af0
 8002a28:	2000cfc8 	.word	0x2000cfc8
 8002a2c:	20009b20 	.word	0x20009b20
 8002a30:	2000bb30 	.word	0x2000bb30
 8002a34:	20006afc 	.word	0x20006afc
 8002a38:	2000ab30 	.word	0x2000ab30
 8002a3c:	20008b20 	.word	0x20008b20
 8002a40:	20007afc 	.word	0x20007afc
 8002a44:	20005af0 	.word	0x20005af0
 8002a48:	080167e0 	.word	0x080167e0
 8002a4c:	200003c0 	.word	0x200003c0

08002a50 <scheduler>:

void scheduler (){
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8002a58:	af44      	add	r7, sp, #272	; 0x110

	tick = HAL_GetTick();
 8002a5a:	f004 fdfb 	bl	8007654 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <scheduler+0x214>)
 8002a62:	601a      	str	r2, [r3, #0]

	// TASK LED
	if(tick >= getNextExecution(&RDY_TASK)){
 8002a64:	4880      	ldr	r0, [pc, #512]	; (8002c68 <scheduler+0x218>)
 8002a66:	f000 fd59 	bl	800351c <getNextExecution>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b7d      	ldr	r3, [pc, #500]	; (8002c64 <scheduler+0x214>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d806      	bhi.n	8002a82 <scheduler+0x32>
		RDY_TASK.last_call = tick;
 8002a74:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <scheduler+0x214>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7b      	ldr	r2, [pc, #492]	; (8002c68 <scheduler+0x218>)
 8002a7a:	6013      	str	r3, [r2, #0]
		toggle(&RDY);
 8002a7c:	487b      	ldr	r0, [pc, #492]	; (8002c6c <scheduler+0x21c>)
 8002a7e:	f002 f8d9 	bl	8004c34 <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 8002a82:	487b      	ldr	r0, [pc, #492]	; (8002c70 <scheduler+0x220>)
 8002a84:	f000 fd4a 	bl	800351c <getNextExecution>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <scheduler+0x214>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d806      	bhi.n	8002aa0 <scheduler+0x50>
		SAVE_TASK.last_call = tick;
 8002a92:	4b74      	ldr	r3, [pc, #464]	; (8002c64 <scheduler+0x214>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a76      	ldr	r2, [pc, #472]	; (8002c70 <scheduler+0x220>)
 8002a98:	6013      	str	r3, [r2, #0]
		toggle(&SAVE);
 8002a9a:	4876      	ldr	r0, [pc, #472]	; (8002c74 <scheduler+0x224>)
 8002a9c:	f002 f8ca 	bl	8004c34 <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 8002aa0:	4875      	ldr	r0, [pc, #468]	; (8002c78 <scheduler+0x228>)
 8002aa2:	f000 fd3b 	bl	800351c <getNextExecution>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b6e      	ldr	r3, [pc, #440]	; (8002c64 <scheduler+0x214>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d806      	bhi.n	8002abe <scheduler+0x6e>
		STAT_TASK.last_call = tick;
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <scheduler+0x214>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a70      	ldr	r2, [pc, #448]	; (8002c78 <scheduler+0x228>)
 8002ab6:	6013      	str	r3, [r2, #0]
		toggle(&STAT);
 8002ab8:	4870      	ldr	r0, [pc, #448]	; (8002c7c <scheduler+0x22c>)
 8002aba:	f002 f8bb 	bl	8004c34 <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 8002abe:	4870      	ldr	r0, [pc, #448]	; (8002c80 <scheduler+0x230>)
 8002ac0:	f000 fd2c 	bl	800351c <getNextExecution>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <scheduler+0x214>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d806      	bhi.n	8002adc <scheduler+0x8c>
		PRGM_TASK.last_call = tick;
 8002ace:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <scheduler+0x214>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6b      	ldr	r2, [pc, #428]	; (8002c80 <scheduler+0x230>)
 8002ad4:	6013      	str	r3, [r2, #0]
		toggle(&PRGM);
 8002ad6:	486b      	ldr	r0, [pc, #428]	; (8002c84 <scheduler+0x234>)
 8002ad8:	f002 f8ac 	bl	8004c34 <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 8002adc:	486a      	ldr	r0, [pc, #424]	; (8002c88 <scheduler+0x238>)
 8002ade:	f000 fd1d 	bl	800351c <getNextExecution>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <scheduler+0x214>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d808      	bhi.n	8002afe <scheduler+0xae>
		SHT_TASK.last_call = tick;
 8002aec:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <scheduler+0x214>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <scheduler+0x238>)
 8002af2:	6013      	str	r3, [r2, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8002af4:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <scheduler+0x23c>)
 8002af6:	4966      	ldr	r1, [pc, #408]	; (8002c90 <scheduler+0x240>)
 8002af8:	4866      	ldr	r0, [pc, #408]	; (8002c94 <scheduler+0x244>)
 8002afa:	f002 fcc9 	bl	8005490 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 8002afe:	4866      	ldr	r0, [pc, #408]	; (8002c98 <scheduler+0x248>)
 8002b00:	f000 fd0c 	bl	800351c <getNextExecution>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <scheduler+0x214>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d830      	bhi.n	8002b70 <scheduler+0x120>

		switch(BARO_TASK.stage){
 8002b0e:	4b62      	ldr	r3, [pc, #392]	; (8002c98 <scheduler+0x248>)
 8002b10:	7a1b      	ldrb	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <scheduler+0xcc>
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d010      	beq.n	8002b3c <scheduler+0xec>
 8002b1a:	e029      	b.n	8002b70 <scheduler+0x120>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 8002b1c:	495f      	ldr	r1, [pc, #380]	; (8002c9c <scheduler+0x24c>)
 8002b1e:	4860      	ldr	r0, [pc, #384]	; (8002ca0 <scheduler+0x250>)
 8002b20:	f002 f966 	bl	8004df0 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 8002b24:	495f      	ldr	r1, [pc, #380]	; (8002ca4 <scheduler+0x254>)
 8002b26:	4860      	ldr	r0, [pc, #384]	; (8002ca8 <scheduler+0x258>)
 8002b28:	f002 f962 	bl	8004df0 <ms5607_prep_pressure>
				BARO_TASK.last_call = tick;
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <scheduler+0x214>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a59      	ldr	r2, [pc, #356]	; (8002c98 <scheduler+0x248>)
 8002b32:	6013      	str	r3, [r2, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 8002b34:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <scheduler+0x248>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	721a      	strb	r2, [r3, #8]
				break;
 8002b3a:	e019      	b.n	8002b70 <scheduler+0x120>
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 8002b3c:	4957      	ldr	r1, [pc, #348]	; (8002c9c <scheduler+0x24c>)
 8002b3e:	4858      	ldr	r0, [pc, #352]	; (8002ca0 <scheduler+0x250>)
 8002b40:	f002 f99f 	bl	8004e82 <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 8002b44:	4957      	ldr	r1, [pc, #348]	; (8002ca4 <scheduler+0x254>)
 8002b46:	4858      	ldr	r0, [pc, #352]	; (8002ca8 <scheduler+0x258>)
 8002b48:	f002 f99b 	bl	8004e82 <ms5607_read_pressure>
				BARO_TASK.last_call = tick;
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <scheduler+0x214>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a51      	ldr	r2, [pc, #324]	; (8002c98 <scheduler+0x248>)
 8002b52:	6013      	str	r3, [r2, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 8002b54:	4a55      	ldr	r2, [pc, #340]	; (8002cac <scheduler+0x25c>)
 8002b56:	4956      	ldr	r1, [pc, #344]	; (8002cb0 <scheduler+0x260>)
 8002b58:	4851      	ldr	r0, [pc, #324]	; (8002ca0 <scheduler+0x250>)
 8002b5a:	f002 f9dd 	bl	8004f18 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 8002b5e:	4a55      	ldr	r2, [pc, #340]	; (8002cb4 <scheduler+0x264>)
 8002b60:	4955      	ldr	r1, [pc, #340]	; (8002cb8 <scheduler+0x268>)
 8002b62:	4851      	ldr	r0, [pc, #324]	; (8002ca8 <scheduler+0x258>)
 8002b64:	f002 f9d8 	bl	8004f18 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <scheduler+0x248>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	721a      	strb	r2, [r3, #8]
				break;
 8002b6e:	bf00      	nop
		}
	}

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 8002b70:	4852      	ldr	r0, [pc, #328]	; (8002cbc <scheduler+0x26c>)
 8002b72:	f000 fcd3 	bl	800351c <getNextExecution>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <scheduler+0x214>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d80b      	bhi.n	8002b98 <scheduler+0x148>
		IMU_TASK.last_call = tick;
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <scheduler+0x214>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <scheduler+0x26c>)
 8002b86:	6013      	str	r3, [r2, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 8002b88:	494d      	ldr	r1, [pc, #308]	; (8002cc0 <scheduler+0x270>)
 8002b8a:	484e      	ldr	r0, [pc, #312]	; (8002cc4 <scheduler+0x274>)
 8002b8c:	f001 ff7c 	bl	8004a88 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <scheduler+0x278>)
 8002b92:	484e      	ldr	r0, [pc, #312]	; (8002ccc <scheduler+0x27c>)
 8002b94:	f001 ff78 	bl	8004a88 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 8002b98:	484d      	ldr	r0, [pc, #308]	; (8002cd0 <scheduler+0x280>)
 8002b9a:	f000 fcbf 	bl	800351c <getNextExecution>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <scheduler+0x214>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d80b      	bhi.n	8002bc0 <scheduler+0x170>
		ACCEL_TASK.last_call = tick;
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <scheduler+0x214>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a48      	ldr	r2, [pc, #288]	; (8002cd0 <scheduler+0x280>)
 8002bae:	6013      	str	r3, [r2, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 8002bb0:	4948      	ldr	r1, [pc, #288]	; (8002cd4 <scheduler+0x284>)
 8002bb2:	4849      	ldr	r0, [pc, #292]	; (8002cd8 <scheduler+0x288>)
 8002bb4:	f001 fb46 	bl	8004244 <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 8002bb8:	4948      	ldr	r1, [pc, #288]	; (8002cdc <scheduler+0x28c>)
 8002bba:	4847      	ldr	r0, [pc, #284]	; (8002cd8 <scheduler+0x288>)
 8002bbc:	f001 fc40 	bl	8004440 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 8002bc0:	4847      	ldr	r0, [pc, #284]	; (8002ce0 <scheduler+0x290>)
 8002bc2:	f000 fcab 	bl	800351c <getNextExecution>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <scheduler+0x214>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d826      	bhi.n	8002c1e <scheduler+0x1ce>
		ADC_TASK.last_call = tick;
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <scheduler+0x214>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <scheduler+0x290>)
 8002bd6:	6013      	str	r3, [r2, #0]
		read_ADC(adc_dat);
 8002bd8:	4842      	ldr	r0, [pc, #264]	; (8002ce4 <scheduler+0x294>)
 8002bda:	f7fe fa45 	bl	8001068 <read_ADC>
		if (DEBUG_PRINT == 1) printf("4 %4.2f V \n", adc_dat[3]);
		if (DEBUG_PRINT == 1) printf("5 %4.2f V \n", adc_dat[4]);
		if (DEBUG_PRINT == 1) printf("6 %4.2f V \n", adc_dat[5]);
		if (DEBUG_PRINT == 1) printf("7 %4.2f V \n", adc_dat[6]);
		if (DEBUG_PRINT == 1) printf("8 %4.2f C \n", adc_dat[7]);
		V_TD1 = adc_dat[0];
 8002bde:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <scheduler+0x294>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <scheduler+0x298>)
 8002be4:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 8002be6:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <scheduler+0x294>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4a40      	ldr	r2, [pc, #256]	; (8002cec <scheduler+0x29c>)
 8002bec:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <scheduler+0x294>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4a3f      	ldr	r2, [pc, #252]	; (8002cf0 <scheduler+0x2a0>)
 8002bf4:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <scheduler+0x294>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a3e      	ldr	r2, [pc, #248]	; (8002cf4 <scheduler+0x2a4>)
 8002bfc:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <scheduler+0x294>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	; (8002cf8 <scheduler+0x2a8>)
 8002c04:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 8002c06:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <scheduler+0x294>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <scheduler+0x2ac>)
 8002c0c:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 8002c0e:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <scheduler+0x294>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <scheduler+0x2b0>)
 8002c14:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 8002c16:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <scheduler+0x294>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4a3a      	ldr	r2, [pc, #232]	; (8002d04 <scheduler+0x2b4>)
 8002c1c:	6013      	str	r3, [r2, #0]
	}

	// TASK STATE ESTIMATION

	if(tick >= getNextExecution(&STATE_EST_TASK)){
 8002c1e:	483a      	ldr	r0, [pc, #232]	; (8002d08 <scheduler+0x2b8>)
 8002c20:	f000 fc7c 	bl	800351c <getNextExecution>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <scheduler+0x214>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	f200 820b 	bhi.w	8003046 <scheduler+0x5f6>
		STATE_EST_TASK.last_call = tick;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <scheduler+0x214>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <scheduler+0x2b8>)
 8002c36:	6013      	str	r3, [r2, #0]

		if (FAKE_DATA == 1){
 8002c38:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <scheduler+0x2bc>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 80c5 	bne.w	8002dcc <scheduler+0x37c>

			// if file does not exist, continue with nominal operation
			if (TIME[counter] == 0){
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <scheduler+0x2c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <scheduler+0x2c4>)
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	d15e      	bne.n	8002d18 <scheduler+0x2c8>
				FAKE_DATA = 0;
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <scheduler+0x2bc>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e0ac      	b.n	8002dbc <scheduler+0x36c>
 8002c62:	bf00      	nop
 8002c64:	2000cf30 	.word	0x2000cf30
 8002c68:	20000064 	.word	0x20000064
 8002c6c:	200000e0 	.word	0x200000e0
 8002c70:	20000084 	.word	0x20000084
 8002c74:	200000d0 	.word	0x200000d0
 8002c78:	20000074 	.word	0x20000074
 8002c7c:	200000c8 	.word	0x200000c8
 8002c80:	20000094 	.word	0x20000094
 8002c84:	200000d8 	.word	0x200000d8
 8002c88:	20000034 	.word	0x20000034
 8002c8c:	2000ab28 	.word	0x2000ab28
 8002c90:	2000cf80 	.word	0x2000cf80
 8002c94:	20000148 	.word	0x20000148
 8002c98:	20000024 	.word	0x20000024
 8002c9c:	2000cf4c 	.word	0x2000cf4c
 8002ca0:	200000e8 	.word	0x200000e8
 8002ca4:	20004aec 	.word	0x20004aec
 8002ca8:	20000108 	.word	0x20000108
 8002cac:	200003a8 	.word	0x200003a8
 8002cb0:	200003a0 	.word	0x200003a0
 8002cb4:	200003ac 	.word	0x200003ac
 8002cb8:	200003a4 	.word	0x200003a4
 8002cbc:	2000036c 	.word	0x2000036c
 8002cc0:	2000cf88 	.word	0x2000cf88
 8002cc4:	20000128 	.word	0x20000128
 8002cc8:	2000cf54 	.word	0x2000cf54
 8002ccc:	20000138 	.word	0x20000138
 8002cd0:	2000037c 	.word	0x2000037c
 8002cd4:	20008afc 	.word	0x20008afc
 8002cd8:	20000158 	.word	0x20000158
 8002cdc:	20008b14 	.word	0x20008b14
 8002ce0:	20000044 	.word	0x20000044
 8002ce4:	2000cfa4 	.word	0x2000cfa4
 8002ce8:	20008b10 	.word	0x20008b10
 8002cec:	2000ab20 	.word	0x2000ab20
 8002cf0:	2000cf34 	.word	0x2000cf34
 8002cf4:	2000ab24 	.word	0x2000ab24
 8002cf8:	2000cf50 	.word	0x2000cf50
 8002cfc:	2000cf70 	.word	0x2000cf70
 8002d00:	2000ab2c 	.word	0x2000ab2c
 8002d04:	20004ae8 	.word	0x20004ae8
 8002d08:	20000054 	.word	0x20000054
 8002d0c:	20000858 	.word	0x20000858
 8002d10:	2000039c 	.word	0x2000039c
 8002d14:	20005af0 	.word	0x20005af0
			} else {
				// use fake/old data from SD card
				fake_tick = TIME[counter];
 8002d18:	4b82      	ldr	r3, [pc, #520]	; (8002f24 <scheduler+0x4d4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a82      	ldr	r2, [pc, #520]	; (8002f28 <scheduler+0x4d8>)
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d2a:	ee17 2a90 	vmov	r2, s15
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	; (8002f2c <scheduler+0x4dc>)
 8002d30:	601a      	str	r2, [r3, #0]
				p1 = P1[counter];
 8002d32:	4b7c      	ldr	r3, [pc, #496]	; (8002f24 <scheduler+0x4d4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7e      	ldr	r2, [pc, #504]	; (8002f30 <scheduler+0x4e0>)
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7d      	ldr	r2, [pc, #500]	; (8002f34 <scheduler+0x4e4>)
 8002d40:	6013      	str	r3, [r2, #0]
				p2 = P2[counter];
 8002d42:	4b78      	ldr	r3, [pc, #480]	; (8002f24 <scheduler+0x4d4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7c      	ldr	r2, [pc, #496]	; (8002f38 <scheduler+0x4e8>)
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7b      	ldr	r2, [pc, #492]	; (8002f3c <scheduler+0x4ec>)
 8002d50:	6013      	str	r3, [r2, #0]
				accel1_val[1] = Ax1[counter];
 8002d52:	4b74      	ldr	r3, [pc, #464]	; (8002f24 <scheduler+0x4d4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <scheduler+0x4f0>)
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a79      	ldr	r2, [pc, #484]	; (8002f44 <scheduler+0x4f4>)
 8002d60:	6053      	str	r3, [r2, #4]
				accel1_val[2] = Ay1[counter];
 8002d62:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <scheduler+0x4d4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <scheduler+0x4f8>)
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a75      	ldr	r2, [pc, #468]	; (8002f44 <scheduler+0x4f4>)
 8002d70:	6093      	str	r3, [r2, #8]
				accel1_val[3] = Az1[counter];
 8002d72:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <scheduler+0x4d4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a75      	ldr	r2, [pc, #468]	; (8002f4c <scheduler+0x4fc>)
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a71      	ldr	r2, [pc, #452]	; (8002f44 <scheduler+0x4f4>)
 8002d80:	60d3      	str	r3, [r2, #12]
				accel2_val[1] = Ax2[counter];
 8002d82:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <scheduler+0x4d4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a72      	ldr	r2, [pc, #456]	; (8002f50 <scheduler+0x500>)
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a71      	ldr	r2, [pc, #452]	; (8002f54 <scheduler+0x504>)
 8002d90:	6053      	str	r3, [r2, #4]
				accel2_val[2] = Ay2[counter];
 8002d92:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <scheduler+0x4d4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a70      	ldr	r2, [pc, #448]	; (8002f58 <scheduler+0x508>)
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6d      	ldr	r2, [pc, #436]	; (8002f54 <scheduler+0x504>)
 8002da0:	6093      	str	r3, [r2, #8]
				accel2_val[3] = Az2[counter];
 8002da2:	4b60      	ldr	r3, [pc, #384]	; (8002f24 <scheduler+0x4d4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6d      	ldr	r2, [pc, #436]	; (8002f5c <scheduler+0x50c>)
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a69      	ldr	r2, [pc, #420]	; (8002f54 <scheduler+0x504>)
 8002db0:	60d3      	str	r3, [r2, #12]
				counter ++;
 8002db2:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <scheduler+0x4d4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <scheduler+0x4d4>)
 8002dba:	6013      	str	r3, [r2, #0]
			}

			// if fake file ends, continue with nominal operation
			if (counter >= FAKE_FILE_LEN){
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <scheduler+0x4d4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d302      	bcc.n	8002dcc <scheduler+0x37c>
				FAKE_DATA = 0;
 8002dc6:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <scheduler+0x510>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
			}
		}

		// call state estimation
		if (state_est_state.flight_phase_detection.flight_phase < DESCENT){
 8002dcc:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <scheduler+0x514>)
 8002dce:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d838      	bhi.n	8002e48 <scheduler+0x3f8>


			state_est_state.state_est_meas.baro_data[0].pressure = p1;
 8002dd6:	4b57      	ldr	r3, [pc, #348]	; (8002f34 <scheduler+0x4e4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a62      	ldr	r2, [pc, #392]	; (8002f64 <scheduler+0x514>)
 8002ddc:	63d3      	str	r3, [r2, #60]	; 0x3c
			state_est_state.state_est_meas.baro_data[0].temperature = t_p1;
 8002dde:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <scheduler+0x518>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a60      	ldr	r2, [pc, #384]	; (8002f64 <scheduler+0x514>)
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
			state_est_state.state_est_meas.baro_data[0].ts = tick;
 8002de6:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <scheduler+0x51c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <scheduler+0x514>)
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44

			state_est_state.state_est_meas.imu_data[0].acc_x = -accel1_val[1];
 8002dee:	4b55      	ldr	r3, [pc, #340]	; (8002f44 <scheduler+0x4f4>)
 8002df0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002df4:	eef1 7a67 	vneg.f32	s15, s15
 8002df8:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <scheduler+0x514>)
 8002dfa:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			state_est_state.state_est_meas.imu_data[0].ts = tick;
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <scheduler+0x51c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <scheduler+0x514>)
 8002e04:	66d3      	str	r3, [r2, #108]	; 0x6c

			state_est_state.state_est_meas.baro_data[1].pressure = p2;
 8002e06:	4b4d      	ldr	r3, [pc, #308]	; (8002f3c <scheduler+0x4ec>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <scheduler+0x514>)
 8002e0c:	6493      	str	r3, [r2, #72]	; 0x48
			state_est_state.state_est_meas.baro_data[1].temperature = t_p2;
 8002e0e:	4b58      	ldr	r3, [pc, #352]	; (8002f70 <scheduler+0x520>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a54      	ldr	r2, [pc, #336]	; (8002f64 <scheduler+0x514>)
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
			state_est_state.state_est_meas.baro_data[1].ts = tick;
 8002e16:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <scheduler+0x51c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <scheduler+0x514>)
 8002e1c:	6513      	str	r3, [r2, #80]	; 0x50

			state_est_state.state_est_meas.imu_data[1].acc_x = -accel2_val[1];
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <scheduler+0x504>)
 8002e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e24:	eef1 7a67 	vneg.f32	s15, s15
 8002e28:	4b4e      	ldr	r3, [pc, #312]	; (8002f64 <scheduler+0x514>)
 8002e2a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			state_est_state.state_est_meas.imu_data[1].ts = tick;
 8002e2e:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <scheduler+0x51c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <scheduler+0x514>)
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

			state_est_step(tick, &state_est_state, true);
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <scheduler+0x51c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4949      	ldr	r1, [pc, #292]	; (8002f64 <scheduler+0x514>)
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fa27 	bl	8006294 <state_est_step>
 8002e46:	e0a1      	b.n	8002f8c <scheduler+0x53c>
		} else {
			float p[2];
			float altitude[2] = {0,0};
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			p[0] = p1;
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <scheduler+0x4e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			p[1] = p2;
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <scheduler+0x4ec>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			bool p_active[2] = {p_descent_sanity_check(&p1), p_descent_sanity_check(&p2)};
 8002e68:	4832      	ldr	r0, [pc, #200]	; (8002f34 <scheduler+0x4e4>)
 8002e6a:	f000 fca7 	bl	80037bc <p_descent_sanity_check>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8002e7e:	482f      	ldr	r0, [pc, #188]	; (8002f3c <scheduler+0x4ec>)
 8002e80:	f000 fc9c 	bl	80037bc <p_descent_sanity_check>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

			pressure2altitudeAGL(&state_est_state.env, 2,  p, p_active, altitude);
 8002e94:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002e98:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	4833      	ldr	r0, [pc, #204]	; (8002f74 <scheduler+0x524>)
 8002ea8:	f002 fc4e 	bl	8005748 <pressure2altitudeAGL>

			if (p_active[0] + p_active[1] != 0){
 8002eac:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <scheduler+0x494>
				// calculate mean altitude if both barometer readings are valid
				alt = (altitude[0] + altitude[0])/ (p_active[0] + p_active[1]);
 8002ebc:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8002ec0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ec4:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002ece:	4413      	add	r3, r2
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002edc:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <scheduler+0x528>)
 8002ede:	edc3 7a00 	vstr	s15, [r3]
 8002ee2:	e003      	b.n	8002eec <scheduler+0x49c>
			} else {
				// if both barometer readings are invalid
				alt = 0;
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <scheduler+0x528>)
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
			}

			if ((alt < SECOND_EVENT_AGL) && (0 < alt)) {
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <scheduler+0x528>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002f7c <scheduler+0x52c>
 8002ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	d545      	bpl.n	8002f8c <scheduler+0x53c>
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <scheduler+0x528>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	dd3d      	ble.n	8002f8c <scheduler+0x53c>
				if (event == NOE)
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <scheduler+0x530>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d135      	bne.n	8002f84 <scheduler+0x534>
				{
					// initiate separation if no separation has been initiated so far
					state_est_state.flight_phase_detection.flight_phase = DESCENT;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <scheduler+0x514>)
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8002f20:	e034      	b.n	8002f8c <scheduler+0x53c>
 8002f22:	bf00      	nop
 8002f24:	2000039c 	.word	0x2000039c
 8002f28:	20005af0 	.word	0x20005af0
 8002f2c:	2000cfc4 	.word	0x2000cfc4
 8002f30:	20007afc 	.word	0x20007afc
 8002f34:	200003a0 	.word	0x200003a0
 8002f38:	20008b20 	.word	0x20008b20
 8002f3c:	200003a4 	.word	0x200003a4
 8002f40:	2000ab30 	.word	0x2000ab30
 8002f44:	2000cf88 	.word	0x2000cf88
 8002f48:	20006afc 	.word	0x20006afc
 8002f4c:	2000bb30 	.word	0x2000bb30
 8002f50:	20009b20 	.word	0x20009b20
 8002f54:	2000cf54 	.word	0x2000cf54
 8002f58:	2000cfc8 	.word	0x2000cfc8
 8002f5c:	20004af0 	.word	0x20004af0
 8002f60:	20000858 	.word	0x20000858
 8002f64:	200003c0 	.word	0x200003c0
 8002f68:	200003a8 	.word	0x200003a8
 8002f6c:	2000cf30 	.word	0x2000cf30
 8002f70:	200003ac 	.word	0x200003ac
 8002f74:	20000788 	.word	0x20000788
 8002f78:	200003b8 	.word	0x200003b8
 8002f7c:	43c80000 	.word	0x43c80000
 8002f80:	200003b6 	.word	0x200003b6
				} else {
					// second event
					state_est_state.flight_phase_detection.flight_phase = RECOVERY;
 8002f84:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <scheduler+0x694>)
 8002f86:	2207      	movs	r2, #7
 8002f88:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
				}
			}
		}

		// timer start
		if ((state_est_state.flight_phase_detection.flight_phase == THRUSTING) || (launch_detect(accel1_val[1], accel2_val[1]) == 1) ){
 8002f8c:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <scheduler+0x694>)
 8002f8e:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d00e      	beq.n	8002fb4 <scheduler+0x564>
 8002f96:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <scheduler+0x698>)
 8002f98:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <scheduler+0x69c>)
 8002f9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fa2:	eef0 0a47 	vmov.f32	s1, s14
 8002fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8002faa:	f7ff fbd9 	bl	8002760 <launch_detect>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10b      	bne.n	8002fcc <scheduler+0x57c>
			start_timer(&mach_timer, &tick);
 8002fb4:	494e      	ldr	r1, [pc, #312]	; (80030f0 <scheduler+0x6a0>)
 8002fb6:	484f      	ldr	r0, [pc, #316]	; (80030f4 <scheduler+0x6a4>)
 8002fb8:	f7ff f948 	bl	800224c <start_timer>
			start_timer(&fail_safe_timer, &tick);
 8002fbc:	494c      	ldr	r1, [pc, #304]	; (80030f0 <scheduler+0x6a0>)
 8002fbe:	484e      	ldr	r0, [pc, #312]	; (80030f8 <scheduler+0x6a8>)
 8002fc0:	f7ff f944 	bl	800224c <start_timer>
			start_timer(&fail_safe_timer_main, &tick);
 8002fc4:	494a      	ldr	r1, [pc, #296]	; (80030f0 <scheduler+0x6a0>)
 8002fc6:	484d      	ldr	r0, [pc, #308]	; (80030fc <scheduler+0x6ac>)
 8002fc8:	f7ff f940 	bl	800224c <start_timer>
		}

		if ((tick > 30000) && (CHECK_FLAG == 0)){
 8002fcc:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <scheduler+0x6a0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f247 5230 	movw	r2, #30000	; 0x7530
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d936      	bls.n	8003046 <scheduler+0x5f6>
 8002fd8:	4b49      	ldr	r3, [pc, #292]	; (8003100 <scheduler+0x6b0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d132      	bne.n	8003046 <scheduler+0x5f6>

			// Perform sanity check of state estimation 30 seconds after bootup!

			float check_a = -accel1_val[1];
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <scheduler+0x698>)
 8002fe2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fe6:	eef1 7a67 	vneg.f32	s15, s15
 8002fea:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
			float check_h = state_est_state.state_est_data.position_world[2];
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <scheduler+0x694>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffa:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
			float check_v = state_est_state.state_est_data.velocity_rocket[0];
 8002ffe:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <scheduler+0x694>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300a:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 800300e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003012:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8003016:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fc58 	bl	80038d0 <state_est_sanity_check>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
			}

			check_a = -accel2_val[1];
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <scheduler+0x69c>)
 8003022:	edd3 7a01 	vldr	s15, [r3, #4]
 8003026:	eef1 7a67 	vneg.f32	s15, s15
 800302a:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 800302e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003032:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8003036:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fc48 	bl	80038d0 <state_est_sanity_check>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
			}
			CHECK_FLAG = 1;
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <scheduler+0x6b0>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]

	}


	// if mach timer has passed, software arm the system
	if (check_timer(&mach_timer, &tick) == 1) armed = 1;
 8003046:	492a      	ldr	r1, [pc, #168]	; (80030f0 <scheduler+0x6a0>)
 8003048:	482a      	ldr	r0, [pc, #168]	; (80030f4 <scheduler+0x6a4>)
 800304a:	f7ff f918 	bl	800227e <check_timer>
 800304e:	4603      	mov	r3, r0
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <scheduler+0x60a>
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <scheduler+0x6b4>)
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer, &tick) == 1) state_est_state.flight_phase_detection.flight_phase = DESCENT;
 800305a:	4925      	ldr	r1, [pc, #148]	; (80030f0 <scheduler+0x6a0>)
 800305c:	4826      	ldr	r0, [pc, #152]	; (80030f8 <scheduler+0x6a8>)
 800305e:	f7ff f90e 	bl	800227e <check_timer>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d103      	bne.n	8003070 <scheduler+0x620>
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <scheduler+0x694>)
 800306a:	2205      	movs	r2, #5
 800306c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer_main, &tick) == 1) {
 8003070:	491f      	ldr	r1, [pc, #124]	; (80030f0 <scheduler+0x6a0>)
 8003072:	4822      	ldr	r0, [pc, #136]	; (80030fc <scheduler+0x6ac>)
 8003074:	f7ff f903 	bl	800227e <check_timer>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d112      	bne.n	80030a4 <scheduler+0x654>
		if (state_est_state.flight_phase_detection.flight_phase < DESCENT){
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <scheduler+0x694>)
 8003080:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 8003084:	2b04      	cmp	r3, #4
 8003086:	d804      	bhi.n	8003092 <scheduler+0x642>
			state_est_state.flight_phase_detection.flight_phase = DESCENT;
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <scheduler+0x694>)
 800308a:	2205      	movs	r2, #5
 800308c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8003090:	e008      	b.n	80030a4 <scheduler+0x654>
		} else if (state_est_state.flight_phase_detection.flight_phase == DESCENT) {
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <scheduler+0x694>)
 8003094:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 8003098:	2b05      	cmp	r3, #5
 800309a:	d103      	bne.n	80030a4 <scheduler+0x654>
			state_est_state.flight_phase_detection.flight_phase = RECOVERY;
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <scheduler+0x694>)
 800309e:	2207      	movs	r2, #7
 80030a0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
		}
	}


	// act according to flight phase
	switch(state_est_state.flight_phase_detection.flight_phase){
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <scheduler+0x694>)
 80030a6:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 80030aa:	3b01      	subs	r3, #1
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d863      	bhi.n	8003178 <scheduler+0x728>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <scheduler+0x668>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	08003179 	.word	0x08003179
 80030bc:	08003179 	.word	0x08003179
 80030c0:	08003179 	.word	0x08003179
 80030c4:	08003179 	.word	0x08003179
 80030c8:	080030d5 	.word	0x080030d5
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	08003119 	.word	0x08003119
			break;
		case COASTING:
			break;
		case DESCENT:
			// apogee
			fire_HAWKs(&armed);
 80030d4:	480b      	ldr	r0, [pc, #44]	; (8003104 <scheduler+0x6b4>)
 80030d6:	f7fd ff57 	bl	8000f88 <fire_HAWKs>
			event = HAWKS;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <scheduler+0x6b8>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
			break;
 80030e0:	e04a      	b.n	8003178 <scheduler+0x728>
 80030e2:	bf00      	nop
 80030e4:	200003c0 	.word	0x200003c0
 80030e8:	2000cf88 	.word	0x2000cf88
 80030ec:	2000cf54 	.word	0x2000cf54
 80030f0:	2000cf30 	.word	0x2000cf30
 80030f4:	200000a4 	.word	0x200000a4
 80030f8:	200000b0 	.word	0x200000b0
 80030fc:	200000bc 	.word	0x200000bc
 8003100:	20000859 	.word	0x20000859
 8003104:	200003b5 	.word	0x200003b5
 8003108:	200003b6 	.word	0x200003b6
		case BALLISTIC_DESCENT:
			// oh-oh...
			fire_HAWKs(&armed);
 800310c:	489d      	ldr	r0, [pc, #628]	; (8003384 <scheduler+0x934>)
 800310e:	f7fd ff3b 	bl	8000f88 <fire_HAWKs>
			event = HAWKS;
 8003112:	4b9d      	ldr	r3, [pc, #628]	; (8003388 <scheduler+0x938>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
		case RECOVERY:
			// second event
			if (TD_fired == 0){
 8003118:	4b9c      	ldr	r3, [pc, #624]	; (800338c <scheduler+0x93c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <scheduler+0x6e4>
				fire_TDs(&armed);
 8003120:	4898      	ldr	r0, [pc, #608]	; (8003384 <scheduler+0x934>)
 8003122:	f7fd ff61 	bl	8000fe8 <fire_TDs>
				TD_fired = tick;
 8003126:	4b9a      	ldr	r3, [pc, #616]	; (8003390 <scheduler+0x940>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a98      	ldr	r2, [pc, #608]	; (800338c <scheduler+0x93c>)
 800312c:	6013      	str	r3, [r2, #0]
				event = TENDER;
 800312e:	4b96      	ldr	r3, [pc, #600]	; (8003388 <scheduler+0x938>)
 8003130:	2202      	movs	r2, #2
 8003132:	701a      	strb	r2, [r3, #0]
			}

			if(tick >= TD_fired + 500){
 8003134:	4b95      	ldr	r3, [pc, #596]	; (800338c <scheduler+0x93c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800313c:	4b94      	ldr	r3, [pc, #592]	; (8003390 <scheduler+0x940>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d818      	bhi.n	8003176 <scheduler+0x726>
				if ((I_BAT1 >= 1000) || (I_BAT2 >= 1000)){
 8003144:	4b93      	ldr	r3, [pc, #588]	; (8003394 <scheduler+0x944>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003398 <scheduler+0x948>
 800314e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	da09      	bge.n	800316c <scheduler+0x71c>
 8003158:	4b90      	ldr	r3, [pc, #576]	; (800339c <scheduler+0x94c>)
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003398 <scheduler+0x948>
 8003162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316a:	db01      	blt.n	8003170 <scheduler+0x720>
					// turn off the pyro channels to save power and protect the circuit board
					if (DEBUG_PRINT == 1) printf("fused igniters detected!! \n");
					turn_off_TDs();
 800316c:	f7fd ff5a 	bl	8001024 <turn_off_TDs>
				}
				event = TENDER_DISABLE;
 8003170:	4b85      	ldr	r3, [pc, #532]	; (8003388 <scheduler+0x938>)
 8003172:	2203      	movs	r2, #3
 8003174:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003176:	bf00      	nop
	}



	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 8003178:	4889      	ldr	r0, [pc, #548]	; (80033a0 <scheduler+0x950>)
 800317a:	f000 f9cf 	bl	800351c <getNextExecution>
 800317e:	4602      	mov	r2, r0
 8003180:	4b83      	ldr	r3, [pc, #524]	; (8003390 <scheduler+0x940>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	f200 81bd 	bhi.w	8003504 <scheduler+0xab4>
		LOG_TASK.last_call = tick;
 800318a:	4b81      	ldr	r3, [pc, #516]	; (8003390 <scheduler+0x940>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a84      	ldr	r2, [pc, #528]	; (80033a0 <scheduler+0x950>)
 8003190:	6013      	str	r3, [r2, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003192:	4b7f      	ldr	r3, [pc, #508]	; (8003390 <scheduler+0x940>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800319a:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <scheduler+0x934>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80031a2:	4b79      	ldr	r3, [pc, #484]	; (8003388 <scheduler+0x938>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031aa:	4b7e      	ldr	r3, [pc, #504]	; (80033a4 <scheduler+0x954>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031b2:	4b7d      	ldr	r3, [pc, #500]	; (80033a8 <scheduler+0x958>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f9c6 	bl	8000548 <__aeabi_f2d>
 80031bc:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 80031c0:	4b7a      	ldr	r3, [pc, #488]	; (80033ac <scheduler+0x95c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f9bf 	bl	8000548 <__aeabi_f2d>
 80031ca:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80031ce:	4b78      	ldr	r3, [pc, #480]	; (80033b0 <scheduler+0x960>)
 80031d0:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9b8 	bl	8000548 <__aeabi_f2d>
 80031d8:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80031dc:	4b74      	ldr	r3, [pc, #464]	; (80033b0 <scheduler+0x960>)
 80031de:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9b1 	bl	8000548 <__aeabi_f2d>
 80031e6:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 80031ea:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <scheduler+0x964>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f9aa 	bl	8000548 <__aeabi_f2d>
 80031f4:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 80031f8:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <scheduler+0x968>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f9a3 	bl	8000548 <__aeabi_f2d>
 8003202:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <scheduler+0x96c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f99c 	bl	8000548 <__aeabi_f2d>
 8003210:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003214:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <scheduler+0x970>)
 8003216:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f995 	bl	8000548 <__aeabi_f2d>
 800321e:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003222:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <scheduler+0x974>)
 8003224:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f98e 	bl	8000548 <__aeabi_f2d>
 800322c:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8003230:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <scheduler+0x978>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f987 	bl	8000548 <__aeabi_f2d>
 800323a:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 800323e:	4b63      	ldr	r3, [pc, #396]	; (80033cc <scheduler+0x97c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f980 	bl	8000548 <__aeabi_f2d>
 8003248:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800324c:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <scheduler+0x970>)
 800324e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd f979 	bl	8000548 <__aeabi_f2d>
 8003256:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800325a:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <scheduler+0x970>)
 800325c:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f972 	bl	8000548 <__aeabi_f2d>
 8003264:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003268:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <scheduler+0x970>)
 800326a:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f96b 	bl	8000548 <__aeabi_f2d>
 8003272:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003276:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <scheduler+0x970>)
 8003278:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f964 	bl	8000548 <__aeabi_f2d>
 8003280:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003284:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <scheduler+0x970>)
 8003286:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f95d 	bl	8000548 <__aeabi_f2d>
 800328e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003292:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <scheduler+0x970>)
 8003294:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd f956 	bl	8000548 <__aeabi_f2d>
 800329c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032a0:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <scheduler+0x974>)
 80032a2:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd f94f 	bl	8000548 <__aeabi_f2d>
 80032aa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032ae:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <scheduler+0x974>)
 80032b0:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f948 	bl	8000548 <__aeabi_f2d>
 80032b8:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <scheduler+0x974>)
 80032be:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f941 	bl	8000548 <__aeabi_f2d>
 80032c6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032ca:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <scheduler+0x974>)
 80032cc:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f93a 	bl	8000548 <__aeabi_f2d>
 80032d4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <scheduler+0x974>)
 80032da:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd f933 	bl	8000548 <__aeabi_f2d>
 80032e2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032e6:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <scheduler+0x974>)
 80032e8:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f92c 	bl	8000548 <__aeabi_f2d>
 80032f0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <scheduler+0x980>)
 80032f6:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f925 	bl	8000548 <__aeabi_f2d>
 80032fe:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <scheduler+0x980>)
 8003304:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f91e 	bl	8000548 <__aeabi_f2d>
 800330c:	e9c7 0108 	strd	r0, r1, [r7, #32]
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <scheduler+0x980>)
 8003312:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f917 	bl	8000548 <__aeabi_f2d>
 800331a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <scheduler+0x944>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f910 	bl	8000548 <__aeabi_f2d>
 8003328:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <scheduler+0x94c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd f909 	bl	8000548 <__aeabi_f2d>
 8003336:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <scheduler+0x984>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f902 	bl	8000548 <__aeabi_f2d>
 8003344:	e9c7 0100 	strd	r0, r1, [r7]
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <scheduler+0x988>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f8fb 	bl	8000548 <__aeabi_f2d>
 8003352:	4682      	mov	sl, r0
 8003354:	468b      	mov	fp, r1
 8003356:	4b21      	ldr	r3, [pc, #132]	; (80033dc <scheduler+0x98c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f8f4 	bl	8000548 <__aeabi_f2d>
 8003360:	4680      	mov	r8, r0
 8003362:	4689      	mov	r9, r1
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <scheduler+0x990>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f8ed 	bl	8000548 <__aeabi_f2d>
 800336e:	4605      	mov	r5, r0
 8003370:	460e      	mov	r6, r1
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <scheduler+0x994>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f8e6 	bl	8000548 <__aeabi_f2d>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	e032      	b.n	80033e8 <scheduler+0x998>
 8003382:	bf00      	nop
 8003384:	200003b5 	.word	0x200003b5
 8003388:	200003b6 	.word	0x200003b6
 800338c:	2000085c 	.word	0x2000085c
 8003390:	2000cf30 	.word	0x2000cf30
 8003394:	2000ab24 	.word	0x2000ab24
 8003398:	447a0000 	.word	0x447a0000
 800339c:	2000cf50 	.word	0x2000cf50
 80033a0:	2000038c 	.word	0x2000038c
 80033a4:	200003b7 	.word	0x200003b7
 80033a8:	200003b8 	.word	0x200003b8
 80033ac:	200003bc 	.word	0x200003bc
 80033b0:	2000cf80 	.word	0x2000cf80
 80033b4:	20004ae8 	.word	0x20004ae8
 80033b8:	200003a8 	.word	0x200003a8
 80033bc:	200003ac 	.word	0x200003ac
 80033c0:	2000cf88 	.word	0x2000cf88
 80033c4:	2000cf54 	.word	0x2000cf54
 80033c8:	200003a0 	.word	0x200003a0
 80033cc:	200003a4 	.word	0x200003a4
 80033d0:	20008b14 	.word	0x20008b14
 80033d4:	2000cf70 	.word	0x2000cf70
 80033d8:	2000ab2c 	.word	0x2000ab2c
 80033dc:	2000cf34 	.word	0x2000cf34
 80033e0:	20008b10 	.word	0x20008b10
 80033e4:	2000ab20 	.word	0x2000ab20
 80033e8:	e9cd 3442 	strd	r3, r4, [sp, #264]	; 0x108
 80033ec:	e9cd 5640 	strd	r5, r6, [sp, #256]	; 0x100
 80033f0:	e9cd 893e 	strd	r8, r9, [sp, #248]	; 0xf8
 80033f4:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 80033f8:	ed97 7b00 	vldr	d7, [r7]
 80033fc:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 8003400:	ed97 7b02 	vldr	d7, [r7, #8]
 8003404:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8003408:	ed97 7b04 	vldr	d7, [r7, #16]
 800340c:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 8003410:	ed97 7b06 	vldr	d7, [r7, #24]
 8003414:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8003418:	ed97 7b08 	vldr	d7, [r7, #32]
 800341c:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 8003420:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003424:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8003428:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800342c:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 8003430:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003434:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 8003438:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800343c:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8003440:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003444:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8003448:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800344c:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8003450:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003454:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8003458:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800345c:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8003460:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8003464:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8003468:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800346c:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8003470:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8003474:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003478:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800347c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8003480:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8003484:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003488:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800348c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003490:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8003494:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003498:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 800349c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80034a0:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80034a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80034a8:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80034ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80034b0:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80034b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80034b8:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80034bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80034c0:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 80034c4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80034c8:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 80034cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80034d0:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80034d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80034d8:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80034dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80034e0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80034e4:	9101      	str	r1, [sp, #4]
 80034e6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80034ea:	9100      	str	r1, [sp, #0]
 80034ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80034f0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80034f4:	4906      	ldr	r1, [pc, #24]	; (8003510 <scheduler+0xac0>)
 80034f6:	4807      	ldr	r0, [pc, #28]	; (8003514 <scheduler+0xac4>)
 80034f8:	f00d ff52 	bl	80113a0 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 80034fc:	4905      	ldr	r1, [pc, #20]	; (8003514 <scheduler+0xac4>)
 80034fe:	4806      	ldr	r0, [pc, #24]	; (8003518 <scheduler+0xac8>)
 8003500:	f7fe fa0c 	bl	800191c <write_to_SD>
	if (DEBUG_PRINT == 1) printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
	if (DEBUG_PRINT == 1) printf("ACC ax: %4.2f m/s2 \n", accel[0]);
	if (DEBUG_PRINT == 1) printf("ACC ay: %4.2f m/s2 \n", accel[1]);
	if (DEBUG_PRINT == 1) printf("ACC az: %4.2f m/s2 \n", accel[2]);

}
 8003504:	bf00      	nop
 8003506:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800350a:	46bd      	mov	sp, r7
 800350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003510:	080167ec 	.word	0x080167ec
 8003514:	2000cb30 	.word	0x2000cb30
 8003518:	2000dfc8 	.word	0x2000dfc8

0800351c <getNextExecution>:

uint32_t getNextExecution(task_t * task){
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4413      	add	r3, r2
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <MX_SDIO_SD_Init+0x38>)
 8003542:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <MX_SDIO_SD_Init+0x3c>)
 8003544:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <MX_SDIO_SD_Init+0x38>)
 8003548:	2200      	movs	r2, #0
 800354a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <MX_SDIO_SD_Init+0x38>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <MX_SDIO_SD_Init+0x38>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_SDIO_SD_Init+0x38>)
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <MX_SDIO_SD_Init+0x38>)
 8003560:	2200      	movs	r2, #0
 8003562:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <MX_SDIO_SD_Init+0x38>)
 8003566:	2203      	movs	r2, #3
 8003568:	619a      	str	r2, [r3, #24]

}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	2000e094 	.word	0x2000e094
 8003578:	40012c00 	.word	0x40012c00

0800357c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a68      	ldr	r2, [pc, #416]	; (800373c <HAL_SD_MspInit+0x1c0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	f040 80c9 	bne.w	8003732 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	4b66      	ldr	r3, [pc, #408]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ae:	6453      	str	r3, [r2, #68]	; 0x44
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	4b5f      	ldr	r3, [pc, #380]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	4a5e      	ldr	r2, [pc, #376]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6313      	str	r3, [r2, #48]	; 0x30
 80035cc:	4b5c      	ldr	r3, [pc, #368]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	4b58      	ldr	r3, [pc, #352]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	4a57      	ldr	r2, [pc, #348]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035e2:	f043 0308 	orr.w	r3, r3, #8
 80035e6:	6313      	str	r3, [r2, #48]	; 0x30
 80035e8:	4b55      	ldr	r3, [pc, #340]	; (8003740 <HAL_SD_MspInit+0x1c4>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80035f4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80035f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003606:	230c      	movs	r3, #12
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	484c      	ldr	r0, [pc, #304]	; (8003744 <HAL_SD_MspInit+0x1c8>)
 8003612:	f005 f9a9 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003616:	2304      	movs	r3, #4
 8003618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003622:	2303      	movs	r3, #3
 8003624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003626:	230c      	movs	r3, #12
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	4619      	mov	r1, r3
 8003630:	4845      	ldr	r0, [pc, #276]	; (8003748 <HAL_SD_MspInit+0x1cc>)
 8003632:	f005 f999 	bl	8008968 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003636:	4b45      	ldr	r3, [pc, #276]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003638:	4a45      	ldr	r2, [pc, #276]	; (8003750 <HAL_SD_MspInit+0x1d4>)
 800363a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <HAL_SD_MspInit+0x1d0>)
 800363e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003642:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800364a:	4b40      	ldr	r3, [pc, #256]	; (800374c <HAL_SD_MspInit+0x1d0>)
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003650:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003656:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <HAL_SD_MspInit+0x1d0>)
 800365a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800365e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003660:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003666:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003668:	4b38      	ldr	r3, [pc, #224]	; (800374c <HAL_SD_MspInit+0x1d0>)
 800366a:	2220      	movs	r2, #32
 800366c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003674:	4b35      	ldr	r3, [pc, #212]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003676:	2204      	movs	r2, #4
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800367a:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_SD_MspInit+0x1d0>)
 800367c:	2203      	movs	r2, #3
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003680:	4b32      	ldr	r3, [pc, #200]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003688:	4b30      	ldr	r3, [pc, #192]	; (800374c <HAL_SD_MspInit+0x1d0>)
 800368a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003690:	482e      	ldr	r0, [pc, #184]	; (800374c <HAL_SD_MspInit+0x1d0>)
 8003692:	f004 fd5d 	bl	8008150 <HAL_DMA_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800369c:	f7ff f858 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_SD_MspInit+0x1d0>)
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <HAL_SD_MspInit+0x1d0>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_SD_MspInit+0x1dc>)
 80036b0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036b8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036cc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036d4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036dc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036e0:	2220      	movs	r2, #32
 80036e2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036ec:	2204      	movs	r2, #4
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80036f0:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036f2:	2203      	movs	r2, #3
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80036f6:	4b17      	ldr	r3, [pc, #92]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 80036f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 8003700:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003706:	4813      	ldr	r0, [pc, #76]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 8003708:	f004 fd22 	bl	8008150 <HAL_DMA_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8003712:	f7ff f81d 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 800371a:	63da      	str	r2, [r3, #60]	; 0x3c
 800371c:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <HAL_SD_MspInit+0x1d8>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	2031      	movs	r0, #49	; 0x31
 8003728:	f004 fcdb 	bl	80080e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800372c:	2031      	movs	r0, #49	; 0x31
 800372e:	f004 fcf4 	bl	800811a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003732:	bf00      	nop
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40023800 	.word	0x40023800
 8003744:	40020800 	.word	0x40020800
 8003748:	40020c00 	.word	0x40020c00
 800374c:	2000dfd4 	.word	0x2000dfd4
 8003750:	40026458 	.word	0x40026458
 8003754:	2000e034 	.word	0x2000e034
 8003758:	400264a0 	.word	0x400264a0

0800375c <p_sanity_check>:
#include "buzzer.h"
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

uint8_t p_sanity_check(float * p){
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	if ((*p < 110000) | (*p > 80000)) {
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80037b4 <p_sanity_check+0x58>
 800376e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	bf4c      	ite	mi
 8003778:	2301      	movmi	r3, #1
 800377a:	2300      	movpl	r3, #0
 800377c:	b2da      	uxtb	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037b8 <p_sanity_check+0x5c>
 8003788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	bfcc      	ite	gt
 8003792:	2301      	movgt	r3, #1
 8003794:	2300      	movle	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <p_sanity_check+0x48>
		return 1;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <p_sanity_check+0x4a>
	} else {
		return 0;
 80037a4:	2300      	movs	r3, #0
	}
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	47d6d800 	.word	0x47d6d800
 80037b8:	479c4000 	.word	0x479c4000

080037bc <p_descent_sanity_check>:

uint8_t p_descent_sanity_check(float * p){
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	if ((*p < 110000) | (*p > 20000)) {
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003814 <p_descent_sanity_check+0x58>
 80037ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	bf4c      	ite	mi
 80037d8:	2301      	movmi	r3, #1
 80037da:	2300      	movpl	r3, #0
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003818 <p_descent_sanity_check+0x5c>
 80037e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f0:	bfcc      	ite	gt
 80037f2:	2301      	movgt	r3, #1
 80037f4:	2300      	movle	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <p_descent_sanity_check+0x48>
		return 1;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <p_descent_sanity_check+0x4a>
	} else {
		return 0;
 8003804:	2300      	movs	r3, #0
	}
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	47d6d800 	.word	0x47d6d800
 8003818:	469c4000 	.word	0x469c4000

0800381c <t_sanity_check>:

uint8_t t_sanity_check(float * t){
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	if ((*t < 80) | (*t > 1)) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	edd3 7a00 	vldr	s15, [r3]
 800382a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003874 <t_sanity_check+0x58>
 800382e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003836:	bf4c      	ite	mi
 8003838:	2301      	movmi	r3, #1
 800383a:	2300      	movpl	r3, #0
 800383c:	b2da      	uxtb	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	edd3 7a00 	vldr	s15, [r3]
 8003844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003850:	bfcc      	ite	gt
 8003852:	2301      	movgt	r3, #1
 8003854:	2300      	movle	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	4313      	orrs	r3, r2
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <t_sanity_check+0x48>
		return 1;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <t_sanity_check+0x4a>
	} else {
		return 0;
 8003864:	2300      	movs	r3, #0
	}
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	42a00000 	.word	0x42a00000

08003878 <a_sanity_check>:

uint8_t a_sanity_check(float * a){
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	if ((*a < 10) | (*a > 8)) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800388a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	bf4c      	ite	mi
 8003894:	2301      	movmi	r3, #1
 8003896:	2300      	movpl	r3, #0
 8003898:	b2da      	uxtb	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80038a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	bfcc      	ite	gt
 80038ae:	2301      	movgt	r3, #1
 80038b0:	2300      	movle	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4313      	orrs	r3, r2
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <a_sanity_check+0x48>
		return 1;
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <a_sanity_check+0x4a>
	} else {
		return 0;
 80038c0:	2300      	movs	r3, #0
	}
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <state_est_sanity_check>:

uint8_t state_est_sanity_check(float * h, float * a, float * v){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
	if (a_sanity_check(a) == 0){
 80038dc:	68b8      	ldr	r0, [r7, #8]
 80038de:	f7ff ffcb 	bl	8003878 <a_sanity_check>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <state_est_sanity_check+0x1c>
		if (DEBUG_PRINT == 1) printf("state est accel out of bounds. a = %4.2f \n",*a);
		return 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e040      	b.n	800396e <state_est_sanity_check+0x9e>
	}

	if ((*h > 50) | (*h < -50)) {
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	edd3 7a00 	vldr	s15, [r3]
 80038f2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003978 <state_est_sanity_check+0xa8>
 80038f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	bfcc      	ite	gt
 8003900:	2301      	movgt	r3, #1
 8003902:	2300      	movle	r3, #0
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800397c <state_est_sanity_check+0xac>
 8003910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	bf4c      	ite	mi
 800391a:	2301      	movmi	r3, #1
 800391c:	2300      	movpl	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4313      	orrs	r3, r2
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <state_est_sanity_check+0x5c>
		if (DEBUG_PRINT == 1) printf("state est altitude out of bounds. h = %4.2f \n",*h);
		return 0;
 8003928:	2300      	movs	r3, #0
 800392a:	e020      	b.n	800396e <state_est_sanity_check+0x9e>
	}

	if ((*v > 10) | (*v < -10)) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393e:	bfcc      	ite	gt
 8003940:	2301      	movgt	r3, #1
 8003942:	2300      	movle	r3, #0
 8003944:	b2da      	uxtb	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	bf4c      	ite	mi
 800395a:	2301      	movmi	r3, #1
 800395c:	2300      	movpl	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	4313      	orrs	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <state_est_sanity_check+0x9c>
		if (DEBUG_PRINT == 1) printf("state est velocity out of bounds. v = %4.2f \n",*v);
		return 0;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <state_est_sanity_check+0x9e>
	}

	return 1;
 800396c:	2301      	movs	r3, #1
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	42480000 	.word	0x42480000
 800397c:	c2480000 	.word	0xc2480000

08003980 <config_baro>:

uint8_t config_baro(struct sht31_dev * t_dev, struct ms5607_dev * p1_dev, struct ms5607_dev * p2_dev, float * t, float * p){
 8003980:	b580      	push	{r7, lr}
 8003982:	b092      	sub	sp, #72	; 0x48
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]

	float t1_sum = 0;
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
	float p1_sum = 0;
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
	float t2_sum = 0;
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
	float p2_sum = 0;
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30
	float p1;
	float p2;
	float t1;
	float t2;
	// sample pressure/temperture 100 times
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	647b      	str	r3, [r7, #68]	; 0x44
 80039aa:	e050      	b.n	8003a4e <config_baro+0xce>
	{
		ms5607_prep_pressure(p1_dev, pbuf);
 80039ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039b0:	4619      	mov	r1, r3
 80039b2:	68b8      	ldr	r0, [r7, #8]
 80039b4:	f001 fa1c 	bl	8004df0 <ms5607_prep_pressure>
		ms5607_prep_pressure(p2_dev, pbuf);
 80039b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f001 fa16 	bl	8004df0 <ms5607_prep_pressure>
		HAL_Delay(5);
 80039c4:	2005      	movs	r0, #5
 80039c6:	f003 fe51 	bl	800766c <HAL_Delay>
		ms5607_read_pressure(p1_dev, pbuf);
 80039ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ce:	4619      	mov	r1, r3
 80039d0:	68b8      	ldr	r0, [r7, #8]
 80039d2:	f001 fa56 	bl	8004e82 <ms5607_read_pressure>
		ms5607_read_pressure(p2_dev, pbuf);
 80039d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f001 fa50 	bl	8004e82 <ms5607_read_pressure>
		ms5607_convert(p1_dev, &p1, &t1);
 80039e2:	f107 0214 	add.w	r2, r7, #20
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	68b8      	ldr	r0, [r7, #8]
 80039ee:	f001 fa93 	bl	8004f18 <ms5607_convert>
		ms5607_convert(p2_dev, &p2, &t2);
 80039f2:	f107 0210 	add.w	r2, r7, #16
 80039f6:	f107 0318 	add.w	r3, r7, #24
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f001 fa8b 	bl	8004f18 <ms5607_convert>
		t1_sum += t1;
 8003a02:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a06:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		p1_sum += p1;
 8003a12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003a16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		t2_sum += t2;
 8003a22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		p2_sum += p2;
 8003a32:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL + 5);
 8003a42:	200f      	movs	r0, #15
 8003a44:	f003 fe12 	bl	800766c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a50:	2b63      	cmp	r3, #99	; 0x63
 8003a52:	ddab      	ble.n	80039ac <config_baro+0x2c>
	}
	p1_sum /= MAX_SETUP_SAMPLE;
 8003a54:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003a58:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003b80 <config_baro+0x200>
 8003a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a60:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	t1_sum /= MAX_SETUP_SAMPLE;
 8003a64:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a68:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003b80 <config_baro+0x200>
 8003a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a70:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	p2_sum /= MAX_SETUP_SAMPLE;
 8003a74:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a78:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003b80 <config_baro+0x200>
 8003a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a80:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	t1_sum /= MAX_SETUP_SAMPLE;
 8003a84:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a88:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b80 <config_baro+0x200>
 8003a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	if (!t_sanity_check(&t1_sum)){
 8003a94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff febf 	bl	800381c <t_sanity_check>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <config_baro+0x128>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 1 out of bounds. abort. \n");
		return 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e067      	b.n	8003b78 <config_baro+0x1f8>
	}
	if (!t_sanity_check(&t2_sum)){
 8003aa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff feb5 	bl	800381c <t_sanity_check>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <config_baro+0x13c>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 2 out of bounds. abort. \n");
		return 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e05d      	b.n	8003b78 <config_baro+0x1f8>
	}
	if (!p_sanity_check(&p1_sum)){
 8003abc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fe4b 	bl	800375c <p_sanity_check>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <config_baro+0x150>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 1 out of bounds. abort. \n");
		return 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e053      	b.n	8003b78 <config_baro+0x1f8>
	}
	if (!p_sanity_check(&p2_sum)){
 8003ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fe41 	bl	800375c <p_sanity_check>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <config_baro+0x164>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 2 out of bounds. abort. \n");
		return 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e049      	b.n	8003b78 <config_baro+0x1f8>
	}

	// set as environement parameters
	*t = (t1_sum + t2_sum) / 2;
 8003ae4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003ae8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	edc3 7a00 	vstr	s15, [r3]
	*p = (p1_sum + p2_sum) / 2;
 8003afe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003b02:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b14:	edc3 7a00 	vstr	s15, [r3]


	// sample SHT temperature 100 times

	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b1c:	e015      	b.n	8003b4a <config_baro+0x1ca>
	{
		sht31_read(t_dev, sht_val, buf);
 8003b1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003b22:	f107 0320 	add.w	r3, r7, #32
 8003b26:	4619      	mov	r1, r3
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f001 fcb1 	bl	8005490 <sht31_read>
		t1_sum += sht_val[1];
 8003b2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b32:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 8003b3e:	200a      	movs	r0, #10
 8003b40:	f003 fd94 	bl	800766c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	3301      	adds	r3, #1
 8003b48:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4c:	2b63      	cmp	r3, #99	; 0x63
 8003b4e:	dde6      	ble.n	8003b1e <config_baro+0x19e>
	}
	t1_sum /= MAX_SETUP_SAMPLE;
 8003b50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b54:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003b80 <config_baro+0x200>
 8003b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	if (!t_sanity_check(&t1_sum)){
 8003b60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fe59 	bl	800381c <t_sanity_check>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <config_baro+0x1f6>
		if (DEBUG_PRINT == 1) printf("Temperature of SHT out of bounds. continuing anyway. \n");
		// if SHT unavailable, take BARO temperature
	} else {
		// if SHT is available, use SHT temperature value for environement
		*t = t1_sum;
 8003b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	601a      	str	r2, [r3, #0]
	}

	return 1;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3748      	adds	r7, #72	; 0x48
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	42c80000 	.word	0x42c80000

08003b84 <config_imu>:

uint8_t config_imu(struct icm20601_dev * a1_dev, struct icm20601_dev * a2_dev){
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b09a      	sub	sp, #104	; 0x68
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	float a2_temp[7];

	float a1_sum[3];
	float a2_sum[3];

	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
 8003b92:	e064      	b.n	8003c5e <config_imu+0xda>
	{
		icm20601_read_data(a1_dev, a1_temp);
 8003b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 ff74 	bl	8004a88 <icm20601_read_data>
		icm20601_read_data(a2_dev, a2_temp);
 8003ba0:	f107 0320 	add.w	r3, r7, #32
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f000 ff6e 	bl	8004a88 <icm20601_read_data>
		for (int j = 1; j < 4; j++){
 8003bac:	2301      	movs	r3, #1
 8003bae:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb0:	e04c      	b.n	8003c4c <config_imu+0xc8>
			a1_sum[j] += abs(a1_temp[j]);
 8003bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003bba:	4413      	add	r3, r2
 8003bbc:	3b54      	subs	r3, #84	; 0x54
 8003bbe:	ed93 7a00 	vldr	s14, [r3]
 8003bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b2c      	subs	r3, #44	; 0x2c
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd6:	ee17 3a90 	vmov	r3, s15
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfb8      	it	lt
 8003bde:	425b      	neglt	r3, r3
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3b54      	subs	r3, #84	; 0x54
 8003bf8:	edc3 7a00 	vstr	s15, [r3]
			a2_sum[j] += abs(a2_temp[j]);
 8003bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003c04:	4413      	add	r3, r2
 8003c06:	3b60      	subs	r3, #96	; 0x60
 8003c08:	ed93 7a00 	vldr	s14, [r3]
 8003c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003c14:	4413      	add	r3, r2
 8003c16:	3b48      	subs	r3, #72	; 0x48
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c20:	ee17 3a90 	vmov	r3, s15
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bfb8      	it	lt
 8003c28:	425b      	neglt	r3, r3
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b60      	subs	r3, #96	; 0x60
 8003c42:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 1; j < 4; j++){
 8003c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c48:	3301      	adds	r3, #1
 8003c4a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	ddaf      	ble.n	8003bb2 <config_imu+0x2e>
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 8003c52:	200a      	movs	r0, #10
 8003c54:	f003 fd0a 	bl	800766c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c60:	2b63      	cmp	r3, #99	; 0x63
 8003c62:	dd97      	ble.n	8003b94 <config_imu+0x10>
	}

	// assume rocket is in upright position, config axes accordingly

	uint8_t imu1_state = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t imu2_state = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for (int j = 0; j < 3; j++){
 8003c70:	2300      	movs	r3, #0
 8003c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c74:	e04a      	b.n	8003d0c <config_imu+0x188>
		a1_sum[j] /= MAX_SETUP_SAMPLE;
 8003c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003c7e:	4413      	add	r3, r2
 8003c80:	3b54      	subs	r3, #84	; 0x54
 8003c82:	ed93 7a00 	vldr	s14, [r3]
 8003c86:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003d30 <config_imu+0x1ac>
 8003c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003c96:	4413      	add	r3, r2
 8003c98:	3b54      	subs	r3, #84	; 0x54
 8003c9a:	edc3 7a00 	vstr	s15, [r3]
		a2_sum[j] /= MAX_SETUP_SAMPLE;
 8003c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3b60      	subs	r3, #96	; 0x60
 8003caa:	ed93 7a00 	vldr	s14, [r3]
 8003cae:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003d30 <config_imu+0x1ac>
 8003cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3b60      	subs	r3, #96	; 0x60
 8003cc2:	edc3 7a00 	vstr	s15, [r3]
		if (a_sanity_check(&a1_sum[j]) == 1){
 8003cc6:	f107 0214 	add.w	r2, r7, #20
 8003cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fdd1 	bl	8003878 <a_sanity_check>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d104      	bne.n	8003ce6 <config_imu+0x162>
			imu1_state ++;
 8003cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (a_sanity_check(&a2_sum[j]) == 1){
 8003ce6:	f107 0208 	add.w	r2, r7, #8
 8003cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fdc1 	bl	8003878 <a_sanity_check>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d104      	bne.n	8003d06 <config_imu+0x182>
			imu2_state ++;
 8003cfc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003d00:	3301      	adds	r3, #1
 8003d02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for (int j = 0; j < 3; j++){
 8003d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d08:	3301      	adds	r3, #1
 8003d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	ddb1      	ble.n	8003c76 <config_imu+0xf2>
		}
	}

	if (imu1_state + imu2_state != 2){
 8003d12:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8003d16:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003d1a:	4413      	add	r3, r2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d001      	beq.n	8003d24 <config_imu+0x1a0>
		if (DEBUG_PRINT == 1) printf("IMU axes out of bounds. abort. \n");
		if (DEBUG_PRINT == 1) printf("IMU1: %d \n", imu1_state);
		if (DEBUG_PRINT == 1) printf("IMU2: %d \n", imu2_state);
		return 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <config_imu+0x1a2>
	}
	return 1;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3768      	adds	r7, #104	; 0x68
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	42c80000 	.word	0x42c80000

08003d34 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d3a:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <MX_SPI1_Init+0x68>)
 8003d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d80:	220a      	movs	r2, #10
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d84:	4804      	ldr	r0, [pc, #16]	; (8003d98 <MX_SPI1_Init+0x64>)
 8003d86:	f007 ffbf 	bl	800bd08 <HAL_SPI_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d90:	f7fe fcde 	bl	8002750 <Error_Handler>
  }

}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	2000e170 	.word	0x2000e170
 8003d9c:	40013000 	.word	0x40013000

08003da0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <MX_SPI2_Init+0x68>)
 8003da8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003db0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003dec:	220a      	movs	r2, #10
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003df0:	4804      	ldr	r0, [pc, #16]	; (8003e04 <MX_SPI2_Init+0x64>)
 8003df2:	f007 ff89 	bl	800bd08 <HAL_SPI_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003dfc:	f7fe fca8 	bl	8002750 <Error_Handler>
  }

}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	2000e118 	.word	0x2000e118
 8003e08:	40003800 	.word	0x40003800

08003e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	; 0x30
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e14:	f107 031c 	add.w	r3, r7, #28
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a32      	ldr	r2, [pc, #200]	; (8003ef4 <HAL_SPI_MspInit+0xe8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12c      	bne.n	8003e88 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	4a30      	ldr	r2, [pc, #192]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e66:	23e0      	movs	r3, #224	; 0xe0
 8003e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e72:	2303      	movs	r3, #3
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e76:	2305      	movs	r3, #5
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7a:	f107 031c 	add.w	r3, r7, #28
 8003e7e:	4619      	mov	r1, r3
 8003e80:	481e      	ldr	r0, [pc, #120]	; (8003efc <HAL_SPI_MspInit+0xf0>)
 8003e82:	f004 fd71 	bl	8008968 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003e86:	e031      	b.n	8003eec <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_SPI_MspInit+0xf4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d12c      	bne.n	8003eec <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a10      	ldr	r2, [pc, #64]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_SPI_MspInit+0xec>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003eca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003edc:	2305      	movs	r3, #5
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4807      	ldr	r0, [pc, #28]	; (8003f04 <HAL_SPI_MspInit+0xf8>)
 8003ee8:	f004 fd3e 	bl	8008968 <HAL_GPIO_Init>
}
 8003eec:	bf00      	nop
 8003eee:	3730      	adds	r7, #48	; 0x30
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40013000 	.word	0x40013000
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40020000 	.word	0x40020000
 8003f00:	40003800 	.word	0x40003800
 8003f04:	40020400 	.word	0x40020400

08003f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_MspInit+0x4c>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_MspInit+0x4c>)
 8003f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_MspInit+0x4c>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_MspInit+0x4c>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <HAL_MspInit+0x4c>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_MspInit+0x4c>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800

08003f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f6a:	e7fe      	b.n	8003f6a <HardFault_Handler+0x4>

08003f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f70:	e7fe      	b.n	8003f70 <MemManage_Handler+0x4>

08003f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f76:	e7fe      	b.n	8003f76 <BusFault_Handler+0x4>

08003f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f7c:	e7fe      	b.n	8003f7c <UsageFault_Handler+0x4>

08003f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fac:	f003 fb3e 	bl	800762c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <SDIO_IRQHandler+0x10>)
 8003fba:	f006 fe11 	bl	800abe0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000e094 	.word	0x2000e094

08003fc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003fcc:	4802      	ldr	r0, [pc, #8]	; (8003fd8 <DMA2_Stream0_IRQHandler+0x10>)
 8003fce:	f004 fa57 	bl	8008480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200049e0 	.word	0x200049e0

08003fdc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003fe0:	4802      	ldr	r0, [pc, #8]	; (8003fec <DMA2_Stream3_IRQHandler+0x10>)
 8003fe2:	f004 fa4d 	bl	8008480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000dfd4 	.word	0x2000dfd4

08003ff0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <DMA2_Stream6_IRQHandler+0x10>)
 8003ff6:	f004 fa43 	bl	8008480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	2000e034 	.word	0x2000e034

08004004 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800400c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004010:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800401c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004020:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004024:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800402c:	e000      	b.n	8004030 <ITM_SendChar+0x2c>
    {
      __NOP();
 800402e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004030:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f9      	beq.n	800402e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800403a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004044:	687b      	ldr	r3, [r7, #4]
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e00a      	b.n	800407a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004064:	f3af 8000 	nop.w
 8004068:	4601      	mov	r1, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	60ba      	str	r2, [r7, #8]
 8004070:	b2ca      	uxtb	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	3301      	adds	r3, #1
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	429a      	cmp	r2, r3
 8004080:	dbf0      	blt.n	8004064 <_read+0x12>
	}

return len;
 8004082:	687b      	ldr	r3, [r7, #4]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e009      	b.n	80040b2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	60ba      	str	r2, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ffac 	bl	8004004 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	dbf1      	blt.n	800409e <_write+0x12>
	}
	return len;
 80040ba:	687b      	ldr	r3, [r7, #4]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_close>:

int _close(int file)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	return -1;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040ec:	605a      	str	r2, [r3, #4]
	return 0;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <_isatty>:

int _isatty(int file)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	return 1;
 8004104:	2301      	movs	r3, #1
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
	return 0;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <_sbrk+0x50>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <_sbrk+0x16>
		heap_end = &end;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <_sbrk+0x50>)
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <_sbrk+0x54>)
 8004140:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <_sbrk+0x50>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <_sbrk+0x50>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	466a      	mov	r2, sp
 8004152:	4293      	cmp	r3, r2
 8004154:	d907      	bls.n	8004166 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004156:	f00c fc0d 	bl	8010974 <__errno>
 800415a:	4602      	mov	r2, r0
 800415c:	230c      	movs	r3, #12
 800415e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	e006      	b.n	8004174 <_sbrk+0x48>
	}

	heap_end += incr;
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <_sbrk+0x50>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	4a03      	ldr	r2, [pc, #12]	; (800417c <_sbrk+0x50>)
 8004170:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000860 	.word	0x20000860
 8004180:	20010240 	.word	0x20010240

08004184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <SystemInit+0x28>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <SystemInit+0x28>)
 8004190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <SystemInit+0x28>)
 800419a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800419e:	609a      	str	r2, [r3, #8]
#endif
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 fb43 	bl	8009848 <HAL_I2C_GetState>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d003      	beq.n	80041d0 <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 80041c8:	481a      	ldr	r0, [pc, #104]	; (8004234 <h3l_init+0x84>)
 80041ca:	f00d f8e1 	bl	8011390 <puts>
 80041ce:	e002      	b.n	80041d6 <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 80041d0:	4819      	ldr	r0, [pc, #100]	; (8004238 <h3l_init+0x88>)
 80041d2:	f00d f8dd 	bl	8011390 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6858      	ldr	r0, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b299      	uxth	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	7a1b      	ldrb	r3, [r3, #8]
 80041e4:	220a      	movs	r2, #10
 80041e6:	f005 fa01 	bl	80095ec <HAL_I2C_IsDeviceReady>
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 80041f4:	4811      	ldr	r0, [pc, #68]	; (800423c <h3l_init+0x8c>)
 80041f6:	f00d f8cb 	bl	8011390 <puts>
		printf("Errorcode: %d\n", _ret);
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	4619      	mov	r1, r3
 80041fe:	4810      	ldr	r0, [pc, #64]	; (8004240 <h3l_init+0x90>)
 8004200:	f00d f852 	bl	80112a8 <iprintf>
		return 0;
 8004204:	2300      	movs	r3, #0
 8004206:	e010      	b.n	800422a <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8004208:	233f      	movs	r3, #63	; 0x3f
 800420a:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	461a      	mov	r2, r3
 8004210:	2120      	movs	r1, #32
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9b0 	bl	8004578 <h3l_write>


	PWR_CONF = 0b10000000;
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	461a      	mov	r2, r3
 8004220:	2123      	movs	r1, #35	; 0x23
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9a8 	bl	8004578 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8004228:	2301      	movs	r3, #1
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	080168e4 	.word	0x080168e4
 8004238:	080168f4 	.word	0x080168f4
 800423c:	08016904 	.word	0x08016904
 8004240:	08016914 	.word	0x08016914

08004244 <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b087      	sub	sp, #28
 8004248:	af02      	add	r7, sp, #8
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 800424e:	2328      	movs	r3, #40	; 0x28
 8004250:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6858      	ldr	r0, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b299      	uxth	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7a1b      	ldrb	r3, [r3, #8]
 8004260:	f107 020f 	add.w	r2, r7, #15
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2301      	movs	r3, #1
 8004268:	f004 fe9c 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6858      	ldr	r0, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b299      	uxth	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7a1b      	ldrb	r3, [r3, #8]
 800427a:	f107 0208 	add.w	r2, r7, #8
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2301      	movs	r3, #1
 8004282:	f004 ff8d 	bl	80091a0 <HAL_I2C_Master_Receive>
	reg = 0x29;
 8004286:	2329      	movs	r3, #41	; 0x29
 8004288:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6858      	ldr	r0, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b299      	uxth	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	7a1b      	ldrb	r3, [r3, #8]
 8004298:	f107 020f 	add.w	r2, r7, #15
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2301      	movs	r3, #1
 80042a0:	f004 fe80 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6858      	ldr	r0, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b299      	uxth	r1, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7a1b      	ldrb	r3, [r3, #8]
 80042b2:	461c      	mov	r4, r3
 80042b4:	f107 0308 	add.w	r3, r7, #8
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	9400      	str	r4, [sp, #0]
 80042bc:	2301      	movs	r3, #1
 80042be:	f004 ff6f 	bl	80091a0 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 80042c2:	232a      	movs	r3, #42	; 0x2a
 80042c4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6858      	ldr	r0, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b299      	uxth	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7a1b      	ldrb	r3, [r3, #8]
 80042d4:	f107 020f 	add.w	r2, r7, #15
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2301      	movs	r3, #1
 80042dc:	f004 fe62 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6858      	ldr	r0, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b299      	uxth	r1, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7a1b      	ldrb	r3, [r3, #8]
 80042ee:	461c      	mov	r4, r3
 80042f0:	f107 0308 	add.w	r3, r7, #8
 80042f4:	1c9a      	adds	r2, r3, #2
 80042f6:	9400      	str	r4, [sp, #0]
 80042f8:	2301      	movs	r3, #1
 80042fa:	f004 ff51 	bl	80091a0 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 80042fe:	232b      	movs	r3, #43	; 0x2b
 8004300:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6858      	ldr	r0, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	b299      	uxth	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7a1b      	ldrb	r3, [r3, #8]
 8004310:	f107 020f 	add.w	r2, r7, #15
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2301      	movs	r3, #1
 8004318:	f004 fe44 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6858      	ldr	r0, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b299      	uxth	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7a1b      	ldrb	r3, [r3, #8]
 800432a:	461c      	mov	r4, r3
 800432c:	f107 0308 	add.w	r3, r7, #8
 8004330:	1cda      	adds	r2, r3, #3
 8004332:	9400      	str	r4, [sp, #0]
 8004334:	2301      	movs	r3, #1
 8004336:	f004 ff33 	bl	80091a0 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 800433a:	232c      	movs	r3, #44	; 0x2c
 800433c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6858      	ldr	r0, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b299      	uxth	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7a1b      	ldrb	r3, [r3, #8]
 800434c:	f107 020f 	add.w	r2, r7, #15
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2301      	movs	r3, #1
 8004354:	f004 fe26 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6858      	ldr	r0, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b299      	uxth	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7a1b      	ldrb	r3, [r3, #8]
 8004366:	461c      	mov	r4, r3
 8004368:	f107 0308 	add.w	r3, r7, #8
 800436c:	1d1a      	adds	r2, r3, #4
 800436e:	9400      	str	r4, [sp, #0]
 8004370:	2301      	movs	r3, #1
 8004372:	f004 ff15 	bl	80091a0 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 8004376:	232d      	movs	r3, #45	; 0x2d
 8004378:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6858      	ldr	r0, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b299      	uxth	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7a1b      	ldrb	r3, [r3, #8]
 8004388:	f107 020f 	add.w	r2, r7, #15
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2301      	movs	r3, #1
 8004390:	f004 fe08 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6858      	ldr	r0, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b299      	uxth	r1, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7a1b      	ldrb	r3, [r3, #8]
 80043a2:	461c      	mov	r4, r3
 80043a4:	f107 0308 	add.w	r3, r7, #8
 80043a8:	1d5a      	adds	r2, r3, #5
 80043aa:	9400      	str	r4, [sp, #0]
 80043ac:	2301      	movs	r3, #1
 80043ae:	f004 fef7 	bl	80091a0 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 80043b2:	7a3b      	ldrb	r3, [r7, #8]
 80043b4:	b21a      	sxth	r2, r3
 80043b6:	7a7b      	ldrb	r3, [r7, #9]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	b21a      	sxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 80043c4:	7abb      	ldrb	r3, [r7, #10]
 80043c6:	b21a      	sxth	r2, r3
 80043c8:	7afb      	ldrb	r3, [r7, #11]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b21a      	sxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 80043d6:	7b3b      	ldrb	r3, [r7, #12]
 80043d8:	b21a      	sxth	r2, r3
 80043da:	7b7b      	ldrb	r3, [r7, #13]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	b21b      	sxth	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b21a      	sxth	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80043ee:	111b      	asrs	r3, r3, #4
 80043f0:	b21a      	sxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043fc:	111b      	asrs	r3, r3, #4
 80043fe:	b21a      	sxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800440a:	111b      	asrs	r3, r3, #4
 800440c:	b21a      	sxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	3302      	adds	r3, #2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8004426:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8004432:	801a      	strh	r2, [r3, #0]

};
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bd90      	pop	{r4, r7, pc}
 800443c:	0000      	movs	r0, r0
	...

08004440 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8004440:	b590      	push	{r4, r7, lr}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004458:	ee17 0a90 	vmov	r0, s15
 800445c:	f7fc f874 	bl	8000548 <__aeabi_f2d>
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	4b42      	ldr	r3, [pc, #264]	; (8004570 <h3l_convert+0x130>)
 8004466:	f7fc f8c7 	bl	80005f8 <__aeabi_dmul>
 800446a:	4603      	mov	r3, r0
 800446c:	460c      	mov	r4, r1
 800446e:	4618      	mov	r0, r3
 8004470:	4621      	mov	r1, r4
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <h3l_convert+0x134>)
 8004478:	f7fc f9e8 	bl	800084c <__aeabi_ddiv>
 800447c:	4603      	mov	r3, r0
 800447e:	460c      	mov	r4, r1
 8004480:	4618      	mov	r0, r3
 8004482:	4621      	mov	r1, r4
 8004484:	a338      	add	r3, pc, #224	; (adr r3, 8004568 <h3l_convert+0x128>)
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f7fc f8b5 	bl	80005f8 <__aeabi_dmul>
 800448e:	4603      	mov	r3, r0
 8004490:	460c      	mov	r4, r1
 8004492:	4618      	mov	r0, r3
 8004494:	4621      	mov	r1, r4
 8004496:	f7fc fba7 	bl	8000be8 <__aeabi_d2f>
 800449a:	4602      	mov	r2, r0
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ae:	ee17 0a90 	vmov	r0, s15
 80044b2:	f7fc f849 	bl	8000548 <__aeabi_f2d>
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <h3l_convert+0x130>)
 80044bc:	f7fc f89c 	bl	80005f8 <__aeabi_dmul>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	4618      	mov	r0, r3
 80044c6:	4621      	mov	r1, r4
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	4b29      	ldr	r3, [pc, #164]	; (8004574 <h3l_convert+0x134>)
 80044ce:	f7fc f9bd 	bl	800084c <__aeabi_ddiv>
 80044d2:	4603      	mov	r3, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	4618      	mov	r0, r3
 80044d8:	4621      	mov	r1, r4
 80044da:	a323      	add	r3, pc, #140	; (adr r3, 8004568 <h3l_convert+0x128>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f7fc f88a 	bl	80005f8 <__aeabi_dmul>
 80044e4:	4603      	mov	r3, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	4619      	mov	r1, r3
 80044ea:	4622      	mov	r2, r4
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	1d1c      	adds	r4, r3, #4
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	f7fc fb78 	bl	8000be8 <__aeabi_d2f>
 80044f8:	4603      	mov	r3, r0
 80044fa:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450a:	ee17 0a90 	vmov	r0, s15
 800450e:	f7fc f81b 	bl	8000548 <__aeabi_f2d>
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	4b16      	ldr	r3, [pc, #88]	; (8004570 <h3l_convert+0x130>)
 8004518:	f7fc f86e 	bl	80005f8 <__aeabi_dmul>
 800451c:	4603      	mov	r3, r0
 800451e:	460c      	mov	r4, r1
 8004520:	4618      	mov	r0, r3
 8004522:	4621      	mov	r1, r4
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <h3l_convert+0x134>)
 800452a:	f7fc f98f 	bl	800084c <__aeabi_ddiv>
 800452e:	4603      	mov	r3, r0
 8004530:	460c      	mov	r4, r1
 8004532:	4618      	mov	r0, r3
 8004534:	4621      	mov	r1, r4
 8004536:	a30c      	add	r3, pc, #48	; (adr r3, 8004568 <h3l_convert+0x128>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fc f85c 	bl	80005f8 <__aeabi_dmul>
 8004540:	4603      	mov	r3, r0
 8004542:	460c      	mov	r4, r1
 8004544:	4619      	mov	r1, r3
 8004546:	4622      	mov	r2, r4
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f103 0408 	add.w	r4, r3, #8
 800454e:	4608      	mov	r0, r1
 8004550:	4611      	mov	r1, r2
 8004552:	f7fc fb49 	bl	8000be8 <__aeabi_d2f>
 8004556:	4603      	mov	r3, r0
 8004558:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bd90      	pop	{r4, r7, pc}
 8004562:	bf00      	nop
 8004564:	f3af 8000 	nop.w
 8004568:	51eb851f 	.word	0x51eb851f
 800456c:	40239eb8 	.word	0x40239eb8
 8004570:	40488000 	.word	0x40488000
 8004574:	408f4000 	.word	0x408f4000

08004578 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
 8004584:	4613      	mov	r3, r2
 8004586:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 800458c:	78bb      	ldrb	r3, [r7, #2]
 800458e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6858      	ldr	r0, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b299      	uxth	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7a1b      	ldrb	r3, [r3, #8]
 800459e:	f107 020c 	add.w	r2, r7, #12
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2302      	movs	r3, #2
 80045a6:	f004 fcfd 	bl	8008fa4 <HAL_I2C_Master_Transmit>

};
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d81a      	bhi.n	8004600 <_get_accel_sensitivity+0x4c>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <_get_accel_sensitivity+0x1c>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045e1 	.word	0x080045e1
 80045d4:	080045e9 	.word	0x080045e9
 80045d8:	080045f1 	.word	0x080045f1
 80045dc:	080045f9 	.word	0x080045f9
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 80045e0:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80045e4:	60fb      	str	r3, [r7, #12]
    break;
 80045e6:	e00b      	b.n	8004600 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 80045e8:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80045ec:	60fb      	str	r3, [r7, #12]
    break;
 80045ee:	e007      	b.n	8004600 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 80045f0:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80045f4:	60fb      	str	r3, [r7, #12]
    break;
 80045f6:	e003      	b.n	8004600 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 80045f8:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80045fc:	60fb      	str	r3, [r7, #12]
    break;
 80045fe:	bf00      	nop
  }
  return f;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	ee07 3a90 	vmov	s15, r3
}
 8004606:	eeb0 0a67 	vmov.f32	s0, s15
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d816      	bhi.n	8004658 <_get_gyro_sensitivity+0x44>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <_get_gyro_sensitivity+0x1c>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004641 	.word	0x08004641
 8004634:	08004647 	.word	0x08004647
 8004638:	0800464d 	.word	0x0800464d
 800463c:	08004653 	.word	0x08004653
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <_get_gyro_sensitivity+0x58>)
 8004642:	60fb      	str	r3, [r7, #12]
	break;
 8004644:	e008      	b.n	8004658 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <_get_gyro_sensitivity+0x5c>)
 8004648:	60fb      	str	r3, [r7, #12]
    break;
 800464a:	e005      	b.n	8004658 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <_get_gyro_sensitivity+0x60>)
 800464e:	60fb      	str	r3, [r7, #12]
    break;
 8004650:	e002      	b.n	8004658 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <_get_gyro_sensitivity+0x64>)
 8004654:	60fb      	str	r3, [r7, #12]
    break;
 8004656:	bf00      	nop
  }
  return f;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	ee07 3a90 	vmov	s15, r3
}
 800465e:	eeb0 0a67 	vmov.f32	s0, s15
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	42830000 	.word	0x42830000
 8004670:	42033333 	.word	0x42033333
 8004674:	41833333 	.word	0x41833333
 8004678:	41033333 	.word	0x41033333

0800467c <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	461a      	mov	r2, r3
 8004688:	460b      	mov	r3, r1
 800468a:	72fb      	strb	r3, [r7, #11]
 800468c:	4613      	mov	r3, r2
 800468e:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8004690:	7afb      	ldrb	r3, [r7, #11]
 8004692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004696:	b2db      	uxtb	r3, r3
 8004698:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	889b      	ldrh	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	4619      	mov	r1, r3
 80046a6:	f004 fb11 	bl	8008ccc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6898      	ldr	r0, [r3, #8]
 80046ae:	f107 010b 	add.w	r1, r7, #11
 80046b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046b6:	2201      	movs	r2, #1
 80046b8:	f007 fb8a 	bl	800bdd0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6898      	ldr	r0, [r3, #8]
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	f007 fcb6 	bl	800c038 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	889b      	ldrh	r3, [r3, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	4619      	mov	r1, r3
 80046d8:	f004 faf8 	bl	8008ccc <HAL_GPIO_WritePin>
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	461a      	mov	r2, r3
 80046f0:	460b      	mov	r3, r1
 80046f2:	72fb      	strb	r3, [r7, #11]
 80046f4:	4613      	mov	r3, r2
 80046f6:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	889b      	ldrh	r3, [r3, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	4619      	mov	r1, r3
 8004704:	f004 fae2 	bl	8008ccc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6898      	ldr	r0, [r3, #8]
 800470c:	f107 010b 	add.w	r1, r7, #11
 8004710:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004714:	2201      	movs	r2, #1
 8004716:	f007 fb5b 	bl	800bdd0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6898      	ldr	r0, [r3, #8]
 800471e:	893a      	ldrh	r2, [r7, #8]
 8004720:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	f007 fb53 	bl	800bdd0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	889b      	ldrh	r3, [r3, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	4619      	mov	r1, r3
 8004736:	f004 fac9 	bl	8008ccc <HAL_GPIO_WritePin>
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 800474e:	2300      	movs	r3, #0
 8004750:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8004752:	2381      	movs	r3, #129	; 0x81
 8004754:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8004756:	f107 020f 	add.w	r2, r7, #15
 800475a:	2301      	movs	r3, #1
 800475c:	216b      	movs	r1, #107	; 0x6b
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff ffc0 	bl	80046e4 <_icm_write_bytes>
	HAL_Delay(1);
 8004764:	2001      	movs	r0, #1
 8004766:	f002 ff81 	bl	800766c <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 800476e:	f107 020f 	add.w	r2, r7, #15
 8004772:	2301      	movs	r3, #1
 8004774:	216b      	movs	r1, #107	; 0x6b
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ffb4 	bl	80046e4 <_icm_write_bytes>
    HAL_Delay(1);
 800477c:	2001      	movs	r0, #1
 800477e:	f002 ff75 	bl	800766c <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8004782:	f107 020c 	add.w	r2, r7, #12
 8004786:	2301      	movs	r3, #1
 8004788:	2175      	movs	r1, #117	; 0x75
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff76 	bl	800467c <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8004790:	7b3b      	ldrb	r3, [r7, #12]
 8004792:	2bac      	cmp	r3, #172	; 0xac
 8004794:	d001      	beq.n	800479a <icm20601_init+0x58>
 8004796:	2300      	movs	r3, #0
 8004798:	e093      	b.n	80048c2 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 800479a:	233f      	movs	r3, #63	; 0x3f
 800479c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 800479e:	f107 020f 	add.w	r2, r7, #15
 80047a2:	2301      	movs	r3, #1
 80047a4:	216c      	movs	r1, #108	; 0x6c
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ff9c 	bl	80046e4 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80047b0:	f107 020f 	add.w	r2, r7, #15
 80047b4:	2301      	movs	r3, #1
 80047b6:	216a      	movs	r1, #106	; 0x6a
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff93 	bl	80046e4 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 80047be:	2341      	movs	r3, #65	; 0x41
 80047c0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80047c2:	f107 020f 	add.w	r2, r7, #15
 80047c6:	2301      	movs	r3, #1
 80047c8:	216a      	movs	r1, #106	; 0x6a
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ff8a 	bl	80046e4 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7b1b      	ldrb	r3, [r3, #12]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d102      	bne.n	80047de <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 80047d8:	2308      	movs	r3, #8
 80047da:	73fb      	strb	r3, [r7, #15]
 80047dc:	e002      	b.n	80047e4 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	7b1b      	ldrb	r3, [r3, #12]
 80047e2:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 80047e4:	f107 020f 	add.w	r2, r7, #15
 80047e8:	2301      	movs	r3, #1
 80047ea:	211d      	movs	r1, #29
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff79 	bl	80046e4 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7b5b      	ldrb	r3, [r3, #13]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 80047fc:	f107 020f 	add.w	r2, r7, #15
 8004800:	2301      	movs	r3, #1
 8004802:	211c      	movs	r1, #28
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff6d 	bl	80046e4 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7b9b      	ldrb	r3, [r3, #14]
 800480e:	2b08      	cmp	r3, #8
 8004810:	d119      	bne.n	8004846 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004816:	f107 020f 	add.w	r2, r7, #15
 800481a:	2301      	movs	r3, #1
 800481c:	211a      	movs	r1, #26
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff60 	bl	80046e4 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7bdb      	ldrb	r3, [r3, #15]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	b25b      	sxtb	r3, r3
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	b25b      	sxtb	r3, r3
 8004832:	b2db      	uxtb	r3, r3
 8004834:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004836:	f107 020f 	add.w	r2, r7, #15
 800483a:	2301      	movs	r3, #1
 800483c:	211b      	movs	r1, #27
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff50 	bl	80046e4 <_icm_write_bytes>
 8004844:	e033      	b.n	80048ae <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	7b9b      	ldrb	r3, [r3, #14]
 800484a:	2b09      	cmp	r3, #9
 800484c:	d119      	bne.n	8004882 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004852:	f107 020f 	add.w	r2, r7, #15
 8004856:	2301      	movs	r3, #1
 8004858:	211a      	movs	r1, #26
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff ff42 	bl	80046e4 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	7bdb      	ldrb	r3, [r3, #15]
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	b25b      	sxtb	r3, r3
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	b25b      	sxtb	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004872:	f107 020f 	add.w	r2, r7, #15
 8004876:	2301      	movs	r3, #1
 8004878:	211b      	movs	r1, #27
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ff32 	bl	80046e4 <_icm_write_bytes>
 8004880:	e015      	b.n	80048ae <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7b9b      	ldrb	r3, [r3, #14]
 8004886:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004888:	f107 020f 	add.w	r2, r7, #15
 800488c:	2301      	movs	r3, #1
 800488e:	211a      	movs	r1, #26
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff27 	bl	80046e4 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7bdb      	ldrb	r3, [r3, #15]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	b2db      	uxtb	r3, r3
 800489e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80048a0:	f107 020f 	add.w	r2, r7, #15
 80048a4:	2301      	movs	r3, #1
 80048a6:	211b      	movs	r1, #27
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ff1b 	bl	80046e4 <_icm_write_bytes>
     }


    tmp = 0x00;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 80048b2:	f107 020f 	add.w	r2, r7, #15
 80048b6:	2301      	movs	r3, #1
 80048b8:	216c      	movs	r1, #108	; 0x6c
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff ff12 	bl	80046e4 <_icm_write_bytes>


    return 1;
 80048c0:	2301      	movs	r3, #1
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 80048d4:	f107 0308 	add.w	r3, r7, #8
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 80048de:	f107 0208 	add.w	r2, r7, #8
 80048e2:	2306      	movs	r3, #6
 80048e4:	213b      	movs	r1, #59	; 0x3b
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff fec8 	bl	800467c <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 80048ec:	7a3b      	ldrb	r3, [r7, #8]
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	b21a      	sxth	r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	801a      	strh	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004908:	7a7b      	ldrb	r3, [r7, #9]
 800490a:	b21b      	sxth	r3, r3
 800490c:	4313      	orrs	r3, r2
 800490e:	b21a      	sxth	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8004914:	7aba      	ldrb	r2, [r7, #10]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3302      	adds	r3, #2
 800491a:	b212      	sxth	r2, r2
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	3302      	adds	r3, #2
 8004922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	3302      	adds	r3, #2
 800492c:	b212      	sxth	r2, r2
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	3302      	adds	r3, #2
 8004934:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004938:	7afb      	ldrb	r3, [r7, #11]
 800493a:	b21a      	sxth	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3302      	adds	r3, #2
 8004940:	430a      	orrs	r2, r1
 8004942:	b212      	sxth	r2, r2
 8004944:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8004946:	7b3a      	ldrb	r2, [r7, #12]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	3304      	adds	r3, #4
 800494c:	b212      	sxth	r2, r2
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	3304      	adds	r3, #4
 8004954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004958:	021a      	lsls	r2, r3, #8
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	3304      	adds	r3, #4
 800495e:	b212      	sxth	r2, r2
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	f9b3 1000 	ldrsh.w	r1, [r3]
 800496a:	7b7b      	ldrb	r3, [r7, #13]
 800496c:	b21a      	sxth	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	3304      	adds	r3, #4
 8004972:	430a      	orrs	r2, r1
 8004974:	b212      	sxth	r2, r2
 8004976:	801a      	strh	r2, [r3, #0]
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 800498a:	f107 0308 	add.w	r3, r7, #8
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8004994:	f107 0208 	add.w	r2, r7, #8
 8004998:	2306      	movs	r3, #6
 800499a:	2143      	movs	r1, #67	; 0x43
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fe6d 	bl	800467c <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 80049a2:	7a3b      	ldrb	r3, [r7, #8]
 80049a4:	b21a      	sxth	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	b21a      	sxth	r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80049be:	7a7b      	ldrb	r3, [r7, #9]
 80049c0:	b21b      	sxth	r3, r3
 80049c2:	4313      	orrs	r3, r2
 80049c4:	b21a      	sxth	r2, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 80049ca:	7aba      	ldrb	r2, [r7, #10]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	3302      	adds	r3, #2
 80049d0:	b212      	sxth	r2, r2
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3302      	adds	r3, #2
 80049d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049dc:	021a      	lsls	r2, r3, #8
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	3302      	adds	r3, #2
 80049e2:	b212      	sxth	r2, r2
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	3302      	adds	r3, #2
 80049ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 80049ee:	7afb      	ldrb	r3, [r7, #11]
 80049f0:	b21a      	sxth	r2, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	3302      	adds	r3, #2
 80049f6:	430a      	orrs	r2, r1
 80049f8:	b212      	sxth	r2, r2
 80049fa:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 80049fc:	7b3a      	ldrb	r2, [r7, #12]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	3304      	adds	r3, #4
 8004a02:	b212      	sxth	r2, r2
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	3304      	adds	r3, #4
 8004a14:	b212      	sxth	r2, r2
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004a20:	7b7b      	ldrb	r3, [r7, #13]
 8004a22:	b21a      	sxth	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	3304      	adds	r3, #4
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	b212      	sxth	r2, r2
 8004a2c:	801a      	strh	r2, [r3, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8004a40:	2300      	movs	r3, #0
 8004a42:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8004a44:	f107 020c 	add.w	r2, r7, #12
 8004a48:	2302      	movs	r3, #2
 8004a4a:	2141      	movs	r1, #65	; 0x41
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fe15 	bl	800467c <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8004a52:	7b3b      	ldrb	r3, [r7, #12]
 8004a54:	b21a      	sxth	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	b21a      	sxth	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a6e:	7b7b      	ldrb	r3, [r7, #13]
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b21a      	sxth	r2, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	801a      	strh	r2, [r3, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	0000      	movs	r0, r0
 8004a84:	0000      	movs	r0, r0
	...

08004a88 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b089      	sub	sp, #36	; 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 8004a92:	f107 0316 	add.w	r3, r7, #22
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ffcc 	bl	8004a36 <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 8004a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004aaa:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <icm20601_read_data+0x1a8>)
 8004aac:	ed93 7a00 	vldr	s14, [r3]
 8004ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 8004ac2:	f107 0310 	add.w	r3, r7, #16
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	7b5b      	ldrb	r3, [r3, #13]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fd6f 	bl	80045b4 <_get_accel_sensitivity>
 8004ad6:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 8004ada:	f107 0310 	add.w	r3, r7, #16
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff fef2 	bl	80048ca <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 8004ae6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004af2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004af6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004afa:	ee16 0a90 	vmov	r0, s13
 8004afe:	f7fb fd23 	bl	8000548 <__aeabi_f2d>
 8004b02:	a349      	add	r3, pc, #292	; (adr r3, 8004c28 <icm20601_read_data+0x1a0>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f7fb fd76 	bl	80005f8 <__aeabi_dmul>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	4619      	mov	r1, r3
 8004b12:	4622      	mov	r2, r4
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1d1c      	adds	r4, r3, #4
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	f7fc f864 	bl	8000be8 <__aeabi_d2f>
 8004b20:	4603      	mov	r3, r0
 8004b22:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8004b24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b30:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b38:	ee16 0a90 	vmov	r0, s13
 8004b3c:	f7fb fd04 	bl	8000548 <__aeabi_f2d>
 8004b40:	a339      	add	r3, pc, #228	; (adr r3, 8004c28 <icm20601_read_data+0x1a0>)
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f7fb fd57 	bl	80005f8 <__aeabi_dmul>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4622      	mov	r2, r4
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f103 0408 	add.w	r4, r3, #8
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	f7fc f844 	bl	8000be8 <__aeabi_d2f>
 8004b60:	4603      	mov	r3, r0
 8004b62:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 8004b64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b68:	ee07 3a90 	vmov	s15, r3
 8004b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b70:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b78:	ee16 0a90 	vmov	r0, s13
 8004b7c:	f7fb fce4 	bl	8000548 <__aeabi_f2d>
 8004b80:	a329      	add	r3, pc, #164	; (adr r3, 8004c28 <icm20601_read_data+0x1a0>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fd37 	bl	80005f8 <__aeabi_dmul>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4622      	mov	r2, r4
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f103 040c 	add.w	r4, r3, #12
 8004b98:	4608      	mov	r0, r1
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	f7fc f824 	bl	8000be8 <__aeabi_d2f>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 8004ba4:	f107 0308 	add.w	r3, r7, #8
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->accel_g);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7b5b      	ldrb	r3, [r3, #13]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fd2e 	bl	8004614 <_get_gyro_sensitivity>
 8004bb8:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff fedc 	bl	8004980 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 8004bc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004bcc:	ee07 3a90 	vmov	s15, r3
 8004bd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	3310      	adds	r3, #16
 8004bd8:	ed97 7a06 	vldr	s14, [r7, #24]
 8004bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be0:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 8004be4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	ed97 7a06 	vldr	s14, [r7, #24]
 8004bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bfc:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8004c00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	3318      	adds	r3, #24
 8004c10:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c18:	edc3 7a00 	vstr	s15, [r3]
}
 8004c1c:	bf00      	nop
 8004c1e:	3724      	adds	r7, #36	; 0x24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	f3af 8000 	nop.w
 8004c28:	51eb851f 	.word	0x51eb851f
 8004c2c:	40239eb8 	.word	0x40239eb8
 8004c30:	2000016c 	.word	0x2000016c

08004c34 <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	889b      	ldrh	r3, [r3, #4]
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f004 f859 	bl	8008cfe <HAL_GPIO_TogglePin>
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <turn_on>:

void turn_on(struct LED_dev * ctrl){
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	889b      	ldrh	r3, [r3, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4619      	mov	r1, r3
 8004c68:	f004 f830 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <turn_off>:

void turn_off(struct LED_dev * ctrl){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	889b      	ldrh	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	4619      	mov	r1, r3
 8004c88:	f004 f820 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <ms5607_init>:
#include <stdio.h>
#include <math.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f004 fdd1 	bl	8009848 <HAL_I2C_GetState>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d003      	beq.n	8004cb4 <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 8004cac:	484a      	ldr	r0, [pc, #296]	; (8004dd8 <ms5607_init+0x144>)
 8004cae:	f00c fb6f 	bl	8011390 <puts>
 8004cb2:	e002      	b.n	8004cba <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 8004cb4:	4849      	ldr	r0, [pc, #292]	; (8004ddc <ms5607_init+0x148>)
 8004cb6:	f00c fb6b 	bl	8011390 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6858      	ldr	r0, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b299      	uxth	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	220a      	movs	r2, #10
 8004cca:	f004 fc8f 	bl	80095ec <HAL_I2C_IsDeviceReady>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 8004cd2:	7cfb      	ldrb	r3, [r7, #19]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 8004cd8:	4841      	ldr	r0, [pc, #260]	; (8004de0 <ms5607_init+0x14c>)
 8004cda:	f00c fb59 	bl	8011390 <puts>
		printf("Errorcode: %d\n", _ret);
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4840      	ldr	r0, [pc, #256]	; (8004de4 <ms5607_init+0x150>)
 8004ce4:	f00c fae0 	bl	80112a8 <iprintf>
		return 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e070      	b.n	8004dce <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 8004cec:	231e      	movs	r3, #30
 8004cee:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6858      	ldr	r0, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b299      	uxth	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	7a1b      	ldrb	r3, [r3, #8]
 8004cfe:	f107 0210 	add.w	r2, r7, #16
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2301      	movs	r3, #1
 8004d06:	f004 f94d 	bl	8008fa4 <HAL_I2C_Master_Transmit>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 8004d0e:	2064      	movs	r0, #100	; 0x64
 8004d10:	f002 fcac 	bl	800766c <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	e043      	b.n	8004da2 <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 8004d1a:	23a0      	movs	r3, #160	; 0xa0
 8004d1c:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	4413      	add	r3, r2
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6858      	ldr	r0, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b299      	uxth	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	7a1b      	ldrb	r3, [r3, #8]
 8004d3c:	f107 020f 	add.w	r2, r7, #15
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	2301      	movs	r3, #1
 8004d44:	f004 f92e 	bl	8008fa4 <HAL_I2C_Master_Transmit>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 8004d4c:	200f      	movs	r0, #15
 8004d4e:	f002 fc8d 	bl	800766c <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6858      	ldr	r0, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	b299      	uxth	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7a1b      	ldrb	r3, [r3, #8]
 8004d60:	f107 020c 	add.w	r2, r7, #12
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	2302      	movs	r3, #2
 8004d68:	f004 fa1a 	bl	80091a0 <HAL_I2C_Master_Receive>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8004d70:	7b3b      	ldrb	r3, [r7, #12]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	b299      	uxth	r1, r3
 8004d78:	7b7b      	ldrb	r3, [r7, #13]
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	430a      	orrs	r2, r1
 8004d82:	b291      	uxth	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8004d96:	4814      	ldr	r0, [pc, #80]	; (8004de8 <ms5607_init+0x154>)
 8004d98:	f00c fafa 	bl	8011390 <puts>
	for(int i = 1; i < 7; i++){
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	ddb8      	ble.n	8004d1a <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8004da8:	4810      	ldr	r0, [pc, #64]	; (8004dec <ms5607_init+0x158>)
 8004daa:	f00c faf1 	bl	8011390 <puts>

	buf[0] = 0x44;
 8004dae:	2344      	movs	r3, #68	; 0x44
 8004db0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6858      	ldr	r0, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	b299      	uxth	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	7a1b      	ldrb	r3, [r3, #8]
 8004dc0:	f107 020c 	add.w	r2, r7, #12
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f004 f8ec 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 8004dcc:	2301      	movs	r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	08016924 	.word	0x08016924
 8004ddc:	08016934 	.word	0x08016934
 8004de0:	08016944 	.word	0x08016944
 8004de4:	08016954 	.word	0x08016954
 8004de8:	08016964 	.word	0x08016964
 8004dec:	0801697c 	.word	0x0801697c

08004df0 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6858      	ldr	r0, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b299      	uxth	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7a1b      	ldrb	r3, [r3, #8]
 8004e0c:	f107 020c 	add.w	r2, r7, #12
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2301      	movs	r3, #1
 8004e14:	f004 f8c6 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6858      	ldr	r0, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b299      	uxth	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7a1b      	ldrb	r3, [r3, #8]
 8004e26:	f107 020c 	add.w	r2, r7, #12
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	f004 f9b7 	bl	80091a0 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004e32:	7b3b      	ldrb	r3, [r7, #12]
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	461a      	mov	r2, r3
 8004e38:	7b7b      	ldrb	r3, [r7, #13]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	7bba      	ldrb	r2, [r7, #14]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8004e46:	7b3a      	ldrb	r2, [r7, #12]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	7b7a      	ldrb	r2, [r7, #13]
 8004e52:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	3302      	adds	r3, #2
 8004e58:	7bba      	ldrb	r2, [r7, #14]
 8004e5a:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 8004e5c:	2354      	movs	r3, #84	; 0x54
 8004e5e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6858      	ldr	r0, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b299      	uxth	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	7a1b      	ldrb	r3, [r3, #8]
 8004e6e:	f107 020c 	add.w	r2, r7, #12
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2301      	movs	r3, #1
 8004e76:	f004 f895 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af02      	add	r7, sp, #8
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6858      	ldr	r0, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	b299      	uxth	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	7a1b      	ldrb	r3, [r3, #8]
 8004e9e:	f107 020c 	add.w	r2, r7, #12
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f004 f87d 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6858      	ldr	r0, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b299      	uxth	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7a1b      	ldrb	r3, [r3, #8]
 8004eb8:	f107 020c 	add.w	r2, r7, #12
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	f004 f96e 	bl	80091a0 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004ec4:	7b3b      	ldrb	r3, [r7, #12]
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	461a      	mov	r2, r3
 8004eca:	7b7b      	ldrb	r3, [r7, #13]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	7bba      	ldrb	r2, [r7, #14]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	3303      	adds	r3, #3
 8004edc:	7b3a      	ldrb	r2, [r7, #12]
 8004ede:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	7b7a      	ldrb	r2, [r7, #13]
 8004ee6:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	3305      	adds	r3, #5
 8004eec:	7bba      	ldrb	r2, [r7, #14]
 8004eee:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 8004ef0:	2344      	movs	r3, #68	; 0x44
 8004ef2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6858      	ldr	r0, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b299      	uxth	r1, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7a1b      	ldrb	r3, [r3, #8]
 8004f02:	f107 020c 	add.w	r2, r7, #12
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f004 f84b 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8004f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f1c:	b092      	sub	sp, #72	; 0x48
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	895b      	ldrh	r3, [r3, #10]
 8004f2a:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	899b      	ldrh	r3, [r3, #12]
 8004f30:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	89db      	ldrh	r3, [r3, #14]
 8004f36:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8a1b      	ldrh	r3, [r3, #16]
 8004f3c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8a5b      	ldrh	r3, [r3, #18]
 8004f42:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8a9b      	ldrh	r3, [r3, #20]
 8004f48:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f60:	ee17 0a90 	vmov	r0, s15
 8004f64:	f7fb faf0 	bl	8000548 <__aeabi_f2d>
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fb fad8 	bl	8000524 <__aeabi_i2d>
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4bd9      	ldr	r3, [pc, #868]	; (80052e0 <ms5607_convert+0x3c8>)
 8004f7a:	f7fb fb3d 	bl	80005f8 <__aeabi_dmul>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4620      	mov	r0, r4
 8004f84:	4629      	mov	r1, r5
 8004f86:	f7fb f97f 	bl	8000288 <__aeabi_dsub>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	4618      	mov	r0, r3
 8004f90:	4621      	mov	r1, r4
 8004f92:	f7fb fe29 	bl	8000be8 <__aeabi_d2f>
 8004f96:	4603      	mov	r3, r0
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8004f9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fb fac1 	bl	8000524 <__aeabi_i2d>
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004faa:	f7fb fb25 	bl	80005f8 <__aeabi_dmul>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	4625      	mov	r5, r4
 8004fb4:	461c      	mov	r4, r3
 8004fb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc8:	ee17 0a90 	vmov	r0, s15
 8004fcc:	f7fb fabc 	bl	8000548 <__aeabi_f2d>
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	4bc3      	ldr	r3, [pc, #780]	; (80052e4 <ms5607_convert+0x3cc>)
 8004fd6:	f7fb fc39 	bl	800084c <__aeabi_ddiv>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f7fb f953 	bl	800028c <__adddf3>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	460c      	mov	r4, r1
 8004fea:	4618      	mov	r0, r3
 8004fec:	4621      	mov	r1, r4
 8004fee:	f7fb fdfb 	bl	8000be8 <__aeabi_d2f>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 8004ff6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb fa93 	bl	8000524 <__aeabi_i2d>
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	4bb9      	ldr	r3, [pc, #740]	; (80052e8 <ms5607_convert+0x3d0>)
 8005004:	f7fb faf8 	bl	80005f8 <__aeabi_dmul>
 8005008:	4603      	mov	r3, r0
 800500a:	460c      	mov	r4, r1
 800500c:	4625      	mov	r5, r4
 800500e:	461c      	mov	r4, r3
 8005010:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800501a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	ee17 0a90 	vmov	r0, s15
 8005026:	f7fb fa8f 	bl	8000548 <__aeabi_f2d>
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	4baf      	ldr	r3, [pc, #700]	; (80052ec <ms5607_convert+0x3d4>)
 8005030:	f7fb fc0c 	bl	800084c <__aeabi_ddiv>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4620      	mov	r0, r4
 800503a:	4629      	mov	r1, r5
 800503c:	f7fb f926 	bl	800028c <__adddf3>
 8005040:	4603      	mov	r3, r0
 8005042:	460c      	mov	r4, r1
 8005044:	4618      	mov	r0, r3
 8005046:	4621      	mov	r1, r4
 8005048:	f7fb fdce 	bl	8000be8 <__aeabi_d2f>
 800504c:	4603      	mov	r3, r0
 800504e:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8005050:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800505a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800505e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005062:	ee17 0a90 	vmov	r0, s15
 8005066:	f7fb fa6f 	bl	8000548 <__aeabi_f2d>
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	4ba0      	ldr	r3, [pc, #640]	; (80052f0 <ms5607_convert+0x3d8>)
 8005070:	f7fb fbec 	bl	800084c <__aeabi_ddiv>
 8005074:	4603      	mov	r3, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4618      	mov	r0, r3
 800507a:	4621      	mov	r1, r4
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	4b9c      	ldr	r3, [pc, #624]	; (80052f4 <ms5607_convert+0x3dc>)
 8005082:	f7fb f903 	bl	800028c <__adddf3>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	4618      	mov	r0, r3
 800508c:	4621      	mov	r1, r4
 800508e:	f7fb fdab 	bl	8000be8 <__aeabi_d2f>
 8005092:	4603      	mov	r3, r0
 8005094:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80050a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a8:	ee17 0a90 	vmov	r0, s15
 80050ac:	f7fb fa4c 	bl	8000548 <__aeabi_f2d>
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	4b90      	ldr	r3, [pc, #576]	; (80052f8 <ms5607_convert+0x3e0>)
 80050b6:	f7fb fbc9 	bl	800084c <__aeabi_ddiv>
 80050ba:	4603      	mov	r3, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	4625      	mov	r5, r4
 80050c0:	461c      	mov	r4, r3
 80050c2:	6a38      	ldr	r0, [r7, #32]
 80050c4:	f7fb fa40 	bl	8000548 <__aeabi_f2d>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4620      	mov	r0, r4
 80050ce:	4629      	mov	r1, r5
 80050d0:	f7fb f8da 	bl	8000288 <__aeabi_dsub>
 80050d4:	4603      	mov	r3, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	4618      	mov	r0, r3
 80050da:	4621      	mov	r1, r4
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	4b86      	ldr	r3, [pc, #536]	; (80052fc <ms5607_convert+0x3e4>)
 80050e2:	f7fb fbb3 	bl	800084c <__aeabi_ddiv>
 80050e6:	4603      	mov	r3, r0
 80050e8:	460c      	mov	r4, r1
 80050ea:	4618      	mov	r0, r3
 80050ec:	4621      	mov	r1, r4
 80050ee:	f7fb fd7b 	bl	8000be8 <__aeabi_d2f>
 80050f2:	4603      	mov	r3, r0
 80050f4:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	647b      	str	r3, [r7, #68]	; 0x44
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	643b      	str	r3, [r7, #64]	; 0x40
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8005108:	edd7 7a06 	vldr	s15, [r7, #24]
 800510c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005300 <ms5607_convert+0x3e8>
 8005110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005118:	f140 8104 	bpl.w	8005324 <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 800511c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005120:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005128:	eddf 6a76 	vldr	s13, [pc, #472]	; 8005304 <ms5607_convert+0x3ec>
 800512c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005130:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 8005134:	69b8      	ldr	r0, [r7, #24]
 8005136:	f7fb fa07 	bl	8000548 <__aeabi_f2d>
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	4b6d      	ldr	r3, [pc, #436]	; (80052f4 <ms5607_convert+0x3dc>)
 8005140:	f7fb f8a2 	bl	8000288 <__aeabi_dsub>
 8005144:	4603      	mov	r3, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4618      	mov	r0, r3
 800514a:	4621      	mov	r1, r4
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <ms5607_convert+0x3f0>)
 8005152:	f7fb fa51 	bl	80005f8 <__aeabi_dmul>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	4625      	mov	r5, r4
 800515c:	461c      	mov	r4, r3
 800515e:	69b8      	ldr	r0, [r7, #24]
 8005160:	f7fb f9f2 	bl	8000548 <__aeabi_f2d>
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	4b62      	ldr	r3, [pc, #392]	; (80052f4 <ms5607_convert+0x3dc>)
 800516a:	f7fb f88d 	bl	8000288 <__aeabi_dsub>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4620      	mov	r0, r4
 8005174:	4629      	mov	r1, r5
 8005176:	f7fb fa3f 	bl	80005f8 <__aeabi_dmul>
 800517a:	4603      	mov	r3, r0
 800517c:	460c      	mov	r4, r1
 800517e:	4618      	mov	r0, r3
 8005180:	4621      	mov	r1, r4
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	4b61      	ldr	r3, [pc, #388]	; (800530c <ms5607_convert+0x3f4>)
 8005188:	f7fb fb60 	bl	800084c <__aeabi_ddiv>
 800518c:	4603      	mov	r3, r0
 800518e:	460c      	mov	r4, r1
 8005190:	4618      	mov	r0, r3
 8005192:	4621      	mov	r1, r4
 8005194:	f7fb fd28 	bl	8000be8 <__aeabi_d2f>
 8005198:	4603      	mov	r3, r0
 800519a:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 800519c:	69b8      	ldr	r0, [r7, #24]
 800519e:	f7fb f9d3 	bl	8000548 <__aeabi_f2d>
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <ms5607_convert+0x3dc>)
 80051a8:	f7fb f86e 	bl	8000288 <__aeabi_dsub>
 80051ac:	4603      	mov	r3, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	4618      	mov	r0, r3
 80051b2:	4621      	mov	r1, r4
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	f7fb f868 	bl	800028c <__adddf3>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	4625      	mov	r5, r4
 80051c2:	461c      	mov	r4, r3
 80051c4:	69b8      	ldr	r0, [r7, #24]
 80051c6:	f7fb f9bf 	bl	8000548 <__aeabi_f2d>
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	4b49      	ldr	r3, [pc, #292]	; (80052f4 <ms5607_convert+0x3dc>)
 80051d0:	f7fb f85a 	bl	8000288 <__aeabi_dsub>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4620      	mov	r0, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	f7fb fa0c 	bl	80005f8 <__aeabi_dmul>
 80051e0:	4603      	mov	r3, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	4618      	mov	r0, r3
 80051e6:	4621      	mov	r1, r4
 80051e8:	f7fb fcfe 	bl	8000be8 <__aeabi_d2f>
 80051ec:	4603      	mov	r3, r0
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 80051f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80051f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005310 <ms5607_convert+0x3f8>
 80051f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	f140 8090 	bpl.w	8005324 <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8005204:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005206:	f7fb f99f 	bl	8000548 <__aeabi_f2d>
 800520a:	4604      	mov	r4, r0
 800520c:	460d      	mov	r5, r1
 800520e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005212:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005314 <ms5607_convert+0x3fc>
 8005216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800521a:	ee17 0a90 	vmov	r0, s15
 800521e:	f7fb f993 	bl	8000548 <__aeabi_f2d>
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <ms5607_convert+0x400>)
 8005228:	f7fb f9e6 	bl	80005f8 <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4690      	mov	r8, r2
 8005232:	4699      	mov	r9, r3
 8005234:	69b8      	ldr	r0, [r7, #24]
 8005236:	f7fb f987 	bl	8000548 <__aeabi_f2d>
 800523a:	a327      	add	r3, pc, #156	; (adr r3, 80052d8 <ms5607_convert+0x3c0>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fb f824 	bl	800028c <__adddf3>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4640      	mov	r0, r8
 800524a:	4649      	mov	r1, r9
 800524c:	f7fb f9d4 	bl	80005f8 <__aeabi_dmul>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4620      	mov	r0, r4
 8005256:	4629      	mov	r1, r5
 8005258:	f7fb f818 	bl	800028c <__adddf3>
 800525c:	4603      	mov	r3, r0
 800525e:	460c      	mov	r4, r1
 8005260:	4618      	mov	r0, r3
 8005262:	4621      	mov	r1, r4
 8005264:	f7fb fcc0 	bl	8000be8 <__aeabi_d2f>
 8005268:	4603      	mov	r3, r0
 800526a:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 800526c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800526e:	f7fb f96b 	bl	8000548 <__aeabi_f2d>
 8005272:	4604      	mov	r4, r0
 8005274:	460d      	mov	r5, r1
 8005276:	edd7 7a06 	vldr	s15, [r7, #24]
 800527a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005314 <ms5607_convert+0x3fc>
 800527e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005282:	ee17 0a90 	vmov	r0, s15
 8005286:	f7fb f95f 	bl	8000548 <__aeabi_f2d>
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	4b23      	ldr	r3, [pc, #140]	; (800531c <ms5607_convert+0x404>)
 8005290:	f7fb f9b2 	bl	80005f8 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4690      	mov	r8, r2
 800529a:	4699      	mov	r9, r3
 800529c:	69b8      	ldr	r0, [r7, #24]
 800529e:	f7fb f953 	bl	8000548 <__aeabi_f2d>
 80052a2:	a30d      	add	r3, pc, #52	; (adr r3, 80052d8 <ms5607_convert+0x3c0>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f7fa fff0 	bl	800028c <__adddf3>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4640      	mov	r0, r8
 80052b2:	4649      	mov	r1, r9
 80052b4:	f7fb f9a0 	bl	80005f8 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4620      	mov	r0, r4
 80052be:	4629      	mov	r1, r5
 80052c0:	f7fa ffe4 	bl	800028c <__adddf3>
 80052c4:	4603      	mov	r3, r0
 80052c6:	460c      	mov	r4, r1
 80052c8:	4618      	mov	r0, r3
 80052ca:	4621      	mov	r1, r4
 80052cc:	f7fb fc8c 	bl	8000be8 <__aeabi_d2f>
 80052d0:	4603      	mov	r3, r0
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d4:	e026      	b.n	8005324 <ms5607_convert+0x40c>
 80052d6:	bf00      	nop
 80052d8:	00000000 	.word	0x00000000
 80052dc:	40977000 	.word	0x40977000
 80052e0:	40700000 	.word	0x40700000
 80052e4:	40500000 	.word	0x40500000
 80052e8:	40f00000 	.word	0x40f00000
 80052ec:	40600000 	.word	0x40600000
 80052f0:	41600000 	.word	0x41600000
 80052f4:	409f4000 	.word	0x409f4000
 80052f8:	41400000 	.word	0x41400000
 80052fc:	40e00000 	.word	0x40e00000
 8005300:	44fa0000 	.word	0x44fa0000
 8005304:	4f000000 	.word	0x4f000000
 8005308:	404e8000 	.word	0x404e8000
 800530c:	40300000 	.word	0x40300000
 8005310:	c4bb8000 	.word	0xc4bb8000
 8005314:	44bb8000 	.word	0x44bb8000
 8005318:	402e0000 	.word	0x402e0000
 800531c:	40200000 	.word	0x40200000
 8005320:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8005324:	ed97 7a06 	vldr	s14, [r7, #24]
 8005328:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800532c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005330:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8005334:	ed97 7a08 	vldr	s14, [r7, #32]
 8005338:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800533c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005340:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8005344:	ed97 7a07 	vldr	s14, [r7, #28]
 8005348:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800534c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005350:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8005354:	ed97 7a06 	vldr	s14, [r7, #24]
 8005358:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8005320 <ms5607_convert+0x408>
 800535c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005360:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800536e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	ee17 0a90 	vmov	r0, s15
 800537a:	f7fb f8e5 	bl	8000548 <__aeabi_f2d>
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	4b16      	ldr	r3, [pc, #88]	; (80053dc <ms5607_convert+0x4c4>)
 8005384:	f7fb fa62 	bl	800084c <__aeabi_ddiv>
 8005388:	4603      	mov	r3, r0
 800538a:	460c      	mov	r4, r1
 800538c:	4625      	mov	r5, r4
 800538e:	461c      	mov	r4, r3
 8005390:	6a38      	ldr	r0, [r7, #32]
 8005392:	f7fb f8d9 	bl	8000548 <__aeabi_f2d>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fa ff73 	bl	8000288 <__aeabi_dsub>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	4618      	mov	r0, r3
 80053a8:	4621      	mov	r1, r4
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <ms5607_convert+0x4c8>)
 80053b0:	f7fb fa4c 	bl	800084c <__aeabi_ddiv>
 80053b4:	4603      	mov	r3, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	4618      	mov	r0, r3
 80053ba:	4621      	mov	r1, r4
 80053bc:	f7fb fc14 	bl	8000be8 <__aeabi_d2f>
 80053c0:	4603      	mov	r3, r0
 80053c2:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	601a      	str	r2, [r3, #0]
	*p = pressure;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 80053d0:	bf00      	nop
 80053d2:	3748      	adds	r7, #72	; 0x48
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053da:	bf00      	nop
 80053dc:	41400000 	.word	0x41400000
 80053e0:	40e00000 	.word	0x40e00000

080053e4 <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f004 fa29 	bl	8009848 <HAL_I2C_GetState>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d003      	beq.n	8005404 <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 80053fc:	481f      	ldr	r0, [pc, #124]	; (800547c <sht31_init+0x98>)
 80053fe:	f00b ffc7 	bl	8011390 <puts>
 8005402:	e002      	b.n	800540a <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8005404:	481e      	ldr	r0, [pc, #120]	; (8005480 <sht31_init+0x9c>)
 8005406:	f00b ffc3 	bl	8011390 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6858      	ldr	r0, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b299      	uxth	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	7a1b      	ldrb	r3, [r3, #8]
 8005418:	220a      	movs	r2, #10
 800541a:	f004 f8e7 	bl	80095ec <HAL_I2C_IsDeviceReady>
 800541e:	4603      	mov	r3, r0
 8005420:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8005428:	4816      	ldr	r0, [pc, #88]	; (8005484 <sht31_init+0xa0>)
 800542a:	f00b ffb1 	bl	8011390 <puts>
		printf("Errorcode: %d\n", _ret);
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	4619      	mov	r1, r3
 8005432:	4815      	ldr	r0, [pc, #84]	; (8005488 <sht31_init+0xa4>)
 8005434:	f00b ff38 	bl	80112a8 <iprintf>
		return 0;
 8005438:	2300      	movs	r3, #0
 800543a:	e01b      	b.n	8005474 <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 800543c:	4813      	ldr	r0, [pc, #76]	; (800548c <sht31_init+0xa8>)
 800543e:	f00b ffa7 	bl	8011390 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8005442:	f242 4316 	movw	r3, #9238	; 0x2416
 8005446:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8005448:	89bb      	ldrh	r3, [r7, #12]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	b29b      	uxth	r3, r3
 800544e:	b2db      	uxtb	r3, r3
 8005450:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8005452:	89bb      	ldrh	r3, [r7, #12]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6858      	ldr	r0, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b299      	uxth	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7a1b      	ldrb	r3, [r3, #8]
 8005466:	f107 0208 	add.w	r2, r7, #8
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	2302      	movs	r3, #2
 800546e:	f003 fd99 	bl	8008fa4 <HAL_I2C_Master_Transmit>
	return 1;
 8005472:	2301      	movs	r3, #1
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	08016990 	.word	0x08016990
 8005480:	080169a0 	.word	0x080169a0
 8005484:	080169b0 	.word	0x080169b0
 8005488:	080169c4 	.word	0x080169c4
 800548c:	080169d4 	.word	0x080169d4

08005490 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b08d      	sub	sp, #52	; 0x34
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6858      	ldr	r0, [r3, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b299      	uxth	r1, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	7a1b      	ldrb	r3, [r3, #8]
 80054aa:	f107 0214 	add.w	r2, r7, #20
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	2306      	movs	r3, #6
 80054b2:	f003 fe75 	bl	80091a0 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 80054b6:	7d3b      	ldrb	r3, [r7, #20]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	b21a      	sxth	r2, r3
 80054bc:	7d7b      	ldrb	r3, [r7, #21]
 80054be:	b21b      	sxth	r3, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	b21b      	sxth	r3, r3
 80054c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	b21a      	sxth	r2, r3
 80054cc:	7e3b      	ldrb	r3, [r7, #24]
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	4313      	orrs	r3, r2
 80054d2:	b21b      	sxth	r3, r3
 80054d4:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 80054d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e0:	ee17 0a90 	vmov	r0, s15
 80054e4:	f7fb f830 	bl	8000548 <__aeabi_f2d>
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	4b32      	ldr	r3, [pc, #200]	; (80055b8 <sht31_read+0x128>)
 80054ee:	f7fb f883 	bl	80005f8 <__aeabi_dmul>
 80054f2:	4603      	mov	r3, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	4618      	mov	r0, r3
 80054f8:	4621      	mov	r1, r4
 80054fa:	a32d      	add	r3, pc, #180	; (adr r3, 80055b0 <sht31_read+0x120>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fb f9a4 	bl	800084c <__aeabi_ddiv>
 8005504:	4603      	mov	r3, r0
 8005506:	460c      	mov	r4, r1
 8005508:	4618      	mov	r0, r3
 800550a:	4621      	mov	r1, r4
 800550c:	f7fb fb6c 	bl	8000be8 <__aeabi_d2f>
 8005510:	4603      	mov	r3, r0
 8005512:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8005514:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80055bc <sht31_read+0x12c>
 8005522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005526:	ee17 0a90 	vmov	r0, s15
 800552a:	f7fb f80d 	bl	8000548 <__aeabi_f2d>
 800552e:	a320      	add	r3, pc, #128	; (adr r3, 80055b0 <sht31_read+0x120>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f7fb f98a 	bl	800084c <__aeabi_ddiv>
 8005538:	4603      	mov	r3, r0
 800553a:	460c      	mov	r4, r1
 800553c:	4618      	mov	r0, r3
 800553e:	4621      	mov	r1, r4
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <sht31_read+0x130>)
 8005546:	f7fa fe9f 	bl	8000288 <__aeabi_dsub>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	4618      	mov	r0, r3
 8005550:	4621      	mov	r1, r4
 8005552:	f7fb fb49 	bl	8000be8 <__aeabi_d2f>
 8005556:	4603      	mov	r3, r0
 8005558:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	3304      	adds	r3, #4
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800556c:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3302      	adds	r3, #2
 8005572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005574:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8005576:	f242 4316 	movw	r3, #9238	; 0x2416
 800557a:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 800557c:	8b7b      	ldrh	r3, [r7, #26]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	b29b      	uxth	r3, r3
 8005582:	b2db      	uxtb	r3, r3
 8005584:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8005586:	8b7b      	ldrh	r3, [r7, #26]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6858      	ldr	r0, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	b299      	uxth	r1, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	7a1b      	ldrb	r3, [r3, #8]
 800559a:	f107 0214 	add.w	r2, r7, #20
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	2302      	movs	r3, #2
 80055a2:	f003 fcff 	bl	8008fa4 <HAL_I2C_Master_Transmit>

};
 80055a6:	bf00      	nop
 80055a8:	372c      	adds	r7, #44	; 0x2c
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd90      	pop	{r4, r7, pc}
 80055ae:	bf00      	nop
 80055b0:	00000000 	.word	0x00000000
 80055b4:	40efffe0 	.word	0x40efffe0
 80055b8:	40590000 	.word	0x40590000
 80055bc:	432f0000 	.word	0x432f0000
 80055c0:	40468000 	.word	0x40468000

080055c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055ca:	e003      	b.n	80055d4 <LoopCopyDataInit>

080055cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055d2:	3104      	adds	r1, #4

080055d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055d4:	480b      	ldr	r0, [pc, #44]	; (8005604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055dc:	d3f6      	bcc.n	80055cc <CopyDataInit>
  ldr  r2, =_sbss
 80055de:	4a0b      	ldr	r2, [pc, #44]	; (800560c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80055e0:	e002      	b.n	80055e8 <LoopFillZerobss>

080055e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80055e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80055e4:	f842 3b04 	str.w	r3, [r2], #4

080055e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80055ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80055ec:	d3f9      	bcc.n	80055e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80055ee:	f7fe fdc9 	bl	8004184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055f2:	f00b f9c5 	bl	8010980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055f6:	f7fd f81f 	bl	8002638 <main>
  bx  lr    
 80055fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005600:	08016ed8 	.word	0x08016ed8
  ldr  r0, =_sdata
 8005604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005608:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800560c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8005610:	2001023c 	.word	0x2001023c

08005614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005614:	e7fe      	b.n	8005614 <ADC_IRQHandler>
	...

08005618 <init_env>:
#include "../../Inc/Sim_Con/env.h"

void init_env(env_t *env) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8005620:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8005624:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005640 <init_env+0x28>
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f80d 	bl	8005648 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 800562e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f82c 	bl	8005690 <update_env>
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	47c5e680 	.word	0x47c5e680
 8005644:	00000000 	.word	0x00000000

08005648 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	ed87 0a02 	vstr	s0, [r7, #8]
 8005654:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7fa ff75 	bl	8000548 <__aeabi_f2d>
 800565e:	a30a      	add	r3, pc, #40	; (adr r3, 8005688 <calibrate_env+0x40>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa fe12 	bl	800028c <__adddf3>
 8005668:	4603      	mov	r3, r0
 800566a:	460c      	mov	r4, r1
 800566c:	4618      	mov	r0, r3
 800566e:	4621      	mov	r1, r4
 8005670:	f7fb faba 	bl	8000be8 <__aeabi_d2f>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	601a      	str	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	bd90      	pop	{r4, r7, pc}
 8005688:	66666666 	.word	0x66666666
 800568c:	40711266 	.word	0x40711266

08005690 <update_env>:

void update_env(env_t *env, float T) {
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 800569c:	6838      	ldr	r0, [r7, #0]
 800569e:	f7fa ff53 	bl	8000548 <__aeabi_f2d>
 80056a2:	a317      	add	r3, pc, #92	; (adr r3, 8005700 <update_env+0x70>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f7fa fdf0 	bl	800028c <__adddf3>
 80056ac:	4603      	mov	r3, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	4618      	mov	r0, r3
 80056b2:	4621      	mov	r1, r4
 80056b4:	f7fb fa98 	bl	8000be8 <__aeabi_d2f>
 80056b8:	4602      	mov	r2, r0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fa ff40 	bl	8000548 <__aeabi_f2d>
 80056c8:	a30f      	add	r3, pc, #60	; (adr r3, 8005708 <update_env+0x78>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f7fa ff93 	bl	80005f8 <__aeabi_dmul>
 80056d2:	4603      	mov	r3, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	4618      	mov	r0, r3
 80056d8:	4621      	mov	r1, r4
 80056da:	f7fb fa85 	bl	8000be8 <__aeabi_d2f>
 80056de:	4603      	mov	r3, r0
 80056e0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80056e4:	ee00 3a10 	vmov	s0, r3
 80056e8:	f00f fb64 	bl	8014db4 <powf>
 80056ec:	eef0 7a40 	vmov.f32	s15, s0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}
 80056fe:	bf00      	nop
 8005700:	66666666 	.word	0x66666666
 8005704:	40711266 	.word	0x40711266
 8005708:	8c1557b7 	.word	0x8c1557b7
 800570c:	40791e2f 	.word	0x40791e2f

08005710 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 800571c:	edd7 7a00 	vldr	s15, [r7]
 8005720:	eef0 6ae7 	vabs.f32	s13, s15
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	ed93 7a03 	vldr	s14, [r3, #12]
 800572a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800572e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	ee07 3a90 	vmov	s15, r3
}
 8005738:	eeb0 0a67 	vmov.f32	s0, s15
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8005748:	b5b0      	push	{r4, r5, r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e043      	b.n	80057e4 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	4413      	add	r3, r2
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d03a      	beq.n	80057de <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	4618      	mov	r0, r3
 800576e:	f7fa feeb 	bl	8000548 <__aeabi_f2d>
 8005772:	a322      	add	r3, pc, #136	; (adr r3, 80057fc <pressure2altitudeAGL+0xb4>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fb f868 	bl	800084c <__aeabi_ddiv>
 800577c:	4603      	mov	r3, r0
 800577e:	460c      	mov	r4, r1
 8005780:	4625      	mov	r5, r4
 8005782:	461c      	mov	r4, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	ed93 7a00 	vldr	s14, [r3]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	edd3 7a00 	vldr	s15, [r3]
 8005796:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800579a:	eddf 0a17 	vldr	s1, [pc, #92]	; 80057f8 <pressure2altitudeAGL+0xb0>
 800579e:	eeb0 0a66 	vmov.f32	s0, s13
 80057a2:	f00f fb07 	bl	8014db4 <powf>
 80057a6:	eeb0 7a40 	vmov.f32	s14, s0
 80057aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80057ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057b2:	ee17 0a90 	vmov	r0, s15
 80057b6:	f7fa fec7 	bl	8000548 <__aeabi_f2d>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fa ff19 	bl	80005f8 <__aeabi_dmul>
 80057c6:	4603      	mov	r3, r0
 80057c8:	460c      	mov	r4, r1
 80057ca:	4618      	mov	r0, r3
 80057cc:	4621      	mov	r1, r4
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d4:	18d4      	adds	r4, r2, r3
 80057d6:	f7fb fa07 	bl	8000be8 <__aeabi_d2f>
 80057da:	4603      	mov	r3, r0
 80057dc:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	3301      	adds	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	dbb7      	blt.n	800575c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80057ec:	bf00      	nop
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bdb0      	pop	{r4, r5, r7, pc}
 80057f4:	f3af 8000 	nop.w
 80057f8:	3e42c4dc 	.word	0x3e42c4dc
 80057fc:	76c8b439 	.word	0x76c8b439
 8005800:	3f7a9fbe 	.word	0x3f7a9fbe
 8005804:	00000000 	.word	0x00000000

08005808 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	ed2d 8b02 	vpush	{d8}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e047      	b.n	80058b0 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	4413      	add	r3, r2
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d03e      	beq.n	80058aa <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	ed93 8a00 	vldr	s16, [r3]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f7fa fe83 	bl	8000548 <__aeabi_f2d>
 8005842:	a323      	add	r3, pc, #140	; (adr r3, 80058d0 <altitudeAGL2pressure+0xc8>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa fed6 	bl	80005f8 <__aeabi_dmul>
 800584c:	4603      	mov	r3, r0
 800584e:	460c      	mov	r4, r1
 8005850:	4625      	mov	r5, r4
 8005852:	461c      	mov	r4, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	f7fa fe75 	bl	8000548 <__aeabi_f2d>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fff1 	bl	800084c <__aeabi_ddiv>
 800586a:	4603      	mov	r3, r0
 800586c:	460c      	mov	r4, r1
 800586e:	461a      	mov	r2, r3
 8005870:	4623      	mov	r3, r4
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	4914      	ldr	r1, [pc, #80]	; (80058c8 <altitudeAGL2pressure+0xc0>)
 8005878:	f7fa fd06 	bl	8000288 <__aeabi_dsub>
 800587c:	4603      	mov	r3, r0
 800587e:	460c      	mov	r4, r1
 8005880:	4618      	mov	r0, r3
 8005882:	4621      	mov	r1, r4
 8005884:	f7fb f9b0 	bl	8000be8 <__aeabi_d2f>
 8005888:	4603      	mov	r3, r0
 800588a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80058cc <altitudeAGL2pressure+0xc4>
 800588e:	ee00 3a10 	vmov	s0, r3
 8005892:	f00f fa8f 	bl	8014db4 <powf>
 8005896:	eef0 7a40 	vmov.f32	s15, s0
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a0:	4413      	add	r3, r2
 80058a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80058a6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	3301      	adds	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	dbb3      	blt.n	8005820 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80058b8:	bf00      	nop
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	ecbd 8b02 	vpop	{d8}
 80058c2:	bdb0      	pop	{r4, r5, r7, pc}
 80058c4:	f3af 8000 	nop.w
 80058c8:	3ff00000 	.word	0x3ff00000
 80058cc:	40a83d87 	.word	0x40a83d87
 80058d0:	76c8b439 	.word	0x76c8b439
 80058d4:	3f7a9fbe 	.word	0x3f7a9fbe

080058d8 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fa fe2d 	bl	8000548 <__aeabi_f2d>
 80058ee:	a323      	add	r3, pc, #140	; (adr r3, 800597c <altitude_gradient+0xa4>)
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f7fa fe80 	bl	80005f8 <__aeabi_dmul>
 80058f8:	4603      	mov	r3, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	4625      	mov	r5, r4
 80058fe:	461c      	mov	r4, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fa fe1f 	bl	8000548 <__aeabi_f2d>
 800590a:	a31e      	add	r3, pc, #120	; (adr r3, 8005984 <altitude_gradient+0xac>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f7fa fe72 	bl	80005f8 <__aeabi_dmul>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4620      	mov	r0, r4
 800591a:	4629      	mov	r1, r5
 800591c:	f7fa ff96 	bl	800084c <__aeabi_ddiv>
 8005920:	4603      	mov	r3, r0
 8005922:	460c      	mov	r4, r1
 8005924:	4625      	mov	r5, r4
 8005926:	461c      	mov	r4, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	edd3 7a00 	vldr	s15, [r3]
 800592e:	ed97 7a00 	vldr	s14, [r7]
 8005932:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005936:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005978 <altitude_gradient+0xa0>
 800593a:	eeb0 0a66 	vmov.f32	s0, s13
 800593e:	f00f fa39 	bl	8014db4 <powf>
 8005942:	ee10 3a10 	vmov	r3, s0
 8005946:	4618      	mov	r0, r3
 8005948:	f7fa fdfe 	bl	8000548 <__aeabi_f2d>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4620      	mov	r0, r4
 8005952:	4629      	mov	r1, r5
 8005954:	f7fa fe50 	bl	80005f8 <__aeabi_dmul>
 8005958:	4603      	mov	r3, r0
 800595a:	460c      	mov	r4, r1
 800595c:	4618      	mov	r0, r3
 800595e:	4621      	mov	r1, r4
 8005960:	f7fb f942 	bl	8000be8 <__aeabi_d2f>
 8005964:	4603      	mov	r3, r0
 8005966:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	ee07 3a90 	vmov	s15, r3
}
 800596e:	eeb0 0a67 	vmov.f32	s0, s15
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bdb0      	pop	{r4, r5, r7, pc}
 8005978:	bf4f4ec9 	.word	0xbf4f4ec9
 800597c:	640f3ea7 	.word	0x640f3ea7
 8005980:	c071f0fd 	.word	0xc071f0fd
 8005984:	51eb851f 	.word	0x51eb851f
 8005988:	40239eb8 	.word	0x40239eb8
 800598c:	00000000 	.word	0x00000000

08005990 <detect_flight_phase>:
#include "../../Inc/Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	f200 8174 	bhi.w	8005c90 <detect_flight_phase+0x300>
 80059a8:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <detect_flight_phase+0x20>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c9 	.word	0x080059c9
 80059b4:	08005c91 	.word	0x08005c91
 80059b8:	08005a63 	.word	0x08005a63
 80059bc:	08005aaf 	.word	0x08005aaf
 80059c0:	08005afb 	.word	0x08005afb
 80059c4:	08005bc7 	.word	0x08005bc7
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059d4:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8005cb4 <detect_flight_phase+0x324>
 80059d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80059e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e8:	dd13      	ble.n	8005a12 <detect_flight_phase+0x82>
                flight_phase_detection->num_samples_positive += 1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	3301      	adds	r3, #1
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	b25a      	sxtb	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	dd05      	ble.n	8005a12 <detect_flight_phase+0x82>
                    flight_phase_detection->flight_phase = THRUSTING;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2203      	movs	r2, #3
 8005a0a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	721a      	strb	r2, [r3, #8]
                }
            }
            if (((float)(state_est_data->position_world[2])) / 1000 > 80) {
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a1e:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8005cb4 <detect_flight_phase+0x324>
 8005a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a26:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005ca4 <detect_flight_phase+0x314>
 8005a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a32:	dc00      	bgt.n	8005a36 <detect_flight_phase+0xa6>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005a34:	e12e      	b.n	8005c94 <detect_flight_phase+0x304>
                flight_phase_detection->num_samples_positive += 1;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	b25a      	sxtb	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	f340 8120 	ble.w	8005c94 <detect_flight_phase+0x304>
                    flight_phase_detection->flight_phase = THRUSTING;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2203      	movs	r2, #3
 8005a58:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	721a      	strb	r2, [r3, #8]
        break;
 8005a60:	e118      	b.n	8005c94 <detect_flight_phase+0x304>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a6e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005cb4 <detect_flight_phase+0x324>
 8005a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7e:	d400      	bmi.n	8005a82 <detect_flight_phase+0xf2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005a80:	e10a      	b.n	8005c98 <detect_flight_phase+0x308>
                flight_phase_detection->num_samples_positive += 1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	b25a      	sxtb	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	f340 80fc 	ble.w	8005c98 <detect_flight_phase+0x308>
                    flight_phase_detection->flight_phase = COASTING;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	721a      	strb	r2, [r3, #8]
        break;
 8005aac:	e0f4      	b.n	8005c98 <detect_flight_phase+0x308>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aba:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005cb4 <detect_flight_phase+0x324>
 8005abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	d400      	bmi.n	8005ace <detect_flight_phase+0x13e>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005acc:	e0e6      	b.n	8005c9c <detect_flight_phase+0x30c>
                flight_phase_detection->num_samples_positive += 1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	b25a      	sxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	f340 80d8 	ble.w	8005c9c <detect_flight_phase+0x30c>
                    flight_phase_detection->flight_phase = DESCENT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2205      	movs	r2, #5
 8005af0:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	721a      	strb	r2, [r3, #8]
        break;
 8005af8:	e0d0      	b.n	8005c9c <detect_flight_phase+0x30c>

        case DESCENT:
            /* we assume a ballistic descent when the absolute velocity of the rocket in vertical direction is larger than 40 m/s */
            if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) > 60) {
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b06:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8005cb4 <detect_flight_phase+0x324>
 8005b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b0e:	eef0 7ae7 	vabs.f32	s15, s15
 8005b12:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005ca8 <detect_flight_phase+0x318>
 8005b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1e:	dd15      	ble.n	8005b4c <detect_flight_phase+0x1bc>
                flight_phase_detection->num_samples_positive += 1;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	3301      	adds	r3, #1
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	b25a      	sxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	f340 80b1 	ble.w	8005ca0 <detect_flight_phase+0x310>
                    flight_phase_detection->flight_phase = BALLISTIC_DESCENT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2206      	movs	r2, #6
 8005b42:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005b4a:	e0a9      	b.n	8005ca0 <detect_flight_phase+0x310>
            else if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b58:	eddf 6a56 	vldr	s13, [pc, #344]	; 8005cb4 <detect_flight_phase+0x324>
 8005b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b60:	eef0 7ae7 	vabs.f32	s15, s15
 8005b64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b70:	d400      	bmi.n	8005b74 <detect_flight_phase+0x1e4>
        break;
 8005b72:	e095      	b.n	8005ca0 <detect_flight_phase+0x310>
            else if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b80:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8005cb4 <detect_flight_phase+0x324>
 8005b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b88:	eef0 7ae7 	vabs.f32	s15, s15
 8005b8c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005cac <detect_flight_phase+0x31c>
 8005b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d400      	bmi.n	8005b9c <detect_flight_phase+0x20c>
        break;
 8005b9a:	e081      	b.n	8005ca0 <detect_flight_phase+0x310>
                flight_phase_detection->num_samples_positive += 1;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	b25a      	sxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	dd73      	ble.n	8005ca0 <detect_flight_phase+0x310>
                    flight_phase_detection->flight_phase = RECOVERY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2207      	movs	r2, #7
 8005bbc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	721a      	strb	r2, [r3, #8]
        break;
 8005bc4:	e06c      	b.n	8005ca0 <detect_flight_phase+0x310>

        case BALLISTIC_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 500m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005cb4 <detect_flight_phase+0x324>
 8005bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bda:	eef0 7ae7 	vabs.f32	s15, s15
 8005bde:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	d527      	bpl.n	8005c3c <detect_flight_phase+0x2ac>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bf8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8005cb4 <detect_flight_phase+0x324>
 8005bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c00:	eef0 7ae7 	vabs.f32	s15, s15
 8005c04:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005cac <detect_flight_phase+0x31c>
 8005c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c10:	d514      	bpl.n	8005c3c <detect_flight_phase+0x2ac>
                flight_phase_detection->num_samples_positive += 1;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	b25a      	sxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	dd2f      	ble.n	8005c8e <detect_flight_phase+0x2fe>
                    flight_phase_detection->flight_phase = RECOVERY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2207      	movs	r2, #7
 8005c32:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005c3a:	e028      	b.n	8005c8e <detect_flight_phase+0x2fe>
                }
            }
            /* we assume a normal descent with parachute when the absolute velocity of the rocket in vertical direction is smaller than 40 m/s */
            else if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) < 40) {
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c48:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8005cb4 <detect_flight_phase+0x324>
 8005c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c50:	eef0 7ae7 	vabs.f32	s15, s15
 8005c54:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005cb0 <detect_flight_phase+0x320>
 8005c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c60:	d400      	bmi.n	8005c64 <detect_flight_phase+0x2d4>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005c62:	e029      	b.n	8005cb8 <detect_flight_phase+0x328>
                flight_phase_detection->num_samples_positive += 1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	b25a      	sxtb	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	dd1b      	ble.n	8005cb8 <detect_flight_phase+0x328>
                    flight_phase_detection->flight_phase = DESCENT;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2205      	movs	r2, #5
 8005c84:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	721a      	strb	r2, [r3, #8]
        break;
 8005c8c:	e014      	b.n	8005cb8 <detect_flight_phase+0x328>
 8005c8e:	e013      	b.n	8005cb8 <detect_flight_phase+0x328>

        default:
        break;
 8005c90:	bf00      	nop
 8005c92:	e012      	b.n	8005cba <detect_flight_phase+0x32a>
        break;
 8005c94:	bf00      	nop
 8005c96:	e010      	b.n	8005cba <detect_flight_phase+0x32a>
        break;
 8005c98:	bf00      	nop
 8005c9a:	e00e      	b.n	8005cba <detect_flight_phase+0x32a>
        break;
 8005c9c:	bf00      	nop
 8005c9e:	e00c      	b.n	8005cba <detect_flight_phase+0x32a>
        break;
 8005ca0:	bf00      	nop
 8005ca2:	e00a      	b.n	8005cba <detect_flight_phase+0x32a>
 8005ca4:	42a00000 	.word	0x42a00000
 8005ca8:	42700000 	.word	0x42700000
 8005cac:	43fa0000 	.word	0x43fa0000
 8005cb0:	42200000 	.word	0x42200000
 8005cb4:	447a0000 	.word	0x447a0000
        break;
 8005cb8:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cc6:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8005cb4 <detect_flight_phase+0x324>
 8005cca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cce:	eeb0 0a66 	vmov.f32	s0, s13
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fd1c 	bl	8005710 <mach_number>
 8005cd8:	eef0 7a40 	vmov.f32	s15, s0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fa fc2e 	bl	8000548 <__aeabi_f2d>
 8005cec:	a312      	add	r3, pc, #72	; (adr r3, 8005d38 <detect_flight_phase+0x3a8>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f7fa ff07 	bl	8000b04 <__aeabi_dcmpge>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <detect_flight_phase+0x374>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8005d02:	e013      	b.n	8005d2c <detect_flight_phase+0x39c>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fa fc1d 	bl	8000548 <__aeabi_f2d>
 8005d0e:	a30c      	add	r3, pc, #48	; (adr r3, 8005d40 <detect_flight_phase+0x3b0>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fef6 	bl	8000b04 <__aeabi_dcmpge>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <detect_flight_phase+0x396>
        flight_phase_detection->mach_regime = TRANSONIC;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2202      	movs	r2, #2
 8005d22:	705a      	strb	r2, [r3, #1]
}
 8005d24:	e002      	b.n	8005d2c <detect_flight_phase+0x39c>
        flight_phase_detection->mach_regime = SUBSONIC;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	705a      	strb	r2, [r3, #1]
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	f3af 8000 	nop.w
 8005d38:	cccccccd 	.word	0xcccccccd
 8005d3c:	3ff4cccc 	.word	0x3ff4cccc
 8005d40:	9999999a 	.word	0x9999999a
 8005d44:	3fe99999 	.word	0x3fe99999

08005d48 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	721a      	strb	r2, [r3, #8]
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <reset_kf_state>:
#include "../../Inc/Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b0bc      	sub	sp, #240	; 0xf0
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8005d80:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <reset_kf_state+0x11c>)
 8005d82:	f107 040c 	add.w	r4, r7, #12
 8005d86:	461d      	mov	r5, r3
 8005d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8005d94:	4a40      	ldr	r2, [pc, #256]	; (8005e98 <reset_kf_state+0x120>)
 8005d96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8005da0:	4a3d      	ldr	r2, [pc, #244]	; (8005e98 <reset_kf_state+0x120>)
 8005da2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f107 010c 	add.w	r1, r7, #12
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	4618      	mov	r0, r3
 8005db6:	f00a fe07 	bl	80109c8 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3348      	adds	r3, #72	; 0x48
 8005dbe:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8005dc2:	220c      	movs	r2, #12
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f00a fdff 	bl	80109c8 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3354      	adds	r3, #84	; 0x54
 8005dce:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8005dd2:	220c      	movs	r2, #12
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f00a fdf7 	bl	80109c8 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8005df2:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <reset_kf_state+0x124>)
 8005df4:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8005df8:	461d      	mov	r5, r3
 8005dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	33c4      	adds	r3, #196	; 0xc4
 8005e0a:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8005e0e:	220c      	movs	r2, #12
 8005e10:	4618      	mov	r0, r3
 8005e12:	f00a fdd9 	bl	80109c8 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	33d0      	adds	r3, #208	; 0xd0
 8005e1a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005e1e:	2224      	movs	r2, #36	; 0x24
 8005e20:	4618      	mov	r0, r3
 8005e22:	f00a fdd1 	bl	80109c8 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	339c      	adds	r3, #156	; 0x9c
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f00a fdd5 	bl	80109de <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	33a0      	adds	r3, #160	; 0xa0
 8005e38:	2210      	movs	r2, #16
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00a fdce 	bl	80109de <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005e48:	2208      	movs	r2, #8
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f00a fdc6 	bl	80109de <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005e58:	2202      	movs	r2, #2
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00a fdbe 	bl	80109de <memset>
    kf_state->num_z_active = 0;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	2103      	movs	r1, #3
 8005e72:	2003      	movs	r0, #3
 8005e74:	f000 fe14 	bl	8006aa0 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3360      	adds	r3, #96	; 0x60
 8005e82:	2101      	movs	r1, #1
 8005e84:	2003      	movs	r0, #3
 8005e86:	f000 fe0b 	bl	8006aa0 <transpose>
}
 8005e8a:	bf00      	nop
 8005e8c:	37f0      	adds	r7, #240	; 0xf0
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bdb0      	pop	{r4, r5, r7, pc}
 8005e92:	bf00      	nop
 8005e94:	080169e8 	.word	0x080169e8
 8005e98:	08016a0c 	.word	0x08016a0c
 8005e9c:	08016a18 	.word	0x08016a18

08005ea0 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af04      	add	r7, sp, #16
 8005ea6:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	33f4      	adds	r3, #244	; 0xf4
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	9201      	str	r2, [sp, #4]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	4603      	mov	r3, r0
 8005ebc:	460a      	mov	r2, r1
 8005ebe:	2103      	movs	r1, #3
 8005ec0:	2003      	movs	r0, #3
 8005ec2:	f001 f817 	bl	8006ef4 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	33f4      	adds	r3, #244	; 0xf4
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	9201      	str	r2, [sp, #4]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	4603      	mov	r3, r0
 8005ede:	460a      	mov	r2, r1
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	2003      	movs	r0, #3
 8005ee4:	f001 f806 	bl	8006ef4 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	33d0      	adds	r3, #208	; 0xd0
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	9102      	str	r1, [sp, #8]
 8005ef8:	9201      	str	r2, [sp, #4]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4603      	mov	r3, r0
 8005efe:	2203      	movs	r2, #3
 8005f00:	2103      	movs	r1, #3
 8005f02:	2003      	movs	r0, #3
 8005f04:	f000 ff5c 	bl	8006dc0 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	339c      	adds	r3, #156	; 0x9c
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8005f18:	2101      	movs	r1, #1
 8005f1a:	9102      	str	r1, [sp, #8]
 8005f1c:	9201      	str	r2, [sp, #4]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4603      	mov	r3, r0
 8005f22:	2201      	movs	r2, #1
 8005f24:	2101      	movs	r1, #1
 8005f26:	2003      	movs	r0, #3
 8005f28:	f000 ff4a 	bl	8006dc0 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3324      	adds	r3, #36	; 0x24
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	9102      	str	r1, [sp, #8]
 8005f40:	9201      	str	r2, [sp, #4]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	4603      	mov	r3, r0
 8005f46:	2203      	movs	r2, #3
 8005f48:	2103      	movs	r1, #3
 8005f4a:	2003      	movs	r0, #3
 8005f4c:	f000 ff38 	bl	8006dc0 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3360      	adds	r3, #96	; 0x60
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005f60:	2100      	movs	r1, #0
 8005f62:	9102      	str	r1, [sp, #8]
 8005f64:	9201      	str	r2, [sp, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	2003      	movs	r0, #3
 8005f70:	f000 ff26 	bl	8006dc0 <matmul>
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	336c      	adds	r3, #108	; 0x6c
 8005f88:	2218      	movs	r2, #24
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f00a fd26 	bl	80109de <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e021      	b.n	8005fdc <select_kf_observation_matrices+0x60>
        if (kf_state->z_active[i]) {
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	336c      	adds	r3, #108	; 0x6c
 8005fb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e00a      	b.n	8005fd6 <select_kf_observation_matrices+0x5a>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	33a0      	adds	r3, #160	; 0xa0
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	ddda      	ble.n	8005f98 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3384      	adds	r3, #132	; 0x84
 8005fec:	2103      	movs	r1, #3
 8005fee:	2002      	movs	r0, #2
 8005ff0:	f000 fd56 	bl	8006aa0 <transpose>
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af04      	add	r7, sp, #16
 8006002:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006016:	2201      	movs	r2, #1
 8006018:	9201      	str	r2, [sp, #4]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4603      	mov	r3, r0
 800601e:	460a      	mov	r2, r1
 8006020:	2103      	movs	r1, #3
 8006022:	2002      	movs	r0, #2
 8006024:	f000 ff66 	bl	8006ef4 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800603a:	2002      	movs	r0, #2
 800603c:	f000 fdaf 	bl	8006b9e <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8006052:	2101      	movs	r1, #1
 8006054:	9102      	str	r1, [sp, #8]
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4603      	mov	r3, r0
 800605c:	2203      	movs	r2, #3
 800605e:	2103      	movs	r1, #3
 8006060:	2002      	movs	r0, #2
 8006062:	f000 fead 	bl	8006dc0 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3384      	adds	r3, #132	; 0x84
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 8006076:	2101      	movs	r1, #1
 8006078:	9102      	str	r1, [sp, #8]
 800607a:	9201      	str	r2, [sp, #4]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	4603      	mov	r3, r0
 8006080:	2202      	movs	r2, #2
 8006082:	2103      	movs	r1, #3
 8006084:	2002      	movs	r0, #2
 8006086:	f000 fe9b 	bl	8006dc0 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	460b      	mov	r3, r1
 80060a0:	2102      	movs	r1, #2
 80060a2:	2002      	movs	r0, #2
 80060a4:	f000 fda6 	bl	8006bf4 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060ae:	2210      	movs	r2, #16
 80060b0:	2100      	movs	r1, #0
 80060b2:	4618      	mov	r0, r3
 80060b4:	f00a fc93 	bl	80109de <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060c4:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80061d0 <kf_update+0x1d4>
 80060c8:	461a      	mov	r2, r3
 80060ca:	2002      	movs	r0, #2
 80060cc:	f001 f8de 	bl	800728c <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3384      	adds	r3, #132	; 0x84
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 80060e0:	2101      	movs	r1, #1
 80060e2:	9102      	str	r1, [sp, #8]
 80060e4:	9201      	str	r2, [sp, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4603      	mov	r3, r0
 80060ea:	2202      	movs	r2, #2
 80060ec:	2103      	movs	r1, #3
 80060ee:	2003      	movs	r0, #3
 80060f0:	f000 fe66 	bl	8006dc0 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8006106:	2101      	movs	r1, #1
 8006108:	9102      	str	r1, [sp, #8]
 800610a:	9201      	str	r2, [sp, #4]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	4603      	mov	r3, r0
 8006110:	2202      	movs	r2, #2
 8006112:	2102      	movs	r1, #2
 8006114:	2003      	movs	r0, #3
 8006116:	f000 fe53 	bl	8006dc0 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	33c4      	adds	r3, #196	; 0xc4
 800612a:	2201      	movs	r2, #1
 800612c:	9201      	str	r2, [sp, #4]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4603      	mov	r3, r0
 8006132:	460a      	mov	r2, r1
 8006134:	2102      	movs	r1, #2
 8006136:	2003      	movs	r0, #3
 8006138:	f000 fedc 	bl	8006ef4 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	33c4      	adds	r3, #196	; 0xc4
 800614c:	2003      	movs	r0, #3
 800614e:	f000 fcfb 	bl	8006b48 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006158:	4619      	mov	r1, r3
 800615a:	2003      	movs	r0, #3
 800615c:	f000 fc54 	bl	8006a08 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	336c      	adds	r3, #108	; 0x6c
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8006170:	2101      	movs	r1, #1
 8006172:	9102      	str	r1, [sp, #8]
 8006174:	9201      	str	r2, [sp, #4]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	4603      	mov	r3, r0
 800617a:	2203      	movs	r2, #3
 800617c:	2102      	movs	r1, #2
 800617e:	2003      	movs	r0, #3
 8006180:	f000 fe1e 	bl	8006dc0 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f503 710e 	add.w	r1, r3, #568	; 0x238
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	460b      	mov	r3, r1
 800619a:	2103      	movs	r1, #3
 800619c:	2003      	movs	r0, #3
 800619e:	f000 fd9c 	bl	8006cda <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	32d0      	adds	r2, #208	; 0xd0
 80061b2:	2101      	movs	r1, #1
 80061b4:	9102      	str	r1, [sp, #8]
 80061b6:	9201      	str	r2, [sp, #4]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4603      	mov	r3, r0
 80061bc:	2203      	movs	r2, #3
 80061be:	2103      	movs	r1, #3
 80061c0:	2003      	movs	r0, #3
 80061c2:	f000 fdfd 	bl	8006dc0 <matmul>
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	38d1b717 	.word	0x38d1b717

080061d4 <reset_state_est_state>:
#include "../../Inc/Sim_Con/state_est.h"

void reset_state_est_state(float p_g, float T_g, state_est_state_t *state_est_state) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	ed87 0a03 	vstr	s0, [r7, #12]
 80061de:	edc7 0a02 	vstr	s1, [r7, #8]
 80061e2:	6078      	str	r0, [r7, #4]
    reset_flight_phase_detection(&state_est_state->flight_phase_detection);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fdac 	bl	8005d48 <reset_flight_phase_detection>

    memset(&state_est_state->state_est_data, 0, sizeof(state_est_state->state_est_data));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	223c      	movs	r2, #60	; 0x3c
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f00a fbf1 	bl	80109de <memset>
    memset(&state_est_state->state_est_meas, 0, sizeof(state_est_state->state_est_meas));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	333c      	adds	r3, #60	; 0x3c
 8006200:	2250      	movs	r2, #80	; 0x50
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f00a fbea 	bl	80109de <memset>
    memset(&state_est_state->state_est_meas_prior, 0, sizeof(state_est_state->state_est_meas_prior));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	338c      	adds	r3, #140	; 0x8c
 800620e:	2250      	movs	r2, #80	; 0x50
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f00a fbe3 	bl	80109de <memset>

    init_env(&state_est_state->env);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff f9fa 	bl	8005618 <init_env>
    calibrate_env(&state_est_state->env, p_g, T_g);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800622a:	edd7 0a02 	vldr	s1, [r7, #8]
 800622e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fa08 	bl	8005648 <calibrate_env>
    update_env(&state_est_state->env, T_g);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800623e:	ed97 0a02 	vldr	s0, [r7, #8]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fa24 	bl	8005690 <update_env>

	reset_kf_state(&state_est_state->kf_state);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	33dc      	adds	r3, #220	; 0xdc
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fd93 	bl	8005d78 <reset_kf_state>
    update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	33dc      	adds	r3, #220	; 0xdc
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 f886 	bl	800636c <update_state_est_data>

    memset(&state_est_state->baro_roll_mem, 0, sizeof(state_est_state->baro_roll_mem));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8006266:	22b0      	movs	r2, #176	; 0xb0
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f00a fbb7 	bl	80109de <memset>

	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection, 
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8006288:	f000 fa2a 	bl	80066e0 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <state_est_step>:

void state_est_step(timestamp_t t, state_est_state_t *state_est_state, bool bool_detect_flight_phase) {
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b087      	sub	sp, #28
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	71fb      	strb	r3, [r7, #7]
    /* process measurements */
	process_measurements(t, &state_est_state->kf_state, &state_est_state->state_est_meas, &state_est_state->state_est_meas_prior, 
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80062c0:	9201      	str	r2, [sp, #4]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	4623      	mov	r3, r4
 80062c6:	4602      	mov	r2, r0
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f89d 	bl	8006408 <process_measurements>
                         &state_est_state->env, &state_est_state->baro_roll_mem);

	/* select noise models (dependent on detected flight phase and updated temperature in environment) */
	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection,
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80062e6:	f000 f9fb 	bl	80066e0 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
	
	kf_prediction(&state_est_state->kf_state);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	33dc      	adds	r3, #220	; 0xdc
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fdd6 	bl	8005ea0 <kf_prediction>

	if (state_est_state->kf_state.num_z_active > 0) {
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dd0a      	ble.n	8006314 <state_est_step+0x80>
		select_kf_observation_matrices(&state_est_state->kf_state);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	33dc      	adds	r3, #220	; 0xdc
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fe3a 	bl	8005f7c <select_kf_observation_matrices>
		kf_update(&state_est_state->kf_state);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	33dc      	adds	r3, #220	; 0xdc
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fe75 	bl	8005ffc <kf_update>
 8006312:	e009      	b.n	8006328 <state_est_step+0x94>
	} else {
		memcpy(&state_est_state->kf_state.x_est, &state_est_state->kf_state.x_priori, sizeof(state_est_state->kf_state.x_priori));
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8006320:	220c      	movs	r2, #12
 8006322:	4619      	mov	r1, r3
 8006324:	f00a fb50 	bl	80109c8 <memcpy>
	}

	update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state);
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	33dc      	adds	r3, #220	; 0xdc
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f000 f81b 	bl	800636c <update_state_est_data>

    if (bool_detect_flight_phase){
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d009      	beq.n	8006350 <state_est_step+0xbc>
        detect_flight_phase(&state_est_state->flight_phase_detection, &state_est_state->state_est_data, &state_est_state->env);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800634a:	461a      	mov	r2, r3
 800634c:	f7ff fb20 	bl	8005990 <detect_flight_phase>
    }

	/* set measurement prior to measurements from completed state estimation step */
	memcpy(&state_est_state->state_est_meas_prior, &state_est_state->state_est_meas, sizeof(state_est_state->state_est_meas));
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	333c      	adds	r3, #60	; 0x3c
 800635a:	2250      	movs	r2, #80	; 0x50
 800635c:	4619      	mov	r1, r3
 800635e:	f00a fb33 	bl	80109c8 <memcpy>
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bd90      	pop	{r4, r7, pc}
	...

0800636c <update_state_est_data>:

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800637c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006404 <update_state_est_data+0x98>
 8006380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006388:	ee17 2a90 	vmov	r2, s15
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8006396:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006404 <update_state_est_data+0x98>
 800639a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800639e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063a2:	ee17 2a90 	vmov	r2, s15
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80063b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006404 <update_state_est_data+0x98>
 80063b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063bc:	ee17 2a90 	vmov	r2, s15
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80063ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006404 <update_state_est_data+0x98>
 80063ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d6:	ee17 2a90 	vmov	r2, s15
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80063e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006404 <update_state_est_data+0x98>
 80063e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063f0:	ee17 2a90 	vmov	r2, s15
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	447a0000 	.word	0x447a0000

08006408 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8006408:	b590      	push	{r4, r7, lr}
 800640a:	b093      	sub	sp, #76	; 0x4c
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8006416:	2300      	movs	r3, #0
 8006418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641a:	e09a      	b.n	8006552 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006420:	4613      	mov	r3, r2
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	3308      	adds	r3, #8
 800642c:	6819      	ldr	r1, [r3, #0]
 800642e:	6838      	ldr	r0, [r7, #0]
 8006430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4403      	add	r3, r0
 800643c:	3308      	adds	r3, #8
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4299      	cmp	r1, r3
 8006442:	d92b      	bls.n	800649c <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006448:	4613      	mov	r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	3352      	adds	r3, #82	; 0x52
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	4413      	add	r3, r2
 8006466:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006472:	4613      	mov	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3304      	adds	r3, #4
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006488:	440b      	add	r3, r1
 800648a:	3b20      	subs	r3, #32
 800648c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 800648e:	f107 021c 	add.w	r2, r7, #28
 8006492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006494:	4413      	add	r3, r2
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e01d      	b.n	80064d8 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	3352      	adds	r3, #82	; 0x52
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 80064ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80064c2:	4413      	add	r3, r2
 80064c4:	3b20      	subs	r3, #32
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80064cc:	f107 021c 	add.w	r2, r7, #28
 80064d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d2:	4413      	add	r3, r2
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064dc:	4613      	mov	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	1a9b      	subs	r3, r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	3330      	adds	r3, #48	; 0x30
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	6838      	ldr	r0, [r7, #0]
 80064ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	1a9b      	subs	r3, r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4403      	add	r3, r0
 80064f8:	3330      	adds	r3, #48	; 0x30
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4299      	cmp	r1, r3
 80064fe:	d916      	bls.n	800652e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	3324      	adds	r3, #36	; 0x24
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800651a:	440b      	add	r3, r1
 800651c:	3b2c      	subs	r3, #44	; 0x2c
 800651e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8006520:	f107 0210 	add.w	r2, r7, #16
 8006524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006526:	4413      	add	r3, r2
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e00e      	b.n	800654c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006536:	4413      	add	r3, r2
 8006538:	3b2c      	subs	r3, #44	; 0x2c
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8006540:	f107 0210 	add.w	r2, r7, #16
 8006544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006546:	4413      	add	r3, r2
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800654c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654e:	3301      	adds	r3, #1
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	f77f af61 	ble.w	800641c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006566:	461a      	mov	r2, r3
 8006568:	2002      	movs	r0, #2
 800656a:	f000 f979 	bl	8006860 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 800656e:	f107 021c 	add.w	r2, r7, #28
 8006572:	f107 0320 	add.w	r3, r7, #32
 8006576:	4619      	mov	r1, r3
 8006578:	2002      	movs	r0, #2
 800657a:	f000 f971 	bl	8006860 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 800657e:	f107 0210 	add.w	r2, r7, #16
 8006582:	f107 0314 	add.w	r3, r7, #20
 8006586:	4619      	mov	r1, r3
 8006588:	2002      	movs	r0, #2
 800658a:	f000 f969 	bl	8006860 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
    int num_acc_x_meas_active = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	633b      	str	r3, [r7, #48]	; 0x30
    int num_temp_meas_active = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80065aa:	2300      	movs	r3, #0
 80065ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ae:	e047      	b.n	8006640 <process_measurements+0x238>
        if (kf_state->z_active[i]){
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d006      	beq.n	80065ce <process_measurements+0x1c6>
            kf_state->num_z_active += 1;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        }
        if (acc_x_meas_active[i]) {
 80065ce:	f107 0210 	add.w	r2, r7, #16
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	4413      	add	r3, r2
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d010      	beq.n	80065fe <process_measurements+0x1f6>
            u += acc_x_meas[i];
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80065e4:	4413      	add	r3, r2
 80065e6:	3b2c      	subs	r3, #44	; 0x2c
 80065e8:	edd3 7a00 	vldr	s15, [r3]
 80065ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80065f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            num_acc_x_meas_active += 1;
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	3301      	adds	r3, #1
 80065fc:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        if (temp_meas[i]) {
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006606:	4413      	add	r3, r2
 8006608:	3b20      	subs	r3, #32
 800660a:	edd3 7a00 	vldr	s15, [r3]
 800660e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006616:	d010      	beq.n	800663a <process_measurements+0x232>
            temp_meas_mean += temp_meas[i];
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006620:	4413      	add	r3, r2
 8006622:	3b20      	subs	r3, #32
 8006624:	edd3 7a00 	vldr	s15, [r3]
 8006628:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800662c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006630:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            num_temp_meas_active += 1;
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	3301      	adds	r3, #1
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	3301      	adds	r3, #1
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	2b01      	cmp	r3, #1
 8006644:	ddb4      	ble.n	80065b0 <process_measurements+0x1a8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f503 71c8 	add.w	r1, r3, #400	; 0x190
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	460b      	mov	r3, r1
 800665c:	2102      	movs	r1, #2
 800665e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006660:	f7ff f872 	bl	8005748 <pressure2altitudeAGL>

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	2b00      	cmp	r3, #0
 8006668:	dd1c      	ble.n	80066a4 <process_measurements+0x29c>
        u /= num_acc_x_meas_active;
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006674:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800667c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        /* gravity compensation for accelerometer */
        kf_state->u[0] = u - GRAVITATION;
 8006680:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006682:	f7f9 ff61 	bl	8000548 <__aeabi_f2d>
 8006686:	a314      	add	r3, pc, #80	; (adr r3, 80066d8 <process_measurements+0x2d0>)
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f7f9 fdfc 	bl	8000288 <__aeabi_dsub>
 8006690:	4603      	mov	r3, r0
 8006692:	460c      	mov	r4, r1
 8006694:	4618      	mov	r0, r3
 8006696:	4621      	mov	r1, r4
 8006698:	f7fa faa6 	bl	8000be8 <__aeabi_d2f>
 800669c:	4602      	mov	r2, r0
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
    
    if (num_temp_meas_active > 0){
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd0f      	ble.n	80066ca <process_measurements+0x2c2>
        temp_meas_mean /= num_temp_meas_active;
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066b4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80066b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        update_env(env, temp_meas_mean);
 80066c0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80066c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80066c6:	f7fe ffe3 	bl	8005690 <update_env>
    }
} 
 80066ca:	bf00      	nop
 80066cc:	3744      	adds	r7, #68	; 0x44
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd90      	pop	{r4, r7, pc}
 80066d2:	bf00      	nop
 80066d4:	f3af 8000 	nop.w
 80066d8:	51eb851f 	.word	0x51eb851f
 80066dc:	40239eb8 	.word	0x40239eb8

080066e0 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b091      	sub	sp, #68	; 0x44
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	d82a      	bhi.n	800674e <select_noise_models+0x6e>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <select_noise_models+0x20>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	0800671d 	.word	0x0800671d
 8006704:	0800671d 	.word	0x0800671d
 8006708:	08006727 	.word	0x08006727
 800670c:	08006731 	.word	0x08006731
 8006710:	0800673b 	.word	0x0800673b
 8006714:	08006745 	.word	0x08006745
 8006718:	0800671d 	.word	0x0800671d
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 800671c:	4b48      	ldr	r3, [pc, #288]	; (8006840 <select_noise_models+0x160>)
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8006720:	4b48      	ldr	r3, [pc, #288]	; (8006844 <select_noise_models+0x164>)
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8006724:	e013      	b.n	800674e <select_noise_models+0x6e>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8006726:	4b48      	ldr	r3, [pc, #288]	; (8006848 <select_noise_models+0x168>)
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 800672a:	4b48      	ldr	r3, [pc, #288]	; (800684c <select_noise_models+0x16c>)
 800672c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800672e:	e00e      	b.n	800674e <select_noise_models+0x6e>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8006730:	4b47      	ldr	r3, [pc, #284]	; (8006850 <select_noise_models+0x170>)
 8006732:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8006734:	4b47      	ldr	r3, [pc, #284]	; (8006854 <select_noise_models+0x174>)
 8006736:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8006738:	e009      	b.n	800674e <select_noise_models+0x6e>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 800673a:	4b47      	ldr	r3, [pc, #284]	; (8006858 <select_noise_models+0x178>)
 800673c:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 800673e:	4b47      	ldr	r3, [pc, #284]	; (800685c <select_noise_models+0x17c>)
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8006742:	e004      	b.n	800674e <select_noise_models+0x6e>
        case BALLISTIC_DESCENT:
            accelerometer_x_stdev = 0.61803;
 8006744:	4b42      	ldr	r3, [pc, #264]	; (8006850 <select_noise_models+0x170>)
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8006748:	4b42      	ldr	r3, [pc, #264]	; (8006854 <select_noise_models+0x174>)
 800674a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800674c:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 800674e:	2300      	movs	r3, #0
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006752:	e01b      	b.n	800678c <select_noise_models+0xac>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8006754:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006756:	f7f9 fef7 	bl	8000548 <__aeabi_f2d>
 800675a:	4603      	mov	r3, r0
 800675c:	460c      	mov	r4, r1
 800675e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8006838 <select_noise_models+0x158>
 8006762:	ec44 3b10 	vmov	d0, r3, r4
 8006766:	f00e f95b 	bl	8014a20 <pow>
 800676a:	ec54 3b10 	vmov	r3, r4, d0
 800676e:	4618      	mov	r0, r3
 8006770:	4621      	mov	r1, r4
 8006772:	f7fa fa39 	bl	8000be8 <__aeabi_d2f>
 8006776:	4601      	mov	r1, r0
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	3313      	adds	r3, #19
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4413      	add	r3, r2
 8006782:	3304      	adds	r3, #4
 8006784:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	3301      	adds	r3, #1
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	2b00      	cmp	r3, #0
 8006790:	dde0      	ble.n	8006754 <select_noise_models+0x74>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006798:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 800679a:	2301      	movs	r3, #1
 800679c:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 800679e:	f107 0114 	add.w	r1, r7, #20
 80067a2:	f107 0218 	add.w	r2, r7, #24
 80067a6:	f107 031c 	add.w	r3, r7, #28
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	460b      	mov	r3, r1
 80067ae:	2101      	movs	r1, #1
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff f829 	bl	8005808 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80067b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80067ba:	eeb0 0a67 	vmov.f32	s0, s15
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff f88a 	bl	80058d8 <altitude_gradient>
 80067c4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80067c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80067cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80067d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d4:	eef0 7ae7 	vabs.f32	s15, s15
 80067d8:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80067dc:	2300      	movs	r3, #0
 80067de:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e0:	e01c      	b.n	800681c <select_noise_models+0x13c>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 80067e2:	6a38      	ldr	r0, [r7, #32]
 80067e4:	f7f9 feb0 	bl	8000548 <__aeabi_f2d>
 80067e8:	4603      	mov	r3, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8006838 <select_noise_models+0x158>
 80067f0:	ec44 3b10 	vmov	d0, r3, r4
 80067f4:	f00e f914 	bl	8014a20 <pow>
 80067f8:	ec54 3b10 	vmov	r3, r4, d0
 80067fc:	4618      	mov	r0, r3
 80067fe:	4621      	mov	r1, r4
 8006800:	f7fa f9f2 	bl	8000be8 <__aeabi_d2f>
 8006804:	68f9      	ldr	r1, [r7, #12]
 8006806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006808:	4613      	mov	r3, r2
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	33a0      	adds	r3, #160	; 0xa0
 8006814:	6018      	str	r0, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	3301      	adds	r3, #1
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	2b01      	cmp	r3, #1
 8006820:	dddf      	ble.n	80067e2 <select_noise_models+0x102>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006826:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800682a:	bf00      	nop
 800682c:	373c      	adds	r7, #60	; 0x3c
 800682e:	46bd      	mov	sp, r7
 8006830:	bd90      	pop	{r4, r7, pc}
 8006832:	bf00      	nop
 8006834:	f3af 8000 	nop.w
 8006838:	00000000 	.word	0x00000000
 800683c:	40000000 	.word	0x40000000
 8006840:	3c97e316 	.word	0x3c97e316
 8006844:	3fef3b64 	.word	0x3fef3b64
 8006848:	3fa01965 	.word	0x3fa01965
 800684c:	41500000 	.word	0x41500000
 8006850:	3f1e3737 	.word	0x3f1e3737
 8006854:	40ec28f6 	.word	0x40ec28f6
 8006858:	3ffa41cc 	.word	0x3ffa41cc
 800685c:	40795810 	.word	0x40795810

08006860 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int n, float measurements[n], bool measurement_active[n]) {
 8006860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006862:	b08b      	sub	sp, #44	; 0x2c
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e017      	b.n	80068ac <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00e      	beq.n	80068a6 <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	3301      	adds	r3, #1
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	4413      	add	r3, r2
 8006896:	edd3 7a00 	vldr	s15, [r3]
 800689a:	ed97 7a08 	vldr	s14, [r7, #32]
 800689e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068a2:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	3301      	adds	r3, #1
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	dbe3      	blt.n	800687c <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd0a      	ble.n	80068d0 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	ee07 3a90 	vmov	s15, r3
 80068c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80068c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068cc:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e033      	b.n	8006944 <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d02a      	beq.n	800693e <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	4413      	add	r3, r2
 80068f0:	ed93 7a00 	vldr	s14, [r3]
 80068f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80068f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068fc:	ee17 0a90 	vmov	r0, s15
 8006900:	f7f9 fe22 	bl	8000548 <__aeabi_f2d>
 8006904:	4603      	mov	r3, r0
 8006906:	460c      	mov	r4, r1
 8006908:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8006a00 <sensor_elimination_by_stdev+0x1a0>
 800690c:	ec44 3b10 	vmov	d0, r3, r4
 8006910:	f00e f886 	bl	8014a20 <pow>
 8006914:	ec56 5b10 	vmov	r5, r6, d0
 8006918:	69b8      	ldr	r0, [r7, #24]
 800691a:	f7f9 fe15 	bl	8000548 <__aeabi_f2d>
 800691e:	4603      	mov	r3, r0
 8006920:	460c      	mov	r4, r1
 8006922:	461a      	mov	r2, r3
 8006924:	4623      	mov	r3, r4
 8006926:	4628      	mov	r0, r5
 8006928:	4631      	mov	r1, r6
 800692a:	f7f9 fcaf 	bl	800028c <__adddf3>
 800692e:	4603      	mov	r3, r0
 8006930:	460c      	mov	r4, r1
 8006932:	4618      	mov	r0, r3
 8006934:	4621      	mov	r1, r4
 8006936:	f7fa f957 	bl	8000be8 <__aeabi_d2f>
 800693a:	4603      	mov	r3, r0
 800693c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	3301      	adds	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	dbc7      	blt.n	80068dc <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	2b00      	cmp	r3, #0
 8006950:	dd1a      	ble.n	8006988 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800695c:	ed97 7a06 	vldr	s14, [r7, #24]
 8006960:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006964:	ee16 0a90 	vmov	r0, s13
 8006968:	f7f9 fdee 	bl	8000548 <__aeabi_f2d>
 800696c:	4603      	mov	r3, r0
 800696e:	460c      	mov	r4, r1
 8006970:	ec44 3b10 	vmov	d0, r3, r4
 8006974:	f00e f9c4 	bl	8014d00 <sqrt>
 8006978:	ec54 3b10 	vmov	r3, r4, d0
 800697c:	4618      	mov	r0, r3
 800697e:	4621      	mov	r1, r4
 8006980:	f7fa f932 	bl	8000be8 <__aeabi_d2f>
 8006984:	4603      	mov	r3, r0
 8006986:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8006988:	2300      	movs	r3, #0
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	e02f      	b.n	80069ee <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4413      	add	r3, r2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d026      	beq.n	80069e8 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	ed93 7a00 	vldr	s14, [r3]
 80069a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80069aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ae:	eef0 7ae7 	vabs.f32	s15, s15
 80069b2:	ee17 0a90 	vmov	r0, s15
 80069b6:	f7f9 fdc7 	bl	8000548 <__aeabi_f2d>
 80069ba:	4604      	mov	r4, r0
 80069bc:	460d      	mov	r5, r1
 80069be:	69b8      	ldr	r0, [r7, #24]
 80069c0:	f7f9 fdc2 	bl	8000548 <__aeabi_f2d>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	f7f9 fc60 	bl	800028c <__adddf3>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4620      	mov	r0, r4
 80069d2:	4629      	mov	r1, r5
 80069d4:	f7fa f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4413      	add	r3, r2
 80069e4:	2200      	movs	r2, #0
 80069e6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	dbcb      	blt.n	800698e <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 80069f6:	bf00      	nop
 80069f8:	372c      	adds	r7, #44	; 0x2c
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fe:	bf00      	nop
 8006a00:	00000000 	.word	0x00000000
 8006a04:	40000000 	.word	0x40000000

08006a08 <eye>:
#include "../../Inc/Util/math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8006a08:	b490      	push	{r4, r7}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	1e43      	subs	r3, r0, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f04f 0400 	mov.w	r4, #0
 8006a28:	0154      	lsls	r4, r2, #5
 8006a2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a2e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	e02b      	b.n	8006a8e <eye+0x86>
        for(int j = 0; j < dim; j++){
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e021      	b.n	8006a80 <eye+0x78>
            if (i == j){
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d10d      	bne.n	8006a60 <eye+0x58>
				A[i][j] = 1;
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	fb03 f302 	mul.w	r3, r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	441a      	add	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e00c      	b.n	8006a7a <eye+0x72>
			} else {
				A[i][j] = 0;
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	fb03 f302 	mul.w	r3, r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	441a      	add	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	dbd9      	blt.n	8006a3c <eye+0x34>
	for(int i = 0; i < dim; i++){
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	dbcf      	blt.n	8006a36 <eye+0x2e>
			}
        }
    }
}
 8006a96:	bf00      	nop
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc90      	pop	{r4, r7}
 8006a9e:	4770      	bx	lr

08006aa0 <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 8006aa0:	b4b0      	push	{r4, r5, r7}
 8006aa2:	b089      	sub	sp, #36	; 0x24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	68b8      	ldr	r0, [r7, #8]
 8006ab0:	1e43      	subs	r3, r0, #1
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	f04f 0400 	mov.w	r4, #0
 8006ac4:	0154      	lsls	r4, r2, #5
 8006ac6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006aca:	014b      	lsls	r3, r1, #5
 8006acc:	68fd      	ldr	r5, [r7, #12]
 8006ace:	1e6b      	subs	r3, r5, #1
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	462b      	mov	r3, r5
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	f04f 0400 	mov.w	r4, #0
 8006ae2:	0154      	lsls	r4, r2, #5
 8006ae4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ae8:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8006aea:	2300      	movs	r3, #0
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e022      	b.n	8006b36 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	e018      	b.n	8006b28 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8006af6:	4602      	mov	r2, r0
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	fb03 f302 	mul.w	r3, r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	441a      	add	r2, r3
 8006b04:	4629      	mov	r1, r5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	fb03 f301 	mul.w	r3, r3, r1
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	4419      	add	r1, r3
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	dbe2      	blt.n	8006af6 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	dbd8      	blt.n	8006af0 <transpose+0x50>
		}
	}
}
 8006b3e:	bf00      	nop
 8006b40:	3724      	adds	r7, #36	; 0x24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bcb0      	pop	{r4, r5, r7}
 8006b46:	4770      	bx	lr

08006b48 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	e016      	b.n	8006b8a <vecadd+0x42>
		c[i] = a[i] + b[i];
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	4413      	add	r3, r2
 8006b64:	ed93 7a00 	vldr	s14, [r3]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	4413      	add	r3, r2
 8006b70:	edd3 7a00 	vldr	s15, [r3]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b80:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3301      	adds	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	dbe4      	blt.n	8006b5c <vecadd+0x14>
	}
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 8006b9e:	b480      	push	{r7}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e016      	b.n	8006be0 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4413      	add	r3, r2
 8006bba:	ed93 7a00 	vldr	s14, [r3]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	edd3 7a00 	vldr	s15, [r3]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bd6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	dbe4      	blt.n	8006bb2 <vecsub+0x14>
	}
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <matadd>:

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8006bf4:	b4f0      	push	{r4, r5, r6, r7}
 8006bf6:	b08a      	sub	sp, #40	; 0x28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	68b8      	ldr	r0, [r7, #8]
 8006c04:	1e43      	subs	r3, r0, #1
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	f04f 0400 	mov.w	r4, #0
 8006c18:	0154      	lsls	r4, r2, #5
 8006c1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c1e:	014b      	lsls	r3, r1, #5
 8006c20:	68bd      	ldr	r5, [r7, #8]
 8006c22:	1e6b      	subs	r3, r5, #1
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	462b      	mov	r3, r5
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	f04f 0400 	mov.w	r4, #0
 8006c36:	0154      	lsls	r4, r2, #5
 8006c38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c3c:	014b      	lsls	r3, r1, #5
 8006c3e:	68be      	ldr	r6, [r7, #8]
 8006c40:	1e73      	subs	r3, r6, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	4633      	mov	r3, r6
 8006c46:	4619      	mov	r1, r3
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	f04f 0400 	mov.w	r4, #0
 8006c54:	0154      	lsls	r4, r2, #5
 8006c56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c5a:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	e032      	b.n	8006cc8 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8006c62:	2300      	movs	r3, #0
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	e028      	b.n	8006cba <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8006c68:	4602      	mov	r2, r0
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	fb03 f302 	mul.w	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	441a      	add	r2, r3
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	ed93 7a00 	vldr	s14, [r3]
 8006c80:	462a      	mov	r2, r5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	fb03 f302 	mul.w	r3, r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	441a      	add	r2, r3
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	edd3 7a00 	vldr	s15, [r3]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	fb03 f302 	mul.w	r3, r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ca4:	441a      	add	r2, r3
 8006ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	623b      	str	r3, [r7, #32]
 8006cba:	6a3a      	ldr	r2, [r7, #32]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	dbd2      	blt.n	8006c68 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	dbc8      	blt.n	8006c62 <matadd+0x6e>
        }
    }
}
 8006cd0:	bf00      	nop
 8006cd2:	3728      	adds	r7, #40	; 0x28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8006cd8:	4770      	bx	lr

08006cda <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8006cda:	b4f0      	push	{r4, r5, r6, r7}
 8006cdc:	b08a      	sub	sp, #40	; 0x28
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	68b8      	ldr	r0, [r7, #8]
 8006cea:	1e43      	subs	r3, r0, #1
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	f04f 0400 	mov.w	r4, #0
 8006cfe:	0154      	lsls	r4, r2, #5
 8006d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d04:	014b      	lsls	r3, r1, #5
 8006d06:	68bd      	ldr	r5, [r7, #8]
 8006d08:	1e6b      	subs	r3, r5, #1
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	f04f 0400 	mov.w	r4, #0
 8006d1c:	0154      	lsls	r4, r2, #5
 8006d1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d22:	014b      	lsls	r3, r1, #5
 8006d24:	68be      	ldr	r6, [r7, #8]
 8006d26:	1e73      	subs	r3, r6, #1
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	f04f 0400 	mov.w	r4, #0
 8006d3a:	0154      	lsls	r4, r2, #5
 8006d3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d40:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e032      	b.n	8006dae <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8006d48:	2300      	movs	r3, #0
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	e028      	b.n	8006da0 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8006d4e:	4602      	mov	r2, r0
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	fb03 f302 	mul.w	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	ed93 7a00 	vldr	s14, [r3]
 8006d66:	462a      	mov	r2, r5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	fb03 f302 	mul.w	r3, r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	441a      	add	r2, r3
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	edd3 7a00 	vldr	s15, [r3]
 8006d7e:	4632      	mov	r2, r6
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	fb03 f302 	mul.w	r3, r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d8a:	441a      	add	r2, r3
 8006d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	623b      	str	r3, [r7, #32]
 8006da0:	6a3a      	ldr	r2, [r7, #32]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	dbd2      	blt.n	8006d4e <matsub+0x74>
	for(int i = 0; i < m; i++){
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3301      	adds	r3, #1
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	dbc8      	blt.n	8006d48 <matsub+0x6e>
        }
    }
}
 8006db6:	bf00      	nop
 8006db8:	3728      	adds	r7, #40	; 0x28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bcf0      	pop	{r4, r5, r6, r7}
 8006dbe:	4770      	bx	lr

08006dc0 <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8006dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc2:	b08d      	sub	sp, #52	; 0x34
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6178      	str	r0, [r7, #20]
 8006dc8:	6139      	str	r1, [r7, #16]
 8006dca:	60fa      	str	r2, [r7, #12]
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	693e      	ldr	r6, [r7, #16]
 8006dd0:	1e73      	subs	r3, r6, #1
 8006dd2:	623b      	str	r3, [r7, #32]
 8006dd4:	4633      	mov	r3, r6
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	f04f 0400 	mov.w	r4, #0
 8006de4:	0154      	lsls	r4, r2, #5
 8006de6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006dea:	014b      	lsls	r3, r1, #5
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	3b01      	subs	r3, #1
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	4613      	mov	r3, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	f04f 0400 	mov.w	r4, #0
 8006e06:	0154      	lsls	r4, r2, #5
 8006e08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e0c:	014b      	lsls	r3, r1, #5
 8006e0e:	68fd      	ldr	r5, [r7, #12]
 8006e10:	1e6b      	subs	r3, r5, #1
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	462b      	mov	r3, r5
 8006e16:	4619      	mov	r1, r3
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	f04f 0400 	mov.w	r4, #0
 8006e24:	0154      	lsls	r4, r2, #5
 8006e26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e2a:	014b      	lsls	r3, r1, #5
	if (reset) {
 8006e2c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2100      	movs	r1, #0
 8006e42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006e44:	f009 fdcb 	bl	80109de <memset>
	}
	for(int i = 0; i < m; i++){
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	e04a      	b.n	8006ee4 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e52:	e040      	b.n	8006ed6 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8006e54:	2300      	movs	r3, #0
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e58:	e036      	b.n	8006ec8 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	fb03 f302 	mul.w	r3, r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	441a      	add	r2, r3
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	ed93 7a00 	vldr	s14, [r3]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	fb03 f302 	mul.w	r3, r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e7e:	441a      	add	r2, r3
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	edd3 7a00 	vldr	s15, [r3]
 8006e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e8e:	462a      	mov	r2, r5
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	fb03 f302 	mul.w	r3, r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e9a:	441a      	add	r2, r3
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	edd3 7a00 	vldr	s15, [r3]
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	fb03 f302 	mul.w	r3, r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb2:	441a      	add	r2, r3
 8006eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	dbc4      	blt.n	8006e5a <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	dbba      	blt.n	8006e54 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	dbb0      	blt.n	8006e4e <matmul+0x8e>
            }
        }
    }
}
 8006eec:	bf00      	nop
 8006eee:	3734      	adds	r7, #52	; 0x34
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ef4 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8006ef4:	b5b0      	push	{r4, r5, r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	68bd      	ldr	r5, [r7, #8]
 8006f04:	1e6b      	subs	r3, r5, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	462b      	mov	r3, r5
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	f04f 0400 	mov.w	r4, #0
 8006f18:	0154      	lsls	r4, r2, #5
 8006f1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f1e:	014b      	lsls	r3, r1, #5
	if (reset) {
 8006f20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d006      	beq.n	8006f36 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f32:	f009 fd54 	bl	80109de <memset>
	}
	for(int i = 0; i < m; i++){
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	e02e      	b.n	8006f9a <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e024      	b.n	8006f8c <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8006f42:	462a      	mov	r2, r5
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	fb03 f302 	mul.w	r3, r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	441a      	add	r2, r3
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	ed93 7a00 	vldr	s14, [r3]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	4413      	add	r3, r2
 8006f62:	edd3 7a00 	vldr	s15, [r3]
 8006f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f70:	4413      	add	r3, r2
 8006f72:	edd3 7a00 	vldr	s15, [r3]
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7c:	4413      	add	r3, r2
 8006f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f82:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	dbd6      	blt.n	8006f42 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	3301      	adds	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	dbcc      	blt.n	8006f3c <matvecprod+0x48>
        }
    }
}
 8006fa2:	bf00      	nop
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bdb0      	pop	{r4, r5, r7, pc}

08006faa <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int lower_triangular_inverse(int n, float *L) {
 8006faa:	b480      	push	{r7}
 8006fac:	b08b      	sub	sp, #44	; 0x2c
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
   int i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	e01d      	b.n	8006ffa <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	edd3 7a00 	vldr	s15, [r3]
 8006fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fcc:	d102      	bne.n	8006fd4 <lower_triangular_inverse+0x2a>
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fd2:	e076      	b.n	80070c2 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	ed93 7a00 	vldr	s14, [r3]
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3301      	adds	r3, #1
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	dbdd      	blt.n	8006fbe <lower_triangular_inverse+0x14>
    }
    
    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8007002:	2301      	movs	r3, #1
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4413      	add	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e052      	b.n	80070b8 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8007012:	2300      	movs	r3, #0
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	e041      	b.n	80070a0 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	e01b      	b.n	8007064 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4413      	add	r3, r2
 8007034:	ed93 7a00 	vldr	s14, [r3]
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	edd3 7a00 	vldr	s15, [r3]
 8007044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007048:	ed97 7a03 	vldr	s14, [r7, #12]
 800704c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007050:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	429a      	cmp	r2, r3
 800706a:	dbdf      	blt.n	800702c <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4413      	add	r3, r2
 8007074:	edd3 7a00 	vldr	s15, [r3]
 8007078:	eeb1 7a67 	vneg.f32	s14, s15
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4413      	add	r3, r2
 8007084:	edd7 7a03 	vldr	s15, [r7, #12]
 8007088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708c:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4413      	add	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	3301      	adds	r3, #1
 800709e:	623b      	str	r3, [r7, #32]
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	429a      	cmp	r2, r3
 80070a6:	dbb9      	blt.n	800701c <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	3301      	adds	r3, #1
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4413      	add	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	429a      	cmp	r2, r3
 80070be:	dba8      	blt.n	8007012 <lower_triangular_inverse+0x68>
        }
    }
    
    return 0;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	372c      	adds	r7, #44	; 0x2c
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int n, float A[n][n], float L[n][n]) {
 80070d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070d4:	b08b      	sub	sp, #44	; 0x2c
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	68fe      	ldr	r6, [r7, #12]
 80070e0:	1e73      	subs	r3, r6, #1
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	4633      	mov	r3, r6
 80070e6:	4619      	mov	r1, r3
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	f04f 0400 	mov.w	r4, #0
 80070f4:	0154      	lsls	r4, r2, #5
 80070f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80070fa:	014b      	lsls	r3, r1, #5
 80070fc:	68fd      	ldr	r5, [r7, #12]
 80070fe:	1e6b      	subs	r3, r5, #1
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	462b      	mov	r3, r5
 8007104:	4619      	mov	r1, r3
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	f04f 0400 	mov.w	r4, #0
 8007112:	0154      	lsls	r4, r2, #5
 8007114:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007118:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	461a      	mov	r2, r3
 8007126:	2100      	movs	r1, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f009 fc58 	bl	80109de <memset>
    for (int i = 0; i < n; i++)
 800712e:	2300      	movs	r3, #0
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	e09f      	b.n	8007274 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8007134:	2300      	movs	r3, #0
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e093      	b.n	8007262 <cholesky+0x192>
            float s = 0;
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8007140:	2300      	movs	r3, #0
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
 8007144:	e022      	b.n	800718c <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8007146:	462a      	mov	r2, r5
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	fb03 f302 	mul.w	r3, r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	441a      	add	r2, r3
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	ed93 7a00 	vldr	s14, [r3]
 800715e:	462a      	mov	r2, r5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	fb03 f302 	mul.w	r3, r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	441a      	add	r2, r3
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	edd3 7a00 	vldr	s15, [r3]
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	ed97 7a08 	vldr	s14, [r7, #32]
 800717e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007182:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	3301      	adds	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
 800718c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	429a      	cmp	r2, r3
 8007192:	dbd8      	blt.n	8007146 <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	429a      	cmp	r2, r3
 800719a:	d116      	bne.n	80071ca <cholesky+0xfa>
 800719c:	4632      	mov	r2, r6
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	fb03 f302 	mul.w	r3, r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	441a      	add	r2, r3
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	ed93 7a00 	vldr	s14, [r3]
 80071b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80071b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071bc:	eeb0 0a67 	vmov.f32	s0, s15
 80071c0:	f00d ff5c 	bl	801507c <sqrtf>
 80071c4:	ee10 1a10 	vmov	r1, s0
 80071c8:	e03d      	b.n	8007246 <cholesky+0x176>
 80071ca:	462a      	mov	r2, r5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	fb03 f302 	mul.w	r3, r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	441a      	add	r2, r3
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7f9 f9b1 	bl	8000548 <__aeabi_f2d>
 80071e6:	4603      	mov	r3, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	461a      	mov	r2, r3
 80071ec:	4623      	mov	r3, r4
 80071ee:	f04f 0000 	mov.w	r0, #0
 80071f2:	4925      	ldr	r1, [pc, #148]	; (8007288 <cholesky+0x1b8>)
 80071f4:	f7f9 fb2a 	bl	800084c <__aeabi_ddiv>
 80071f8:	4603      	mov	r3, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	4698      	mov	r8, r3
 80071fe:	46a1      	mov	r9, r4
 8007200:	4632      	mov	r2, r6
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	fb03 f302 	mul.w	r3, r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	441a      	add	r2, r3
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	ed93 7a00 	vldr	s14, [r3]
 8007218:	edd7 7a08 	vldr	s15, [r7, #32]
 800721c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007220:	ee17 0a90 	vmov	r0, s15
 8007224:	f7f9 f990 	bl	8000548 <__aeabi_f2d>
 8007228:	4603      	mov	r3, r0
 800722a:	460c      	mov	r4, r1
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	4640      	mov	r0, r8
 8007232:	4649      	mov	r1, r9
 8007234:	f7f9 f9e0 	bl	80005f8 <__aeabi_dmul>
 8007238:	4603      	mov	r3, r0
 800723a:	460c      	mov	r4, r1
 800723c:	4618      	mov	r0, r3
 800723e:	4621      	mov	r1, r4
 8007240:	f7f9 fcd2 	bl	8000be8 <__aeabi_d2f>
 8007244:	4601      	mov	r1, r0
 8007246:	462a      	mov	r2, r5
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	fb03 f302 	mul.w	r3, r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	441a      	add	r2, r3
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	3301      	adds	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	3301      	adds	r3, #1
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	f6ff af66 	blt.w	800713a <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	3301      	adds	r3, #1
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	429a      	cmp	r2, r3
 800727a:	f6ff af5b 	blt.w	8007134 <cholesky+0x64>
        }
}
 800727e:	bf00      	nop
 8007280:	372c      	adds	r7, #44	; 0x2c
 8007282:	46bd      	mov	sp, r7
 8007284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007288:	3ff00000 	.word	0x3ff00000

0800728c <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int n, float A[n][n], float inverse[n][n], float lambda) {
 800728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	b090      	sub	sp, #64	; 0x40
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	ed87 0a00 	vstr	s0, [r7]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1e5a      	subs	r2, r3, #1
 80072a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80072a4:	4619      	mov	r1, r3
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	0154      	lsls	r4, r2, #5
 80072b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072b8:	014b      	lsls	r3, r1, #5
 80072ba:	68fd      	ldr	r5, [r7, #12]
 80072bc:	1e6b      	subs	r3, r5, #1
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c0:	462b      	mov	r3, r5
 80072c2:	4619      	mov	r1, r3
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	f04f 0400 	mov.w	r4, #0
 80072d0:	0154      	lsls	r4, r2, #5
 80072d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072d6:	014b      	lsls	r3, r1, #5
 80072d8:	466b      	mov	r3, sp
 80072da:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	68fe      	ldr	r6, [r7, #12]
 80072e0:	1e43      	subs	r3, r0, #1
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
 80072e4:	4603      	mov	r3, r0
 80072e6:	4619      	mov	r1, r3
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	f04f 0400 	mov.w	r4, #0
 80072f4:	0154      	lsls	r4, r2, #5
 80072f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072fa:	014b      	lsls	r3, r1, #5
 80072fc:	4603      	mov	r3, r0
 80072fe:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8007302:	1e73      	subs	r3, r6, #1
 8007304:	623b      	str	r3, [r7, #32]
 8007306:	4603      	mov	r3, r0
 8007308:	4619      	mov	r1, r3
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	4633      	mov	r3, r6
 8007310:	f04f 0400 	mov.w	r4, #0
 8007314:	fb03 fe02 	mul.w	lr, r3, r2
 8007318:	fb01 fc04 	mul.w	ip, r1, r4
 800731c:	44f4      	add	ip, lr
 800731e:	fba1 3403 	umull	r3, r4, r1, r3
 8007322:	eb0c 0204 	add.w	r2, ip, r4
 8007326:	4614      	mov	r4, r2
 8007328:	f04f 0100 	mov.w	r1, #0
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	0162      	lsls	r2, r4, #5
 8007332:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007336:	0159      	lsls	r1, r3, #5
 8007338:	4603      	mov	r3, r0
 800733a:	4619      	mov	r1, r3
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	4633      	mov	r3, r6
 8007342:	f04f 0400 	mov.w	r4, #0
 8007346:	fb03 fe02 	mul.w	lr, r3, r2
 800734a:	fb01 fc04 	mul.w	ip, r1, r4
 800734e:	44f4      	add	ip, lr
 8007350:	fba1 3403 	umull	r3, r4, r1, r3
 8007354:	eb0c 0204 	add.w	r2, ip, r4
 8007358:	4614      	mov	r4, r2
 800735a:	f04f 0100 	mov.w	r1, #0
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	0162      	lsls	r2, r4, #5
 8007364:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007368:	0159      	lsls	r1, r3, #5
 800736a:	4603      	mov	r3, r0
 800736c:	4632      	mov	r2, r6
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	3303      	adds	r3, #3
 8007376:	3307      	adds	r3, #7
 8007378:	08db      	lsrs	r3, r3, #3
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	ebad 0d03 	sub.w	sp, sp, r3
 8007380:	466b      	mov	r3, sp
 8007382:	3303      	adds	r3, #3
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 800738a:	69f8      	ldr	r0, [r7, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	461a      	mov	r2, r3
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	f009 fb15 	bl	80109c8 <memcpy>
    for (int i = 0; i < n; i++) {
 800739e:	2300      	movs	r3, #0
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a2:	e022      	b.n	80073ea <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda; 
 80073a4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ac:	fb01 f103 	mul.w	r1, r1, r3
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	440b      	add	r3, r1
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	ed93 7a00 	vldr	s14, [r3]
 80073bc:	edd7 6a00 	vldr	s13, [r7]
 80073c0:	edd7 7a00 	vldr	s15, [r7]
 80073c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073c8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80073cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d4:	fb01 f103 	mul.w	r1, r1, r3
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	440b      	add	r3, r1
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	3301      	adds	r3, #1
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	dbd8      	blt.n	80073a4 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	68fe      	ldr	r6, [r7, #12]
 80073f6:	466b      	mov	r3, sp
 80073f8:	469a      	mov	sl, r3
 80073fa:	1e43      	subs	r3, r0, #1
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	4603      	mov	r3, r0
 8007400:	4619      	mov	r1, r3
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	f04f 0400 	mov.w	r4, #0
 800740e:	0154      	lsls	r4, r2, #5
 8007410:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007414:	014b      	lsls	r3, r1, #5
 8007416:	4603      	mov	r3, r0
 8007418:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800741c:	1e73      	subs	r3, r6, #1
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	4603      	mov	r3, r0
 8007422:	4619      	mov	r1, r3
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	4633      	mov	r3, r6
 800742a:	f04f 0400 	mov.w	r4, #0
 800742e:	fb03 fe02 	mul.w	lr, r3, r2
 8007432:	fb01 fc04 	mul.w	ip, r1, r4
 8007436:	44f4      	add	ip, lr
 8007438:	fba1 3403 	umull	r3, r4, r1, r3
 800743c:	eb0c 0204 	add.w	r2, ip, r4
 8007440:	4614      	mov	r4, r2
 8007442:	f04f 0100 	mov.w	r1, #0
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	0162      	lsls	r2, r4, #5
 800744c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007450:	0159      	lsls	r1, r3, #5
 8007452:	4603      	mov	r3, r0
 8007454:	4619      	mov	r1, r3
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	4633      	mov	r3, r6
 800745c:	f04f 0400 	mov.w	r4, #0
 8007460:	fb03 fe02 	mul.w	lr, r3, r2
 8007464:	fb01 fc04 	mul.w	ip, r1, r4
 8007468:	44f4      	add	ip, lr
 800746a:	fba1 3403 	umull	r3, r4, r1, r3
 800746e:	eb0c 0204 	add.w	r2, ip, r4
 8007472:	4614      	mov	r4, r2
 8007474:	f04f 0100 	mov.w	r1, #0
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	0162      	lsls	r2, r4, #5
 800747e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007482:	0159      	lsls	r1, r3, #5
 8007484:	4603      	mov	r3, r0
 8007486:	4632      	mov	r2, r6
 8007488:	fb02 f303 	mul.w	r3, r2, r3
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	3303      	adds	r3, #3
 8007490:	3307      	adds	r3, #7
 8007492:	08db      	lsrs	r3, r3, #3
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	ebad 0d03 	sub.w	sp, sp, r3
 800749a:	466b      	mov	r3, sp
 800749c:	3303      	adds	r3, #3
 800749e:	089b      	lsrs	r3, r3, #2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4619      	mov	r1, r3
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fe10 	bl	80070d0 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4619      	mov	r1, r3
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fd78 	bl	8006faa <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	fb02 f303 	mul.w	r3, r2, r3
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	461a      	mov	r2, r3
 80074c6:	2100      	movs	r1, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f009 fa88 	bl	80109de <memset>
    for(int i = 0; i < n; i++){
 80074ce:	2300      	movs	r3, #0
 80074d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074d2:	e04e      	b.n	8007572 <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80074d4:	2300      	movs	r3, #0
 80074d6:	633b      	str	r3, [r7, #48]	; 0x30
 80074d8:	e044      	b.n	8007564 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 80074da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	4293      	cmp	r3, r2
 80074e0:	bfb8      	it	lt
 80074e2:	4613      	movlt	r3, r2
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
 80074e6:	e036      	b.n	8007556 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 80074e8:	462a      	mov	r2, r5
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	fb03 f302 	mul.w	r3, r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	441a      	add	r2, r3
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	ed93 7a00 	vldr	s14, [r3]
 8007500:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007508:	fb01 f103 	mul.w	r1, r1, r3
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	440b      	add	r3, r1
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	edd3 6a00 	vldr	s13, [r3]
 8007518:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007520:	fb01 f103 	mul.w	r1, r1, r3
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	440b      	add	r3, r1
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	edd3 7a00 	vldr	s15, [r3]
 8007530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007534:	462a      	mov	r2, r5
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	fb03 f302 	mul.w	r3, r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	441a      	add	r2, r3
 8007542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8007550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007552:	3301      	adds	r3, #1
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
 8007556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	429a      	cmp	r2, r3
 800755c:	dbc4      	blt.n	80074e8 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	3301      	adds	r3, #1
 8007562:	633b      	str	r3, [r7, #48]	; 0x30
 8007564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	429a      	cmp	r2, r3
 800756a:	dbb6      	blt.n	80074da <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	3301      	adds	r3, #1
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	429a      	cmp	r2, r3
 8007578:	dbac      	blt.n	80074d4 <cholesky_inverse+0x248>
 800757a:	46d5      	mov	sp, sl
 800757c:	46cd      	mov	sp, r9
            }
        }
    }
}
 800757e:	bf00      	nop
 8007580:	3740      	adds	r7, #64	; 0x40
 8007582:	46bd      	mov	sp, r7
 8007584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800758c:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <HAL_Init+0x40>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a0d      	ldr	r2, [pc, #52]	; (80075c8 <HAL_Init+0x40>)
 8007592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007598:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <HAL_Init+0x40>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a0a      	ldr	r2, [pc, #40]	; (80075c8 <HAL_Init+0x40>)
 800759e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075a4:	4b08      	ldr	r3, [pc, #32]	; (80075c8 <HAL_Init+0x40>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a07      	ldr	r2, [pc, #28]	; (80075c8 <HAL_Init+0x40>)
 80075aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075b0:	2003      	movs	r0, #3
 80075b2:	f000 fd8b 	bl	80080cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80075b6:	2000      	movs	r0, #0
 80075b8:	f000 f808 	bl	80075cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80075bc:	f7fc fca4 	bl	8003f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	40023c00 	.word	0x40023c00

080075cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80075d4:	4b12      	ldr	r3, [pc, #72]	; (8007620 <HAL_InitTick+0x54>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	4b12      	ldr	r3, [pc, #72]	; (8007624 <HAL_InitTick+0x58>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	4619      	mov	r1, r3
 80075de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fda3 	bl	8008136 <HAL_SYSTICK_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e00e      	b.n	8007618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b0f      	cmp	r3, #15
 80075fe:	d80a      	bhi.n	8007616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007600:	2200      	movs	r2, #0
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007608:	f000 fd6b 	bl	80080e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800760c:	4a06      	ldr	r2, [pc, #24]	; (8007628 <HAL_InitTick+0x5c>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	e000      	b.n	8007618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000168 	.word	0x20000168
 8007624:	20000174 	.word	0x20000174
 8007628:	20000170 	.word	0x20000170

0800762c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007630:	4b06      	ldr	r3, [pc, #24]	; (800764c <HAL_IncTick+0x20>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	4b06      	ldr	r3, [pc, #24]	; (8007650 <HAL_IncTick+0x24>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4413      	add	r3, r2
 800763c:	4a04      	ldr	r2, [pc, #16]	; (8007650 <HAL_IncTick+0x24>)
 800763e:	6013      	str	r3, [r2, #0]
}
 8007640:	bf00      	nop
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000174 	.word	0x20000174
 8007650:	2000e1c8 	.word	0x2000e1c8

08007654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  return uwTick;
 8007658:	4b03      	ldr	r3, [pc, #12]	; (8007668 <HAL_GetTick+0x14>)
 800765a:	681b      	ldr	r3, [r3, #0]
}
 800765c:	4618      	mov	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000e1c8 	.word	0x2000e1c8

0800766c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007674:	f7ff ffee 	bl	8007654 <HAL_GetTick>
 8007678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007684:	d005      	beq.n	8007692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007686:	4b09      	ldr	r3, [pc, #36]	; (80076ac <HAL_Delay+0x40>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007692:	bf00      	nop
 8007694:	f7ff ffde 	bl	8007654 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d8f7      	bhi.n	8007694 <HAL_Delay+0x28>
  {
  }
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000174 	.word	0x20000174

080076b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e033      	b.n	800772e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fa fa78 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d118      	bne.n	8007720 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80076f6:	f023 0302 	bic.w	r3, r3, #2
 80076fa:	f043 0202 	orr.w	r2, r3, #2
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa94 	bl	8007c30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	f043 0201 	orr.w	r2, r3, #1
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	641a      	str	r2, [r3, #64]	; 0x40
 800771e:	e001      	b.n	8007724 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_ADC_Start_DMA+0x1e>
 8007752:	2302      	movs	r3, #2
 8007754:	e0cc      	b.n	80078f0 <HAL_ADC_Start_DMA+0x1b8>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d018      	beq.n	800779e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800777c:	4b5e      	ldr	r3, [pc, #376]	; (80078f8 <HAL_ADC_Start_DMA+0x1c0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a5e      	ldr	r2, [pc, #376]	; (80078fc <HAL_ADC_Start_DMA+0x1c4>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	0c9a      	lsrs	r2, r3, #18
 8007788:	4613      	mov	r3, r2
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	4413      	add	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007790:	e002      	b.n	8007798 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	3b01      	subs	r3, #1
 8007796:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f9      	bne.n	8007792 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 80a0 	bne.w	80078ee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077b6:	f023 0301 	bic.w	r3, r3, #1
 80077ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ec:	d106      	bne.n	80077fc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	f023 0206 	bic.w	r2, r3, #6
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	645a      	str	r2, [r3, #68]	; 0x44
 80077fa:	e002      	b.n	8007802 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800780a:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <HAL_ADC_Start_DMA+0x1c8>)
 800780c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	4a3c      	ldr	r2, [pc, #240]	; (8007904 <HAL_ADC_Start_DMA+0x1cc>)
 8007814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	4a3b      	ldr	r2, [pc, #236]	; (8007908 <HAL_ADC_Start_DMA+0x1d0>)
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	4a3a      	ldr	r2, [pc, #232]	; (800790c <HAL_ADC_Start_DMA+0x1d4>)
 8007824:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800782e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800783e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800784e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	334c      	adds	r3, #76	; 0x4c
 800785a:	4619      	mov	r1, r3
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f000 fd24 	bl	80082ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2b00      	cmp	r3, #0
 800786e:	d12a      	bne.n	80078c6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a26      	ldr	r2, [pc, #152]	; (8007910 <HAL_ADC_Start_DMA+0x1d8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d015      	beq.n	80078a6 <HAL_ADC_Start_DMA+0x16e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a25      	ldr	r2, [pc, #148]	; (8007914 <HAL_ADC_Start_DMA+0x1dc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d105      	bne.n	8007890 <HAL_ADC_Start_DMA+0x158>
 8007884:	4b1e      	ldr	r3, [pc, #120]	; (8007900 <HAL_ADC_Start_DMA+0x1c8>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a20      	ldr	r2, [pc, #128]	; (8007918 <HAL_ADC_Start_DMA+0x1e0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d129      	bne.n	80078ee <HAL_ADC_Start_DMA+0x1b6>
 800789a:	4b19      	ldr	r3, [pc, #100]	; (8007900 <HAL_ADC_Start_DMA+0x1c8>)
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f003 031f 	and.w	r3, r3, #31
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d823      	bhi.n	80078ee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11c      	bne.n	80078ee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078c2:	609a      	str	r2, [r3, #8]
 80078c4:	e013      	b.n	80078ee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a11      	ldr	r2, [pc, #68]	; (8007910 <HAL_ADC_Start_DMA+0x1d8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10e      	bne.n	80078ee <HAL_ADC_Start_DMA+0x1b6>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d107      	bne.n	80078ee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078ec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000168 	.word	0x20000168
 80078fc:	431bde83 	.word	0x431bde83
 8007900:	40012300 	.word	0x40012300
 8007904:	08007e29 	.word	0x08007e29
 8007908:	08007ee3 	.word	0x08007ee3
 800790c:	08007eff 	.word	0x08007eff
 8007910:	40012000 	.word	0x40012000
 8007914:	40012100 	.word	0x40012100
 8007918:	40012200 	.word	0x40012200

0800791c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_ADC_Stop_DMA+0x1a>
 8007932:	2302      	movs	r3, #2
 8007934:	e038      	b.n	80079a8 <HAL_ADC_Stop_DMA+0x8c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d120      	bne.n	800799e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800796a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fcf3 	bl	800835c <HAL_DMA_Abort>
 8007976:	4603      	mov	r3, r0
 8007978:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007988:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007992:	f023 0301 	bic.w	r3, r3, #1
 8007996:	f043 0201 	orr.w	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_ADC_ConfigChannel+0x1c>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e105      	b.n	8007c14 <HAL_ADC_ConfigChannel+0x228>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	d925      	bls.n	8007a64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68d9      	ldr	r1, [r3, #12]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	4613      	mov	r3, r2
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3b1e      	subs	r3, #30
 8007a2e:	2207      	movs	r2, #7
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	43da      	mvns	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	400a      	ands	r2, r1
 8007a3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4618      	mov	r0, r3
 8007a50:	4603      	mov	r3, r0
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	4403      	add	r3, r0
 8007a56:	3b1e      	subs	r3, #30
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e022      	b.n	8007aaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6919      	ldr	r1, [r3, #16]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	4613      	mov	r3, r2
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	4413      	add	r3, r2
 8007a78:	2207      	movs	r2, #7
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	43da      	mvns	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	400a      	ands	r2, r1
 8007a86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6919      	ldr	r1, [r3, #16]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4618      	mov	r0, r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4403      	add	r3, r0
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b06      	cmp	r3, #6
 8007ab0:	d824      	bhi.n	8007afc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3b05      	subs	r3, #5
 8007ac4:	221f      	movs	r2, #31
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43da      	mvns	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	400a      	ands	r2, r1
 8007ad2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	3b05      	subs	r3, #5
 8007aee:	fa00 f203 	lsl.w	r2, r0, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	635a      	str	r2, [r3, #52]	; 0x34
 8007afa:	e04c      	b.n	8007b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d824      	bhi.n	8007b4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	3b23      	subs	r3, #35	; 0x23
 8007b16:	221f      	movs	r2, #31
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	43da      	mvns	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	400a      	ands	r2, r1
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	4618      	mov	r0, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3b23      	subs	r3, #35	; 0x23
 8007b40:	fa00 f203 	lsl.w	r2, r0, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8007b4c:	e023      	b.n	8007b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3b41      	subs	r3, #65	; 0x41
 8007b60:	221f      	movs	r2, #31
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	43da      	mvns	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	400a      	ands	r2, r1
 8007b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	3b41      	subs	r3, #65	; 0x41
 8007b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b96:	4b22      	ldr	r3, [pc, #136]	; (8007c20 <HAL_ADC_ConfigChannel+0x234>)
 8007b98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a21      	ldr	r2, [pc, #132]	; (8007c24 <HAL_ADC_ConfigChannel+0x238>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d109      	bne.n	8007bb8 <HAL_ADC_ConfigChannel+0x1cc>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b12      	cmp	r3, #18
 8007baa:	d105      	bne.n	8007bb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <HAL_ADC_ConfigChannel+0x238>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d123      	bne.n	8007c0a <HAL_ADC_ConfigChannel+0x21e>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d003      	beq.n	8007bd2 <HAL_ADC_ConfigChannel+0x1e6>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b11      	cmp	r3, #17
 8007bd0:	d11b      	bne.n	8007c0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d111      	bne.n	8007c0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <HAL_ADC_ConfigChannel+0x23c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a10      	ldr	r2, [pc, #64]	; (8007c2c <HAL_ADC_ConfigChannel+0x240>)
 8007bec:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf0:	0c9a      	lsrs	r2, r3, #18
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007bfc:	e002      	b.n	8007c04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f9      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	40012300 	.word	0x40012300
 8007c24:	40012000 	.word	0x40012000
 8007c28:	20000168 	.word	0x20000168
 8007c2c:	431bde83 	.word	0x431bde83

08007c30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c38:	4b79      	ldr	r3, [pc, #484]	; (8007e20 <ADC_Init+0x1f0>)
 8007c3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	431a      	orrs	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6859      	ldr	r1, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	021a      	lsls	r2, r3, #8
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6859      	ldr	r1, [r3, #4]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6899      	ldr	r1, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	4a58      	ldr	r2, [pc, #352]	; (8007e24 <ADC_Init+0x1f4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d022      	beq.n	8007d0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6899      	ldr	r1, [r3, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6899      	ldr	r1, [r3, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	609a      	str	r2, [r3, #8]
 8007d0c:	e00f      	b.n	8007d2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0202 	bic.w	r2, r2, #2
 8007d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6899      	ldr	r1, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7e1b      	ldrb	r3, [r3, #24]
 8007d48:	005a      	lsls	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01b      	beq.n	8007d94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6859      	ldr	r1, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	3b01      	subs	r3, #1
 8007d88:	035a      	lsls	r2, r3, #13
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	605a      	str	r2, [r3, #4]
 8007d92:	e007      	b.n	8007da4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007da2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	051a      	lsls	r2, r3, #20
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007de6:	025a      	lsls	r2, r3, #9
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6899      	ldr	r1, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	029a      	lsls	r2, r3, #10
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	609a      	str	r2, [r3, #8]
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	40012300 	.word	0x40012300
 8007e24:	0f000001 	.word	0x0f000001

08007e28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d13c      	bne.n	8007ebc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d12b      	bne.n	8007eb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d127      	bne.n	8007eb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d006      	beq.n	8007e80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d119      	bne.n	8007eb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0220 	bic.w	r2, r2, #32
 8007e8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	f043 0201 	orr.w	r2, r3, #1
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7ff fd7b 	bl	80079b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007eba:	e00e      	b.n	8007eda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff fd85 	bl	80079d8 <HAL_ADC_ErrorCallback>
}
 8007ece:	e004      	b.n	8007eda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff fd67 	bl	80079c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2240      	movs	r2, #64	; 0x40
 8007f10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff fd5a 	bl	80079d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <__NVIC_SetPriorityGrouping>:
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <__NVIC_SetPriorityGrouping+0x44>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f48:	4013      	ands	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <__NVIC_SetPriorityGrouping+0x44>)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	60d3      	str	r3, [r2, #12]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	e000ed00 	.word	0xe000ed00

08007f74 <__NVIC_GetPriorityGrouping>:
{
 8007f74:	b480      	push	{r7}
 8007f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <__NVIC_GetPriorityGrouping+0x18>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	0a1b      	lsrs	r3, r3, #8
 8007f7e:	f003 0307 	and.w	r3, r3, #7
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000ed00 	.word	0xe000ed00

08007f90 <__NVIC_EnableIRQ>:
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	db0b      	blt.n	8007fba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	f003 021f 	and.w	r2, r3, #31
 8007fa8:	4907      	ldr	r1, [pc, #28]	; (8007fc8 <__NVIC_EnableIRQ+0x38>)
 8007faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	e000e100 	.word	0xe000e100

08007fcc <__NVIC_SetPriority>:
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	db0a      	blt.n	8007ff6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	490c      	ldr	r1, [pc, #48]	; (8008018 <__NVIC_SetPriority+0x4c>)
 8007fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fea:	0112      	lsls	r2, r2, #4
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	440b      	add	r3, r1
 8007ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ff4:	e00a      	b.n	800800c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	4908      	ldr	r1, [pc, #32]	; (800801c <__NVIC_SetPriority+0x50>)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	3b04      	subs	r3, #4
 8008004:	0112      	lsls	r2, r2, #4
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	440b      	add	r3, r1
 800800a:	761a      	strb	r2, [r3, #24]
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	e000e100 	.word	0xe000e100
 800801c:	e000ed00 	.word	0xe000ed00

08008020 <NVIC_EncodePriority>:
{
 8008020:	b480      	push	{r7}
 8008022:	b089      	sub	sp, #36	; 0x24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f1c3 0307 	rsb	r3, r3, #7
 800803a:	2b04      	cmp	r3, #4
 800803c:	bf28      	it	cs
 800803e:	2304      	movcs	r3, #4
 8008040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	3304      	adds	r3, #4
 8008046:	2b06      	cmp	r3, #6
 8008048:	d902      	bls.n	8008050 <NVIC_EncodePriority+0x30>
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	3b03      	subs	r3, #3
 800804e:	e000      	b.n	8008052 <NVIC_EncodePriority+0x32>
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43da      	mvns	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	401a      	ands	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	43d9      	mvns	r1, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008078:	4313      	orrs	r3, r2
}
 800807a:	4618      	mov	r0, r3
 800807c:	3724      	adds	r7, #36	; 0x24
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <SysTick_Config>:
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3b01      	subs	r3, #1
 8008094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008098:	d301      	bcc.n	800809e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800809a:	2301      	movs	r3, #1
 800809c:	e00f      	b.n	80080be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800809e:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <SysTick_Config+0x40>)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080a6:	210f      	movs	r1, #15
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ac:	f7ff ff8e 	bl	8007fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080b0:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <SysTick_Config+0x40>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080b6:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <SysTick_Config+0x40>)
 80080b8:	2207      	movs	r2, #7
 80080ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	e000e010 	.word	0xe000e010

080080cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff ff29 	bl	8007f2c <__NVIC_SetPriorityGrouping>
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	4603      	mov	r3, r0
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080f4:	f7ff ff3e 	bl	8007f74 <__NVIC_GetPriorityGrouping>
 80080f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	6978      	ldr	r0, [r7, #20]
 8008100:	f7ff ff8e 	bl	8008020 <NVIC_EncodePriority>
 8008104:	4602      	mov	r2, r0
 8008106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff5d 	bl	8007fcc <__NVIC_SetPriority>
}
 8008112:	bf00      	nop
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	4603      	mov	r3, r0
 8008122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ff31 	bl	8007f90 <__NVIC_EnableIRQ>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff ffa2 	bl	8008088 <SysTick_Config>
 8008144:	4603      	mov	r3, r0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800815c:	f7ff fa7a 	bl	8007654 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e099      	b.n	80082a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800818c:	e00f      	b.n	80081ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800818e:	f7ff fa61 	bl	8007654 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b05      	cmp	r3, #5
 800819a:	d908      	bls.n	80081ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2203      	movs	r2, #3
 80081a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e078      	b.n	80082a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e8      	bne.n	800818e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4b38      	ldr	r3, [pc, #224]	; (80082a8 <HAL_DMA_Init+0x158>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	2b04      	cmp	r3, #4
 8008206:	d107      	bne.n	8008218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	4313      	orrs	r3, r2
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b04      	cmp	r3, #4
 8008240:	d117      	bne.n	8008272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb0d 	bl	8008874 <DMA_CheckFifoParam>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d008      	beq.n	8008272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2240      	movs	r2, #64	; 0x40
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800826e:	2301      	movs	r3, #1
 8008270:	e016      	b.n	80082a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fac4 	bl	8008808 <DMA_CalcBaseAndBitshift>
 8008280:	4603      	mov	r3, r0
 8008282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008288:	223f      	movs	r2, #63	; 0x3f
 800828a:	409a      	lsls	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	f010803f 	.word	0xf010803f

080082ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_DMA_Start_IT+0x26>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e040      	b.n	8008354 <HAL_DMA_Start_IT+0xa8>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d12f      	bne.n	8008346 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2202      	movs	r2, #2
 80082ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fa56 	bl	80087ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008304:	223f      	movs	r2, #63	; 0x3f
 8008306:	409a      	lsls	r2, r3
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0216 	orr.w	r2, r2, #22
 800831a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	2b00      	cmp	r3, #0
 8008322:	d007      	beq.n	8008334 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0208 	orr.w	r2, r2, #8
 8008332:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e005      	b.n	8008352 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800834e:	2302      	movs	r3, #2
 8008350:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008368:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800836a:	f7ff f973 	bl	8007654 <HAL_GetTick>
 800836e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d008      	beq.n	800838e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2280      	movs	r2, #128	; 0x80
 8008380:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e052      	b.n	8008434 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0216 	bic.w	r2, r2, #22
 800839c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d103      	bne.n	80083be <HAL_DMA_Abort+0x62>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0208 	bic.w	r2, r2, #8
 80083cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80083de:	e013      	b.n	8008408 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80083e0:	f7ff f938 	bl	8007654 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d90c      	bls.n	8008408 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2203      	movs	r2, #3
 8008400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e015      	b.n	8008434 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e4      	bne.n	80083e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841a:	223f      	movs	r2, #63	; 0x3f
 800841c:	409a      	lsls	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d004      	beq.n	800845a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2280      	movs	r2, #128	; 0x80
 8008454:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e00c      	b.n	8008474 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2205      	movs	r2, #5
 800845e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0201 	bic.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800848c:	4b92      	ldr	r3, [pc, #584]	; (80086d8 <HAL_DMA_IRQHandler+0x258>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a92      	ldr	r2, [pc, #584]	; (80086dc <HAL_DMA_IRQHandler+0x25c>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	0a9b      	lsrs	r3, r3, #10
 8008498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084aa:	2208      	movs	r2, #8
 80084ac:	409a      	lsls	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4013      	ands	r3, r2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01a      	beq.n	80084ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d013      	beq.n	80084ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0204 	bic.w	r2, r2, #4
 80084d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d8:	2208      	movs	r2, #8
 80084da:	409a      	lsls	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e4:	f043 0201 	orr.w	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f0:	2201      	movs	r2, #1
 80084f2:	409a      	lsls	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d012      	beq.n	8008522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00b      	beq.n	8008522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800850e:	2201      	movs	r2, #1
 8008510:	409a      	lsls	r2, r3
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008526:	2204      	movs	r2, #4
 8008528:	409a      	lsls	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008544:	2204      	movs	r2, #4
 8008546:	409a      	lsls	r2, r3
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008550:	f043 0204 	orr.w	r2, r3, #4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855c:	2210      	movs	r2, #16
 800855e:	409a      	lsls	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4013      	ands	r3, r2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d043      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	2b00      	cmp	r3, #0
 8008574:	d03c      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857a:	2210      	movs	r2, #16
 800857c:	409a      	lsls	r2, r3
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d018      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d108      	bne.n	80085b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d024      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
 80085ae:	e01f      	b.n	80085f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
 80085c0:	e016      	b.n	80085f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d107      	bne.n	80085e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0208 	bic.w	r2, r2, #8
 80085de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f4:	2220      	movs	r2, #32
 80085f6:	409a      	lsls	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 808e 	beq.w	800871e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0310 	and.w	r3, r3, #16
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 8086 	beq.w	800871e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008616:	2220      	movs	r2, #32
 8008618:	409a      	lsls	r2, r3
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b05      	cmp	r3, #5
 8008628:	d136      	bne.n	8008698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0216 	bic.w	r2, r2, #22
 8008638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695a      	ldr	r2, [r3, #20]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <HAL_DMA_IRQHandler+0x1da>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008656:	2b00      	cmp	r3, #0
 8008658:	d007      	beq.n	800866a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0208 	bic.w	r2, r2, #8
 8008668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800866e:	223f      	movs	r2, #63	; 0x3f
 8008670:	409a      	lsls	r2, r3
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868a:	2b00      	cmp	r3, #0
 800868c:	d07d      	beq.n	800878a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
        }
        return;
 8008696:	e078      	b.n	800878a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01c      	beq.n	80086e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d108      	bne.n	80086c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d030      	beq.n	800871e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	4798      	blx	r3
 80086c4:	e02b      	b.n	800871e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d027      	beq.n	800871e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
 80086d6:	e022      	b.n	800871e <HAL_DMA_IRQHandler+0x29e>
 80086d8:	20000168 	.word	0x20000168
 80086dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10f      	bne.n	800870e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0210 	bic.w	r2, r2, #16
 80086fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008722:	2b00      	cmp	r3, #0
 8008724:	d032      	beq.n	800878c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d022      	beq.n	8008778 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2205      	movs	r2, #5
 8008736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0201 	bic.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3301      	adds	r3, #1
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	429a      	cmp	r2, r3
 8008754:	d307      	bcc.n	8008766 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f2      	bne.n	800874a <HAL_DMA_IRQHandler+0x2ca>
 8008764:	e000      	b.n	8008768 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008766:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	4798      	blx	r3
 8008788:	e000      	b.n	800878c <HAL_DMA_IRQHandler+0x30c>
        return;
 800878a:	bf00      	nop
    }
  }
}
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop

08008794 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	2b40      	cmp	r3, #64	; 0x40
 80087d8:	d108      	bne.n	80087ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80087ea:	e007      	b.n	80087fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]
}
 80087fc:	bf00      	nop
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	3b10      	subs	r3, #16
 8008818:	4a14      	ldr	r2, [pc, #80]	; (800886c <DMA_CalcBaseAndBitshift+0x64>)
 800881a:	fba2 2303 	umull	r2, r3, r2, r3
 800881e:	091b      	lsrs	r3, r3, #4
 8008820:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008822:	4a13      	ldr	r2, [pc, #76]	; (8008870 <DMA_CalcBaseAndBitshift+0x68>)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4413      	add	r3, r2
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b03      	cmp	r3, #3
 8008834:	d909      	bls.n	800884a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800883e:	f023 0303 	bic.w	r3, r3, #3
 8008842:	1d1a      	adds	r2, r3, #4
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	659a      	str	r2, [r3, #88]	; 0x58
 8008848:	e007      	b.n	800885a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	aaaaaaab 	.word	0xaaaaaaab
 8008870:	08016a98 	.word	0x08016a98

08008874 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d11f      	bne.n	80088ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b03      	cmp	r3, #3
 8008892:	d855      	bhi.n	8008940 <DMA_CheckFifoParam+0xcc>
 8008894:	a201      	add	r2, pc, #4	; (adr r2, 800889c <DMA_CheckFifoParam+0x28>)
 8008896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	080088ad 	.word	0x080088ad
 80088a0:	080088bf 	.word	0x080088bf
 80088a4:	080088ad 	.word	0x080088ad
 80088a8:	08008941 	.word	0x08008941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d045      	beq.n	8008944 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088bc:	e042      	b.n	8008944 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088c6:	d13f      	bne.n	8008948 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088cc:	e03c      	b.n	8008948 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d6:	d121      	bne.n	800891c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d836      	bhi.n	800894c <DMA_CheckFifoParam+0xd8>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <DMA_CheckFifoParam+0x70>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	080088fb 	.word	0x080088fb
 80088ec:	080088f5 	.word	0x080088f5
 80088f0:	0800890d 	.word	0x0800890d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
      break;
 80088f8:	e02f      	b.n	800895a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d024      	beq.n	8008950 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800890a:	e021      	b.n	8008950 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008914:	d11e      	bne.n	8008954 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800891a:	e01b      	b.n	8008954 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d902      	bls.n	8008928 <DMA_CheckFifoParam+0xb4>
 8008922:	2b03      	cmp	r3, #3
 8008924:	d003      	beq.n	800892e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008926:	e018      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]
      break;
 800892c:	e015      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00e      	beq.n	8008958 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	73fb      	strb	r3, [r7, #15]
      break;
 800893e:	e00b      	b.n	8008958 <DMA_CheckFifoParam+0xe4>
      break;
 8008940:	bf00      	nop
 8008942:	e00a      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      break;
 8008944:	bf00      	nop
 8008946:	e008      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      break;
 8008948:	bf00      	nop
 800894a:	e006      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      break;
 800894c:	bf00      	nop
 800894e:	e004      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      break;
 8008950:	bf00      	nop
 8008952:	e002      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      break;   
 8008954:	bf00      	nop
 8008956:	e000      	b.n	800895a <DMA_CheckFifoParam+0xe6>
      break;
 8008958:	bf00      	nop
    }
  } 
  
  return status; 
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008968:	b480      	push	{r7}
 800896a:	b089      	sub	sp, #36	; 0x24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008976:	2300      	movs	r3, #0
 8008978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800897a:	2300      	movs	r3, #0
 800897c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	e16b      	b.n	8008c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008984:	2201      	movs	r2, #1
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	4013      	ands	r3, r2
 8008996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	429a      	cmp	r2, r3
 800899e:	f040 815a 	bne.w	8008c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d00b      	beq.n	80089c2 <HAL_GPIO_Init+0x5a>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d007      	beq.n	80089c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089b6:	2b11      	cmp	r3, #17
 80089b8:	d003      	beq.n	80089c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2b12      	cmp	r3, #18
 80089c0:	d130      	bne.n	8008a24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	2203      	movs	r2, #3
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	43db      	mvns	r3, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4013      	ands	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80089f8:	2201      	movs	r2, #1
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	43db      	mvns	r3, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	091b      	lsrs	r3, r3, #4
 8008a0e:	f003 0201 	and.w	r2, r3, #1
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	fa02 f303 	lsl.w	r3, r2, r3
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	2203      	movs	r2, #3
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	43db      	mvns	r3, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	fa02 f303 	lsl.w	r3, r2, r3
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d003      	beq.n	8008a64 <HAL_GPIO_Init+0xfc>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	2b12      	cmp	r3, #18
 8008a62:	d123      	bne.n	8008aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	08da      	lsrs	r2, r3, #3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3208      	adds	r2, #8
 8008a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	220f      	movs	r2, #15
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	43db      	mvns	r3, r3
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	4013      	ands	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	fa02 f303 	lsl.w	r3, r2, r3
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	08da      	lsrs	r2, r3, #3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3208      	adds	r2, #8
 8008aa6:	69b9      	ldr	r1, [r7, #24]
 8008aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	2203      	movs	r2, #3
 8008ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8008abc:	43db      	mvns	r3, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f003 0203 	and.w	r2, r3, #3
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 80b4 	beq.w	8008c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	4b5f      	ldr	r3, [pc, #380]	; (8008c70 <HAL_GPIO_Init+0x308>)
 8008af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af6:	4a5e      	ldr	r2, [pc, #376]	; (8008c70 <HAL_GPIO_Init+0x308>)
 8008af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008afc:	6453      	str	r3, [r2, #68]	; 0x44
 8008afe:	4b5c      	ldr	r3, [pc, #368]	; (8008c70 <HAL_GPIO_Init+0x308>)
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b0a:	4a5a      	ldr	r2, [pc, #360]	; (8008c74 <HAL_GPIO_Init+0x30c>)
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	089b      	lsrs	r3, r3, #2
 8008b10:	3302      	adds	r3, #2
 8008b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	220f      	movs	r2, #15
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	43db      	mvns	r3, r3
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a51      	ldr	r2, [pc, #324]	; (8008c78 <HAL_GPIO_Init+0x310>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d02b      	beq.n	8008b8e <HAL_GPIO_Init+0x226>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a50      	ldr	r2, [pc, #320]	; (8008c7c <HAL_GPIO_Init+0x314>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d025      	beq.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a4f      	ldr	r2, [pc, #316]	; (8008c80 <HAL_GPIO_Init+0x318>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d01f      	beq.n	8008b86 <HAL_GPIO_Init+0x21e>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a4e      	ldr	r2, [pc, #312]	; (8008c84 <HAL_GPIO_Init+0x31c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d019      	beq.n	8008b82 <HAL_GPIO_Init+0x21a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a4d      	ldr	r2, [pc, #308]	; (8008c88 <HAL_GPIO_Init+0x320>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d013      	beq.n	8008b7e <HAL_GPIO_Init+0x216>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a4c      	ldr	r2, [pc, #304]	; (8008c8c <HAL_GPIO_Init+0x324>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00d      	beq.n	8008b7a <HAL_GPIO_Init+0x212>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a4b      	ldr	r2, [pc, #300]	; (8008c90 <HAL_GPIO_Init+0x328>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d007      	beq.n	8008b76 <HAL_GPIO_Init+0x20e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a4a      	ldr	r2, [pc, #296]	; (8008c94 <HAL_GPIO_Init+0x32c>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d101      	bne.n	8008b72 <HAL_GPIO_Init+0x20a>
 8008b6e:	2307      	movs	r3, #7
 8008b70:	e00e      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b72:	2308      	movs	r3, #8
 8008b74:	e00c      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b76:	2306      	movs	r3, #6
 8008b78:	e00a      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b7a:	2305      	movs	r3, #5
 8008b7c:	e008      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b7e:	2304      	movs	r3, #4
 8008b80:	e006      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b82:	2303      	movs	r3, #3
 8008b84:	e004      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e002      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e000      	b.n	8008b90 <HAL_GPIO_Init+0x228>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	69fa      	ldr	r2, [r7, #28]
 8008b92:	f002 0203 	and.w	r2, r2, #3
 8008b96:	0092      	lsls	r2, r2, #2
 8008b98:	4093      	lsls	r3, r2
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ba0:	4934      	ldr	r1, [pc, #208]	; (8008c74 <HAL_GPIO_Init+0x30c>)
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	089b      	lsrs	r3, r3, #2
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008bae:	4b3a      	ldr	r3, [pc, #232]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	43db      	mvns	r3, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008bd2:	4a31      	ldr	r2, [pc, #196]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008bd8:	4b2f      	ldr	r3, [pc, #188]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	43db      	mvns	r3, r3
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	4013      	ands	r3, r2
 8008be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008bfc:	4a26      	ldr	r2, [pc, #152]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c02:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c26:	4a1c      	ldr	r2, [pc, #112]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c2c:	4b1a      	ldr	r3, [pc, #104]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	43db      	mvns	r3, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c50:	4a11      	ldr	r2, [pc, #68]	; (8008c98 <HAL_GPIO_Init+0x330>)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b0f      	cmp	r3, #15
 8008c60:	f67f ae90 	bls.w	8008984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008c64:	bf00      	nop
 8008c66:	3724      	adds	r7, #36	; 0x24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	40023800 	.word	0x40023800
 8008c74:	40013800 	.word	0x40013800
 8008c78:	40020000 	.word	0x40020000
 8008c7c:	40020400 	.word	0x40020400
 8008c80:	40020800 	.word	0x40020800
 8008c84:	40020c00 	.word	0x40020c00
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	40021400 	.word	0x40021400
 8008c90:	40021800 	.word	0x40021800
 8008c94:	40021c00 	.word	0x40021c00
 8008c98:	40013c00 	.word	0x40013c00

08008c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	887b      	ldrh	r3, [r7, #2]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
 8008cb8:	e001      	b.n	8008cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008cdc:	787b      	ldrb	r3, [r7, #1]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ce2:	887a      	ldrh	r2, [r7, #2]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ce8:	e003      	b.n	8008cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	041a      	lsls	r2, r3, #16
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	619a      	str	r2, [r3, #24]
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695a      	ldr	r2, [r3, #20]
 8008d0e:	887b      	ldrh	r3, [r7, #2]
 8008d10:	401a      	ands	r2, r3
 8008d12:	887b      	ldrh	r3, [r7, #2]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d104      	bne.n	8008d22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d18:	887b      	ldrh	r3, [r7, #2]
 8008d1a:	041a      	lsls	r2, r3, #16
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008d20:	e002      	b.n	8008d28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008d22:	887a      	ldrh	r2, [r7, #2]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	619a      	str	r2, [r3, #24]
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e11f      	b.n	8008f86 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7f9 fbf0 	bl	8002540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2224      	movs	r2, #36	; 0x24
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0201 	bic.w	r2, r2, #1
 8008d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008d98:	f001 fca4 	bl	800a6e4 <HAL_RCC_GetPCLK1Freq>
 8008d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	4a7b      	ldr	r2, [pc, #492]	; (8008f90 <HAL_I2C_Init+0x25c>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d807      	bhi.n	8008db8 <HAL_I2C_Init+0x84>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4a7a      	ldr	r2, [pc, #488]	; (8008f94 <HAL_I2C_Init+0x260>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	bf94      	ite	ls
 8008db0:	2301      	movls	r3, #1
 8008db2:	2300      	movhi	r3, #0
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	e006      	b.n	8008dc6 <HAL_I2C_Init+0x92>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4a77      	ldr	r2, [pc, #476]	; (8008f98 <HAL_I2C_Init+0x264>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	bf94      	ite	ls
 8008dc0:	2301      	movls	r3, #1
 8008dc2:	2300      	movhi	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e0db      	b.n	8008f86 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4a72      	ldr	r2, [pc, #456]	; (8008f9c <HAL_I2C_Init+0x268>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	0c9b      	lsrs	r3, r3, #18
 8008dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	4a64      	ldr	r2, [pc, #400]	; (8008f90 <HAL_I2C_Init+0x25c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d802      	bhi.n	8008e08 <HAL_I2C_Init+0xd4>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	3301      	adds	r3, #1
 8008e06:	e009      	b.n	8008e1c <HAL_I2C_Init+0xe8>
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e0e:	fb02 f303 	mul.w	r3, r2, r3
 8008e12:	4a63      	ldr	r2, [pc, #396]	; (8008fa0 <HAL_I2C_Init+0x26c>)
 8008e14:	fba2 2303 	umull	r2, r3, r2, r3
 8008e18:	099b      	lsrs	r3, r3, #6
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6812      	ldr	r2, [r2, #0]
 8008e20:	430b      	orrs	r3, r1
 8008e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	4956      	ldr	r1, [pc, #344]	; (8008f90 <HAL_I2C_Init+0x25c>)
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	d80d      	bhi.n	8008e58 <HAL_I2C_Init+0x124>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	1e59      	subs	r1, r3, #1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	bf38      	it	cc
 8008e54:	2304      	movcc	r3, #4
 8008e56:	e04f      	b.n	8008ef8 <HAL_I2C_Init+0x1c4>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d111      	bne.n	8008e84 <HAL_I2C_Init+0x150>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	1e58      	subs	r0, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6859      	ldr	r1, [r3, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	440b      	add	r3, r1
 8008e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e72:	3301      	adds	r3, #1
 8008e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	bf0c      	ite	eq
 8008e7c:	2301      	moveq	r3, #1
 8008e7e:	2300      	movne	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	e012      	b.n	8008eaa <HAL_I2C_Init+0x176>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	1e58      	subs	r0, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6859      	ldr	r1, [r3, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	0099      	lsls	r1, r3, #2
 8008e94:	440b      	add	r3, r1
 8008e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2301      	moveq	r3, #1
 8008ea6:	2300      	movne	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_I2C_Init+0x17e>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e022      	b.n	8008ef8 <HAL_I2C_Init+0x1c4>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10e      	bne.n	8008ed8 <HAL_I2C_Init+0x1a4>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	1e58      	subs	r0, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6859      	ldr	r1, [r3, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	440b      	add	r3, r1
 8008ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ecc:	3301      	adds	r3, #1
 8008ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed6:	e00f      	b.n	8008ef8 <HAL_I2C_Init+0x1c4>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	1e58      	subs	r0, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6859      	ldr	r1, [r3, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	0099      	lsls	r1, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8008eee:	3301      	adds	r3, #1
 8008ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	6809      	ldr	r1, [r1, #0]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	69da      	ldr	r2, [r3, #28]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	6911      	ldr	r1, [r2, #16]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	68d2      	ldr	r2, [r2, #12]
 8008f32:	4311      	orrs	r1, r2
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6812      	ldr	r2, [r2, #0]
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	695a      	ldr	r2, [r3, #20]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	000186a0 	.word	0x000186a0
 8008f94:	001e847f 	.word	0x001e847f
 8008f98:	003d08ff 	.word	0x003d08ff
 8008f9c:	431bde83 	.word	0x431bde83
 8008fa0:	10624dd3 	.word	0x10624dd3

08008fa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	817b      	strh	r3, [r7, #10]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fb8:	f7fe fb4c 	bl	8007654 <HAL_GetTick>
 8008fbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	f040 80e0 	bne.w	800918c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	2319      	movs	r3, #25
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	4970      	ldr	r1, [pc, #448]	; (8009198 <HAL_I2C_Master_Transmit+0x1f4>)
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 fd92 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	e0d3      	b.n	800918e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_I2C_Master_Transmit+0x50>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e0cc      	b.n	800918e <HAL_I2C_Master_Transmit+0x1ea>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b01      	cmp	r3, #1
 8009008:	d007      	beq.n	800901a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0201 	orr.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009028:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2221      	movs	r2, #33	; 0x21
 800902e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2210      	movs	r2, #16
 8009036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	893a      	ldrh	r2, [r7, #8]
 800904a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4a50      	ldr	r2, [pc, #320]	; (800919c <HAL_I2C_Master_Transmit+0x1f8>)
 800905a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800905c:	8979      	ldrh	r1, [r7, #10]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	6a3a      	ldr	r2, [r7, #32]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fbfe 	bl	8009864 <I2C_MasterRequestWrite>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e08d      	b.n	800918e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009088:	e066      	b.n	8009158 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	6a39      	ldr	r1, [r7, #32]
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fe0c 	bl	8009cac <I2C_WaitOnTXEFlagUntilTimeout>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00d      	beq.n	80090b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d107      	bne.n	80090b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e06b      	b.n	800918e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	781a      	ldrb	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090de:	3b01      	subs	r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d11b      	bne.n	800912c <HAL_I2C_Master_Transmit+0x188>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d017      	beq.n	800912c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009124:	3b01      	subs	r3, #1
 8009126:	b29a      	uxth	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	6a39      	ldr	r1, [r7, #32]
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fdfc 	bl	8009d2e <I2C_WaitOnBTFFlagUntilTimeout>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00d      	beq.n	8009158 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009140:	2b04      	cmp	r3, #4
 8009142:	d107      	bne.n	8009154 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009152:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e01a      	b.n	800918e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800915c:	2b00      	cmp	r3, #0
 800915e:	d194      	bne.n	800908a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800916e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2220      	movs	r2, #32
 8009174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	e000      	b.n	800918e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800918c:	2302      	movs	r3, #2
  }
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	00100002 	.word	0x00100002
 800919c:	ffff0000 	.word	0xffff0000

080091a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08c      	sub	sp, #48	; 0x30
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	607a      	str	r2, [r7, #4]
 80091aa:	461a      	mov	r2, r3
 80091ac:	460b      	mov	r3, r1
 80091ae:	817b      	strh	r3, [r7, #10]
 80091b0:	4613      	mov	r3, r2
 80091b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091b4:	f7fe fa4e 	bl	8007654 <HAL_GetTick>
 80091b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b20      	cmp	r3, #32
 80091c4:	f040 820b 	bne.w	80095de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2319      	movs	r3, #25
 80091ce:	2201      	movs	r2, #1
 80091d0:	497c      	ldr	r1, [pc, #496]	; (80093c4 <HAL_I2C_Master_Receive+0x224>)
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 fc94 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80091de:	2302      	movs	r3, #2
 80091e0:	e1fe      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_I2C_Master_Receive+0x50>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e1f7      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b01      	cmp	r3, #1
 8009204:	d007      	beq.n	8009216 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f042 0201 	orr.w	r2, r2, #1
 8009214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009224:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2222      	movs	r2, #34	; 0x22
 800922a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2210      	movs	r2, #16
 8009232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	893a      	ldrh	r2, [r7, #8]
 8009246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4a5c      	ldr	r2, [pc, #368]	; (80093c8 <HAL_I2C_Master_Receive+0x228>)
 8009256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009258:	8979      	ldrh	r1, [r7, #10]
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 fb82 	bl	8009968 <I2C_MasterRequestRead>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e1b8      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009272:	2b00      	cmp	r3, #0
 8009274:	d113      	bne.n	800929e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009276:	2300      	movs	r3, #0
 8009278:	623b      	str	r3, [r7, #32]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	623b      	str	r3, [r7, #32]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	623b      	str	r3, [r7, #32]
 800928a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	e18c      	b.n	80095b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d11b      	bne.n	80092de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	61fb      	str	r3, [r7, #28]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	e16c      	b.n	80095b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d11b      	bne.n	800931e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009306:	2300      	movs	r3, #0
 8009308:	61bb      	str	r3, [r7, #24]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	61bb      	str	r3, [r7, #24]
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	e14c      	b.n	80095b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800932c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800932e:	2300      	movs	r3, #0
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	617b      	str	r3, [r7, #20]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009344:	e138      	b.n	80095b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934a:	2b03      	cmp	r3, #3
 800934c:	f200 80f1 	bhi.w	8009532 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009354:	2b01      	cmp	r3, #1
 8009356:	d123      	bne.n	80093a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 fd27 	bl	8009db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e139      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691a      	ldr	r2, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800939e:	e10b      	b.n	80095b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d14e      	bne.n	8009446 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	2200      	movs	r2, #0
 80093b0:	4906      	ldr	r1, [pc, #24]	; (80093cc <HAL_I2C_Master_Receive+0x22c>)
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 fba4 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d008      	beq.n	80093d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e10e      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
 80093c2:	bf00      	nop
 80093c4:	00100002 	.word	0x00100002
 80093c8:	ffff0000 	.word	0xffff0000
 80093cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691a      	ldr	r2, [r3, #16]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	691a      	ldr	r2, [r3, #16]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	b2d2      	uxtb	r2, r2
 800941e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943a:	b29b      	uxth	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	b29a      	uxth	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009444:	e0b8      	b.n	80095b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	2200      	movs	r2, #0
 800944e:	4966      	ldr	r1, [pc, #408]	; (80095e8 <HAL_I2C_Master_Receive+0x448>)
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fb55 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e0bf      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800946e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	b2d2      	uxtb	r2, r2
 800947c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	2200      	movs	r2, #0
 80094aa:	494f      	ldr	r1, [pc, #316]	; (80095e8 <HAL_I2C_Master_Receive+0x448>)
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 fb27 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e091      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	691a      	ldr	r2, [r3, #16]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	3b01      	subs	r3, #1
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	b2d2      	uxtb	r2, r2
 800950a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951a:	3b01      	subs	r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009526:	b29b      	uxth	r3, r3
 8009528:	3b01      	subs	r3, #1
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009530:	e042      	b.n	80095b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fc3a 	bl	8009db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e04c      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	b2d2      	uxtb	r2, r2
 8009552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	1c5a      	adds	r2, r3, #1
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956e:	b29b      	uxth	r3, r3
 8009570:	3b01      	subs	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	f003 0304 	and.w	r3, r3, #4
 8009582:	2b04      	cmp	r3, #4
 8009584:	d118      	bne.n	80095b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f47f aec2 	bne.w	8009346 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	e000      	b.n	80095e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80095de:	2302      	movs	r3, #2
  }
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3728      	adds	r7, #40	; 0x28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	00010004 	.word	0x00010004

080095ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	460b      	mov	r3, r1
 80095fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80095fc:	f7fe f82a 	bl	8007654 <HAL_GetTick>
 8009600:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009602:	2301      	movs	r3, #1
 8009604:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b20      	cmp	r3, #32
 8009610:	f040 8110 	bne.w	8009834 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	2319      	movs	r3, #25
 800961a:	2201      	movs	r2, #1
 800961c:	4988      	ldr	r1, [pc, #544]	; (8009840 <HAL_I2C_IsDeviceReady+0x254>)
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fa6e 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800962a:	2302      	movs	r3, #2
 800962c:	e103      	b.n	8009836 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_I2C_IsDeviceReady+0x50>
 8009638:	2302      	movs	r3, #2
 800963a:	e0fc      	b.n	8009836 <HAL_I2C_IsDeviceReady+0x24a>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b01      	cmp	r3, #1
 8009650:	d007      	beq.n	8009662 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0201 	orr.w	r2, r2, #1
 8009660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009670:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2224      	movs	r2, #36	; 0x24
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4a70      	ldr	r2, [pc, #448]	; (8009844 <HAL_I2C_IsDeviceReady+0x258>)
 8009684:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009694:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2200      	movs	r2, #0
 800969e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 fa2c 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00c      	beq.n	80096c8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096c2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e0b6      	b.n	8009836 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80096c8:	897b      	ldrh	r3, [r7, #10]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80096d6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80096d8:	f7fd ffbc 	bl	8007654 <HAL_GetTick>
 80096dc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	bf0c      	ite	eq
 80096ec:	2301      	moveq	r3, #1
 80096ee:	2300      	movne	r3, #0
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009702:	bf0c      	ite	eq
 8009704:	2301      	moveq	r3, #1
 8009706:	2300      	movne	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800970c:	e025      	b.n	800975a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800970e:	f7fd ffa1 	bl	8007654 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d302      	bcc.n	8009724 <HAL_I2C_IsDeviceReady+0x138>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	22a0      	movs	r2, #160	; 0xa0
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b02      	cmp	r3, #2
 8009738:	bf0c      	ite	eq
 800973a:	2301      	moveq	r3, #1
 800973c:	2300      	movne	r3, #0
 800973e:	b2db      	uxtb	r3, r3
 8009740:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800974c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009750:	bf0c      	ite	eq
 8009752:	2301      	moveq	r3, #1
 8009754:	2300      	movne	r3, #0
 8009756:	b2db      	uxtb	r3, r3
 8009758:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2ba0      	cmp	r3, #160	; 0xa0
 8009764:	d005      	beq.n	8009772 <HAL_I2C_IsDeviceReady+0x186>
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <HAL_I2C_IsDeviceReady+0x186>
 800976c:	7dbb      	ldrb	r3, [r7, #22]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0cd      	beq.n	800970e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b02      	cmp	r3, #2
 8009786:	d129      	bne.n	80097dc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009796:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	613b      	str	r3, [r7, #16]
 80097ac:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	2319      	movs	r3, #25
 80097b4:	2201      	movs	r2, #1
 80097b6:	4922      	ldr	r1, [pc, #136]	; (8009840 <HAL_I2C_IsDeviceReady+0x254>)
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f9a1 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e036      	b.n	8009836 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	e02c      	b.n	8009836 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ea:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80097f4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	2319      	movs	r3, #25
 80097fc:	2201      	movs	r2, #1
 80097fe:	4910      	ldr	r1, [pc, #64]	; (8009840 <HAL_I2C_IsDeviceReady+0x254>)
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 f97d 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e012      	b.n	8009836 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	3301      	adds	r3, #1
 8009814:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	f4ff af33 	bcc.w	8009686 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2220      	movs	r2, #32
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e000      	b.n	8009836 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8009834:	2302      	movs	r3, #2
  }
}
 8009836:	4618      	mov	r0, r3
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	00100002 	.word	0x00100002
 8009844:	ffff0000 	.word	0xffff0000

08009848 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009856:	b2db      	uxtb	r3, r3
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af02      	add	r7, sp, #8
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	607a      	str	r2, [r7, #4]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	460b      	mov	r3, r1
 8009872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b08      	cmp	r3, #8
 800987e:	d006      	beq.n	800988e <I2C_MasterRequestWrite+0x2a>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d003      	beq.n	800988e <I2C_MasterRequestWrite+0x2a>
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800988c:	d108      	bne.n	80098a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	e00b      	b.n	80098b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	2b12      	cmp	r3, #18
 80098a6:	d107      	bne.n	80098b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 f91b 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00c      	beq.n	80098ea <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e035      	b.n	8009956 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098f2:	d108      	bne.n	8009906 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098f4:	897b      	ldrh	r3, [r7, #10]
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009902:	611a      	str	r2, [r3, #16]
 8009904:	e01b      	b.n	800993e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009906:	897b      	ldrh	r3, [r7, #10]
 8009908:	11db      	asrs	r3, r3, #7
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0306 	and.w	r3, r3, #6
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f063 030f 	orn	r3, r3, #15
 8009916:	b2da      	uxtb	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	490f      	ldr	r1, [pc, #60]	; (8009960 <I2C_MasterRequestWrite+0xfc>)
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f942 	bl	8009bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e010      	b.n	8009956 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009934:	897b      	ldrh	r3, [r7, #10]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	4908      	ldr	r1, [pc, #32]	; (8009964 <I2C_MasterRequestWrite+0x100>)
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f932 	bl	8009bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e000      	b.n	8009956 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	00010008 	.word	0x00010008
 8009964:	00010002 	.word	0x00010002

08009968 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af02      	add	r7, sp, #8
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	460b      	mov	r3, r1
 8009976:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800998c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b08      	cmp	r3, #8
 8009992:	d006      	beq.n	80099a2 <I2C_MasterRequestRead+0x3a>
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d003      	beq.n	80099a2 <I2C_MasterRequestRead+0x3a>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099a0:	d108      	bne.n	80099b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	e00b      	b.n	80099cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b8:	2b11      	cmp	r3, #17
 80099ba:	d107      	bne.n	80099cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f891 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00c      	beq.n	80099fe <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e078      	b.n	8009af0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a06:	d108      	bne.n	8009a1a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009a08:	897b      	ldrh	r3, [r7, #10]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f043 0301 	orr.w	r3, r3, #1
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	611a      	str	r2, [r3, #16]
 8009a18:	e05e      	b.n	8009ad8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a1a:	897b      	ldrh	r3, [r7, #10]
 8009a1c:	11db      	asrs	r3, r3, #7
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 0306 	and.w	r3, r3, #6
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f063 030f 	orn	r3, r3, #15
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4930      	ldr	r1, [pc, #192]	; (8009af8 <I2C_MasterRequestRead+0x190>)
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f8b8 	bl	8009bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e053      	b.n	8009af0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a48:	897b      	ldrh	r3, [r7, #10]
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	4929      	ldr	r1, [pc, #164]	; (8009afc <I2C_MasterRequestRead+0x194>)
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f8a8 	bl	8009bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e043      	b.n	8009af0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a68:	2300      	movs	r3, #0
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a8c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f830 	bl	8009b00 <I2C_WaitOnFlagUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00c      	beq.n	8009ac0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d003      	beq.n	8009abc <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e017      	b.n	8009af0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009ac0:	897b      	ldrh	r3, [r7, #10]
 8009ac2:	11db      	asrs	r3, r3, #7
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	f003 0306 	and.w	r3, r3, #6
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f063 030e 	orn	r3, r3, #14
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	4907      	ldr	r1, [pc, #28]	; (8009afc <I2C_MasterRequestRead+0x194>)
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 f865 	bl	8009bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	00010008 	.word	0x00010008
 8009afc:	00010002 	.word	0x00010002

08009b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b10:	e025      	b.n	8009b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b18:	d021      	beq.n	8009b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1a:	f7fd fd9b 	bl	8007654 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d302      	bcc.n	8009b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d116      	bne.n	8009b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	f043 0220 	orr.w	r2, r3, #32
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e023      	b.n	8009ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	0c1b      	lsrs	r3, r3, #16
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d10d      	bne.n	8009b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	43da      	mvns	r2, r3
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	4013      	ands	r3, r2
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bf0c      	ite	eq
 8009b7a:	2301      	moveq	r3, #1
 8009b7c:	2300      	movne	r3, #0
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	461a      	mov	r2, r3
 8009b82:	e00c      	b.n	8009b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	43da      	mvns	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	bf0c      	ite	eq
 8009b96:	2301      	moveq	r3, #1
 8009b98:	2300      	movne	r3, #0
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d0b6      	beq.n	8009b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
 8009bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009bbc:	e051      	b.n	8009c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bcc:	d123      	bne.n	8009c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	f043 0204 	orr.w	r2, r3, #4
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e046      	b.n	8009ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c1c:	d021      	beq.n	8009c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c1e:	f7fd fd19 	bl	8007654 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d302      	bcc.n	8009c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d116      	bne.n	8009c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	f043 0220 	orr.w	r2, r3, #32
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e020      	b.n	8009ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	0c1b      	lsrs	r3, r3, #16
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d10c      	bne.n	8009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	43da      	mvns	r2, r3
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	4013      	ands	r3, r2
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	bf14      	ite	ne
 8009c7e:	2301      	movne	r3, #1
 8009c80:	2300      	moveq	r3, #0
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	e00b      	b.n	8009c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	43da      	mvns	r2, r3
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	4013      	ands	r3, r2
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bf14      	ite	ne
 8009c98:	2301      	movne	r3, #1
 8009c9a:	2300      	moveq	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d18d      	bne.n	8009bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cb8:	e02d      	b.n	8009d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 f8ce 	bl	8009e5c <I2C_IsAcknowledgeFailed>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e02d      	b.n	8009d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd0:	d021      	beq.n	8009d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd2:	f7fd fcbf 	bl	8007654 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d116      	bne.n	8009d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	f043 0220 	orr.w	r2, r3, #32
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e007      	b.n	8009d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d20:	2b80      	cmp	r3, #128	; 0x80
 8009d22:	d1ca      	bne.n	8009cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d3a:	e02d      	b.n	8009d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f88d 	bl	8009e5c <I2C_IsAcknowledgeFailed>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e02d      	b.n	8009da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d52:	d021      	beq.n	8009d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d54:	f7fd fc7e 	bl	8007654 <HAL_GetTick>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d302      	bcc.n	8009d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d116      	bne.n	8009d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d84:	f043 0220 	orr.w	r2, r3, #32
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e007      	b.n	8009da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	f003 0304 	and.w	r3, r3, #4
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	d1ca      	bne.n	8009d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dbc:	e042      	b.n	8009e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d119      	bne.n	8009e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f06f 0210 	mvn.w	r2, #16
 8009dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e029      	b.n	8009e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e00:	f7fd fc28 	bl	8007654 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d302      	bcc.n	8009e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d116      	bne.n	8009e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e30:	f043 0220 	orr.w	r2, r3, #32
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e007      	b.n	8009e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4e:	2b40      	cmp	r3, #64	; 0x40
 8009e50:	d1b5      	bne.n	8009dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e72:	d11b      	bne.n	8009eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	f043 0204 	orr.w	r2, r3, #4
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e000      	b.n	8009eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e25b      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d075      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009eda:	4ba3      	ldr	r3, [pc, #652]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 030c 	and.w	r3, r3, #12
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d00c      	beq.n	8009f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ee6:	4ba0      	ldr	r3, [pc, #640]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009eee:	2b08      	cmp	r3, #8
 8009ef0:	d112      	bne.n	8009f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ef2:	4b9d      	ldr	r3, [pc, #628]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009efe:	d10b      	bne.n	8009f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f00:	4b99      	ldr	r3, [pc, #612]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d05b      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x108>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d157      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e236      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f20:	d106      	bne.n	8009f30 <HAL_RCC_OscConfig+0x74>
 8009f22:	4b91      	ldr	r3, [pc, #580]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a90      	ldr	r2, [pc, #576]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	e01d      	b.n	8009f6c <HAL_RCC_OscConfig+0xb0>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f38:	d10c      	bne.n	8009f54 <HAL_RCC_OscConfig+0x98>
 8009f3a:	4b8b      	ldr	r3, [pc, #556]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a8a      	ldr	r2, [pc, #552]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	4b88      	ldr	r3, [pc, #544]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a87      	ldr	r2, [pc, #540]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	e00b      	b.n	8009f6c <HAL_RCC_OscConfig+0xb0>
 8009f54:	4b84      	ldr	r3, [pc, #528]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a83      	ldr	r2, [pc, #524]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	4b81      	ldr	r3, [pc, #516]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a80      	ldr	r2, [pc, #512]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d013      	beq.n	8009f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f74:	f7fd fb6e 	bl	8007654 <HAL_GetTick>
 8009f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f7a:	e008      	b.n	8009f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f7c:	f7fd fb6a 	bl	8007654 <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	2b64      	cmp	r3, #100	; 0x64
 8009f88:	d901      	bls.n	8009f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e1fb      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f8e:	4b76      	ldr	r3, [pc, #472]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0f0      	beq.n	8009f7c <HAL_RCC_OscConfig+0xc0>
 8009f9a:	e014      	b.n	8009fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f9c:	f7fd fb5a 	bl	8007654 <HAL_GetTick>
 8009fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fa4:	f7fd fb56 	bl	8007654 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b64      	cmp	r3, #100	; 0x64
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e1e7      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fb6:	4b6c      	ldr	r3, [pc, #432]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f0      	bne.n	8009fa4 <HAL_RCC_OscConfig+0xe8>
 8009fc2:	e000      	b.n	8009fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d063      	beq.n	800a09a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fd2:	4b65      	ldr	r3, [pc, #404]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 030c 	and.w	r3, r3, #12
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fde:	4b62      	ldr	r3, [pc, #392]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	d11c      	bne.n	800a024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fea:	4b5f      	ldr	r3, [pc, #380]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d116      	bne.n	800a024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ff6:	4b5c      	ldr	r3, [pc, #368]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0302 	and.w	r3, r3, #2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <HAL_RCC_OscConfig+0x152>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d001      	beq.n	800a00e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e1bb      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a00e:	4b56      	ldr	r3, [pc, #344]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	4952      	ldr	r1, [pc, #328]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a022:	e03a      	b.n	800a09a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d020      	beq.n	800a06e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a02c:	4b4f      	ldr	r3, [pc, #316]	; (800a16c <HAL_RCC_OscConfig+0x2b0>)
 800a02e:	2201      	movs	r2, #1
 800a030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a032:	f7fd fb0f 	bl	8007654 <HAL_GetTick>
 800a036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a038:	e008      	b.n	800a04c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a03a:	f7fd fb0b 	bl	8007654 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	2b02      	cmp	r3, #2
 800a046:	d901      	bls.n	800a04c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e19c      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a04c:	4b46      	ldr	r3, [pc, #280]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0302 	and.w	r3, r3, #2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0f0      	beq.n	800a03a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a058:	4b43      	ldr	r3, [pc, #268]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	4940      	ldr	r1, [pc, #256]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	600b      	str	r3, [r1, #0]
 800a06c:	e015      	b.n	800a09a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a06e:	4b3f      	ldr	r3, [pc, #252]	; (800a16c <HAL_RCC_OscConfig+0x2b0>)
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a074:	f7fd faee 	bl	8007654 <HAL_GetTick>
 800a078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a07a:	e008      	b.n	800a08e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a07c:	f7fd faea 	bl	8007654 <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	2b02      	cmp	r3, #2
 800a088:	d901      	bls.n	800a08e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e17b      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a08e:	4b36      	ldr	r3, [pc, #216]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1f0      	bne.n	800a07c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0308 	and.w	r3, r3, #8
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d030      	beq.n	800a108 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d016      	beq.n	800a0dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0ae:	4b30      	ldr	r3, [pc, #192]	; (800a170 <HAL_RCC_OscConfig+0x2b4>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0b4:	f7fd face 	bl	8007654 <HAL_GetTick>
 800a0b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0ba:	e008      	b.n	800a0ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0bc:	f7fd faca 	bl	8007654 <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d901      	bls.n	800a0ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e15b      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0ce:	4b26      	ldr	r3, [pc, #152]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0f0      	beq.n	800a0bc <HAL_RCC_OscConfig+0x200>
 800a0da:	e015      	b.n	800a108 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0dc:	4b24      	ldr	r3, [pc, #144]	; (800a170 <HAL_RCC_OscConfig+0x2b4>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0e2:	f7fd fab7 	bl	8007654 <HAL_GetTick>
 800a0e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0e8:	e008      	b.n	800a0fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0ea:	f7fd fab3 	bl	8007654 <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d901      	bls.n	800a0fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e144      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0fc:	4b1a      	ldr	r3, [pc, #104]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a0fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1f0      	bne.n	800a0ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 80a0 	beq.w	800a256 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a116:	2300      	movs	r3, #0
 800a118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a11a:	4b13      	ldr	r3, [pc, #76]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10f      	bne.n	800a146 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a126:	2300      	movs	r3, #0
 800a128:	60bb      	str	r3, [r7, #8]
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	4a0e      	ldr	r2, [pc, #56]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a134:	6413      	str	r3, [r2, #64]	; 0x40
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <HAL_RCC_OscConfig+0x2ac>)
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a13e:	60bb      	str	r3, [r7, #8]
 800a140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a142:	2301      	movs	r3, #1
 800a144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a146:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <HAL_RCC_OscConfig+0x2b8>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d121      	bne.n	800a196 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a152:	4b08      	ldr	r3, [pc, #32]	; (800a174 <HAL_RCC_OscConfig+0x2b8>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a07      	ldr	r2, [pc, #28]	; (800a174 <HAL_RCC_OscConfig+0x2b8>)
 800a158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a15c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a15e:	f7fd fa79 	bl	8007654 <HAL_GetTick>
 800a162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a164:	e011      	b.n	800a18a <HAL_RCC_OscConfig+0x2ce>
 800a166:	bf00      	nop
 800a168:	40023800 	.word	0x40023800
 800a16c:	42470000 	.word	0x42470000
 800a170:	42470e80 	.word	0x42470e80
 800a174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a178:	f7fd fa6c 	bl	8007654 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e0fd      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a18a:	4b81      	ldr	r3, [pc, #516]	; (800a390 <HAL_RCC_OscConfig+0x4d4>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d106      	bne.n	800a1ac <HAL_RCC_OscConfig+0x2f0>
 800a19e:	4b7d      	ldr	r3, [pc, #500]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a2:	4a7c      	ldr	r2, [pc, #496]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1a4:	f043 0301 	orr.w	r3, r3, #1
 800a1a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1aa:	e01c      	b.n	800a1e6 <HAL_RCC_OscConfig+0x32a>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	d10c      	bne.n	800a1ce <HAL_RCC_OscConfig+0x312>
 800a1b4:	4b77      	ldr	r3, [pc, #476]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b8:	4a76      	ldr	r2, [pc, #472]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1ba:	f043 0304 	orr.w	r3, r3, #4
 800a1be:	6713      	str	r3, [r2, #112]	; 0x70
 800a1c0:	4b74      	ldr	r3, [pc, #464]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c4:	4a73      	ldr	r2, [pc, #460]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1c6:	f043 0301 	orr.w	r3, r3, #1
 800a1ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a1cc:	e00b      	b.n	800a1e6 <HAL_RCC_OscConfig+0x32a>
 800a1ce:	4b71      	ldr	r3, [pc, #452]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	4a70      	ldr	r2, [pc, #448]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1d4:	f023 0301 	bic.w	r3, r3, #1
 800a1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1da:	4b6e      	ldr	r3, [pc, #440]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1de:	4a6d      	ldr	r2, [pc, #436]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a1e0:	f023 0304 	bic.w	r3, r3, #4
 800a1e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d015      	beq.n	800a21a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1ee:	f7fd fa31 	bl	8007654 <HAL_GetTick>
 800a1f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1f4:	e00a      	b.n	800a20c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1f6:	f7fd fa2d 	bl	8007654 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	f241 3288 	movw	r2, #5000	; 0x1388
 800a204:	4293      	cmp	r3, r2
 800a206:	d901      	bls.n	800a20c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e0bc      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a20c:	4b61      	ldr	r3, [pc, #388]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0ee      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x33a>
 800a218:	e014      	b.n	800a244 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a21a:	f7fd fa1b 	bl	8007654 <HAL_GetTick>
 800a21e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a220:	e00a      	b.n	800a238 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a222:	f7fd fa17 	bl	8007654 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a230:	4293      	cmp	r3, r2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e0a6      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a238:	4b56      	ldr	r3, [pc, #344]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1ee      	bne.n	800a222 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d105      	bne.n	800a256 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a24a:	4b52      	ldr	r3, [pc, #328]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	4a51      	ldr	r2, [pc, #324]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 8092 	beq.w	800a384 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a260:	4b4c      	ldr	r3, [pc, #304]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f003 030c 	and.w	r3, r3, #12
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d05c      	beq.n	800a326 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d141      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a274:	4b48      	ldr	r3, [pc, #288]	; (800a398 <HAL_RCC_OscConfig+0x4dc>)
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a27a:	f7fd f9eb 	bl	8007654 <HAL_GetTick>
 800a27e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a280:	e008      	b.n	800a294 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a282:	f7fd f9e7 	bl	8007654 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d901      	bls.n	800a294 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e078      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a294:	4b3f      	ldr	r3, [pc, #252]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1f0      	bne.n	800a282 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	69da      	ldr	r2, [r3, #28]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	019b      	lsls	r3, r3, #6
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	085b      	lsrs	r3, r3, #1
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	041b      	lsls	r3, r3, #16
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	061b      	lsls	r3, r3, #24
 800a2c4:	4933      	ldr	r1, [pc, #204]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2ca:	4b33      	ldr	r3, [pc, #204]	; (800a398 <HAL_RCC_OscConfig+0x4dc>)
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2d0:	f7fd f9c0 	bl	8007654 <HAL_GetTick>
 800a2d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2d6:	e008      	b.n	800a2ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2d8:	f7fd f9bc 	bl	8007654 <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e04d      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2ea:	4b2a      	ldr	r3, [pc, #168]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d0f0      	beq.n	800a2d8 <HAL_RCC_OscConfig+0x41c>
 800a2f6:	e045      	b.n	800a384 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2f8:	4b27      	ldr	r3, [pc, #156]	; (800a398 <HAL_RCC_OscConfig+0x4dc>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2fe:	f7fd f9a9 	bl	8007654 <HAL_GetTick>
 800a302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a304:	e008      	b.n	800a318 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a306:	f7fd f9a5 	bl	8007654 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	2b02      	cmp	r3, #2
 800a312:	d901      	bls.n	800a318 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e036      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a318:	4b1e      	ldr	r3, [pc, #120]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1f0      	bne.n	800a306 <HAL_RCC_OscConfig+0x44a>
 800a324:	e02e      	b.n	800a384 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d101      	bne.n	800a332 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e029      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a332:	4b18      	ldr	r3, [pc, #96]	; (800a394 <HAL_RCC_OscConfig+0x4d8>)
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	429a      	cmp	r2, r3
 800a344:	d11c      	bne.n	800a380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a350:	429a      	cmp	r2, r3
 800a352:	d115      	bne.n	800a380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a35a:	4013      	ands	r3, r2
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a360:	4293      	cmp	r3, r2
 800a362:	d10d      	bne.n	800a380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a36e:	429a      	cmp	r2, r3
 800a370:	d106      	bne.n	800a380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d001      	beq.n	800a384 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e000      	b.n	800a386 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	40007000 	.word	0x40007000
 800a394:	40023800 	.word	0x40023800
 800a398:	42470060 	.word	0x42470060

0800a39c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e0cc      	b.n	800a54a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3b0:	4b68      	ldr	r3, [pc, #416]	; (800a554 <HAL_RCC_ClockConfig+0x1b8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 030f 	and.w	r3, r3, #15
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d90c      	bls.n	800a3d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3be:	4b65      	ldr	r3, [pc, #404]	; (800a554 <HAL_RCC_ClockConfig+0x1b8>)
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	b2d2      	uxtb	r2, r2
 800a3c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3c6:	4b63      	ldr	r3, [pc, #396]	; (800a554 <HAL_RCC_ClockConfig+0x1b8>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 030f 	and.w	r3, r3, #15
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d001      	beq.n	800a3d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e0b8      	b.n	800a54a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d020      	beq.n	800a426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a3f0:	4b59      	ldr	r3, [pc, #356]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	4a58      	ldr	r2, [pc, #352]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a3f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a3fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0308 	and.w	r3, r3, #8
 800a404:	2b00      	cmp	r3, #0
 800a406:	d005      	beq.n	800a414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a408:	4b53      	ldr	r3, [pc, #332]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	4a52      	ldr	r2, [pc, #328]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a40e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a414:	4b50      	ldr	r3, [pc, #320]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	494d      	ldr	r1, [pc, #308]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a422:	4313      	orrs	r3, r2
 800a424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d044      	beq.n	800a4bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d107      	bne.n	800a44a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a43a:	4b47      	ldr	r3, [pc, #284]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d119      	bne.n	800a47a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e07f      	b.n	800a54a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d003      	beq.n	800a45a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a456:	2b03      	cmp	r3, #3
 800a458:	d107      	bne.n	800a46a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a45a:	4b3f      	ldr	r3, [pc, #252]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e06f      	b.n	800a54a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a46a:	4b3b      	ldr	r3, [pc, #236]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e067      	b.n	800a54a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a47a:	4b37      	ldr	r3, [pc, #220]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f023 0203 	bic.w	r2, r3, #3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	4934      	ldr	r1, [pc, #208]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a488:	4313      	orrs	r3, r2
 800a48a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a48c:	f7fd f8e2 	bl	8007654 <HAL_GetTick>
 800a490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a492:	e00a      	b.n	800a4aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a494:	f7fd f8de 	bl	8007654 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d901      	bls.n	800a4aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e04f      	b.n	800a54a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4aa:	4b2b      	ldr	r3, [pc, #172]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f003 020c 	and.w	r2, r3, #12
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d1eb      	bne.n	800a494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4bc:	4b25      	ldr	r3, [pc, #148]	; (800a554 <HAL_RCC_ClockConfig+0x1b8>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 030f 	and.w	r3, r3, #15
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d20c      	bcs.n	800a4e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <HAL_RCC_ClockConfig+0x1b8>)
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	b2d2      	uxtb	r2, r2
 800a4d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4d2:	4b20      	ldr	r3, [pc, #128]	; (800a554 <HAL_RCC_ClockConfig+0x1b8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d001      	beq.n	800a4e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e032      	b.n	800a54a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d008      	beq.n	800a502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a4f0:	4b19      	ldr	r3, [pc, #100]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	4916      	ldr	r1, [pc, #88]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0308 	and.w	r3, r3, #8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d009      	beq.n	800a522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a50e:	4b12      	ldr	r3, [pc, #72]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	490e      	ldr	r1, [pc, #56]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a522:	f000 f821 	bl	800a568 <HAL_RCC_GetSysClockFreq>
 800a526:	4601      	mov	r1, r0
 800a528:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <HAL_RCC_ClockConfig+0x1bc>)
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	091b      	lsrs	r3, r3, #4
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	4a0a      	ldr	r2, [pc, #40]	; (800a55c <HAL_RCC_ClockConfig+0x1c0>)
 800a534:	5cd3      	ldrb	r3, [r2, r3]
 800a536:	fa21 f303 	lsr.w	r3, r1, r3
 800a53a:	4a09      	ldr	r2, [pc, #36]	; (800a560 <HAL_RCC_ClockConfig+0x1c4>)
 800a53c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a53e:	4b09      	ldr	r3, [pc, #36]	; (800a564 <HAL_RCC_ClockConfig+0x1c8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f7fd f842 	bl	80075cc <HAL_InitTick>

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	40023c00 	.word	0x40023c00
 800a558:	40023800 	.word	0x40023800
 800a55c:	08016a80 	.word	0x08016a80
 800a560:	20000168 	.word	0x20000168
 800a564:	20000170 	.word	0x20000170

0800a568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	607b      	str	r3, [r7, #4]
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	2300      	movs	r3, #0
 800a578:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a57e:	4b50      	ldr	r3, [pc, #320]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f003 030c 	and.w	r3, r3, #12
 800a586:	2b04      	cmp	r3, #4
 800a588:	d007      	beq.n	800a59a <HAL_RCC_GetSysClockFreq+0x32>
 800a58a:	2b08      	cmp	r3, #8
 800a58c:	d008      	beq.n	800a5a0 <HAL_RCC_GetSysClockFreq+0x38>
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f040 808d 	bne.w	800a6ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a594:	4b4b      	ldr	r3, [pc, #300]	; (800a6c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a596:	60bb      	str	r3, [r7, #8]
       break;
 800a598:	e08c      	b.n	800a6b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a59a:	4b4b      	ldr	r3, [pc, #300]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a59c:	60bb      	str	r3, [r7, #8]
      break;
 800a59e:	e089      	b.n	800a6b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5a0:	4b47      	ldr	r3, [pc, #284]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a5aa:	4b45      	ldr	r3, [pc, #276]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d023      	beq.n	800a5fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5b6:	4b42      	ldr	r3, [pc, #264]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	099b      	lsrs	r3, r3, #6
 800a5bc:	f04f 0400 	mov.w	r4, #0
 800a5c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a5c4:	f04f 0200 	mov.w	r2, #0
 800a5c8:	ea03 0501 	and.w	r5, r3, r1
 800a5cc:	ea04 0602 	and.w	r6, r4, r2
 800a5d0:	4a3d      	ldr	r2, [pc, #244]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a5d2:	fb02 f106 	mul.w	r1, r2, r6
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	fb02 f205 	mul.w	r2, r2, r5
 800a5dc:	440a      	add	r2, r1
 800a5de:	493a      	ldr	r1, [pc, #232]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a5e0:	fba5 0101 	umull	r0, r1, r5, r1
 800a5e4:	1853      	adds	r3, r2, r1
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f04f 0400 	mov.w	r4, #0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	f7f6 fb49 	bl	8000c88 <__aeabi_uldivmod>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e049      	b.n	800a692 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5fe:	4b30      	ldr	r3, [pc, #192]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	099b      	lsrs	r3, r3, #6
 800a604:	f04f 0400 	mov.w	r4, #0
 800a608:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	ea03 0501 	and.w	r5, r3, r1
 800a614:	ea04 0602 	and.w	r6, r4, r2
 800a618:	4629      	mov	r1, r5
 800a61a:	4632      	mov	r2, r6
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	f04f 0400 	mov.w	r4, #0
 800a624:	0154      	lsls	r4, r2, #5
 800a626:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a62a:	014b      	lsls	r3, r1, #5
 800a62c:	4619      	mov	r1, r3
 800a62e:	4622      	mov	r2, r4
 800a630:	1b49      	subs	r1, r1, r5
 800a632:	eb62 0206 	sbc.w	r2, r2, r6
 800a636:	f04f 0300 	mov.w	r3, #0
 800a63a:	f04f 0400 	mov.w	r4, #0
 800a63e:	0194      	lsls	r4, r2, #6
 800a640:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a644:	018b      	lsls	r3, r1, #6
 800a646:	1a5b      	subs	r3, r3, r1
 800a648:	eb64 0402 	sbc.w	r4, r4, r2
 800a64c:	f04f 0100 	mov.w	r1, #0
 800a650:	f04f 0200 	mov.w	r2, #0
 800a654:	00e2      	lsls	r2, r4, #3
 800a656:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a65a:	00d9      	lsls	r1, r3, #3
 800a65c:	460b      	mov	r3, r1
 800a65e:	4614      	mov	r4, r2
 800a660:	195b      	adds	r3, r3, r5
 800a662:	eb44 0406 	adc.w	r4, r4, r6
 800a666:	f04f 0100 	mov.w	r1, #0
 800a66a:	f04f 0200 	mov.w	r2, #0
 800a66e:	02a2      	lsls	r2, r4, #10
 800a670:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a674:	0299      	lsls	r1, r3, #10
 800a676:	460b      	mov	r3, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	4621      	mov	r1, r4
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f04f 0400 	mov.w	r4, #0
 800a684:	461a      	mov	r2, r3
 800a686:	4623      	mov	r3, r4
 800a688:	f7f6 fafe 	bl	8000c88 <__aeabi_uldivmod>
 800a68c:	4603      	mov	r3, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a692:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	0c1b      	lsrs	r3, r3, #16
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	3301      	adds	r3, #1
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6aa:	60bb      	str	r3, [r7, #8]
      break;
 800a6ac:	e002      	b.n	800a6b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a6ae:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a6b0:	60bb      	str	r3, [r7, #8]
      break;
 800a6b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	40023800 	.word	0x40023800
 800a6c4:	00f42400 	.word	0x00f42400
 800a6c8:	017d7840 	.word	0x017d7840

0800a6cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6d0:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	20000168 	.word	0x20000168

0800a6e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a6e8:	f7ff fff0 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a6ec:	4601      	mov	r1, r0
 800a6ee:	4b05      	ldr	r3, [pc, #20]	; (800a704 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	0a9b      	lsrs	r3, r3, #10
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	4a03      	ldr	r2, [pc, #12]	; (800a708 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6fa:	5cd3      	ldrb	r3, [r2, r3]
 800a6fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a700:	4618      	mov	r0, r3
 800a702:	bd80      	pop	{r7, pc}
 800a704:	40023800 	.word	0x40023800
 800a708:	08016a90 	.word	0x08016a90

0800a70c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e022      	b.n	800a764 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d105      	bne.n	800a736 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7f8 ff23 	bl	800357c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2203      	movs	r2, #3
 800a73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f814 	bl	800a76c <HAL_SD_InitCard>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e00a      	b.n	800a764 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a76c:	b5b0      	push	{r4, r5, r7, lr}
 800a76e:	b08e      	sub	sp, #56	; 0x38
 800a770:	af04      	add	r7, sp, #16
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a774:	2300      	movs	r3, #0
 800a776:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a77c:	2300      	movs	r3, #0
 800a77e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a780:	2300      	movs	r3, #0
 800a782:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a784:	2300      	movs	r3, #0
 800a786:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a788:	2376      	movs	r3, #118	; 0x76
 800a78a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681d      	ldr	r5, [r3, #0]
 800a790:	466c      	mov	r4, sp
 800a792:	f107 0314 	add.w	r3, r7, #20
 800a796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a79a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a79e:	f107 0308 	add.w	r3, r7, #8
 800a7a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f002 f803 	bl	800c7b0 <SDIO_Init>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e031      	b.n	800a820 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a7bc:	4b1a      	ldr	r3, [pc, #104]	; (800a828 <HAL_SD_InitCard+0xbc>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f002 f83b 	bl	800c842 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a7cc:	4b16      	ldr	r3, [pc, #88]	; (800a828 <HAL_SD_InitCard+0xbc>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 ffdc 	bl	800b790 <SD_PowerON>
 800a7d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e013      	b.n	800a820 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fefb 	bl	800b5f4 <SD_InitCard>
 800a7fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00b      	beq.n	800a81e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	431a      	orrs	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e000      	b.n	800a820 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3728      	adds	r7, #40	; 0x28
 800a824:	46bd      	mov	sp, r7
 800a826:	bdb0      	pop	{r4, r5, r7, pc}
 800a828:	422580a0 	.word	0x422580a0

0800a82c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08c      	sub	sp, #48	; 0x30
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d107      	bne.n	800a854 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a848:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e0c9      	b.n	800a9e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	f040 80c2 	bne.w	800a9e6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a872:	429a      	cmp	r2, r3
 800a874:	d907      	bls.n	800a886 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e0b0      	b.n	800a9e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2203      	movs	r2, #3
 800a88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2200      	movs	r2, #0
 800a894:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a8a4:	f043 0302 	orr.w	r3, r3, #2
 800a8a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	4a50      	ldr	r2, [pc, #320]	; (800a9f0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a8b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	4a4f      	ldr	r2, [pc, #316]	; (800a9f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a8b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	2200      	movs	r2, #0
 800a8c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3380      	adds	r3, #128	; 0x80
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	025b      	lsls	r3, r3, #9
 800a8d4:	089b      	lsrs	r3, r3, #2
 800a8d6:	f7fd fce9 	bl	80082ac <HAL_DMA_Start_IT>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d017      	beq.n	800a910 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a8ee:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a40      	ldr	r2, [pc, #256]	; (800a9f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e06b      	b.n	800a9e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a910:	4b3a      	ldr	r3, [pc, #232]	; (800a9fc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800a912:	2201      	movs	r2, #1
 800a914:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d002      	beq.n	800a924 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	025b      	lsls	r3, r3, #9
 800a922:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a92c:	4618      	mov	r0, r3
 800a92e:	f002 f81b 	bl	800c968 <SDMMC_CmdBlockLength>
 800a932:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00f      	beq.n	800a95a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a2e      	ldr	r2, [pc, #184]	; (800a9f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a940:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	431a      	orrs	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e046      	b.n	800a9e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a95a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a95e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	025b      	lsls	r3, r3, #9
 800a964:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a966:	2390      	movs	r3, #144	; 0x90
 800a968:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a96a:	2302      	movs	r3, #2
 800a96c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a972:	2301      	movs	r3, #1
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f107 0210 	add.w	r2, r7, #16
 800a97e:	4611      	mov	r1, r2
 800a980:	4618      	mov	r0, r3
 800a982:	f001 ffc5 	bl	800c910 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d90a      	bls.n	800a9a2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2282      	movs	r2, #130	; 0x82
 800a990:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a998:	4618      	mov	r0, r3
 800a99a:	f002 f829 	bl	800c9f0 <SDMMC_CmdReadMultiBlock>
 800a99e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a9a0:	e009      	b.n	800a9b6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2281      	movs	r2, #129	; 0x81
 800a9a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f001 fffc 	bl	800c9ac <SDMMC_CmdReadSingleBlock>
 800a9b4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d012      	beq.n	800a9e2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a9c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e002      	b.n	800a9e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e000      	b.n	800a9e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800a9e6:	2302      	movs	r3, #2
  }
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3730      	adds	r7, #48	; 0x30
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	0800b403 	.word	0x0800b403
 800a9f4:	0800b475 	.word	0x0800b475
 800a9f8:	004005ff 	.word	0x004005ff
 800a9fc:	4225858c 	.word	0x4225858c

0800aa00 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08c      	sub	sp, #48	; 0x30
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d107      	bne.n	800aa28 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e0ce      	b.n	800abc6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	f040 80c7 	bne.w	800abc4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	441a      	add	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d907      	bls.n	800aa5a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e0b5      	b.n	800abc6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	6812      	ldr	r2, [r2, #0]
 800aa74:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800aa78:	f043 0302 	orr.w	r3, r3, #2
 800aa7c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa82:	4a53      	ldr	r2, [pc, #332]	; (800abd0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800aa84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	4a52      	ldr	r2, [pc, #328]	; (800abd4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800aa8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa92:	2200      	movs	r2, #0
 800aa94:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d002      	beq.n	800aaa4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800aa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa0:	025b      	lsls	r3, r3, #9
 800aaa2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaac:	4618      	mov	r0, r3
 800aaae:	f001 ff5b 	bl	800c968 <SDMMC_CmdBlockLength>
 800aab2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00f      	beq.n	800aada <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a46      	ldr	r2, [pc, #280]	; (800abd8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800aac0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	431a      	orrs	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e075      	b.n	800abc6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d90a      	bls.n	800aaf6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	22a0      	movs	r2, #160	; 0xa0
 800aae4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaec:	4618      	mov	r0, r3
 800aaee:	f001 ffc3 	bl	800ca78 <SDMMC_CmdWriteMultiBlock>
 800aaf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aaf4:	e009      	b.n	800ab0a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2290      	movs	r2, #144	; 0x90
 800aafa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 ff96 	bl	800ca34 <SDMMC_CmdWriteSingleBlock>
 800ab08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d012      	beq.n	800ab36 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a30      	ldr	r2, [pc, #192]	; (800abd8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800ab16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e047      	b.n	800abc6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ab36:	4b29      	ldr	r3, [pc, #164]	; (800abdc <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800ab38:	2201      	movs	r2, #1
 800ab3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ab40:	68b9      	ldr	r1, [r7, #8]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3380      	adds	r3, #128	; 0x80
 800ab48:	461a      	mov	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	025b      	lsls	r3, r3, #9
 800ab4e:	089b      	lsrs	r3, r3, #2
 800ab50:	f7fd fbac 	bl	80082ac <HAL_DMA_Start_IT>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d01c      	beq.n	800ab94 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	6812      	ldr	r2, [r2, #0]
 800ab64:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800ab68:	f023 0302 	bic.w	r3, r3, #2
 800ab6c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a19      	ldr	r2, [pc, #100]	; (800abd8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800ab74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e018      	b.n	800abc6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab98:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	025b      	lsls	r3, r3, #9
 800ab9e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aba0:	2390      	movs	r3, #144	; 0x90
 800aba2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800abac:	2301      	movs	r3, #1
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f107 0210 	add.w	r2, r7, #16
 800abb8:	4611      	mov	r1, r2
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 fea8 	bl	800c910 <SDIO_ConfigData>

      return HAL_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	e000      	b.n	800abc6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800abc4:	2302      	movs	r3, #2
  }
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3730      	adds	r7, #48	; 0x30
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	0800b3d9 	.word	0x0800b3d9
 800abd4:	0800b475 	.word	0x0800b475
 800abd8:	004005ff 	.word	0x004005ff
 800abdc:	4225858c 	.word	0x4225858c

0800abe0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abec:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d008      	beq.n	800ac0e <HAL_SD_IRQHandler+0x2e>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f003 0308 	and.w	r3, r3, #8
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d003      	beq.n	800ac0e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 ffd8 	bl	800bbbc <SD_Read_IT>
 800ac0c:	e165      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 808f 	beq.w	800ad3c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac26:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6812      	ldr	r2, [r2, #0]
 800ac32:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800ac36:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ac3a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f022 0201 	bic.w	r2, r2, #1
 800ac4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f003 0308 	and.w	r3, r3, #8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d039      	beq.n	800acca <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d104      	bne.n	800ac6a <HAL_SD_IRQHandler+0x8a>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f003 0320 	and.w	r3, r3, #32
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d011      	beq.n	800ac8e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 ff24 	bl	800cabc <SDMMC_CmdStopTransfer>
 800ac74:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d008      	beq.n	800ac8e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	431a      	orrs	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f92f 	bl	800aeec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac96:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	d104      	bne.n	800acba <HAL_SD_IRQHandler+0xda>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f002 fb82 	bl	800d3c4 <HAL_SD_RxCpltCallback>
 800acc0:	e10b      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f002 fb74 	bl	800d3b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800acc8:	e107      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 8102 	beq.w	800aeda <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d011      	beq.n	800ad04 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f001 fee9 	bl	800cabc <SDMMC_CmdStopTransfer>
 800acea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d008      	beq.n	800ad04 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	431a      	orrs	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f8f4 	bl	800aeec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f040 80e5 	bne.w	800aeda <HAL_SD_IRQHandler+0x2fa>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f040 80df 	bne.w	800aeda <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f022 0208 	bic.w	r2, r2, #8
 800ad2a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 fb3b 	bl	800d3b0 <HAL_SD_TxCpltCallback>
}
 800ad3a:	e0ce      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d008      	beq.n	800ad5c <HAL_SD_IRQHandler+0x17c>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f003 0308 	and.w	r3, r3, #8
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 ff82 	bl	800bc5e <SD_Write_IT>
 800ad5a:	e0be      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad62:	f240 233a 	movw	r3, #570	; 0x23a
 800ad66:	4013      	ands	r3, r2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f000 80b6 	beq.w	800aeda <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d005      	beq.n	800ad88 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad80:	f043 0202 	orr.w	r2, r3, #2
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8e:	f003 0308 	and.w	r3, r3, #8
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d005      	beq.n	800ada2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	f043 0208 	orr.w	r2, r3, #8
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada8:	f003 0320 	and.w	r3, r3, #32
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	f043 0220 	orr.w	r2, r3, #32
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d005      	beq.n	800add6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adce:	f043 0210 	orr.w	r2, r3, #16
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800addc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade8:	f043 0208 	orr.w	r2, r3, #8
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f240 723a 	movw	r2, #1850	; 0x73a
 800adf8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ae08:	f023 0302 	bic.w	r3, r3, #2
 800ae0c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f001 fe52 	bl	800cabc <SDMMC_CmdStopTransfer>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f003 0308 	and.w	r3, r3, #8
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00a      	beq.n	800ae44 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f855 	bl	800aeec <HAL_SD_ErrorCallback>
}
 800ae42:	e04a      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d045      	beq.n	800aeda <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <HAL_SD_IRQHandler+0x282>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d011      	beq.n	800ae86 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae66:	4a1f      	ldr	r2, [pc, #124]	; (800aee4 <HAL_SD_IRQHandler+0x304>)
 800ae68:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fd fae4 	bl	800843c <HAL_DMA_Abort_IT>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d02f      	beq.n	800aeda <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 fb4a 	bl	800b518 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ae84:	e029      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d104      	bne.n	800ae9a <HAL_SD_IRQHandler+0x2ba>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0302 	and.w	r3, r3, #2
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d011      	beq.n	800aebe <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9e:	4a12      	ldr	r2, [pc, #72]	; (800aee8 <HAL_SD_IRQHandler+0x308>)
 800aea0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd fac8 	bl	800843c <HAL_DMA_Abort_IT>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d013      	beq.n	800aeda <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fb65 	bl	800b586 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aebc:	e00d      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f002 fa62 	bl	800d39c <HAL_SD_AbortCallback>
}
 800aed8:	e7ff      	b.n	800aeda <HAL_SD_IRQHandler+0x2fa>
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	0800b519 	.word	0x0800b519
 800aee8:	0800b587 	.word	0x0800b587

0800aeec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af0e:	0f9b      	lsrs	r3, r3, #30
 800af10:	b2da      	uxtb	r2, r3
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af1a:	0e9b      	lsrs	r3, r3, #26
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	f003 030f 	and.w	r3, r3, #15
 800af22:	b2da      	uxtb	r2, r3
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af2c:	0e1b      	lsrs	r3, r3, #24
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f003 0303 	and.w	r3, r3, #3
 800af34:	b2da      	uxtb	r2, r3
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af3e:	0c1b      	lsrs	r3, r3, #16
 800af40:	b2da      	uxtb	r2, r3
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af4a:	0a1b      	lsrs	r3, r3, #8
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af56:	b2da      	uxtb	r2, r3
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af60:	0d1b      	lsrs	r3, r3, #20
 800af62:	b29a      	uxth	r2, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af6c:	0c1b      	lsrs	r3, r3, #16
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f003 030f 	and.w	r3, r3, #15
 800af74:	b2da      	uxtb	r2, r3
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af7e:	0bdb      	lsrs	r3, r3, #15
 800af80:	b2db      	uxtb	r3, r3
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	b2da      	uxtb	r2, r3
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af90:	0b9b      	lsrs	r3, r3, #14
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afa2:	0b5b      	lsrs	r3, r3, #13
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afb4:	0b1b      	lsrs	r3, r3, #12
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2200      	movs	r2, #0
 800afc6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d163      	bne.n	800b098 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afd4:	009a      	lsls	r2, r3, #2
 800afd6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800afda:	4013      	ands	r3, r2
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800afe0:	0f92      	lsrs	r2, r2, #30
 800afe2:	431a      	orrs	r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afec:	0edb      	lsrs	r3, r3, #27
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800affe:	0e1b      	lsrs	r3, r3, #24
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 0307 	and.w	r3, r3, #7
 800b006:	b2da      	uxtb	r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b010:	0d5b      	lsrs	r3, r3, #21
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 0307 	and.w	r3, r3, #7
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b022:	0c9b      	lsrs	r3, r3, #18
 800b024:	b2db      	uxtb	r3, r3
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b034:	0bdb      	lsrs	r3, r3, #15
 800b036:	b2db      	uxtb	r3, r3
 800b038:	f003 0307 	and.w	r3, r3, #7
 800b03c:	b2da      	uxtb	r2, r3
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	7e1b      	ldrb	r3, [r3, #24]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	3302      	adds	r3, #2
 800b058:	2201      	movs	r2, #1
 800b05a:	fa02 f303 	lsl.w	r3, r2, r3
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b062:	fb02 f203 	mul.w	r2, r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	7a1b      	ldrb	r3, [r3, #8]
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f003 030f 	and.w	r3, r3, #15
 800b074:	2201      	movs	r2, #1
 800b076:	409a      	lsls	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b084:	0a52      	lsrs	r2, r2, #9
 800b086:	fb02 f203 	mul.w	r2, r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b094:	661a      	str	r2, [r3, #96]	; 0x60
 800b096:	e031      	b.n	800b0fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d11d      	bne.n	800b0dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0a4:	041b      	lsls	r3, r3, #16
 800b0a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ae:	0c1b      	lsrs	r3, r3, #16
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	029a      	lsls	r2, r3, #10
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	661a      	str	r2, [r3, #96]	; 0x60
 800b0da:	e00f      	b.n	800b0fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a58      	ldr	r2, [pc, #352]	; (800b244 <HAL_SD_GetCardCSD+0x344>)
 800b0e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e09d      	b.n	800b238 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b100:	0b9b      	lsrs	r3, r3, #14
 800b102:	b2db      	uxtb	r3, r3
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b112:	09db      	lsrs	r3, r3, #7
 800b114:	b2db      	uxtb	r3, r3
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b124:	b2db      	uxtb	r3, r3
 800b126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b134:	0fdb      	lsrs	r3, r3, #31
 800b136:	b2da      	uxtb	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b140:	0f5b      	lsrs	r3, r3, #29
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 0303 	and.w	r3, r3, #3
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b152:	0e9b      	lsrs	r3, r3, #26
 800b154:	b2db      	uxtb	r3, r3
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b164:	0d9b      	lsrs	r3, r3, #22
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f003 030f 	and.w	r3, r3, #15
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b176:	0d5b      	lsrs	r3, r3, #21
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b192:	0c1b      	lsrs	r3, r3, #16
 800b194:	b2db      	uxtb	r3, r3
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a6:	0bdb      	lsrs	r3, r3, #15
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ba:	0b9b      	lsrs	r3, r3, #14
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ce:	0b5b      	lsrs	r3, r3, #13
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e2:	0b1b      	lsrs	r3, r3, #12
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f6:	0a9b      	lsrs	r3, r3, #10
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20a:	0a1b      	lsrs	r3, r3, #8
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	f003 0303 	and.w	r3, r3, #3
 800b212:	b2da      	uxtb	r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b21e:	085b      	lsrs	r3, r3, #1
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b226:	b2da      	uxtb	r2, r3
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	004005ff 	.word	0x004005ff

0800b248 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b2a0:	b5b0      	push	{r4, r5, r7, lr}
 800b2a2:	b08e      	sub	sp, #56	; 0x38
 800b2a4:	af04      	add	r7, sp, #16
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d02e      	beq.n	800b318 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2c0:	d106      	bne.n	800b2d0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	639a      	str	r2, [r3, #56]	; 0x38
 800b2ce:	e029      	b.n	800b324 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2d6:	d10a      	bne.n	800b2ee <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fb0f 	bl	800b8fc <SD_WideBus_Enable>
 800b2de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	639a      	str	r2, [r3, #56]	; 0x38
 800b2ec:	e01a      	b.n	800b324 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10a      	bne.n	800b30a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fb4c 	bl	800b992 <SD_WideBus_Disable>
 800b2fa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	431a      	orrs	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	639a      	str	r2, [r3, #56]	; 0x38
 800b308:	e00c      	b.n	800b324 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	639a      	str	r2, [r3, #56]	; 0x38
 800b316:	e005      	b.n	800b324 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d009      	beq.n	800b340 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a18      	ldr	r2, [pc, #96]	; (800b394 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b332:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e024      	b.n	800b38a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681d      	ldr	r5, [r3, #0]
 800b366:	466c      	mov	r4, sp
 800b368:	f107 0318 	add.w	r3, r7, #24
 800b36c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b37a:	4628      	mov	r0, r5
 800b37c:	f001 fa18 	bl	800c7b0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3728      	adds	r7, #40	; 0x28
 800b38e:	46bd      	mov	sp, r7
 800b390:	bdb0      	pop	{r4, r5, r7, pc}
 800b392:	bf00      	nop
 800b394:	004005ff 	.word	0x004005ff

0800b398 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b3a4:	f107 030c 	add.w	r3, r7, #12
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fa7e 	bl	800b8ac <SD_SendStatus>
 800b3b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	0a5b      	lsrs	r3, r3, #9
 800b3c8:	f003 030f 	and.w	r3, r3, #15
 800b3cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b3ce:	693b      	ldr	r3, [r7, #16]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b3f6:	bf00      	nop
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	2b82      	cmp	r3, #130	; 0x82
 800b416:	d111      	bne.n	800b43c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4618      	mov	r0, r3
 800b41e:	f001 fb4d 	bl	800cabc <SDMMC_CmdStopTransfer>
 800b422:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d008      	beq.n	800b43c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	431a      	orrs	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7ff fd58 	bl	800aeec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f022 0208 	bic.w	r2, r2, #8
 800b44a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f240 523a 	movw	r2, #1338	; 0x53a
 800b454:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f001 ffad 	bl	800d3c4 <HAL_SD_RxCpltCallback>
#endif
}
 800b46a:	bf00      	nop
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b480:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7fd f986 	bl	8008794 <HAL_DMA_GetError>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d03e      	beq.n	800b50c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b494:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d002      	beq.n	800b4aa <SD_DMAError+0x36>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d12d      	bne.n	800b506 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a19      	ldr	r2, [pc, #100]	; (800b514 <SD_DMAError+0xa0>)
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b4c0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b4ce:	6978      	ldr	r0, [r7, #20]
 800b4d0:	f7ff ff62 	bl	800b398 <HAL_SD_GetCardState>
 800b4d4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b06      	cmp	r3, #6
 800b4da:	d002      	beq.n	800b4e2 <SD_DMAError+0x6e>
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	d10a      	bne.n	800b4f8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f001 fae8 	bl	800cabc <SDMMC_CmdStopTransfer>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f2:	431a      	orrs	r2, r3
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2200      	movs	r2, #0
 800b504:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b506:	6978      	ldr	r0, [r7, #20]
 800b508:	f7ff fcf0 	bl	800aeec <HAL_SD_ErrorCallback>
#endif
  }
}
 800b50c:	bf00      	nop
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	004005ff 	.word	0x004005ff

0800b518 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b52e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff ff31 	bl	800b398 <HAL_SD_GetCardState>
 800b536:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	2b06      	cmp	r3, #6
 800b54a:	d002      	beq.n	800b552 <SD_DMATxAbort+0x3a>
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d10a      	bne.n	800b568 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f001 fab0 	bl	800cabc <SDMMC_CmdStopTransfer>
 800b55c:	4602      	mov	r2, r0
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b562:	431a      	orrs	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d103      	bne.n	800b578 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f001 ff13 	bl	800d39c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b576:	e002      	b.n	800b57e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f7ff fcb7 	bl	800aeec <HAL_SD_ErrorCallback>
}
 800b57e:	bf00      	nop
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b592:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f240 523a 	movw	r2, #1338	; 0x53a
 800b59c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7ff fefa 	bl	800b398 <HAL_SD_GetCardState>
 800b5a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b06      	cmp	r3, #6
 800b5b8:	d002      	beq.n	800b5c0 <SD_DMARxAbort+0x3a>
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b05      	cmp	r3, #5
 800b5be:	d10a      	bne.n	800b5d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f001 fa79 	bl	800cabc <SDMMC_CmdStopTransfer>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d103      	bne.n	800b5e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f001 fedc 	bl	800d39c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b5e4:	e002      	b.n	800b5ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7ff fc80 	bl	800aeec <HAL_SD_ErrorCallback>
}
 800b5ec:	bf00      	nop
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b5f4:	b5b0      	push	{r4, r5, r7, lr}
 800b5f6:	b094      	sub	sp, #80	; 0x50
 800b5f8:	af04      	add	r7, sp, #16
 800b5fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f001 f92b 	bl	800c860 <SDIO_GetPowerState>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b610:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b614:	e0b7      	b.n	800b786 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d02f      	beq.n	800b67e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	f001 fb54 	bl	800ccd0 <SDMMC_CmdSendCID>
 800b628:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <SD_InitCard+0x40>
    {
      return errorstate;
 800b630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b632:	e0a8      	b.n	800b786 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2100      	movs	r1, #0
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 f955 	bl	800c8ea <SDIO_GetResponse>
 800b640:	4602      	mov	r2, r0
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2104      	movs	r1, #4
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 f94c 	bl	800c8ea <SDIO_GetResponse>
 800b652:	4602      	mov	r2, r0
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2108      	movs	r1, #8
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 f943 	bl	800c8ea <SDIO_GetResponse>
 800b664:	4602      	mov	r2, r0
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	210c      	movs	r1, #12
 800b670:	4618      	mov	r0, r3
 800b672:	f001 f93a 	bl	800c8ea <SDIO_GetResponse>
 800b676:	4602      	mov	r2, r0
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b682:	2b03      	cmp	r3, #3
 800b684:	d00d      	beq.n	800b6a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f107 020e 	add.w	r2, r7, #14
 800b68e:	4611      	mov	r1, r2
 800b690:	4618      	mov	r0, r3
 800b692:	f001 fb5a 	bl	800cd4a <SDMMC_CmdSetRelAdd>
 800b696:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a0:	e071      	b.n	800b786 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	d036      	beq.n	800b718 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b6aa:	89fb      	ldrh	r3, [r7, #14]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ba:	041b      	lsls	r3, r3, #16
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4610      	mov	r0, r2
 800b6c0:	f001 fb24 	bl	800cd0c <SDMMC_CmdSendCSD>
 800b6c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ce:	e05a      	b.n	800b786 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 f907 	bl	800c8ea <SDIO_GetResponse>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2104      	movs	r1, #4
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f8fe 	bl	800c8ea <SDIO_GetResponse>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2108      	movs	r1, #8
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f001 f8f5 	bl	800c8ea <SDIO_GetResponse>
 800b700:	4602      	mov	r2, r0
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	210c      	movs	r1, #12
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 f8ec 	bl	800c8ea <SDIO_GetResponse>
 800b712:	4602      	mov	r2, r0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2104      	movs	r1, #4
 800b71e:	4618      	mov	r0, r3
 800b720:	f001 f8e3 	bl	800c8ea <SDIO_GetResponse>
 800b724:	4603      	mov	r3, r0
 800b726:	0d1a      	lsrs	r2, r3, #20
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b72c:	f107 0310 	add.w	r3, r7, #16
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fbe4 	bl	800af00 <HAL_SD_GetCardCSD>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b73e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b742:	e020      	b.n	800b786 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6819      	ldr	r1, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b74c:	041b      	lsls	r3, r3, #16
 800b74e:	f04f 0400 	mov.w	r4, #0
 800b752:	461a      	mov	r2, r3
 800b754:	4623      	mov	r3, r4
 800b756:	4608      	mov	r0, r1
 800b758:	f001 f9d2 	bl	800cb00 <SDMMC_CmdSelDesel>
 800b75c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <SD_InitCard+0x174>
  {
    return errorstate;
 800b764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b766:	e00e      	b.n	800b786 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681d      	ldr	r5, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	466c      	mov	r4, sp
 800b770:	f103 0210 	add.w	r2, r3, #16
 800b774:	ca07      	ldmia	r2, {r0, r1, r2}
 800b776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b77a:	3304      	adds	r3, #4
 800b77c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b77e:	4628      	mov	r0, r5
 800b780:	f001 f816 	bl	800c7b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3740      	adds	r7, #64	; 0x40
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b790 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b798:	2300      	movs	r3, #0
 800b79a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b79c:	2300      	movs	r3, #0
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 f9cc 	bl	800cb46 <SDMMC_CmdGoIdleState>
 800b7ae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <SD_PowerON+0x2a>
  {
    return errorstate;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	e072      	b.n	800b8a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f001 f9df 	bl	800cb82 <SDMMC_CmdOperCond>
 800b7c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00d      	beq.n	800b7e8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 f9b5 	bl	800cb46 <SDMMC_CmdGoIdleState>
 800b7dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d004      	beq.n	800b7ee <SD_PowerON+0x5e>
    {
      return errorstate;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	e05b      	b.n	800b8a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d137      	bne.n	800b866 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f001 f9df 	bl	800cbc0 <SDMMC_CmdAppCommand>
 800b802:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d02d      	beq.n	800b866 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b80a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b80e:	e047      	b.n	800b8a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2100      	movs	r1, #0
 800b816:	4618      	mov	r0, r3
 800b818:	f001 f9d2 	bl	800cbc0 <SDMMC_CmdAppCommand>
 800b81c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <SD_PowerON+0x98>
    {
      return errorstate;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	e03b      	b.n	800b8a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	491e      	ldr	r1, [pc, #120]	; (800b8a8 <SD_PowerON+0x118>)
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 f9e8 	bl	800cc04 <SDMMC_CmdAppOperCommand>
 800b834:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b83c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b840:	e02e      	b.n	800b8a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2100      	movs	r1, #0
 800b848:	4618      	mov	r0, r3
 800b84a:	f001 f84e 	bl	800c8ea <SDIO_GetResponse>
 800b84e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	0fdb      	lsrs	r3, r3, #31
 800b854:	2b01      	cmp	r3, #1
 800b856:	d101      	bne.n	800b85c <SD_PowerON+0xcc>
 800b858:	2301      	movs	r3, #1
 800b85a:	e000      	b.n	800b85e <SD_PowerON+0xce>
 800b85c:	2300      	movs	r3, #0
 800b85e:	613b      	str	r3, [r7, #16]

    count++;
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	3301      	adds	r3, #1
 800b864:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d802      	bhi.n	800b876 <SD_PowerON+0xe6>
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0cc      	beq.n	800b810 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d902      	bls.n	800b886 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b884:	e00c      	b.n	800b8a0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	645a      	str	r2, [r3, #68]	; 0x44
 800b896:	e002      	b.n	800b89e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	c1100000 	.word	0xc1100000

0800b8ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b8bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8c0:	e018      	b.n	800b8f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ca:	041b      	lsls	r3, r3, #16
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	f001 fa5c 	bl	800cd8c <SDMMC_CmdSendStatus>
 800b8d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	e009      	b.n	800b8f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 ffff 	bl	800c8ea <SDIO_GetResponse>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	2300      	movs	r3, #0
 800b90a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2100      	movs	r1, #0
 800b912:	4618      	mov	r0, r3
 800b914:	f000 ffe9 	bl	800c8ea <SDIO_GetResponse>
 800b918:	4603      	mov	r3, r0
 800b91a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b91e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b922:	d102      	bne.n	800b92a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b928:	e02f      	b.n	800b98a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	4619      	mov	r1, r3
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f879 	bl	800ba28 <SD_FindSCR>
 800b936:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	e023      	b.n	800b98a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01c      	beq.n	800b986 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b954:	041b      	lsls	r3, r3, #16
 800b956:	4619      	mov	r1, r3
 800b958:	4610      	mov	r0, r2
 800b95a:	f001 f931 	bl	800cbc0 <SDMMC_CmdAppCommand>
 800b95e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	e00f      	b.n	800b98a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2102      	movs	r1, #2
 800b970:	4618      	mov	r0, r3
 800b972:	f001 f96a 	bl	800cc4a <SDMMC_CmdBusWidth>
 800b976:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	e003      	b.n	800b98a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b982:	2300      	movs	r3, #0
 800b984:	e001      	b.n	800b98a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b986:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b086      	sub	sp, #24
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]
 800b99e:	2300      	movs	r3, #0
 800b9a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 ff9e 	bl	800c8ea <SDIO_GetResponse>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9b8:	d102      	bne.n	800b9c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b9ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9be:	e02f      	b.n	800ba20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b9c0:	f107 030c 	add.w	r3, r7, #12
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f82e 	bl	800ba28 <SD_FindSCR>
 800b9cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	e023      	b.n	800ba20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01c      	beq.n	800ba1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ea:	041b      	lsls	r3, r3, #16
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	f001 f8e6 	bl	800cbc0 <SDMMC_CmdAppCommand>
 800b9f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	e00f      	b.n	800ba20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2100      	movs	r1, #0
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 f91f 	bl	800cc4a <SDMMC_CmdBusWidth>
 800ba0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	e003      	b.n	800ba20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e001      	b.n	800ba20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ba28:	b590      	push	{r4, r7, lr}
 800ba2a:	b08f      	sub	sp, #60	; 0x3c
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba32:	f7fb fe0f 	bl	8007654 <HAL_GetTick>
 800ba36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	60bb      	str	r3, [r7, #8]
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2108      	movs	r1, #8
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 ff8a 	bl	800c968 <SDMMC_CmdBlockLength>
 800ba54:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	e0a9      	b.n	800bbb4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba68:	041b      	lsls	r3, r3, #16
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	f001 f8a7 	bl	800cbc0 <SDMMC_CmdAppCommand>
 800ba72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ba7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7c:	e09a      	b.n	800bbb4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ba84:	2308      	movs	r3, #8
 800ba86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ba88:	2330      	movs	r3, #48	; 0x30
 800ba8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ba94:	2301      	movs	r3, #1
 800ba96:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f107 0210 	add.w	r2, r7, #16
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 ff34 	bl	800c910 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4618      	mov	r0, r3
 800baae:	f001 f8ee 	bl	800cc8e <SDMMC_CmdSendSCR>
 800bab2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d022      	beq.n	800bb00 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	e07a      	b.n	800bbb4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00e      	beq.n	800baea <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6819      	ldr	r1, [r3, #0]
 800bad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	f107 0208 	add.w	r2, r7, #8
 800bad8:	18d4      	adds	r4, r2, r3
 800bada:	4608      	mov	r0, r1
 800badc:	f000 fe93 	bl	800c806 <SDIO_ReadFIFO>
 800bae0:	4603      	mov	r3, r0
 800bae2:	6023      	str	r3, [r4, #0]
      index++;
 800bae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae6:	3301      	adds	r3, #1
 800bae8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800baea:	f7fb fdb3 	bl	8007654 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baf8:	d102      	bne.n	800bb00 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bafa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bafe:	e059      	b.n	800bbb4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb06:	f240 432a 	movw	r3, #1066	; 0x42a
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0d6      	beq.n	800babe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb16:	f003 0308 	and.w	r3, r3, #8
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d005      	beq.n	800bb2a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2208      	movs	r2, #8
 800bb24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb26:	2308      	movs	r3, #8
 800bb28:	e044      	b.n	800bbb4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb30:	f003 0302 	and.w	r3, r3, #2
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d005      	beq.n	800bb44 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb40:	2302      	movs	r3, #2
 800bb42:	e037      	b.n	800bbb4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4a:	f003 0320 	and.w	r3, r3, #32
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d005      	beq.n	800bb5e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2220      	movs	r2, #32
 800bb58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bb5a:	2320      	movs	r3, #32
 800bb5c:	e02a      	b.n	800bbb4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f240 523a 	movw	r2, #1338	; 0x53a
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	061a      	lsls	r2, r3, #24
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	021b      	lsls	r3, r3, #8
 800bb70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	0a1b      	lsrs	r3, r3, #8
 800bb7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bb7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	0e1b      	lsrs	r3, r3, #24
 800bb84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	601a      	str	r2, [r3, #0]
    scr++;
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	061a      	lsls	r2, r3, #24
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	021b      	lsls	r3, r3, #8
 800bb98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	0a1b      	lsrs	r3, r3, #8
 800bba2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bba6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	0e1b      	lsrs	r3, r3, #24
 800bbac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	373c      	adds	r7, #60	; 0x3c
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd90      	pop	{r4, r7, pc}

0800bbbc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d03f      	beq.n	800bc56 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	e033      	b.n	800bc44 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 fe10 	bl	800c806 <SDIO_ReadFIFO>
 800bbe6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	0a1b      	lsrs	r3, r3, #8
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	0c1b      	lsrs	r3, r3, #16
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	3b01      	subs	r3, #1
 800bc26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	0e1b      	lsrs	r3, r3, #24
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3301      	adds	r3, #1
 800bc36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	3301      	adds	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	2b07      	cmp	r3, #7
 800bc48:	d9c8      	bls.n	800bbdc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bc56:	bf00      	nop
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b086      	sub	sp, #24
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d043      	beq.n	800bd00 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bc78:	2300      	movs	r3, #0
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	e037      	b.n	800bcee <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3301      	adds	r3, #1
 800bc88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	021a      	lsls	r2, r3, #8
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	041a      	lsls	r2, r3, #16
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	061a      	lsls	r2, r3, #24
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f107 0208 	add.w	r2, r7, #8
 800bce0:	4611      	mov	r1, r2
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 fd9c 	bl	800c820 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	3301      	adds	r3, #1
 800bcec:	617b      	str	r3, [r7, #20]
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2b07      	cmp	r3, #7
 800bcf2:	d9c4      	bls.n	800bc7e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bd00:	bf00      	nop
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e056      	b.n	800bdc8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d106      	bne.n	800bd3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7f8 f869 	bl	8003e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2202      	movs	r2, #2
 800bd3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	431a      	orrs	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	431a      	orrs	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	431a      	orrs	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd76:	431a      	orrs	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	ea42 0103 	orr.w	r1, r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	430a      	orrs	r2, r1
 800bd90:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	0c1b      	lsrs	r3, r3, #16
 800bd98:	f003 0104 	and.w	r1, r3, #4
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	430a      	orrs	r2, r1
 800bda6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	69da      	ldr	r2, [r3, #28]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	4613      	mov	r3, r2
 800bdde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d101      	bne.n	800bdf2 <HAL_SPI_Transmit+0x22>
 800bdee:	2302      	movs	r3, #2
 800bdf0:	e11e      	b.n	800c030 <HAL_SPI_Transmit+0x260>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdfa:	f7fb fc2b 	bl	8007654 <HAL_GetTick>
 800bdfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800be00:	88fb      	ldrh	r3, [r7, #6]
 800be02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d002      	beq.n	800be16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800be10:	2302      	movs	r3, #2
 800be12:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be14:	e103      	b.n	800c01e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <HAL_SPI_Transmit+0x52>
 800be1c:	88fb      	ldrh	r3, [r7, #6]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d102      	bne.n	800be28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be26:	e0fa      	b.n	800c01e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2203      	movs	r2, #3
 800be2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	88fa      	ldrh	r2, [r7, #6]
 800be40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	88fa      	ldrh	r2, [r7, #6]
 800be46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be6e:	d107      	bne.n	800be80 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8a:	2b40      	cmp	r3, #64	; 0x40
 800be8c:	d007      	beq.n	800be9e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bea6:	d14b      	bne.n	800bf40 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <HAL_SPI_Transmit+0xe6>
 800beb0:	8afb      	ldrh	r3, [r7, #22]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d13e      	bne.n	800bf34 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beba:	881a      	ldrh	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec6:	1c9a      	adds	r2, r3, #2
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	3b01      	subs	r3, #1
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800beda:	e02b      	b.n	800bf34 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	f003 0302 	and.w	r3, r3, #2
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d112      	bne.n	800bf10 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beee:	881a      	ldrh	r2, [r3, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befa:	1c9a      	adds	r2, r3, #2
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	3b01      	subs	r3, #1
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	86da      	strh	r2, [r3, #54]	; 0x36
 800bf0e:	e011      	b.n	800bf34 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf10:	f7fb fba0 	bl	8007654 <HAL_GetTick>
 800bf14:	4602      	mov	r2, r0
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d803      	bhi.n	800bf28 <HAL_SPI_Transmit+0x158>
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf26:	d102      	bne.n	800bf2e <HAL_SPI_Transmit+0x15e>
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d102      	bne.n	800bf34 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bf32:	e074      	b.n	800c01e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1ce      	bne.n	800bedc <HAL_SPI_Transmit+0x10c>
 800bf3e:	e04c      	b.n	800bfda <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <HAL_SPI_Transmit+0x17e>
 800bf48:	8afb      	ldrh	r3, [r7, #22]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d140      	bne.n	800bfd0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	330c      	adds	r3, #12
 800bf58:	7812      	ldrb	r2, [r2, #0]
 800bf5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf60:	1c5a      	adds	r2, r3, #1
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bf74:	e02c      	b.n	800bfd0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f003 0302 	and.w	r3, r3, #2
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d113      	bne.n	800bfac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	330c      	adds	r3, #12
 800bf8e:	7812      	ldrb	r2, [r2, #0]
 800bf90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf96:	1c5a      	adds	r2, r3, #1
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	86da      	strh	r2, [r3, #54]	; 0x36
 800bfaa:	e011      	b.n	800bfd0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfac:	f7fb fb52 	bl	8007654 <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d803      	bhi.n	800bfc4 <HAL_SPI_Transmit+0x1f4>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfc2:	d102      	bne.n	800bfca <HAL_SPI_Transmit+0x1fa>
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d102      	bne.n	800bfd0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bfce:	e026      	b.n	800c01e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1cd      	bne.n	800bf76 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfda:	69ba      	ldr	r2, [r7, #24]
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 fba4 	bl	800c72c <SPI_EndRxTxTransaction>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d002      	beq.n	800bff0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2220      	movs	r2, #32
 800bfee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bff8:	2300      	movs	r3, #0
 800bffa:	613b      	str	r3, [r7, #16]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	613b      	str	r3, [r7, #16]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	2b00      	cmp	r3, #0
 800c014:	d002      	beq.n	800c01c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	77fb      	strb	r3, [r7, #31]
 800c01a:	e000      	b.n	800c01e <HAL_SPI_Transmit+0x24e>
  }

error:
 800c01c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3720      	adds	r7, #32
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	603b      	str	r3, [r7, #0]
 800c044:	4613      	mov	r3, r2
 800c046:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c054:	d112      	bne.n	800c07c <HAL_SPI_Receive+0x44>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10e      	bne.n	800c07c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2204      	movs	r2, #4
 800c062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c066:	88fa      	ldrh	r2, [r7, #6]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	4613      	mov	r3, r2
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f000 f8e9 	bl	800c24a <HAL_SPI_TransmitReceive>
 800c078:	4603      	mov	r3, r0
 800c07a:	e0e2      	b.n	800c242 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c082:	2b01      	cmp	r3, #1
 800c084:	d101      	bne.n	800c08a <HAL_SPI_Receive+0x52>
 800c086:	2302      	movs	r3, #2
 800c088:	e0db      	b.n	800c242 <HAL_SPI_Receive+0x20a>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c092:	f7fb fadf 	bl	8007654 <HAL_GetTick>
 800c096:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d002      	beq.n	800c0aa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0a8:	e0c2      	b.n	800c230 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <HAL_SPI_Receive+0x7e>
 800c0b0:	88fb      	ldrh	r3, [r7, #6]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0ba:	e0b9      	b.n	800c230 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2204      	movs	r2, #4
 800c0c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	88fa      	ldrh	r2, [r7, #6]
 800c0d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	88fa      	ldrh	r2, [r7, #6]
 800c0da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c102:	d107      	bne.n	800c114 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c112:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11e:	2b40      	cmp	r3, #64	; 0x40
 800c120:	d007      	beq.n	800c132 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c130:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d162      	bne.n	800c200 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c13a:	e02e      	b.n	800c19a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b01      	cmp	r3, #1
 800c148:	d115      	bne.n	800c176 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f103 020c 	add.w	r2, r3, #12
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c156:	7812      	ldrb	r2, [r2, #0]
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	3b01      	subs	r3, #1
 800c16e:	b29a      	uxth	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c174:	e011      	b.n	800c19a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c176:	f7fb fa6d 	bl	8007654 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	d803      	bhi.n	800c18e <HAL_SPI_Receive+0x156>
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c18c:	d102      	bne.n	800c194 <HAL_SPI_Receive+0x15c>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d102      	bne.n	800c19a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c198:	e04a      	b.n	800c230 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1cb      	bne.n	800c13c <HAL_SPI_Receive+0x104>
 800c1a4:	e031      	b.n	800c20a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d113      	bne.n	800c1dc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68da      	ldr	r2, [r3, #12]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1be:	b292      	uxth	r2, r2
 800c1c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c6:	1c9a      	adds	r2, r3, #2
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1da:	e011      	b.n	800c200 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1dc:	f7fb fa3a 	bl	8007654 <HAL_GetTick>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d803      	bhi.n	800c1f4 <HAL_SPI_Receive+0x1bc>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1f2:	d102      	bne.n	800c1fa <HAL_SPI_Receive+0x1c2>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c1fe:	e017      	b.n	800c230 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1cd      	bne.n	800c1a6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 fa27 	bl	800c662 <SPI_EndRxTransaction>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2220      	movs	r2, #32
 800c21e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	75fb      	strb	r3, [r7, #23]
 800c22c:	e000      	b.n	800c230 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c22e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c240:	7dfb      	ldrb	r3, [r7, #23]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b08c      	sub	sp, #48	; 0x30
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	607a      	str	r2, [r7, #4]
 800c256:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c258:	2301      	movs	r3, #1
 800c25a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_SPI_TransmitReceive+0x26>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e18a      	b.n	800c586 <HAL_SPI_TransmitReceive+0x33c>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c278:	f7fb f9ec 	bl	8007654 <HAL_GetTick>
 800c27c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c28e:	887b      	ldrh	r3, [r7, #2]
 800c290:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c296:	2b01      	cmp	r3, #1
 800c298:	d00f      	beq.n	800c2ba <HAL_SPI_TransmitReceive+0x70>
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2a0:	d107      	bne.n	800c2b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d103      	bne.n	800c2b2 <HAL_SPI_TransmitReceive+0x68>
 800c2aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2ae:	2b04      	cmp	r3, #4
 800c2b0:	d003      	beq.n	800c2ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c2b8:	e15b      	b.n	800c572 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d005      	beq.n	800c2cc <HAL_SPI_TransmitReceive+0x82>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d002      	beq.n	800c2cc <HAL_SPI_TransmitReceive+0x82>
 800c2c6:	887b      	ldrh	r3, [r7, #2]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d103      	bne.n	800c2d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c2d2:	e14e      	b.n	800c572 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d003      	beq.n	800c2e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2205      	movs	r2, #5
 800c2e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	887a      	ldrh	r2, [r7, #2]
 800c2f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	887a      	ldrh	r2, [r7, #2]
 800c2fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	887a      	ldrh	r2, [r7, #2]
 800c30a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	887a      	ldrh	r2, [r7, #2]
 800c310:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c328:	2b40      	cmp	r3, #64	; 0x40
 800c32a:	d007      	beq.n	800c33c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c33a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c344:	d178      	bne.n	800c438 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <HAL_SPI_TransmitReceive+0x10a>
 800c34e:	8b7b      	ldrh	r3, [r7, #26]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d166      	bne.n	800c422 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c358:	881a      	ldrh	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c364:	1c9a      	adds	r2, r3, #2
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c36e:	b29b      	uxth	r3, r3
 800c370:	3b01      	subs	r3, #1
 800c372:	b29a      	uxth	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c378:	e053      	b.n	800c422 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	f003 0302 	and.w	r3, r3, #2
 800c384:	2b02      	cmp	r3, #2
 800c386:	d11b      	bne.n	800c3c0 <HAL_SPI_TransmitReceive+0x176>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d016      	beq.n	800c3c0 <HAL_SPI_TransmitReceive+0x176>
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	2b01      	cmp	r3, #1
 800c396:	d113      	bne.n	800c3c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39c:	881a      	ldrh	r2, [r3, #0]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a8:	1c9a      	adds	r2, r3, #2
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d119      	bne.n	800c402 <HAL_SPI_TransmitReceive+0x1b8>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d014      	beq.n	800c402 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e2:	b292      	uxth	r2, r2
 800c3e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ea:	1c9a      	adds	r2, r3, #2
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c3fe:	2301      	movs	r3, #1
 800c400:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c402:	f7fb f927 	bl	8007654 <HAL_GetTick>
 800c406:	4602      	mov	r2, r0
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c40e:	429a      	cmp	r2, r3
 800c410:	d807      	bhi.n	800c422 <HAL_SPI_TransmitReceive+0x1d8>
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c418:	d003      	beq.n	800c422 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c420:	e0a7      	b.n	800c572 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c426:	b29b      	uxth	r3, r3
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1a6      	bne.n	800c37a <HAL_SPI_TransmitReceive+0x130>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c430:	b29b      	uxth	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1a1      	bne.n	800c37a <HAL_SPI_TransmitReceive+0x130>
 800c436:	e07c      	b.n	800c532 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <HAL_SPI_TransmitReceive+0x1fc>
 800c440:	8b7b      	ldrh	r3, [r7, #26]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d16b      	bne.n	800c51e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	330c      	adds	r3, #12
 800c450:	7812      	ldrb	r2, [r2, #0]
 800c452:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c462:	b29b      	uxth	r3, r3
 800c464:	3b01      	subs	r3, #1
 800c466:	b29a      	uxth	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c46c:	e057      	b.n	800c51e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d11c      	bne.n	800c4b6 <HAL_SPI_TransmitReceive+0x26c>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c480:	b29b      	uxth	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d017      	beq.n	800c4b6 <HAL_SPI_TransmitReceive+0x26c>
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d114      	bne.n	800c4b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	330c      	adds	r3, #12
 800c496:	7812      	ldrb	r2, [r2, #0]
 800c498:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f003 0301 	and.w	r3, r3, #1
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d119      	bne.n	800c4f8 <HAL_SPI_TransmitReceive+0x2ae>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d014      	beq.n	800c4f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68da      	ldr	r2, [r3, #12]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d8:	b2d2      	uxtb	r2, r2
 800c4da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c4f8:	f7fb f8ac 	bl	8007654 <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c504:	429a      	cmp	r2, r3
 800c506:	d803      	bhi.n	800c510 <HAL_SPI_TransmitReceive+0x2c6>
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c50e:	d102      	bne.n	800c516 <HAL_SPI_TransmitReceive+0x2cc>
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	2b00      	cmp	r3, #0
 800c514:	d103      	bne.n	800c51e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c51c:	e029      	b.n	800c572 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c522:	b29b      	uxth	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1a2      	bne.n	800c46e <HAL_SPI_TransmitReceive+0x224>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d19d      	bne.n	800c46e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 f8f8 	bl	800c72c <SPI_EndRxTxTransaction>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d006      	beq.n	800c550 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2220      	movs	r2, #32
 800c54c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c54e:	e010      	b.n	800c572 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10b      	bne.n	800c570 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c558:	2300      	movs	r3, #0
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	617b      	str	r3, [r7, #20]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	e000      	b.n	800c572 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c586:	4618      	mov	r0, r3
 800c588:	3730      	adds	r7, #48	; 0x30
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b084      	sub	sp, #16
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	603b      	str	r3, [r7, #0]
 800c59a:	4613      	mov	r3, r2
 800c59c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c59e:	e04c      	b.n	800c63a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5a6:	d048      	beq.n	800c63a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c5a8:	f7fb f854 	bl	8007654 <HAL_GetTick>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d902      	bls.n	800c5be <SPI_WaitFlagStateUntilTimeout+0x30>
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d13d      	bne.n	800c63a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c5cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5d6:	d111      	bne.n	800c5fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e0:	d004      	beq.n	800c5ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ea:	d107      	bne.n	800c5fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c604:	d10f      	bne.n	800c626 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c614:	601a      	str	r2, [r3, #0]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e00f      	b.n	800c65a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	4013      	ands	r3, r2
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	429a      	cmp	r2, r3
 800c648:	bf0c      	ite	eq
 800c64a:	2301      	moveq	r3, #1
 800c64c:	2300      	movne	r3, #0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	461a      	mov	r2, r3
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	429a      	cmp	r2, r3
 800c656:	d1a3      	bne.n	800c5a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b086      	sub	sp, #24
 800c666:	af02      	add	r7, sp, #8
 800c668:	60f8      	str	r0, [r7, #12]
 800c66a:	60b9      	str	r1, [r7, #8]
 800c66c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c676:	d111      	bne.n	800c69c <SPI_EndRxTransaction+0x3a>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c680:	d004      	beq.n	800c68c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c68a:	d107      	bne.n	800c69c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c69a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6a4:	d12a      	bne.n	800c6fc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ae:	d012      	beq.n	800c6d6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	2180      	movs	r1, #128	; 0x80
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f7ff ff67 	bl	800c58e <SPI_WaitFlagStateUntilTimeout>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d02d      	beq.n	800c722 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ca:	f043 0220 	orr.w	r2, r3, #32
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c6d2:	2303      	movs	r3, #3
 800c6d4:	e026      	b.n	800c724 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	2101      	movs	r1, #1
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7ff ff54 	bl	800c58e <SPI_WaitFlagStateUntilTimeout>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d01a      	beq.n	800c722 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f0:	f043 0220 	orr.w	r2, r3, #32
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e013      	b.n	800c724 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2200      	movs	r2, #0
 800c704:	2101      	movs	r1, #1
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7ff ff41 	bl	800c58e <SPI_WaitFlagStateUntilTimeout>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d007      	beq.n	800c722 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c716:	f043 0220 	orr.w	r2, r3, #32
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e000      	b.n	800c724 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af02      	add	r7, sp, #8
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c738:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <SPI_EndRxTxTransaction+0x7c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a1b      	ldr	r2, [pc, #108]	; (800c7ac <SPI_EndRxTxTransaction+0x80>)
 800c73e:	fba2 2303 	umull	r2, r3, r2, r3
 800c742:	0d5b      	lsrs	r3, r3, #21
 800c744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c748:	fb02 f303 	mul.w	r3, r2, r3
 800c74c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c756:	d112      	bne.n	800c77e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2200      	movs	r2, #0
 800c760:	2180      	movs	r1, #128	; 0x80
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f7ff ff13 	bl	800c58e <SPI_WaitFlagStateUntilTimeout>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d016      	beq.n	800c79c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c772:	f043 0220 	orr.w	r2, r3, #32
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c77a:	2303      	movs	r3, #3
 800c77c:	e00f      	b.n	800c79e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00a      	beq.n	800c79a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	3b01      	subs	r3, #1
 800c788:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c794:	2b80      	cmp	r3, #128	; 0x80
 800c796:	d0f2      	beq.n	800c77e <SPI_EndRxTxTransaction+0x52>
 800c798:	e000      	b.n	800c79c <SPI_EndRxTxTransaction+0x70>
        break;
 800c79a:	bf00      	nop
  }

  return HAL_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3718      	adds	r7, #24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20000168 	.word	0x20000168
 800c7ac:	165e9f81 	.word	0x165e9f81

0800c7b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	b480      	push	{r7}
 800c7b4:	b085      	sub	sp, #20
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	f107 001c 	add.w	r0, r7, #28
 800c7be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c7c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c7ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c7ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c7d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c7d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c7da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c7ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	b004      	add	sp, #16
 800c804:	4770      	bx	lr

0800c806 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c814:	4618      	mov	r0, r3
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2203      	movs	r2, #3
 800c84e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c850:	2002      	movs	r0, #2
 800c852:	f7fa ff0b 	bl	800766c <HAL_Delay>
  
  return HAL_OK;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 0303 	and.w	r3, r3, #3
}
 800c870:	4618      	mov	r0, r3
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c89a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c8a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c8a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c8b6:	f023 030f 	bic.w	r3, r3, #15
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	431a      	orrs	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	b2db      	uxtb	r3, r3
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b085      	sub	sp, #20
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	3314      	adds	r3, #20
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
}  
 800c904:	4618      	mov	r0, r3
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c936:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c93c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c942:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	4313      	orrs	r3, r2
 800c948:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	431a      	orrs	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c95a:	2300      	movs	r3, #0

}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c976:	2310      	movs	r3, #16
 800c978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c97a:	2340      	movs	r3, #64	; 0x40
 800c97c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c97e:	2300      	movs	r3, #0
 800c980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c986:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c988:	f107 0308 	add.w	r3, r7, #8
 800c98c:	4619      	mov	r1, r3
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7ff ff74 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c994:	f241 3288 	movw	r2, #5000	; 0x1388
 800c998:	2110      	movs	r1, #16
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fa40 	bl	800ce20 <SDMMC_GetCmdResp1>
 800c9a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3720      	adds	r7, #32
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c9ba:	2311      	movs	r3, #17
 800c9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9be:	2340      	movs	r3, #64	; 0x40
 800c9c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9cc:	f107 0308 	add.w	r3, r7, #8
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff ff52 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9dc:	2111      	movs	r1, #17
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fa1e 	bl	800ce20 <SDMMC_GetCmdResp1>
 800c9e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9e6:	69fb      	ldr	r3, [r7, #28]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c9fe:	2312      	movs	r3, #18
 800ca00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca02:	2340      	movs	r3, #64	; 0x40
 800ca04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca10:	f107 0308 	add.w	r3, r7, #8
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff ff30 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ca1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca20:	2112      	movs	r1, #18
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f9fc 	bl	800ce20 <SDMMC_GetCmdResp1>
 800ca28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ca42:	2318      	movs	r3, #24
 800ca44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca46:	2340      	movs	r3, #64	; 0x40
 800ca48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca54:	f107 0308 	add.w	r3, r7, #8
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7ff ff0e 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ca60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca64:	2118      	movs	r1, #24
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f9da 	bl	800ce20 <SDMMC_GetCmdResp1>
 800ca6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3720      	adds	r7, #32
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b088      	sub	sp, #32
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ca86:	2319      	movs	r3, #25
 800ca88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca8a:	2340      	movs	r3, #64	; 0x40
 800ca8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca98:	f107 0308 	add.w	r3, r7, #8
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff feec 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800caa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800caa8:	2119      	movs	r1, #25
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f9b8 	bl	800ce20 <SDMMC_GetCmdResp1>
 800cab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab2:	69fb      	ldr	r3, [r7, #28]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3720      	adds	r7, #32
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cac4:	2300      	movs	r3, #0
 800cac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cac8:	230c      	movs	r3, #12
 800caca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cacc:	2340      	movs	r3, #64	; 0x40
 800cace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cad0:	2300      	movs	r3, #0
 800cad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cad8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cada:	f107 0308 	add.w	r3, r7, #8
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff fecb 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cae6:	4a05      	ldr	r2, [pc, #20]	; (800cafc <SDMMC_CmdStopTransfer+0x40>)
 800cae8:	210c      	movs	r1, #12
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f998 	bl	800ce20 <SDMMC_GetCmdResp1>
 800caf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caf2:	69fb      	ldr	r3, [r7, #28]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3720      	adds	r7, #32
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	05f5e100 	.word	0x05f5e100

0800cb00 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08a      	sub	sp, #40	; 0x28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cb10:	2307      	movs	r3, #7
 800cb12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb14:	2340      	movs	r3, #64	; 0x40
 800cb16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb20:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb22:	f107 0310 	add.w	r3, r7, #16
 800cb26:	4619      	mov	r1, r3
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f7ff fea7 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cb2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb32:	2107      	movs	r1, #7
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 f973 	bl	800ce20 <SDMMC_GetCmdResp1>
 800cb3a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3728      	adds	r7, #40	; 0x28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b088      	sub	sp, #32
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cb56:	2300      	movs	r3, #0
 800cb58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb64:	f107 0308 	add.w	r3, r7, #8
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7ff fe86 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 f92d 	bl	800cdd0 <SDMMC_GetCmdError>
 800cb76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb78:	69fb      	ldr	r3, [r7, #28]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3720      	adds	r7, #32
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b088      	sub	sp, #32
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cb8a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cb8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cb90:	2308      	movs	r3, #8
 800cb92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb94:	2340      	movs	r3, #64	; 0x40
 800cb96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cba0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cba2:	f107 0308 	add.w	r3, r7, #8
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fe67 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fb16 	bl	800d1e0 <SDMMC_GetCmdResp7>
 800cbb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbb6:	69fb      	ldr	r3, [r7, #28]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3720      	adds	r7, #32
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b088      	sub	sp, #32
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cbce:	2337      	movs	r3, #55	; 0x37
 800cbd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbd2:	2340      	movs	r3, #64	; 0x40
 800cbd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbe0:	f107 0308 	add.w	r3, r7, #8
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff fe48 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cbec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbf0:	2137      	movs	r1, #55	; 0x37
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f914 	bl	800ce20 <SDMMC_GetCmdResp1>
 800cbf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbfa:	69fb      	ldr	r3, [r7, #28]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3720      	adds	r7, #32
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cc1a:	2329      	movs	r3, #41	; 0x29
 800cc1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc1e:	2340      	movs	r3, #64	; 0x40
 800cc20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc2c:	f107 0308 	add.w	r3, r7, #8
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fe22 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fa23 	bl	800d084 <SDMMC_GetCmdResp3>
 800cc3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc40:	69fb      	ldr	r3, [r7, #28]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3720      	adds	r7, #32
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b088      	sub	sp, #32
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cc58:	2306      	movs	r3, #6
 800cc5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc5c:	2340      	movs	r3, #64	; 0x40
 800cc5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc6a:	f107 0308 	add.w	r3, r7, #8
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff fe03 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cc76:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc7a:	2106      	movs	r1, #6
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f8cf 	bl	800ce20 <SDMMC_GetCmdResp1>
 800cc82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc84:	69fb      	ldr	r3, [r7, #28]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b088      	sub	sp, #32
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cc96:	2300      	movs	r3, #0
 800cc98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cc9a:	2333      	movs	r3, #51	; 0x33
 800cc9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc9e:	2340      	movs	r3, #64	; 0x40
 800cca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cca2:	2300      	movs	r3, #0
 800cca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccac:	f107 0308 	add.w	r3, r7, #8
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff fde2 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ccb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccbc:	2133      	movs	r1, #51	; 0x33
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f8ae 	bl	800ce20 <SDMMC_GetCmdResp1>
 800ccc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ccdc:	2302      	movs	r3, #2
 800ccde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cce0:	23c0      	movs	r3, #192	; 0xc0
 800cce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cce4:	2300      	movs	r3, #0
 800cce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccee:	f107 0308 	add.w	r3, r7, #8
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff fdc1 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f97c 	bl	800cff8 <SDMMC_GetCmdResp2>
 800cd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd02:	69fb      	ldr	r3, [r7, #28]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3720      	adds	r7, #32
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cd1a:	2309      	movs	r3, #9
 800cd1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cd1e:	23c0      	movs	r3, #192	; 0xc0
 800cd20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd2c:	f107 0308 	add.w	r3, r7, #8
 800cd30:	4619      	mov	r1, r3
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff fda2 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f95d 	bl	800cff8 <SDMMC_GetCmdResp2>
 800cd3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd40:	69fb      	ldr	r3, [r7, #28]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3720      	adds	r7, #32
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b088      	sub	sp, #32
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd54:	2300      	movs	r3, #0
 800cd56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd5c:	2340      	movs	r3, #64	; 0x40
 800cd5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd60:	2300      	movs	r3, #0
 800cd62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd6a:	f107 0308 	add.w	r3, r7, #8
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fd83 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	2103      	movs	r1, #3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f9bc 	bl	800d0f8 <SDMMC_GetCmdResp6>
 800cd80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd82:	69fb      	ldr	r3, [r7, #28]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3720      	adds	r7, #32
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b088      	sub	sp, #32
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cd9a:	230d      	movs	r3, #13
 800cd9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd9e:	2340      	movs	r3, #64	; 0x40
 800cda0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cda2:	2300      	movs	r3, #0
 800cda4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cda6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdac:	f107 0308 	add.w	r3, r7, #8
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7ff fd62 	bl	800c87c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cdb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdbc:	210d      	movs	r1, #13
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f82e 	bl	800ce20 <SDMMC_GetCmdResp1>
 800cdc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdc6:	69fb      	ldr	r3, [r7, #28]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3720      	adds	r7, #32
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cdd0:	b490      	push	{r4, r7}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdd8:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <SDMMC_GetCmdError+0x48>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a0f      	ldr	r2, [pc, #60]	; (800ce1c <SDMMC_GetCmdError+0x4c>)
 800cdde:	fba2 2303 	umull	r2, r3, r2, r3
 800cde2:	0a5b      	lsrs	r3, r3, #9
 800cde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cdec:	4623      	mov	r3, r4
 800cdee:	1e5c      	subs	r4, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d102      	bne.n	800cdfa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdf8:	e009      	b.n	800ce0e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0f2      	beq.n	800cdec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	22c5      	movs	r2, #197	; 0xc5
 800ce0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bc90      	pop	{r4, r7}
 800ce16:	4770      	bx	lr
 800ce18:	20000168 	.word	0x20000168
 800ce1c:	10624dd3 	.word	0x10624dd3

0800ce20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ce20:	b590      	push	{r4, r7, lr}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce2e:	4b6f      	ldr	r3, [pc, #444]	; (800cfec <SDMMC_GetCmdResp1+0x1cc>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a6f      	ldr	r2, [pc, #444]	; (800cff0 <SDMMC_GetCmdResp1+0x1d0>)
 800ce34:	fba2 2303 	umull	r2, r3, r2, r3
 800ce38:	0a5b      	lsrs	r3, r3, #9
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce40:	4623      	mov	r3, r4
 800ce42:	1e5c      	subs	r4, r3, #1
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d102      	bne.n	800ce4e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce4c:	e0c9      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce52:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d0f0      	beq.n	800ce40 <SDMMC_GetCmdResp1+0x20>
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1eb      	bne.n	800ce40 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d004      	beq.n	800ce7e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2204      	movs	r2, #4
 800ce78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce7a:	2304      	movs	r3, #4
 800ce7c:	e0b1      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d004      	beq.n	800ce94 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce90:	2301      	movs	r3, #1
 800ce92:	e0a6      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	22c5      	movs	r2, #197	; 0xc5
 800ce98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7ff fd18 	bl	800c8d0 <SDIO_GetCommandResponse>
 800cea0:	4603      	mov	r3, r0
 800cea2:	461a      	mov	r2, r3
 800cea4:	7afb      	ldrb	r3, [r7, #11]
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d001      	beq.n	800ceae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e099      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ceae:	2100      	movs	r1, #0
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f7ff fd1a 	bl	800c8ea <SDIO_GetResponse>
 800ceb6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4b4e      	ldr	r3, [pc, #312]	; (800cff4 <SDMMC_GetCmdResp1+0x1d4>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e08d      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	da02      	bge.n	800ced2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ced0:	e087      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cedc:	2340      	movs	r3, #64	; 0x40
 800cede:	e080      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ceea:	2380      	movs	r3, #128	; 0x80
 800ceec:	e079      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cefc:	e071      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf0c:	e069      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf1c:	e061      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf2c:	e059      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf3c:	e051      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf4c:	e049      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cf58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf5c:	e041      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cf68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf6c:	e039      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cf78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf7c:	e031      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cf88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cf8c:	e029      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cf98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf9c:	e021      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cfa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cfac:	e019      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cfb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cfbc:	e011      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cfc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cfcc:	e009      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	f003 0308 	and.w	r3, r3, #8
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cfd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cfdc:	e001      	b.n	800cfe2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd90      	pop	{r4, r7, pc}
 800cfea:	bf00      	nop
 800cfec:	20000168 	.word	0x20000168
 800cff0:	10624dd3 	.word	0x10624dd3
 800cff4:	fdffe008 	.word	0xfdffe008

0800cff8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cff8:	b490      	push	{r4, r7}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d000:	4b1e      	ldr	r3, [pc, #120]	; (800d07c <SDMMC_GetCmdResp2+0x84>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a1e      	ldr	r2, [pc, #120]	; (800d080 <SDMMC_GetCmdResp2+0x88>)
 800d006:	fba2 2303 	umull	r2, r3, r2, r3
 800d00a:	0a5b      	lsrs	r3, r3, #9
 800d00c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d010:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d014:	4623      	mov	r3, r4
 800d016:	1e5c      	subs	r4, r3, #1
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d102      	bne.n	800d022 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d01c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d020:	e026      	b.n	800d070 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d026:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0f0      	beq.n	800d014 <SDMMC_GetCmdResp2+0x1c>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1eb      	bne.n	800d014 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2204      	movs	r2, #4
 800d04c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d04e:	2304      	movs	r3, #4
 800d050:	e00e      	b.n	800d070 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d064:	2301      	movs	r3, #1
 800d066:	e003      	b.n	800d070 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	22c5      	movs	r2, #197	; 0xc5
 800d06c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bc90      	pop	{r4, r7}
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	20000168 	.word	0x20000168
 800d080:	10624dd3 	.word	0x10624dd3

0800d084 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d084:	b490      	push	{r4, r7}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d08c:	4b18      	ldr	r3, [pc, #96]	; (800d0f0 <SDMMC_GetCmdResp3+0x6c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a18      	ldr	r2, [pc, #96]	; (800d0f4 <SDMMC_GetCmdResp3+0x70>)
 800d092:	fba2 2303 	umull	r2, r3, r2, r3
 800d096:	0a5b      	lsrs	r3, r3, #9
 800d098:	f241 3288 	movw	r2, #5000	; 0x1388
 800d09c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d0a0:	4623      	mov	r3, r4
 800d0a2:	1e5c      	subs	r4, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d102      	bne.n	800d0ae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0ac:	e01b      	b.n	800d0e6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0f0      	beq.n	800d0a0 <SDMMC_GetCmdResp3+0x1c>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1eb      	bne.n	800d0a0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0cc:	f003 0304 	and.w	r3, r3, #4
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2204      	movs	r2, #4
 800d0d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0da:	2304      	movs	r3, #4
 800d0dc:	e003      	b.n	800d0e6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	22c5      	movs	r2, #197	; 0xc5
 800d0e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bc90      	pop	{r4, r7}
 800d0ee:	4770      	bx	lr
 800d0f0:	20000168 	.word	0x20000168
 800d0f4:	10624dd3 	.word	0x10624dd3

0800d0f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d0f8:	b590      	push	{r4, r7, lr}
 800d0fa:	b087      	sub	sp, #28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	460b      	mov	r3, r1
 800d102:	607a      	str	r2, [r7, #4]
 800d104:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d106:	4b34      	ldr	r3, [pc, #208]	; (800d1d8 <SDMMC_GetCmdResp6+0xe0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a34      	ldr	r2, [pc, #208]	; (800d1dc <SDMMC_GetCmdResp6+0xe4>)
 800d10c:	fba2 2303 	umull	r2, r3, r2, r3
 800d110:	0a5b      	lsrs	r3, r3, #9
 800d112:	f241 3288 	movw	r2, #5000	; 0x1388
 800d116:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d11a:	4623      	mov	r3, r4
 800d11c:	1e5c      	subs	r4, r3, #1
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d102      	bne.n	800d128 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d122:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d126:	e052      	b.n	800d1ce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d134:	2b00      	cmp	r3, #0
 800d136:	d0f0      	beq.n	800d11a <SDMMC_GetCmdResp6+0x22>
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1eb      	bne.n	800d11a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d146:	f003 0304 	and.w	r3, r3, #4
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d004      	beq.n	800d158 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2204      	movs	r2, #4
 800d152:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d154:	2304      	movs	r3, #4
 800d156:	e03a      	b.n	800d1ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d15c:	f003 0301 	and.w	r3, r3, #1
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2201      	movs	r2, #1
 800d168:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e02f      	b.n	800d1ce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f7ff fbae 	bl	800c8d0 <SDIO_GetCommandResponse>
 800d174:	4603      	mov	r3, r0
 800d176:	461a      	mov	r2, r3
 800d178:	7afb      	ldrb	r3, [r7, #11]
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d001      	beq.n	800d182 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d17e:	2301      	movs	r3, #1
 800d180:	e025      	b.n	800d1ce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	22c5      	movs	r2, #197	; 0xc5
 800d186:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d188:	2100      	movs	r1, #0
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7ff fbad 	bl	800c8ea <SDIO_GetResponse>
 800d190:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d106      	bne.n	800d1aa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	0c1b      	lsrs	r3, r3, #16
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e011      	b.n	800d1ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d1b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d1b8:	e009      	b.n	800d1ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1c8:	e001      	b.n	800d1ce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd90      	pop	{r4, r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20000168 	.word	0x20000168
 800d1dc:	10624dd3 	.word	0x10624dd3

0800d1e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d1e0:	b490      	push	{r4, r7}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1e8:	4b21      	ldr	r3, [pc, #132]	; (800d270 <SDMMC_GetCmdResp7+0x90>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a21      	ldr	r2, [pc, #132]	; (800d274 <SDMMC_GetCmdResp7+0x94>)
 800d1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f2:	0a5b      	lsrs	r3, r3, #9
 800d1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d1fc:	4623      	mov	r3, r4
 800d1fe:	1e5c      	subs	r4, r3, #1
 800d200:	2b00      	cmp	r3, #0
 800d202:	d102      	bne.n	800d20a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d208:	e02c      	b.n	800d264 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0f0      	beq.n	800d1fc <SDMMC_GetCmdResp7+0x1c>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1eb      	bne.n	800d1fc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d004      	beq.n	800d23a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2204      	movs	r2, #4
 800d234:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d236:	2304      	movs	r3, #4
 800d238:	e014      	b.n	800d264 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	d004      	beq.n	800d250 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e009      	b.n	800d264 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2240      	movs	r2, #64	; 0x40
 800d260:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d262:	2300      	movs	r3, #0
  
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bc90      	pop	{r4, r7}
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	20000168 	.word	0x20000168
 800d274:	10624dd3 	.word	0x10624dd3

0800d278 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d27c:	4904      	ldr	r1, [pc, #16]	; (800d290 <MX_FATFS_Init+0x18>)
 800d27e:	4805      	ldr	r0, [pc, #20]	; (800d294 <MX_FATFS_Init+0x1c>)
 800d280:	f003 fb68 	bl	8010954 <FATFS_LinkDriver>
 800d284:	4603      	mov	r3, r0
 800d286:	461a      	mov	r2, r3
 800d288:	4b03      	ldr	r3, [pc, #12]	; (800d298 <MX_FATFS_Init+0x20>)
 800d28a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d28c:	bf00      	nop
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	2000e1d0 	.word	0x2000e1d0
 800d294:	08016aa0 	.word	0x08016aa0
 800d298:	2000e1cc 	.word	0x2000e1cc

0800d29c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d29c:	b480      	push	{r7}
 800d29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d2a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d2b6:	f000 f896 	bl	800d3e6 <BSP_SD_IsDetected>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d001      	beq.n	800d2c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e012      	b.n	800d2ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d2c4:	480b      	ldr	r0, [pc, #44]	; (800d2f4 <BSP_SD_Init+0x48>)
 800d2c6:	f7fd fa21 	bl	800a70c <HAL_SD_Init>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d109      	bne.n	800d2e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d2d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d2d8:	4806      	ldr	r0, [pc, #24]	; (800d2f4 <BSP_SD_Init+0x48>)
 800d2da:	f7fd ffe1 	bl	800b2a0 <HAL_SD_ConfigWideBusOperation>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d2e8:	79fb      	ldrb	r3, [r7, #7]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	2000e094 	.word	0x2000e094

0800d2f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	68f9      	ldr	r1, [r7, #12]
 800d30e:	4806      	ldr	r0, [pc, #24]	; (800d328 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d310:	f7fd fa8c 	bl	800a82c <HAL_SD_ReadBlocks_DMA>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3718      	adds	r7, #24
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	2000e094 	.word	0x2000e094

0800d32c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	68f9      	ldr	r1, [r7, #12]
 800d342:	4806      	ldr	r0, [pc, #24]	; (800d35c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d344:	f7fd fb5c 	bl	800aa00 <HAL_SD_WriteBlocks_DMA>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d34e:	2301      	movs	r3, #1
 800d350:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d352:	7dfb      	ldrb	r3, [r7, #23]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3718      	adds	r7, #24
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	2000e094 	.word	0x2000e094

0800d360 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d364:	4805      	ldr	r0, [pc, #20]	; (800d37c <BSP_SD_GetCardState+0x1c>)
 800d366:	f7fe f817 	bl	800b398 <HAL_SD_GetCardState>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b04      	cmp	r3, #4
 800d36e:	bf14      	ite	ne
 800d370:	2301      	movne	r3, #1
 800d372:	2300      	moveq	r3, #0
 800d374:	b2db      	uxtb	r3, r3
}
 800d376:	4618      	mov	r0, r3
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	2000e094 	.word	0x2000e094

0800d380 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	4803      	ldr	r0, [pc, #12]	; (800d398 <BSP_SD_GetCardInfo+0x18>)
 800d38c:	f7fd ff5c 	bl	800b248 <HAL_SD_GetCardInfo>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	2000e094 	.word	0x2000e094

0800d39c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d3a4:	f000 f818 	bl	800d3d8 <BSP_SD_AbortCallback>
}
 800d3a8:	bf00      	nop
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d3b8:	f000 f9aa 	bl	800d710 <BSP_SD_WriteCpltCallback>
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d3cc:	f000 f9ac 	bl	800d728 <BSP_SD_ReadCpltCallback>
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	af00      	add	r7, sp, #0

}
 800d3dc:	bf00      	nop
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d3f0:	f000 f80c 	bl	800d40c <BSP_PlatformIsDetected>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	b2db      	uxtb	r3, r3
}
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d412:	2301      	movs	r3, #1
 800d414:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d416:	2101      	movs	r1, #1
 800d418:	4807      	ldr	r0, [pc, #28]	; (800d438 <BSP_PlatformIsDetected+0x2c>)
 800d41a:	f7fb fc3f 	bl	8008c9c <HAL_GPIO_ReadPin>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d424:	2300      	movs	r3, #0
 800d426:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 800d428:	2301      	movs	r3, #1
 800d42a:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 800d42c:	79fb      	ldrb	r3, [r7, #7]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	40020c00 	.word	0x40020c00

0800d43c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d444:	f7fa f906 	bl	8007654 <HAL_GetTick>
 800d448:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d44a:	e006      	b.n	800d45a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d44c:	f7ff ff88 	bl	800d360 <BSP_SD_GetCardState>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d101      	bne.n	800d45a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d456:	2300      	movs	r3, #0
 800d458:	e009      	b.n	800d46e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d45a:	f7fa f8fb 	bl	8007654 <HAL_GetTick>
 800d45e:	4602      	mov	r2, r0
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	429a      	cmp	r2, r3
 800d468:	d8f0      	bhi.n	800d44c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d46a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	4603      	mov	r3, r0
 800d480:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d482:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <SD_CheckStatus+0x38>)
 800d484:	2201      	movs	r2, #1
 800d486:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d488:	f7ff ff6a 	bl	800d360 <BSP_SD_GetCardState>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d107      	bne.n	800d4a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <SD_CheckStatus+0x38>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	b2db      	uxtb	r3, r3
 800d498:	f023 0301 	bic.w	r3, r3, #1
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	4b04      	ldr	r3, [pc, #16]	; (800d4b0 <SD_CheckStatus+0x38>)
 800d4a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d4a2:	4b03      	ldr	r3, [pc, #12]	; (800d4b0 <SD_CheckStatus+0x38>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b2db      	uxtb	r3, r3
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20000175 	.word	0x20000175

0800d4b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d4be:	f7ff fef5 	bl	800d2ac <BSP_SD_Init>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d107      	bne.n	800d4d8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d4c8:	79fb      	ldrb	r3, [r7, #7]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ffd4 	bl	800d478 <SD_CheckStatus>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <SD_initialize+0x34>)
 800d4d6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d4d8:	4b03      	ldr	r3, [pc, #12]	; (800d4e8 <SD_initialize+0x34>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	b2db      	uxtb	r3, r3
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000175 	.word	0x20000175

0800d4ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff ffbd 	bl	800d478 <SD_CheckStatus>
 800d4fe:	4603      	mov	r3, r0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60b9      	str	r1, [r7, #8]
 800d510:	607a      	str	r2, [r7, #4]
 800d512:	603b      	str	r3, [r7, #0]
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d51c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d520:	f7ff ff8c 	bl	800d43c <SD_CheckStatusWithTimeout>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	da01      	bge.n	800d52e <SD_read+0x26>
  {
    return res;
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	e03b      	b.n	800d5a6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	68b8      	ldr	r0, [r7, #8]
 800d534:	f7ff fee0 	bl	800d2f8 <BSP_SD_ReadBlocks_DMA>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d132      	bne.n	800d5a4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d53e:	4b1c      	ldr	r3, [pc, #112]	; (800d5b0 <SD_read+0xa8>)
 800d540:	2200      	movs	r2, #0
 800d542:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d544:	f7fa f886 	bl	8007654 <HAL_GetTick>
 800d548:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d54a:	bf00      	nop
 800d54c:	4b18      	ldr	r3, [pc, #96]	; (800d5b0 <SD_read+0xa8>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d108      	bne.n	800d566 <SD_read+0x5e>
 800d554:	f7fa f87e 	bl	8007654 <HAL_GetTick>
 800d558:	4602      	mov	r2, r0
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	f247 522f 	movw	r2, #29999	; 0x752f
 800d562:	4293      	cmp	r3, r2
 800d564:	d9f2      	bls.n	800d54c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d566:	4b12      	ldr	r3, [pc, #72]	; (800d5b0 <SD_read+0xa8>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d102      	bne.n	800d574 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	75fb      	strb	r3, [r7, #23]
 800d572:	e017      	b.n	800d5a4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d574:	4b0e      	ldr	r3, [pc, #56]	; (800d5b0 <SD_read+0xa8>)
 800d576:	2200      	movs	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d57a:	f7fa f86b 	bl	8007654 <HAL_GetTick>
 800d57e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d580:	e007      	b.n	800d592 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d582:	f7ff feed 	bl	800d360 <BSP_SD_GetCardState>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d102      	bne.n	800d592 <SD_read+0x8a>
          {
            res = RES_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d590:	e008      	b.n	800d5a4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d592:	f7fa f85f 	bl	8007654 <HAL_GetTick>
 800d596:	4602      	mov	r2, r0
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d9ee      	bls.n	800d582 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	20000868 	.word	0x20000868

0800d5b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	607a      	str	r2, [r7, #4]
 800d5be:	603b      	str	r3, [r7, #0]
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d5c8:	4b24      	ldr	r3, [pc, #144]	; (800d65c <SD_write+0xa8>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d5ce:	f247 5030 	movw	r0, #30000	; 0x7530
 800d5d2:	f7ff ff33 	bl	800d43c <SD_CheckStatusWithTimeout>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	da01      	bge.n	800d5e0 <SD_write+0x2c>
  {
    return res;
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
 800d5de:	e038      	b.n	800d652 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	68b8      	ldr	r0, [r7, #8]
 800d5e6:	f7ff fea1 	bl	800d32c <BSP_SD_WriteBlocks_DMA>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d12f      	bne.n	800d650 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d5f0:	f7fa f830 	bl	8007654 <HAL_GetTick>
 800d5f4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d5f6:	bf00      	nop
 800d5f8:	4b18      	ldr	r3, [pc, #96]	; (800d65c <SD_write+0xa8>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d108      	bne.n	800d612 <SD_write+0x5e>
 800d600:	f7fa f828 	bl	8007654 <HAL_GetTick>
 800d604:	4602      	mov	r2, r0
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d60e:	4293      	cmp	r3, r2
 800d610:	d9f2      	bls.n	800d5f8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d612:	4b12      	ldr	r3, [pc, #72]	; (800d65c <SD_write+0xa8>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d102      	bne.n	800d620 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	75fb      	strb	r3, [r7, #23]
 800d61e:	e017      	b.n	800d650 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d620:	4b0e      	ldr	r3, [pc, #56]	; (800d65c <SD_write+0xa8>)
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d626:	f7fa f815 	bl	8007654 <HAL_GetTick>
 800d62a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d62c:	e007      	b.n	800d63e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d62e:	f7ff fe97 	bl	800d360 <BSP_SD_GetCardState>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d102      	bne.n	800d63e <SD_write+0x8a>
          {
            res = RES_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	75fb      	strb	r3, [r7, #23]
            break;
 800d63c:	e008      	b.n	800d650 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d63e:	f7fa f809 	bl	8007654 <HAL_GetTick>
 800d642:	4602      	mov	r2, r0
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	f247 522f 	movw	r2, #29999	; 0x752f
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d9ee      	bls.n	800d62e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d650:	7dfb      	ldrb	r3, [r7, #23]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3718      	adds	r7, #24
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20000864 	.word	0x20000864

0800d660 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08c      	sub	sp, #48	; 0x30
 800d664:	af00      	add	r7, sp, #0
 800d666:	4603      	mov	r3, r0
 800d668:	603a      	str	r2, [r7, #0]
 800d66a:	71fb      	strb	r3, [r7, #7]
 800d66c:	460b      	mov	r3, r1
 800d66e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d676:	4b25      	ldr	r3, [pc, #148]	; (800d70c <SD_ioctl+0xac>)
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	f003 0301 	and.w	r3, r3, #1
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <SD_ioctl+0x28>
 800d684:	2303      	movs	r3, #3
 800d686:	e03c      	b.n	800d702 <SD_ioctl+0xa2>

  switch (cmd)
 800d688:	79bb      	ldrb	r3, [r7, #6]
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d834      	bhi.n	800d6f8 <SD_ioctl+0x98>
 800d68e:	a201      	add	r2, pc, #4	; (adr r2, 800d694 <SD_ioctl+0x34>)
 800d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d694:	0800d6a5 	.word	0x0800d6a5
 800d698:	0800d6ad 	.word	0x0800d6ad
 800d69c:	0800d6c5 	.word	0x0800d6c5
 800d6a0:	0800d6df 	.word	0x0800d6df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6aa:	e028      	b.n	800d6fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6ac:	f107 030c 	add.w	r3, r7, #12
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff fe65 	bl	800d380 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6c2:	e01c      	b.n	800d6fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6c4:	f107 030c 	add.w	r3, r7, #12
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff fe59 	bl	800d380 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6dc:	e00f      	b.n	800d6fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6de:	f107 030c 	add.w	r3, r7, #12
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7ff fe4c 	bl	800d380 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ea:	0a5a      	lsrs	r2, r3, #9
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6f6:	e002      	b.n	800d6fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d6f8:	2304      	movs	r3, #4
 800d6fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d6fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d702:	4618      	mov	r0, r3
 800d704:	3730      	adds	r7, #48	; 0x30
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20000175 	.word	0x20000175

0800d710 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d710:	b480      	push	{r7}
 800d712:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d714:	4b03      	ldr	r3, [pc, #12]	; (800d724 <BSP_SD_WriteCpltCallback+0x14>)
 800d716:	2201      	movs	r2, #1
 800d718:	601a      	str	r2, [r3, #0]
}
 800d71a:	bf00      	nop
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr
 800d724:	20000864 	.word	0x20000864

0800d728 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d728:	b480      	push	{r7}
 800d72a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d72c:	4b03      	ldr	r3, [pc, #12]	; (800d73c <BSP_SD_ReadCpltCallback+0x14>)
 800d72e:	2201      	movs	r2, #1
 800d730:	601a      	str	r2, [r3, #0]
}
 800d732:	bf00      	nop
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	20000868 	.word	0x20000868

0800d740 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d74a:	79fb      	ldrb	r3, [r7, #7]
 800d74c:	4a08      	ldr	r2, [pc, #32]	; (800d770 <disk_status+0x30>)
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	79fa      	ldrb	r2, [r7, #7]
 800d758:	4905      	ldr	r1, [pc, #20]	; (800d770 <disk_status+0x30>)
 800d75a:	440a      	add	r2, r1
 800d75c:	7a12      	ldrb	r2, [r2, #8]
 800d75e:	4610      	mov	r0, r2
 800d760:	4798      	blx	r3
 800d762:	4603      	mov	r3, r0
 800d764:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d766:	7bfb      	ldrb	r3, [r7, #15]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20000894 	.word	0x20000894

0800d774 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	4603      	mov	r3, r0
 800d77c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	4a0d      	ldr	r2, [pc, #52]	; (800d7bc <disk_initialize+0x48>)
 800d786:	5cd3      	ldrb	r3, [r2, r3]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d111      	bne.n	800d7b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d78c:	79fb      	ldrb	r3, [r7, #7]
 800d78e:	4a0b      	ldr	r2, [pc, #44]	; (800d7bc <disk_initialize+0x48>)
 800d790:	2101      	movs	r1, #1
 800d792:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d794:	79fb      	ldrb	r3, [r7, #7]
 800d796:	4a09      	ldr	r2, [pc, #36]	; (800d7bc <disk_initialize+0x48>)
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	79fa      	ldrb	r2, [r7, #7]
 800d7a2:	4906      	ldr	r1, [pc, #24]	; (800d7bc <disk_initialize+0x48>)
 800d7a4:	440a      	add	r2, r1
 800d7a6:	7a12      	ldrb	r2, [r2, #8]
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	4798      	blx	r3
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	20000894 	.word	0x20000894

0800d7c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d7c0:	b590      	push	{r4, r7, lr}
 800d7c2:	b087      	sub	sp, #28
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60b9      	str	r1, [r7, #8]
 800d7c8:	607a      	str	r2, [r7, #4]
 800d7ca:	603b      	str	r3, [r7, #0]
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
 800d7d2:	4a0a      	ldr	r2, [pc, #40]	; (800d7fc <disk_read+0x3c>)
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4413      	add	r3, r2
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	689c      	ldr	r4, [r3, #8]
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	4a07      	ldr	r2, [pc, #28]	; (800d7fc <disk_read+0x3c>)
 800d7e0:	4413      	add	r3, r2
 800d7e2:	7a18      	ldrb	r0, [r3, #8]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	68b9      	ldr	r1, [r7, #8]
 800d7ea:	47a0      	blx	r4
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800d7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	371c      	adds	r7, #28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd90      	pop	{r4, r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000894 	.word	0x20000894

0800d800 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d800:	b590      	push	{r4, r7, lr}
 800d802:	b087      	sub	sp, #28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60b9      	str	r1, [r7, #8]
 800d808:	607a      	str	r2, [r7, #4]
 800d80a:	603b      	str	r3, [r7, #0]
 800d80c:	4603      	mov	r3, r0
 800d80e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d810:	7bfb      	ldrb	r3, [r7, #15]
 800d812:	4a0a      	ldr	r2, [pc, #40]	; (800d83c <disk_write+0x3c>)
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	4413      	add	r3, r2
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	68dc      	ldr	r4, [r3, #12]
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
 800d81e:	4a07      	ldr	r2, [pc, #28]	; (800d83c <disk_write+0x3c>)
 800d820:	4413      	add	r3, r2
 800d822:	7a18      	ldrb	r0, [r3, #8]
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	68b9      	ldr	r1, [r7, #8]
 800d82a:	47a0      	blx	r4
 800d82c:	4603      	mov	r3, r0
 800d82e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d830:	7dfb      	ldrb	r3, [r7, #23]
}
 800d832:	4618      	mov	r0, r3
 800d834:	371c      	adds	r7, #28
 800d836:	46bd      	mov	sp, r7
 800d838:	bd90      	pop	{r4, r7, pc}
 800d83a:	bf00      	nop
 800d83c:	20000894 	.word	0x20000894

0800d840 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	603a      	str	r2, [r7, #0]
 800d84a:	71fb      	strb	r3, [r7, #7]
 800d84c:	460b      	mov	r3, r1
 800d84e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d850:	79fb      	ldrb	r3, [r7, #7]
 800d852:	4a09      	ldr	r2, [pc, #36]	; (800d878 <disk_ioctl+0x38>)
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	79fa      	ldrb	r2, [r7, #7]
 800d85e:	4906      	ldr	r1, [pc, #24]	; (800d878 <disk_ioctl+0x38>)
 800d860:	440a      	add	r2, r1
 800d862:	7a10      	ldrb	r0, [r2, #8]
 800d864:	79b9      	ldrb	r1, [r7, #6]
 800d866:	683a      	ldr	r2, [r7, #0]
 800d868:	4798      	blx	r3
 800d86a:	4603      	mov	r3, r0
 800d86c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	20000894 	.word	0x20000894

0800d87c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3301      	adds	r3, #1
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d88c:	89fb      	ldrh	r3, [r7, #14]
 800d88e:	021b      	lsls	r3, r3, #8
 800d890:	b21a      	sxth	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	b21b      	sxth	r3, r3
 800d898:	4313      	orrs	r3, r2
 800d89a:	b21b      	sxth	r3, r3
 800d89c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d89e:	89fb      	ldrh	r3, [r7, #14]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	3303      	adds	r3, #3
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	021b      	lsls	r3, r3, #8
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	3202      	adds	r2, #2
 800d8c4:	7812      	ldrb	r2, [r2, #0]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	021b      	lsls	r3, r3, #8
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	3201      	adds	r2, #1
 800d8d2:	7812      	ldrb	r2, [r2, #0]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	021b      	lsls	r3, r3, #8
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	7812      	ldrb	r2, [r2, #0]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b083      	sub	sp, #12
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	887a      	ldrh	r2, [r7, #2]
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	887b      	ldrh	r3, [r7, #2]
 800d90c:	0a1b      	lsrs	r3, r3, #8
 800d90e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	1c5a      	adds	r2, r3, #1
 800d914:	607a      	str	r2, [r7, #4]
 800d916:	887a      	ldrh	r2, [r7, #2]
 800d918:	b2d2      	uxtb	r2, r2
 800d91a:	701a      	strb	r2, [r3, #0]
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	1c5a      	adds	r2, r3, #1
 800d936:	607a      	str	r2, [r7, #4]
 800d938:	683a      	ldr	r2, [r7, #0]
 800d93a:	b2d2      	uxtb	r2, r2
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	0a1b      	lsrs	r3, r3, #8
 800d942:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	607a      	str	r2, [r7, #4]
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	b2d2      	uxtb	r2, r2
 800d94e:	701a      	strb	r2, [r3, #0]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	0a1b      	lsrs	r3, r3, #8
 800d954:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	1c5a      	adds	r2, r3, #1
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	b2d2      	uxtb	r2, r2
 800d960:	701a      	strb	r2, [r3, #0]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	0a1b      	lsrs	r3, r3, #8
 800d966:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	607a      	str	r2, [r7, #4]
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	b2d2      	uxtb	r2, r2
 800d972:	701a      	strb	r2, [r3, #0]
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d980:	b480      	push	{r7}
 800d982:	b087      	sub	sp, #28
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00d      	beq.n	800d9b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	1c53      	adds	r3, r2, #1
 800d99e:	613b      	str	r3, [r7, #16]
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	1c59      	adds	r1, r3, #1
 800d9a4:	6179      	str	r1, [r7, #20]
 800d9a6:	7812      	ldrb	r2, [r2, #0]
 800d9a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	607b      	str	r3, [r7, #4]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f1      	bne.n	800d99a <mem_cpy+0x1a>
	}
}
 800d9b6:	bf00      	nop
 800d9b8:	371c      	adds	r7, #28
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d9c2:	b480      	push	{r7}
 800d9c4:	b087      	sub	sp, #28
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	60b9      	str	r1, [r7, #8]
 800d9cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	1c5a      	adds	r2, r3, #1
 800d9d6:	617a      	str	r2, [r7, #20]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	b2d2      	uxtb	r2, r2
 800d9dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	607b      	str	r3, [r7, #4]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1f3      	bne.n	800d9d2 <mem_set+0x10>
}
 800d9ea:	bf00      	nop
 800d9ec:	371c      	adds	r7, #28
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d9f6:	b480      	push	{r7}
 800d9f8:	b089      	sub	sp, #36	; 0x24
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	60f8      	str	r0, [r7, #12]
 800d9fe:	60b9      	str	r1, [r7, #8]
 800da00:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	61fa      	str	r2, [r7, #28]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	4619      	mov	r1, r3
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	61ba      	str	r2, [r7, #24]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	1acb      	subs	r3, r1, r3
 800da22:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3b01      	subs	r3, #1
 800da28:	607b      	str	r3, [r7, #4]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <mem_cmp+0x40>
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0eb      	beq.n	800da0e <mem_cmp+0x18>

	return r;
 800da36:	697b      	ldr	r3, [r7, #20]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3724      	adds	r7, #36	; 0x24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800da4e:	e002      	b.n	800da56 <chk_chr+0x12>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3301      	adds	r3, #1
 800da54:	607b      	str	r3, [r7, #4]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d005      	beq.n	800da6a <chk_chr+0x26>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	4293      	cmp	r3, r2
 800da68:	d1f2      	bne.n	800da50 <chk_chr+0xc>
	return *str;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	781b      	ldrb	r3, [r3, #0]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
	...

0800da7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800da86:	2300      	movs	r3, #0
 800da88:	60bb      	str	r3, [r7, #8]
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	60fb      	str	r3, [r7, #12]
 800da8e:	e029      	b.n	800dae4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800da90:	4a27      	ldr	r2, [pc, #156]	; (800db30 <chk_lock+0xb4>)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	011b      	lsls	r3, r3, #4
 800da96:	4413      	add	r3, r2
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d01d      	beq.n	800dada <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800da9e:	4a24      	ldr	r2, [pc, #144]	; (800db30 <chk_lock+0xb4>)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	011b      	lsls	r3, r3, #4
 800daa4:	4413      	add	r3, r2
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	429a      	cmp	r2, r3
 800daae:	d116      	bne.n	800dade <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dab0:	4a1f      	ldr	r2, [pc, #124]	; (800db30 <chk_lock+0xb4>)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	011b      	lsls	r3, r3, #4
 800dab6:	4413      	add	r3, r2
 800dab8:	3304      	adds	r3, #4
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d10c      	bne.n	800dade <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dac4:	4a1a      	ldr	r2, [pc, #104]	; (800db30 <chk_lock+0xb4>)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	011b      	lsls	r3, r3, #4
 800daca:	4413      	add	r3, r2
 800dacc:	3308      	adds	r3, #8
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d102      	bne.n	800dade <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dad8:	e007      	b.n	800daea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dada:	2301      	movs	r3, #1
 800dadc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	3301      	adds	r3, #1
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d9d2      	bls.n	800da90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2b02      	cmp	r3, #2
 800daee:	d109      	bne.n	800db04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <chk_lock+0x80>
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d101      	bne.n	800db00 <chk_lock+0x84>
 800dafc:	2300      	movs	r3, #0
 800dafe:	e010      	b.n	800db22 <chk_lock+0xa6>
 800db00:	2312      	movs	r3, #18
 800db02:	e00e      	b.n	800db22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d108      	bne.n	800db1c <chk_lock+0xa0>
 800db0a:	4a09      	ldr	r2, [pc, #36]	; (800db30 <chk_lock+0xb4>)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	4413      	add	r3, r2
 800db12:	330c      	adds	r3, #12
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db1a:	d101      	bne.n	800db20 <chk_lock+0xa4>
 800db1c:	2310      	movs	r3, #16
 800db1e:	e000      	b.n	800db22 <chk_lock+0xa6>
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	20000874 	.word	0x20000874

0800db34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800db3a:	2300      	movs	r3, #0
 800db3c:	607b      	str	r3, [r7, #4]
 800db3e:	e002      	b.n	800db46 <enq_lock+0x12>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	3301      	adds	r3, #1
 800db44:	607b      	str	r3, [r7, #4]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d806      	bhi.n	800db5a <enq_lock+0x26>
 800db4c:	4a09      	ldr	r2, [pc, #36]	; (800db74 <enq_lock+0x40>)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	011b      	lsls	r3, r3, #4
 800db52:	4413      	add	r3, r2
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1f2      	bne.n	800db40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b02      	cmp	r3, #2
 800db5e:	bf14      	ite	ne
 800db60:	2301      	movne	r3, #1
 800db62:	2300      	moveq	r3, #0
 800db64:	b2db      	uxtb	r3, r3
}
 800db66:	4618      	mov	r0, r3
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	20000874 	.word	0x20000874

0800db78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	e01f      	b.n	800dbc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800db88:	4a41      	ldr	r2, [pc, #260]	; (800dc90 <inc_lock+0x118>)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	4413      	add	r3, r2
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	429a      	cmp	r2, r3
 800db98:	d113      	bne.n	800dbc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800db9a:	4a3d      	ldr	r2, [pc, #244]	; (800dc90 <inc_lock+0x118>)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	011b      	lsls	r3, r3, #4
 800dba0:	4413      	add	r3, r2
 800dba2:	3304      	adds	r3, #4
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d109      	bne.n	800dbc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dbae:	4a38      	ldr	r2, [pc, #224]	; (800dc90 <inc_lock+0x118>)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	011b      	lsls	r3, r3, #4
 800dbb4:	4413      	add	r3, r2
 800dbb6:	3308      	adds	r3, #8
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d006      	beq.n	800dbd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	60fb      	str	r3, [r7, #12]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d9dc      	bls.n	800db88 <inc_lock+0x10>
 800dbce:	e000      	b.n	800dbd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dbd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d132      	bne.n	800dc3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	60fb      	str	r3, [r7, #12]
 800dbdc:	e002      	b.n	800dbe4 <inc_lock+0x6c>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d806      	bhi.n	800dbf8 <inc_lock+0x80>
 800dbea:	4a29      	ldr	r2, [pc, #164]	; (800dc90 <inc_lock+0x118>)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	011b      	lsls	r3, r3, #4
 800dbf0:	4413      	add	r3, r2
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1f2      	bne.n	800dbde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d101      	bne.n	800dc02 <inc_lock+0x8a>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e040      	b.n	800dc84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	4922      	ldr	r1, [pc, #136]	; (800dc90 <inc_lock+0x118>)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	011b      	lsls	r3, r3, #4
 800dc0c:	440b      	add	r3, r1
 800dc0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	689a      	ldr	r2, [r3, #8]
 800dc14:	491e      	ldr	r1, [pc, #120]	; (800dc90 <inc_lock+0x118>)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	011b      	lsls	r3, r3, #4
 800dc1a:	440b      	add	r3, r1
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	695a      	ldr	r2, [r3, #20]
 800dc24:	491a      	ldr	r1, [pc, #104]	; (800dc90 <inc_lock+0x118>)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	011b      	lsls	r3, r3, #4
 800dc2a:	440b      	add	r3, r1
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dc30:	4a17      	ldr	r2, [pc, #92]	; (800dc90 <inc_lock+0x118>)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	011b      	lsls	r3, r3, #4
 800dc36:	4413      	add	r3, r2
 800dc38:	330c      	adds	r3, #12
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d009      	beq.n	800dc58 <inc_lock+0xe0>
 800dc44:	4a12      	ldr	r2, [pc, #72]	; (800dc90 <inc_lock+0x118>)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	011b      	lsls	r3, r3, #4
 800dc4a:	4413      	add	r3, r2
 800dc4c:	330c      	adds	r3, #12
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <inc_lock+0xe0>
 800dc54:	2300      	movs	r3, #0
 800dc56:	e015      	b.n	800dc84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d108      	bne.n	800dc70 <inc_lock+0xf8>
 800dc5e:	4a0c      	ldr	r2, [pc, #48]	; (800dc90 <inc_lock+0x118>)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	011b      	lsls	r3, r3, #4
 800dc64:	4413      	add	r3, r2
 800dc66:	330c      	adds	r3, #12
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	e001      	b.n	800dc74 <inc_lock+0xfc>
 800dc70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc74:	4906      	ldr	r1, [pc, #24]	; (800dc90 <inc_lock+0x118>)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	011b      	lsls	r3, r3, #4
 800dc7a:	440b      	add	r3, r1
 800dc7c:	330c      	adds	r3, #12
 800dc7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	3301      	adds	r3, #1
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	20000874 	.word	0x20000874

0800dc94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	607b      	str	r3, [r7, #4]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d825      	bhi.n	800dcf4 <dec_lock+0x60>
		n = Files[i].ctr;
 800dca8:	4a17      	ldr	r2, [pc, #92]	; (800dd08 <dec_lock+0x74>)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	011b      	lsls	r3, r3, #4
 800dcae:	4413      	add	r3, r2
 800dcb0:	330c      	adds	r3, #12
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dcb6:	89fb      	ldrh	r3, [r7, #14]
 800dcb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcbc:	d101      	bne.n	800dcc2 <dec_lock+0x2e>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dcc2:	89fb      	ldrh	r3, [r7, #14]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <dec_lock+0x3a>
 800dcc8:	89fb      	ldrh	r3, [r7, #14]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dcce:	4a0e      	ldr	r2, [pc, #56]	; (800dd08 <dec_lock+0x74>)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	011b      	lsls	r3, r3, #4
 800dcd4:	4413      	add	r3, r2
 800dcd6:	330c      	adds	r3, #12
 800dcd8:	89fa      	ldrh	r2, [r7, #14]
 800dcda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dcdc:	89fb      	ldrh	r3, [r7, #14]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d105      	bne.n	800dcee <dec_lock+0x5a>
 800dce2:	4a09      	ldr	r2, [pc, #36]	; (800dd08 <dec_lock+0x74>)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	011b      	lsls	r3, r3, #4
 800dce8:	4413      	add	r3, r2
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	737b      	strb	r3, [r7, #13]
 800dcf2:	e001      	b.n	800dcf8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dcf8:	7b7b      	ldrb	r3, [r7, #13]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	20000874 	.word	0x20000874

0800dd0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dd14:	2300      	movs	r3, #0
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e010      	b.n	800dd3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dd1a:	4a0d      	ldr	r2, [pc, #52]	; (800dd50 <clear_lock+0x44>)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	011b      	lsls	r3, r3, #4
 800dd20:	4413      	add	r3, r2
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d105      	bne.n	800dd36 <clear_lock+0x2a>
 800dd2a:	4a09      	ldr	r2, [pc, #36]	; (800dd50 <clear_lock+0x44>)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	011b      	lsls	r3, r3, #4
 800dd30:	4413      	add	r3, r2
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d9eb      	bls.n	800dd1a <clear_lock+0xe>
	}
}
 800dd42:	bf00      	nop
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	20000874 	.word	0x20000874

0800dd54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	78db      	ldrb	r3, [r3, #3]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d034      	beq.n	800ddd2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	7858      	ldrb	r0, [r3, #1]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dd78:	2301      	movs	r3, #1
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	f7ff fd40 	bl	800d800 <disk_write>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d002      	beq.n	800dd8c <sync_window+0x38>
			res = FR_DISK_ERR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	73fb      	strb	r3, [r7, #15]
 800dd8a:	e022      	b.n	800ddd2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	1ad2      	subs	r2, r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	69db      	ldr	r3, [r3, #28]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d217      	bcs.n	800ddd2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	789b      	ldrb	r3, [r3, #2]
 800dda6:	613b      	str	r3, [r7, #16]
 800dda8:	e010      	b.n	800ddcc <sync_window+0x78>
					wsect += fs->fsize;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	69db      	ldr	r3, [r3, #28]
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	7858      	ldrb	r0, [r3, #1]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	697a      	ldr	r2, [r7, #20]
 800ddc2:	f7ff fd1d 	bl	800d800 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	613b      	str	r3, [r7, #16]
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d8eb      	bhi.n	800ddaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d01b      	beq.n	800de2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff ffad 	bl	800dd54 <sync_window>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d113      	bne.n	800de2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	7858      	ldrb	r0, [r3, #1]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de0e:	2301      	movs	r3, #1
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	f7ff fcd5 	bl	800d7c0 <disk_read>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800de1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800de22:	2301      	movs	r3, #1
 800de24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	683a      	ldr	r2, [r7, #0]
 800de2a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
	...

0800de38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff ff87 	bl	800dd54 <sync_window>
 800de46:	4603      	mov	r3, r0
 800de48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d159      	bne.n	800df04 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	2b03      	cmp	r3, #3
 800de56:	d149      	bne.n	800deec <sync_fs+0xb4>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	791b      	ldrb	r3, [r3, #4]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d145      	bne.n	800deec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	899b      	ldrh	r3, [r3, #12]
 800de6a:	461a      	mov	r2, r3
 800de6c:	2100      	movs	r1, #0
 800de6e:	f7ff fda8 	bl	800d9c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	3334      	adds	r3, #52	; 0x34
 800de76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de7a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800de7e:	4618      	mov	r0, r3
 800de80:	f7ff fd37 	bl	800d8f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	3334      	adds	r3, #52	; 0x34
 800de88:	4921      	ldr	r1, [pc, #132]	; (800df10 <sync_fs+0xd8>)
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff fd4c 	bl	800d928 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3334      	adds	r3, #52	; 0x34
 800de94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800de98:	491e      	ldr	r1, [pc, #120]	; (800df14 <sync_fs+0xdc>)
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7ff fd44 	bl	800d928 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	3334      	adds	r3, #52	; 0x34
 800dea4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	695b      	ldr	r3, [r3, #20]
 800deac:	4619      	mov	r1, r3
 800deae:	4610      	mov	r0, r2
 800deb0:	f7ff fd3a 	bl	800d928 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	3334      	adds	r3, #52	; 0x34
 800deb8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	691b      	ldr	r3, [r3, #16]
 800dec0:	4619      	mov	r1, r3
 800dec2:	4610      	mov	r0, r2
 800dec4:	f7ff fd30 	bl	800d928 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a1b      	ldr	r3, [r3, #32]
 800decc:	1c5a      	adds	r2, r3, #1
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	7858      	ldrb	r0, [r3, #1]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dee0:	2301      	movs	r3, #1
 800dee2:	f7ff fc8d 	bl	800d800 <disk_write>
			fs->fsi_flag = 0;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	785b      	ldrb	r3, [r3, #1]
 800def0:	2200      	movs	r2, #0
 800def2:	2100      	movs	r1, #0
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff fca3 	bl	800d840 <disk_ioctl>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <sync_fs+0xcc>
 800df00:	2301      	movs	r3, #1
 800df02:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800df04:	7bfb      	ldrb	r3, [r7, #15]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	41615252 	.word	0x41615252
 800df14:	61417272 	.word	0x61417272

0800df18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	3b02      	subs	r3, #2
 800df26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	699b      	ldr	r3, [r3, #24]
 800df2c:	3b02      	subs	r3, #2
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d301      	bcc.n	800df38 <clust2sect+0x20>
 800df34:	2300      	movs	r3, #0
 800df36:	e008      	b.n	800df4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	895b      	ldrh	r3, [r3, #10]
 800df3c:	461a      	mov	r2, r3
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	fb03 f202 	mul.w	r2, r3, r2
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	4413      	add	r3, r2
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	370c      	adds	r7, #12
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr

0800df56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b086      	sub	sp, #24
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d904      	bls.n	800df76 <get_fat+0x20>
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	429a      	cmp	r2, r3
 800df74:	d302      	bcc.n	800df7c <get_fat+0x26>
		val = 1;	/* Internal error */
 800df76:	2301      	movs	r3, #1
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	e0b7      	b.n	800e0ec <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800df7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	2b02      	cmp	r3, #2
 800df88:	d05a      	beq.n	800e040 <get_fat+0xea>
 800df8a:	2b03      	cmp	r3, #3
 800df8c:	d07d      	beq.n	800e08a <get_fat+0x134>
 800df8e:	2b01      	cmp	r3, #1
 800df90:	f040 80a2 	bne.w	800e0d8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	60fb      	str	r3, [r7, #12]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	085b      	lsrs	r3, r3, #1
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4413      	add	r3, r2
 800dfa0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	899b      	ldrh	r3, [r3, #12]
 800dfaa:	4619      	mov	r1, r3
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfb2:	4413      	add	r3, r2
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6938      	ldr	r0, [r7, #16]
 800dfb8:	f7ff ff10 	bl	800dddc <move_window>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f040 808d 	bne.w	800e0de <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	1c5a      	adds	r2, r3, #1
 800dfc8:	60fa      	str	r2, [r7, #12]
 800dfca:	693a      	ldr	r2, [r7, #16]
 800dfcc:	8992      	ldrh	r2, [r2, #12]
 800dfce:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfd2:	fb02 f201 	mul.w	r2, r2, r1
 800dfd6:	1a9b      	subs	r3, r3, r2
 800dfd8:	693a      	ldr	r2, [r7, #16]
 800dfda:	4413      	add	r3, r2
 800dfdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dfe0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	899b      	ldrh	r3, [r3, #12]
 800dfea:	4619      	mov	r1, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	fbb3 f3f1 	udiv	r3, r3, r1
 800dff2:	4413      	add	r3, r2
 800dff4:	4619      	mov	r1, r3
 800dff6:	6938      	ldr	r0, [r7, #16]
 800dff8:	f7ff fef0 	bl	800dddc <move_window>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d16f      	bne.n	800e0e2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	899b      	ldrh	r3, [r3, #12]
 800e006:	461a      	mov	r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e00e:	fb02 f201 	mul.w	r2, r2, r1
 800e012:	1a9b      	subs	r3, r3, r2
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	4413      	add	r3, r2
 800e018:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e01c:	021b      	lsls	r3, r3, #8
 800e01e:	461a      	mov	r2, r3
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	4313      	orrs	r3, r2
 800e024:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <get_fat+0xe0>
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	091b      	lsrs	r3, r3, #4
 800e034:	e002      	b.n	800e03c <get_fat+0xe6>
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e03c:	617b      	str	r3, [r7, #20]
			break;
 800e03e:	e055      	b.n	800e0ec <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	899b      	ldrh	r3, [r3, #12]
 800e048:	085b      	lsrs	r3, r3, #1
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	4619      	mov	r1, r3
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	fbb3 f3f1 	udiv	r3, r3, r1
 800e054:	4413      	add	r3, r2
 800e056:	4619      	mov	r1, r3
 800e058:	6938      	ldr	r0, [r7, #16]
 800e05a:	f7ff febf 	bl	800dddc <move_window>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d140      	bne.n	800e0e6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	005b      	lsls	r3, r3, #1
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	8992      	ldrh	r2, [r2, #12]
 800e072:	fbb3 f0f2 	udiv	r0, r3, r2
 800e076:	fb02 f200 	mul.w	r2, r2, r0
 800e07a:	1a9b      	subs	r3, r3, r2
 800e07c:	440b      	add	r3, r1
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff fbfc 	bl	800d87c <ld_word>
 800e084:	4603      	mov	r3, r0
 800e086:	617b      	str	r3, [r7, #20]
			break;
 800e088:	e030      	b.n	800e0ec <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	899b      	ldrh	r3, [r3, #12]
 800e092:	089b      	lsrs	r3, r3, #2
 800e094:	b29b      	uxth	r3, r3
 800e096:	4619      	mov	r1, r3
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e09e:	4413      	add	r3, r2
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6938      	ldr	r0, [r7, #16]
 800e0a4:	f7ff fe9a 	bl	800dddc <move_window>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d11d      	bne.n	800e0ea <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	693a      	ldr	r2, [r7, #16]
 800e0ba:	8992      	ldrh	r2, [r2, #12]
 800e0bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0c0:	fb02 f200 	mul.w	r2, r2, r0
 800e0c4:	1a9b      	subs	r3, r3, r2
 800e0c6:	440b      	add	r3, r1
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7ff fbef 	bl	800d8ac <ld_dword>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e0d4:	617b      	str	r3, [r7, #20]
			break;
 800e0d6:	e009      	b.n	800e0ec <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e0d8:	2301      	movs	r3, #1
 800e0da:	617b      	str	r3, [r7, #20]
 800e0dc:	e006      	b.n	800e0ec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e0de:	bf00      	nop
 800e0e0:	e004      	b.n	800e0ec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e0e2:	bf00      	nop
 800e0e4:	e002      	b.n	800e0ec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e0e6:	bf00      	nop
 800e0e8:	e000      	b.n	800e0ec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e0ea:	bf00      	nop
		}
	}

	return val;
 800e0ec:	697b      	ldr	r3, [r7, #20]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e0f6:	b590      	push	{r4, r7, lr}
 800e0f8:	b089      	sub	sp, #36	; 0x24
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	60f8      	str	r0, [r7, #12]
 800e0fe:	60b9      	str	r1, [r7, #8]
 800e100:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e102:	2302      	movs	r3, #2
 800e104:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	f240 8106 	bls.w	800e31a <put_fat+0x224>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	699b      	ldr	r3, [r3, #24]
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	429a      	cmp	r2, r3
 800e116:	f080 8100 	bcs.w	800e31a <put_fat+0x224>
		switch (fs->fs_type) {
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b02      	cmp	r3, #2
 800e120:	f000 8088 	beq.w	800e234 <put_fat+0x13e>
 800e124:	2b03      	cmp	r3, #3
 800e126:	f000 80b0 	beq.w	800e28a <put_fat+0x194>
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	f040 80f5 	bne.w	800e31a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	61bb      	str	r3, [r7, #24]
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	085b      	lsrs	r3, r3, #1
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	4413      	add	r3, r2
 800e13c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	899b      	ldrh	r3, [r3, #12]
 800e146:	4619      	mov	r1, r3
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e14e:	4413      	add	r3, r2
 800e150:	4619      	mov	r1, r3
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7ff fe42 	bl	800dddc <move_window>
 800e158:	4603      	mov	r3, r0
 800e15a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e15c:	7ffb      	ldrb	r3, [r7, #31]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f040 80d4 	bne.w	800e30c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	61ba      	str	r2, [r7, #24]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	8992      	ldrh	r2, [r2, #12]
 800e174:	fbb3 f0f2 	udiv	r0, r3, r2
 800e178:	fb02 f200 	mul.w	r2, r2, r0
 800e17c:	1a9b      	subs	r3, r3, r2
 800e17e:	440b      	add	r3, r1
 800e180:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	f003 0301 	and.w	r3, r3, #1
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00d      	beq.n	800e1a8 <put_fat+0xb2>
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	b25b      	sxtb	r3, r3
 800e192:	f003 030f 	and.w	r3, r3, #15
 800e196:	b25a      	sxtb	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	011b      	lsls	r3, r3, #4
 800e19e:	b25b      	sxtb	r3, r3
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	b25b      	sxtb	r3, r3
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	e001      	b.n	800e1ac <put_fat+0xb6>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	899b      	ldrh	r3, [r3, #12]
 800e1be:	4619      	mov	r1, r3
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1c6:	4413      	add	r3, r2
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7ff fe06 	bl	800dddc <move_window>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e1d4:	7ffb      	ldrb	r3, [r7, #31]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f040 809a 	bne.w	800e310 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	899b      	ldrh	r3, [r3, #12]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1ee:	fb02 f200 	mul.w	r2, r2, r0
 800e1f2:	1a9b      	subs	r3, r3, r2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d003      	beq.n	800e20a <put_fat+0x114>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	091b      	lsrs	r3, r3, #4
 800e206:	b2db      	uxtb	r3, r3
 800e208:	e00e      	b.n	800e228 <put_fat+0x132>
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	b25b      	sxtb	r3, r3
 800e210:	f023 030f 	bic.w	r3, r3, #15
 800e214:	b25a      	sxtb	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	0a1b      	lsrs	r3, r3, #8
 800e21a:	b25b      	sxtb	r3, r3
 800e21c:	f003 030f 	and.w	r3, r3, #15
 800e220:	b25b      	sxtb	r3, r3
 800e222:	4313      	orrs	r3, r2
 800e224:	b25b      	sxtb	r3, r3
 800e226:	b2db      	uxtb	r3, r3
 800e228:	697a      	ldr	r2, [r7, #20]
 800e22a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2201      	movs	r2, #1
 800e230:	70da      	strb	r2, [r3, #3]
			break;
 800e232:	e072      	b.n	800e31a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	899b      	ldrh	r3, [r3, #12]
 800e23c:	085b      	lsrs	r3, r3, #1
 800e23e:	b29b      	uxth	r3, r3
 800e240:	4619      	mov	r1, r3
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	fbb3 f3f1 	udiv	r3, r3, r1
 800e248:	4413      	add	r3, r2
 800e24a:	4619      	mov	r1, r3
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f7ff fdc5 	bl	800dddc <move_window>
 800e252:	4603      	mov	r3, r0
 800e254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e256:	7ffb      	ldrb	r3, [r7, #31]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d15b      	bne.n	800e314 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	8992      	ldrh	r2, [r2, #12]
 800e26a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e26e:	fb02 f200 	mul.w	r2, r2, r0
 800e272:	1a9b      	subs	r3, r3, r2
 800e274:	440b      	add	r3, r1
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	b292      	uxth	r2, r2
 800e27a:	4611      	mov	r1, r2
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7ff fb38 	bl	800d8f2 <st_word>
			fs->wflag = 1;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2201      	movs	r2, #1
 800e286:	70da      	strb	r2, [r3, #3]
			break;
 800e288:	e047      	b.n	800e31a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	899b      	ldrh	r3, [r3, #12]
 800e292:	089b      	lsrs	r3, r3, #2
 800e294:	b29b      	uxth	r3, r3
 800e296:	4619      	mov	r1, r3
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e29e:	4413      	add	r3, r2
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff fd9a 	bl	800dddc <move_window>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e2ac:	7ffb      	ldrb	r3, [r7, #31]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d132      	bne.n	800e318 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	8992      	ldrh	r2, [r2, #12]
 800e2c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e2ca:	fb02 f200 	mul.w	r2, r2, r0
 800e2ce:	1a9b      	subs	r3, r3, r2
 800e2d0:	440b      	add	r3, r1
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7ff faea 	bl	800d8ac <ld_dword>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e2de:	4323      	orrs	r3, r4
 800e2e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	8992      	ldrh	r2, [r2, #12]
 800e2f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e2f4:	fb02 f200 	mul.w	r2, r2, r0
 800e2f8:	1a9b      	subs	r3, r3, r2
 800e2fa:	440b      	add	r3, r1
 800e2fc:	6879      	ldr	r1, [r7, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff fb12 	bl	800d928 <st_dword>
			fs->wflag = 1;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2201      	movs	r2, #1
 800e308:	70da      	strb	r2, [r3, #3]
			break;
 800e30a:	e006      	b.n	800e31a <put_fat+0x224>
			if (res != FR_OK) break;
 800e30c:	bf00      	nop
 800e30e:	e004      	b.n	800e31a <put_fat+0x224>
			if (res != FR_OK) break;
 800e310:	bf00      	nop
 800e312:	e002      	b.n	800e31a <put_fat+0x224>
			if (res != FR_OK) break;
 800e314:	bf00      	nop
 800e316:	e000      	b.n	800e31a <put_fat+0x224>
			if (res != FR_OK) break;
 800e318:	bf00      	nop
		}
	}
	return res;
 800e31a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3724      	adds	r7, #36	; 0x24
 800e320:	46bd      	mov	sp, r7
 800e322:	bd90      	pop	{r4, r7, pc}

0800e324 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b088      	sub	sp, #32
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d904      	bls.n	800e34a <remove_chain+0x26>
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	699b      	ldr	r3, [r3, #24]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	429a      	cmp	r2, r3
 800e348:	d301      	bcc.n	800e34e <remove_chain+0x2a>
 800e34a:	2302      	movs	r3, #2
 800e34c:	e04b      	b.n	800e3e6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00c      	beq.n	800e36e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	69b8      	ldr	r0, [r7, #24]
 800e35c:	f7ff fecb 	bl	800e0f6 <put_fat>
 800e360:	4603      	mov	r3, r0
 800e362:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e364:	7ffb      	ldrb	r3, [r7, #31]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <remove_chain+0x4a>
 800e36a:	7ffb      	ldrb	r3, [r7, #31]
 800e36c:	e03b      	b.n	800e3e6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e36e:	68b9      	ldr	r1, [r7, #8]
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f7ff fdf0 	bl	800df56 <get_fat>
 800e376:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d031      	beq.n	800e3e2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d101      	bne.n	800e388 <remove_chain+0x64>
 800e384:	2302      	movs	r3, #2
 800e386:	e02e      	b.n	800e3e6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e38e:	d101      	bne.n	800e394 <remove_chain+0x70>
 800e390:	2301      	movs	r3, #1
 800e392:	e028      	b.n	800e3e6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e394:	2200      	movs	r2, #0
 800e396:	68b9      	ldr	r1, [r7, #8]
 800e398:	69b8      	ldr	r0, [r7, #24]
 800e39a:	f7ff feac 	bl	800e0f6 <put_fat>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e3a2:	7ffb      	ldrb	r3, [r7, #31]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <remove_chain+0x88>
 800e3a8:	7ffb      	ldrb	r3, [r7, #31]
 800e3aa:	e01c      	b.n	800e3e6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	695a      	ldr	r2, [r3, #20]
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	3b02      	subs	r3, #2
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d20b      	bcs.n	800e3d2 <remove_chain+0xae>
			fs->free_clst++;
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	695b      	ldr	r3, [r3, #20]
 800e3be:	1c5a      	adds	r2, r3, #1
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	791b      	ldrb	r3, [r3, #4]
 800e3c8:	f043 0301 	orr.w	r3, r3, #1
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d3c6      	bcc.n	800e36e <remove_chain+0x4a>
 800e3e0:	e000      	b.n	800e3e4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e3e2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3720      	adds	r7, #32
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b088      	sub	sp, #32
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
 800e3f6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10d      	bne.n	800e420 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	691b      	ldr	r3, [r3, #16]
 800e408:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d004      	beq.n	800e41a <create_chain+0x2c>
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	699b      	ldr	r3, [r3, #24]
 800e414:	69ba      	ldr	r2, [r7, #24]
 800e416:	429a      	cmp	r2, r3
 800e418:	d31b      	bcc.n	800e452 <create_chain+0x64>
 800e41a:	2301      	movs	r3, #1
 800e41c:	61bb      	str	r3, [r7, #24]
 800e41e:	e018      	b.n	800e452 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e420:	6839      	ldr	r1, [r7, #0]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff fd97 	bl	800df56 <get_fat>
 800e428:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d801      	bhi.n	800e434 <create_chain+0x46>
 800e430:	2301      	movs	r3, #1
 800e432:	e070      	b.n	800e516 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e43a:	d101      	bne.n	800e440 <create_chain+0x52>
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	e06a      	b.n	800e516 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	429a      	cmp	r2, r3
 800e448:	d201      	bcs.n	800e44e <create_chain+0x60>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	e063      	b.n	800e516 <create_chain+0x128>
		scl = clst;
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	3301      	adds	r3, #1
 800e45a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	69fa      	ldr	r2, [r7, #28]
 800e462:	429a      	cmp	r2, r3
 800e464:	d307      	bcc.n	800e476 <create_chain+0x88>
				ncl = 2;
 800e466:	2302      	movs	r3, #2
 800e468:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e46a:	69fa      	ldr	r2, [r7, #28]
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d901      	bls.n	800e476 <create_chain+0x88>
 800e472:	2300      	movs	r3, #0
 800e474:	e04f      	b.n	800e516 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e476:	69f9      	ldr	r1, [r7, #28]
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7ff fd6c 	bl	800df56 <get_fat>
 800e47e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00e      	beq.n	800e4a4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d003      	beq.n	800e494 <create_chain+0xa6>
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e492:	d101      	bne.n	800e498 <create_chain+0xaa>
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	e03e      	b.n	800e516 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d1da      	bne.n	800e456 <create_chain+0x68>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	e038      	b.n	800e516 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e4a4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e4a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4aa:	69f9      	ldr	r1, [r7, #28]
 800e4ac:	6938      	ldr	r0, [r7, #16]
 800e4ae:	f7ff fe22 	bl	800e0f6 <put_fat>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e4b6:	7dfb      	ldrb	r3, [r7, #23]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d109      	bne.n	800e4d0 <create_chain+0xe2>
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d006      	beq.n	800e4d0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e4c2:	69fa      	ldr	r2, [r7, #28]
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6938      	ldr	r0, [r7, #16]
 800e4c8:	f7ff fe15 	bl	800e0f6 <put_fat>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d116      	bne.n	800e504 <create_chain+0x116>
		fs->last_clst = ncl;
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	69fa      	ldr	r2, [r7, #28]
 800e4da:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	695a      	ldr	r2, [r3, #20]
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	3b02      	subs	r3, #2
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d804      	bhi.n	800e4f4 <create_chain+0x106>
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	695b      	ldr	r3, [r3, #20]
 800e4ee:	1e5a      	subs	r2, r3, #1
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	791b      	ldrb	r3, [r3, #4]
 800e4f8:	f043 0301 	orr.w	r3, r3, #1
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	711a      	strb	r2, [r3, #4]
 800e502:	e007      	b.n	800e514 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e504:	7dfb      	ldrb	r3, [r7, #23]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d102      	bne.n	800e510 <create_chain+0x122>
 800e50a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e50e:	e000      	b.n	800e512 <create_chain+0x124>
 800e510:	2301      	movs	r3, #1
 800e512:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e514:	69fb      	ldr	r3, [r7, #28]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3720      	adds	r7, #32
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e51e:	b480      	push	{r7}
 800e520:	b087      	sub	sp, #28
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
 800e526:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e532:	3304      	adds	r3, #4
 800e534:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	899b      	ldrh	r3, [r3, #12]
 800e53a:	461a      	mov	r2, r3
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e542:	68fa      	ldr	r2, [r7, #12]
 800e544:	8952      	ldrh	r2, [r2, #10]
 800e546:	fbb3 f3f2 	udiv	r3, r3, r2
 800e54a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	1d1a      	adds	r2, r3, #4
 800e550:	613a      	str	r2, [r7, #16]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <clmt_clust+0x42>
 800e55c:	2300      	movs	r3, #0
 800e55e:	e010      	b.n	800e582 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	429a      	cmp	r2, r3
 800e566:	d307      	bcc.n	800e578 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e568:	697a      	ldr	r2, [r7, #20]
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	3304      	adds	r3, #4
 800e574:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e576:	e7e9      	b.n	800e54c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e578:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	4413      	add	r3, r2
}
 800e582:	4618      	mov	r0, r3
 800e584:	371c      	adds	r7, #28
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b086      	sub	sp, #24
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5a4:	d204      	bcs.n	800e5b0 <dir_sdi+0x22>
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	f003 031f 	and.w	r3, r3, #31
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d001      	beq.n	800e5b4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	e071      	b.n	800e698 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d106      	bne.n	800e5d4 <dir_sdi+0x46>
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b02      	cmp	r3, #2
 800e5cc:	d902      	bls.n	800e5d4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10c      	bne.n	800e5f4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	095b      	lsrs	r3, r3, #5
 800e5de:	693a      	ldr	r2, [r7, #16]
 800e5e0:	8912      	ldrh	r2, [r2, #8]
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d301      	bcc.n	800e5ea <dir_sdi+0x5c>
 800e5e6:	2302      	movs	r3, #2
 800e5e8:	e056      	b.n	800e698 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	61da      	str	r2, [r3, #28]
 800e5f2:	e02d      	b.n	800e650 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	895b      	ldrh	r3, [r3, #10]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	899b      	ldrh	r3, [r3, #12]
 800e5fe:	fb03 f302 	mul.w	r3, r3, r2
 800e602:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e604:	e019      	b.n	800e63a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6979      	ldr	r1, [r7, #20]
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff fca3 	bl	800df56 <get_fat>
 800e610:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e618:	d101      	bne.n	800e61e <dir_sdi+0x90>
 800e61a:	2301      	movs	r3, #1
 800e61c:	e03c      	b.n	800e698 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d904      	bls.n	800e62e <dir_sdi+0xa0>
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	699b      	ldr	r3, [r3, #24]
 800e628:	697a      	ldr	r2, [r7, #20]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d301      	bcc.n	800e632 <dir_sdi+0xa4>
 800e62e:	2302      	movs	r3, #2
 800e630:	e032      	b.n	800e698 <dir_sdi+0x10a>
			ofs -= csz;
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e63a:	683a      	ldr	r2, [r7, #0]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d2e1      	bcs.n	800e606 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e642:	6979      	ldr	r1, [r7, #20]
 800e644:	6938      	ldr	r0, [r7, #16]
 800e646:	f7ff fc67 	bl	800df18 <clust2sect>
 800e64a:	4602      	mov	r2, r0
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d101      	bne.n	800e662 <dir_sdi+0xd4>
 800e65e:	2302      	movs	r3, #2
 800e660:	e01a      	b.n	800e698 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	69da      	ldr	r2, [r3, #28]
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	899b      	ldrh	r3, [r3, #12]
 800e66a:	4619      	mov	r1, r3
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e672:	441a      	add	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	899b      	ldrh	r3, [r3, #12]
 800e682:	461a      	mov	r2, r3
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	fbb3 f0f2 	udiv	r0, r3, r2
 800e68a:	fb02 f200 	mul.w	r2, r2, r0
 800e68e:	1a9b      	subs	r3, r3, r2
 800e690:	18ca      	adds	r2, r1, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	695b      	ldr	r3, [r3, #20]
 800e6b4:	3320      	adds	r3, #32
 800e6b6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	69db      	ldr	r3, [r3, #28]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d003      	beq.n	800e6c8 <dir_next+0x28>
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e6c6:	d301      	bcc.n	800e6cc <dir_next+0x2c>
 800e6c8:	2304      	movs	r3, #4
 800e6ca:	e0bb      	b.n	800e844 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	899b      	ldrh	r3, [r3, #12]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6d8:	fb02 f201 	mul.w	r2, r2, r1
 800e6dc:	1a9b      	subs	r3, r3, r2
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f040 809d 	bne.w	800e81e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	69db      	ldr	r3, [r3, #28]
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	699b      	ldr	r3, [r3, #24]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10b      	bne.n	800e70e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	095b      	lsrs	r3, r3, #5
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	8912      	ldrh	r2, [r2, #8]
 800e6fe:	4293      	cmp	r3, r2
 800e700:	f0c0 808d 	bcc.w	800e81e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	61da      	str	r2, [r3, #28]
 800e70a:	2304      	movs	r3, #4
 800e70c:	e09a      	b.n	800e844 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	899b      	ldrh	r3, [r3, #12]
 800e712:	461a      	mov	r2, r3
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	fbb3 f3f2 	udiv	r3, r3, r2
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	8952      	ldrh	r2, [r2, #10]
 800e71e:	3a01      	subs	r2, #1
 800e720:	4013      	ands	r3, r2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d17b      	bne.n	800e81e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	699b      	ldr	r3, [r3, #24]
 800e72c:	4619      	mov	r1, r3
 800e72e:	4610      	mov	r0, r2
 800e730:	f7ff fc11 	bl	800df56 <get_fat>
 800e734:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d801      	bhi.n	800e740 <dir_next+0xa0>
 800e73c:	2302      	movs	r3, #2
 800e73e:	e081      	b.n	800e844 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e746:	d101      	bne.n	800e74c <dir_next+0xac>
 800e748:	2301      	movs	r3, #1
 800e74a:	e07b      	b.n	800e844 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	429a      	cmp	r2, r3
 800e754:	d359      	bcc.n	800e80a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d104      	bne.n	800e766 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	61da      	str	r2, [r3, #28]
 800e762:	2304      	movs	r3, #4
 800e764:	e06e      	b.n	800e844 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	699b      	ldr	r3, [r3, #24]
 800e76c:	4619      	mov	r1, r3
 800e76e:	4610      	mov	r0, r2
 800e770:	f7ff fe3d 	bl	800e3ee <create_chain>
 800e774:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d101      	bne.n	800e780 <dir_next+0xe0>
 800e77c:	2307      	movs	r3, #7
 800e77e:	e061      	b.n	800e844 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d101      	bne.n	800e78a <dir_next+0xea>
 800e786:	2302      	movs	r3, #2
 800e788:	e05c      	b.n	800e844 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e790:	d101      	bne.n	800e796 <dir_next+0xf6>
 800e792:	2301      	movs	r3, #1
 800e794:	e056      	b.n	800e844 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f7ff fadc 	bl	800dd54 <sync_window>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <dir_next+0x106>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e04e      	b.n	800e844 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	899b      	ldrh	r3, [r3, #12]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	f7ff f905 	bl	800d9c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	613b      	str	r3, [r7, #16]
 800e7bc:	6979      	ldr	r1, [r7, #20]
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7ff fbaa 	bl	800df18 <clust2sect>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	631a      	str	r2, [r3, #48]	; 0x30
 800e7ca:	e012      	b.n	800e7f2 <dir_next+0x152>
						fs->wflag = 1;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f7ff fabe 	bl	800dd54 <sync_window>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <dir_next+0x142>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e030      	b.n	800e844 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	613b      	str	r3, [r7, #16]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	631a      	str	r2, [r3, #48]	; 0x30
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	895b      	ldrh	r3, [r3, #10]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d3e6      	bcc.n	800e7cc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	1ad2      	subs	r2, r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e810:	6979      	ldr	r1, [r7, #20]
 800e812:	68f8      	ldr	r0, [r7, #12]
 800e814:	f7ff fb80 	bl	800df18 <clust2sect>
 800e818:	4602      	mov	r2, r0
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	461a      	mov	r2, r3
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	fbb3 f0f2 	udiv	r0, r3, r2
 800e836:	fb02 f200 	mul.w	r2, r2, r0
 800e83a:	1a9b      	subs	r3, r3, r2
 800e83c:	18ca      	adds	r2, r1, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e85c:	2100      	movs	r1, #0
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7ff fe95 	bl	800e58e <dir_sdi>
 800e864:	4603      	mov	r3, r0
 800e866:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e868:	7dfb      	ldrb	r3, [r7, #23]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d12b      	bne.n	800e8c6 <dir_alloc+0x7a>
		n = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	4619      	mov	r1, r3
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f7ff faaf 	bl	800dddc <move_window>
 800e87e:	4603      	mov	r3, r0
 800e880:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d11d      	bne.n	800e8c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6a1b      	ldr	r3, [r3, #32]
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2be5      	cmp	r3, #229	; 0xe5
 800e890:	d004      	beq.n	800e89c <dir_alloc+0x50>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a1b      	ldr	r3, [r3, #32]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d107      	bne.n	800e8ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	613b      	str	r3, [r7, #16]
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d102      	bne.n	800e8b0 <dir_alloc+0x64>
 800e8aa:	e00c      	b.n	800e8c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7ff fef4 	bl	800e6a0 <dir_next>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0d7      	beq.n	800e872 <dir_alloc+0x26>
 800e8c2:	e000      	b.n	800e8c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e8c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e8c6:	7dfb      	ldrb	r3, [r7, #23]
 800e8c8:	2b04      	cmp	r3, #4
 800e8ca:	d101      	bne.n	800e8d0 <dir_alloc+0x84>
 800e8cc:	2307      	movs	r3, #7
 800e8ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800e8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3718      	adds	r7, #24
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b084      	sub	sp, #16
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	331a      	adds	r3, #26
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe ffc7 	bl	800d87c <ld_word>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d109      	bne.n	800e90e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	3314      	adds	r3, #20
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe ffbc 	bl	800d87c <ld_word>
 800e904:	4603      	mov	r3, r0
 800e906:	041b      	lsls	r3, r3, #16
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e90e:	68fb      	ldr	r3, [r7, #12]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	331a      	adds	r3, #26
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	b292      	uxth	r2, r2
 800e92c:	4611      	mov	r1, r2
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe ffdf 	bl	800d8f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d109      	bne.n	800e950 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	f103 0214 	add.w	r2, r3, #20
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	0c1b      	lsrs	r3, r3, #16
 800e946:	b29b      	uxth	r3, r3
 800e948:	4619      	mov	r1, r3
 800e94a:	4610      	mov	r0, r2
 800e94c:	f7fe ffd1 	bl	800d8f2 <st_word>
	}
}
 800e950:	bf00      	nop
 800e952:	3710      	adds	r7, #16
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e962:	2304      	movs	r3, #4
 800e964:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e96c:	e03c      	b.n	800e9e8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	69db      	ldr	r3, [r3, #28]
 800e972:	4619      	mov	r1, r3
 800e974:	6938      	ldr	r0, [r7, #16]
 800e976:	f7ff fa31 	bl	800dddc <move_window>
 800e97a:	4603      	mov	r3, r0
 800e97c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e97e:	7dfb      	ldrb	r3, [r7, #23]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d136      	bne.n	800e9f2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6a1b      	ldr	r3, [r3, #32]
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d102      	bne.n	800e998 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e992:	2304      	movs	r3, #4
 800e994:	75fb      	strb	r3, [r7, #23]
 800e996:	e031      	b.n	800e9fc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6a1b      	ldr	r3, [r3, #32]
 800e99c:	330b      	adds	r3, #11
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9a4:	73bb      	strb	r3, [r7, #14]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	7bba      	ldrb	r2, [r7, #14]
 800e9aa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e9ac:	7bfb      	ldrb	r3, [r7, #15]
 800e9ae:	2be5      	cmp	r3, #229	; 0xe5
 800e9b0:	d011      	beq.n	800e9d6 <dir_read+0x7e>
 800e9b2:	7bfb      	ldrb	r3, [r7, #15]
 800e9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9b6:	d00e      	beq.n	800e9d6 <dir_read+0x7e>
 800e9b8:	7bbb      	ldrb	r3, [r7, #14]
 800e9ba:	2b0f      	cmp	r3, #15
 800e9bc:	d00b      	beq.n	800e9d6 <dir_read+0x7e>
 800e9be:	7bbb      	ldrb	r3, [r7, #14]
 800e9c0:	f023 0320 	bic.w	r3, r3, #32
 800e9c4:	2b08      	cmp	r3, #8
 800e9c6:	bf0c      	ite	eq
 800e9c8:	2301      	moveq	r3, #1
 800e9ca:	2300      	movne	r3, #0
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d00f      	beq.n	800e9f6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7ff fe61 	bl	800e6a0 <dir_next>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9e2:	7dfb      	ldrb	r3, [r7, #23]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d108      	bne.n	800e9fa <dir_read+0xa2>
	while (dp->sect) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	69db      	ldr	r3, [r3, #28]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1be      	bne.n	800e96e <dir_read+0x16>
 800e9f0:	e004      	b.n	800e9fc <dir_read+0xa4>
		if (res != FR_OK) break;
 800e9f2:	bf00      	nop
 800e9f4:	e002      	b.n	800e9fc <dir_read+0xa4>
				break;
 800e9f6:	bf00      	nop
 800e9f8:	e000      	b.n	800e9fc <dir_read+0xa4>
		if (res != FR_OK) break;
 800e9fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e9fc:	7dfb      	ldrb	r3, [r7, #23]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d002      	beq.n	800ea08 <dir_read+0xb0>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	61da      	str	r2, [r3, #28]
	return res;
 800ea08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3718      	adds	r7, #24
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b086      	sub	sp, #24
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ea20:	2100      	movs	r1, #0
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7ff fdb3 	bl	800e58e <dir_sdi>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ea2c:	7dfb      	ldrb	r3, [r7, #23]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <dir_find+0x24>
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
 800ea34:	e03e      	b.n	800eab4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	69db      	ldr	r3, [r3, #28]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6938      	ldr	r0, [r7, #16]
 800ea3e:	f7ff f9cd 	bl	800dddc <move_window>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d12f      	bne.n	800eaac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a1b      	ldr	r3, [r3, #32]
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ea54:	7bfb      	ldrb	r3, [r7, #15]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d102      	bne.n	800ea60 <dir_find+0x4e>
 800ea5a:	2304      	movs	r3, #4
 800ea5c:	75fb      	strb	r3, [r7, #23]
 800ea5e:	e028      	b.n	800eab2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a1b      	ldr	r3, [r3, #32]
 800ea64:	330b      	adds	r3, #11
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea6c:	b2da      	uxtb	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	330b      	adds	r3, #11
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	f003 0308 	and.w	r3, r3, #8
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10a      	bne.n	800ea98 <dir_find+0x86>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a18      	ldr	r0, [r3, #32]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3324      	adds	r3, #36	; 0x24
 800ea8a:	220b      	movs	r2, #11
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	f7fe ffb2 	bl	800d9f6 <mem_cmp>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00b      	beq.n	800eab0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ea98:	2100      	movs	r1, #0
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f7ff fe00 	bl	800e6a0 <dir_next>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eaa4:	7dfb      	ldrb	r3, [r7, #23]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d0c5      	beq.n	800ea36 <dir_find+0x24>
 800eaaa:	e002      	b.n	800eab2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800eaac:	bf00      	nop
 800eaae:	e000      	b.n	800eab2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800eab0:	bf00      	nop

	return res;
 800eab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3718      	adds	r7, #24
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800eaca:	2101      	movs	r1, #1
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7ff febd 	bl	800e84c <dir_alloc>
 800ead2:	4603      	mov	r3, r0
 800ead4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d11c      	bne.n	800eb16 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	69db      	ldr	r3, [r3, #28]
 800eae0:	4619      	mov	r1, r3
 800eae2:	68b8      	ldr	r0, [r7, #8]
 800eae4:	f7ff f97a 	bl	800dddc <move_window>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d111      	bne.n	800eb16 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6a1b      	ldr	r3, [r3, #32]
 800eaf6:	2220      	movs	r2, #32
 800eaf8:	2100      	movs	r1, #0
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe ff61 	bl	800d9c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a18      	ldr	r0, [r3, #32]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	3324      	adds	r3, #36	; 0x24
 800eb08:	220b      	movs	r2, #11
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	f7fe ff38 	bl	800d980 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2201      	movs	r2, #1
 800eb14:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	69db      	ldr	r3, [r3, #28]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d04e      	beq.n	800ebd6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	613b      	str	r3, [r7, #16]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800eb40:	e021      	b.n	800eb86 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a1a      	ldr	r2, [r3, #32]
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	1c59      	adds	r1, r3, #1
 800eb4a:	6179      	str	r1, [r7, #20]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800eb52:	7bfb      	ldrb	r3, [r7, #15]
 800eb54:	2b20      	cmp	r3, #32
 800eb56:	d100      	bne.n	800eb5a <get_fileinfo+0x3a>
 800eb58:	e015      	b.n	800eb86 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
 800eb5c:	2b05      	cmp	r3, #5
 800eb5e:	d101      	bne.n	800eb64 <get_fileinfo+0x44>
 800eb60:	23e5      	movs	r3, #229	; 0xe5
 800eb62:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	2b09      	cmp	r3, #9
 800eb68:	d106      	bne.n	800eb78 <get_fileinfo+0x58>
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	613a      	str	r2, [r7, #16]
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	4413      	add	r3, r2
 800eb74:	222e      	movs	r2, #46	; 0x2e
 800eb76:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	1c5a      	adds	r2, r3, #1
 800eb7c:	613a      	str	r2, [r7, #16]
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	4413      	add	r3, r2
 800eb82:	7bfa      	ldrb	r2, [r7, #15]
 800eb84:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2b0a      	cmp	r3, #10
 800eb8a:	d9da      	bls.n	800eb42 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800eb8c:	683a      	ldr	r2, [r7, #0]
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	4413      	add	r3, r2
 800eb92:	3309      	adds	r3, #9
 800eb94:	2200      	movs	r2, #0
 800eb96:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	7ada      	ldrb	r2, [r3, #11]
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a1b      	ldr	r3, [r3, #32]
 800eba6:	331c      	adds	r3, #28
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fe fe7f 	bl	800d8ac <ld_dword>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6a1b      	ldr	r3, [r3, #32]
 800ebb8:	3316      	adds	r3, #22
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe fe76 	bl	800d8ac <ld_dword>
 800ebc0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	b29a      	uxth	r2, r3
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	80da      	strh	r2, [r3, #6]
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	0c1b      	lsrs	r3, r3, #16
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	809a      	strh	r2, [r3, #4]
 800ebd4:	e000      	b.n	800ebd8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ebd6:	bf00      	nop
}
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b088      	sub	sp, #32
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	3324      	adds	r3, #36	; 0x24
 800ebf4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ebf6:	220b      	movs	r2, #11
 800ebf8:	2120      	movs	r1, #32
 800ebfa:	68b8      	ldr	r0, [r7, #8]
 800ebfc:	f7fe fee1 	bl	800d9c2 <mem_set>
	si = i = 0; ni = 8;
 800ec00:	2300      	movs	r3, #0
 800ec02:	613b      	str	r3, [r7, #16]
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	617b      	str	r3, [r7, #20]
 800ec08:	2308      	movs	r3, #8
 800ec0a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	617a      	str	r2, [r7, #20]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	4413      	add	r3, r2
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ec1a:	7ffb      	ldrb	r3, [r7, #31]
 800ec1c:	2b20      	cmp	r3, #32
 800ec1e:	d94e      	bls.n	800ecbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ec20:	7ffb      	ldrb	r3, [r7, #31]
 800ec22:	2b2f      	cmp	r3, #47	; 0x2f
 800ec24:	d006      	beq.n	800ec34 <create_name+0x54>
 800ec26:	7ffb      	ldrb	r3, [r7, #31]
 800ec28:	2b5c      	cmp	r3, #92	; 0x5c
 800ec2a:	d110      	bne.n	800ec4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ec2c:	e002      	b.n	800ec34 <create_name+0x54>
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	3301      	adds	r3, #1
 800ec32:	617b      	str	r3, [r7, #20]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	4413      	add	r3, r2
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ec3e:	d0f6      	beq.n	800ec2e <create_name+0x4e>
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	4413      	add	r3, r2
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2b5c      	cmp	r3, #92	; 0x5c
 800ec4a:	d0f0      	beq.n	800ec2e <create_name+0x4e>
			break;
 800ec4c:	e038      	b.n	800ecc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ec4e:	7ffb      	ldrb	r3, [r7, #31]
 800ec50:	2b2e      	cmp	r3, #46	; 0x2e
 800ec52:	d003      	beq.n	800ec5c <create_name+0x7c>
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d30c      	bcc.n	800ec76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	2b0b      	cmp	r3, #11
 800ec60:	d002      	beq.n	800ec68 <create_name+0x88>
 800ec62:	7ffb      	ldrb	r3, [r7, #31]
 800ec64:	2b2e      	cmp	r3, #46	; 0x2e
 800ec66:	d001      	beq.n	800ec6c <create_name+0x8c>
 800ec68:	2306      	movs	r3, #6
 800ec6a:	e044      	b.n	800ecf6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ec6c:	2308      	movs	r3, #8
 800ec6e:	613b      	str	r3, [r7, #16]
 800ec70:	230b      	movs	r3, #11
 800ec72:	61bb      	str	r3, [r7, #24]
			continue;
 800ec74:	e022      	b.n	800ecbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ec76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	da04      	bge.n	800ec88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ec7e:	7ffb      	ldrb	r3, [r7, #31]
 800ec80:	3b80      	subs	r3, #128	; 0x80
 800ec82:	4a1f      	ldr	r2, [pc, #124]	; (800ed00 <create_name+0x120>)
 800ec84:	5cd3      	ldrb	r3, [r2, r3]
 800ec86:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ec88:	7ffb      	ldrb	r3, [r7, #31]
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	481d      	ldr	r0, [pc, #116]	; (800ed04 <create_name+0x124>)
 800ec8e:	f7fe fed9 	bl	800da44 <chk_chr>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d001      	beq.n	800ec9c <create_name+0xbc>
 800ec98:	2306      	movs	r3, #6
 800ec9a:	e02c      	b.n	800ecf6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ec9c:	7ffb      	ldrb	r3, [r7, #31]
 800ec9e:	2b60      	cmp	r3, #96	; 0x60
 800eca0:	d905      	bls.n	800ecae <create_name+0xce>
 800eca2:	7ffb      	ldrb	r3, [r7, #31]
 800eca4:	2b7a      	cmp	r3, #122	; 0x7a
 800eca6:	d802      	bhi.n	800ecae <create_name+0xce>
 800eca8:	7ffb      	ldrb	r3, [r7, #31]
 800ecaa:	3b20      	subs	r3, #32
 800ecac:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	1c5a      	adds	r2, r3, #1
 800ecb2:	613a      	str	r2, [r7, #16]
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	7ffa      	ldrb	r2, [r7, #31]
 800ecba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ecbc:	e7a6      	b.n	800ec0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ecbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	441a      	add	r2, r3
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d101      	bne.n	800ecd4 <create_name+0xf4>
 800ecd0:	2306      	movs	r3, #6
 800ecd2:	e010      	b.n	800ecf6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	2be5      	cmp	r3, #229	; 0xe5
 800ecda:	d102      	bne.n	800ece2 <create_name+0x102>
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2205      	movs	r2, #5
 800ece0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ece2:	7ffb      	ldrb	r3, [r7, #31]
 800ece4:	2b20      	cmp	r3, #32
 800ece6:	d801      	bhi.n	800ecec <create_name+0x10c>
 800ece8:	2204      	movs	r2, #4
 800ecea:	e000      	b.n	800ecee <create_name+0x10e>
 800ecec:	2200      	movs	r2, #0
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	330b      	adds	r3, #11
 800ecf2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ecf4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3720      	adds	r7, #32
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	08016ab4 	.word	0x08016ab4
 800ed04:	08016a3c 	.word	0x08016a3c

0800ed08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ed1c:	e002      	b.n	800ed24 <follow_path+0x1c>
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	3301      	adds	r3, #1
 800ed22:	603b      	str	r3, [r7, #0]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b2f      	cmp	r3, #47	; 0x2f
 800ed2a:	d0f8      	beq.n	800ed1e <follow_path+0x16>
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	2b5c      	cmp	r3, #92	; 0x5c
 800ed32:	d0f4      	beq.n	800ed1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	2200      	movs	r2, #0
 800ed38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	2b1f      	cmp	r3, #31
 800ed40:	d80a      	bhi.n	800ed58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2280      	movs	r2, #128	; 0x80
 800ed46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f7ff fc1e 	bl	800e58e <dir_sdi>
 800ed52:	4603      	mov	r3, r0
 800ed54:	75fb      	strb	r3, [r7, #23]
 800ed56:	e048      	b.n	800edea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ed58:	463b      	mov	r3, r7
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7ff ff3f 	bl	800ebe0 <create_name>
 800ed62:	4603      	mov	r3, r0
 800ed64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d139      	bne.n	800ede0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7ff fe50 	bl	800ea12 <dir_find>
 800ed72:	4603      	mov	r3, r0
 800ed74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ed7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00a      	beq.n	800ed9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	2b04      	cmp	r3, #4
 800ed88:	d12c      	bne.n	800ede4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	f003 0304 	and.w	r3, r3, #4
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d127      	bne.n	800ede4 <follow_path+0xdc>
 800ed94:	2305      	movs	r3, #5
 800ed96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ed98:	e024      	b.n	800ede4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed9a:	7afb      	ldrb	r3, [r7, #11]
 800ed9c:	f003 0304 	and.w	r3, r3, #4
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d121      	bne.n	800ede8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	799b      	ldrb	r3, [r3, #6]
 800eda8:	f003 0310 	and.w	r3, r3, #16
 800edac:	2b00      	cmp	r3, #0
 800edae:	d102      	bne.n	800edb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800edb0:	2305      	movs	r3, #5
 800edb2:	75fb      	strb	r3, [r7, #23]
 800edb4:	e019      	b.n	800edea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	695b      	ldr	r3, [r3, #20]
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	8992      	ldrh	r2, [r2, #12]
 800edc4:	fbb3 f0f2 	udiv	r0, r3, r2
 800edc8:	fb02 f200 	mul.w	r2, r2, r0
 800edcc:	1a9b      	subs	r3, r3, r2
 800edce:	440b      	add	r3, r1
 800edd0:	4619      	mov	r1, r3
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f7ff fd81 	bl	800e8da <ld_clust>
 800edd8:	4602      	mov	r2, r0
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800edde:	e7bb      	b.n	800ed58 <follow_path+0x50>
			if (res != FR_OK) break;
 800ede0:	bf00      	nop
 800ede2:	e002      	b.n	800edea <follow_path+0xe2>
				break;
 800ede4:	bf00      	nop
 800ede6:	e000      	b.n	800edea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ede8:	bf00      	nop
			}
		}
	}

	return res;
 800edea:	7dfb      	ldrb	r3, [r7, #23]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3718      	adds	r7, #24
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b087      	sub	sp, #28
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d031      	beq.n	800ee6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	e002      	b.n	800ee18 <get_ldnumber+0x24>
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	3301      	adds	r3, #1
 800ee16:	617b      	str	r3, [r7, #20]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	2b20      	cmp	r3, #32
 800ee1e:	d903      	bls.n	800ee28 <get_ldnumber+0x34>
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	2b3a      	cmp	r3, #58	; 0x3a
 800ee26:	d1f4      	bne.n	800ee12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	2b3a      	cmp	r3, #58	; 0x3a
 800ee2e:	d11c      	bne.n	800ee6a <get_ldnumber+0x76>
			tp = *path;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	60fa      	str	r2, [r7, #12]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	3b30      	subs	r3, #48	; 0x30
 800ee40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b09      	cmp	r3, #9
 800ee46:	d80e      	bhi.n	800ee66 <get_ldnumber+0x72>
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d10a      	bne.n	800ee66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d107      	bne.n	800ee66 <get_ldnumber+0x72>
					vol = (int)i;
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	617b      	str	r3, [r7, #20]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	697a      	ldr	r2, [r7, #20]
 800ee64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	e002      	b.n	800ee70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ee6e:	693b      	ldr	r3, [r7, #16]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	371c      	adds	r7, #28
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	70da      	strb	r2, [r3, #3]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee92:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7fe ffa0 	bl	800dddc <move_window>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <check_fs+0x2a>
 800eea2:	2304      	movs	r3, #4
 800eea4:	e038      	b.n	800ef18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	3334      	adds	r3, #52	; 0x34
 800eeaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fe fce4 	bl	800d87c <ld_word>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d001      	beq.n	800eec4 <check_fs+0x48>
 800eec0:	2303      	movs	r3, #3
 800eec2:	e029      	b.n	800ef18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eeca:	2be9      	cmp	r3, #233	; 0xe9
 800eecc:	d009      	beq.n	800eee2 <check_fs+0x66>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eed4:	2beb      	cmp	r3, #235	; 0xeb
 800eed6:	d11e      	bne.n	800ef16 <check_fs+0x9a>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800eede:	2b90      	cmp	r3, #144	; 0x90
 800eee0:	d119      	bne.n	800ef16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3334      	adds	r3, #52	; 0x34
 800eee6:	3336      	adds	r3, #54	; 0x36
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fe fcdf 	bl	800d8ac <ld_dword>
 800eeee:	4603      	mov	r3, r0
 800eef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eef4:	4a0a      	ldr	r2, [pc, #40]	; (800ef20 <check_fs+0xa4>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d101      	bne.n	800eefe <check_fs+0x82>
 800eefa:	2300      	movs	r3, #0
 800eefc:	e00c      	b.n	800ef18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	3334      	adds	r3, #52	; 0x34
 800ef02:	3352      	adds	r3, #82	; 0x52
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fe fcd1 	bl	800d8ac <ld_dword>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	4b05      	ldr	r3, [pc, #20]	; (800ef24 <check_fs+0xa8>)
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d101      	bne.n	800ef16 <check_fs+0x9a>
 800ef12:	2300      	movs	r3, #0
 800ef14:	e000      	b.n	800ef18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ef16:	2302      	movs	r3, #2
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	00544146 	.word	0x00544146
 800ef24:	33544146 	.word	0x33544146

0800ef28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b096      	sub	sp, #88	; 0x58
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	4613      	mov	r3, r2
 800ef34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7ff ff59 	bl	800edf4 <get_ldnumber>
 800ef42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ef44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	da01      	bge.n	800ef4e <find_volume+0x26>
 800ef4a:	230b      	movs	r3, #11
 800ef4c:	e265      	b.n	800f41a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ef4e:	4ab0      	ldr	r2, [pc, #704]	; (800f210 <find_volume+0x2e8>)
 800ef50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ef58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <find_volume+0x3a>
 800ef5e:	230c      	movs	r3, #12
 800ef60:	e25b      	b.n	800f41a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ef68:	79fb      	ldrb	r3, [r7, #7]
 800ef6a:	f023 0301 	bic.w	r3, r3, #1
 800ef6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ef70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d01a      	beq.n	800efae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ef78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7a:	785b      	ldrb	r3, [r3, #1]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fe fbdf 	bl	800d740 <disk_status>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ef88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef8c:	f003 0301 	and.w	r3, r3, #1
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d10c      	bne.n	800efae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d007      	beq.n	800efaa <find_volume+0x82>
 800ef9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef9e:	f003 0304 	and.w	r3, r3, #4
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800efa6:	230a      	movs	r3, #10
 800efa8:	e237      	b.n	800f41a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800efaa:	2300      	movs	r3, #0
 800efac:	e235      	b.n	800f41a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800efae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb0:	2200      	movs	r2, #0
 800efb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800efb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800efbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbe:	785b      	ldrb	r3, [r3, #1]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe fbd7 	bl	800d774 <disk_initialize>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800efcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efd0:	f003 0301 	and.w	r3, r3, #1
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800efd8:	2303      	movs	r3, #3
 800efda:	e21e      	b.n	800f41a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800efdc:	79fb      	ldrb	r3, [r7, #7]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d007      	beq.n	800eff2 <find_volume+0xca>
 800efe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efe6:	f003 0304 	and.w	r3, r3, #4
 800efea:	2b00      	cmp	r3, #0
 800efec:	d001      	beq.n	800eff2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800efee:	230a      	movs	r3, #10
 800eff0:	e213      	b.n	800f41a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800eff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff4:	7858      	ldrb	r0, [r3, #1]
 800eff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff8:	330c      	adds	r3, #12
 800effa:	461a      	mov	r2, r3
 800effc:	2102      	movs	r1, #2
 800effe:	f7fe fc1f 	bl	800d840 <disk_ioctl>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d001      	beq.n	800f00c <find_volume+0xe4>
 800f008:	2301      	movs	r3, #1
 800f00a:	e206      	b.n	800f41a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	899b      	ldrh	r3, [r3, #12]
 800f010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f014:	d80d      	bhi.n	800f032 <find_volume+0x10a>
 800f016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f018:	899b      	ldrh	r3, [r3, #12]
 800f01a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f01e:	d308      	bcc.n	800f032 <find_volume+0x10a>
 800f020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f022:	899b      	ldrh	r3, [r3, #12]
 800f024:	461a      	mov	r2, r3
 800f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f028:	899b      	ldrh	r3, [r3, #12]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	4013      	ands	r3, r2
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <find_volume+0x10e>
 800f032:	2301      	movs	r3, #1
 800f034:	e1f1      	b.n	800f41a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f03a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f03c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f03e:	f7ff ff1d 	bl	800ee7c <check_fs>
 800f042:	4603      	mov	r3, r0
 800f044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d14b      	bne.n	800f0e8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f050:	2300      	movs	r3, #0
 800f052:	643b      	str	r3, [r7, #64]	; 0x40
 800f054:	e01f      	b.n	800f096 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f058:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f05e:	011b      	lsls	r3, r3, #4
 800f060:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f064:	4413      	add	r3, r2
 800f066:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06a:	3304      	adds	r3, #4
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d006      	beq.n	800f080 <find_volume+0x158>
 800f072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f074:	3308      	adds	r3, #8
 800f076:	4618      	mov	r0, r3
 800f078:	f7fe fc18 	bl	800d8ac <ld_dword>
 800f07c:	4602      	mov	r2, r0
 800f07e:	e000      	b.n	800f082 <find_volume+0x15a>
 800f080:	2200      	movs	r2, #0
 800f082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f08a:	440b      	add	r3, r1
 800f08c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f092:	3301      	adds	r3, #1
 800f094:	643b      	str	r3, [r7, #64]	; 0x40
 800f096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d9dc      	bls.n	800f056 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f09c:	2300      	movs	r3, #0
 800f09e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <find_volume+0x184>
 800f0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f0ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d005      	beq.n	800f0ce <find_volume+0x1a6>
 800f0c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0c6:	f7ff fed9 	bl	800ee7c <check_fs>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	e000      	b.n	800f0d0 <find_volume+0x1a8>
 800f0ce:	2303      	movs	r3, #3
 800f0d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d905      	bls.n	800f0e8 <find_volume+0x1c0>
 800f0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0de:	3301      	adds	r3, #1
 800f0e0:	643b      	str	r3, [r7, #64]	; 0x40
 800f0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d9e1      	bls.n	800f0ac <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f0e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	d101      	bne.n	800f0f4 <find_volume+0x1cc>
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e192      	b.n	800f41a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f0f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d901      	bls.n	800f100 <find_volume+0x1d8>
 800f0fc:	230d      	movs	r3, #13
 800f0fe:	e18c      	b.n	800f41a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	3334      	adds	r3, #52	; 0x34
 800f104:	330b      	adds	r3, #11
 800f106:	4618      	mov	r0, r3
 800f108:	f7fe fbb8 	bl	800d87c <ld_word>
 800f10c:	4603      	mov	r3, r0
 800f10e:	461a      	mov	r2, r3
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	899b      	ldrh	r3, [r3, #12]
 800f114:	429a      	cmp	r2, r3
 800f116:	d001      	beq.n	800f11c <find_volume+0x1f4>
 800f118:	230d      	movs	r3, #13
 800f11a:	e17e      	b.n	800f41a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11e:	3334      	adds	r3, #52	; 0x34
 800f120:	3316      	adds	r3, #22
 800f122:	4618      	mov	r0, r3
 800f124:	f7fe fbaa 	bl	800d87c <ld_word>
 800f128:	4603      	mov	r3, r0
 800f12a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d106      	bne.n	800f140 <find_volume+0x218>
 800f132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f134:	3334      	adds	r3, #52	; 0x34
 800f136:	3324      	adds	r3, #36	; 0x24
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fe fbb7 	bl	800d8ac <ld_dword>
 800f13e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f144:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f148:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f152:	789b      	ldrb	r3, [r3, #2]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d005      	beq.n	800f164 <find_volume+0x23c>
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	789b      	ldrb	r3, [r3, #2]
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	d001      	beq.n	800f164 <find_volume+0x23c>
 800f160:	230d      	movs	r3, #13
 800f162:	e15a      	b.n	800f41a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	789b      	ldrb	r3, [r3, #2]
 800f168:	461a      	mov	r2, r3
 800f16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f16c:	fb02 f303 	mul.w	r3, r2, r3
 800f170:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f178:	b29a      	uxth	r2, r3
 800f17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	895b      	ldrh	r3, [r3, #10]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d008      	beq.n	800f198 <find_volume+0x270>
 800f186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f188:	895b      	ldrh	r3, [r3, #10]
 800f18a:	461a      	mov	r2, r3
 800f18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18e:	895b      	ldrh	r3, [r3, #10]
 800f190:	3b01      	subs	r3, #1
 800f192:	4013      	ands	r3, r2
 800f194:	2b00      	cmp	r3, #0
 800f196:	d001      	beq.n	800f19c <find_volume+0x274>
 800f198:	230d      	movs	r3, #13
 800f19a:	e13e      	b.n	800f41a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	3334      	adds	r3, #52	; 0x34
 800f1a0:	3311      	adds	r3, #17
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fe fb6a 	bl	800d87c <ld_word>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	891b      	ldrh	r3, [r3, #8]
 800f1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1b6:	8992      	ldrh	r2, [r2, #12]
 800f1b8:	0952      	lsrs	r2, r2, #5
 800f1ba:	b292      	uxth	r2, r2
 800f1bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1c0:	fb02 f201 	mul.w	r2, r2, r1
 800f1c4:	1a9b      	subs	r3, r3, r2
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d001      	beq.n	800f1d0 <find_volume+0x2a8>
 800f1cc:	230d      	movs	r3, #13
 800f1ce:	e124      	b.n	800f41a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d2:	3334      	adds	r3, #52	; 0x34
 800f1d4:	3313      	adds	r3, #19
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fe fb50 	bl	800d87c <ld_word>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d106      	bne.n	800f1f4 <find_volume+0x2cc>
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e8:	3334      	adds	r3, #52	; 0x34
 800f1ea:	3320      	adds	r3, #32
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fe fb5d 	bl	800d8ac <ld_dword>
 800f1f2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	3334      	adds	r3, #52	; 0x34
 800f1f8:	330e      	adds	r3, #14
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fe fb3e 	bl	800d87c <ld_word>
 800f200:	4603      	mov	r3, r0
 800f202:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f204:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f206:	2b00      	cmp	r3, #0
 800f208:	d104      	bne.n	800f214 <find_volume+0x2ec>
 800f20a:	230d      	movs	r3, #13
 800f20c:	e105      	b.n	800f41a <find_volume+0x4f2>
 800f20e:	bf00      	nop
 800f210:	2000086c 	.word	0x2000086c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f214:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f218:	4413      	add	r3, r2
 800f21a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f21c:	8911      	ldrh	r1, [r2, #8]
 800f21e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f220:	8992      	ldrh	r2, [r2, #12]
 800f222:	0952      	lsrs	r2, r2, #5
 800f224:	b292      	uxth	r2, r2
 800f226:	fbb1 f2f2 	udiv	r2, r1, r2
 800f22a:	b292      	uxth	r2, r2
 800f22c:	4413      	add	r3, r2
 800f22e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f234:	429a      	cmp	r2, r3
 800f236:	d201      	bcs.n	800f23c <find_volume+0x314>
 800f238:	230d      	movs	r3, #13
 800f23a:	e0ee      	b.n	800f41a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f23c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f240:	1ad3      	subs	r3, r2, r3
 800f242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f244:	8952      	ldrh	r2, [r2, #10]
 800f246:	fbb3 f3f2 	udiv	r3, r3, r2
 800f24a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <find_volume+0x32e>
 800f252:	230d      	movs	r3, #13
 800f254:	e0e1      	b.n	800f41a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f256:	2303      	movs	r3, #3
 800f258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f262:	4293      	cmp	r3, r2
 800f264:	d802      	bhi.n	800f26c <find_volume+0x344>
 800f266:	2302      	movs	r3, #2
 800f268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f272:	4293      	cmp	r3, r2
 800f274:	d802      	bhi.n	800f27c <find_volume+0x354>
 800f276:	2301      	movs	r3, #1
 800f278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27e:	1c9a      	adds	r2, r3, #2
 800f280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f282:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f286:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f288:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f28a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f28c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f28e:	441a      	add	r2, r3
 800f290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f292:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f294:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f298:	441a      	add	r2, r3
 800f29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f29e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2a2:	2b03      	cmp	r3, #3
 800f2a4:	d11e      	bne.n	800f2e4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a8:	3334      	adds	r3, #52	; 0x34
 800f2aa:	332a      	adds	r3, #42	; 0x2a
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fe fae5 	bl	800d87c <ld_word>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d001      	beq.n	800f2bc <find_volume+0x394>
 800f2b8:	230d      	movs	r3, #13
 800f2ba:	e0ae      	b.n	800f41a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	891b      	ldrh	r3, [r3, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <find_volume+0x3a0>
 800f2c4:	230d      	movs	r3, #13
 800f2c6:	e0a8      	b.n	800f41a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ca:	3334      	adds	r3, #52	; 0x34
 800f2cc:	332c      	adds	r3, #44	; 0x2c
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe faec 	bl	800d8ac <ld_dword>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2dc:	699b      	ldr	r3, [r3, #24]
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	647b      	str	r3, [r7, #68]	; 0x44
 800f2e2:	e01f      	b.n	800f324 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	891b      	ldrh	r3, [r3, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d101      	bne.n	800f2f0 <find_volume+0x3c8>
 800f2ec:	230d      	movs	r3, #13
 800f2ee:	e094      	b.n	800f41a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2f6:	441a      	add	r2, r3
 800f2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f2fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f300:	2b02      	cmp	r3, #2
 800f302:	d103      	bne.n	800f30c <find_volume+0x3e4>
 800f304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f306:	699b      	ldr	r3, [r3, #24]
 800f308:	005b      	lsls	r3, r3, #1
 800f30a:	e00a      	b.n	800f322 <find_volume+0x3fa>
 800f30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30e:	699a      	ldr	r2, [r3, #24]
 800f310:	4613      	mov	r3, r2
 800f312:	005b      	lsls	r3, r3, #1
 800f314:	4413      	add	r3, r2
 800f316:	085a      	lsrs	r2, r3, #1
 800f318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31a:	699b      	ldr	r3, [r3, #24]
 800f31c:	f003 0301 	and.w	r3, r3, #1
 800f320:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f322:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	69da      	ldr	r2, [r3, #28]
 800f328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32a:	899b      	ldrh	r3, [r3, #12]
 800f32c:	4619      	mov	r1, r3
 800f32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f330:	440b      	add	r3, r1
 800f332:	3b01      	subs	r3, #1
 800f334:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f336:	8989      	ldrh	r1, [r1, #12]
 800f338:	fbb3 f3f1 	udiv	r3, r3, r1
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d201      	bcs.n	800f344 <find_volume+0x41c>
 800f340:	230d      	movs	r3, #13
 800f342:	e06a      	b.n	800f41a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f34a:	615a      	str	r2, [r3, #20]
 800f34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34e:	695a      	ldr	r2, [r3, #20]
 800f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f352:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f356:	2280      	movs	r2, #128	; 0x80
 800f358:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f35a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d149      	bne.n	800f3f6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f364:	3334      	adds	r3, #52	; 0x34
 800f366:	3330      	adds	r3, #48	; 0x30
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fe fa87 	bl	800d87c <ld_word>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b01      	cmp	r3, #1
 800f372:	d140      	bne.n	800f3f6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f376:	3301      	adds	r3, #1
 800f378:	4619      	mov	r1, r3
 800f37a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f37c:	f7fe fd2e 	bl	800dddc <move_window>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d137      	bne.n	800f3f6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f388:	2200      	movs	r2, #0
 800f38a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	3334      	adds	r3, #52	; 0x34
 800f390:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe fa71 	bl	800d87c <ld_word>
 800f39a:	4603      	mov	r3, r0
 800f39c:	461a      	mov	r2, r3
 800f39e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d127      	bne.n	800f3f6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a8:	3334      	adds	r3, #52	; 0x34
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fe fa7e 	bl	800d8ac <ld_dword>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	4b1c      	ldr	r3, [pc, #112]	; (800f424 <find_volume+0x4fc>)
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d11e      	bne.n	800f3f6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ba:	3334      	adds	r3, #52	; 0x34
 800f3bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fe fa73 	bl	800d8ac <ld_dword>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	4b17      	ldr	r3, [pc, #92]	; (800f428 <find_volume+0x500>)
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d113      	bne.n	800f3f6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d0:	3334      	adds	r3, #52	; 0x34
 800f3d2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe fa68 	bl	800d8ac <ld_dword>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e4:	3334      	adds	r3, #52	; 0x34
 800f3e6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fe fa5e 	bl	800d8ac <ld_dword>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f3fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f3fe:	4b0b      	ldr	r3, [pc, #44]	; (800f42c <find_volume+0x504>)
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	3301      	adds	r3, #1
 800f404:	b29a      	uxth	r2, r3
 800f406:	4b09      	ldr	r3, [pc, #36]	; (800f42c <find_volume+0x504>)
 800f408:	801a      	strh	r2, [r3, #0]
 800f40a:	4b08      	ldr	r3, [pc, #32]	; (800f42c <find_volume+0x504>)
 800f40c:	881a      	ldrh	r2, [r3, #0]
 800f40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f410:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f414:	f7fe fc7a 	bl	800dd0c <clear_lock>
#endif
	return FR_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3758      	adds	r7, #88	; 0x58
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	41615252 	.word	0x41615252
 800f428:	61417272 	.word	0x61417272
 800f42c:	20000870 	.word	0x20000870

0800f430 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f43a:	2309      	movs	r3, #9
 800f43c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d01c      	beq.n	800f47e <validate+0x4e>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d018      	beq.n	800f47e <validate+0x4e>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d013      	beq.n	800f47e <validate+0x4e>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	889a      	ldrh	r2, [r3, #4]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	88db      	ldrh	r3, [r3, #6]
 800f460:	429a      	cmp	r2, r3
 800f462:	d10c      	bne.n	800f47e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	785b      	ldrb	r3, [r3, #1]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fe f968 	bl	800d740 <disk_status>
 800f470:	4603      	mov	r3, r0
 800f472:	f003 0301 	and.w	r3, r3, #1
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <validate+0x4e>
			res = FR_OK;
 800f47a:	2300      	movs	r3, #0
 800f47c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f47e:	7bfb      	ldrb	r3, [r7, #15]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d102      	bne.n	800f48a <validate+0x5a>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	e000      	b.n	800f48c <validate+0x5c>
 800f48a:	2300      	movs	r3, #0
 800f48c:	683a      	ldr	r2, [r7, #0]
 800f48e:	6013      	str	r3, [r2, #0]
	return res;
 800f490:	7bfb      	ldrb	r3, [r7, #15]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
	...

0800f49c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b088      	sub	sp, #32
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f4ae:	f107 0310 	add.w	r3, r7, #16
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff fc9e 	bl	800edf4 <get_ldnumber>
 800f4b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	da01      	bge.n	800f4c4 <f_mount+0x28>
 800f4c0:	230b      	movs	r3, #11
 800f4c2:	e02b      	b.n	800f51c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f4c4:	4a17      	ldr	r2, [pc, #92]	; (800f524 <f_mount+0x88>)
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d005      	beq.n	800f4e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f4d4:	69b8      	ldr	r0, [r7, #24]
 800f4d6:	f7fe fc19 	bl	800dd0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d002      	beq.n	800f4ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	490d      	ldr	r1, [pc, #52]	; (800f524 <f_mount+0x88>)
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d002      	beq.n	800f502 <f_mount+0x66>
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d001      	beq.n	800f506 <f_mount+0x6a>
 800f502:	2300      	movs	r3, #0
 800f504:	e00a      	b.n	800f51c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f506:	f107 010c 	add.w	r1, r7, #12
 800f50a:	f107 0308 	add.w	r3, r7, #8
 800f50e:	2200      	movs	r2, #0
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff fd09 	bl	800ef28 <find_volume>
 800f516:	4603      	mov	r3, r0
 800f518:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3720      	adds	r7, #32
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	2000086c 	.word	0x2000086c

0800f528 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b098      	sub	sp, #96	; 0x60
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	4613      	mov	r3, r2
 800f534:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d101      	bne.n	800f540 <f_open+0x18>
 800f53c:	2309      	movs	r3, #9
 800f53e:	e1bb      	b.n	800f8b8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f546:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f548:	79fa      	ldrb	r2, [r7, #7]
 800f54a:	f107 0110 	add.w	r1, r7, #16
 800f54e:	f107 0308 	add.w	r3, r7, #8
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff fce8 	bl	800ef28 <find_volume>
 800f558:	4603      	mov	r3, r0
 800f55a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f55e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f562:	2b00      	cmp	r3, #0
 800f564:	f040 819f 	bne.w	800f8a6 <f_open+0x37e>
		dj.obj.fs = fs;
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	f107 0314 	add.w	r3, r7, #20
 800f572:	4611      	mov	r1, r2
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff fbc7 	bl	800ed08 <follow_path>
 800f57a:	4603      	mov	r3, r0
 800f57c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f584:	2b00      	cmp	r3, #0
 800f586:	d11a      	bne.n	800f5be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f588:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f58c:	b25b      	sxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	da03      	bge.n	800f59a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f592:	2306      	movs	r3, #6
 800f594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f598:	e011      	b.n	800f5be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f59a:	79fb      	ldrb	r3, [r7, #7]
 800f59c:	f023 0301 	bic.w	r3, r3, #1
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	bf14      	ite	ne
 800f5a4:	2301      	movne	r3, #1
 800f5a6:	2300      	moveq	r3, #0
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f107 0314 	add.w	r3, r7, #20
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fe fa62 	bl	800da7c <chk_lock>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f5be:	79fb      	ldrb	r3, [r7, #7]
 800f5c0:	f003 031c 	and.w	r3, r3, #28
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d07f      	beq.n	800f6c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d017      	beq.n	800f600 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5d4:	2b04      	cmp	r3, #4
 800f5d6:	d10e      	bne.n	800f5f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f5d8:	f7fe faac 	bl	800db34 <enq_lock>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d006      	beq.n	800f5f0 <f_open+0xc8>
 800f5e2:	f107 0314 	add.w	r3, r7, #20
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff fa68 	bl	800eabc <dir_register>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	e000      	b.n	800f5f2 <f_open+0xca>
 800f5f0:	2312      	movs	r3, #18
 800f5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f5f6:	79fb      	ldrb	r3, [r7, #7]
 800f5f8:	f043 0308 	orr.w	r3, r3, #8
 800f5fc:	71fb      	strb	r3, [r7, #7]
 800f5fe:	e010      	b.n	800f622 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f600:	7ebb      	ldrb	r3, [r7, #26]
 800f602:	f003 0311 	and.w	r3, r3, #17
 800f606:	2b00      	cmp	r3, #0
 800f608:	d003      	beq.n	800f612 <f_open+0xea>
					res = FR_DENIED;
 800f60a:	2307      	movs	r3, #7
 800f60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f610:	e007      	b.n	800f622 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f612:	79fb      	ldrb	r3, [r7, #7]
 800f614:	f003 0304 	and.w	r3, r3, #4
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d002      	beq.n	800f622 <f_open+0xfa>
 800f61c:	2308      	movs	r3, #8
 800f61e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f626:	2b00      	cmp	r3, #0
 800f628:	d168      	bne.n	800f6fc <f_open+0x1d4>
 800f62a:	79fb      	ldrb	r3, [r7, #7]
 800f62c:	f003 0308 	and.w	r3, r3, #8
 800f630:	2b00      	cmp	r3, #0
 800f632:	d063      	beq.n	800f6fc <f_open+0x1d4>
				dw = GET_FATTIME();
 800f634:	f7fd fe32 	bl	800d29c <get_fattime>
 800f638:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63c:	330e      	adds	r3, #14
 800f63e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f640:	4618      	mov	r0, r3
 800f642:	f7fe f971 	bl	800d928 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f648:	3316      	adds	r3, #22
 800f64a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe f96b 	bl	800d928 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f654:	330b      	adds	r3, #11
 800f656:	2220      	movs	r2, #32
 800f658:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f65e:	4611      	mov	r1, r2
 800f660:	4618      	mov	r0, r3
 800f662:	f7ff f93a 	bl	800e8da <ld_clust>
 800f666:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f66c:	2200      	movs	r2, #0
 800f66e:	4618      	mov	r0, r3
 800f670:	f7ff f952 	bl	800e918 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f676:	331c      	adds	r3, #28
 800f678:	2100      	movs	r1, #0
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fe f954 	bl	800d928 <st_dword>
					fs->wflag = 1;
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	2201      	movs	r2, #1
 800f684:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d037      	beq.n	800f6fc <f_open+0x1d4>
						dw = fs->winsect;
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f690:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f692:	f107 0314 	add.w	r3, r7, #20
 800f696:	2200      	movs	r2, #0
 800f698:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fe fe42 	bl	800e324 <remove_chain>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f6a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d126      	bne.n	800f6fc <f_open+0x1d4>
							res = move_window(fs, dw);
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe fb92 	bl	800dddc <move_window>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6c2:	3a01      	subs	r2, #1
 800f6c4:	611a      	str	r2, [r3, #16]
 800f6c6:	e019      	b.n	800f6fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d115      	bne.n	800f6fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f6d0:	7ebb      	ldrb	r3, [r7, #26]
 800f6d2:	f003 0310 	and.w	r3, r3, #16
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d003      	beq.n	800f6e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f6da:	2304      	movs	r3, #4
 800f6dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f6e0:	e00c      	b.n	800f6fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f6e2:	79fb      	ldrb	r3, [r7, #7]
 800f6e4:	f003 0302 	and.w	r3, r3, #2
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d007      	beq.n	800f6fc <f_open+0x1d4>
 800f6ec:	7ebb      	ldrb	r3, [r7, #26]
 800f6ee:	f003 0301 	and.w	r3, r3, #1
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d002      	beq.n	800f6fc <f_open+0x1d4>
						res = FR_DENIED;
 800f6f6:	2307      	movs	r3, #7
 800f6f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f6fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f700:	2b00      	cmp	r3, #0
 800f702:	d128      	bne.n	800f756 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	f003 0308 	and.w	r3, r3, #8
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d003      	beq.n	800f716 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f70e:	79fb      	ldrb	r3, [r7, #7]
 800f710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f714:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f724:	79fb      	ldrb	r3, [r7, #7]
 800f726:	f023 0301 	bic.w	r3, r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	bf14      	ite	ne
 800f72e:	2301      	movne	r3, #1
 800f730:	2300      	moveq	r3, #0
 800f732:	b2db      	uxtb	r3, r3
 800f734:	461a      	mov	r2, r3
 800f736:	f107 0314 	add.w	r3, r7, #20
 800f73a:	4611      	mov	r1, r2
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fe fa1b 	bl	800db78 <inc_lock>
 800f742:	4602      	mov	r2, r0
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d102      	bne.n	800f756 <f_open+0x22e>
 800f750:	2302      	movs	r3, #2
 800f752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f040 80a3 	bne.w	800f8a6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f764:	4611      	mov	r1, r2
 800f766:	4618      	mov	r0, r3
 800f768:	f7ff f8b7 	bl	800e8da <ld_clust>
 800f76c:	4602      	mov	r2, r0
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f774:	331c      	adds	r3, #28
 800f776:	4618      	mov	r0, r3
 800f778:	f7fe f898 	bl	800d8ac <ld_dword>
 800f77c:	4602      	mov	r2, r0
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2200      	movs	r2, #0
 800f786:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	88da      	ldrh	r2, [r3, #6]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	79fa      	ldrb	r2, [r7, #7]
 800f79a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3330      	adds	r3, #48	; 0x30
 800f7b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fe f902 	bl	800d9c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	f003 0320 	and.w	r3, r3, #32
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d06e      	beq.n	800f8a6 <f_open+0x37e>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d06a      	beq.n	800f8a6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	68da      	ldr	r2, [r3, #12]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	895b      	ldrh	r3, [r3, #10]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	899b      	ldrh	r3, [r3, #12]
 800f7e2:	fb03 f302 	mul.w	r3, r3, r2
 800f7e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	657b      	str	r3, [r7, #84]	; 0x54
 800f7f4:	e016      	b.n	800f824 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fe fbab 	bl	800df56 <get_fat>
 800f800:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f804:	2b01      	cmp	r3, #1
 800f806:	d802      	bhi.n	800f80e <f_open+0x2e6>
 800f808:	2302      	movs	r3, #2
 800f80a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f80e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f814:	d102      	bne.n	800f81c <f_open+0x2f4>
 800f816:	2301      	movs	r3, #1
 800f818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f81c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	657b      	str	r3, [r7, #84]	; 0x54
 800f824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d103      	bne.n	800f834 <f_open+0x30c>
 800f82c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f830:	429a      	cmp	r2, r3
 800f832:	d8e0      	bhi.n	800f7f6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f838:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f83a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d131      	bne.n	800f8a6 <f_open+0x37e>
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	899b      	ldrh	r3, [r3, #12]
 800f846:	461a      	mov	r2, r3
 800f848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f84a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f84e:	fb02 f201 	mul.w	r2, r2, r1
 800f852:	1a9b      	subs	r3, r3, r2
 800f854:	2b00      	cmp	r3, #0
 800f856:	d026      	beq.n	800f8a6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fe fb5b 	bl	800df18 <clust2sect>
 800f862:	6478      	str	r0, [r7, #68]	; 0x44
 800f864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f866:	2b00      	cmp	r3, #0
 800f868:	d103      	bne.n	800f872 <f_open+0x34a>
						res = FR_INT_ERR;
 800f86a:	2302      	movs	r3, #2
 800f86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f870:	e019      	b.n	800f8a6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	899b      	ldrh	r3, [r3, #12]
 800f876:	461a      	mov	r2, r3
 800f878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f87a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f880:	441a      	add	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	7858      	ldrb	r0, [r3, #1]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6a1a      	ldr	r2, [r3, #32]
 800f894:	2301      	movs	r3, #1
 800f896:	f7fd ff93 	bl	800d7c0 <disk_read>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <f_open+0x37e>
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d002      	beq.n	800f8b4 <f_open+0x38c>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f8b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3760      	adds	r7, #96	; 0x60
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b08e      	sub	sp, #56	; 0x38
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
 800f8cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f107 0214 	add.w	r2, r7, #20
 800f8de:	4611      	mov	r1, r2
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff fda5 	bl	800f430 <validate>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f8ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d107      	bne.n	800f904 <f_read+0x44>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	7d5b      	ldrb	r3, [r3, #21]
 800f8f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f8fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f900:	2b00      	cmp	r3, #0
 800f902:	d002      	beq.n	800f90a <f_read+0x4a>
 800f904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f908:	e135      	b.n	800fb76 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	7d1b      	ldrb	r3, [r3, #20]
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	2b00      	cmp	r3, #0
 800f914:	d101      	bne.n	800f91a <f_read+0x5a>
 800f916:	2307      	movs	r3, #7
 800f918:	e12d      	b.n	800fb76 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	68da      	ldr	r2, [r3, #12]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	699b      	ldr	r3, [r3, #24]
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	f240 811e 	bls.w	800fb6c <f_read+0x2ac>
 800f930:	6a3b      	ldr	r3, [r7, #32]
 800f932:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f934:	e11a      	b.n	800fb6c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	699b      	ldr	r3, [r3, #24]
 800f93a:	697a      	ldr	r2, [r7, #20]
 800f93c:	8992      	ldrh	r2, [r2, #12]
 800f93e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f942:	fb02 f201 	mul.w	r2, r2, r1
 800f946:	1a9b      	subs	r3, r3, r2
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f040 80d5 	bne.w	800faf8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	699b      	ldr	r3, [r3, #24]
 800f952:	697a      	ldr	r2, [r7, #20]
 800f954:	8992      	ldrh	r2, [r2, #12]
 800f956:	fbb3 f3f2 	udiv	r3, r3, r2
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	8952      	ldrh	r2, [r2, #10]
 800f95e:	3a01      	subs	r2, #1
 800f960:	4013      	ands	r3, r2
 800f962:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d12f      	bne.n	800f9ca <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d103      	bne.n	800f97a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	633b      	str	r3, [r7, #48]	; 0x30
 800f978:	e013      	b.n	800f9a2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d007      	beq.n	800f992 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	699b      	ldr	r3, [r3, #24]
 800f986:	4619      	mov	r1, r3
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f7fe fdc8 	bl	800e51e <clmt_clust>
 800f98e:	6338      	str	r0, [r7, #48]	; 0x30
 800f990:	e007      	b.n	800f9a2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	69db      	ldr	r3, [r3, #28]
 800f998:	4619      	mov	r1, r3
 800f99a:	4610      	mov	r0, r2
 800f99c:	f7fe fadb 	bl	800df56 <get_fat>
 800f9a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d804      	bhi.n	800f9b2 <f_read+0xf2>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2202      	movs	r2, #2
 800f9ac:	755a      	strb	r2, [r3, #21]
 800f9ae:	2302      	movs	r3, #2
 800f9b0:	e0e1      	b.n	800fb76 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9b8:	d104      	bne.n	800f9c4 <f_read+0x104>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	755a      	strb	r2, [r3, #21]
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e0d8      	b.n	800fb76 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	69db      	ldr	r3, [r3, #28]
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4610      	mov	r0, r2
 800f9d4:	f7fe faa0 	bl	800df18 <clust2sect>
 800f9d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d104      	bne.n	800f9ea <f_read+0x12a>
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2202      	movs	r2, #2
 800f9e4:	755a      	strb	r2, [r3, #21]
 800f9e6:	2302      	movs	r3, #2
 800f9e8:	e0c5      	b.n	800fb76 <f_read+0x2b6>
			sect += csect;
 800f9ea:	69ba      	ldr	r2, [r7, #24]
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	4413      	add	r3, r2
 800f9f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	899b      	ldrh	r3, [r3, #12]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9fe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d041      	beq.n	800fa8a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fa06:	69fa      	ldr	r2, [r7, #28]
 800fa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0a:	4413      	add	r3, r2
 800fa0c:	697a      	ldr	r2, [r7, #20]
 800fa0e:	8952      	ldrh	r2, [r2, #10]
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d905      	bls.n	800fa20 <f_read+0x160>
					cc = fs->csize - csect;
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	895b      	ldrh	r3, [r3, #10]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	7858      	ldrb	r0, [r3, #1]
 800fa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa26:	69ba      	ldr	r2, [r7, #24]
 800fa28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa2a:	f7fd fec9 	bl	800d7c0 <disk_read>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d004      	beq.n	800fa3e <f_read+0x17e>
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2201      	movs	r2, #1
 800fa38:	755a      	strb	r2, [r3, #21]
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e09b      	b.n	800fb76 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	7d1b      	ldrb	r3, [r3, #20]
 800fa42:	b25b      	sxtb	r3, r3
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	da18      	bge.n	800fa7a <f_read+0x1ba>
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6a1a      	ldr	r2, [r3, #32]
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d911      	bls.n	800fa7a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6a1a      	ldr	r2, [r3, #32]
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	8992      	ldrh	r2, [r2, #12]
 800fa62:	fb02 f303 	mul.w	r3, r2, r3
 800fa66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa68:	18d0      	adds	r0, r2, r3
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	899b      	ldrh	r3, [r3, #12]
 800fa74:	461a      	mov	r2, r3
 800fa76:	f7fd ff83 	bl	800d980 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	899b      	ldrh	r3, [r3, #12]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa82:	fb02 f303 	mul.w	r3, r2, r3
 800fa86:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fa88:	e05c      	b.n	800fb44 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	69ba      	ldr	r2, [r7, #24]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d02e      	beq.n	800faf2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	7d1b      	ldrb	r3, [r3, #20]
 800fa98:	b25b      	sxtb	r3, r3
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	da18      	bge.n	800fad0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	7858      	ldrb	r0, [r3, #1]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6a1a      	ldr	r2, [r3, #32]
 800faac:	2301      	movs	r3, #1
 800faae:	f7fd fea7 	bl	800d800 <disk_write>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d004      	beq.n	800fac2 <f_read+0x202>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2201      	movs	r2, #1
 800fabc:	755a      	strb	r2, [r3, #21]
 800fabe:	2301      	movs	r3, #1
 800fac0:	e059      	b.n	800fb76 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	7d1b      	ldrb	r3, [r3, #20]
 800fac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faca:	b2da      	uxtb	r2, r3
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	7858      	ldrb	r0, [r3, #1]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fada:	2301      	movs	r3, #1
 800fadc:	69ba      	ldr	r2, [r7, #24]
 800fade:	f7fd fe6f 	bl	800d7c0 <disk_read>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d004      	beq.n	800faf2 <f_read+0x232>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2201      	movs	r2, #1
 800faec:	755a      	strb	r2, [r3, #21]
 800faee:	2301      	movs	r3, #1
 800faf0:	e041      	b.n	800fb76 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	69ba      	ldr	r2, [r7, #24]
 800faf6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	899b      	ldrh	r3, [r3, #12]
 800fafc:	4618      	mov	r0, r3
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	699b      	ldr	r3, [r3, #24]
 800fb02:	697a      	ldr	r2, [r7, #20]
 800fb04:	8992      	ldrh	r2, [r2, #12]
 800fb06:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb0a:	fb02 f201 	mul.w	r2, r2, r1
 800fb0e:	1a9b      	subs	r3, r3, r2
 800fb10:	1ac3      	subs	r3, r0, r3
 800fb12:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fb14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d901      	bls.n	800fb20 <f_read+0x260>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	8992      	ldrh	r2, [r2, #12]
 800fb2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb32:	fb02 f200 	mul.w	r2, r2, r0
 800fb36:	1a9b      	subs	r3, r3, r2
 800fb38:	440b      	add	r3, r1
 800fb3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb40:	f7fd ff1e 	bl	800d980 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fb44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb48:	4413      	add	r3, r2
 800fb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	699a      	ldr	r2, [r3, #24]
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	441a      	add	r2, r3
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	619a      	str	r2, [r3, #24]
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5e:	441a      	add	r2, r3
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	601a      	str	r2, [r3, #0]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f47f aee1 	bne.w	800f936 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3738      	adds	r7, #56	; 0x38
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b08c      	sub	sp, #48	; 0x30
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	60f8      	str	r0, [r7, #12]
 800fb86:	60b9      	str	r1, [r7, #8]
 800fb88:	607a      	str	r2, [r7, #4]
 800fb8a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	2200      	movs	r2, #0
 800fb94:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f107 0210 	add.w	r2, r7, #16
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7ff fc46 	bl	800f430 <validate>
 800fba4:	4603      	mov	r3, r0
 800fba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fbaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d107      	bne.n	800fbc2 <f_write+0x44>
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	7d5b      	ldrb	r3, [r3, #21]
 800fbb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fbba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d002      	beq.n	800fbc8 <f_write+0x4a>
 800fbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbc6:	e16a      	b.n	800fe9e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	7d1b      	ldrb	r3, [r3, #20]
 800fbcc:	f003 0302 	and.w	r3, r3, #2
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <f_write+0x5a>
 800fbd4:	2307      	movs	r3, #7
 800fbd6:	e162      	b.n	800fe9e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	699a      	ldr	r2, [r3, #24]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	441a      	add	r2, r3
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	699b      	ldr	r3, [r3, #24]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	f080 814c 	bcs.w	800fe82 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	43db      	mvns	r3, r3
 800fbf0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fbf2:	e146      	b.n	800fe82 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	699b      	ldr	r3, [r3, #24]
 800fbf8:	693a      	ldr	r2, [r7, #16]
 800fbfa:	8992      	ldrh	r2, [r2, #12]
 800fbfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc00:	fb02 f201 	mul.w	r2, r2, r1
 800fc04:	1a9b      	subs	r3, r3, r2
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f040 80f1 	bne.w	800fdee <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	699b      	ldr	r3, [r3, #24]
 800fc10:	693a      	ldr	r2, [r7, #16]
 800fc12:	8992      	ldrh	r2, [r2, #12]
 800fc14:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	8952      	ldrh	r2, [r2, #10]
 800fc1c:	3a01      	subs	r2, #1
 800fc1e:	4013      	ands	r3, r2
 800fc20:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d143      	bne.n	800fcb0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	699b      	ldr	r3, [r3, #24]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d10c      	bne.n	800fc4a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d11a      	bne.n	800fc72 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2100      	movs	r1, #0
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7fe fbd4 	bl	800e3ee <create_chain>
 800fc46:	62b8      	str	r0, [r7, #40]	; 0x28
 800fc48:	e013      	b.n	800fc72 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d007      	beq.n	800fc62 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	699b      	ldr	r3, [r3, #24]
 800fc56:	4619      	mov	r1, r3
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f7fe fc60 	bl	800e51e <clmt_clust>
 800fc5e:	62b8      	str	r0, [r7, #40]	; 0x28
 800fc60:	e007      	b.n	800fc72 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	69db      	ldr	r3, [r3, #28]
 800fc68:	4619      	mov	r1, r3
 800fc6a:	4610      	mov	r0, r2
 800fc6c:	f7fe fbbf 	bl	800e3ee <create_chain>
 800fc70:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f000 8109 	beq.w	800fe8c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d104      	bne.n	800fc8a <f_write+0x10c>
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2202      	movs	r2, #2
 800fc84:	755a      	strb	r2, [r3, #21]
 800fc86:	2302      	movs	r3, #2
 800fc88:	e109      	b.n	800fe9e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc90:	d104      	bne.n	800fc9c <f_write+0x11e>
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2201      	movs	r2, #1
 800fc96:	755a      	strb	r2, [r3, #21]
 800fc98:	2301      	movs	r3, #1
 800fc9a:	e100      	b.n	800fe9e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fca0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d102      	bne.n	800fcb0 <f_write+0x132>
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	7d1b      	ldrb	r3, [r3, #20]
 800fcb4:	b25b      	sxtb	r3, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	da18      	bge.n	800fcec <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	7858      	ldrb	r0, [r3, #1]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6a1a      	ldr	r2, [r3, #32]
 800fcc8:	2301      	movs	r3, #1
 800fcca:	f7fd fd99 	bl	800d800 <disk_write>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d004      	beq.n	800fcde <f_write+0x160>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	755a      	strb	r2, [r3, #21]
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e0df      	b.n	800fe9e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	7d1b      	ldrb	r3, [r3, #20]
 800fce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fcec:	693a      	ldr	r2, [r7, #16]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	69db      	ldr	r3, [r3, #28]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	4610      	mov	r0, r2
 800fcf6:	f7fe f90f 	bl	800df18 <clust2sect>
 800fcfa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d104      	bne.n	800fd0c <f_write+0x18e>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2202      	movs	r2, #2
 800fd06:	755a      	strb	r2, [r3, #21]
 800fd08:	2302      	movs	r3, #2
 800fd0a:	e0c8      	b.n	800fe9e <f_write+0x320>
			sect += csect;
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	4413      	add	r3, r2
 800fd12:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	899b      	ldrh	r3, [r3, #12]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd20:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fd22:	6a3b      	ldr	r3, [r7, #32]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d043      	beq.n	800fdb0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fd28:	69ba      	ldr	r2, [r7, #24]
 800fd2a:	6a3b      	ldr	r3, [r7, #32]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	693a      	ldr	r2, [r7, #16]
 800fd30:	8952      	ldrh	r2, [r2, #10]
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d905      	bls.n	800fd42 <f_write+0x1c4>
					cc = fs->csize - csect;
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	895b      	ldrh	r3, [r3, #10]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	69bb      	ldr	r3, [r7, #24]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	7858      	ldrb	r0, [r3, #1]
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	697a      	ldr	r2, [r7, #20]
 800fd4a:	69f9      	ldr	r1, [r7, #28]
 800fd4c:	f7fd fd58 	bl	800d800 <disk_write>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d004      	beq.n	800fd60 <f_write+0x1e2>
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	755a      	strb	r2, [r3, #21]
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e09e      	b.n	800fe9e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6a1a      	ldr	r2, [r3, #32]
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	6a3a      	ldr	r2, [r7, #32]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d918      	bls.n	800fda0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	6a1a      	ldr	r2, [r3, #32]
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	693a      	ldr	r2, [r7, #16]
 800fd7e:	8992      	ldrh	r2, [r2, #12]
 800fd80:	fb02 f303 	mul.w	r3, r2, r3
 800fd84:	69fa      	ldr	r2, [r7, #28]
 800fd86:	18d1      	adds	r1, r2, r3
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	899b      	ldrh	r3, [r3, #12]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	f7fd fdf7 	bl	800d980 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	7d1b      	ldrb	r3, [r3, #20]
 800fd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd9a:	b2da      	uxtb	r2, r3
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	899b      	ldrh	r3, [r3, #12]
 800fda4:	461a      	mov	r2, r3
 800fda6:	6a3b      	ldr	r3, [r7, #32]
 800fda8:	fb02 f303 	mul.w	r3, r2, r3
 800fdac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fdae:	e04b      	b.n	800fe48 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6a1b      	ldr	r3, [r3, #32]
 800fdb4:	697a      	ldr	r2, [r7, #20]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d016      	beq.n	800fde8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	699a      	ldr	r2, [r3, #24]
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d210      	bcs.n	800fde8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	7858      	ldrb	r0, [r3, #1]
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	f7fd fcf4 	bl	800d7c0 <disk_read>
 800fdd8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d004      	beq.n	800fde8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2201      	movs	r2, #1
 800fde2:	755a      	strb	r2, [r3, #21]
 800fde4:	2301      	movs	r3, #1
 800fde6:	e05a      	b.n	800fe9e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	697a      	ldr	r2, [r7, #20]
 800fdec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	899b      	ldrh	r3, [r3, #12]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	699b      	ldr	r3, [r3, #24]
 800fdf8:	693a      	ldr	r2, [r7, #16]
 800fdfa:	8992      	ldrh	r2, [r2, #12]
 800fdfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe00:	fb02 f201 	mul.w	r2, r2, r1
 800fe04:	1a9b      	subs	r3, r3, r2
 800fe06:	1ac3      	subs	r3, r0, r3
 800fe08:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fe0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d901      	bls.n	800fe16 <f_write+0x298>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	8992      	ldrh	r2, [r2, #12]
 800fe24:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe28:	fb02 f200 	mul.w	r2, r2, r0
 800fe2c:	1a9b      	subs	r3, r3, r2
 800fe2e:	440b      	add	r3, r1
 800fe30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe32:	69f9      	ldr	r1, [r7, #28]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fd fda3 	bl	800d980 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	7d1b      	ldrb	r3, [r3, #20]
 800fe3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fe48:	69fa      	ldr	r2, [r7, #28]
 800fe4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4c:	4413      	add	r3, r2
 800fe4e:	61fb      	str	r3, [r7, #28]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	699a      	ldr	r2, [r3, #24]
 800fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe56:	441a      	add	r2, r3
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	619a      	str	r2, [r3, #24]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	68da      	ldr	r2, [r3, #12]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	699b      	ldr	r3, [r3, #24]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	bf38      	it	cc
 800fe68:	461a      	movcc	r2, r3
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	60da      	str	r2, [r3, #12]
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	441a      	add	r2, r3
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	601a      	str	r2, [r3, #0]
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f47f aeb5 	bne.w	800fbf4 <f_write+0x76>
 800fe8a:	e000      	b.n	800fe8e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fe8c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	7d1b      	ldrb	r3, [r3, #20]
 800fe92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3730      	adds	r7, #48	; 0x30
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b086      	sub	sp, #24
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f107 0208 	add.w	r2, r7, #8
 800feb4:	4611      	mov	r1, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff faba 	bl	800f430 <validate>
 800febc:	4603      	mov	r3, r0
 800febe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fec0:	7dfb      	ldrb	r3, [r7, #23]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d168      	bne.n	800ff98 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	7d1b      	ldrb	r3, [r3, #20]
 800feca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d062      	beq.n	800ff98 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	7d1b      	ldrb	r3, [r3, #20]
 800fed6:	b25b      	sxtb	r3, r3
 800fed8:	2b00      	cmp	r3, #0
 800feda:	da15      	bge.n	800ff08 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	7858      	ldrb	r0, [r3, #1]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a1a      	ldr	r2, [r3, #32]
 800feea:	2301      	movs	r3, #1
 800feec:	f7fd fc88 	bl	800d800 <disk_write>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d001      	beq.n	800fefa <f_sync+0x54>
 800fef6:	2301      	movs	r3, #1
 800fef8:	e04f      	b.n	800ff9a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	7d1b      	ldrb	r3, [r3, #20]
 800fefe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ff08:	f7fd f9c8 	bl	800d29c <get_fattime>
 800ff0c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ff0e:	68ba      	ldr	r2, [r7, #8]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff14:	4619      	mov	r1, r3
 800ff16:	4610      	mov	r0, r2
 800ff18:	f7fd ff60 	bl	800dddc <move_window>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ff20:	7dfb      	ldrb	r3, [r7, #23]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d138      	bne.n	800ff98 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	330b      	adds	r3, #11
 800ff30:	781a      	ldrb	r2, [r3, #0]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	330b      	adds	r3, #11
 800ff36:	f042 0220 	orr.w	r2, r2, #32
 800ff3a:	b2d2      	uxtb	r2, r2
 800ff3c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6818      	ldr	r0, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	689b      	ldr	r3, [r3, #8]
 800ff46:	461a      	mov	r2, r3
 800ff48:	68f9      	ldr	r1, [r7, #12]
 800ff4a:	f7fe fce5 	bl	800e918 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f103 021c 	add.w	r2, r3, #28
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	4619      	mov	r1, r3
 800ff5a:	4610      	mov	r0, r2
 800ff5c:	f7fd fce4 	bl	800d928 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	3316      	adds	r3, #22
 800ff64:	6939      	ldr	r1, [r7, #16]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fd fcde 	bl	800d928 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	3312      	adds	r3, #18
 800ff70:	2100      	movs	r1, #0
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fd fcbd 	bl	800d8f2 <st_word>
					fs->wflag = 1;
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7fd ff59 	bl	800de38 <sync_fs>
 800ff86:	4603      	mov	r3, r0
 800ff88:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	7d1b      	ldrb	r3, [r3, #20]
 800ff8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff92:	b2da      	uxtb	r2, r3
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ff98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3718      	adds	r7, #24
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b084      	sub	sp, #16
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7ff ff7b 	bl	800fea6 <f_sync>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d118      	bne.n	800ffec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f107 0208 	add.w	r2, r7, #8
 800ffc0:	4611      	mov	r1, r2
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff fa34 	bl	800f430 <validate>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10c      	bne.n	800ffec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fd fe5c 	bl	800dc94 <dec_lock>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ffe0:	7bfb      	ldrb	r3, [r7, #15]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d102      	bne.n	800ffec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ffec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b090      	sub	sp, #64	; 0x40
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
 800fffe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f107 0208 	add.w	r2, r7, #8
 8010006:	4611      	mov	r1, r2
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff fa11 	bl	800f430 <validate>
 801000e:	4603      	mov	r3, r0
 8010010:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010014:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010018:	2b00      	cmp	r3, #0
 801001a:	d103      	bne.n	8010024 <f_lseek+0x2e>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	7d5b      	ldrb	r3, [r3, #21]
 8010020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010024:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010028:	2b00      	cmp	r3, #0
 801002a:	d002      	beq.n	8010032 <f_lseek+0x3c>
 801002c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010030:	e201      	b.n	8010436 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010036:	2b00      	cmp	r3, #0
 8010038:	f000 80d9 	beq.w	80101ee <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010042:	d15a      	bne.n	80100fa <f_lseek+0x104>
			tbl = fp->cltbl;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010048:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	1d1a      	adds	r2, r3, #4
 801004e:	627a      	str	r2, [r7, #36]	; 0x24
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	617b      	str	r3, [r7, #20]
 8010054:	2302      	movs	r3, #2
 8010056:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801005e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010060:	2b00      	cmp	r3, #0
 8010062:	d03a      	beq.n	80100da <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010066:	613b      	str	r3, [r7, #16]
 8010068:	2300      	movs	r3, #0
 801006a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801006c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006e:	3302      	adds	r3, #2
 8010070:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010074:	60fb      	str	r3, [r7, #12]
 8010076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010078:	3301      	adds	r3, #1
 801007a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010080:	4618      	mov	r0, r3
 8010082:	f7fd ff68 	bl	800df56 <get_fat>
 8010086:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008a:	2b01      	cmp	r3, #1
 801008c:	d804      	bhi.n	8010098 <f_lseek+0xa2>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2202      	movs	r2, #2
 8010092:	755a      	strb	r2, [r3, #21]
 8010094:	2302      	movs	r3, #2
 8010096:	e1ce      	b.n	8010436 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801009e:	d104      	bne.n	80100aa <f_lseek+0xb4>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2201      	movs	r2, #1
 80100a4:	755a      	strb	r2, [r3, #21]
 80100a6:	2301      	movs	r3, #1
 80100a8:	e1c5      	b.n	8010436 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	3301      	adds	r3, #1
 80100ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d0de      	beq.n	8010072 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80100b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d809      	bhi.n	80100d0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	1d1a      	adds	r2, r3, #4
 80100c0:	627a      	str	r2, [r7, #36]	; 0x24
 80100c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100c4:	601a      	str	r2, [r3, #0]
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	1d1a      	adds	r2, r3, #4
 80100ca:	627a      	str	r2, [r7, #36]	; 0x24
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	699b      	ldr	r3, [r3, #24]
 80100d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d3c4      	bcc.n	8010064 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100e0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80100e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d803      	bhi.n	80100f2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	2200      	movs	r2, #0
 80100ee:	601a      	str	r2, [r3, #0]
 80100f0:	e19f      	b.n	8010432 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80100f2:	2311      	movs	r3, #17
 80100f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80100f8:	e19b      	b.n	8010432 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	683a      	ldr	r2, [r7, #0]
 8010100:	429a      	cmp	r2, r3
 8010102:	d902      	bls.n	801010a <f_lseek+0x114>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	683a      	ldr	r2, [r7, #0]
 801010e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	f000 818d 	beq.w	8010432 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	3b01      	subs	r3, #1
 801011c:	4619      	mov	r1, r3
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7fe f9fd 	bl	800e51e <clmt_clust>
 8010124:	4602      	mov	r2, r0
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	69db      	ldr	r3, [r3, #28]
 8010130:	4619      	mov	r1, r3
 8010132:	4610      	mov	r0, r2
 8010134:	f7fd fef0 	bl	800df18 <clust2sect>
 8010138:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d104      	bne.n	801014a <f_lseek+0x154>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2202      	movs	r2, #2
 8010144:	755a      	strb	r2, [r3, #21]
 8010146:	2302      	movs	r3, #2
 8010148:	e175      	b.n	8010436 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	3b01      	subs	r3, #1
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	8992      	ldrh	r2, [r2, #12]
 8010152:	fbb3 f3f2 	udiv	r3, r3, r2
 8010156:	68ba      	ldr	r2, [r7, #8]
 8010158:	8952      	ldrh	r2, [r2, #10]
 801015a:	3a01      	subs	r2, #1
 801015c:	4013      	ands	r3, r2
 801015e:	69ba      	ldr	r2, [r7, #24]
 8010160:	4413      	add	r3, r2
 8010162:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	699b      	ldr	r3, [r3, #24]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	8992      	ldrh	r2, [r2, #12]
 801016c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010170:	fb02 f201 	mul.w	r2, r2, r1
 8010174:	1a9b      	subs	r3, r3, r2
 8010176:	2b00      	cmp	r3, #0
 8010178:	f000 815b 	beq.w	8010432 <f_lseek+0x43c>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a1b      	ldr	r3, [r3, #32]
 8010180:	69ba      	ldr	r2, [r7, #24]
 8010182:	429a      	cmp	r2, r3
 8010184:	f000 8155 	beq.w	8010432 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	7d1b      	ldrb	r3, [r3, #20]
 801018c:	b25b      	sxtb	r3, r3
 801018e:	2b00      	cmp	r3, #0
 8010190:	da18      	bge.n	80101c4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	7858      	ldrb	r0, [r3, #1]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6a1a      	ldr	r2, [r3, #32]
 80101a0:	2301      	movs	r3, #1
 80101a2:	f7fd fb2d 	bl	800d800 <disk_write>
 80101a6:	4603      	mov	r3, r0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d004      	beq.n	80101b6 <f_lseek+0x1c0>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2201      	movs	r2, #1
 80101b0:	755a      	strb	r2, [r3, #21]
 80101b2:	2301      	movs	r3, #1
 80101b4:	e13f      	b.n	8010436 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	7d1b      	ldrb	r3, [r3, #20]
 80101ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101be:	b2da      	uxtb	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	7858      	ldrb	r0, [r3, #1]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101ce:	2301      	movs	r3, #1
 80101d0:	69ba      	ldr	r2, [r7, #24]
 80101d2:	f7fd faf5 	bl	800d7c0 <disk_read>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d004      	beq.n	80101e6 <f_lseek+0x1f0>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2201      	movs	r2, #1
 80101e0:	755a      	strb	r2, [r3, #21]
 80101e2:	2301      	movs	r3, #1
 80101e4:	e127      	b.n	8010436 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	69ba      	ldr	r2, [r7, #24]
 80101ea:	621a      	str	r2, [r3, #32]
 80101ec:	e121      	b.n	8010432 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d908      	bls.n	801020a <f_lseek+0x214>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	7d1b      	ldrb	r3, [r3, #20]
 80101fc:	f003 0302 	and.w	r3, r3, #2
 8010200:	2b00      	cmp	r3, #0
 8010202:	d102      	bne.n	801020a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	699b      	ldr	r3, [r3, #24]
 801020e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	637b      	str	r3, [r7, #52]	; 0x34
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010218:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 80b5 	beq.w	801038c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	895b      	ldrh	r3, [r3, #10]
 8010226:	461a      	mov	r2, r3
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	899b      	ldrh	r3, [r3, #12]
 801022c:	fb03 f302 	mul.w	r3, r3, r2
 8010230:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010232:	6a3b      	ldr	r3, [r7, #32]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d01b      	beq.n	8010270 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	1e5a      	subs	r2, r3, #1
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010242:	6a3b      	ldr	r3, [r7, #32]
 8010244:	1e59      	subs	r1, r3, #1
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801024c:	429a      	cmp	r2, r3
 801024e:	d30f      	bcc.n	8010270 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	1e5a      	subs	r2, r3, #1
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	425b      	negs	r3, r3
 8010258:	401a      	ands	r2, r3
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	699b      	ldr	r3, [r3, #24]
 8010262:	683a      	ldr	r2, [r7, #0]
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	69db      	ldr	r3, [r3, #28]
 801026c:	63bb      	str	r3, [r7, #56]	; 0x38
 801026e:	e022      	b.n	80102b6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010278:	2b00      	cmp	r3, #0
 801027a:	d119      	bne.n	80102b0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2100      	movs	r1, #0
 8010280:	4618      	mov	r0, r3
 8010282:	f7fe f8b4 	bl	800e3ee <create_chain>
 8010286:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028a:	2b01      	cmp	r3, #1
 801028c:	d104      	bne.n	8010298 <f_lseek+0x2a2>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2202      	movs	r2, #2
 8010292:	755a      	strb	r2, [r3, #21]
 8010294:	2302      	movs	r3, #2
 8010296:	e0ce      	b.n	8010436 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801029e:	d104      	bne.n	80102aa <f_lseek+0x2b4>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2201      	movs	r2, #1
 80102a4:	755a      	strb	r2, [r3, #21]
 80102a6:	2301      	movs	r3, #1
 80102a8:	e0c5      	b.n	8010436 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102ae:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102b4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80102b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d067      	beq.n	801038c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80102bc:	e03a      	b.n	8010334 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	1ad3      	subs	r3, r2, r3
 80102c4:	603b      	str	r3, [r7, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	699a      	ldr	r2, [r3, #24]
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	441a      	add	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	7d1b      	ldrb	r3, [r3, #20]
 80102d6:	f003 0302 	and.w	r3, r3, #2
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00b      	beq.n	80102f6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fe f883 	bl	800e3ee <create_chain>
 80102e8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80102ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d108      	bne.n	8010302 <f_lseek+0x30c>
							ofs = 0; break;
 80102f0:	2300      	movs	r3, #0
 80102f2:	603b      	str	r3, [r7, #0]
 80102f4:	e022      	b.n	801033c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fd fe2b 	bl	800df56 <get_fat>
 8010300:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010308:	d104      	bne.n	8010314 <f_lseek+0x31e>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2201      	movs	r2, #1
 801030e:	755a      	strb	r2, [r3, #21]
 8010310:	2301      	movs	r3, #1
 8010312:	e090      	b.n	8010436 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010316:	2b01      	cmp	r3, #1
 8010318:	d904      	bls.n	8010324 <f_lseek+0x32e>
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	699b      	ldr	r3, [r3, #24]
 801031e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010320:	429a      	cmp	r2, r3
 8010322:	d304      	bcc.n	801032e <f_lseek+0x338>
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2202      	movs	r2, #2
 8010328:	755a      	strb	r2, [r3, #21]
 801032a:	2302      	movs	r3, #2
 801032c:	e083      	b.n	8010436 <f_lseek+0x440>
					fp->clust = clst;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010332:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010334:	683a      	ldr	r2, [r7, #0]
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	429a      	cmp	r2, r3
 801033a:	d8c0      	bhi.n	80102be <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	699a      	ldr	r2, [r3, #24]
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	441a      	add	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	899b      	ldrh	r3, [r3, #12]
 801034c:	461a      	mov	r2, r3
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	fbb3 f1f2 	udiv	r1, r3, r2
 8010354:	fb02 f201 	mul.w	r2, r2, r1
 8010358:	1a9b      	subs	r3, r3, r2
 801035a:	2b00      	cmp	r3, #0
 801035c:	d016      	beq.n	801038c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010362:	4618      	mov	r0, r3
 8010364:	f7fd fdd8 	bl	800df18 <clust2sect>
 8010368:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801036a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801036c:	2b00      	cmp	r3, #0
 801036e:	d104      	bne.n	801037a <f_lseek+0x384>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2202      	movs	r2, #2
 8010374:	755a      	strb	r2, [r3, #21]
 8010376:	2302      	movs	r3, #2
 8010378:	e05d      	b.n	8010436 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	899b      	ldrh	r3, [r3, #12]
 801037e:	461a      	mov	r2, r3
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	fbb3 f3f2 	udiv	r3, r3, r2
 8010386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010388:	4413      	add	r3, r2
 801038a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	699a      	ldr	r2, [r3, #24]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	68db      	ldr	r3, [r3, #12]
 8010394:	429a      	cmp	r2, r3
 8010396:	d90a      	bls.n	80103ae <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	699a      	ldr	r2, [r3, #24]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	7d1b      	ldrb	r3, [r3, #20]
 80103a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	68ba      	ldr	r2, [r7, #8]
 80103b4:	8992      	ldrh	r2, [r2, #12]
 80103b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80103ba:	fb02 f201 	mul.w	r2, r2, r1
 80103be:	1a9b      	subs	r3, r3, r2
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d036      	beq.n	8010432 <f_lseek+0x43c>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a1b      	ldr	r3, [r3, #32]
 80103c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d031      	beq.n	8010432 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	7d1b      	ldrb	r3, [r3, #20]
 80103d2:	b25b      	sxtb	r3, r3
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	da18      	bge.n	801040a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	7858      	ldrb	r0, [r3, #1]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6a1a      	ldr	r2, [r3, #32]
 80103e6:	2301      	movs	r3, #1
 80103e8:	f7fd fa0a 	bl	800d800 <disk_write>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d004      	beq.n	80103fc <f_lseek+0x406>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	755a      	strb	r2, [r3, #21]
 80103f8:	2301      	movs	r3, #1
 80103fa:	e01c      	b.n	8010436 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	7d1b      	ldrb	r3, [r3, #20]
 8010400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010404:	b2da      	uxtb	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	7858      	ldrb	r0, [r3, #1]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010414:	2301      	movs	r3, #1
 8010416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010418:	f7fd f9d2 	bl	800d7c0 <disk_read>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d004      	beq.n	801042c <f_lseek+0x436>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2201      	movs	r2, #1
 8010426:	755a      	strb	r2, [r3, #21]
 8010428:	2301      	movs	r3, #1
 801042a:	e004      	b.n	8010436 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010430:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010432:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010436:	4618      	mov	r0, r3
 8010438:	3740      	adds	r7, #64	; 0x40
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801043e:	b580      	push	{r7, lr}
 8010440:	b086      	sub	sp, #24
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d101      	bne.n	8010452 <f_opendir+0x14>
 801044e:	2309      	movs	r3, #9
 8010450:	e064      	b.n	801051c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010456:	f107 010c 	add.w	r1, r7, #12
 801045a:	463b      	mov	r3, r7
 801045c:	2200      	movs	r2, #0
 801045e:	4618      	mov	r0, r3
 8010460:	f7fe fd62 	bl	800ef28 <find_volume>
 8010464:	4603      	mov	r3, r0
 8010466:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010468:	7dfb      	ldrb	r3, [r7, #23]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d14f      	bne.n	801050e <f_opendir+0xd0>
		obj->fs = fs;
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	4619      	mov	r1, r3
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7fe fc45 	bl	800ed08 <follow_path>
 801047e:	4603      	mov	r3, r0
 8010480:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010482:	7dfb      	ldrb	r3, [r7, #23]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d13d      	bne.n	8010504 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801048e:	b25b      	sxtb	r3, r3
 8010490:	2b00      	cmp	r3, #0
 8010492:	db12      	blt.n	80104ba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	799b      	ldrb	r3, [r3, #6]
 8010498:	f003 0310 	and.w	r3, r3, #16
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00a      	beq.n	80104b6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a1b      	ldr	r3, [r3, #32]
 80104a6:	4619      	mov	r1, r3
 80104a8:	4610      	mov	r0, r2
 80104aa:	f7fe fa16 	bl	800e8da <ld_clust>
 80104ae:	4602      	mov	r2, r0
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	609a      	str	r2, [r3, #8]
 80104b4:	e001      	b.n	80104ba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80104b6:	2305      	movs	r3, #5
 80104b8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80104ba:	7dfb      	ldrb	r3, [r7, #23]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d121      	bne.n	8010504 <f_opendir+0xc6>
				obj->id = fs->id;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	88da      	ldrh	r2, [r3, #6]
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80104c8:	2100      	movs	r1, #0
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7fe f85f 	bl	800e58e <dir_sdi>
 80104d0:	4603      	mov	r3, r0
 80104d2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80104d4:	7dfb      	ldrb	r3, [r7, #23]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d114      	bne.n	8010504 <f_opendir+0xc6>
					if (obj->sclust) {
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00d      	beq.n	80104fe <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80104e2:	2100      	movs	r1, #0
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f7fd fb47 	bl	800db78 <inc_lock>
 80104ea:	4602      	mov	r2, r0
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	691b      	ldr	r3, [r3, #16]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d105      	bne.n	8010504 <f_opendir+0xc6>
 80104f8:	2312      	movs	r3, #18
 80104fa:	75fb      	strb	r3, [r7, #23]
 80104fc:	e002      	b.n	8010504 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2200      	movs	r2, #0
 8010502:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010504:	7dfb      	ldrb	r3, [r7, #23]
 8010506:	2b04      	cmp	r3, #4
 8010508:	d101      	bne.n	801050e <f_opendir+0xd0>
 801050a:	2305      	movs	r3, #5
 801050c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d002      	beq.n	801051a <f_opendir+0xdc>
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	2200      	movs	r2, #0
 8010518:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801051a:	7dfb      	ldrb	r3, [r7, #23]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3718      	adds	r7, #24
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f107 0208 	add.w	r2, r7, #8
 8010534:	4611      	mov	r1, r2
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe ff7a 	bl	800f430 <validate>
 801053c:	4603      	mov	r3, r0
 801053e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d126      	bne.n	8010594 <f_readdir+0x70>
		if (!fno) {
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d106      	bne.n	801055a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801054c:	2100      	movs	r1, #0
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7fe f81d 	bl	800e58e <dir_sdi>
 8010554:	4603      	mov	r3, r0
 8010556:	73fb      	strb	r3, [r7, #15]
 8010558:	e01c      	b.n	8010594 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801055a:	2100      	movs	r1, #0
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7fe f9fb 	bl	800e958 <dir_read>
 8010562:	4603      	mov	r3, r0
 8010564:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010566:	7bfb      	ldrb	r3, [r7, #15]
 8010568:	2b04      	cmp	r3, #4
 801056a:	d101      	bne.n	8010570 <f_readdir+0x4c>
 801056c:	2300      	movs	r3, #0
 801056e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010570:	7bfb      	ldrb	r3, [r7, #15]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d10e      	bne.n	8010594 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010576:	6839      	ldr	r1, [r7, #0]
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7fe fad1 	bl	800eb20 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801057e:	2100      	movs	r1, #0
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7fe f88d 	bl	800e6a0 <dir_next>
 8010586:	4603      	mov	r3, r0
 8010588:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801058a:	7bfb      	ldrb	r3, [r7, #15]
 801058c:	2b04      	cmp	r3, #4
 801058e:	d101      	bne.n	8010594 <f_readdir+0x70>
 8010590:	2300      	movs	r3, #0
 8010592:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010594:	7bfb      	ldrb	r3, [r7, #15]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b092      	sub	sp, #72	; 0x48
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	60f8      	str	r0, [r7, #12]
 80105a6:	60b9      	str	r1, [r7, #8]
 80105a8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80105aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80105ae:	f107 030c 	add.w	r3, r7, #12
 80105b2:	2200      	movs	r2, #0
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fe fcb7 	bl	800ef28 <find_volume>
 80105ba:	4603      	mov	r3, r0
 80105bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80105c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f040 8099 	bne.w	80106fc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80105ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d2:	695a      	ldr	r2, [r3, #20]
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	699b      	ldr	r3, [r3, #24]
 80105d8:	3b02      	subs	r3, #2
 80105da:	429a      	cmp	r2, r3
 80105dc:	d804      	bhi.n	80105e8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80105de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e0:	695a      	ldr	r2, [r3, #20]
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	601a      	str	r2, [r3, #0]
 80105e6:	e089      	b.n	80106fc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80105e8:	2300      	movs	r3, #0
 80105ea:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80105ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d128      	bne.n	8010646 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80105f4:	2302      	movs	r3, #2
 80105f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80105fc:	f107 0314 	add.w	r3, r7, #20
 8010600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010602:	4618      	mov	r0, r3
 8010604:	f7fd fca7 	bl	800df56 <get_fat>
 8010608:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010610:	d103      	bne.n	801061a <f_getfree+0x7c>
 8010612:	2301      	movs	r3, #1
 8010614:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010618:	e063      	b.n	80106e2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061c:	2b01      	cmp	r3, #1
 801061e:	d103      	bne.n	8010628 <f_getfree+0x8a>
 8010620:	2302      	movs	r3, #2
 8010622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010626:	e05c      	b.n	80106e2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062a:	2b00      	cmp	r3, #0
 801062c:	d102      	bne.n	8010634 <f_getfree+0x96>
 801062e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010630:	3301      	adds	r3, #1
 8010632:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010636:	3301      	adds	r3, #1
 8010638:	63fb      	str	r3, [r7, #60]	; 0x3c
 801063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063c:	699b      	ldr	r3, [r3, #24]
 801063e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010640:	429a      	cmp	r2, r3
 8010642:	d3db      	bcc.n	80105fc <f_getfree+0x5e>
 8010644:	e04d      	b.n	80106e2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	699b      	ldr	r3, [r3, #24]
 801064a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010650:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010652:	2300      	movs	r3, #0
 8010654:	637b      	str	r3, [r7, #52]	; 0x34
 8010656:	2300      	movs	r3, #0
 8010658:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065c:	2b00      	cmp	r3, #0
 801065e:	d113      	bne.n	8010688 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010664:	1c5a      	adds	r2, r3, #1
 8010666:	63ba      	str	r2, [r7, #56]	; 0x38
 8010668:	4619      	mov	r1, r3
 801066a:	f7fd fbb7 	bl	800dddc <move_window>
 801066e:	4603      	mov	r3, r0
 8010670:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8010674:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010678:	2b00      	cmp	r3, #0
 801067a:	d131      	bne.n	80106e0 <f_getfree+0x142>
							p = fs->win;
 801067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067e:	3334      	adds	r3, #52	; 0x34
 8010680:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010684:	899b      	ldrh	r3, [r3, #12]
 8010686:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	2b02      	cmp	r3, #2
 801068e:	d10f      	bne.n	80106b0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010692:	f7fd f8f3 	bl	800d87c <ld_word>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <f_getfree+0x104>
 801069c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801069e:	3301      	adds	r3, #1
 80106a0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80106a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a4:	3302      	adds	r3, #2
 80106a6:	633b      	str	r3, [r7, #48]	; 0x30
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106aa:	3b02      	subs	r3, #2
 80106ac:	637b      	str	r3, [r7, #52]	; 0x34
 80106ae:	e010      	b.n	80106d2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80106b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106b2:	f7fd f8fb 	bl	800d8ac <ld_dword>
 80106b6:	4603      	mov	r3, r0
 80106b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d102      	bne.n	80106c6 <f_getfree+0x128>
 80106c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106c2:	3301      	adds	r3, #1
 80106c4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80106c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c8:	3304      	adds	r3, #4
 80106ca:	633b      	str	r3, [r7, #48]	; 0x30
 80106cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ce:	3b04      	subs	r3, #4
 80106d0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80106d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d4:	3b01      	subs	r3, #1
 80106d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1bd      	bne.n	801065a <f_getfree+0xbc>
 80106de:	e000      	b.n	80106e2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80106e0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106e6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80106e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106ec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	791a      	ldrb	r2, [r3, #4]
 80106f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f4:	f042 0201 	orr.w	r2, r2, #1
 80106f8:	b2d2      	uxtb	r2, r2
 80106fa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80106fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010700:	4618      	mov	r0, r3
 8010702:	3748      	adds	r7, #72	; 0x48
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010714:	2300      	movs	r3, #0
 8010716:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801071c:	e01b      	b.n	8010756 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801071e:	f107 0310 	add.w	r3, r7, #16
 8010722:	f107 0114 	add.w	r1, r7, #20
 8010726:	2201      	movs	r2, #1
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f7ff f8c9 	bl	800f8c0 <f_read>
		if (rc != 1) break;
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	2b01      	cmp	r3, #1
 8010732:	d116      	bne.n	8010762 <f_gets+0x5a>
		c = s[0];
 8010734:	7d3b      	ldrb	r3, [r7, #20]
 8010736:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010738:	7dfb      	ldrb	r3, [r7, #23]
 801073a:	2b0d      	cmp	r3, #13
 801073c:	d100      	bne.n	8010740 <f_gets+0x38>
 801073e:	e00a      	b.n	8010756 <f_gets+0x4e>
		*p++ = c;
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	1c5a      	adds	r2, r3, #1
 8010744:	61ba      	str	r2, [r7, #24]
 8010746:	7dfa      	ldrb	r2, [r7, #23]
 8010748:	701a      	strb	r2, [r3, #0]
		n++;
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	3301      	adds	r3, #1
 801074e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010750:	7dfb      	ldrb	r3, [r7, #23]
 8010752:	2b0a      	cmp	r3, #10
 8010754:	d007      	beq.n	8010766 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	3b01      	subs	r3, #1
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	429a      	cmp	r2, r3
 801075e:	dbde      	blt.n	801071e <f_gets+0x16>
 8010760:	e002      	b.n	8010768 <f_gets+0x60>
		if (rc != 1) break;
 8010762:	bf00      	nop
 8010764:	e000      	b.n	8010768 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010766:	bf00      	nop
	}
	*p = 0;
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	2200      	movs	r2, #0
 801076c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d001      	beq.n	8010778 <f_gets+0x70>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	e000      	b.n	801077a <f_gets+0x72>
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3720      	adds	r7, #32
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b084      	sub	sp, #16
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	460b      	mov	r3, r1
 801078c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801078e:	78fb      	ldrb	r3, [r7, #3]
 8010790:	2b0a      	cmp	r3, #10
 8010792:	d103      	bne.n	801079c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010794:	210d      	movs	r1, #13
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff fff3 	bl	8010782 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	db25      	blt.n	80107f4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	60fa      	str	r2, [r7, #12]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	4413      	add	r3, r2
 80107b2:	78fa      	ldrb	r2, [r7, #3]
 80107b4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b3c      	cmp	r3, #60	; 0x3c
 80107ba:	dd12      	ble.n	80107e2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6818      	ldr	r0, [r3, #0]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f103 010c 	add.w	r1, r3, #12
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	f107 0308 	add.w	r3, r7, #8
 80107cc:	f7ff f9d7 	bl	800fb7e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80107d0:	68ba      	ldr	r2, [r7, #8]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d101      	bne.n	80107dc <putc_bfd+0x5a>
 80107d8:	2300      	movs	r3, #0
 80107da:	e001      	b.n	80107e0 <putc_bfd+0x5e>
 80107dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107e0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	1c5a      	adds	r2, r3, #1
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	609a      	str	r2, [r3, #8]
 80107f2:	e000      	b.n	80107f6 <putc_bfd+0x74>
	if (i < 0) return;
 80107f4:	bf00      	nop
}
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	db17      	blt.n	801083c <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6818      	ldr	r0, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f103 010c 	add.w	r1, r3, #12
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	461a      	mov	r2, r3
 801081c:	f107 030c 	add.w	r3, r7, #12
 8010820:	f7ff f9ad 	bl	800fb7e <f_write>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d108      	bne.n	801083c <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	461a      	mov	r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	429a      	cmp	r2, r3
 8010834:	d102      	bne.n	801083c <putc_flush+0x40>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	e001      	b.n	8010840 <putc_flush+0x44>
	return EOF;
 801083c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010840:	4618      	mov	r0, r3
 8010842:	3710      	adds	r7, #16
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	683a      	ldr	r2, [r7, #0]
 8010856:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	605a      	str	r2, [r3, #4]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	685a      	ldr	r2, [r3, #4]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	609a      	str	r2, [r3, #8]
}
 8010866:	bf00      	nop
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b096      	sub	sp, #88	; 0x58
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801087c:	f107 030c 	add.w	r3, r7, #12
 8010880:	6839      	ldr	r1, [r7, #0]
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff ffe0 	bl	8010848 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8010888:	e009      	b.n	801089e <f_puts+0x2c>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	1c5a      	adds	r2, r3, #1
 801088e:	607a      	str	r2, [r7, #4]
 8010890:	781a      	ldrb	r2, [r3, #0]
 8010892:	f107 030c 	add.w	r3, r7, #12
 8010896:	4611      	mov	r1, r2
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff ff72 	bl	8010782 <putc_bfd>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d1f1      	bne.n	801088a <f_puts+0x18>
	return putc_flush(&pb);
 80108a6:	f107 030c 	add.w	r3, r7, #12
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7ff ffa6 	bl	80107fc <putc_flush>
 80108b0:	4603      	mov	r3, r0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3758      	adds	r7, #88	; 0x58
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
	...

080108bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108bc:	b480      	push	{r7}
 80108be:	b087      	sub	sp, #28
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	4613      	mov	r3, r2
 80108c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108ca:	2301      	movs	r3, #1
 80108cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80108d2:	4b1f      	ldr	r3, [pc, #124]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108d4:	7a5b      	ldrb	r3, [r3, #9]
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d131      	bne.n	8010940 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108dc:	4b1c      	ldr	r3, [pc, #112]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108de:	7a5b      	ldrb	r3, [r3, #9]
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	461a      	mov	r2, r3
 80108e4:	4b1a      	ldr	r3, [pc, #104]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108e6:	2100      	movs	r1, #0
 80108e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80108ea:	4b19      	ldr	r3, [pc, #100]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108ec:	7a5b      	ldrb	r3, [r3, #9]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	4a17      	ldr	r2, [pc, #92]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	4413      	add	r3, r2
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80108fa:	4b15      	ldr	r3, [pc, #84]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108fc:	7a5b      	ldrb	r3, [r3, #9]
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	461a      	mov	r2, r3
 8010902:	4b13      	ldr	r3, [pc, #76]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 8010904:	4413      	add	r3, r2
 8010906:	79fa      	ldrb	r2, [r7, #7]
 8010908:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801090a:	4b11      	ldr	r3, [pc, #68]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 801090c:	7a5b      	ldrb	r3, [r3, #9]
 801090e:	b2db      	uxtb	r3, r3
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	b2d1      	uxtb	r1, r2
 8010914:	4a0e      	ldr	r2, [pc, #56]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 8010916:	7251      	strb	r1, [r2, #9]
 8010918:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801091a:	7dbb      	ldrb	r3, [r7, #22]
 801091c:	3330      	adds	r3, #48	; 0x30
 801091e:	b2da      	uxtb	r2, r3
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	3301      	adds	r3, #1
 8010928:	223a      	movs	r2, #58	; 0x3a
 801092a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	3302      	adds	r3, #2
 8010930:	222f      	movs	r2, #47	; 0x2f
 8010932:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	3303      	adds	r3, #3
 8010938:	2200      	movs	r2, #0
 801093a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801093c:	2300      	movs	r3, #0
 801093e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010940:	7dfb      	ldrb	r3, [r7, #23]
}
 8010942:	4618      	mov	r0, r3
 8010944:	371c      	adds	r7, #28
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	20000894 	.word	0x20000894

08010954 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801095e:	2200      	movs	r2, #0
 8010960:	6839      	ldr	r1, [r7, #0]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff ffaa 	bl	80108bc <FATFS_LinkDriverEx>
 8010968:	4603      	mov	r3, r0
}
 801096a:	4618      	mov	r0, r3
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
	...

08010974 <__errno>:
 8010974:	4b01      	ldr	r3, [pc, #4]	; (801097c <__errno+0x8>)
 8010976:	6818      	ldr	r0, [r3, #0]
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	20000178 	.word	0x20000178

08010980 <__libc_init_array>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	4e0d      	ldr	r6, [pc, #52]	; (80109b8 <__libc_init_array+0x38>)
 8010984:	4c0d      	ldr	r4, [pc, #52]	; (80109bc <__libc_init_array+0x3c>)
 8010986:	1ba4      	subs	r4, r4, r6
 8010988:	10a4      	asrs	r4, r4, #2
 801098a:	2500      	movs	r5, #0
 801098c:	42a5      	cmp	r5, r4
 801098e:	d109      	bne.n	80109a4 <__libc_init_array+0x24>
 8010990:	4e0b      	ldr	r6, [pc, #44]	; (80109c0 <__libc_init_array+0x40>)
 8010992:	4c0c      	ldr	r4, [pc, #48]	; (80109c4 <__libc_init_array+0x44>)
 8010994:	f005 fe42 	bl	801661c <_init>
 8010998:	1ba4      	subs	r4, r4, r6
 801099a:	10a4      	asrs	r4, r4, #2
 801099c:	2500      	movs	r5, #0
 801099e:	42a5      	cmp	r5, r4
 80109a0:	d105      	bne.n	80109ae <__libc_init_array+0x2e>
 80109a2:	bd70      	pop	{r4, r5, r6, pc}
 80109a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80109a8:	4798      	blx	r3
 80109aa:	3501      	adds	r5, #1
 80109ac:	e7ee      	b.n	801098c <__libc_init_array+0xc>
 80109ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80109b2:	4798      	blx	r3
 80109b4:	3501      	adds	r5, #1
 80109b6:	e7f2      	b.n	801099e <__libc_init_array+0x1e>
 80109b8:	08016ed0 	.word	0x08016ed0
 80109bc:	08016ed0 	.word	0x08016ed0
 80109c0:	08016ed0 	.word	0x08016ed0
 80109c4:	08016ed4 	.word	0x08016ed4

080109c8 <memcpy>:
 80109c8:	b510      	push	{r4, lr}
 80109ca:	1e43      	subs	r3, r0, #1
 80109cc:	440a      	add	r2, r1
 80109ce:	4291      	cmp	r1, r2
 80109d0:	d100      	bne.n	80109d4 <memcpy+0xc>
 80109d2:	bd10      	pop	{r4, pc}
 80109d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109dc:	e7f7      	b.n	80109ce <memcpy+0x6>

080109de <memset>:
 80109de:	4402      	add	r2, r0
 80109e0:	4603      	mov	r3, r0
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d100      	bne.n	80109e8 <memset+0xa>
 80109e6:	4770      	bx	lr
 80109e8:	f803 1b01 	strb.w	r1, [r3], #1
 80109ec:	e7f9      	b.n	80109e2 <memset+0x4>

080109ee <__cvt>:
 80109ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109f2:	ec55 4b10 	vmov	r4, r5, d0
 80109f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80109f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80109fc:	2d00      	cmp	r5, #0
 80109fe:	460e      	mov	r6, r1
 8010a00:	4691      	mov	r9, r2
 8010a02:	4619      	mov	r1, r3
 8010a04:	bfb8      	it	lt
 8010a06:	4622      	movlt	r2, r4
 8010a08:	462b      	mov	r3, r5
 8010a0a:	f027 0720 	bic.w	r7, r7, #32
 8010a0e:	bfbb      	ittet	lt
 8010a10:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010a14:	461d      	movlt	r5, r3
 8010a16:	2300      	movge	r3, #0
 8010a18:	232d      	movlt	r3, #45	; 0x2d
 8010a1a:	bfb8      	it	lt
 8010a1c:	4614      	movlt	r4, r2
 8010a1e:	2f46      	cmp	r7, #70	; 0x46
 8010a20:	700b      	strb	r3, [r1, #0]
 8010a22:	d004      	beq.n	8010a2e <__cvt+0x40>
 8010a24:	2f45      	cmp	r7, #69	; 0x45
 8010a26:	d100      	bne.n	8010a2a <__cvt+0x3c>
 8010a28:	3601      	adds	r6, #1
 8010a2a:	2102      	movs	r1, #2
 8010a2c:	e000      	b.n	8010a30 <__cvt+0x42>
 8010a2e:	2103      	movs	r1, #3
 8010a30:	ab03      	add	r3, sp, #12
 8010a32:	9301      	str	r3, [sp, #4]
 8010a34:	ab02      	add	r3, sp, #8
 8010a36:	9300      	str	r3, [sp, #0]
 8010a38:	4632      	mov	r2, r6
 8010a3a:	4653      	mov	r3, sl
 8010a3c:	ec45 4b10 	vmov	d0, r4, r5
 8010a40:	f001 fc96 	bl	8012370 <_dtoa_r>
 8010a44:	2f47      	cmp	r7, #71	; 0x47
 8010a46:	4680      	mov	r8, r0
 8010a48:	d102      	bne.n	8010a50 <__cvt+0x62>
 8010a4a:	f019 0f01 	tst.w	r9, #1
 8010a4e:	d026      	beq.n	8010a9e <__cvt+0xb0>
 8010a50:	2f46      	cmp	r7, #70	; 0x46
 8010a52:	eb08 0906 	add.w	r9, r8, r6
 8010a56:	d111      	bne.n	8010a7c <__cvt+0x8e>
 8010a58:	f898 3000 	ldrb.w	r3, [r8]
 8010a5c:	2b30      	cmp	r3, #48	; 0x30
 8010a5e:	d10a      	bne.n	8010a76 <__cvt+0x88>
 8010a60:	2200      	movs	r2, #0
 8010a62:	2300      	movs	r3, #0
 8010a64:	4620      	mov	r0, r4
 8010a66:	4629      	mov	r1, r5
 8010a68:	f7f0 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a6c:	b918      	cbnz	r0, 8010a76 <__cvt+0x88>
 8010a6e:	f1c6 0601 	rsb	r6, r6, #1
 8010a72:	f8ca 6000 	str.w	r6, [sl]
 8010a76:	f8da 3000 	ldr.w	r3, [sl]
 8010a7a:	4499      	add	r9, r3
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2300      	movs	r3, #0
 8010a80:	4620      	mov	r0, r4
 8010a82:	4629      	mov	r1, r5
 8010a84:	f7f0 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a88:	b938      	cbnz	r0, 8010a9a <__cvt+0xac>
 8010a8a:	2230      	movs	r2, #48	; 0x30
 8010a8c:	9b03      	ldr	r3, [sp, #12]
 8010a8e:	454b      	cmp	r3, r9
 8010a90:	d205      	bcs.n	8010a9e <__cvt+0xb0>
 8010a92:	1c59      	adds	r1, r3, #1
 8010a94:	9103      	str	r1, [sp, #12]
 8010a96:	701a      	strb	r2, [r3, #0]
 8010a98:	e7f8      	b.n	8010a8c <__cvt+0x9e>
 8010a9a:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a9e:	9b03      	ldr	r3, [sp, #12]
 8010aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010aa2:	eba3 0308 	sub.w	r3, r3, r8
 8010aa6:	4640      	mov	r0, r8
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	b004      	add	sp, #16
 8010aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010ab0 <__exponent>:
 8010ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ab2:	2900      	cmp	r1, #0
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	bfba      	itte	lt
 8010ab8:	4249      	neglt	r1, r1
 8010aba:	232d      	movlt	r3, #45	; 0x2d
 8010abc:	232b      	movge	r3, #43	; 0x2b
 8010abe:	2909      	cmp	r1, #9
 8010ac0:	f804 2b02 	strb.w	r2, [r4], #2
 8010ac4:	7043      	strb	r3, [r0, #1]
 8010ac6:	dd20      	ble.n	8010b0a <__exponent+0x5a>
 8010ac8:	f10d 0307 	add.w	r3, sp, #7
 8010acc:	461f      	mov	r7, r3
 8010ace:	260a      	movs	r6, #10
 8010ad0:	fb91 f5f6 	sdiv	r5, r1, r6
 8010ad4:	fb06 1115 	mls	r1, r6, r5, r1
 8010ad8:	3130      	adds	r1, #48	; 0x30
 8010ada:	2d09      	cmp	r5, #9
 8010adc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010ae0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8010ae4:	4629      	mov	r1, r5
 8010ae6:	dc09      	bgt.n	8010afc <__exponent+0x4c>
 8010ae8:	3130      	adds	r1, #48	; 0x30
 8010aea:	3b02      	subs	r3, #2
 8010aec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010af0:	42bb      	cmp	r3, r7
 8010af2:	4622      	mov	r2, r4
 8010af4:	d304      	bcc.n	8010b00 <__exponent+0x50>
 8010af6:	1a10      	subs	r0, r2, r0
 8010af8:	b003      	add	sp, #12
 8010afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010afc:	4613      	mov	r3, r2
 8010afe:	e7e7      	b.n	8010ad0 <__exponent+0x20>
 8010b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b04:	f804 2b01 	strb.w	r2, [r4], #1
 8010b08:	e7f2      	b.n	8010af0 <__exponent+0x40>
 8010b0a:	2330      	movs	r3, #48	; 0x30
 8010b0c:	4419      	add	r1, r3
 8010b0e:	7083      	strb	r3, [r0, #2]
 8010b10:	1d02      	adds	r2, r0, #4
 8010b12:	70c1      	strb	r1, [r0, #3]
 8010b14:	e7ef      	b.n	8010af6 <__exponent+0x46>
	...

08010b18 <_printf_float>:
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	b08d      	sub	sp, #52	; 0x34
 8010b1e:	460c      	mov	r4, r1
 8010b20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010b24:	4616      	mov	r6, r2
 8010b26:	461f      	mov	r7, r3
 8010b28:	4605      	mov	r5, r0
 8010b2a:	f002 fe7b 	bl	8013824 <_localeconv_r>
 8010b2e:	6803      	ldr	r3, [r0, #0]
 8010b30:	9304      	str	r3, [sp, #16]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ef fb4c 	bl	80001d0 <strlen>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8010b40:	9005      	str	r0, [sp, #20]
 8010b42:	3307      	adds	r3, #7
 8010b44:	f023 0307 	bic.w	r3, r3, #7
 8010b48:	f103 0208 	add.w	r2, r3, #8
 8010b4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010b50:	f8d4 b000 	ldr.w	fp, [r4]
 8010b54:	f8c8 2000 	str.w	r2, [r8]
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010b60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010b64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010b68:	9307      	str	r3, [sp, #28]
 8010b6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8010b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b72:	4ba7      	ldr	r3, [pc, #668]	; (8010e10 <_printf_float+0x2f8>)
 8010b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b78:	f7ef ffd8 	bl	8000b2c <__aeabi_dcmpun>
 8010b7c:	bb70      	cbnz	r0, 8010bdc <_printf_float+0xc4>
 8010b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b82:	4ba3      	ldr	r3, [pc, #652]	; (8010e10 <_printf_float+0x2f8>)
 8010b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b88:	f7ef ffb2 	bl	8000af0 <__aeabi_dcmple>
 8010b8c:	bb30      	cbnz	r0, 8010bdc <_printf_float+0xc4>
 8010b8e:	2200      	movs	r2, #0
 8010b90:	2300      	movs	r3, #0
 8010b92:	4640      	mov	r0, r8
 8010b94:	4649      	mov	r1, r9
 8010b96:	f7ef ffa1 	bl	8000adc <__aeabi_dcmplt>
 8010b9a:	b110      	cbz	r0, 8010ba2 <_printf_float+0x8a>
 8010b9c:	232d      	movs	r3, #45	; 0x2d
 8010b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ba2:	4a9c      	ldr	r2, [pc, #624]	; (8010e14 <_printf_float+0x2fc>)
 8010ba4:	4b9c      	ldr	r3, [pc, #624]	; (8010e18 <_printf_float+0x300>)
 8010ba6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010baa:	bf8c      	ite	hi
 8010bac:	4690      	movhi	r8, r2
 8010bae:	4698      	movls	r8, r3
 8010bb0:	2303      	movs	r3, #3
 8010bb2:	f02b 0204 	bic.w	r2, fp, #4
 8010bb6:	6123      	str	r3, [r4, #16]
 8010bb8:	6022      	str	r2, [r4, #0]
 8010bba:	f04f 0900 	mov.w	r9, #0
 8010bbe:	9700      	str	r7, [sp, #0]
 8010bc0:	4633      	mov	r3, r6
 8010bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8010bc4:	4621      	mov	r1, r4
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f000 f9e6 	bl	8010f98 <_printf_common>
 8010bcc:	3001      	adds	r0, #1
 8010bce:	f040 808d 	bne.w	8010cec <_printf_float+0x1d4>
 8010bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bd6:	b00d      	add	sp, #52	; 0x34
 8010bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bdc:	4642      	mov	r2, r8
 8010bde:	464b      	mov	r3, r9
 8010be0:	4640      	mov	r0, r8
 8010be2:	4649      	mov	r1, r9
 8010be4:	f7ef ffa2 	bl	8000b2c <__aeabi_dcmpun>
 8010be8:	b110      	cbz	r0, 8010bf0 <_printf_float+0xd8>
 8010bea:	4a8c      	ldr	r2, [pc, #560]	; (8010e1c <_printf_float+0x304>)
 8010bec:	4b8c      	ldr	r3, [pc, #560]	; (8010e20 <_printf_float+0x308>)
 8010bee:	e7da      	b.n	8010ba6 <_printf_float+0x8e>
 8010bf0:	6861      	ldr	r1, [r4, #4]
 8010bf2:	1c4b      	adds	r3, r1, #1
 8010bf4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010bf8:	a80a      	add	r0, sp, #40	; 0x28
 8010bfa:	d13e      	bne.n	8010c7a <_printf_float+0x162>
 8010bfc:	2306      	movs	r3, #6
 8010bfe:	6063      	str	r3, [r4, #4]
 8010c00:	2300      	movs	r3, #0
 8010c02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010c06:	ab09      	add	r3, sp, #36	; 0x24
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	ec49 8b10 	vmov	d0, r8, r9
 8010c0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c12:	6022      	str	r2, [r4, #0]
 8010c14:	f8cd a004 	str.w	sl, [sp, #4]
 8010c18:	6861      	ldr	r1, [r4, #4]
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	f7ff fee7 	bl	80109ee <__cvt>
 8010c20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010c24:	2b47      	cmp	r3, #71	; 0x47
 8010c26:	4680      	mov	r8, r0
 8010c28:	d109      	bne.n	8010c3e <_printf_float+0x126>
 8010c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c2c:	1cd8      	adds	r0, r3, #3
 8010c2e:	db02      	blt.n	8010c36 <_printf_float+0x11e>
 8010c30:	6862      	ldr	r2, [r4, #4]
 8010c32:	4293      	cmp	r3, r2
 8010c34:	dd47      	ble.n	8010cc6 <_printf_float+0x1ae>
 8010c36:	f1aa 0a02 	sub.w	sl, sl, #2
 8010c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8010c3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c44:	d824      	bhi.n	8010c90 <_printf_float+0x178>
 8010c46:	3901      	subs	r1, #1
 8010c48:	4652      	mov	r2, sl
 8010c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c4e:	9109      	str	r1, [sp, #36]	; 0x24
 8010c50:	f7ff ff2e 	bl	8010ab0 <__exponent>
 8010c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c56:	1813      	adds	r3, r2, r0
 8010c58:	2a01      	cmp	r2, #1
 8010c5a:	4681      	mov	r9, r0
 8010c5c:	6123      	str	r3, [r4, #16]
 8010c5e:	dc02      	bgt.n	8010c66 <_printf_float+0x14e>
 8010c60:	6822      	ldr	r2, [r4, #0]
 8010c62:	07d1      	lsls	r1, r2, #31
 8010c64:	d501      	bpl.n	8010c6a <_printf_float+0x152>
 8010c66:	3301      	adds	r3, #1
 8010c68:	6123      	str	r3, [r4, #16]
 8010c6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d0a5      	beq.n	8010bbe <_printf_float+0xa6>
 8010c72:	232d      	movs	r3, #45	; 0x2d
 8010c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c78:	e7a1      	b.n	8010bbe <_printf_float+0xa6>
 8010c7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010c7e:	f000 8177 	beq.w	8010f70 <_printf_float+0x458>
 8010c82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010c86:	d1bb      	bne.n	8010c00 <_printf_float+0xe8>
 8010c88:	2900      	cmp	r1, #0
 8010c8a:	d1b9      	bne.n	8010c00 <_printf_float+0xe8>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e7b6      	b.n	8010bfe <_printf_float+0xe6>
 8010c90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010c94:	d119      	bne.n	8010cca <_printf_float+0x1b2>
 8010c96:	2900      	cmp	r1, #0
 8010c98:	6863      	ldr	r3, [r4, #4]
 8010c9a:	dd0c      	ble.n	8010cb6 <_printf_float+0x19e>
 8010c9c:	6121      	str	r1, [r4, #16]
 8010c9e:	b913      	cbnz	r3, 8010ca6 <_printf_float+0x18e>
 8010ca0:	6822      	ldr	r2, [r4, #0]
 8010ca2:	07d2      	lsls	r2, r2, #31
 8010ca4:	d502      	bpl.n	8010cac <_printf_float+0x194>
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	440b      	add	r3, r1
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cae:	65a3      	str	r3, [r4, #88]	; 0x58
 8010cb0:	f04f 0900 	mov.w	r9, #0
 8010cb4:	e7d9      	b.n	8010c6a <_printf_float+0x152>
 8010cb6:	b913      	cbnz	r3, 8010cbe <_printf_float+0x1a6>
 8010cb8:	6822      	ldr	r2, [r4, #0]
 8010cba:	07d0      	lsls	r0, r2, #31
 8010cbc:	d501      	bpl.n	8010cc2 <_printf_float+0x1aa>
 8010cbe:	3302      	adds	r3, #2
 8010cc0:	e7f3      	b.n	8010caa <_printf_float+0x192>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e7f1      	b.n	8010caa <_printf_float+0x192>
 8010cc6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010cca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	db05      	blt.n	8010cde <_printf_float+0x1c6>
 8010cd2:	6822      	ldr	r2, [r4, #0]
 8010cd4:	6123      	str	r3, [r4, #16]
 8010cd6:	07d1      	lsls	r1, r2, #31
 8010cd8:	d5e8      	bpl.n	8010cac <_printf_float+0x194>
 8010cda:	3301      	adds	r3, #1
 8010cdc:	e7e5      	b.n	8010caa <_printf_float+0x192>
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	bfd4      	ite	le
 8010ce2:	f1c3 0302 	rsble	r3, r3, #2
 8010ce6:	2301      	movgt	r3, #1
 8010ce8:	4413      	add	r3, r2
 8010cea:	e7de      	b.n	8010caa <_printf_float+0x192>
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	055a      	lsls	r2, r3, #21
 8010cf0:	d407      	bmi.n	8010d02 <_printf_float+0x1ea>
 8010cf2:	6923      	ldr	r3, [r4, #16]
 8010cf4:	4642      	mov	r2, r8
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	47b8      	blx	r7
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	d12b      	bne.n	8010d58 <_printf_float+0x240>
 8010d00:	e767      	b.n	8010bd2 <_printf_float+0xba>
 8010d02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010d06:	f240 80dc 	bls.w	8010ec2 <_printf_float+0x3aa>
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d12:	f7ef fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d033      	beq.n	8010d82 <_printf_float+0x26a>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	4a41      	ldr	r2, [pc, #260]	; (8010e24 <_printf_float+0x30c>)
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4628      	mov	r0, r5
 8010d22:	47b8      	blx	r7
 8010d24:	3001      	adds	r0, #1
 8010d26:	f43f af54 	beq.w	8010bd2 <_printf_float+0xba>
 8010d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	db02      	blt.n	8010d38 <_printf_float+0x220>
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	07d8      	lsls	r0, r3, #31
 8010d36:	d50f      	bpl.n	8010d58 <_printf_float+0x240>
 8010d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d3c:	4631      	mov	r1, r6
 8010d3e:	4628      	mov	r0, r5
 8010d40:	47b8      	blx	r7
 8010d42:	3001      	adds	r0, #1
 8010d44:	f43f af45 	beq.w	8010bd2 <_printf_float+0xba>
 8010d48:	f04f 0800 	mov.w	r8, #0
 8010d4c:	f104 091a 	add.w	r9, r4, #26
 8010d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d52:	3b01      	subs	r3, #1
 8010d54:	4543      	cmp	r3, r8
 8010d56:	dc09      	bgt.n	8010d6c <_printf_float+0x254>
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	079b      	lsls	r3, r3, #30
 8010d5c:	f100 8103 	bmi.w	8010f66 <_printf_float+0x44e>
 8010d60:	68e0      	ldr	r0, [r4, #12]
 8010d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d64:	4298      	cmp	r0, r3
 8010d66:	bfb8      	it	lt
 8010d68:	4618      	movlt	r0, r3
 8010d6a:	e734      	b.n	8010bd6 <_printf_float+0xbe>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	464a      	mov	r2, r9
 8010d70:	4631      	mov	r1, r6
 8010d72:	4628      	mov	r0, r5
 8010d74:	47b8      	blx	r7
 8010d76:	3001      	adds	r0, #1
 8010d78:	f43f af2b 	beq.w	8010bd2 <_printf_float+0xba>
 8010d7c:	f108 0801 	add.w	r8, r8, #1
 8010d80:	e7e6      	b.n	8010d50 <_printf_float+0x238>
 8010d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dc2b      	bgt.n	8010de0 <_printf_float+0x2c8>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	4a26      	ldr	r2, [pc, #152]	; (8010e24 <_printf_float+0x30c>)
 8010d8c:	4631      	mov	r1, r6
 8010d8e:	4628      	mov	r0, r5
 8010d90:	47b8      	blx	r7
 8010d92:	3001      	adds	r0, #1
 8010d94:	f43f af1d 	beq.w	8010bd2 <_printf_float+0xba>
 8010d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9a:	b923      	cbnz	r3, 8010da6 <_printf_float+0x28e>
 8010d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d9e:	b913      	cbnz	r3, 8010da6 <_printf_float+0x28e>
 8010da0:	6823      	ldr	r3, [r4, #0]
 8010da2:	07d9      	lsls	r1, r3, #31
 8010da4:	d5d8      	bpl.n	8010d58 <_printf_float+0x240>
 8010da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010daa:	4631      	mov	r1, r6
 8010dac:	4628      	mov	r0, r5
 8010dae:	47b8      	blx	r7
 8010db0:	3001      	adds	r0, #1
 8010db2:	f43f af0e 	beq.w	8010bd2 <_printf_float+0xba>
 8010db6:	f04f 0900 	mov.w	r9, #0
 8010dba:	f104 0a1a 	add.w	sl, r4, #26
 8010dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc0:	425b      	negs	r3, r3
 8010dc2:	454b      	cmp	r3, r9
 8010dc4:	dc01      	bgt.n	8010dca <_printf_float+0x2b2>
 8010dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dc8:	e794      	b.n	8010cf4 <_printf_float+0x1dc>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	4652      	mov	r2, sl
 8010dce:	4631      	mov	r1, r6
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	47b8      	blx	r7
 8010dd4:	3001      	adds	r0, #1
 8010dd6:	f43f aefc 	beq.w	8010bd2 <_printf_float+0xba>
 8010dda:	f109 0901 	add.w	r9, r9, #1
 8010dde:	e7ee      	b.n	8010dbe <_printf_float+0x2a6>
 8010de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010de4:	429a      	cmp	r2, r3
 8010de6:	bfa8      	it	ge
 8010de8:	461a      	movge	r2, r3
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	4691      	mov	r9, r2
 8010dee:	dd07      	ble.n	8010e00 <_printf_float+0x2e8>
 8010df0:	4613      	mov	r3, r2
 8010df2:	4631      	mov	r1, r6
 8010df4:	4642      	mov	r2, r8
 8010df6:	4628      	mov	r0, r5
 8010df8:	47b8      	blx	r7
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	f43f aee9 	beq.w	8010bd2 <_printf_float+0xba>
 8010e00:	f104 031a 	add.w	r3, r4, #26
 8010e04:	f04f 0b00 	mov.w	fp, #0
 8010e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e0c:	9306      	str	r3, [sp, #24]
 8010e0e:	e015      	b.n	8010e3c <_printf_float+0x324>
 8010e10:	7fefffff 	.word	0x7fefffff
 8010e14:	08016b3c 	.word	0x08016b3c
 8010e18:	08016b38 	.word	0x08016b38
 8010e1c:	08016b44 	.word	0x08016b44
 8010e20:	08016b40 	.word	0x08016b40
 8010e24:	08016b48 	.word	0x08016b48
 8010e28:	2301      	movs	r3, #1
 8010e2a:	9a06      	ldr	r2, [sp, #24]
 8010e2c:	4631      	mov	r1, r6
 8010e2e:	4628      	mov	r0, r5
 8010e30:	47b8      	blx	r7
 8010e32:	3001      	adds	r0, #1
 8010e34:	f43f aecd 	beq.w	8010bd2 <_printf_float+0xba>
 8010e38:	f10b 0b01 	add.w	fp, fp, #1
 8010e3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010e40:	ebaa 0309 	sub.w	r3, sl, r9
 8010e44:	455b      	cmp	r3, fp
 8010e46:	dcef      	bgt.n	8010e28 <_printf_float+0x310>
 8010e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	44d0      	add	r8, sl
 8010e50:	db15      	blt.n	8010e7e <_printf_float+0x366>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	07da      	lsls	r2, r3, #31
 8010e56:	d412      	bmi.n	8010e7e <_printf_float+0x366>
 8010e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e5c:	eba3 020a 	sub.w	r2, r3, sl
 8010e60:	eba3 0a01 	sub.w	sl, r3, r1
 8010e64:	4592      	cmp	sl, r2
 8010e66:	bfa8      	it	ge
 8010e68:	4692      	movge	sl, r2
 8010e6a:	f1ba 0f00 	cmp.w	sl, #0
 8010e6e:	dc0e      	bgt.n	8010e8e <_printf_float+0x376>
 8010e70:	f04f 0800 	mov.w	r8, #0
 8010e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e78:	f104 091a 	add.w	r9, r4, #26
 8010e7c:	e019      	b.n	8010eb2 <_printf_float+0x39a>
 8010e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e82:	4631      	mov	r1, r6
 8010e84:	4628      	mov	r0, r5
 8010e86:	47b8      	blx	r7
 8010e88:	3001      	adds	r0, #1
 8010e8a:	d1e5      	bne.n	8010e58 <_printf_float+0x340>
 8010e8c:	e6a1      	b.n	8010bd2 <_printf_float+0xba>
 8010e8e:	4653      	mov	r3, sl
 8010e90:	4642      	mov	r2, r8
 8010e92:	4631      	mov	r1, r6
 8010e94:	4628      	mov	r0, r5
 8010e96:	47b8      	blx	r7
 8010e98:	3001      	adds	r0, #1
 8010e9a:	d1e9      	bne.n	8010e70 <_printf_float+0x358>
 8010e9c:	e699      	b.n	8010bd2 <_printf_float+0xba>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	464a      	mov	r2, r9
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	47b8      	blx	r7
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	f43f ae92 	beq.w	8010bd2 <_printf_float+0xba>
 8010eae:	f108 0801 	add.w	r8, r8, #1
 8010eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010eb6:	1a9b      	subs	r3, r3, r2
 8010eb8:	eba3 030a 	sub.w	r3, r3, sl
 8010ebc:	4543      	cmp	r3, r8
 8010ebe:	dcee      	bgt.n	8010e9e <_printf_float+0x386>
 8010ec0:	e74a      	b.n	8010d58 <_printf_float+0x240>
 8010ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ec4:	2a01      	cmp	r2, #1
 8010ec6:	dc01      	bgt.n	8010ecc <_printf_float+0x3b4>
 8010ec8:	07db      	lsls	r3, r3, #31
 8010eca:	d53a      	bpl.n	8010f42 <_printf_float+0x42a>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	4642      	mov	r2, r8
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	47b8      	blx	r7
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	f43f ae7b 	beq.w	8010bd2 <_printf_float+0xba>
 8010edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ee0:	4631      	mov	r1, r6
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	47b8      	blx	r7
 8010ee6:	3001      	adds	r0, #1
 8010ee8:	f108 0801 	add.w	r8, r8, #1
 8010eec:	f43f ae71 	beq.w	8010bd2 <_printf_float+0xba>
 8010ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010efc:	2300      	movs	r3, #0
 8010efe:	f7ef fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f02:	b9c8      	cbnz	r0, 8010f38 <_printf_float+0x420>
 8010f04:	4653      	mov	r3, sl
 8010f06:	4642      	mov	r2, r8
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	47b8      	blx	r7
 8010f0e:	3001      	adds	r0, #1
 8010f10:	d10e      	bne.n	8010f30 <_printf_float+0x418>
 8010f12:	e65e      	b.n	8010bd2 <_printf_float+0xba>
 8010f14:	2301      	movs	r3, #1
 8010f16:	4652      	mov	r2, sl
 8010f18:	4631      	mov	r1, r6
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	47b8      	blx	r7
 8010f1e:	3001      	adds	r0, #1
 8010f20:	f43f ae57 	beq.w	8010bd2 <_printf_float+0xba>
 8010f24:	f108 0801 	add.w	r8, r8, #1
 8010f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f2a:	3b01      	subs	r3, #1
 8010f2c:	4543      	cmp	r3, r8
 8010f2e:	dcf1      	bgt.n	8010f14 <_printf_float+0x3fc>
 8010f30:	464b      	mov	r3, r9
 8010f32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f36:	e6de      	b.n	8010cf6 <_printf_float+0x1de>
 8010f38:	f04f 0800 	mov.w	r8, #0
 8010f3c:	f104 0a1a 	add.w	sl, r4, #26
 8010f40:	e7f2      	b.n	8010f28 <_printf_float+0x410>
 8010f42:	2301      	movs	r3, #1
 8010f44:	e7df      	b.n	8010f06 <_printf_float+0x3ee>
 8010f46:	2301      	movs	r3, #1
 8010f48:	464a      	mov	r2, r9
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	47b8      	blx	r7
 8010f50:	3001      	adds	r0, #1
 8010f52:	f43f ae3e 	beq.w	8010bd2 <_printf_float+0xba>
 8010f56:	f108 0801 	add.w	r8, r8, #1
 8010f5a:	68e3      	ldr	r3, [r4, #12]
 8010f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	4543      	cmp	r3, r8
 8010f62:	dcf0      	bgt.n	8010f46 <_printf_float+0x42e>
 8010f64:	e6fc      	b.n	8010d60 <_printf_float+0x248>
 8010f66:	f04f 0800 	mov.w	r8, #0
 8010f6a:	f104 0919 	add.w	r9, r4, #25
 8010f6e:	e7f4      	b.n	8010f5a <_printf_float+0x442>
 8010f70:	2900      	cmp	r1, #0
 8010f72:	f43f ae8b 	beq.w	8010c8c <_printf_float+0x174>
 8010f76:	2300      	movs	r3, #0
 8010f78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010f7c:	ab09      	add	r3, sp, #36	; 0x24
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	ec49 8b10 	vmov	d0, r8, r9
 8010f84:	6022      	str	r2, [r4, #0]
 8010f86:	f8cd a004 	str.w	sl, [sp, #4]
 8010f8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f7ff fd2d 	bl	80109ee <__cvt>
 8010f94:	4680      	mov	r8, r0
 8010f96:	e648      	b.n	8010c2a <_printf_float+0x112>

08010f98 <_printf_common>:
 8010f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f9c:	4691      	mov	r9, r2
 8010f9e:	461f      	mov	r7, r3
 8010fa0:	688a      	ldr	r2, [r1, #8]
 8010fa2:	690b      	ldr	r3, [r1, #16]
 8010fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	bfb8      	it	lt
 8010fac:	4613      	movlt	r3, r2
 8010fae:	f8c9 3000 	str.w	r3, [r9]
 8010fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010fb6:	4606      	mov	r6, r0
 8010fb8:	460c      	mov	r4, r1
 8010fba:	b112      	cbz	r2, 8010fc2 <_printf_common+0x2a>
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	f8c9 3000 	str.w	r3, [r9]
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	0699      	lsls	r1, r3, #26
 8010fc6:	bf42      	ittt	mi
 8010fc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010fcc:	3302      	addmi	r3, #2
 8010fce:	f8c9 3000 	strmi.w	r3, [r9]
 8010fd2:	6825      	ldr	r5, [r4, #0]
 8010fd4:	f015 0506 	ands.w	r5, r5, #6
 8010fd8:	d107      	bne.n	8010fea <_printf_common+0x52>
 8010fda:	f104 0a19 	add.w	sl, r4, #25
 8010fde:	68e3      	ldr	r3, [r4, #12]
 8010fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8010fe4:	1a9b      	subs	r3, r3, r2
 8010fe6:	42ab      	cmp	r3, r5
 8010fe8:	dc28      	bgt.n	801103c <_printf_common+0xa4>
 8010fea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010fee:	6822      	ldr	r2, [r4, #0]
 8010ff0:	3300      	adds	r3, #0
 8010ff2:	bf18      	it	ne
 8010ff4:	2301      	movne	r3, #1
 8010ff6:	0692      	lsls	r2, r2, #26
 8010ff8:	d42d      	bmi.n	8011056 <_printf_common+0xbe>
 8010ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ffe:	4639      	mov	r1, r7
 8011000:	4630      	mov	r0, r6
 8011002:	47c0      	blx	r8
 8011004:	3001      	adds	r0, #1
 8011006:	d020      	beq.n	801104a <_printf_common+0xb2>
 8011008:	6823      	ldr	r3, [r4, #0]
 801100a:	68e5      	ldr	r5, [r4, #12]
 801100c:	f8d9 2000 	ldr.w	r2, [r9]
 8011010:	f003 0306 	and.w	r3, r3, #6
 8011014:	2b04      	cmp	r3, #4
 8011016:	bf08      	it	eq
 8011018:	1aad      	subeq	r5, r5, r2
 801101a:	68a3      	ldr	r3, [r4, #8]
 801101c:	6922      	ldr	r2, [r4, #16]
 801101e:	bf0c      	ite	eq
 8011020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011024:	2500      	movne	r5, #0
 8011026:	4293      	cmp	r3, r2
 8011028:	bfc4      	itt	gt
 801102a:	1a9b      	subgt	r3, r3, r2
 801102c:	18ed      	addgt	r5, r5, r3
 801102e:	f04f 0900 	mov.w	r9, #0
 8011032:	341a      	adds	r4, #26
 8011034:	454d      	cmp	r5, r9
 8011036:	d11a      	bne.n	801106e <_printf_common+0xd6>
 8011038:	2000      	movs	r0, #0
 801103a:	e008      	b.n	801104e <_printf_common+0xb6>
 801103c:	2301      	movs	r3, #1
 801103e:	4652      	mov	r2, sl
 8011040:	4639      	mov	r1, r7
 8011042:	4630      	mov	r0, r6
 8011044:	47c0      	blx	r8
 8011046:	3001      	adds	r0, #1
 8011048:	d103      	bne.n	8011052 <_printf_common+0xba>
 801104a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011052:	3501      	adds	r5, #1
 8011054:	e7c3      	b.n	8010fde <_printf_common+0x46>
 8011056:	18e1      	adds	r1, r4, r3
 8011058:	1c5a      	adds	r2, r3, #1
 801105a:	2030      	movs	r0, #48	; 0x30
 801105c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011060:	4422      	add	r2, r4
 8011062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801106a:	3302      	adds	r3, #2
 801106c:	e7c5      	b.n	8010ffa <_printf_common+0x62>
 801106e:	2301      	movs	r3, #1
 8011070:	4622      	mov	r2, r4
 8011072:	4639      	mov	r1, r7
 8011074:	4630      	mov	r0, r6
 8011076:	47c0      	blx	r8
 8011078:	3001      	adds	r0, #1
 801107a:	d0e6      	beq.n	801104a <_printf_common+0xb2>
 801107c:	f109 0901 	add.w	r9, r9, #1
 8011080:	e7d8      	b.n	8011034 <_printf_common+0x9c>
	...

08011084 <_printf_i>:
 8011084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801108c:	460c      	mov	r4, r1
 801108e:	7e09      	ldrb	r1, [r1, #24]
 8011090:	b085      	sub	sp, #20
 8011092:	296e      	cmp	r1, #110	; 0x6e
 8011094:	4617      	mov	r7, r2
 8011096:	4606      	mov	r6, r0
 8011098:	4698      	mov	r8, r3
 801109a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801109c:	f000 80b3 	beq.w	8011206 <_printf_i+0x182>
 80110a0:	d822      	bhi.n	80110e8 <_printf_i+0x64>
 80110a2:	2963      	cmp	r1, #99	; 0x63
 80110a4:	d036      	beq.n	8011114 <_printf_i+0x90>
 80110a6:	d80a      	bhi.n	80110be <_printf_i+0x3a>
 80110a8:	2900      	cmp	r1, #0
 80110aa:	f000 80b9 	beq.w	8011220 <_printf_i+0x19c>
 80110ae:	2958      	cmp	r1, #88	; 0x58
 80110b0:	f000 8083 	beq.w	80111ba <_printf_i+0x136>
 80110b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80110bc:	e032      	b.n	8011124 <_printf_i+0xa0>
 80110be:	2964      	cmp	r1, #100	; 0x64
 80110c0:	d001      	beq.n	80110c6 <_printf_i+0x42>
 80110c2:	2969      	cmp	r1, #105	; 0x69
 80110c4:	d1f6      	bne.n	80110b4 <_printf_i+0x30>
 80110c6:	6820      	ldr	r0, [r4, #0]
 80110c8:	6813      	ldr	r3, [r2, #0]
 80110ca:	0605      	lsls	r5, r0, #24
 80110cc:	f103 0104 	add.w	r1, r3, #4
 80110d0:	d52a      	bpl.n	8011128 <_printf_i+0xa4>
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	6011      	str	r1, [r2, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	da03      	bge.n	80110e2 <_printf_i+0x5e>
 80110da:	222d      	movs	r2, #45	; 0x2d
 80110dc:	425b      	negs	r3, r3
 80110de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80110e2:	486f      	ldr	r0, [pc, #444]	; (80112a0 <_printf_i+0x21c>)
 80110e4:	220a      	movs	r2, #10
 80110e6:	e039      	b.n	801115c <_printf_i+0xd8>
 80110e8:	2973      	cmp	r1, #115	; 0x73
 80110ea:	f000 809d 	beq.w	8011228 <_printf_i+0x1a4>
 80110ee:	d808      	bhi.n	8011102 <_printf_i+0x7e>
 80110f0:	296f      	cmp	r1, #111	; 0x6f
 80110f2:	d020      	beq.n	8011136 <_printf_i+0xb2>
 80110f4:	2970      	cmp	r1, #112	; 0x70
 80110f6:	d1dd      	bne.n	80110b4 <_printf_i+0x30>
 80110f8:	6823      	ldr	r3, [r4, #0]
 80110fa:	f043 0320 	orr.w	r3, r3, #32
 80110fe:	6023      	str	r3, [r4, #0]
 8011100:	e003      	b.n	801110a <_printf_i+0x86>
 8011102:	2975      	cmp	r1, #117	; 0x75
 8011104:	d017      	beq.n	8011136 <_printf_i+0xb2>
 8011106:	2978      	cmp	r1, #120	; 0x78
 8011108:	d1d4      	bne.n	80110b4 <_printf_i+0x30>
 801110a:	2378      	movs	r3, #120	; 0x78
 801110c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011110:	4864      	ldr	r0, [pc, #400]	; (80112a4 <_printf_i+0x220>)
 8011112:	e055      	b.n	80111c0 <_printf_i+0x13c>
 8011114:	6813      	ldr	r3, [r2, #0]
 8011116:	1d19      	adds	r1, r3, #4
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	6011      	str	r1, [r2, #0]
 801111c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011124:	2301      	movs	r3, #1
 8011126:	e08c      	b.n	8011242 <_printf_i+0x1be>
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	6011      	str	r1, [r2, #0]
 801112c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011130:	bf18      	it	ne
 8011132:	b21b      	sxthne	r3, r3
 8011134:	e7cf      	b.n	80110d6 <_printf_i+0x52>
 8011136:	6813      	ldr	r3, [r2, #0]
 8011138:	6825      	ldr	r5, [r4, #0]
 801113a:	1d18      	adds	r0, r3, #4
 801113c:	6010      	str	r0, [r2, #0]
 801113e:	0628      	lsls	r0, r5, #24
 8011140:	d501      	bpl.n	8011146 <_printf_i+0xc2>
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	e002      	b.n	801114c <_printf_i+0xc8>
 8011146:	0668      	lsls	r0, r5, #25
 8011148:	d5fb      	bpl.n	8011142 <_printf_i+0xbe>
 801114a:	881b      	ldrh	r3, [r3, #0]
 801114c:	4854      	ldr	r0, [pc, #336]	; (80112a0 <_printf_i+0x21c>)
 801114e:	296f      	cmp	r1, #111	; 0x6f
 8011150:	bf14      	ite	ne
 8011152:	220a      	movne	r2, #10
 8011154:	2208      	moveq	r2, #8
 8011156:	2100      	movs	r1, #0
 8011158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801115c:	6865      	ldr	r5, [r4, #4]
 801115e:	60a5      	str	r5, [r4, #8]
 8011160:	2d00      	cmp	r5, #0
 8011162:	f2c0 8095 	blt.w	8011290 <_printf_i+0x20c>
 8011166:	6821      	ldr	r1, [r4, #0]
 8011168:	f021 0104 	bic.w	r1, r1, #4
 801116c:	6021      	str	r1, [r4, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d13d      	bne.n	80111ee <_printf_i+0x16a>
 8011172:	2d00      	cmp	r5, #0
 8011174:	f040 808e 	bne.w	8011294 <_printf_i+0x210>
 8011178:	4665      	mov	r5, ip
 801117a:	2a08      	cmp	r2, #8
 801117c:	d10b      	bne.n	8011196 <_printf_i+0x112>
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	07db      	lsls	r3, r3, #31
 8011182:	d508      	bpl.n	8011196 <_printf_i+0x112>
 8011184:	6923      	ldr	r3, [r4, #16]
 8011186:	6862      	ldr	r2, [r4, #4]
 8011188:	429a      	cmp	r2, r3
 801118a:	bfde      	ittt	le
 801118c:	2330      	movle	r3, #48	; 0x30
 801118e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011192:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011196:	ebac 0305 	sub.w	r3, ip, r5
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	f8cd 8000 	str.w	r8, [sp]
 80111a0:	463b      	mov	r3, r7
 80111a2:	aa03      	add	r2, sp, #12
 80111a4:	4621      	mov	r1, r4
 80111a6:	4630      	mov	r0, r6
 80111a8:	f7ff fef6 	bl	8010f98 <_printf_common>
 80111ac:	3001      	adds	r0, #1
 80111ae:	d14d      	bne.n	801124c <_printf_i+0x1c8>
 80111b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111b4:	b005      	add	sp, #20
 80111b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ba:	4839      	ldr	r0, [pc, #228]	; (80112a0 <_printf_i+0x21c>)
 80111bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80111c0:	6813      	ldr	r3, [r2, #0]
 80111c2:	6821      	ldr	r1, [r4, #0]
 80111c4:	1d1d      	adds	r5, r3, #4
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	6015      	str	r5, [r2, #0]
 80111ca:	060a      	lsls	r2, r1, #24
 80111cc:	d50b      	bpl.n	80111e6 <_printf_i+0x162>
 80111ce:	07ca      	lsls	r2, r1, #31
 80111d0:	bf44      	itt	mi
 80111d2:	f041 0120 	orrmi.w	r1, r1, #32
 80111d6:	6021      	strmi	r1, [r4, #0]
 80111d8:	b91b      	cbnz	r3, 80111e2 <_printf_i+0x15e>
 80111da:	6822      	ldr	r2, [r4, #0]
 80111dc:	f022 0220 	bic.w	r2, r2, #32
 80111e0:	6022      	str	r2, [r4, #0]
 80111e2:	2210      	movs	r2, #16
 80111e4:	e7b7      	b.n	8011156 <_printf_i+0xd2>
 80111e6:	064d      	lsls	r5, r1, #25
 80111e8:	bf48      	it	mi
 80111ea:	b29b      	uxthmi	r3, r3
 80111ec:	e7ef      	b.n	80111ce <_printf_i+0x14a>
 80111ee:	4665      	mov	r5, ip
 80111f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80111f4:	fb02 3311 	mls	r3, r2, r1, r3
 80111f8:	5cc3      	ldrb	r3, [r0, r3]
 80111fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80111fe:	460b      	mov	r3, r1
 8011200:	2900      	cmp	r1, #0
 8011202:	d1f5      	bne.n	80111f0 <_printf_i+0x16c>
 8011204:	e7b9      	b.n	801117a <_printf_i+0xf6>
 8011206:	6813      	ldr	r3, [r2, #0]
 8011208:	6825      	ldr	r5, [r4, #0]
 801120a:	6961      	ldr	r1, [r4, #20]
 801120c:	1d18      	adds	r0, r3, #4
 801120e:	6010      	str	r0, [r2, #0]
 8011210:	0628      	lsls	r0, r5, #24
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	d501      	bpl.n	801121a <_printf_i+0x196>
 8011216:	6019      	str	r1, [r3, #0]
 8011218:	e002      	b.n	8011220 <_printf_i+0x19c>
 801121a:	066a      	lsls	r2, r5, #25
 801121c:	d5fb      	bpl.n	8011216 <_printf_i+0x192>
 801121e:	8019      	strh	r1, [r3, #0]
 8011220:	2300      	movs	r3, #0
 8011222:	6123      	str	r3, [r4, #16]
 8011224:	4665      	mov	r5, ip
 8011226:	e7b9      	b.n	801119c <_printf_i+0x118>
 8011228:	6813      	ldr	r3, [r2, #0]
 801122a:	1d19      	adds	r1, r3, #4
 801122c:	6011      	str	r1, [r2, #0]
 801122e:	681d      	ldr	r5, [r3, #0]
 8011230:	6862      	ldr	r2, [r4, #4]
 8011232:	2100      	movs	r1, #0
 8011234:	4628      	mov	r0, r5
 8011236:	f7ee ffd3 	bl	80001e0 <memchr>
 801123a:	b108      	cbz	r0, 8011240 <_printf_i+0x1bc>
 801123c:	1b40      	subs	r0, r0, r5
 801123e:	6060      	str	r0, [r4, #4]
 8011240:	6863      	ldr	r3, [r4, #4]
 8011242:	6123      	str	r3, [r4, #16]
 8011244:	2300      	movs	r3, #0
 8011246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801124a:	e7a7      	b.n	801119c <_printf_i+0x118>
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	462a      	mov	r2, r5
 8011250:	4639      	mov	r1, r7
 8011252:	4630      	mov	r0, r6
 8011254:	47c0      	blx	r8
 8011256:	3001      	adds	r0, #1
 8011258:	d0aa      	beq.n	80111b0 <_printf_i+0x12c>
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	079b      	lsls	r3, r3, #30
 801125e:	d413      	bmi.n	8011288 <_printf_i+0x204>
 8011260:	68e0      	ldr	r0, [r4, #12]
 8011262:	9b03      	ldr	r3, [sp, #12]
 8011264:	4298      	cmp	r0, r3
 8011266:	bfb8      	it	lt
 8011268:	4618      	movlt	r0, r3
 801126a:	e7a3      	b.n	80111b4 <_printf_i+0x130>
 801126c:	2301      	movs	r3, #1
 801126e:	464a      	mov	r2, r9
 8011270:	4639      	mov	r1, r7
 8011272:	4630      	mov	r0, r6
 8011274:	47c0      	blx	r8
 8011276:	3001      	adds	r0, #1
 8011278:	d09a      	beq.n	80111b0 <_printf_i+0x12c>
 801127a:	3501      	adds	r5, #1
 801127c:	68e3      	ldr	r3, [r4, #12]
 801127e:	9a03      	ldr	r2, [sp, #12]
 8011280:	1a9b      	subs	r3, r3, r2
 8011282:	42ab      	cmp	r3, r5
 8011284:	dcf2      	bgt.n	801126c <_printf_i+0x1e8>
 8011286:	e7eb      	b.n	8011260 <_printf_i+0x1dc>
 8011288:	2500      	movs	r5, #0
 801128a:	f104 0919 	add.w	r9, r4, #25
 801128e:	e7f5      	b.n	801127c <_printf_i+0x1f8>
 8011290:	2b00      	cmp	r3, #0
 8011292:	d1ac      	bne.n	80111ee <_printf_i+0x16a>
 8011294:	7803      	ldrb	r3, [r0, #0]
 8011296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801129a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801129e:	e76c      	b.n	801117a <_printf_i+0xf6>
 80112a0:	08016b4a 	.word	0x08016b4a
 80112a4:	08016b5b 	.word	0x08016b5b

080112a8 <iprintf>:
 80112a8:	b40f      	push	{r0, r1, r2, r3}
 80112aa:	4b0a      	ldr	r3, [pc, #40]	; (80112d4 <iprintf+0x2c>)
 80112ac:	b513      	push	{r0, r1, r4, lr}
 80112ae:	681c      	ldr	r4, [r3, #0]
 80112b0:	b124      	cbz	r4, 80112bc <iprintf+0x14>
 80112b2:	69a3      	ldr	r3, [r4, #24]
 80112b4:	b913      	cbnz	r3, 80112bc <iprintf+0x14>
 80112b6:	4620      	mov	r0, r4
 80112b8:	f001 ff02 	bl	80130c0 <__sinit>
 80112bc:	ab05      	add	r3, sp, #20
 80112be:	9a04      	ldr	r2, [sp, #16]
 80112c0:	68a1      	ldr	r1, [r4, #8]
 80112c2:	9301      	str	r3, [sp, #4]
 80112c4:	4620      	mov	r0, r4
 80112c6:	f003 f96b 	bl	80145a0 <_vfiprintf_r>
 80112ca:	b002      	add	sp, #8
 80112cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112d0:	b004      	add	sp, #16
 80112d2:	4770      	bx	lr
 80112d4:	20000178 	.word	0x20000178

080112d8 <_puts_r>:
 80112d8:	b570      	push	{r4, r5, r6, lr}
 80112da:	460e      	mov	r6, r1
 80112dc:	4605      	mov	r5, r0
 80112de:	b118      	cbz	r0, 80112e8 <_puts_r+0x10>
 80112e0:	6983      	ldr	r3, [r0, #24]
 80112e2:	b90b      	cbnz	r3, 80112e8 <_puts_r+0x10>
 80112e4:	f001 feec 	bl	80130c0 <__sinit>
 80112e8:	69ab      	ldr	r3, [r5, #24]
 80112ea:	68ac      	ldr	r4, [r5, #8]
 80112ec:	b913      	cbnz	r3, 80112f4 <_puts_r+0x1c>
 80112ee:	4628      	mov	r0, r5
 80112f0:	f001 fee6 	bl	80130c0 <__sinit>
 80112f4:	4b23      	ldr	r3, [pc, #140]	; (8011384 <_puts_r+0xac>)
 80112f6:	429c      	cmp	r4, r3
 80112f8:	d117      	bne.n	801132a <_puts_r+0x52>
 80112fa:	686c      	ldr	r4, [r5, #4]
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	071b      	lsls	r3, r3, #28
 8011300:	d51d      	bpl.n	801133e <_puts_r+0x66>
 8011302:	6923      	ldr	r3, [r4, #16]
 8011304:	b1db      	cbz	r3, 801133e <_puts_r+0x66>
 8011306:	3e01      	subs	r6, #1
 8011308:	68a3      	ldr	r3, [r4, #8]
 801130a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801130e:	3b01      	subs	r3, #1
 8011310:	60a3      	str	r3, [r4, #8]
 8011312:	b9e9      	cbnz	r1, 8011350 <_puts_r+0x78>
 8011314:	2b00      	cmp	r3, #0
 8011316:	da2e      	bge.n	8011376 <_puts_r+0x9e>
 8011318:	4622      	mov	r2, r4
 801131a:	210a      	movs	r1, #10
 801131c:	4628      	mov	r0, r5
 801131e:	f000 fedb 	bl	80120d8 <__swbuf_r>
 8011322:	3001      	adds	r0, #1
 8011324:	d011      	beq.n	801134a <_puts_r+0x72>
 8011326:	200a      	movs	r0, #10
 8011328:	e011      	b.n	801134e <_puts_r+0x76>
 801132a:	4b17      	ldr	r3, [pc, #92]	; (8011388 <_puts_r+0xb0>)
 801132c:	429c      	cmp	r4, r3
 801132e:	d101      	bne.n	8011334 <_puts_r+0x5c>
 8011330:	68ac      	ldr	r4, [r5, #8]
 8011332:	e7e3      	b.n	80112fc <_puts_r+0x24>
 8011334:	4b15      	ldr	r3, [pc, #84]	; (801138c <_puts_r+0xb4>)
 8011336:	429c      	cmp	r4, r3
 8011338:	bf08      	it	eq
 801133a:	68ec      	ldreq	r4, [r5, #12]
 801133c:	e7de      	b.n	80112fc <_puts_r+0x24>
 801133e:	4621      	mov	r1, r4
 8011340:	4628      	mov	r0, r5
 8011342:	f000 ff1b 	bl	801217c <__swsetup_r>
 8011346:	2800      	cmp	r0, #0
 8011348:	d0dd      	beq.n	8011306 <_puts_r+0x2e>
 801134a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	2b00      	cmp	r3, #0
 8011352:	da04      	bge.n	801135e <_puts_r+0x86>
 8011354:	69a2      	ldr	r2, [r4, #24]
 8011356:	429a      	cmp	r2, r3
 8011358:	dc06      	bgt.n	8011368 <_puts_r+0x90>
 801135a:	290a      	cmp	r1, #10
 801135c:	d004      	beq.n	8011368 <_puts_r+0x90>
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	1c5a      	adds	r2, r3, #1
 8011362:	6022      	str	r2, [r4, #0]
 8011364:	7019      	strb	r1, [r3, #0]
 8011366:	e7cf      	b.n	8011308 <_puts_r+0x30>
 8011368:	4622      	mov	r2, r4
 801136a:	4628      	mov	r0, r5
 801136c:	f000 feb4 	bl	80120d8 <__swbuf_r>
 8011370:	3001      	adds	r0, #1
 8011372:	d1c9      	bne.n	8011308 <_puts_r+0x30>
 8011374:	e7e9      	b.n	801134a <_puts_r+0x72>
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	200a      	movs	r0, #10
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	6022      	str	r2, [r4, #0]
 801137e:	7018      	strb	r0, [r3, #0]
 8011380:	e7e5      	b.n	801134e <_puts_r+0x76>
 8011382:	bf00      	nop
 8011384:	08016bf0 	.word	0x08016bf0
 8011388:	08016c10 	.word	0x08016c10
 801138c:	08016bd0 	.word	0x08016bd0

08011390 <puts>:
 8011390:	4b02      	ldr	r3, [pc, #8]	; (801139c <puts+0xc>)
 8011392:	4601      	mov	r1, r0
 8011394:	6818      	ldr	r0, [r3, #0]
 8011396:	f7ff bf9f 	b.w	80112d8 <_puts_r>
 801139a:	bf00      	nop
 801139c:	20000178 	.word	0x20000178

080113a0 <siprintf>:
 80113a0:	b40e      	push	{r1, r2, r3}
 80113a2:	b500      	push	{lr}
 80113a4:	b09c      	sub	sp, #112	; 0x70
 80113a6:	ab1d      	add	r3, sp, #116	; 0x74
 80113a8:	9002      	str	r0, [sp, #8]
 80113aa:	9006      	str	r0, [sp, #24]
 80113ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113b0:	4809      	ldr	r0, [pc, #36]	; (80113d8 <siprintf+0x38>)
 80113b2:	9107      	str	r1, [sp, #28]
 80113b4:	9104      	str	r1, [sp, #16]
 80113b6:	4909      	ldr	r1, [pc, #36]	; (80113dc <siprintf+0x3c>)
 80113b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80113bc:	9105      	str	r1, [sp, #20]
 80113be:	6800      	ldr	r0, [r0, #0]
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	a902      	add	r1, sp, #8
 80113c4:	f002 ffca 	bl	801435c <_svfiprintf_r>
 80113c8:	9b02      	ldr	r3, [sp, #8]
 80113ca:	2200      	movs	r2, #0
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	b01c      	add	sp, #112	; 0x70
 80113d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80113d4:	b003      	add	sp, #12
 80113d6:	4770      	bx	lr
 80113d8:	20000178 	.word	0x20000178
 80113dc:	ffff0208 	.word	0xffff0208

080113e0 <strncpy>:
 80113e0:	b570      	push	{r4, r5, r6, lr}
 80113e2:	3901      	subs	r1, #1
 80113e4:	4604      	mov	r4, r0
 80113e6:	b902      	cbnz	r2, 80113ea <strncpy+0xa>
 80113e8:	bd70      	pop	{r4, r5, r6, pc}
 80113ea:	4623      	mov	r3, r4
 80113ec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80113f0:	f803 5b01 	strb.w	r5, [r3], #1
 80113f4:	1e56      	subs	r6, r2, #1
 80113f6:	b92d      	cbnz	r5, 8011404 <strncpy+0x24>
 80113f8:	4414      	add	r4, r2
 80113fa:	42a3      	cmp	r3, r4
 80113fc:	d0f4      	beq.n	80113e8 <strncpy+0x8>
 80113fe:	f803 5b01 	strb.w	r5, [r3], #1
 8011402:	e7fa      	b.n	80113fa <strncpy+0x1a>
 8011404:	461c      	mov	r4, r3
 8011406:	4632      	mov	r2, r6
 8011408:	e7ed      	b.n	80113e6 <strncpy+0x6>

0801140a <sulp>:
 801140a:	b570      	push	{r4, r5, r6, lr}
 801140c:	4604      	mov	r4, r0
 801140e:	460d      	mov	r5, r1
 8011410:	ec45 4b10 	vmov	d0, r4, r5
 8011414:	4616      	mov	r6, r2
 8011416:	f002 fd5d 	bl	8013ed4 <__ulp>
 801141a:	ec51 0b10 	vmov	r0, r1, d0
 801141e:	b17e      	cbz	r6, 8011440 <sulp+0x36>
 8011420:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011424:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011428:	2b00      	cmp	r3, #0
 801142a:	dd09      	ble.n	8011440 <sulp+0x36>
 801142c:	051b      	lsls	r3, r3, #20
 801142e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011432:	2400      	movs	r4, #0
 8011434:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011438:	4622      	mov	r2, r4
 801143a:	462b      	mov	r3, r5
 801143c:	f7ef f8dc 	bl	80005f8 <__aeabi_dmul>
 8011440:	bd70      	pop	{r4, r5, r6, pc}
 8011442:	0000      	movs	r0, r0
 8011444:	0000      	movs	r0, r0
	...

08011448 <_strtod_l>:
 8011448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144c:	461f      	mov	r7, r3
 801144e:	b0a1      	sub	sp, #132	; 0x84
 8011450:	2300      	movs	r3, #0
 8011452:	4681      	mov	r9, r0
 8011454:	4638      	mov	r0, r7
 8011456:	460e      	mov	r6, r1
 8011458:	9217      	str	r2, [sp, #92]	; 0x5c
 801145a:	931c      	str	r3, [sp, #112]	; 0x70
 801145c:	f002 f9e0 	bl	8013820 <__localeconv_l>
 8011460:	4680      	mov	r8, r0
 8011462:	6800      	ldr	r0, [r0, #0]
 8011464:	f7ee feb4 	bl	80001d0 <strlen>
 8011468:	f04f 0a00 	mov.w	sl, #0
 801146c:	4604      	mov	r4, r0
 801146e:	f04f 0b00 	mov.w	fp, #0
 8011472:	961b      	str	r6, [sp, #108]	; 0x6c
 8011474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011476:	781a      	ldrb	r2, [r3, #0]
 8011478:	2a0d      	cmp	r2, #13
 801147a:	d832      	bhi.n	80114e2 <_strtod_l+0x9a>
 801147c:	2a09      	cmp	r2, #9
 801147e:	d236      	bcs.n	80114ee <_strtod_l+0xa6>
 8011480:	2a00      	cmp	r2, #0
 8011482:	d03e      	beq.n	8011502 <_strtod_l+0xba>
 8011484:	2300      	movs	r3, #0
 8011486:	930d      	str	r3, [sp, #52]	; 0x34
 8011488:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801148a:	782b      	ldrb	r3, [r5, #0]
 801148c:	2b30      	cmp	r3, #48	; 0x30
 801148e:	f040 80ac 	bne.w	80115ea <_strtod_l+0x1a2>
 8011492:	786b      	ldrb	r3, [r5, #1]
 8011494:	2b58      	cmp	r3, #88	; 0x58
 8011496:	d001      	beq.n	801149c <_strtod_l+0x54>
 8011498:	2b78      	cmp	r3, #120	; 0x78
 801149a:	d167      	bne.n	801156c <_strtod_l+0x124>
 801149c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801149e:	9301      	str	r3, [sp, #4]
 80114a0:	ab1c      	add	r3, sp, #112	; 0x70
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	9702      	str	r7, [sp, #8]
 80114a6:	ab1d      	add	r3, sp, #116	; 0x74
 80114a8:	4a88      	ldr	r2, [pc, #544]	; (80116cc <_strtod_l+0x284>)
 80114aa:	a91b      	add	r1, sp, #108	; 0x6c
 80114ac:	4648      	mov	r0, r9
 80114ae:	f001 fee0 	bl	8013272 <__gethex>
 80114b2:	f010 0407 	ands.w	r4, r0, #7
 80114b6:	4606      	mov	r6, r0
 80114b8:	d005      	beq.n	80114c6 <_strtod_l+0x7e>
 80114ba:	2c06      	cmp	r4, #6
 80114bc:	d12b      	bne.n	8011516 <_strtod_l+0xce>
 80114be:	3501      	adds	r5, #1
 80114c0:	2300      	movs	r3, #0
 80114c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80114c4:	930d      	str	r3, [sp, #52]	; 0x34
 80114c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f040 859a 	bne.w	8012002 <_strtod_l+0xbba>
 80114ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114d0:	b1e3      	cbz	r3, 801150c <_strtod_l+0xc4>
 80114d2:	4652      	mov	r2, sl
 80114d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80114d8:	ec43 2b10 	vmov	d0, r2, r3
 80114dc:	b021      	add	sp, #132	; 0x84
 80114de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e2:	2a2b      	cmp	r2, #43	; 0x2b
 80114e4:	d015      	beq.n	8011512 <_strtod_l+0xca>
 80114e6:	2a2d      	cmp	r2, #45	; 0x2d
 80114e8:	d004      	beq.n	80114f4 <_strtod_l+0xac>
 80114ea:	2a20      	cmp	r2, #32
 80114ec:	d1ca      	bne.n	8011484 <_strtod_l+0x3c>
 80114ee:	3301      	adds	r3, #1
 80114f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80114f2:	e7bf      	b.n	8011474 <_strtod_l+0x2c>
 80114f4:	2201      	movs	r2, #1
 80114f6:	920d      	str	r2, [sp, #52]	; 0x34
 80114f8:	1c5a      	adds	r2, r3, #1
 80114fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80114fc:	785b      	ldrb	r3, [r3, #1]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1c2      	bne.n	8011488 <_strtod_l+0x40>
 8011502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011504:	961b      	str	r6, [sp, #108]	; 0x6c
 8011506:	2b00      	cmp	r3, #0
 8011508:	f040 8579 	bne.w	8011ffe <_strtod_l+0xbb6>
 801150c:	4652      	mov	r2, sl
 801150e:	465b      	mov	r3, fp
 8011510:	e7e2      	b.n	80114d8 <_strtod_l+0x90>
 8011512:	2200      	movs	r2, #0
 8011514:	e7ef      	b.n	80114f6 <_strtod_l+0xae>
 8011516:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011518:	b13a      	cbz	r2, 801152a <_strtod_l+0xe2>
 801151a:	2135      	movs	r1, #53	; 0x35
 801151c:	a81e      	add	r0, sp, #120	; 0x78
 801151e:	f002 fdd1 	bl	80140c4 <__copybits>
 8011522:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011524:	4648      	mov	r0, r9
 8011526:	f002 fa3d 	bl	80139a4 <_Bfree>
 801152a:	3c01      	subs	r4, #1
 801152c:	2c04      	cmp	r4, #4
 801152e:	d806      	bhi.n	801153e <_strtod_l+0xf6>
 8011530:	e8df f004 	tbb	[pc, r4]
 8011534:	1714030a 	.word	0x1714030a
 8011538:	0a          	.byte	0x0a
 8011539:	00          	.byte	0x00
 801153a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801153e:	0730      	lsls	r0, r6, #28
 8011540:	d5c1      	bpl.n	80114c6 <_strtod_l+0x7e>
 8011542:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011546:	e7be      	b.n	80114c6 <_strtod_l+0x7e>
 8011548:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801154c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801154e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011552:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011556:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801155a:	e7f0      	b.n	801153e <_strtod_l+0xf6>
 801155c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80116d0 <_strtod_l+0x288>
 8011560:	e7ed      	b.n	801153e <_strtod_l+0xf6>
 8011562:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011566:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801156a:	e7e8      	b.n	801153e <_strtod_l+0xf6>
 801156c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801156e:	1c5a      	adds	r2, r3, #1
 8011570:	921b      	str	r2, [sp, #108]	; 0x6c
 8011572:	785b      	ldrb	r3, [r3, #1]
 8011574:	2b30      	cmp	r3, #48	; 0x30
 8011576:	d0f9      	beq.n	801156c <_strtod_l+0x124>
 8011578:	2b00      	cmp	r3, #0
 801157a:	d0a4      	beq.n	80114c6 <_strtod_l+0x7e>
 801157c:	2301      	movs	r3, #1
 801157e:	2500      	movs	r5, #0
 8011580:	9306      	str	r3, [sp, #24]
 8011582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011584:	9308      	str	r3, [sp, #32]
 8011586:	9507      	str	r5, [sp, #28]
 8011588:	9505      	str	r5, [sp, #20]
 801158a:	220a      	movs	r2, #10
 801158c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801158e:	7807      	ldrb	r7, [r0, #0]
 8011590:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011594:	b2d9      	uxtb	r1, r3
 8011596:	2909      	cmp	r1, #9
 8011598:	d929      	bls.n	80115ee <_strtod_l+0x1a6>
 801159a:	4622      	mov	r2, r4
 801159c:	f8d8 1000 	ldr.w	r1, [r8]
 80115a0:	f003 f96d 	bl	801487e <strncmp>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d031      	beq.n	801160c <_strtod_l+0x1c4>
 80115a8:	2000      	movs	r0, #0
 80115aa:	9c05      	ldr	r4, [sp, #20]
 80115ac:	9004      	str	r0, [sp, #16]
 80115ae:	463b      	mov	r3, r7
 80115b0:	4602      	mov	r2, r0
 80115b2:	2b65      	cmp	r3, #101	; 0x65
 80115b4:	d001      	beq.n	80115ba <_strtod_l+0x172>
 80115b6:	2b45      	cmp	r3, #69	; 0x45
 80115b8:	d114      	bne.n	80115e4 <_strtod_l+0x19c>
 80115ba:	b924      	cbnz	r4, 80115c6 <_strtod_l+0x17e>
 80115bc:	b910      	cbnz	r0, 80115c4 <_strtod_l+0x17c>
 80115be:	9b06      	ldr	r3, [sp, #24]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d09e      	beq.n	8011502 <_strtod_l+0xba>
 80115c4:	2400      	movs	r4, #0
 80115c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80115c8:	1c73      	adds	r3, r6, #1
 80115ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80115cc:	7873      	ldrb	r3, [r6, #1]
 80115ce:	2b2b      	cmp	r3, #43	; 0x2b
 80115d0:	d078      	beq.n	80116c4 <_strtod_l+0x27c>
 80115d2:	2b2d      	cmp	r3, #45	; 0x2d
 80115d4:	d070      	beq.n	80116b8 <_strtod_l+0x270>
 80115d6:	f04f 0c00 	mov.w	ip, #0
 80115da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80115de:	2f09      	cmp	r7, #9
 80115e0:	d97c      	bls.n	80116dc <_strtod_l+0x294>
 80115e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80115e4:	f04f 0e00 	mov.w	lr, #0
 80115e8:	e09a      	b.n	8011720 <_strtod_l+0x2d8>
 80115ea:	2300      	movs	r3, #0
 80115ec:	e7c7      	b.n	801157e <_strtod_l+0x136>
 80115ee:	9905      	ldr	r1, [sp, #20]
 80115f0:	2908      	cmp	r1, #8
 80115f2:	bfdd      	ittte	le
 80115f4:	9907      	ldrle	r1, [sp, #28]
 80115f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80115fa:	9307      	strle	r3, [sp, #28]
 80115fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011600:	9b05      	ldr	r3, [sp, #20]
 8011602:	3001      	adds	r0, #1
 8011604:	3301      	adds	r3, #1
 8011606:	9305      	str	r3, [sp, #20]
 8011608:	901b      	str	r0, [sp, #108]	; 0x6c
 801160a:	e7bf      	b.n	801158c <_strtod_l+0x144>
 801160c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801160e:	191a      	adds	r2, r3, r4
 8011610:	921b      	str	r2, [sp, #108]	; 0x6c
 8011612:	9a05      	ldr	r2, [sp, #20]
 8011614:	5d1b      	ldrb	r3, [r3, r4]
 8011616:	2a00      	cmp	r2, #0
 8011618:	d037      	beq.n	801168a <_strtod_l+0x242>
 801161a:	9c05      	ldr	r4, [sp, #20]
 801161c:	4602      	mov	r2, r0
 801161e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011622:	2909      	cmp	r1, #9
 8011624:	d913      	bls.n	801164e <_strtod_l+0x206>
 8011626:	2101      	movs	r1, #1
 8011628:	9104      	str	r1, [sp, #16]
 801162a:	e7c2      	b.n	80115b2 <_strtod_l+0x16a>
 801162c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801162e:	1c5a      	adds	r2, r3, #1
 8011630:	921b      	str	r2, [sp, #108]	; 0x6c
 8011632:	785b      	ldrb	r3, [r3, #1]
 8011634:	3001      	adds	r0, #1
 8011636:	2b30      	cmp	r3, #48	; 0x30
 8011638:	d0f8      	beq.n	801162c <_strtod_l+0x1e4>
 801163a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801163e:	2a08      	cmp	r2, #8
 8011640:	f200 84e4 	bhi.w	801200c <_strtod_l+0xbc4>
 8011644:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011646:	9208      	str	r2, [sp, #32]
 8011648:	4602      	mov	r2, r0
 801164a:	2000      	movs	r0, #0
 801164c:	4604      	mov	r4, r0
 801164e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011652:	f100 0101 	add.w	r1, r0, #1
 8011656:	d012      	beq.n	801167e <_strtod_l+0x236>
 8011658:	440a      	add	r2, r1
 801165a:	eb00 0c04 	add.w	ip, r0, r4
 801165e:	4621      	mov	r1, r4
 8011660:	270a      	movs	r7, #10
 8011662:	458c      	cmp	ip, r1
 8011664:	d113      	bne.n	801168e <_strtod_l+0x246>
 8011666:	1821      	adds	r1, r4, r0
 8011668:	2908      	cmp	r1, #8
 801166a:	f104 0401 	add.w	r4, r4, #1
 801166e:	4404      	add	r4, r0
 8011670:	dc19      	bgt.n	80116a6 <_strtod_l+0x25e>
 8011672:	9b07      	ldr	r3, [sp, #28]
 8011674:	210a      	movs	r1, #10
 8011676:	fb01 e303 	mla	r3, r1, r3, lr
 801167a:	9307      	str	r3, [sp, #28]
 801167c:	2100      	movs	r1, #0
 801167e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011680:	1c58      	adds	r0, r3, #1
 8011682:	901b      	str	r0, [sp, #108]	; 0x6c
 8011684:	785b      	ldrb	r3, [r3, #1]
 8011686:	4608      	mov	r0, r1
 8011688:	e7c9      	b.n	801161e <_strtod_l+0x1d6>
 801168a:	9805      	ldr	r0, [sp, #20]
 801168c:	e7d3      	b.n	8011636 <_strtod_l+0x1ee>
 801168e:	2908      	cmp	r1, #8
 8011690:	f101 0101 	add.w	r1, r1, #1
 8011694:	dc03      	bgt.n	801169e <_strtod_l+0x256>
 8011696:	9b07      	ldr	r3, [sp, #28]
 8011698:	437b      	muls	r3, r7
 801169a:	9307      	str	r3, [sp, #28]
 801169c:	e7e1      	b.n	8011662 <_strtod_l+0x21a>
 801169e:	2910      	cmp	r1, #16
 80116a0:	bfd8      	it	le
 80116a2:	437d      	mulle	r5, r7
 80116a4:	e7dd      	b.n	8011662 <_strtod_l+0x21a>
 80116a6:	2c10      	cmp	r4, #16
 80116a8:	bfdc      	itt	le
 80116aa:	210a      	movle	r1, #10
 80116ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80116b0:	e7e4      	b.n	801167c <_strtod_l+0x234>
 80116b2:	2301      	movs	r3, #1
 80116b4:	9304      	str	r3, [sp, #16]
 80116b6:	e781      	b.n	80115bc <_strtod_l+0x174>
 80116b8:	f04f 0c01 	mov.w	ip, #1
 80116bc:	1cb3      	adds	r3, r6, #2
 80116be:	931b      	str	r3, [sp, #108]	; 0x6c
 80116c0:	78b3      	ldrb	r3, [r6, #2]
 80116c2:	e78a      	b.n	80115da <_strtod_l+0x192>
 80116c4:	f04f 0c00 	mov.w	ip, #0
 80116c8:	e7f8      	b.n	80116bc <_strtod_l+0x274>
 80116ca:	bf00      	nop
 80116cc:	08016b6c 	.word	0x08016b6c
 80116d0:	7ff00000 	.word	0x7ff00000
 80116d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116d6:	1c5f      	adds	r7, r3, #1
 80116d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80116da:	785b      	ldrb	r3, [r3, #1]
 80116dc:	2b30      	cmp	r3, #48	; 0x30
 80116de:	d0f9      	beq.n	80116d4 <_strtod_l+0x28c>
 80116e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80116e4:	2f08      	cmp	r7, #8
 80116e6:	f63f af7d 	bhi.w	80115e4 <_strtod_l+0x19c>
 80116ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80116ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116f0:	930a      	str	r3, [sp, #40]	; 0x28
 80116f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116f4:	1c5f      	adds	r7, r3, #1
 80116f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80116f8:	785b      	ldrb	r3, [r3, #1]
 80116fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80116fe:	f1b8 0f09 	cmp.w	r8, #9
 8011702:	d937      	bls.n	8011774 <_strtod_l+0x32c>
 8011704:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011706:	1a7f      	subs	r7, r7, r1
 8011708:	2f08      	cmp	r7, #8
 801170a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801170e:	dc37      	bgt.n	8011780 <_strtod_l+0x338>
 8011710:	45be      	cmp	lr, r7
 8011712:	bfa8      	it	ge
 8011714:	46be      	movge	lr, r7
 8011716:	f1bc 0f00 	cmp.w	ip, #0
 801171a:	d001      	beq.n	8011720 <_strtod_l+0x2d8>
 801171c:	f1ce 0e00 	rsb	lr, lr, #0
 8011720:	2c00      	cmp	r4, #0
 8011722:	d151      	bne.n	80117c8 <_strtod_l+0x380>
 8011724:	2800      	cmp	r0, #0
 8011726:	f47f aece 	bne.w	80114c6 <_strtod_l+0x7e>
 801172a:	9a06      	ldr	r2, [sp, #24]
 801172c:	2a00      	cmp	r2, #0
 801172e:	f47f aeca 	bne.w	80114c6 <_strtod_l+0x7e>
 8011732:	9a04      	ldr	r2, [sp, #16]
 8011734:	2a00      	cmp	r2, #0
 8011736:	f47f aee4 	bne.w	8011502 <_strtod_l+0xba>
 801173a:	2b4e      	cmp	r3, #78	; 0x4e
 801173c:	d027      	beq.n	801178e <_strtod_l+0x346>
 801173e:	dc21      	bgt.n	8011784 <_strtod_l+0x33c>
 8011740:	2b49      	cmp	r3, #73	; 0x49
 8011742:	f47f aede 	bne.w	8011502 <_strtod_l+0xba>
 8011746:	49a0      	ldr	r1, [pc, #640]	; (80119c8 <_strtod_l+0x580>)
 8011748:	a81b      	add	r0, sp, #108	; 0x6c
 801174a:	f001 ffc5 	bl	80136d8 <__match>
 801174e:	2800      	cmp	r0, #0
 8011750:	f43f aed7 	beq.w	8011502 <_strtod_l+0xba>
 8011754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011756:	499d      	ldr	r1, [pc, #628]	; (80119cc <_strtod_l+0x584>)
 8011758:	3b01      	subs	r3, #1
 801175a:	a81b      	add	r0, sp, #108	; 0x6c
 801175c:	931b      	str	r3, [sp, #108]	; 0x6c
 801175e:	f001 ffbb 	bl	80136d8 <__match>
 8011762:	b910      	cbnz	r0, 801176a <_strtod_l+0x322>
 8011764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011766:	3301      	adds	r3, #1
 8011768:	931b      	str	r3, [sp, #108]	; 0x6c
 801176a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80119e0 <_strtod_l+0x598>
 801176e:	f04f 0a00 	mov.w	sl, #0
 8011772:	e6a8      	b.n	80114c6 <_strtod_l+0x7e>
 8011774:	210a      	movs	r1, #10
 8011776:	fb01 3e0e 	mla	lr, r1, lr, r3
 801177a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801177e:	e7b8      	b.n	80116f2 <_strtod_l+0x2aa>
 8011780:	46be      	mov	lr, r7
 8011782:	e7c8      	b.n	8011716 <_strtod_l+0x2ce>
 8011784:	2b69      	cmp	r3, #105	; 0x69
 8011786:	d0de      	beq.n	8011746 <_strtod_l+0x2fe>
 8011788:	2b6e      	cmp	r3, #110	; 0x6e
 801178a:	f47f aeba 	bne.w	8011502 <_strtod_l+0xba>
 801178e:	4990      	ldr	r1, [pc, #576]	; (80119d0 <_strtod_l+0x588>)
 8011790:	a81b      	add	r0, sp, #108	; 0x6c
 8011792:	f001 ffa1 	bl	80136d8 <__match>
 8011796:	2800      	cmp	r0, #0
 8011798:	f43f aeb3 	beq.w	8011502 <_strtod_l+0xba>
 801179c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	2b28      	cmp	r3, #40	; 0x28
 80117a2:	d10e      	bne.n	80117c2 <_strtod_l+0x37a>
 80117a4:	aa1e      	add	r2, sp, #120	; 0x78
 80117a6:	498b      	ldr	r1, [pc, #556]	; (80119d4 <_strtod_l+0x58c>)
 80117a8:	a81b      	add	r0, sp, #108	; 0x6c
 80117aa:	f001 ffa9 	bl	8013700 <__hexnan>
 80117ae:	2805      	cmp	r0, #5
 80117b0:	d107      	bne.n	80117c2 <_strtod_l+0x37a>
 80117b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80117b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80117b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80117bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80117c0:	e681      	b.n	80114c6 <_strtod_l+0x7e>
 80117c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80119e8 <_strtod_l+0x5a0>
 80117c6:	e7d2      	b.n	801176e <_strtod_l+0x326>
 80117c8:	ebae 0302 	sub.w	r3, lr, r2
 80117cc:	9306      	str	r3, [sp, #24]
 80117ce:	9b05      	ldr	r3, [sp, #20]
 80117d0:	9807      	ldr	r0, [sp, #28]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	bf08      	it	eq
 80117d6:	4623      	moveq	r3, r4
 80117d8:	2c10      	cmp	r4, #16
 80117da:	9305      	str	r3, [sp, #20]
 80117dc:	46a0      	mov	r8, r4
 80117de:	bfa8      	it	ge
 80117e0:	f04f 0810 	movge.w	r8, #16
 80117e4:	f7ee fe8e 	bl	8000504 <__aeabi_ui2d>
 80117e8:	2c09      	cmp	r4, #9
 80117ea:	4682      	mov	sl, r0
 80117ec:	468b      	mov	fp, r1
 80117ee:	dc13      	bgt.n	8011818 <_strtod_l+0x3d0>
 80117f0:	9b06      	ldr	r3, [sp, #24]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f43f ae67 	beq.w	80114c6 <_strtod_l+0x7e>
 80117f8:	9b06      	ldr	r3, [sp, #24]
 80117fa:	dd7a      	ble.n	80118f2 <_strtod_l+0x4aa>
 80117fc:	2b16      	cmp	r3, #22
 80117fe:	dc61      	bgt.n	80118c4 <_strtod_l+0x47c>
 8011800:	4a75      	ldr	r2, [pc, #468]	; (80119d8 <_strtod_l+0x590>)
 8011802:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011806:	e9de 0100 	ldrd	r0, r1, [lr]
 801180a:	4652      	mov	r2, sl
 801180c:	465b      	mov	r3, fp
 801180e:	f7ee fef3 	bl	80005f8 <__aeabi_dmul>
 8011812:	4682      	mov	sl, r0
 8011814:	468b      	mov	fp, r1
 8011816:	e656      	b.n	80114c6 <_strtod_l+0x7e>
 8011818:	4b6f      	ldr	r3, [pc, #444]	; (80119d8 <_strtod_l+0x590>)
 801181a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801181e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011822:	f7ee fee9 	bl	80005f8 <__aeabi_dmul>
 8011826:	4606      	mov	r6, r0
 8011828:	4628      	mov	r0, r5
 801182a:	460f      	mov	r7, r1
 801182c:	f7ee fe6a 	bl	8000504 <__aeabi_ui2d>
 8011830:	4602      	mov	r2, r0
 8011832:	460b      	mov	r3, r1
 8011834:	4630      	mov	r0, r6
 8011836:	4639      	mov	r1, r7
 8011838:	f7ee fd28 	bl	800028c <__adddf3>
 801183c:	2c0f      	cmp	r4, #15
 801183e:	4682      	mov	sl, r0
 8011840:	468b      	mov	fp, r1
 8011842:	ddd5      	ble.n	80117f0 <_strtod_l+0x3a8>
 8011844:	9b06      	ldr	r3, [sp, #24]
 8011846:	eba4 0808 	sub.w	r8, r4, r8
 801184a:	4498      	add	r8, r3
 801184c:	f1b8 0f00 	cmp.w	r8, #0
 8011850:	f340 8096 	ble.w	8011980 <_strtod_l+0x538>
 8011854:	f018 030f 	ands.w	r3, r8, #15
 8011858:	d00a      	beq.n	8011870 <_strtod_l+0x428>
 801185a:	495f      	ldr	r1, [pc, #380]	; (80119d8 <_strtod_l+0x590>)
 801185c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011860:	4652      	mov	r2, sl
 8011862:	465b      	mov	r3, fp
 8011864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011868:	f7ee fec6 	bl	80005f8 <__aeabi_dmul>
 801186c:	4682      	mov	sl, r0
 801186e:	468b      	mov	fp, r1
 8011870:	f038 080f 	bics.w	r8, r8, #15
 8011874:	d073      	beq.n	801195e <_strtod_l+0x516>
 8011876:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801187a:	dd47      	ble.n	801190c <_strtod_l+0x4c4>
 801187c:	2400      	movs	r4, #0
 801187e:	46a0      	mov	r8, r4
 8011880:	9407      	str	r4, [sp, #28]
 8011882:	9405      	str	r4, [sp, #20]
 8011884:	2322      	movs	r3, #34	; 0x22
 8011886:	f8df b158 	ldr.w	fp, [pc, #344]	; 80119e0 <_strtod_l+0x598>
 801188a:	f8c9 3000 	str.w	r3, [r9]
 801188e:	f04f 0a00 	mov.w	sl, #0
 8011892:	9b07      	ldr	r3, [sp, #28]
 8011894:	2b00      	cmp	r3, #0
 8011896:	f43f ae16 	beq.w	80114c6 <_strtod_l+0x7e>
 801189a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801189c:	4648      	mov	r0, r9
 801189e:	f002 f881 	bl	80139a4 <_Bfree>
 80118a2:	9905      	ldr	r1, [sp, #20]
 80118a4:	4648      	mov	r0, r9
 80118a6:	f002 f87d 	bl	80139a4 <_Bfree>
 80118aa:	4641      	mov	r1, r8
 80118ac:	4648      	mov	r0, r9
 80118ae:	f002 f879 	bl	80139a4 <_Bfree>
 80118b2:	9907      	ldr	r1, [sp, #28]
 80118b4:	4648      	mov	r0, r9
 80118b6:	f002 f875 	bl	80139a4 <_Bfree>
 80118ba:	4621      	mov	r1, r4
 80118bc:	4648      	mov	r0, r9
 80118be:	f002 f871 	bl	80139a4 <_Bfree>
 80118c2:	e600      	b.n	80114c6 <_strtod_l+0x7e>
 80118c4:	9a06      	ldr	r2, [sp, #24]
 80118c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80118ca:	4293      	cmp	r3, r2
 80118cc:	dbba      	blt.n	8011844 <_strtod_l+0x3fc>
 80118ce:	4d42      	ldr	r5, [pc, #264]	; (80119d8 <_strtod_l+0x590>)
 80118d0:	f1c4 040f 	rsb	r4, r4, #15
 80118d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80118d8:	4652      	mov	r2, sl
 80118da:	465b      	mov	r3, fp
 80118dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118e0:	f7ee fe8a 	bl	80005f8 <__aeabi_dmul>
 80118e4:	9b06      	ldr	r3, [sp, #24]
 80118e6:	1b1c      	subs	r4, r3, r4
 80118e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80118ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80118f0:	e78d      	b.n	801180e <_strtod_l+0x3c6>
 80118f2:	f113 0f16 	cmn.w	r3, #22
 80118f6:	dba5      	blt.n	8011844 <_strtod_l+0x3fc>
 80118f8:	4a37      	ldr	r2, [pc, #220]	; (80119d8 <_strtod_l+0x590>)
 80118fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80118fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011902:	4650      	mov	r0, sl
 8011904:	4659      	mov	r1, fp
 8011906:	f7ee ffa1 	bl	800084c <__aeabi_ddiv>
 801190a:	e782      	b.n	8011812 <_strtod_l+0x3ca>
 801190c:	2300      	movs	r3, #0
 801190e:	4e33      	ldr	r6, [pc, #204]	; (80119dc <_strtod_l+0x594>)
 8011910:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011914:	4650      	mov	r0, sl
 8011916:	4659      	mov	r1, fp
 8011918:	461d      	mov	r5, r3
 801191a:	f1b8 0f01 	cmp.w	r8, #1
 801191e:	dc21      	bgt.n	8011964 <_strtod_l+0x51c>
 8011920:	b10b      	cbz	r3, 8011926 <_strtod_l+0x4de>
 8011922:	4682      	mov	sl, r0
 8011924:	468b      	mov	fp, r1
 8011926:	4b2d      	ldr	r3, [pc, #180]	; (80119dc <_strtod_l+0x594>)
 8011928:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801192c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011930:	4652      	mov	r2, sl
 8011932:	465b      	mov	r3, fp
 8011934:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011938:	f7ee fe5e 	bl	80005f8 <__aeabi_dmul>
 801193c:	4b28      	ldr	r3, [pc, #160]	; (80119e0 <_strtod_l+0x598>)
 801193e:	460a      	mov	r2, r1
 8011940:	400b      	ands	r3, r1
 8011942:	4928      	ldr	r1, [pc, #160]	; (80119e4 <_strtod_l+0x59c>)
 8011944:	428b      	cmp	r3, r1
 8011946:	4682      	mov	sl, r0
 8011948:	d898      	bhi.n	801187c <_strtod_l+0x434>
 801194a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801194e:	428b      	cmp	r3, r1
 8011950:	bf86      	itte	hi
 8011952:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80119ec <_strtod_l+0x5a4>
 8011956:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801195a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801195e:	2300      	movs	r3, #0
 8011960:	9304      	str	r3, [sp, #16]
 8011962:	e077      	b.n	8011a54 <_strtod_l+0x60c>
 8011964:	f018 0f01 	tst.w	r8, #1
 8011968:	d006      	beq.n	8011978 <_strtod_l+0x530>
 801196a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011972:	f7ee fe41 	bl	80005f8 <__aeabi_dmul>
 8011976:	2301      	movs	r3, #1
 8011978:	3501      	adds	r5, #1
 801197a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801197e:	e7cc      	b.n	801191a <_strtod_l+0x4d2>
 8011980:	d0ed      	beq.n	801195e <_strtod_l+0x516>
 8011982:	f1c8 0800 	rsb	r8, r8, #0
 8011986:	f018 020f 	ands.w	r2, r8, #15
 801198a:	d00a      	beq.n	80119a2 <_strtod_l+0x55a>
 801198c:	4b12      	ldr	r3, [pc, #72]	; (80119d8 <_strtod_l+0x590>)
 801198e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011992:	4650      	mov	r0, sl
 8011994:	4659      	mov	r1, fp
 8011996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199a:	f7ee ff57 	bl	800084c <__aeabi_ddiv>
 801199e:	4682      	mov	sl, r0
 80119a0:	468b      	mov	fp, r1
 80119a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80119a6:	d0da      	beq.n	801195e <_strtod_l+0x516>
 80119a8:	f1b8 0f1f 	cmp.w	r8, #31
 80119ac:	dd20      	ble.n	80119f0 <_strtod_l+0x5a8>
 80119ae:	2400      	movs	r4, #0
 80119b0:	46a0      	mov	r8, r4
 80119b2:	9407      	str	r4, [sp, #28]
 80119b4:	9405      	str	r4, [sp, #20]
 80119b6:	2322      	movs	r3, #34	; 0x22
 80119b8:	f04f 0a00 	mov.w	sl, #0
 80119bc:	f04f 0b00 	mov.w	fp, #0
 80119c0:	f8c9 3000 	str.w	r3, [r9]
 80119c4:	e765      	b.n	8011892 <_strtod_l+0x44a>
 80119c6:	bf00      	nop
 80119c8:	08016b3d 	.word	0x08016b3d
 80119cc:	08016bc3 	.word	0x08016bc3
 80119d0:	08016b45 	.word	0x08016b45
 80119d4:	08016b80 	.word	0x08016b80
 80119d8:	08016c68 	.word	0x08016c68
 80119dc:	08016c40 	.word	0x08016c40
 80119e0:	7ff00000 	.word	0x7ff00000
 80119e4:	7ca00000 	.word	0x7ca00000
 80119e8:	fff80000 	.word	0xfff80000
 80119ec:	7fefffff 	.word	0x7fefffff
 80119f0:	f018 0310 	ands.w	r3, r8, #16
 80119f4:	bf18      	it	ne
 80119f6:	236a      	movne	r3, #106	; 0x6a
 80119f8:	4da0      	ldr	r5, [pc, #640]	; (8011c7c <_strtod_l+0x834>)
 80119fa:	9304      	str	r3, [sp, #16]
 80119fc:	4650      	mov	r0, sl
 80119fe:	4659      	mov	r1, fp
 8011a00:	2300      	movs	r3, #0
 8011a02:	f1b8 0f00 	cmp.w	r8, #0
 8011a06:	f300 810a 	bgt.w	8011c1e <_strtod_l+0x7d6>
 8011a0a:	b10b      	cbz	r3, 8011a10 <_strtod_l+0x5c8>
 8011a0c:	4682      	mov	sl, r0
 8011a0e:	468b      	mov	fp, r1
 8011a10:	9b04      	ldr	r3, [sp, #16]
 8011a12:	b1bb      	cbz	r3, 8011a44 <_strtod_l+0x5fc>
 8011a14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011a18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	4659      	mov	r1, fp
 8011a20:	dd10      	ble.n	8011a44 <_strtod_l+0x5fc>
 8011a22:	2b1f      	cmp	r3, #31
 8011a24:	f340 8107 	ble.w	8011c36 <_strtod_l+0x7ee>
 8011a28:	2b34      	cmp	r3, #52	; 0x34
 8011a2a:	bfde      	ittt	le
 8011a2c:	3b20      	suble	r3, #32
 8011a2e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011a32:	fa02 f303 	lslle.w	r3, r2, r3
 8011a36:	f04f 0a00 	mov.w	sl, #0
 8011a3a:	bfcc      	ite	gt
 8011a3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011a40:	ea03 0b01 	andle.w	fp, r3, r1
 8011a44:	2200      	movs	r2, #0
 8011a46:	2300      	movs	r3, #0
 8011a48:	4650      	mov	r0, sl
 8011a4a:	4659      	mov	r1, fp
 8011a4c:	f7ef f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d1ac      	bne.n	80119ae <_strtod_l+0x566>
 8011a54:	9b07      	ldr	r3, [sp, #28]
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	9a05      	ldr	r2, [sp, #20]
 8011a5a:	9908      	ldr	r1, [sp, #32]
 8011a5c:	4623      	mov	r3, r4
 8011a5e:	4648      	mov	r0, r9
 8011a60:	f001 fff2 	bl	8013a48 <__s2b>
 8011a64:	9007      	str	r0, [sp, #28]
 8011a66:	2800      	cmp	r0, #0
 8011a68:	f43f af08 	beq.w	801187c <_strtod_l+0x434>
 8011a6c:	9a06      	ldr	r2, [sp, #24]
 8011a6e:	9b06      	ldr	r3, [sp, #24]
 8011a70:	2a00      	cmp	r2, #0
 8011a72:	f1c3 0300 	rsb	r3, r3, #0
 8011a76:	bfa8      	it	ge
 8011a78:	2300      	movge	r3, #0
 8011a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8011a7c:	2400      	movs	r4, #0
 8011a7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011a82:	9316      	str	r3, [sp, #88]	; 0x58
 8011a84:	46a0      	mov	r8, r4
 8011a86:	9b07      	ldr	r3, [sp, #28]
 8011a88:	4648      	mov	r0, r9
 8011a8a:	6859      	ldr	r1, [r3, #4]
 8011a8c:	f001 ff56 	bl	801393c <_Balloc>
 8011a90:	9005      	str	r0, [sp, #20]
 8011a92:	2800      	cmp	r0, #0
 8011a94:	f43f aef6 	beq.w	8011884 <_strtod_l+0x43c>
 8011a98:	9b07      	ldr	r3, [sp, #28]
 8011a9a:	691a      	ldr	r2, [r3, #16]
 8011a9c:	3202      	adds	r2, #2
 8011a9e:	f103 010c 	add.w	r1, r3, #12
 8011aa2:	0092      	lsls	r2, r2, #2
 8011aa4:	300c      	adds	r0, #12
 8011aa6:	f7fe ff8f 	bl	80109c8 <memcpy>
 8011aaa:	aa1e      	add	r2, sp, #120	; 0x78
 8011aac:	a91d      	add	r1, sp, #116	; 0x74
 8011aae:	ec4b ab10 	vmov	d0, sl, fp
 8011ab2:	4648      	mov	r0, r9
 8011ab4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011ab8:	f002 fa82 	bl	8013fc0 <__d2b>
 8011abc:	901c      	str	r0, [sp, #112]	; 0x70
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	f43f aee0 	beq.w	8011884 <_strtod_l+0x43c>
 8011ac4:	2101      	movs	r1, #1
 8011ac6:	4648      	mov	r0, r9
 8011ac8:	f002 f84a 	bl	8013b60 <__i2b>
 8011acc:	4680      	mov	r8, r0
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	f43f aed8 	beq.w	8011884 <_strtod_l+0x43c>
 8011ad4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011ad6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011ad8:	2e00      	cmp	r6, #0
 8011ada:	bfab      	itete	ge
 8011adc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011ade:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011ae0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011ae2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011ae4:	bfac      	ite	ge
 8011ae6:	18f7      	addge	r7, r6, r3
 8011ae8:	1b9d      	sublt	r5, r3, r6
 8011aea:	9b04      	ldr	r3, [sp, #16]
 8011aec:	1af6      	subs	r6, r6, r3
 8011aee:	4416      	add	r6, r2
 8011af0:	4b63      	ldr	r3, [pc, #396]	; (8011c80 <_strtod_l+0x838>)
 8011af2:	3e01      	subs	r6, #1
 8011af4:	429e      	cmp	r6, r3
 8011af6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011afa:	f280 80af 	bge.w	8011c5c <_strtod_l+0x814>
 8011afe:	1b9b      	subs	r3, r3, r6
 8011b00:	2b1f      	cmp	r3, #31
 8011b02:	eba2 0203 	sub.w	r2, r2, r3
 8011b06:	f04f 0101 	mov.w	r1, #1
 8011b0a:	f300 809b 	bgt.w	8011c44 <_strtod_l+0x7fc>
 8011b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b12:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b14:	2300      	movs	r3, #0
 8011b16:	930a      	str	r3, [sp, #40]	; 0x28
 8011b18:	18be      	adds	r6, r7, r2
 8011b1a:	9b04      	ldr	r3, [sp, #16]
 8011b1c:	42b7      	cmp	r7, r6
 8011b1e:	4415      	add	r5, r2
 8011b20:	441d      	add	r5, r3
 8011b22:	463b      	mov	r3, r7
 8011b24:	bfa8      	it	ge
 8011b26:	4633      	movge	r3, r6
 8011b28:	42ab      	cmp	r3, r5
 8011b2a:	bfa8      	it	ge
 8011b2c:	462b      	movge	r3, r5
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	bfc2      	ittt	gt
 8011b32:	1af6      	subgt	r6, r6, r3
 8011b34:	1aed      	subgt	r5, r5, r3
 8011b36:	1aff      	subgt	r7, r7, r3
 8011b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b3a:	b1bb      	cbz	r3, 8011b6c <_strtod_l+0x724>
 8011b3c:	4641      	mov	r1, r8
 8011b3e:	461a      	mov	r2, r3
 8011b40:	4648      	mov	r0, r9
 8011b42:	f002 f8ad 	bl	8013ca0 <__pow5mult>
 8011b46:	4680      	mov	r8, r0
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	f43f ae9b 	beq.w	8011884 <_strtod_l+0x43c>
 8011b4e:	4601      	mov	r1, r0
 8011b50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011b52:	4648      	mov	r0, r9
 8011b54:	f002 f80d 	bl	8013b72 <__multiply>
 8011b58:	900c      	str	r0, [sp, #48]	; 0x30
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	f43f ae92 	beq.w	8011884 <_strtod_l+0x43c>
 8011b60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b62:	4648      	mov	r0, r9
 8011b64:	f001 ff1e 	bl	80139a4 <_Bfree>
 8011b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b6a:	931c      	str	r3, [sp, #112]	; 0x70
 8011b6c:	2e00      	cmp	r6, #0
 8011b6e:	dc7a      	bgt.n	8011c66 <_strtod_l+0x81e>
 8011b70:	9b06      	ldr	r3, [sp, #24]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	dd08      	ble.n	8011b88 <_strtod_l+0x740>
 8011b76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b78:	9905      	ldr	r1, [sp, #20]
 8011b7a:	4648      	mov	r0, r9
 8011b7c:	f002 f890 	bl	8013ca0 <__pow5mult>
 8011b80:	9005      	str	r0, [sp, #20]
 8011b82:	2800      	cmp	r0, #0
 8011b84:	f43f ae7e 	beq.w	8011884 <_strtod_l+0x43c>
 8011b88:	2d00      	cmp	r5, #0
 8011b8a:	dd08      	ble.n	8011b9e <_strtod_l+0x756>
 8011b8c:	462a      	mov	r2, r5
 8011b8e:	9905      	ldr	r1, [sp, #20]
 8011b90:	4648      	mov	r0, r9
 8011b92:	f002 f8d3 	bl	8013d3c <__lshift>
 8011b96:	9005      	str	r0, [sp, #20]
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	f43f ae73 	beq.w	8011884 <_strtod_l+0x43c>
 8011b9e:	2f00      	cmp	r7, #0
 8011ba0:	dd08      	ble.n	8011bb4 <_strtod_l+0x76c>
 8011ba2:	4641      	mov	r1, r8
 8011ba4:	463a      	mov	r2, r7
 8011ba6:	4648      	mov	r0, r9
 8011ba8:	f002 f8c8 	bl	8013d3c <__lshift>
 8011bac:	4680      	mov	r8, r0
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	f43f ae68 	beq.w	8011884 <_strtod_l+0x43c>
 8011bb4:	9a05      	ldr	r2, [sp, #20]
 8011bb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011bb8:	4648      	mov	r0, r9
 8011bba:	f002 f92d 	bl	8013e18 <__mdiff>
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	f43f ae5f 	beq.w	8011884 <_strtod_l+0x43c>
 8011bc6:	68c3      	ldr	r3, [r0, #12]
 8011bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8011bca:	2300      	movs	r3, #0
 8011bcc:	60c3      	str	r3, [r0, #12]
 8011bce:	4641      	mov	r1, r8
 8011bd0:	f002 f908 	bl	8013de4 <__mcmp>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	da55      	bge.n	8011c84 <_strtod_l+0x83c>
 8011bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bda:	b9e3      	cbnz	r3, 8011c16 <_strtod_l+0x7ce>
 8011bdc:	f1ba 0f00 	cmp.w	sl, #0
 8011be0:	d119      	bne.n	8011c16 <_strtod_l+0x7ce>
 8011be2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011be6:	b9b3      	cbnz	r3, 8011c16 <_strtod_l+0x7ce>
 8011be8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bec:	0d1b      	lsrs	r3, r3, #20
 8011bee:	051b      	lsls	r3, r3, #20
 8011bf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011bf4:	d90f      	bls.n	8011c16 <_strtod_l+0x7ce>
 8011bf6:	6963      	ldr	r3, [r4, #20]
 8011bf8:	b913      	cbnz	r3, 8011c00 <_strtod_l+0x7b8>
 8011bfa:	6923      	ldr	r3, [r4, #16]
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	dd0a      	ble.n	8011c16 <_strtod_l+0x7ce>
 8011c00:	4621      	mov	r1, r4
 8011c02:	2201      	movs	r2, #1
 8011c04:	4648      	mov	r0, r9
 8011c06:	f002 f899 	bl	8013d3c <__lshift>
 8011c0a:	4641      	mov	r1, r8
 8011c0c:	4604      	mov	r4, r0
 8011c0e:	f002 f8e9 	bl	8013de4 <__mcmp>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	dc67      	bgt.n	8011ce6 <_strtod_l+0x89e>
 8011c16:	9b04      	ldr	r3, [sp, #16]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d171      	bne.n	8011d00 <_strtod_l+0x8b8>
 8011c1c:	e63d      	b.n	801189a <_strtod_l+0x452>
 8011c1e:	f018 0f01 	tst.w	r8, #1
 8011c22:	d004      	beq.n	8011c2e <_strtod_l+0x7e6>
 8011c24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c28:	f7ee fce6 	bl	80005f8 <__aeabi_dmul>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011c32:	3508      	adds	r5, #8
 8011c34:	e6e5      	b.n	8011a02 <_strtod_l+0x5ba>
 8011c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c3e:	ea03 0a0a 	and.w	sl, r3, sl
 8011c42:	e6ff      	b.n	8011a44 <_strtod_l+0x5fc>
 8011c44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011c48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011c4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011c50:	36e2      	adds	r6, #226	; 0xe2
 8011c52:	fa01 f306 	lsl.w	r3, r1, r6
 8011c56:	930a      	str	r3, [sp, #40]	; 0x28
 8011c58:	910f      	str	r1, [sp, #60]	; 0x3c
 8011c5a:	e75d      	b.n	8011b18 <_strtod_l+0x6d0>
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8011c60:	2301      	movs	r3, #1
 8011c62:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c64:	e758      	b.n	8011b18 <_strtod_l+0x6d0>
 8011c66:	4632      	mov	r2, r6
 8011c68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011c6a:	4648      	mov	r0, r9
 8011c6c:	f002 f866 	bl	8013d3c <__lshift>
 8011c70:	901c      	str	r0, [sp, #112]	; 0x70
 8011c72:	2800      	cmp	r0, #0
 8011c74:	f47f af7c 	bne.w	8011b70 <_strtod_l+0x728>
 8011c78:	e604      	b.n	8011884 <_strtod_l+0x43c>
 8011c7a:	bf00      	nop
 8011c7c:	08016b98 	.word	0x08016b98
 8011c80:	fffffc02 	.word	0xfffffc02
 8011c84:	465d      	mov	r5, fp
 8011c86:	f040 8086 	bne.w	8011d96 <_strtod_l+0x94e>
 8011c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c90:	b32a      	cbz	r2, 8011cde <_strtod_l+0x896>
 8011c92:	4aaf      	ldr	r2, [pc, #700]	; (8011f50 <_strtod_l+0xb08>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d153      	bne.n	8011d40 <_strtod_l+0x8f8>
 8011c98:	9b04      	ldr	r3, [sp, #16]
 8011c9a:	4650      	mov	r0, sl
 8011c9c:	b1d3      	cbz	r3, 8011cd4 <_strtod_l+0x88c>
 8011c9e:	4aad      	ldr	r2, [pc, #692]	; (8011f54 <_strtod_l+0xb0c>)
 8011ca0:	402a      	ands	r2, r5
 8011ca2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011ca6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011caa:	d816      	bhi.n	8011cda <_strtod_l+0x892>
 8011cac:	0d12      	lsrs	r2, r2, #20
 8011cae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8011cb6:	4298      	cmp	r0, r3
 8011cb8:	d142      	bne.n	8011d40 <_strtod_l+0x8f8>
 8011cba:	4ba7      	ldr	r3, [pc, #668]	; (8011f58 <_strtod_l+0xb10>)
 8011cbc:	429d      	cmp	r5, r3
 8011cbe:	d102      	bne.n	8011cc6 <_strtod_l+0x87e>
 8011cc0:	3001      	adds	r0, #1
 8011cc2:	f43f addf 	beq.w	8011884 <_strtod_l+0x43c>
 8011cc6:	4ba3      	ldr	r3, [pc, #652]	; (8011f54 <_strtod_l+0xb0c>)
 8011cc8:	402b      	ands	r3, r5
 8011cca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011cce:	f04f 0a00 	mov.w	sl, #0
 8011cd2:	e7a0      	b.n	8011c16 <_strtod_l+0x7ce>
 8011cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cd8:	e7ed      	b.n	8011cb6 <_strtod_l+0x86e>
 8011cda:	460b      	mov	r3, r1
 8011cdc:	e7eb      	b.n	8011cb6 <_strtod_l+0x86e>
 8011cde:	bb7b      	cbnz	r3, 8011d40 <_strtod_l+0x8f8>
 8011ce0:	f1ba 0f00 	cmp.w	sl, #0
 8011ce4:	d12c      	bne.n	8011d40 <_strtod_l+0x8f8>
 8011ce6:	9904      	ldr	r1, [sp, #16]
 8011ce8:	4a9a      	ldr	r2, [pc, #616]	; (8011f54 <_strtod_l+0xb0c>)
 8011cea:	465b      	mov	r3, fp
 8011cec:	b1f1      	cbz	r1, 8011d2c <_strtod_l+0x8e4>
 8011cee:	ea02 010b 	and.w	r1, r2, fp
 8011cf2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011cf6:	dc19      	bgt.n	8011d2c <_strtod_l+0x8e4>
 8011cf8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011cfc:	f77f ae5b 	ble.w	80119b6 <_strtod_l+0x56e>
 8011d00:	4a96      	ldr	r2, [pc, #600]	; (8011f5c <_strtod_l+0xb14>)
 8011d02:	2300      	movs	r3, #0
 8011d04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011d08:	4650      	mov	r0, sl
 8011d0a:	4659      	mov	r1, fp
 8011d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011d10:	f7ee fc72 	bl	80005f8 <__aeabi_dmul>
 8011d14:	4682      	mov	sl, r0
 8011d16:	468b      	mov	fp, r1
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	f47f adbe 	bne.w	801189a <_strtod_l+0x452>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	f47f adbb 	bne.w	801189a <_strtod_l+0x452>
 8011d24:	2322      	movs	r3, #34	; 0x22
 8011d26:	f8c9 3000 	str.w	r3, [r9]
 8011d2a:	e5b6      	b.n	801189a <_strtod_l+0x452>
 8011d2c:	4013      	ands	r3, r2
 8011d2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011d32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011d36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011d3a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011d3e:	e76a      	b.n	8011c16 <_strtod_l+0x7ce>
 8011d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d42:	b193      	cbz	r3, 8011d6a <_strtod_l+0x922>
 8011d44:	422b      	tst	r3, r5
 8011d46:	f43f af66 	beq.w	8011c16 <_strtod_l+0x7ce>
 8011d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d4c:	9a04      	ldr	r2, [sp, #16]
 8011d4e:	4650      	mov	r0, sl
 8011d50:	4659      	mov	r1, fp
 8011d52:	b173      	cbz	r3, 8011d72 <_strtod_l+0x92a>
 8011d54:	f7ff fb59 	bl	801140a <sulp>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011d60:	f7ee fa94 	bl	800028c <__adddf3>
 8011d64:	4682      	mov	sl, r0
 8011d66:	468b      	mov	fp, r1
 8011d68:	e755      	b.n	8011c16 <_strtod_l+0x7ce>
 8011d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d6c:	ea13 0f0a 	tst.w	r3, sl
 8011d70:	e7e9      	b.n	8011d46 <_strtod_l+0x8fe>
 8011d72:	f7ff fb4a 	bl	801140a <sulp>
 8011d76:	4602      	mov	r2, r0
 8011d78:	460b      	mov	r3, r1
 8011d7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011d7e:	f7ee fa83 	bl	8000288 <__aeabi_dsub>
 8011d82:	2200      	movs	r2, #0
 8011d84:	2300      	movs	r3, #0
 8011d86:	4682      	mov	sl, r0
 8011d88:	468b      	mov	fp, r1
 8011d8a:	f7ee fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	f47f ae11 	bne.w	80119b6 <_strtod_l+0x56e>
 8011d94:	e73f      	b.n	8011c16 <_strtod_l+0x7ce>
 8011d96:	4641      	mov	r1, r8
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f002 f960 	bl	801405e <__ratio>
 8011d9e:	ec57 6b10 	vmov	r6, r7, d0
 8011da2:	2200      	movs	r2, #0
 8011da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011da8:	ee10 0a10 	vmov	r0, s0
 8011dac:	4639      	mov	r1, r7
 8011dae:	f7ee fe9f 	bl	8000af0 <__aeabi_dcmple>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d077      	beq.n	8011ea6 <_strtod_l+0xa5e>
 8011db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d04a      	beq.n	8011e52 <_strtod_l+0xa0a>
 8011dbc:	4b68      	ldr	r3, [pc, #416]	; (8011f60 <_strtod_l+0xb18>)
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011dc4:	4f66      	ldr	r7, [pc, #408]	; (8011f60 <_strtod_l+0xb18>)
 8011dc6:	2600      	movs	r6, #0
 8011dc8:	4b62      	ldr	r3, [pc, #392]	; (8011f54 <_strtod_l+0xb0c>)
 8011dca:	402b      	ands	r3, r5
 8011dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011dd0:	4b64      	ldr	r3, [pc, #400]	; (8011f64 <_strtod_l+0xb1c>)
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	f040 80ce 	bne.w	8011f74 <_strtod_l+0xb2c>
 8011dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011ddc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011de0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8011de4:	ec4b ab10 	vmov	d0, sl, fp
 8011de8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011dec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011df0:	f002 f870 	bl	8013ed4 <__ulp>
 8011df4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011df8:	ec53 2b10 	vmov	r2, r3, d0
 8011dfc:	f7ee fbfc 	bl	80005f8 <__aeabi_dmul>
 8011e00:	4652      	mov	r2, sl
 8011e02:	465b      	mov	r3, fp
 8011e04:	f7ee fa42 	bl	800028c <__adddf3>
 8011e08:	460b      	mov	r3, r1
 8011e0a:	4952      	ldr	r1, [pc, #328]	; (8011f54 <_strtod_l+0xb0c>)
 8011e0c:	4a56      	ldr	r2, [pc, #344]	; (8011f68 <_strtod_l+0xb20>)
 8011e0e:	4019      	ands	r1, r3
 8011e10:	4291      	cmp	r1, r2
 8011e12:	4682      	mov	sl, r0
 8011e14:	d95b      	bls.n	8011ece <_strtod_l+0xa86>
 8011e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d103      	bne.n	8011e28 <_strtod_l+0x9e0>
 8011e20:	9b08      	ldr	r3, [sp, #32]
 8011e22:	3301      	adds	r3, #1
 8011e24:	f43f ad2e 	beq.w	8011884 <_strtod_l+0x43c>
 8011e28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011f58 <_strtod_l+0xb10>
 8011e2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011e30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011e32:	4648      	mov	r0, r9
 8011e34:	f001 fdb6 	bl	80139a4 <_Bfree>
 8011e38:	9905      	ldr	r1, [sp, #20]
 8011e3a:	4648      	mov	r0, r9
 8011e3c:	f001 fdb2 	bl	80139a4 <_Bfree>
 8011e40:	4641      	mov	r1, r8
 8011e42:	4648      	mov	r0, r9
 8011e44:	f001 fdae 	bl	80139a4 <_Bfree>
 8011e48:	4621      	mov	r1, r4
 8011e4a:	4648      	mov	r0, r9
 8011e4c:	f001 fdaa 	bl	80139a4 <_Bfree>
 8011e50:	e619      	b.n	8011a86 <_strtod_l+0x63e>
 8011e52:	f1ba 0f00 	cmp.w	sl, #0
 8011e56:	d11a      	bne.n	8011e8e <_strtod_l+0xa46>
 8011e58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e5c:	b9eb      	cbnz	r3, 8011e9a <_strtod_l+0xa52>
 8011e5e:	2200      	movs	r2, #0
 8011e60:	4b3f      	ldr	r3, [pc, #252]	; (8011f60 <_strtod_l+0xb18>)
 8011e62:	4630      	mov	r0, r6
 8011e64:	4639      	mov	r1, r7
 8011e66:	f7ee fe39 	bl	8000adc <__aeabi_dcmplt>
 8011e6a:	b9c8      	cbnz	r0, 8011ea0 <_strtod_l+0xa58>
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	4639      	mov	r1, r7
 8011e70:	2200      	movs	r2, #0
 8011e72:	4b3e      	ldr	r3, [pc, #248]	; (8011f6c <_strtod_l+0xb24>)
 8011e74:	f7ee fbc0 	bl	80005f8 <__aeabi_dmul>
 8011e78:	4606      	mov	r6, r0
 8011e7a:	460f      	mov	r7, r1
 8011e7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011e80:	9618      	str	r6, [sp, #96]	; 0x60
 8011e82:	9319      	str	r3, [sp, #100]	; 0x64
 8011e84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011e88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011e8c:	e79c      	b.n	8011dc8 <_strtod_l+0x980>
 8011e8e:	f1ba 0f01 	cmp.w	sl, #1
 8011e92:	d102      	bne.n	8011e9a <_strtod_l+0xa52>
 8011e94:	2d00      	cmp	r5, #0
 8011e96:	f43f ad8e 	beq.w	80119b6 <_strtod_l+0x56e>
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	4b34      	ldr	r3, [pc, #208]	; (8011f70 <_strtod_l+0xb28>)
 8011e9e:	e78f      	b.n	8011dc0 <_strtod_l+0x978>
 8011ea0:	2600      	movs	r6, #0
 8011ea2:	4f32      	ldr	r7, [pc, #200]	; (8011f6c <_strtod_l+0xb24>)
 8011ea4:	e7ea      	b.n	8011e7c <_strtod_l+0xa34>
 8011ea6:	4b31      	ldr	r3, [pc, #196]	; (8011f6c <_strtod_l+0xb24>)
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	4639      	mov	r1, r7
 8011eac:	2200      	movs	r2, #0
 8011eae:	f7ee fba3 	bl	80005f8 <__aeabi_dmul>
 8011eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011eb4:	4606      	mov	r6, r0
 8011eb6:	460f      	mov	r7, r1
 8011eb8:	b933      	cbnz	r3, 8011ec8 <_strtod_l+0xa80>
 8011eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ebe:	9010      	str	r0, [sp, #64]	; 0x40
 8011ec0:	9311      	str	r3, [sp, #68]	; 0x44
 8011ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011ec6:	e7df      	b.n	8011e88 <_strtod_l+0xa40>
 8011ec8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011ecc:	e7f9      	b.n	8011ec2 <_strtod_l+0xa7a>
 8011ece:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011ed2:	9b04      	ldr	r3, [sp, #16]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1ab      	bne.n	8011e30 <_strtod_l+0x9e8>
 8011ed8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011edc:	0d1b      	lsrs	r3, r3, #20
 8011ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ee0:	051b      	lsls	r3, r3, #20
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	465d      	mov	r5, fp
 8011ee6:	d1a3      	bne.n	8011e30 <_strtod_l+0x9e8>
 8011ee8:	4639      	mov	r1, r7
 8011eea:	4630      	mov	r0, r6
 8011eec:	f7ee fe34 	bl	8000b58 <__aeabi_d2iz>
 8011ef0:	f7ee fb18 	bl	8000524 <__aeabi_i2d>
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	4639      	mov	r1, r7
 8011efa:	4630      	mov	r0, r6
 8011efc:	f7ee f9c4 	bl	8000288 <__aeabi_dsub>
 8011f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f02:	4606      	mov	r6, r0
 8011f04:	460f      	mov	r7, r1
 8011f06:	b933      	cbnz	r3, 8011f16 <_strtod_l+0xace>
 8011f08:	f1ba 0f00 	cmp.w	sl, #0
 8011f0c:	d103      	bne.n	8011f16 <_strtod_l+0xace>
 8011f0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011f12:	2d00      	cmp	r5, #0
 8011f14:	d06d      	beq.n	8011ff2 <_strtod_l+0xbaa>
 8011f16:	a30a      	add	r3, pc, #40	; (adr r3, 8011f40 <_strtod_l+0xaf8>)
 8011f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	4639      	mov	r1, r7
 8011f20:	f7ee fddc 	bl	8000adc <__aeabi_dcmplt>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	f47f acb8 	bne.w	801189a <_strtod_l+0x452>
 8011f2a:	a307      	add	r3, pc, #28	; (adr r3, 8011f48 <_strtod_l+0xb00>)
 8011f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f30:	4630      	mov	r0, r6
 8011f32:	4639      	mov	r1, r7
 8011f34:	f7ee fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	f43f af79 	beq.w	8011e30 <_strtod_l+0x9e8>
 8011f3e:	e4ac      	b.n	801189a <_strtod_l+0x452>
 8011f40:	94a03595 	.word	0x94a03595
 8011f44:	3fdfffff 	.word	0x3fdfffff
 8011f48:	35afe535 	.word	0x35afe535
 8011f4c:	3fe00000 	.word	0x3fe00000
 8011f50:	000fffff 	.word	0x000fffff
 8011f54:	7ff00000 	.word	0x7ff00000
 8011f58:	7fefffff 	.word	0x7fefffff
 8011f5c:	39500000 	.word	0x39500000
 8011f60:	3ff00000 	.word	0x3ff00000
 8011f64:	7fe00000 	.word	0x7fe00000
 8011f68:	7c9fffff 	.word	0x7c9fffff
 8011f6c:	3fe00000 	.word	0x3fe00000
 8011f70:	bff00000 	.word	0xbff00000
 8011f74:	9b04      	ldr	r3, [sp, #16]
 8011f76:	b333      	cbz	r3, 8011fc6 <_strtod_l+0xb7e>
 8011f78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011f7e:	d822      	bhi.n	8011fc6 <_strtod_l+0xb7e>
 8011f80:	a327      	add	r3, pc, #156	; (adr r3, 8012020 <_strtod_l+0xbd8>)
 8011f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f86:	4630      	mov	r0, r6
 8011f88:	4639      	mov	r1, r7
 8011f8a:	f7ee fdb1 	bl	8000af0 <__aeabi_dcmple>
 8011f8e:	b1a0      	cbz	r0, 8011fba <_strtod_l+0xb72>
 8011f90:	4639      	mov	r1, r7
 8011f92:	4630      	mov	r0, r6
 8011f94:	f7ee fe08 	bl	8000ba8 <__aeabi_d2uiz>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	bf08      	it	eq
 8011f9c:	2001      	moveq	r0, #1
 8011f9e:	f7ee fab1 	bl	8000504 <__aeabi_ui2d>
 8011fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fa4:	4606      	mov	r6, r0
 8011fa6:	460f      	mov	r7, r1
 8011fa8:	bb03      	cbnz	r3, 8011fec <_strtod_l+0xba4>
 8011faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fae:	9012      	str	r0, [sp, #72]	; 0x48
 8011fb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011fb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011fb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011fc2:	1a9b      	subs	r3, r3, r2
 8011fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011fca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011fce:	f001 ff81 	bl	8013ed4 <__ulp>
 8011fd2:	4650      	mov	r0, sl
 8011fd4:	ec53 2b10 	vmov	r2, r3, d0
 8011fd8:	4659      	mov	r1, fp
 8011fda:	f7ee fb0d 	bl	80005f8 <__aeabi_dmul>
 8011fde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011fe2:	f7ee f953 	bl	800028c <__adddf3>
 8011fe6:	4682      	mov	sl, r0
 8011fe8:	468b      	mov	fp, r1
 8011fea:	e772      	b.n	8011ed2 <_strtod_l+0xa8a>
 8011fec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8011ff0:	e7df      	b.n	8011fb2 <_strtod_l+0xb6a>
 8011ff2:	a30d      	add	r3, pc, #52	; (adr r3, 8012028 <_strtod_l+0xbe0>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	f7ee fd70 	bl	8000adc <__aeabi_dcmplt>
 8011ffc:	e79c      	b.n	8011f38 <_strtod_l+0xaf0>
 8011ffe:	2300      	movs	r3, #0
 8012000:	930d      	str	r3, [sp, #52]	; 0x34
 8012002:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012006:	6013      	str	r3, [r2, #0]
 8012008:	f7ff ba61 	b.w	80114ce <_strtod_l+0x86>
 801200c:	2b65      	cmp	r3, #101	; 0x65
 801200e:	f04f 0200 	mov.w	r2, #0
 8012012:	f43f ab4e 	beq.w	80116b2 <_strtod_l+0x26a>
 8012016:	2101      	movs	r1, #1
 8012018:	4614      	mov	r4, r2
 801201a:	9104      	str	r1, [sp, #16]
 801201c:	f7ff bacb 	b.w	80115b6 <_strtod_l+0x16e>
 8012020:	ffc00000 	.word	0xffc00000
 8012024:	41dfffff 	.word	0x41dfffff
 8012028:	94a03595 	.word	0x94a03595
 801202c:	3fcfffff 	.word	0x3fcfffff

08012030 <strtof>:
 8012030:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012034:	4e24      	ldr	r6, [pc, #144]	; (80120c8 <strtof+0x98>)
 8012036:	4a25      	ldr	r2, [pc, #148]	; (80120cc <strtof+0x9c>)
 8012038:	6834      	ldr	r4, [r6, #0]
 801203a:	6a23      	ldr	r3, [r4, #32]
 801203c:	ed2d 8b02 	vpush	{d8}
 8012040:	2b00      	cmp	r3, #0
 8012042:	bf08      	it	eq
 8012044:	4613      	moveq	r3, r2
 8012046:	460a      	mov	r2, r1
 8012048:	4601      	mov	r1, r0
 801204a:	4620      	mov	r0, r4
 801204c:	f7ff f9fc 	bl	8011448 <_strtod_l>
 8012050:	ec55 4b10 	vmov	r4, r5, d0
 8012054:	ee10 2a10 	vmov	r2, s0
 8012058:	462b      	mov	r3, r5
 801205a:	ee10 0a10 	vmov	r0, s0
 801205e:	4629      	mov	r1, r5
 8012060:	f7ee fd64 	bl	8000b2c <__aeabi_dcmpun>
 8012064:	b130      	cbz	r0, 8012074 <strtof+0x44>
 8012066:	ecbd 8b02 	vpop	{d8}
 801206a:	2000      	movs	r0, #0
 801206c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8012070:	f002 bbbc 	b.w	80147ec <nanf>
 8012074:	4620      	mov	r0, r4
 8012076:	4629      	mov	r1, r5
 8012078:	f7ee fdb6 	bl	8000be8 <__aeabi_d2f>
 801207c:	ee08 0a10 	vmov	s16, r0
 8012080:	eddf 7a13 	vldr	s15, [pc, #76]	; 80120d0 <strtof+0xa0>
 8012084:	eeb0 7ac8 	vabs.f32	s14, s16
 8012088:	eeb4 7a67 	vcmp.f32	s14, s15
 801208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012090:	dd14      	ble.n	80120bc <strtof+0x8c>
 8012092:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8012096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801209a:	4b0e      	ldr	r3, [pc, #56]	; (80120d4 <strtof+0xa4>)
 801209c:	4620      	mov	r0, r4
 801209e:	4649      	mov	r1, r9
 80120a0:	f7ee fd44 	bl	8000b2c <__aeabi_dcmpun>
 80120a4:	b938      	cbnz	r0, 80120b6 <strtof+0x86>
 80120a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120aa:	4b0a      	ldr	r3, [pc, #40]	; (80120d4 <strtof+0xa4>)
 80120ac:	4620      	mov	r0, r4
 80120ae:	4649      	mov	r1, r9
 80120b0:	f7ee fd1e 	bl	8000af0 <__aeabi_dcmple>
 80120b4:	b110      	cbz	r0, 80120bc <strtof+0x8c>
 80120b6:	6833      	ldr	r3, [r6, #0]
 80120b8:	2222      	movs	r2, #34	; 0x22
 80120ba:	601a      	str	r2, [r3, #0]
 80120bc:	eeb0 0a48 	vmov.f32	s0, s16
 80120c0:	ecbd 8b02 	vpop	{d8}
 80120c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80120c8:	20000178 	.word	0x20000178
 80120cc:	200001dc 	.word	0x200001dc
 80120d0:	7f7fffff 	.word	0x7f7fffff
 80120d4:	7fefffff 	.word	0x7fefffff

080120d8 <__swbuf_r>:
 80120d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120da:	460e      	mov	r6, r1
 80120dc:	4614      	mov	r4, r2
 80120de:	4605      	mov	r5, r0
 80120e0:	b118      	cbz	r0, 80120ea <__swbuf_r+0x12>
 80120e2:	6983      	ldr	r3, [r0, #24]
 80120e4:	b90b      	cbnz	r3, 80120ea <__swbuf_r+0x12>
 80120e6:	f000 ffeb 	bl	80130c0 <__sinit>
 80120ea:	4b21      	ldr	r3, [pc, #132]	; (8012170 <__swbuf_r+0x98>)
 80120ec:	429c      	cmp	r4, r3
 80120ee:	d12a      	bne.n	8012146 <__swbuf_r+0x6e>
 80120f0:	686c      	ldr	r4, [r5, #4]
 80120f2:	69a3      	ldr	r3, [r4, #24]
 80120f4:	60a3      	str	r3, [r4, #8]
 80120f6:	89a3      	ldrh	r3, [r4, #12]
 80120f8:	071a      	lsls	r2, r3, #28
 80120fa:	d52e      	bpl.n	801215a <__swbuf_r+0x82>
 80120fc:	6923      	ldr	r3, [r4, #16]
 80120fe:	b363      	cbz	r3, 801215a <__swbuf_r+0x82>
 8012100:	6923      	ldr	r3, [r4, #16]
 8012102:	6820      	ldr	r0, [r4, #0]
 8012104:	1ac0      	subs	r0, r0, r3
 8012106:	6963      	ldr	r3, [r4, #20]
 8012108:	b2f6      	uxtb	r6, r6
 801210a:	4283      	cmp	r3, r0
 801210c:	4637      	mov	r7, r6
 801210e:	dc04      	bgt.n	801211a <__swbuf_r+0x42>
 8012110:	4621      	mov	r1, r4
 8012112:	4628      	mov	r0, r5
 8012114:	f000 ff6a 	bl	8012fec <_fflush_r>
 8012118:	bb28      	cbnz	r0, 8012166 <__swbuf_r+0x8e>
 801211a:	68a3      	ldr	r3, [r4, #8]
 801211c:	3b01      	subs	r3, #1
 801211e:	60a3      	str	r3, [r4, #8]
 8012120:	6823      	ldr	r3, [r4, #0]
 8012122:	1c5a      	adds	r2, r3, #1
 8012124:	6022      	str	r2, [r4, #0]
 8012126:	701e      	strb	r6, [r3, #0]
 8012128:	6963      	ldr	r3, [r4, #20]
 801212a:	3001      	adds	r0, #1
 801212c:	4283      	cmp	r3, r0
 801212e:	d004      	beq.n	801213a <__swbuf_r+0x62>
 8012130:	89a3      	ldrh	r3, [r4, #12]
 8012132:	07db      	lsls	r3, r3, #31
 8012134:	d519      	bpl.n	801216a <__swbuf_r+0x92>
 8012136:	2e0a      	cmp	r6, #10
 8012138:	d117      	bne.n	801216a <__swbuf_r+0x92>
 801213a:	4621      	mov	r1, r4
 801213c:	4628      	mov	r0, r5
 801213e:	f000 ff55 	bl	8012fec <_fflush_r>
 8012142:	b190      	cbz	r0, 801216a <__swbuf_r+0x92>
 8012144:	e00f      	b.n	8012166 <__swbuf_r+0x8e>
 8012146:	4b0b      	ldr	r3, [pc, #44]	; (8012174 <__swbuf_r+0x9c>)
 8012148:	429c      	cmp	r4, r3
 801214a:	d101      	bne.n	8012150 <__swbuf_r+0x78>
 801214c:	68ac      	ldr	r4, [r5, #8]
 801214e:	e7d0      	b.n	80120f2 <__swbuf_r+0x1a>
 8012150:	4b09      	ldr	r3, [pc, #36]	; (8012178 <__swbuf_r+0xa0>)
 8012152:	429c      	cmp	r4, r3
 8012154:	bf08      	it	eq
 8012156:	68ec      	ldreq	r4, [r5, #12]
 8012158:	e7cb      	b.n	80120f2 <__swbuf_r+0x1a>
 801215a:	4621      	mov	r1, r4
 801215c:	4628      	mov	r0, r5
 801215e:	f000 f80d 	bl	801217c <__swsetup_r>
 8012162:	2800      	cmp	r0, #0
 8012164:	d0cc      	beq.n	8012100 <__swbuf_r+0x28>
 8012166:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801216a:	4638      	mov	r0, r7
 801216c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801216e:	bf00      	nop
 8012170:	08016bf0 	.word	0x08016bf0
 8012174:	08016c10 	.word	0x08016c10
 8012178:	08016bd0 	.word	0x08016bd0

0801217c <__swsetup_r>:
 801217c:	4b32      	ldr	r3, [pc, #200]	; (8012248 <__swsetup_r+0xcc>)
 801217e:	b570      	push	{r4, r5, r6, lr}
 8012180:	681d      	ldr	r5, [r3, #0]
 8012182:	4606      	mov	r6, r0
 8012184:	460c      	mov	r4, r1
 8012186:	b125      	cbz	r5, 8012192 <__swsetup_r+0x16>
 8012188:	69ab      	ldr	r3, [r5, #24]
 801218a:	b913      	cbnz	r3, 8012192 <__swsetup_r+0x16>
 801218c:	4628      	mov	r0, r5
 801218e:	f000 ff97 	bl	80130c0 <__sinit>
 8012192:	4b2e      	ldr	r3, [pc, #184]	; (801224c <__swsetup_r+0xd0>)
 8012194:	429c      	cmp	r4, r3
 8012196:	d10f      	bne.n	80121b8 <__swsetup_r+0x3c>
 8012198:	686c      	ldr	r4, [r5, #4]
 801219a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801219e:	b29a      	uxth	r2, r3
 80121a0:	0715      	lsls	r5, r2, #28
 80121a2:	d42c      	bmi.n	80121fe <__swsetup_r+0x82>
 80121a4:	06d0      	lsls	r0, r2, #27
 80121a6:	d411      	bmi.n	80121cc <__swsetup_r+0x50>
 80121a8:	2209      	movs	r2, #9
 80121aa:	6032      	str	r2, [r6, #0]
 80121ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121b0:	81a3      	strh	r3, [r4, #12]
 80121b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121b6:	e03e      	b.n	8012236 <__swsetup_r+0xba>
 80121b8:	4b25      	ldr	r3, [pc, #148]	; (8012250 <__swsetup_r+0xd4>)
 80121ba:	429c      	cmp	r4, r3
 80121bc:	d101      	bne.n	80121c2 <__swsetup_r+0x46>
 80121be:	68ac      	ldr	r4, [r5, #8]
 80121c0:	e7eb      	b.n	801219a <__swsetup_r+0x1e>
 80121c2:	4b24      	ldr	r3, [pc, #144]	; (8012254 <__swsetup_r+0xd8>)
 80121c4:	429c      	cmp	r4, r3
 80121c6:	bf08      	it	eq
 80121c8:	68ec      	ldreq	r4, [r5, #12]
 80121ca:	e7e6      	b.n	801219a <__swsetup_r+0x1e>
 80121cc:	0751      	lsls	r1, r2, #29
 80121ce:	d512      	bpl.n	80121f6 <__swsetup_r+0x7a>
 80121d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121d2:	b141      	cbz	r1, 80121e6 <__swsetup_r+0x6a>
 80121d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121d8:	4299      	cmp	r1, r3
 80121da:	d002      	beq.n	80121e2 <__swsetup_r+0x66>
 80121dc:	4630      	mov	r0, r6
 80121de:	f001 ffbb 	bl	8014158 <_free_r>
 80121e2:	2300      	movs	r3, #0
 80121e4:	6363      	str	r3, [r4, #52]	; 0x34
 80121e6:	89a3      	ldrh	r3, [r4, #12]
 80121e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80121ec:	81a3      	strh	r3, [r4, #12]
 80121ee:	2300      	movs	r3, #0
 80121f0:	6063      	str	r3, [r4, #4]
 80121f2:	6923      	ldr	r3, [r4, #16]
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	f043 0308 	orr.w	r3, r3, #8
 80121fc:	81a3      	strh	r3, [r4, #12]
 80121fe:	6923      	ldr	r3, [r4, #16]
 8012200:	b94b      	cbnz	r3, 8012216 <__swsetup_r+0x9a>
 8012202:	89a3      	ldrh	r3, [r4, #12]
 8012204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801220c:	d003      	beq.n	8012216 <__swsetup_r+0x9a>
 801220e:	4621      	mov	r1, r4
 8012210:	4630      	mov	r0, r6
 8012212:	f001 fb39 	bl	8013888 <__smakebuf_r>
 8012216:	89a2      	ldrh	r2, [r4, #12]
 8012218:	f012 0301 	ands.w	r3, r2, #1
 801221c:	d00c      	beq.n	8012238 <__swsetup_r+0xbc>
 801221e:	2300      	movs	r3, #0
 8012220:	60a3      	str	r3, [r4, #8]
 8012222:	6963      	ldr	r3, [r4, #20]
 8012224:	425b      	negs	r3, r3
 8012226:	61a3      	str	r3, [r4, #24]
 8012228:	6923      	ldr	r3, [r4, #16]
 801222a:	b953      	cbnz	r3, 8012242 <__swsetup_r+0xc6>
 801222c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012230:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012234:	d1ba      	bne.n	80121ac <__swsetup_r+0x30>
 8012236:	bd70      	pop	{r4, r5, r6, pc}
 8012238:	0792      	lsls	r2, r2, #30
 801223a:	bf58      	it	pl
 801223c:	6963      	ldrpl	r3, [r4, #20]
 801223e:	60a3      	str	r3, [r4, #8]
 8012240:	e7f2      	b.n	8012228 <__swsetup_r+0xac>
 8012242:	2000      	movs	r0, #0
 8012244:	e7f7      	b.n	8012236 <__swsetup_r+0xba>
 8012246:	bf00      	nop
 8012248:	20000178 	.word	0x20000178
 801224c:	08016bf0 	.word	0x08016bf0
 8012250:	08016c10 	.word	0x08016c10
 8012254:	08016bd0 	.word	0x08016bd0

08012258 <quorem>:
 8012258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225c:	6903      	ldr	r3, [r0, #16]
 801225e:	690c      	ldr	r4, [r1, #16]
 8012260:	42a3      	cmp	r3, r4
 8012262:	4680      	mov	r8, r0
 8012264:	f2c0 8082 	blt.w	801236c <quorem+0x114>
 8012268:	3c01      	subs	r4, #1
 801226a:	f101 0714 	add.w	r7, r1, #20
 801226e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012272:	f100 0614 	add.w	r6, r0, #20
 8012276:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801227a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801227e:	eb06 030c 	add.w	r3, r6, ip
 8012282:	3501      	adds	r5, #1
 8012284:	eb07 090c 	add.w	r9, r7, ip
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	fbb0 f5f5 	udiv	r5, r0, r5
 801228e:	b395      	cbz	r5, 80122f6 <quorem+0x9e>
 8012290:	f04f 0a00 	mov.w	sl, #0
 8012294:	4638      	mov	r0, r7
 8012296:	46b6      	mov	lr, r6
 8012298:	46d3      	mov	fp, sl
 801229a:	f850 2b04 	ldr.w	r2, [r0], #4
 801229e:	b293      	uxth	r3, r2
 80122a0:	fb05 a303 	mla	r3, r5, r3, sl
 80122a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	ebab 0303 	sub.w	r3, fp, r3
 80122ae:	0c12      	lsrs	r2, r2, #16
 80122b0:	f8de b000 	ldr.w	fp, [lr]
 80122b4:	fb05 a202 	mla	r2, r5, r2, sl
 80122b8:	fa13 f38b 	uxtah	r3, r3, fp
 80122bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80122c0:	fa1f fb82 	uxth.w	fp, r2
 80122c4:	f8de 2000 	ldr.w	r2, [lr]
 80122c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80122cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122d6:	4581      	cmp	r9, r0
 80122d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80122dc:	f84e 3b04 	str.w	r3, [lr], #4
 80122e0:	d2db      	bcs.n	801229a <quorem+0x42>
 80122e2:	f856 300c 	ldr.w	r3, [r6, ip]
 80122e6:	b933      	cbnz	r3, 80122f6 <quorem+0x9e>
 80122e8:	9b01      	ldr	r3, [sp, #4]
 80122ea:	3b04      	subs	r3, #4
 80122ec:	429e      	cmp	r6, r3
 80122ee:	461a      	mov	r2, r3
 80122f0:	d330      	bcc.n	8012354 <quorem+0xfc>
 80122f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80122f6:	4640      	mov	r0, r8
 80122f8:	f001 fd74 	bl	8013de4 <__mcmp>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	db25      	blt.n	801234c <quorem+0xf4>
 8012300:	3501      	adds	r5, #1
 8012302:	4630      	mov	r0, r6
 8012304:	f04f 0c00 	mov.w	ip, #0
 8012308:	f857 2b04 	ldr.w	r2, [r7], #4
 801230c:	f8d0 e000 	ldr.w	lr, [r0]
 8012310:	b293      	uxth	r3, r2
 8012312:	ebac 0303 	sub.w	r3, ip, r3
 8012316:	0c12      	lsrs	r2, r2, #16
 8012318:	fa13 f38e 	uxtah	r3, r3, lr
 801231c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012324:	b29b      	uxth	r3, r3
 8012326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801232a:	45b9      	cmp	r9, r7
 801232c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012330:	f840 3b04 	str.w	r3, [r0], #4
 8012334:	d2e8      	bcs.n	8012308 <quorem+0xb0>
 8012336:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801233a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801233e:	b92a      	cbnz	r2, 801234c <quorem+0xf4>
 8012340:	3b04      	subs	r3, #4
 8012342:	429e      	cmp	r6, r3
 8012344:	461a      	mov	r2, r3
 8012346:	d30b      	bcc.n	8012360 <quorem+0x108>
 8012348:	f8c8 4010 	str.w	r4, [r8, #16]
 801234c:	4628      	mov	r0, r5
 801234e:	b003      	add	sp, #12
 8012350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012354:	6812      	ldr	r2, [r2, #0]
 8012356:	3b04      	subs	r3, #4
 8012358:	2a00      	cmp	r2, #0
 801235a:	d1ca      	bne.n	80122f2 <quorem+0x9a>
 801235c:	3c01      	subs	r4, #1
 801235e:	e7c5      	b.n	80122ec <quorem+0x94>
 8012360:	6812      	ldr	r2, [r2, #0]
 8012362:	3b04      	subs	r3, #4
 8012364:	2a00      	cmp	r2, #0
 8012366:	d1ef      	bne.n	8012348 <quorem+0xf0>
 8012368:	3c01      	subs	r4, #1
 801236a:	e7ea      	b.n	8012342 <quorem+0xea>
 801236c:	2000      	movs	r0, #0
 801236e:	e7ee      	b.n	801234e <quorem+0xf6>

08012370 <_dtoa_r>:
 8012370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012374:	ec57 6b10 	vmov	r6, r7, d0
 8012378:	b097      	sub	sp, #92	; 0x5c
 801237a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801237c:	9106      	str	r1, [sp, #24]
 801237e:	4604      	mov	r4, r0
 8012380:	920b      	str	r2, [sp, #44]	; 0x2c
 8012382:	9312      	str	r3, [sp, #72]	; 0x48
 8012384:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012388:	e9cd 6700 	strd	r6, r7, [sp]
 801238c:	b93d      	cbnz	r5, 801239e <_dtoa_r+0x2e>
 801238e:	2010      	movs	r0, #16
 8012390:	f001 faba 	bl	8013908 <malloc>
 8012394:	6260      	str	r0, [r4, #36]	; 0x24
 8012396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801239a:	6005      	str	r5, [r0, #0]
 801239c:	60c5      	str	r5, [r0, #12]
 801239e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123a0:	6819      	ldr	r1, [r3, #0]
 80123a2:	b151      	cbz	r1, 80123ba <_dtoa_r+0x4a>
 80123a4:	685a      	ldr	r2, [r3, #4]
 80123a6:	604a      	str	r2, [r1, #4]
 80123a8:	2301      	movs	r3, #1
 80123aa:	4093      	lsls	r3, r2
 80123ac:	608b      	str	r3, [r1, #8]
 80123ae:	4620      	mov	r0, r4
 80123b0:	f001 faf8 	bl	80139a4 <_Bfree>
 80123b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123b6:	2200      	movs	r2, #0
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	1e3b      	subs	r3, r7, #0
 80123bc:	bfbb      	ittet	lt
 80123be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80123c2:	9301      	strlt	r3, [sp, #4]
 80123c4:	2300      	movge	r3, #0
 80123c6:	2201      	movlt	r2, #1
 80123c8:	bfac      	ite	ge
 80123ca:	f8c8 3000 	strge.w	r3, [r8]
 80123ce:	f8c8 2000 	strlt.w	r2, [r8]
 80123d2:	4baf      	ldr	r3, [pc, #700]	; (8012690 <_dtoa_r+0x320>)
 80123d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80123d8:	ea33 0308 	bics.w	r3, r3, r8
 80123dc:	d114      	bne.n	8012408 <_dtoa_r+0x98>
 80123de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80123e4:	6013      	str	r3, [r2, #0]
 80123e6:	9b00      	ldr	r3, [sp, #0]
 80123e8:	b923      	cbnz	r3, 80123f4 <_dtoa_r+0x84>
 80123ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80123ee:	2800      	cmp	r0, #0
 80123f0:	f000 8542 	beq.w	8012e78 <_dtoa_r+0xb08>
 80123f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80126a4 <_dtoa_r+0x334>
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	f000 8544 	beq.w	8012e88 <_dtoa_r+0xb18>
 8012400:	f10b 0303 	add.w	r3, fp, #3
 8012404:	f000 bd3e 	b.w	8012e84 <_dtoa_r+0xb14>
 8012408:	e9dd 6700 	ldrd	r6, r7, [sp]
 801240c:	2200      	movs	r2, #0
 801240e:	2300      	movs	r3, #0
 8012410:	4630      	mov	r0, r6
 8012412:	4639      	mov	r1, r7
 8012414:	f7ee fb58 	bl	8000ac8 <__aeabi_dcmpeq>
 8012418:	4681      	mov	r9, r0
 801241a:	b168      	cbz	r0, 8012438 <_dtoa_r+0xc8>
 801241c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801241e:	2301      	movs	r3, #1
 8012420:	6013      	str	r3, [r2, #0]
 8012422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012424:	2b00      	cmp	r3, #0
 8012426:	f000 8524 	beq.w	8012e72 <_dtoa_r+0xb02>
 801242a:	4b9a      	ldr	r3, [pc, #616]	; (8012694 <_dtoa_r+0x324>)
 801242c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801242e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8012432:	6013      	str	r3, [r2, #0]
 8012434:	f000 bd28 	b.w	8012e88 <_dtoa_r+0xb18>
 8012438:	aa14      	add	r2, sp, #80	; 0x50
 801243a:	a915      	add	r1, sp, #84	; 0x54
 801243c:	ec47 6b10 	vmov	d0, r6, r7
 8012440:	4620      	mov	r0, r4
 8012442:	f001 fdbd 	bl	8013fc0 <__d2b>
 8012446:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801244a:	9004      	str	r0, [sp, #16]
 801244c:	2d00      	cmp	r5, #0
 801244e:	d07c      	beq.n	801254a <_dtoa_r+0x1da>
 8012450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012454:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012458:	46b2      	mov	sl, r6
 801245a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801245e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012462:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012466:	2200      	movs	r2, #0
 8012468:	4b8b      	ldr	r3, [pc, #556]	; (8012698 <_dtoa_r+0x328>)
 801246a:	4650      	mov	r0, sl
 801246c:	4659      	mov	r1, fp
 801246e:	f7ed ff0b 	bl	8000288 <__aeabi_dsub>
 8012472:	a381      	add	r3, pc, #516	; (adr r3, 8012678 <_dtoa_r+0x308>)
 8012474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012478:	f7ee f8be 	bl	80005f8 <__aeabi_dmul>
 801247c:	a380      	add	r3, pc, #512	; (adr r3, 8012680 <_dtoa_r+0x310>)
 801247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012482:	f7ed ff03 	bl	800028c <__adddf3>
 8012486:	4606      	mov	r6, r0
 8012488:	4628      	mov	r0, r5
 801248a:	460f      	mov	r7, r1
 801248c:	f7ee f84a 	bl	8000524 <__aeabi_i2d>
 8012490:	a37d      	add	r3, pc, #500	; (adr r3, 8012688 <_dtoa_r+0x318>)
 8012492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012496:	f7ee f8af 	bl	80005f8 <__aeabi_dmul>
 801249a:	4602      	mov	r2, r0
 801249c:	460b      	mov	r3, r1
 801249e:	4630      	mov	r0, r6
 80124a0:	4639      	mov	r1, r7
 80124a2:	f7ed fef3 	bl	800028c <__adddf3>
 80124a6:	4606      	mov	r6, r0
 80124a8:	460f      	mov	r7, r1
 80124aa:	f7ee fb55 	bl	8000b58 <__aeabi_d2iz>
 80124ae:	2200      	movs	r2, #0
 80124b0:	4682      	mov	sl, r0
 80124b2:	2300      	movs	r3, #0
 80124b4:	4630      	mov	r0, r6
 80124b6:	4639      	mov	r1, r7
 80124b8:	f7ee fb10 	bl	8000adc <__aeabi_dcmplt>
 80124bc:	b148      	cbz	r0, 80124d2 <_dtoa_r+0x162>
 80124be:	4650      	mov	r0, sl
 80124c0:	f7ee f830 	bl	8000524 <__aeabi_i2d>
 80124c4:	4632      	mov	r2, r6
 80124c6:	463b      	mov	r3, r7
 80124c8:	f7ee fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80124cc:	b908      	cbnz	r0, 80124d2 <_dtoa_r+0x162>
 80124ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80124d2:	f1ba 0f16 	cmp.w	sl, #22
 80124d6:	d859      	bhi.n	801258c <_dtoa_r+0x21c>
 80124d8:	4970      	ldr	r1, [pc, #448]	; (801269c <_dtoa_r+0x32c>)
 80124da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80124de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124e6:	f7ee fb17 	bl	8000b18 <__aeabi_dcmpgt>
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d050      	beq.n	8012590 <_dtoa_r+0x220>
 80124ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80124f2:	2300      	movs	r3, #0
 80124f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80124f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124f8:	1b5d      	subs	r5, r3, r5
 80124fa:	f1b5 0801 	subs.w	r8, r5, #1
 80124fe:	bf49      	itett	mi
 8012500:	f1c5 0301 	rsbmi	r3, r5, #1
 8012504:	2300      	movpl	r3, #0
 8012506:	9305      	strmi	r3, [sp, #20]
 8012508:	f04f 0800 	movmi.w	r8, #0
 801250c:	bf58      	it	pl
 801250e:	9305      	strpl	r3, [sp, #20]
 8012510:	f1ba 0f00 	cmp.w	sl, #0
 8012514:	db3e      	blt.n	8012594 <_dtoa_r+0x224>
 8012516:	2300      	movs	r3, #0
 8012518:	44d0      	add	r8, sl
 801251a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801251e:	9307      	str	r3, [sp, #28]
 8012520:	9b06      	ldr	r3, [sp, #24]
 8012522:	2b09      	cmp	r3, #9
 8012524:	f200 8090 	bhi.w	8012648 <_dtoa_r+0x2d8>
 8012528:	2b05      	cmp	r3, #5
 801252a:	bfc4      	itt	gt
 801252c:	3b04      	subgt	r3, #4
 801252e:	9306      	strgt	r3, [sp, #24]
 8012530:	9b06      	ldr	r3, [sp, #24]
 8012532:	f1a3 0302 	sub.w	r3, r3, #2
 8012536:	bfcc      	ite	gt
 8012538:	2500      	movgt	r5, #0
 801253a:	2501      	movle	r5, #1
 801253c:	2b03      	cmp	r3, #3
 801253e:	f200 808f 	bhi.w	8012660 <_dtoa_r+0x2f0>
 8012542:	e8df f003 	tbb	[pc, r3]
 8012546:	7f7d      	.short	0x7f7d
 8012548:	7131      	.short	0x7131
 801254a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801254e:	441d      	add	r5, r3
 8012550:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012554:	2820      	cmp	r0, #32
 8012556:	dd13      	ble.n	8012580 <_dtoa_r+0x210>
 8012558:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801255c:	9b00      	ldr	r3, [sp, #0]
 801255e:	fa08 f800 	lsl.w	r8, r8, r0
 8012562:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012566:	fa23 f000 	lsr.w	r0, r3, r0
 801256a:	ea48 0000 	orr.w	r0, r8, r0
 801256e:	f7ed ffc9 	bl	8000504 <__aeabi_ui2d>
 8012572:	2301      	movs	r3, #1
 8012574:	4682      	mov	sl, r0
 8012576:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801257a:	3d01      	subs	r5, #1
 801257c:	9313      	str	r3, [sp, #76]	; 0x4c
 801257e:	e772      	b.n	8012466 <_dtoa_r+0xf6>
 8012580:	9b00      	ldr	r3, [sp, #0]
 8012582:	f1c0 0020 	rsb	r0, r0, #32
 8012586:	fa03 f000 	lsl.w	r0, r3, r0
 801258a:	e7f0      	b.n	801256e <_dtoa_r+0x1fe>
 801258c:	2301      	movs	r3, #1
 801258e:	e7b1      	b.n	80124f4 <_dtoa_r+0x184>
 8012590:	900f      	str	r0, [sp, #60]	; 0x3c
 8012592:	e7b0      	b.n	80124f6 <_dtoa_r+0x186>
 8012594:	9b05      	ldr	r3, [sp, #20]
 8012596:	eba3 030a 	sub.w	r3, r3, sl
 801259a:	9305      	str	r3, [sp, #20]
 801259c:	f1ca 0300 	rsb	r3, sl, #0
 80125a0:	9307      	str	r3, [sp, #28]
 80125a2:	2300      	movs	r3, #0
 80125a4:	930e      	str	r3, [sp, #56]	; 0x38
 80125a6:	e7bb      	b.n	8012520 <_dtoa_r+0x1b0>
 80125a8:	2301      	movs	r3, #1
 80125aa:	930a      	str	r3, [sp, #40]	; 0x28
 80125ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	dd59      	ble.n	8012666 <_dtoa_r+0x2f6>
 80125b2:	9302      	str	r3, [sp, #8]
 80125b4:	4699      	mov	r9, r3
 80125b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80125b8:	2200      	movs	r2, #0
 80125ba:	6072      	str	r2, [r6, #4]
 80125bc:	2204      	movs	r2, #4
 80125be:	f102 0014 	add.w	r0, r2, #20
 80125c2:	4298      	cmp	r0, r3
 80125c4:	6871      	ldr	r1, [r6, #4]
 80125c6:	d953      	bls.n	8012670 <_dtoa_r+0x300>
 80125c8:	4620      	mov	r0, r4
 80125ca:	f001 f9b7 	bl	801393c <_Balloc>
 80125ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125d0:	6030      	str	r0, [r6, #0]
 80125d2:	f1b9 0f0e 	cmp.w	r9, #14
 80125d6:	f8d3 b000 	ldr.w	fp, [r3]
 80125da:	f200 80e6 	bhi.w	80127aa <_dtoa_r+0x43a>
 80125de:	2d00      	cmp	r5, #0
 80125e0:	f000 80e3 	beq.w	80127aa <_dtoa_r+0x43a>
 80125e4:	ed9d 7b00 	vldr	d7, [sp]
 80125e8:	f1ba 0f00 	cmp.w	sl, #0
 80125ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80125f0:	dd74      	ble.n	80126dc <_dtoa_r+0x36c>
 80125f2:	4a2a      	ldr	r2, [pc, #168]	; (801269c <_dtoa_r+0x32c>)
 80125f4:	f00a 030f 	and.w	r3, sl, #15
 80125f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80125fc:	ed93 7b00 	vldr	d7, [r3]
 8012600:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012604:	06f0      	lsls	r0, r6, #27
 8012606:	ed8d 7b08 	vstr	d7, [sp, #32]
 801260a:	d565      	bpl.n	80126d8 <_dtoa_r+0x368>
 801260c:	4b24      	ldr	r3, [pc, #144]	; (80126a0 <_dtoa_r+0x330>)
 801260e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012612:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012616:	f7ee f919 	bl	800084c <__aeabi_ddiv>
 801261a:	e9cd 0100 	strd	r0, r1, [sp]
 801261e:	f006 060f 	and.w	r6, r6, #15
 8012622:	2503      	movs	r5, #3
 8012624:	4f1e      	ldr	r7, [pc, #120]	; (80126a0 <_dtoa_r+0x330>)
 8012626:	e04c      	b.n	80126c2 <_dtoa_r+0x352>
 8012628:	2301      	movs	r3, #1
 801262a:	930a      	str	r3, [sp, #40]	; 0x28
 801262c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801262e:	4453      	add	r3, sl
 8012630:	f103 0901 	add.w	r9, r3, #1
 8012634:	9302      	str	r3, [sp, #8]
 8012636:	464b      	mov	r3, r9
 8012638:	2b01      	cmp	r3, #1
 801263a:	bfb8      	it	lt
 801263c:	2301      	movlt	r3, #1
 801263e:	e7ba      	b.n	80125b6 <_dtoa_r+0x246>
 8012640:	2300      	movs	r3, #0
 8012642:	e7b2      	b.n	80125aa <_dtoa_r+0x23a>
 8012644:	2300      	movs	r3, #0
 8012646:	e7f0      	b.n	801262a <_dtoa_r+0x2ba>
 8012648:	2501      	movs	r5, #1
 801264a:	2300      	movs	r3, #0
 801264c:	9306      	str	r3, [sp, #24]
 801264e:	950a      	str	r5, [sp, #40]	; 0x28
 8012650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012654:	9302      	str	r3, [sp, #8]
 8012656:	4699      	mov	r9, r3
 8012658:	2200      	movs	r2, #0
 801265a:	2312      	movs	r3, #18
 801265c:	920b      	str	r2, [sp, #44]	; 0x2c
 801265e:	e7aa      	b.n	80125b6 <_dtoa_r+0x246>
 8012660:	2301      	movs	r3, #1
 8012662:	930a      	str	r3, [sp, #40]	; 0x28
 8012664:	e7f4      	b.n	8012650 <_dtoa_r+0x2e0>
 8012666:	2301      	movs	r3, #1
 8012668:	9302      	str	r3, [sp, #8]
 801266a:	4699      	mov	r9, r3
 801266c:	461a      	mov	r2, r3
 801266e:	e7f5      	b.n	801265c <_dtoa_r+0x2ec>
 8012670:	3101      	adds	r1, #1
 8012672:	6071      	str	r1, [r6, #4]
 8012674:	0052      	lsls	r2, r2, #1
 8012676:	e7a2      	b.n	80125be <_dtoa_r+0x24e>
 8012678:	636f4361 	.word	0x636f4361
 801267c:	3fd287a7 	.word	0x3fd287a7
 8012680:	8b60c8b3 	.word	0x8b60c8b3
 8012684:	3fc68a28 	.word	0x3fc68a28
 8012688:	509f79fb 	.word	0x509f79fb
 801268c:	3fd34413 	.word	0x3fd34413
 8012690:	7ff00000 	.word	0x7ff00000
 8012694:	08016b49 	.word	0x08016b49
 8012698:	3ff80000 	.word	0x3ff80000
 801269c:	08016c68 	.word	0x08016c68
 80126a0:	08016c40 	.word	0x08016c40
 80126a4:	08016bc9 	.word	0x08016bc9
 80126a8:	07f1      	lsls	r1, r6, #31
 80126aa:	d508      	bpl.n	80126be <_dtoa_r+0x34e>
 80126ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80126b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126b4:	f7ed ffa0 	bl	80005f8 <__aeabi_dmul>
 80126b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80126bc:	3501      	adds	r5, #1
 80126be:	1076      	asrs	r6, r6, #1
 80126c0:	3708      	adds	r7, #8
 80126c2:	2e00      	cmp	r6, #0
 80126c4:	d1f0      	bne.n	80126a8 <_dtoa_r+0x338>
 80126c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80126ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126ce:	f7ee f8bd 	bl	800084c <__aeabi_ddiv>
 80126d2:	e9cd 0100 	strd	r0, r1, [sp]
 80126d6:	e01a      	b.n	801270e <_dtoa_r+0x39e>
 80126d8:	2502      	movs	r5, #2
 80126da:	e7a3      	b.n	8012624 <_dtoa_r+0x2b4>
 80126dc:	f000 80a0 	beq.w	8012820 <_dtoa_r+0x4b0>
 80126e0:	f1ca 0600 	rsb	r6, sl, #0
 80126e4:	4b9f      	ldr	r3, [pc, #636]	; (8012964 <_dtoa_r+0x5f4>)
 80126e6:	4fa0      	ldr	r7, [pc, #640]	; (8012968 <_dtoa_r+0x5f8>)
 80126e8:	f006 020f 	and.w	r2, r6, #15
 80126ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80126f8:	f7ed ff7e 	bl	80005f8 <__aeabi_dmul>
 80126fc:	e9cd 0100 	strd	r0, r1, [sp]
 8012700:	1136      	asrs	r6, r6, #4
 8012702:	2300      	movs	r3, #0
 8012704:	2502      	movs	r5, #2
 8012706:	2e00      	cmp	r6, #0
 8012708:	d17f      	bne.n	801280a <_dtoa_r+0x49a>
 801270a:	2b00      	cmp	r3, #0
 801270c:	d1e1      	bne.n	80126d2 <_dtoa_r+0x362>
 801270e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012710:	2b00      	cmp	r3, #0
 8012712:	f000 8087 	beq.w	8012824 <_dtoa_r+0x4b4>
 8012716:	e9dd 6700 	ldrd	r6, r7, [sp]
 801271a:	2200      	movs	r2, #0
 801271c:	4b93      	ldr	r3, [pc, #588]	; (801296c <_dtoa_r+0x5fc>)
 801271e:	4630      	mov	r0, r6
 8012720:	4639      	mov	r1, r7
 8012722:	f7ee f9db 	bl	8000adc <__aeabi_dcmplt>
 8012726:	2800      	cmp	r0, #0
 8012728:	d07c      	beq.n	8012824 <_dtoa_r+0x4b4>
 801272a:	f1b9 0f00 	cmp.w	r9, #0
 801272e:	d079      	beq.n	8012824 <_dtoa_r+0x4b4>
 8012730:	9b02      	ldr	r3, [sp, #8]
 8012732:	2b00      	cmp	r3, #0
 8012734:	dd35      	ble.n	80127a2 <_dtoa_r+0x432>
 8012736:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801273a:	9308      	str	r3, [sp, #32]
 801273c:	4639      	mov	r1, r7
 801273e:	2200      	movs	r2, #0
 8012740:	4b8b      	ldr	r3, [pc, #556]	; (8012970 <_dtoa_r+0x600>)
 8012742:	4630      	mov	r0, r6
 8012744:	f7ed ff58 	bl	80005f8 <__aeabi_dmul>
 8012748:	e9cd 0100 	strd	r0, r1, [sp]
 801274c:	9f02      	ldr	r7, [sp, #8]
 801274e:	3501      	adds	r5, #1
 8012750:	4628      	mov	r0, r5
 8012752:	f7ed fee7 	bl	8000524 <__aeabi_i2d>
 8012756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801275a:	f7ed ff4d 	bl	80005f8 <__aeabi_dmul>
 801275e:	2200      	movs	r2, #0
 8012760:	4b84      	ldr	r3, [pc, #528]	; (8012974 <_dtoa_r+0x604>)
 8012762:	f7ed fd93 	bl	800028c <__adddf3>
 8012766:	4605      	mov	r5, r0
 8012768:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801276c:	2f00      	cmp	r7, #0
 801276e:	d15d      	bne.n	801282c <_dtoa_r+0x4bc>
 8012770:	2200      	movs	r2, #0
 8012772:	4b81      	ldr	r3, [pc, #516]	; (8012978 <_dtoa_r+0x608>)
 8012774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012778:	f7ed fd86 	bl	8000288 <__aeabi_dsub>
 801277c:	462a      	mov	r2, r5
 801277e:	4633      	mov	r3, r6
 8012780:	e9cd 0100 	strd	r0, r1, [sp]
 8012784:	f7ee f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 8012788:	2800      	cmp	r0, #0
 801278a:	f040 8288 	bne.w	8012c9e <_dtoa_r+0x92e>
 801278e:	462a      	mov	r2, r5
 8012790:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012798:	f7ee f9a0 	bl	8000adc <__aeabi_dcmplt>
 801279c:	2800      	cmp	r0, #0
 801279e:	f040 827c 	bne.w	8012c9a <_dtoa_r+0x92a>
 80127a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80127a6:	e9cd 2300 	strd	r2, r3, [sp]
 80127aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f2c0 8150 	blt.w	8012a52 <_dtoa_r+0x6e2>
 80127b2:	f1ba 0f0e 	cmp.w	sl, #14
 80127b6:	f300 814c 	bgt.w	8012a52 <_dtoa_r+0x6e2>
 80127ba:	4b6a      	ldr	r3, [pc, #424]	; (8012964 <_dtoa_r+0x5f4>)
 80127bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80127c0:	ed93 7b00 	vldr	d7, [r3]
 80127c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127cc:	f280 80d8 	bge.w	8012980 <_dtoa_r+0x610>
 80127d0:	f1b9 0f00 	cmp.w	r9, #0
 80127d4:	f300 80d4 	bgt.w	8012980 <_dtoa_r+0x610>
 80127d8:	f040 825e 	bne.w	8012c98 <_dtoa_r+0x928>
 80127dc:	2200      	movs	r2, #0
 80127de:	4b66      	ldr	r3, [pc, #408]	; (8012978 <_dtoa_r+0x608>)
 80127e0:	ec51 0b17 	vmov	r0, r1, d7
 80127e4:	f7ed ff08 	bl	80005f8 <__aeabi_dmul>
 80127e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127ec:	f7ee f98a 	bl	8000b04 <__aeabi_dcmpge>
 80127f0:	464f      	mov	r7, r9
 80127f2:	464e      	mov	r6, r9
 80127f4:	2800      	cmp	r0, #0
 80127f6:	f040 8234 	bne.w	8012c62 <_dtoa_r+0x8f2>
 80127fa:	2331      	movs	r3, #49	; 0x31
 80127fc:	f10b 0501 	add.w	r5, fp, #1
 8012800:	f88b 3000 	strb.w	r3, [fp]
 8012804:	f10a 0a01 	add.w	sl, sl, #1
 8012808:	e22f      	b.n	8012c6a <_dtoa_r+0x8fa>
 801280a:	07f2      	lsls	r2, r6, #31
 801280c:	d505      	bpl.n	801281a <_dtoa_r+0x4aa>
 801280e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012812:	f7ed fef1 	bl	80005f8 <__aeabi_dmul>
 8012816:	3501      	adds	r5, #1
 8012818:	2301      	movs	r3, #1
 801281a:	1076      	asrs	r6, r6, #1
 801281c:	3708      	adds	r7, #8
 801281e:	e772      	b.n	8012706 <_dtoa_r+0x396>
 8012820:	2502      	movs	r5, #2
 8012822:	e774      	b.n	801270e <_dtoa_r+0x39e>
 8012824:	f8cd a020 	str.w	sl, [sp, #32]
 8012828:	464f      	mov	r7, r9
 801282a:	e791      	b.n	8012750 <_dtoa_r+0x3e0>
 801282c:	4b4d      	ldr	r3, [pc, #308]	; (8012964 <_dtoa_r+0x5f4>)
 801282e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012832:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012838:	2b00      	cmp	r3, #0
 801283a:	d047      	beq.n	80128cc <_dtoa_r+0x55c>
 801283c:	4602      	mov	r2, r0
 801283e:	460b      	mov	r3, r1
 8012840:	2000      	movs	r0, #0
 8012842:	494e      	ldr	r1, [pc, #312]	; (801297c <_dtoa_r+0x60c>)
 8012844:	f7ee f802 	bl	800084c <__aeabi_ddiv>
 8012848:	462a      	mov	r2, r5
 801284a:	4633      	mov	r3, r6
 801284c:	f7ed fd1c 	bl	8000288 <__aeabi_dsub>
 8012850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012854:	465d      	mov	r5, fp
 8012856:	e9dd 0100 	ldrd	r0, r1, [sp]
 801285a:	f7ee f97d 	bl	8000b58 <__aeabi_d2iz>
 801285e:	4606      	mov	r6, r0
 8012860:	f7ed fe60 	bl	8000524 <__aeabi_i2d>
 8012864:	4602      	mov	r2, r0
 8012866:	460b      	mov	r3, r1
 8012868:	e9dd 0100 	ldrd	r0, r1, [sp]
 801286c:	f7ed fd0c 	bl	8000288 <__aeabi_dsub>
 8012870:	3630      	adds	r6, #48	; 0x30
 8012872:	f805 6b01 	strb.w	r6, [r5], #1
 8012876:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801287a:	e9cd 0100 	strd	r0, r1, [sp]
 801287e:	f7ee f92d 	bl	8000adc <__aeabi_dcmplt>
 8012882:	2800      	cmp	r0, #0
 8012884:	d163      	bne.n	801294e <_dtoa_r+0x5de>
 8012886:	e9dd 2300 	ldrd	r2, r3, [sp]
 801288a:	2000      	movs	r0, #0
 801288c:	4937      	ldr	r1, [pc, #220]	; (801296c <_dtoa_r+0x5fc>)
 801288e:	f7ed fcfb 	bl	8000288 <__aeabi_dsub>
 8012892:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012896:	f7ee f921 	bl	8000adc <__aeabi_dcmplt>
 801289a:	2800      	cmp	r0, #0
 801289c:	f040 80b7 	bne.w	8012a0e <_dtoa_r+0x69e>
 80128a0:	eba5 030b 	sub.w	r3, r5, fp
 80128a4:	429f      	cmp	r7, r3
 80128a6:	f77f af7c 	ble.w	80127a2 <_dtoa_r+0x432>
 80128aa:	2200      	movs	r2, #0
 80128ac:	4b30      	ldr	r3, [pc, #192]	; (8012970 <_dtoa_r+0x600>)
 80128ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80128b2:	f7ed fea1 	bl	80005f8 <__aeabi_dmul>
 80128b6:	2200      	movs	r2, #0
 80128b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80128bc:	4b2c      	ldr	r3, [pc, #176]	; (8012970 <_dtoa_r+0x600>)
 80128be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128c2:	f7ed fe99 	bl	80005f8 <__aeabi_dmul>
 80128c6:	e9cd 0100 	strd	r0, r1, [sp]
 80128ca:	e7c4      	b.n	8012856 <_dtoa_r+0x4e6>
 80128cc:	462a      	mov	r2, r5
 80128ce:	4633      	mov	r3, r6
 80128d0:	f7ed fe92 	bl	80005f8 <__aeabi_dmul>
 80128d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80128d8:	eb0b 0507 	add.w	r5, fp, r7
 80128dc:	465e      	mov	r6, fp
 80128de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128e2:	f7ee f939 	bl	8000b58 <__aeabi_d2iz>
 80128e6:	4607      	mov	r7, r0
 80128e8:	f7ed fe1c 	bl	8000524 <__aeabi_i2d>
 80128ec:	3730      	adds	r7, #48	; 0x30
 80128ee:	4602      	mov	r2, r0
 80128f0:	460b      	mov	r3, r1
 80128f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128f6:	f7ed fcc7 	bl	8000288 <__aeabi_dsub>
 80128fa:	f806 7b01 	strb.w	r7, [r6], #1
 80128fe:	42ae      	cmp	r6, r5
 8012900:	e9cd 0100 	strd	r0, r1, [sp]
 8012904:	f04f 0200 	mov.w	r2, #0
 8012908:	d126      	bne.n	8012958 <_dtoa_r+0x5e8>
 801290a:	4b1c      	ldr	r3, [pc, #112]	; (801297c <_dtoa_r+0x60c>)
 801290c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012910:	f7ed fcbc 	bl	800028c <__adddf3>
 8012914:	4602      	mov	r2, r0
 8012916:	460b      	mov	r3, r1
 8012918:	e9dd 0100 	ldrd	r0, r1, [sp]
 801291c:	f7ee f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8012920:	2800      	cmp	r0, #0
 8012922:	d174      	bne.n	8012a0e <_dtoa_r+0x69e>
 8012924:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012928:	2000      	movs	r0, #0
 801292a:	4914      	ldr	r1, [pc, #80]	; (801297c <_dtoa_r+0x60c>)
 801292c:	f7ed fcac 	bl	8000288 <__aeabi_dsub>
 8012930:	4602      	mov	r2, r0
 8012932:	460b      	mov	r3, r1
 8012934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012938:	f7ee f8d0 	bl	8000adc <__aeabi_dcmplt>
 801293c:	2800      	cmp	r0, #0
 801293e:	f43f af30 	beq.w	80127a2 <_dtoa_r+0x432>
 8012942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012946:	2b30      	cmp	r3, #48	; 0x30
 8012948:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801294c:	d002      	beq.n	8012954 <_dtoa_r+0x5e4>
 801294e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012952:	e04a      	b.n	80129ea <_dtoa_r+0x67a>
 8012954:	4615      	mov	r5, r2
 8012956:	e7f4      	b.n	8012942 <_dtoa_r+0x5d2>
 8012958:	4b05      	ldr	r3, [pc, #20]	; (8012970 <_dtoa_r+0x600>)
 801295a:	f7ed fe4d 	bl	80005f8 <__aeabi_dmul>
 801295e:	e9cd 0100 	strd	r0, r1, [sp]
 8012962:	e7bc      	b.n	80128de <_dtoa_r+0x56e>
 8012964:	08016c68 	.word	0x08016c68
 8012968:	08016c40 	.word	0x08016c40
 801296c:	3ff00000 	.word	0x3ff00000
 8012970:	40240000 	.word	0x40240000
 8012974:	401c0000 	.word	0x401c0000
 8012978:	40140000 	.word	0x40140000
 801297c:	3fe00000 	.word	0x3fe00000
 8012980:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012984:	465d      	mov	r5, fp
 8012986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801298a:	4630      	mov	r0, r6
 801298c:	4639      	mov	r1, r7
 801298e:	f7ed ff5d 	bl	800084c <__aeabi_ddiv>
 8012992:	f7ee f8e1 	bl	8000b58 <__aeabi_d2iz>
 8012996:	4680      	mov	r8, r0
 8012998:	f7ed fdc4 	bl	8000524 <__aeabi_i2d>
 801299c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129a0:	f7ed fe2a 	bl	80005f8 <__aeabi_dmul>
 80129a4:	4602      	mov	r2, r0
 80129a6:	460b      	mov	r3, r1
 80129a8:	4630      	mov	r0, r6
 80129aa:	4639      	mov	r1, r7
 80129ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80129b0:	f7ed fc6a 	bl	8000288 <__aeabi_dsub>
 80129b4:	f805 6b01 	strb.w	r6, [r5], #1
 80129b8:	eba5 060b 	sub.w	r6, r5, fp
 80129bc:	45b1      	cmp	r9, r6
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	d139      	bne.n	8012a38 <_dtoa_r+0x6c8>
 80129c4:	f7ed fc62 	bl	800028c <__adddf3>
 80129c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129cc:	4606      	mov	r6, r0
 80129ce:	460f      	mov	r7, r1
 80129d0:	f7ee f8a2 	bl	8000b18 <__aeabi_dcmpgt>
 80129d4:	b9c8      	cbnz	r0, 8012a0a <_dtoa_r+0x69a>
 80129d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129da:	4630      	mov	r0, r6
 80129dc:	4639      	mov	r1, r7
 80129de:	f7ee f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80129e2:	b110      	cbz	r0, 80129ea <_dtoa_r+0x67a>
 80129e4:	f018 0f01 	tst.w	r8, #1
 80129e8:	d10f      	bne.n	8012a0a <_dtoa_r+0x69a>
 80129ea:	9904      	ldr	r1, [sp, #16]
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 ffd9 	bl	80139a4 <_Bfree>
 80129f2:	2300      	movs	r3, #0
 80129f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80129f6:	702b      	strb	r3, [r5, #0]
 80129f8:	f10a 0301 	add.w	r3, sl, #1
 80129fc:	6013      	str	r3, [r2, #0]
 80129fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 8241 	beq.w	8012e88 <_dtoa_r+0xb18>
 8012a06:	601d      	str	r5, [r3, #0]
 8012a08:	e23e      	b.n	8012e88 <_dtoa_r+0xb18>
 8012a0a:	f8cd a020 	str.w	sl, [sp, #32]
 8012a0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a12:	2a39      	cmp	r2, #57	; 0x39
 8012a14:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012a18:	d108      	bne.n	8012a2c <_dtoa_r+0x6bc>
 8012a1a:	459b      	cmp	fp, r3
 8012a1c:	d10a      	bne.n	8012a34 <_dtoa_r+0x6c4>
 8012a1e:	9b08      	ldr	r3, [sp, #32]
 8012a20:	3301      	adds	r3, #1
 8012a22:	9308      	str	r3, [sp, #32]
 8012a24:	2330      	movs	r3, #48	; 0x30
 8012a26:	f88b 3000 	strb.w	r3, [fp]
 8012a2a:	465b      	mov	r3, fp
 8012a2c:	781a      	ldrb	r2, [r3, #0]
 8012a2e:	3201      	adds	r2, #1
 8012a30:	701a      	strb	r2, [r3, #0]
 8012a32:	e78c      	b.n	801294e <_dtoa_r+0x5de>
 8012a34:	461d      	mov	r5, r3
 8012a36:	e7ea      	b.n	8012a0e <_dtoa_r+0x69e>
 8012a38:	2200      	movs	r2, #0
 8012a3a:	4b9b      	ldr	r3, [pc, #620]	; (8012ca8 <_dtoa_r+0x938>)
 8012a3c:	f7ed fddc 	bl	80005f8 <__aeabi_dmul>
 8012a40:	2200      	movs	r2, #0
 8012a42:	2300      	movs	r3, #0
 8012a44:	4606      	mov	r6, r0
 8012a46:	460f      	mov	r7, r1
 8012a48:	f7ee f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	d09a      	beq.n	8012986 <_dtoa_r+0x616>
 8012a50:	e7cb      	b.n	80129ea <_dtoa_r+0x67a>
 8012a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a54:	2a00      	cmp	r2, #0
 8012a56:	f000 808b 	beq.w	8012b70 <_dtoa_r+0x800>
 8012a5a:	9a06      	ldr	r2, [sp, #24]
 8012a5c:	2a01      	cmp	r2, #1
 8012a5e:	dc6e      	bgt.n	8012b3e <_dtoa_r+0x7ce>
 8012a60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a62:	2a00      	cmp	r2, #0
 8012a64:	d067      	beq.n	8012b36 <_dtoa_r+0x7c6>
 8012a66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012a6a:	9f07      	ldr	r7, [sp, #28]
 8012a6c:	9d05      	ldr	r5, [sp, #20]
 8012a6e:	9a05      	ldr	r2, [sp, #20]
 8012a70:	2101      	movs	r1, #1
 8012a72:	441a      	add	r2, r3
 8012a74:	4620      	mov	r0, r4
 8012a76:	9205      	str	r2, [sp, #20]
 8012a78:	4498      	add	r8, r3
 8012a7a:	f001 f871 	bl	8013b60 <__i2b>
 8012a7e:	4606      	mov	r6, r0
 8012a80:	2d00      	cmp	r5, #0
 8012a82:	dd0c      	ble.n	8012a9e <_dtoa_r+0x72e>
 8012a84:	f1b8 0f00 	cmp.w	r8, #0
 8012a88:	dd09      	ble.n	8012a9e <_dtoa_r+0x72e>
 8012a8a:	4545      	cmp	r5, r8
 8012a8c:	9a05      	ldr	r2, [sp, #20]
 8012a8e:	462b      	mov	r3, r5
 8012a90:	bfa8      	it	ge
 8012a92:	4643      	movge	r3, r8
 8012a94:	1ad2      	subs	r2, r2, r3
 8012a96:	9205      	str	r2, [sp, #20]
 8012a98:	1aed      	subs	r5, r5, r3
 8012a9a:	eba8 0803 	sub.w	r8, r8, r3
 8012a9e:	9b07      	ldr	r3, [sp, #28]
 8012aa0:	b1eb      	cbz	r3, 8012ade <_dtoa_r+0x76e>
 8012aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d067      	beq.n	8012b78 <_dtoa_r+0x808>
 8012aa8:	b18f      	cbz	r7, 8012ace <_dtoa_r+0x75e>
 8012aaa:	4631      	mov	r1, r6
 8012aac:	463a      	mov	r2, r7
 8012aae:	4620      	mov	r0, r4
 8012ab0:	f001 f8f6 	bl	8013ca0 <__pow5mult>
 8012ab4:	9a04      	ldr	r2, [sp, #16]
 8012ab6:	4601      	mov	r1, r0
 8012ab8:	4606      	mov	r6, r0
 8012aba:	4620      	mov	r0, r4
 8012abc:	f001 f859 	bl	8013b72 <__multiply>
 8012ac0:	9904      	ldr	r1, [sp, #16]
 8012ac2:	9008      	str	r0, [sp, #32]
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f000 ff6d 	bl	80139a4 <_Bfree>
 8012aca:	9b08      	ldr	r3, [sp, #32]
 8012acc:	9304      	str	r3, [sp, #16]
 8012ace:	9b07      	ldr	r3, [sp, #28]
 8012ad0:	1bda      	subs	r2, r3, r7
 8012ad2:	d004      	beq.n	8012ade <_dtoa_r+0x76e>
 8012ad4:	9904      	ldr	r1, [sp, #16]
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f001 f8e2 	bl	8013ca0 <__pow5mult>
 8012adc:	9004      	str	r0, [sp, #16]
 8012ade:	2101      	movs	r1, #1
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	f001 f83d 	bl	8013b60 <__i2b>
 8012ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ae8:	4607      	mov	r7, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	f000 81d0 	beq.w	8012e90 <_dtoa_r+0xb20>
 8012af0:	461a      	mov	r2, r3
 8012af2:	4601      	mov	r1, r0
 8012af4:	4620      	mov	r0, r4
 8012af6:	f001 f8d3 	bl	8013ca0 <__pow5mult>
 8012afa:	9b06      	ldr	r3, [sp, #24]
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	4607      	mov	r7, r0
 8012b00:	dc40      	bgt.n	8012b84 <_dtoa_r+0x814>
 8012b02:	9b00      	ldr	r3, [sp, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d139      	bne.n	8012b7c <_dtoa_r+0x80c>
 8012b08:	9b01      	ldr	r3, [sp, #4]
 8012b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d136      	bne.n	8012b80 <_dtoa_r+0x810>
 8012b12:	9b01      	ldr	r3, [sp, #4]
 8012b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b18:	0d1b      	lsrs	r3, r3, #20
 8012b1a:	051b      	lsls	r3, r3, #20
 8012b1c:	b12b      	cbz	r3, 8012b2a <_dtoa_r+0x7ba>
 8012b1e:	9b05      	ldr	r3, [sp, #20]
 8012b20:	3301      	adds	r3, #1
 8012b22:	9305      	str	r3, [sp, #20]
 8012b24:	f108 0801 	add.w	r8, r8, #1
 8012b28:	2301      	movs	r3, #1
 8012b2a:	9307      	str	r3, [sp, #28]
 8012b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d12a      	bne.n	8012b88 <_dtoa_r+0x818>
 8012b32:	2001      	movs	r0, #1
 8012b34:	e030      	b.n	8012b98 <_dtoa_r+0x828>
 8012b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012b3c:	e795      	b.n	8012a6a <_dtoa_r+0x6fa>
 8012b3e:	9b07      	ldr	r3, [sp, #28]
 8012b40:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8012b44:	42bb      	cmp	r3, r7
 8012b46:	bfbf      	itttt	lt
 8012b48:	9b07      	ldrlt	r3, [sp, #28]
 8012b4a:	9707      	strlt	r7, [sp, #28]
 8012b4c:	1afa      	sublt	r2, r7, r3
 8012b4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012b50:	bfbb      	ittet	lt
 8012b52:	189b      	addlt	r3, r3, r2
 8012b54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012b56:	1bdf      	subge	r7, r3, r7
 8012b58:	2700      	movlt	r7, #0
 8012b5a:	f1b9 0f00 	cmp.w	r9, #0
 8012b5e:	bfb5      	itete	lt
 8012b60:	9b05      	ldrlt	r3, [sp, #20]
 8012b62:	9d05      	ldrge	r5, [sp, #20]
 8012b64:	eba3 0509 	sublt.w	r5, r3, r9
 8012b68:	464b      	movge	r3, r9
 8012b6a:	bfb8      	it	lt
 8012b6c:	2300      	movlt	r3, #0
 8012b6e:	e77e      	b.n	8012a6e <_dtoa_r+0x6fe>
 8012b70:	9f07      	ldr	r7, [sp, #28]
 8012b72:	9d05      	ldr	r5, [sp, #20]
 8012b74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012b76:	e783      	b.n	8012a80 <_dtoa_r+0x710>
 8012b78:	9a07      	ldr	r2, [sp, #28]
 8012b7a:	e7ab      	b.n	8012ad4 <_dtoa_r+0x764>
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	e7d4      	b.n	8012b2a <_dtoa_r+0x7ba>
 8012b80:	9b00      	ldr	r3, [sp, #0]
 8012b82:	e7d2      	b.n	8012b2a <_dtoa_r+0x7ba>
 8012b84:	2300      	movs	r3, #0
 8012b86:	9307      	str	r3, [sp, #28]
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012b8e:	6918      	ldr	r0, [r3, #16]
 8012b90:	f000 ff98 	bl	8013ac4 <__hi0bits>
 8012b94:	f1c0 0020 	rsb	r0, r0, #32
 8012b98:	4440      	add	r0, r8
 8012b9a:	f010 001f 	ands.w	r0, r0, #31
 8012b9e:	d047      	beq.n	8012c30 <_dtoa_r+0x8c0>
 8012ba0:	f1c0 0320 	rsb	r3, r0, #32
 8012ba4:	2b04      	cmp	r3, #4
 8012ba6:	dd3b      	ble.n	8012c20 <_dtoa_r+0x8b0>
 8012ba8:	9b05      	ldr	r3, [sp, #20]
 8012baa:	f1c0 001c 	rsb	r0, r0, #28
 8012bae:	4403      	add	r3, r0
 8012bb0:	9305      	str	r3, [sp, #20]
 8012bb2:	4405      	add	r5, r0
 8012bb4:	4480      	add	r8, r0
 8012bb6:	9b05      	ldr	r3, [sp, #20]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	dd05      	ble.n	8012bc8 <_dtoa_r+0x858>
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	9904      	ldr	r1, [sp, #16]
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f001 f8bb 	bl	8013d3c <__lshift>
 8012bc6:	9004      	str	r0, [sp, #16]
 8012bc8:	f1b8 0f00 	cmp.w	r8, #0
 8012bcc:	dd05      	ble.n	8012bda <_dtoa_r+0x86a>
 8012bce:	4639      	mov	r1, r7
 8012bd0:	4642      	mov	r2, r8
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	f001 f8b2 	bl	8013d3c <__lshift>
 8012bd8:	4607      	mov	r7, r0
 8012bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012bdc:	b353      	cbz	r3, 8012c34 <_dtoa_r+0x8c4>
 8012bde:	4639      	mov	r1, r7
 8012be0:	9804      	ldr	r0, [sp, #16]
 8012be2:	f001 f8ff 	bl	8013de4 <__mcmp>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	da24      	bge.n	8012c34 <_dtoa_r+0x8c4>
 8012bea:	2300      	movs	r3, #0
 8012bec:	220a      	movs	r2, #10
 8012bee:	9904      	ldr	r1, [sp, #16]
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f000 feee 	bl	80139d2 <__multadd>
 8012bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bf8:	9004      	str	r0, [sp, #16]
 8012bfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	f000 814d 	beq.w	8012e9e <_dtoa_r+0xb2e>
 8012c04:	2300      	movs	r3, #0
 8012c06:	4631      	mov	r1, r6
 8012c08:	220a      	movs	r2, #10
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f000 fee1 	bl	80139d2 <__multadd>
 8012c10:	9b02      	ldr	r3, [sp, #8]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	4606      	mov	r6, r0
 8012c16:	dc4f      	bgt.n	8012cb8 <_dtoa_r+0x948>
 8012c18:	9b06      	ldr	r3, [sp, #24]
 8012c1a:	2b02      	cmp	r3, #2
 8012c1c:	dd4c      	ble.n	8012cb8 <_dtoa_r+0x948>
 8012c1e:	e011      	b.n	8012c44 <_dtoa_r+0x8d4>
 8012c20:	d0c9      	beq.n	8012bb6 <_dtoa_r+0x846>
 8012c22:	9a05      	ldr	r2, [sp, #20]
 8012c24:	331c      	adds	r3, #28
 8012c26:	441a      	add	r2, r3
 8012c28:	9205      	str	r2, [sp, #20]
 8012c2a:	441d      	add	r5, r3
 8012c2c:	4498      	add	r8, r3
 8012c2e:	e7c2      	b.n	8012bb6 <_dtoa_r+0x846>
 8012c30:	4603      	mov	r3, r0
 8012c32:	e7f6      	b.n	8012c22 <_dtoa_r+0x8b2>
 8012c34:	f1b9 0f00 	cmp.w	r9, #0
 8012c38:	dc38      	bgt.n	8012cac <_dtoa_r+0x93c>
 8012c3a:	9b06      	ldr	r3, [sp, #24]
 8012c3c:	2b02      	cmp	r3, #2
 8012c3e:	dd35      	ble.n	8012cac <_dtoa_r+0x93c>
 8012c40:	f8cd 9008 	str.w	r9, [sp, #8]
 8012c44:	9b02      	ldr	r3, [sp, #8]
 8012c46:	b963      	cbnz	r3, 8012c62 <_dtoa_r+0x8f2>
 8012c48:	4639      	mov	r1, r7
 8012c4a:	2205      	movs	r2, #5
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f000 fec0 	bl	80139d2 <__multadd>
 8012c52:	4601      	mov	r1, r0
 8012c54:	4607      	mov	r7, r0
 8012c56:	9804      	ldr	r0, [sp, #16]
 8012c58:	f001 f8c4 	bl	8013de4 <__mcmp>
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	f73f adcc 	bgt.w	80127fa <_dtoa_r+0x48a>
 8012c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c64:	465d      	mov	r5, fp
 8012c66:	ea6f 0a03 	mvn.w	sl, r3
 8012c6a:	f04f 0900 	mov.w	r9, #0
 8012c6e:	4639      	mov	r1, r7
 8012c70:	4620      	mov	r0, r4
 8012c72:	f000 fe97 	bl	80139a4 <_Bfree>
 8012c76:	2e00      	cmp	r6, #0
 8012c78:	f43f aeb7 	beq.w	80129ea <_dtoa_r+0x67a>
 8012c7c:	f1b9 0f00 	cmp.w	r9, #0
 8012c80:	d005      	beq.n	8012c8e <_dtoa_r+0x91e>
 8012c82:	45b1      	cmp	r9, r6
 8012c84:	d003      	beq.n	8012c8e <_dtoa_r+0x91e>
 8012c86:	4649      	mov	r1, r9
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f000 fe8b 	bl	80139a4 <_Bfree>
 8012c8e:	4631      	mov	r1, r6
 8012c90:	4620      	mov	r0, r4
 8012c92:	f000 fe87 	bl	80139a4 <_Bfree>
 8012c96:	e6a8      	b.n	80129ea <_dtoa_r+0x67a>
 8012c98:	2700      	movs	r7, #0
 8012c9a:	463e      	mov	r6, r7
 8012c9c:	e7e1      	b.n	8012c62 <_dtoa_r+0x8f2>
 8012c9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012ca2:	463e      	mov	r6, r7
 8012ca4:	e5a9      	b.n	80127fa <_dtoa_r+0x48a>
 8012ca6:	bf00      	nop
 8012ca8:	40240000 	.word	0x40240000
 8012cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cae:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f000 80fa 	beq.w	8012eac <_dtoa_r+0xb3c>
 8012cb8:	2d00      	cmp	r5, #0
 8012cba:	dd05      	ble.n	8012cc8 <_dtoa_r+0x958>
 8012cbc:	4631      	mov	r1, r6
 8012cbe:	462a      	mov	r2, r5
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f001 f83b 	bl	8013d3c <__lshift>
 8012cc6:	4606      	mov	r6, r0
 8012cc8:	9b07      	ldr	r3, [sp, #28]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d04c      	beq.n	8012d68 <_dtoa_r+0x9f8>
 8012cce:	6871      	ldr	r1, [r6, #4]
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f000 fe33 	bl	801393c <_Balloc>
 8012cd6:	6932      	ldr	r2, [r6, #16]
 8012cd8:	3202      	adds	r2, #2
 8012cda:	4605      	mov	r5, r0
 8012cdc:	0092      	lsls	r2, r2, #2
 8012cde:	f106 010c 	add.w	r1, r6, #12
 8012ce2:	300c      	adds	r0, #12
 8012ce4:	f7fd fe70 	bl	80109c8 <memcpy>
 8012ce8:	2201      	movs	r2, #1
 8012cea:	4629      	mov	r1, r5
 8012cec:	4620      	mov	r0, r4
 8012cee:	f001 f825 	bl	8013d3c <__lshift>
 8012cf2:	9b00      	ldr	r3, [sp, #0]
 8012cf4:	f8cd b014 	str.w	fp, [sp, #20]
 8012cf8:	f003 0301 	and.w	r3, r3, #1
 8012cfc:	46b1      	mov	r9, r6
 8012cfe:	9307      	str	r3, [sp, #28]
 8012d00:	4606      	mov	r6, r0
 8012d02:	4639      	mov	r1, r7
 8012d04:	9804      	ldr	r0, [sp, #16]
 8012d06:	f7ff faa7 	bl	8012258 <quorem>
 8012d0a:	4649      	mov	r1, r9
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d12:	9804      	ldr	r0, [sp, #16]
 8012d14:	f001 f866 	bl	8013de4 <__mcmp>
 8012d18:	4632      	mov	r2, r6
 8012d1a:	9000      	str	r0, [sp, #0]
 8012d1c:	4639      	mov	r1, r7
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f001 f87a 	bl	8013e18 <__mdiff>
 8012d24:	68c3      	ldr	r3, [r0, #12]
 8012d26:	4602      	mov	r2, r0
 8012d28:	bb03      	cbnz	r3, 8012d6c <_dtoa_r+0x9fc>
 8012d2a:	4601      	mov	r1, r0
 8012d2c:	9008      	str	r0, [sp, #32]
 8012d2e:	9804      	ldr	r0, [sp, #16]
 8012d30:	f001 f858 	bl	8013de4 <__mcmp>
 8012d34:	9a08      	ldr	r2, [sp, #32]
 8012d36:	4603      	mov	r3, r0
 8012d38:	4611      	mov	r1, r2
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	9308      	str	r3, [sp, #32]
 8012d3e:	f000 fe31 	bl	80139a4 <_Bfree>
 8012d42:	9b08      	ldr	r3, [sp, #32]
 8012d44:	b9a3      	cbnz	r3, 8012d70 <_dtoa_r+0xa00>
 8012d46:	9a06      	ldr	r2, [sp, #24]
 8012d48:	b992      	cbnz	r2, 8012d70 <_dtoa_r+0xa00>
 8012d4a:	9a07      	ldr	r2, [sp, #28]
 8012d4c:	b982      	cbnz	r2, 8012d70 <_dtoa_r+0xa00>
 8012d4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012d52:	d029      	beq.n	8012da8 <_dtoa_r+0xa38>
 8012d54:	9b00      	ldr	r3, [sp, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	dd01      	ble.n	8012d5e <_dtoa_r+0x9ee>
 8012d5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012d5e:	9b05      	ldr	r3, [sp, #20]
 8012d60:	1c5d      	adds	r5, r3, #1
 8012d62:	f883 8000 	strb.w	r8, [r3]
 8012d66:	e782      	b.n	8012c6e <_dtoa_r+0x8fe>
 8012d68:	4630      	mov	r0, r6
 8012d6a:	e7c2      	b.n	8012cf2 <_dtoa_r+0x982>
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	e7e3      	b.n	8012d38 <_dtoa_r+0x9c8>
 8012d70:	9a00      	ldr	r2, [sp, #0]
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	db04      	blt.n	8012d80 <_dtoa_r+0xa10>
 8012d76:	d125      	bne.n	8012dc4 <_dtoa_r+0xa54>
 8012d78:	9a06      	ldr	r2, [sp, #24]
 8012d7a:	bb1a      	cbnz	r2, 8012dc4 <_dtoa_r+0xa54>
 8012d7c:	9a07      	ldr	r2, [sp, #28]
 8012d7e:	bb0a      	cbnz	r2, 8012dc4 <_dtoa_r+0xa54>
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	ddec      	ble.n	8012d5e <_dtoa_r+0x9ee>
 8012d84:	2201      	movs	r2, #1
 8012d86:	9904      	ldr	r1, [sp, #16]
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f000 ffd7 	bl	8013d3c <__lshift>
 8012d8e:	4639      	mov	r1, r7
 8012d90:	9004      	str	r0, [sp, #16]
 8012d92:	f001 f827 	bl	8013de4 <__mcmp>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	dc03      	bgt.n	8012da2 <_dtoa_r+0xa32>
 8012d9a:	d1e0      	bne.n	8012d5e <_dtoa_r+0x9ee>
 8012d9c:	f018 0f01 	tst.w	r8, #1
 8012da0:	d0dd      	beq.n	8012d5e <_dtoa_r+0x9ee>
 8012da2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012da6:	d1d8      	bne.n	8012d5a <_dtoa_r+0x9ea>
 8012da8:	9b05      	ldr	r3, [sp, #20]
 8012daa:	9a05      	ldr	r2, [sp, #20]
 8012dac:	1c5d      	adds	r5, r3, #1
 8012dae:	2339      	movs	r3, #57	; 0x39
 8012db0:	7013      	strb	r3, [r2, #0]
 8012db2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012db6:	2b39      	cmp	r3, #57	; 0x39
 8012db8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012dbc:	d04f      	beq.n	8012e5e <_dtoa_r+0xaee>
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	7013      	strb	r3, [r2, #0]
 8012dc2:	e754      	b.n	8012c6e <_dtoa_r+0x8fe>
 8012dc4:	9a05      	ldr	r2, [sp, #20]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f102 0501 	add.w	r5, r2, #1
 8012dcc:	dd06      	ble.n	8012ddc <_dtoa_r+0xa6c>
 8012dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012dd2:	d0e9      	beq.n	8012da8 <_dtoa_r+0xa38>
 8012dd4:	f108 0801 	add.w	r8, r8, #1
 8012dd8:	9b05      	ldr	r3, [sp, #20]
 8012dda:	e7c2      	b.n	8012d62 <_dtoa_r+0x9f2>
 8012ddc:	9a02      	ldr	r2, [sp, #8]
 8012dde:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012de2:	eba5 030b 	sub.w	r3, r5, fp
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d021      	beq.n	8012e2e <_dtoa_r+0xabe>
 8012dea:	2300      	movs	r3, #0
 8012dec:	220a      	movs	r2, #10
 8012dee:	9904      	ldr	r1, [sp, #16]
 8012df0:	4620      	mov	r0, r4
 8012df2:	f000 fdee 	bl	80139d2 <__multadd>
 8012df6:	45b1      	cmp	r9, r6
 8012df8:	9004      	str	r0, [sp, #16]
 8012dfa:	f04f 0300 	mov.w	r3, #0
 8012dfe:	f04f 020a 	mov.w	r2, #10
 8012e02:	4649      	mov	r1, r9
 8012e04:	4620      	mov	r0, r4
 8012e06:	d105      	bne.n	8012e14 <_dtoa_r+0xaa4>
 8012e08:	f000 fde3 	bl	80139d2 <__multadd>
 8012e0c:	4681      	mov	r9, r0
 8012e0e:	4606      	mov	r6, r0
 8012e10:	9505      	str	r5, [sp, #20]
 8012e12:	e776      	b.n	8012d02 <_dtoa_r+0x992>
 8012e14:	f000 fddd 	bl	80139d2 <__multadd>
 8012e18:	4631      	mov	r1, r6
 8012e1a:	4681      	mov	r9, r0
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	220a      	movs	r2, #10
 8012e20:	4620      	mov	r0, r4
 8012e22:	f000 fdd6 	bl	80139d2 <__multadd>
 8012e26:	4606      	mov	r6, r0
 8012e28:	e7f2      	b.n	8012e10 <_dtoa_r+0xaa0>
 8012e2a:	f04f 0900 	mov.w	r9, #0
 8012e2e:	2201      	movs	r2, #1
 8012e30:	9904      	ldr	r1, [sp, #16]
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 ff82 	bl	8013d3c <__lshift>
 8012e38:	4639      	mov	r1, r7
 8012e3a:	9004      	str	r0, [sp, #16]
 8012e3c:	f000 ffd2 	bl	8013de4 <__mcmp>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	dcb6      	bgt.n	8012db2 <_dtoa_r+0xa42>
 8012e44:	d102      	bne.n	8012e4c <_dtoa_r+0xadc>
 8012e46:	f018 0f01 	tst.w	r8, #1
 8012e4a:	d1b2      	bne.n	8012db2 <_dtoa_r+0xa42>
 8012e4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e50:	2b30      	cmp	r3, #48	; 0x30
 8012e52:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012e56:	f47f af0a 	bne.w	8012c6e <_dtoa_r+0x8fe>
 8012e5a:	4615      	mov	r5, r2
 8012e5c:	e7f6      	b.n	8012e4c <_dtoa_r+0xadc>
 8012e5e:	4593      	cmp	fp, r2
 8012e60:	d105      	bne.n	8012e6e <_dtoa_r+0xafe>
 8012e62:	2331      	movs	r3, #49	; 0x31
 8012e64:	f10a 0a01 	add.w	sl, sl, #1
 8012e68:	f88b 3000 	strb.w	r3, [fp]
 8012e6c:	e6ff      	b.n	8012c6e <_dtoa_r+0x8fe>
 8012e6e:	4615      	mov	r5, r2
 8012e70:	e79f      	b.n	8012db2 <_dtoa_r+0xa42>
 8012e72:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012ed8 <_dtoa_r+0xb68>
 8012e76:	e007      	b.n	8012e88 <_dtoa_r+0xb18>
 8012e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012edc <_dtoa_r+0xb6c>
 8012e7e:	b11b      	cbz	r3, 8012e88 <_dtoa_r+0xb18>
 8012e80:	f10b 0308 	add.w	r3, fp, #8
 8012e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012e86:	6013      	str	r3, [r2, #0]
 8012e88:	4658      	mov	r0, fp
 8012e8a:	b017      	add	sp, #92	; 0x5c
 8012e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e90:	9b06      	ldr	r3, [sp, #24]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	f77f ae35 	ble.w	8012b02 <_dtoa_r+0x792>
 8012e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e9a:	9307      	str	r3, [sp, #28]
 8012e9c:	e649      	b.n	8012b32 <_dtoa_r+0x7c2>
 8012e9e:	9b02      	ldr	r3, [sp, #8]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	dc03      	bgt.n	8012eac <_dtoa_r+0xb3c>
 8012ea4:	9b06      	ldr	r3, [sp, #24]
 8012ea6:	2b02      	cmp	r3, #2
 8012ea8:	f73f aecc 	bgt.w	8012c44 <_dtoa_r+0x8d4>
 8012eac:	465d      	mov	r5, fp
 8012eae:	4639      	mov	r1, r7
 8012eb0:	9804      	ldr	r0, [sp, #16]
 8012eb2:	f7ff f9d1 	bl	8012258 <quorem>
 8012eb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012eba:	f805 8b01 	strb.w	r8, [r5], #1
 8012ebe:	9a02      	ldr	r2, [sp, #8]
 8012ec0:	eba5 030b 	sub.w	r3, r5, fp
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	ddb0      	ble.n	8012e2a <_dtoa_r+0xaba>
 8012ec8:	2300      	movs	r3, #0
 8012eca:	220a      	movs	r2, #10
 8012ecc:	9904      	ldr	r1, [sp, #16]
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f000 fd7f 	bl	80139d2 <__multadd>
 8012ed4:	9004      	str	r0, [sp, #16]
 8012ed6:	e7ea      	b.n	8012eae <_dtoa_r+0xb3e>
 8012ed8:	08016b48 	.word	0x08016b48
 8012edc:	08016bc0 	.word	0x08016bc0

08012ee0 <__sflush_r>:
 8012ee0:	898a      	ldrh	r2, [r1, #12]
 8012ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	0710      	lsls	r0, r2, #28
 8012eea:	460c      	mov	r4, r1
 8012eec:	d458      	bmi.n	8012fa0 <__sflush_r+0xc0>
 8012eee:	684b      	ldr	r3, [r1, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	dc05      	bgt.n	8012f00 <__sflush_r+0x20>
 8012ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	dc02      	bgt.n	8012f00 <__sflush_r+0x20>
 8012efa:	2000      	movs	r0, #0
 8012efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f02:	2e00      	cmp	r6, #0
 8012f04:	d0f9      	beq.n	8012efa <__sflush_r+0x1a>
 8012f06:	2300      	movs	r3, #0
 8012f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f0c:	682f      	ldr	r7, [r5, #0]
 8012f0e:	6a21      	ldr	r1, [r4, #32]
 8012f10:	602b      	str	r3, [r5, #0]
 8012f12:	d032      	beq.n	8012f7a <__sflush_r+0x9a>
 8012f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f16:	89a3      	ldrh	r3, [r4, #12]
 8012f18:	075a      	lsls	r2, r3, #29
 8012f1a:	d505      	bpl.n	8012f28 <__sflush_r+0x48>
 8012f1c:	6863      	ldr	r3, [r4, #4]
 8012f1e:	1ac0      	subs	r0, r0, r3
 8012f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f22:	b10b      	cbz	r3, 8012f28 <__sflush_r+0x48>
 8012f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f26:	1ac0      	subs	r0, r0, r3
 8012f28:	2300      	movs	r3, #0
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f2e:	6a21      	ldr	r1, [r4, #32]
 8012f30:	4628      	mov	r0, r5
 8012f32:	47b0      	blx	r6
 8012f34:	1c43      	adds	r3, r0, #1
 8012f36:	89a3      	ldrh	r3, [r4, #12]
 8012f38:	d106      	bne.n	8012f48 <__sflush_r+0x68>
 8012f3a:	6829      	ldr	r1, [r5, #0]
 8012f3c:	291d      	cmp	r1, #29
 8012f3e:	d848      	bhi.n	8012fd2 <__sflush_r+0xf2>
 8012f40:	4a29      	ldr	r2, [pc, #164]	; (8012fe8 <__sflush_r+0x108>)
 8012f42:	40ca      	lsrs	r2, r1
 8012f44:	07d6      	lsls	r6, r2, #31
 8012f46:	d544      	bpl.n	8012fd2 <__sflush_r+0xf2>
 8012f48:	2200      	movs	r2, #0
 8012f4a:	6062      	str	r2, [r4, #4]
 8012f4c:	04d9      	lsls	r1, r3, #19
 8012f4e:	6922      	ldr	r2, [r4, #16]
 8012f50:	6022      	str	r2, [r4, #0]
 8012f52:	d504      	bpl.n	8012f5e <__sflush_r+0x7e>
 8012f54:	1c42      	adds	r2, r0, #1
 8012f56:	d101      	bne.n	8012f5c <__sflush_r+0x7c>
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	b903      	cbnz	r3, 8012f5e <__sflush_r+0x7e>
 8012f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8012f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f60:	602f      	str	r7, [r5, #0]
 8012f62:	2900      	cmp	r1, #0
 8012f64:	d0c9      	beq.n	8012efa <__sflush_r+0x1a>
 8012f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f6a:	4299      	cmp	r1, r3
 8012f6c:	d002      	beq.n	8012f74 <__sflush_r+0x94>
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f001 f8f2 	bl	8014158 <_free_r>
 8012f74:	2000      	movs	r0, #0
 8012f76:	6360      	str	r0, [r4, #52]	; 0x34
 8012f78:	e7c0      	b.n	8012efc <__sflush_r+0x1c>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	47b0      	blx	r6
 8012f80:	1c41      	adds	r1, r0, #1
 8012f82:	d1c8      	bne.n	8012f16 <__sflush_r+0x36>
 8012f84:	682b      	ldr	r3, [r5, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d0c5      	beq.n	8012f16 <__sflush_r+0x36>
 8012f8a:	2b1d      	cmp	r3, #29
 8012f8c:	d001      	beq.n	8012f92 <__sflush_r+0xb2>
 8012f8e:	2b16      	cmp	r3, #22
 8012f90:	d101      	bne.n	8012f96 <__sflush_r+0xb6>
 8012f92:	602f      	str	r7, [r5, #0]
 8012f94:	e7b1      	b.n	8012efa <__sflush_r+0x1a>
 8012f96:	89a3      	ldrh	r3, [r4, #12]
 8012f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f9c:	81a3      	strh	r3, [r4, #12]
 8012f9e:	e7ad      	b.n	8012efc <__sflush_r+0x1c>
 8012fa0:	690f      	ldr	r7, [r1, #16]
 8012fa2:	2f00      	cmp	r7, #0
 8012fa4:	d0a9      	beq.n	8012efa <__sflush_r+0x1a>
 8012fa6:	0793      	lsls	r3, r2, #30
 8012fa8:	680e      	ldr	r6, [r1, #0]
 8012faa:	bf08      	it	eq
 8012fac:	694b      	ldreq	r3, [r1, #20]
 8012fae:	600f      	str	r7, [r1, #0]
 8012fb0:	bf18      	it	ne
 8012fb2:	2300      	movne	r3, #0
 8012fb4:	eba6 0807 	sub.w	r8, r6, r7
 8012fb8:	608b      	str	r3, [r1, #8]
 8012fba:	f1b8 0f00 	cmp.w	r8, #0
 8012fbe:	dd9c      	ble.n	8012efa <__sflush_r+0x1a>
 8012fc0:	4643      	mov	r3, r8
 8012fc2:	463a      	mov	r2, r7
 8012fc4:	6a21      	ldr	r1, [r4, #32]
 8012fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012fc8:	4628      	mov	r0, r5
 8012fca:	47b0      	blx	r6
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	dc06      	bgt.n	8012fde <__sflush_r+0xfe>
 8012fd0:	89a3      	ldrh	r3, [r4, #12]
 8012fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fd6:	81a3      	strh	r3, [r4, #12]
 8012fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fdc:	e78e      	b.n	8012efc <__sflush_r+0x1c>
 8012fde:	4407      	add	r7, r0
 8012fe0:	eba8 0800 	sub.w	r8, r8, r0
 8012fe4:	e7e9      	b.n	8012fba <__sflush_r+0xda>
 8012fe6:	bf00      	nop
 8012fe8:	20400001 	.word	0x20400001

08012fec <_fflush_r>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	690b      	ldr	r3, [r1, #16]
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	b1db      	cbz	r3, 801302e <_fflush_r+0x42>
 8012ff6:	b118      	cbz	r0, 8013000 <_fflush_r+0x14>
 8012ff8:	6983      	ldr	r3, [r0, #24]
 8012ffa:	b90b      	cbnz	r3, 8013000 <_fflush_r+0x14>
 8012ffc:	f000 f860 	bl	80130c0 <__sinit>
 8013000:	4b0c      	ldr	r3, [pc, #48]	; (8013034 <_fflush_r+0x48>)
 8013002:	429c      	cmp	r4, r3
 8013004:	d109      	bne.n	801301a <_fflush_r+0x2e>
 8013006:	686c      	ldr	r4, [r5, #4]
 8013008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801300c:	b17b      	cbz	r3, 801302e <_fflush_r+0x42>
 801300e:	4621      	mov	r1, r4
 8013010:	4628      	mov	r0, r5
 8013012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013016:	f7ff bf63 	b.w	8012ee0 <__sflush_r>
 801301a:	4b07      	ldr	r3, [pc, #28]	; (8013038 <_fflush_r+0x4c>)
 801301c:	429c      	cmp	r4, r3
 801301e:	d101      	bne.n	8013024 <_fflush_r+0x38>
 8013020:	68ac      	ldr	r4, [r5, #8]
 8013022:	e7f1      	b.n	8013008 <_fflush_r+0x1c>
 8013024:	4b05      	ldr	r3, [pc, #20]	; (801303c <_fflush_r+0x50>)
 8013026:	429c      	cmp	r4, r3
 8013028:	bf08      	it	eq
 801302a:	68ec      	ldreq	r4, [r5, #12]
 801302c:	e7ec      	b.n	8013008 <_fflush_r+0x1c>
 801302e:	2000      	movs	r0, #0
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	bf00      	nop
 8013034:	08016bf0 	.word	0x08016bf0
 8013038:	08016c10 	.word	0x08016c10
 801303c:	08016bd0 	.word	0x08016bd0

08013040 <std>:
 8013040:	2300      	movs	r3, #0
 8013042:	b510      	push	{r4, lr}
 8013044:	4604      	mov	r4, r0
 8013046:	e9c0 3300 	strd	r3, r3, [r0]
 801304a:	6083      	str	r3, [r0, #8]
 801304c:	8181      	strh	r1, [r0, #12]
 801304e:	6643      	str	r3, [r0, #100]	; 0x64
 8013050:	81c2      	strh	r2, [r0, #14]
 8013052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013056:	6183      	str	r3, [r0, #24]
 8013058:	4619      	mov	r1, r3
 801305a:	2208      	movs	r2, #8
 801305c:	305c      	adds	r0, #92	; 0x5c
 801305e:	f7fd fcbe 	bl	80109de <memset>
 8013062:	4b05      	ldr	r3, [pc, #20]	; (8013078 <std+0x38>)
 8013064:	6263      	str	r3, [r4, #36]	; 0x24
 8013066:	4b05      	ldr	r3, [pc, #20]	; (801307c <std+0x3c>)
 8013068:	62a3      	str	r3, [r4, #40]	; 0x28
 801306a:	4b05      	ldr	r3, [pc, #20]	; (8013080 <std+0x40>)
 801306c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801306e:	4b05      	ldr	r3, [pc, #20]	; (8013084 <std+0x44>)
 8013070:	6224      	str	r4, [r4, #32]
 8013072:	6323      	str	r3, [r4, #48]	; 0x30
 8013074:	bd10      	pop	{r4, pc}
 8013076:	bf00      	nop
 8013078:	080147f9 	.word	0x080147f9
 801307c:	0801481b 	.word	0x0801481b
 8013080:	08014853 	.word	0x08014853
 8013084:	08014877 	.word	0x08014877

08013088 <_cleanup_r>:
 8013088:	4901      	ldr	r1, [pc, #4]	; (8013090 <_cleanup_r+0x8>)
 801308a:	f000 b885 	b.w	8013198 <_fwalk_reent>
 801308e:	bf00      	nop
 8013090:	08012fed 	.word	0x08012fed

08013094 <__sfmoreglue>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	1e4a      	subs	r2, r1, #1
 8013098:	2568      	movs	r5, #104	; 0x68
 801309a:	4355      	muls	r5, r2
 801309c:	460e      	mov	r6, r1
 801309e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80130a2:	f001 f8a7 	bl	80141f4 <_malloc_r>
 80130a6:	4604      	mov	r4, r0
 80130a8:	b140      	cbz	r0, 80130bc <__sfmoreglue+0x28>
 80130aa:	2100      	movs	r1, #0
 80130ac:	e9c0 1600 	strd	r1, r6, [r0]
 80130b0:	300c      	adds	r0, #12
 80130b2:	60a0      	str	r0, [r4, #8]
 80130b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80130b8:	f7fd fc91 	bl	80109de <memset>
 80130bc:	4620      	mov	r0, r4
 80130be:	bd70      	pop	{r4, r5, r6, pc}

080130c0 <__sinit>:
 80130c0:	6983      	ldr	r3, [r0, #24]
 80130c2:	b510      	push	{r4, lr}
 80130c4:	4604      	mov	r4, r0
 80130c6:	bb33      	cbnz	r3, 8013116 <__sinit+0x56>
 80130c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80130cc:	6503      	str	r3, [r0, #80]	; 0x50
 80130ce:	4b12      	ldr	r3, [pc, #72]	; (8013118 <__sinit+0x58>)
 80130d0:	4a12      	ldr	r2, [pc, #72]	; (801311c <__sinit+0x5c>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	6282      	str	r2, [r0, #40]	; 0x28
 80130d6:	4298      	cmp	r0, r3
 80130d8:	bf04      	itt	eq
 80130da:	2301      	moveq	r3, #1
 80130dc:	6183      	streq	r3, [r0, #24]
 80130de:	f000 f81f 	bl	8013120 <__sfp>
 80130e2:	6060      	str	r0, [r4, #4]
 80130e4:	4620      	mov	r0, r4
 80130e6:	f000 f81b 	bl	8013120 <__sfp>
 80130ea:	60a0      	str	r0, [r4, #8]
 80130ec:	4620      	mov	r0, r4
 80130ee:	f000 f817 	bl	8013120 <__sfp>
 80130f2:	2200      	movs	r2, #0
 80130f4:	60e0      	str	r0, [r4, #12]
 80130f6:	2104      	movs	r1, #4
 80130f8:	6860      	ldr	r0, [r4, #4]
 80130fa:	f7ff ffa1 	bl	8013040 <std>
 80130fe:	2201      	movs	r2, #1
 8013100:	2109      	movs	r1, #9
 8013102:	68a0      	ldr	r0, [r4, #8]
 8013104:	f7ff ff9c 	bl	8013040 <std>
 8013108:	2202      	movs	r2, #2
 801310a:	2112      	movs	r1, #18
 801310c:	68e0      	ldr	r0, [r4, #12]
 801310e:	f7ff ff97 	bl	8013040 <std>
 8013112:	2301      	movs	r3, #1
 8013114:	61a3      	str	r3, [r4, #24]
 8013116:	bd10      	pop	{r4, pc}
 8013118:	08016b34 	.word	0x08016b34
 801311c:	08013089 	.word	0x08013089

08013120 <__sfp>:
 8013120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013122:	4b1b      	ldr	r3, [pc, #108]	; (8013190 <__sfp+0x70>)
 8013124:	681e      	ldr	r6, [r3, #0]
 8013126:	69b3      	ldr	r3, [r6, #24]
 8013128:	4607      	mov	r7, r0
 801312a:	b913      	cbnz	r3, 8013132 <__sfp+0x12>
 801312c:	4630      	mov	r0, r6
 801312e:	f7ff ffc7 	bl	80130c0 <__sinit>
 8013132:	3648      	adds	r6, #72	; 0x48
 8013134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013138:	3b01      	subs	r3, #1
 801313a:	d503      	bpl.n	8013144 <__sfp+0x24>
 801313c:	6833      	ldr	r3, [r6, #0]
 801313e:	b133      	cbz	r3, 801314e <__sfp+0x2e>
 8013140:	6836      	ldr	r6, [r6, #0]
 8013142:	e7f7      	b.n	8013134 <__sfp+0x14>
 8013144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013148:	b16d      	cbz	r5, 8013166 <__sfp+0x46>
 801314a:	3468      	adds	r4, #104	; 0x68
 801314c:	e7f4      	b.n	8013138 <__sfp+0x18>
 801314e:	2104      	movs	r1, #4
 8013150:	4638      	mov	r0, r7
 8013152:	f7ff ff9f 	bl	8013094 <__sfmoreglue>
 8013156:	6030      	str	r0, [r6, #0]
 8013158:	2800      	cmp	r0, #0
 801315a:	d1f1      	bne.n	8013140 <__sfp+0x20>
 801315c:	230c      	movs	r3, #12
 801315e:	603b      	str	r3, [r7, #0]
 8013160:	4604      	mov	r4, r0
 8013162:	4620      	mov	r0, r4
 8013164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013166:	4b0b      	ldr	r3, [pc, #44]	; (8013194 <__sfp+0x74>)
 8013168:	6665      	str	r5, [r4, #100]	; 0x64
 801316a:	e9c4 5500 	strd	r5, r5, [r4]
 801316e:	60a5      	str	r5, [r4, #8]
 8013170:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013174:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013178:	2208      	movs	r2, #8
 801317a:	4629      	mov	r1, r5
 801317c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013180:	f7fd fc2d 	bl	80109de <memset>
 8013184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801318c:	e7e9      	b.n	8013162 <__sfp+0x42>
 801318e:	bf00      	nop
 8013190:	08016b34 	.word	0x08016b34
 8013194:	ffff0001 	.word	0xffff0001

08013198 <_fwalk_reent>:
 8013198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801319c:	4680      	mov	r8, r0
 801319e:	4689      	mov	r9, r1
 80131a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131a4:	2600      	movs	r6, #0
 80131a6:	b914      	cbnz	r4, 80131ae <_fwalk_reent+0x16>
 80131a8:	4630      	mov	r0, r6
 80131aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80131b2:	3f01      	subs	r7, #1
 80131b4:	d501      	bpl.n	80131ba <_fwalk_reent+0x22>
 80131b6:	6824      	ldr	r4, [r4, #0]
 80131b8:	e7f5      	b.n	80131a6 <_fwalk_reent+0xe>
 80131ba:	89ab      	ldrh	r3, [r5, #12]
 80131bc:	2b01      	cmp	r3, #1
 80131be:	d907      	bls.n	80131d0 <_fwalk_reent+0x38>
 80131c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131c4:	3301      	adds	r3, #1
 80131c6:	d003      	beq.n	80131d0 <_fwalk_reent+0x38>
 80131c8:	4629      	mov	r1, r5
 80131ca:	4640      	mov	r0, r8
 80131cc:	47c8      	blx	r9
 80131ce:	4306      	orrs	r6, r0
 80131d0:	3568      	adds	r5, #104	; 0x68
 80131d2:	e7ee      	b.n	80131b2 <_fwalk_reent+0x1a>

080131d4 <rshift>:
 80131d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d6:	6906      	ldr	r6, [r0, #16]
 80131d8:	114b      	asrs	r3, r1, #5
 80131da:	429e      	cmp	r6, r3
 80131dc:	f100 0414 	add.w	r4, r0, #20
 80131e0:	dd30      	ble.n	8013244 <rshift+0x70>
 80131e2:	f011 011f 	ands.w	r1, r1, #31
 80131e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80131ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80131ee:	d108      	bne.n	8013202 <rshift+0x2e>
 80131f0:	4621      	mov	r1, r4
 80131f2:	42b2      	cmp	r2, r6
 80131f4:	460b      	mov	r3, r1
 80131f6:	d211      	bcs.n	801321c <rshift+0x48>
 80131f8:	f852 3b04 	ldr.w	r3, [r2], #4
 80131fc:	f841 3b04 	str.w	r3, [r1], #4
 8013200:	e7f7      	b.n	80131f2 <rshift+0x1e>
 8013202:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013206:	f1c1 0c20 	rsb	ip, r1, #32
 801320a:	40cd      	lsrs	r5, r1
 801320c:	3204      	adds	r2, #4
 801320e:	4623      	mov	r3, r4
 8013210:	42b2      	cmp	r2, r6
 8013212:	4617      	mov	r7, r2
 8013214:	d30c      	bcc.n	8013230 <rshift+0x5c>
 8013216:	601d      	str	r5, [r3, #0]
 8013218:	b105      	cbz	r5, 801321c <rshift+0x48>
 801321a:	3304      	adds	r3, #4
 801321c:	1b1a      	subs	r2, r3, r4
 801321e:	42a3      	cmp	r3, r4
 8013220:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013224:	bf08      	it	eq
 8013226:	2300      	moveq	r3, #0
 8013228:	6102      	str	r2, [r0, #16]
 801322a:	bf08      	it	eq
 801322c:	6143      	streq	r3, [r0, #20]
 801322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013230:	683f      	ldr	r7, [r7, #0]
 8013232:	fa07 f70c 	lsl.w	r7, r7, ip
 8013236:	433d      	orrs	r5, r7
 8013238:	f843 5b04 	str.w	r5, [r3], #4
 801323c:	f852 5b04 	ldr.w	r5, [r2], #4
 8013240:	40cd      	lsrs	r5, r1
 8013242:	e7e5      	b.n	8013210 <rshift+0x3c>
 8013244:	4623      	mov	r3, r4
 8013246:	e7e9      	b.n	801321c <rshift+0x48>

08013248 <__hexdig_fun>:
 8013248:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801324c:	2b09      	cmp	r3, #9
 801324e:	d802      	bhi.n	8013256 <__hexdig_fun+0xe>
 8013250:	3820      	subs	r0, #32
 8013252:	b2c0      	uxtb	r0, r0
 8013254:	4770      	bx	lr
 8013256:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801325a:	2b05      	cmp	r3, #5
 801325c:	d801      	bhi.n	8013262 <__hexdig_fun+0x1a>
 801325e:	3847      	subs	r0, #71	; 0x47
 8013260:	e7f7      	b.n	8013252 <__hexdig_fun+0xa>
 8013262:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013266:	2b05      	cmp	r3, #5
 8013268:	d801      	bhi.n	801326e <__hexdig_fun+0x26>
 801326a:	3827      	subs	r0, #39	; 0x27
 801326c:	e7f1      	b.n	8013252 <__hexdig_fun+0xa>
 801326e:	2000      	movs	r0, #0
 8013270:	4770      	bx	lr

08013272 <__gethex>:
 8013272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013276:	b08b      	sub	sp, #44	; 0x2c
 8013278:	468a      	mov	sl, r1
 801327a:	9002      	str	r0, [sp, #8]
 801327c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801327e:	9306      	str	r3, [sp, #24]
 8013280:	4690      	mov	r8, r2
 8013282:	f000 facd 	bl	8013820 <__localeconv_l>
 8013286:	6803      	ldr	r3, [r0, #0]
 8013288:	9303      	str	r3, [sp, #12]
 801328a:	4618      	mov	r0, r3
 801328c:	f7ec ffa0 	bl	80001d0 <strlen>
 8013290:	9b03      	ldr	r3, [sp, #12]
 8013292:	9001      	str	r0, [sp, #4]
 8013294:	4403      	add	r3, r0
 8013296:	f04f 0b00 	mov.w	fp, #0
 801329a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801329e:	9307      	str	r3, [sp, #28]
 80132a0:	f8da 3000 	ldr.w	r3, [sl]
 80132a4:	3302      	adds	r3, #2
 80132a6:	461f      	mov	r7, r3
 80132a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80132ac:	2830      	cmp	r0, #48	; 0x30
 80132ae:	d06c      	beq.n	801338a <__gethex+0x118>
 80132b0:	f7ff ffca 	bl	8013248 <__hexdig_fun>
 80132b4:	4604      	mov	r4, r0
 80132b6:	2800      	cmp	r0, #0
 80132b8:	d16a      	bne.n	8013390 <__gethex+0x11e>
 80132ba:	9a01      	ldr	r2, [sp, #4]
 80132bc:	9903      	ldr	r1, [sp, #12]
 80132be:	4638      	mov	r0, r7
 80132c0:	f001 fadd 	bl	801487e <strncmp>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d166      	bne.n	8013396 <__gethex+0x124>
 80132c8:	9b01      	ldr	r3, [sp, #4]
 80132ca:	5cf8      	ldrb	r0, [r7, r3]
 80132cc:	18fe      	adds	r6, r7, r3
 80132ce:	f7ff ffbb 	bl	8013248 <__hexdig_fun>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	d062      	beq.n	801339c <__gethex+0x12a>
 80132d6:	4633      	mov	r3, r6
 80132d8:	7818      	ldrb	r0, [r3, #0]
 80132da:	2830      	cmp	r0, #48	; 0x30
 80132dc:	461f      	mov	r7, r3
 80132de:	f103 0301 	add.w	r3, r3, #1
 80132e2:	d0f9      	beq.n	80132d8 <__gethex+0x66>
 80132e4:	f7ff ffb0 	bl	8013248 <__hexdig_fun>
 80132e8:	fab0 f580 	clz	r5, r0
 80132ec:	096d      	lsrs	r5, r5, #5
 80132ee:	4634      	mov	r4, r6
 80132f0:	f04f 0b01 	mov.w	fp, #1
 80132f4:	463a      	mov	r2, r7
 80132f6:	4616      	mov	r6, r2
 80132f8:	3201      	adds	r2, #1
 80132fa:	7830      	ldrb	r0, [r6, #0]
 80132fc:	f7ff ffa4 	bl	8013248 <__hexdig_fun>
 8013300:	2800      	cmp	r0, #0
 8013302:	d1f8      	bne.n	80132f6 <__gethex+0x84>
 8013304:	9a01      	ldr	r2, [sp, #4]
 8013306:	9903      	ldr	r1, [sp, #12]
 8013308:	4630      	mov	r0, r6
 801330a:	f001 fab8 	bl	801487e <strncmp>
 801330e:	b950      	cbnz	r0, 8013326 <__gethex+0xb4>
 8013310:	b954      	cbnz	r4, 8013328 <__gethex+0xb6>
 8013312:	9b01      	ldr	r3, [sp, #4]
 8013314:	18f4      	adds	r4, r6, r3
 8013316:	4622      	mov	r2, r4
 8013318:	4616      	mov	r6, r2
 801331a:	3201      	adds	r2, #1
 801331c:	7830      	ldrb	r0, [r6, #0]
 801331e:	f7ff ff93 	bl	8013248 <__hexdig_fun>
 8013322:	2800      	cmp	r0, #0
 8013324:	d1f8      	bne.n	8013318 <__gethex+0xa6>
 8013326:	b10c      	cbz	r4, 801332c <__gethex+0xba>
 8013328:	1ba4      	subs	r4, r4, r6
 801332a:	00a4      	lsls	r4, r4, #2
 801332c:	7833      	ldrb	r3, [r6, #0]
 801332e:	2b50      	cmp	r3, #80	; 0x50
 8013330:	d001      	beq.n	8013336 <__gethex+0xc4>
 8013332:	2b70      	cmp	r3, #112	; 0x70
 8013334:	d140      	bne.n	80133b8 <__gethex+0x146>
 8013336:	7873      	ldrb	r3, [r6, #1]
 8013338:	2b2b      	cmp	r3, #43	; 0x2b
 801333a:	d031      	beq.n	80133a0 <__gethex+0x12e>
 801333c:	2b2d      	cmp	r3, #45	; 0x2d
 801333e:	d033      	beq.n	80133a8 <__gethex+0x136>
 8013340:	1c71      	adds	r1, r6, #1
 8013342:	f04f 0900 	mov.w	r9, #0
 8013346:	7808      	ldrb	r0, [r1, #0]
 8013348:	f7ff ff7e 	bl	8013248 <__hexdig_fun>
 801334c:	1e43      	subs	r3, r0, #1
 801334e:	b2db      	uxtb	r3, r3
 8013350:	2b18      	cmp	r3, #24
 8013352:	d831      	bhi.n	80133b8 <__gethex+0x146>
 8013354:	f1a0 0210 	sub.w	r2, r0, #16
 8013358:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801335c:	f7ff ff74 	bl	8013248 <__hexdig_fun>
 8013360:	1e43      	subs	r3, r0, #1
 8013362:	b2db      	uxtb	r3, r3
 8013364:	2b18      	cmp	r3, #24
 8013366:	d922      	bls.n	80133ae <__gethex+0x13c>
 8013368:	f1b9 0f00 	cmp.w	r9, #0
 801336c:	d000      	beq.n	8013370 <__gethex+0xfe>
 801336e:	4252      	negs	r2, r2
 8013370:	4414      	add	r4, r2
 8013372:	f8ca 1000 	str.w	r1, [sl]
 8013376:	b30d      	cbz	r5, 80133bc <__gethex+0x14a>
 8013378:	f1bb 0f00 	cmp.w	fp, #0
 801337c:	bf0c      	ite	eq
 801337e:	2706      	moveq	r7, #6
 8013380:	2700      	movne	r7, #0
 8013382:	4638      	mov	r0, r7
 8013384:	b00b      	add	sp, #44	; 0x2c
 8013386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801338a:	f10b 0b01 	add.w	fp, fp, #1
 801338e:	e78a      	b.n	80132a6 <__gethex+0x34>
 8013390:	2500      	movs	r5, #0
 8013392:	462c      	mov	r4, r5
 8013394:	e7ae      	b.n	80132f4 <__gethex+0x82>
 8013396:	463e      	mov	r6, r7
 8013398:	2501      	movs	r5, #1
 801339a:	e7c7      	b.n	801332c <__gethex+0xba>
 801339c:	4604      	mov	r4, r0
 801339e:	e7fb      	b.n	8013398 <__gethex+0x126>
 80133a0:	f04f 0900 	mov.w	r9, #0
 80133a4:	1cb1      	adds	r1, r6, #2
 80133a6:	e7ce      	b.n	8013346 <__gethex+0xd4>
 80133a8:	f04f 0901 	mov.w	r9, #1
 80133ac:	e7fa      	b.n	80133a4 <__gethex+0x132>
 80133ae:	230a      	movs	r3, #10
 80133b0:	fb03 0202 	mla	r2, r3, r2, r0
 80133b4:	3a10      	subs	r2, #16
 80133b6:	e7cf      	b.n	8013358 <__gethex+0xe6>
 80133b8:	4631      	mov	r1, r6
 80133ba:	e7da      	b.n	8013372 <__gethex+0x100>
 80133bc:	1bf3      	subs	r3, r6, r7
 80133be:	3b01      	subs	r3, #1
 80133c0:	4629      	mov	r1, r5
 80133c2:	2b07      	cmp	r3, #7
 80133c4:	dc49      	bgt.n	801345a <__gethex+0x1e8>
 80133c6:	9802      	ldr	r0, [sp, #8]
 80133c8:	f000 fab8 	bl	801393c <_Balloc>
 80133cc:	9b01      	ldr	r3, [sp, #4]
 80133ce:	f100 0914 	add.w	r9, r0, #20
 80133d2:	f04f 0b00 	mov.w	fp, #0
 80133d6:	f1c3 0301 	rsb	r3, r3, #1
 80133da:	4605      	mov	r5, r0
 80133dc:	f8cd 9010 	str.w	r9, [sp, #16]
 80133e0:	46da      	mov	sl, fp
 80133e2:	9308      	str	r3, [sp, #32]
 80133e4:	42b7      	cmp	r7, r6
 80133e6:	d33b      	bcc.n	8013460 <__gethex+0x1ee>
 80133e8:	9804      	ldr	r0, [sp, #16]
 80133ea:	f840 ab04 	str.w	sl, [r0], #4
 80133ee:	eba0 0009 	sub.w	r0, r0, r9
 80133f2:	1080      	asrs	r0, r0, #2
 80133f4:	6128      	str	r0, [r5, #16]
 80133f6:	0147      	lsls	r7, r0, #5
 80133f8:	4650      	mov	r0, sl
 80133fa:	f000 fb63 	bl	8013ac4 <__hi0bits>
 80133fe:	f8d8 6000 	ldr.w	r6, [r8]
 8013402:	1a3f      	subs	r7, r7, r0
 8013404:	42b7      	cmp	r7, r6
 8013406:	dd64      	ble.n	80134d2 <__gethex+0x260>
 8013408:	1bbf      	subs	r7, r7, r6
 801340a:	4639      	mov	r1, r7
 801340c:	4628      	mov	r0, r5
 801340e:	f000 fe73 	bl	80140f8 <__any_on>
 8013412:	4682      	mov	sl, r0
 8013414:	b178      	cbz	r0, 8013436 <__gethex+0x1c4>
 8013416:	1e7b      	subs	r3, r7, #1
 8013418:	1159      	asrs	r1, r3, #5
 801341a:	f003 021f 	and.w	r2, r3, #31
 801341e:	f04f 0a01 	mov.w	sl, #1
 8013422:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013426:	fa0a f202 	lsl.w	r2, sl, r2
 801342a:	420a      	tst	r2, r1
 801342c:	d003      	beq.n	8013436 <__gethex+0x1c4>
 801342e:	4553      	cmp	r3, sl
 8013430:	dc46      	bgt.n	80134c0 <__gethex+0x24e>
 8013432:	f04f 0a02 	mov.w	sl, #2
 8013436:	4639      	mov	r1, r7
 8013438:	4628      	mov	r0, r5
 801343a:	f7ff fecb 	bl	80131d4 <rshift>
 801343e:	443c      	add	r4, r7
 8013440:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013444:	42a3      	cmp	r3, r4
 8013446:	da52      	bge.n	80134ee <__gethex+0x27c>
 8013448:	4629      	mov	r1, r5
 801344a:	9802      	ldr	r0, [sp, #8]
 801344c:	f000 faaa 	bl	80139a4 <_Bfree>
 8013450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013452:	2300      	movs	r3, #0
 8013454:	6013      	str	r3, [r2, #0]
 8013456:	27a3      	movs	r7, #163	; 0xa3
 8013458:	e793      	b.n	8013382 <__gethex+0x110>
 801345a:	3101      	adds	r1, #1
 801345c:	105b      	asrs	r3, r3, #1
 801345e:	e7b0      	b.n	80133c2 <__gethex+0x150>
 8013460:	1e73      	subs	r3, r6, #1
 8013462:	9305      	str	r3, [sp, #20]
 8013464:	9a07      	ldr	r2, [sp, #28]
 8013466:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801346a:	4293      	cmp	r3, r2
 801346c:	d018      	beq.n	80134a0 <__gethex+0x22e>
 801346e:	f1bb 0f20 	cmp.w	fp, #32
 8013472:	d107      	bne.n	8013484 <__gethex+0x212>
 8013474:	9b04      	ldr	r3, [sp, #16]
 8013476:	f8c3 a000 	str.w	sl, [r3]
 801347a:	3304      	adds	r3, #4
 801347c:	f04f 0a00 	mov.w	sl, #0
 8013480:	9304      	str	r3, [sp, #16]
 8013482:	46d3      	mov	fp, sl
 8013484:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013488:	f7ff fede 	bl	8013248 <__hexdig_fun>
 801348c:	f000 000f 	and.w	r0, r0, #15
 8013490:	fa00 f00b 	lsl.w	r0, r0, fp
 8013494:	ea4a 0a00 	orr.w	sl, sl, r0
 8013498:	f10b 0b04 	add.w	fp, fp, #4
 801349c:	9b05      	ldr	r3, [sp, #20]
 801349e:	e00d      	b.n	80134bc <__gethex+0x24a>
 80134a0:	9b05      	ldr	r3, [sp, #20]
 80134a2:	9a08      	ldr	r2, [sp, #32]
 80134a4:	4413      	add	r3, r2
 80134a6:	42bb      	cmp	r3, r7
 80134a8:	d3e1      	bcc.n	801346e <__gethex+0x1fc>
 80134aa:	4618      	mov	r0, r3
 80134ac:	9a01      	ldr	r2, [sp, #4]
 80134ae:	9903      	ldr	r1, [sp, #12]
 80134b0:	9309      	str	r3, [sp, #36]	; 0x24
 80134b2:	f001 f9e4 	bl	801487e <strncmp>
 80134b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d1d8      	bne.n	801346e <__gethex+0x1fc>
 80134bc:	461e      	mov	r6, r3
 80134be:	e791      	b.n	80133e4 <__gethex+0x172>
 80134c0:	1eb9      	subs	r1, r7, #2
 80134c2:	4628      	mov	r0, r5
 80134c4:	f000 fe18 	bl	80140f8 <__any_on>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d0b2      	beq.n	8013432 <__gethex+0x1c0>
 80134cc:	f04f 0a03 	mov.w	sl, #3
 80134d0:	e7b1      	b.n	8013436 <__gethex+0x1c4>
 80134d2:	da09      	bge.n	80134e8 <__gethex+0x276>
 80134d4:	1bf7      	subs	r7, r6, r7
 80134d6:	4629      	mov	r1, r5
 80134d8:	463a      	mov	r2, r7
 80134da:	9802      	ldr	r0, [sp, #8]
 80134dc:	f000 fc2e 	bl	8013d3c <__lshift>
 80134e0:	1be4      	subs	r4, r4, r7
 80134e2:	4605      	mov	r5, r0
 80134e4:	f100 0914 	add.w	r9, r0, #20
 80134e8:	f04f 0a00 	mov.w	sl, #0
 80134ec:	e7a8      	b.n	8013440 <__gethex+0x1ce>
 80134ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80134f2:	42a0      	cmp	r0, r4
 80134f4:	dd6a      	ble.n	80135cc <__gethex+0x35a>
 80134f6:	1b04      	subs	r4, r0, r4
 80134f8:	42a6      	cmp	r6, r4
 80134fa:	dc2e      	bgt.n	801355a <__gethex+0x2e8>
 80134fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013500:	2b02      	cmp	r3, #2
 8013502:	d022      	beq.n	801354a <__gethex+0x2d8>
 8013504:	2b03      	cmp	r3, #3
 8013506:	d024      	beq.n	8013552 <__gethex+0x2e0>
 8013508:	2b01      	cmp	r3, #1
 801350a:	d115      	bne.n	8013538 <__gethex+0x2c6>
 801350c:	42a6      	cmp	r6, r4
 801350e:	d113      	bne.n	8013538 <__gethex+0x2c6>
 8013510:	2e01      	cmp	r6, #1
 8013512:	dc0b      	bgt.n	801352c <__gethex+0x2ba>
 8013514:	9a06      	ldr	r2, [sp, #24]
 8013516:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801351a:	6013      	str	r3, [r2, #0]
 801351c:	2301      	movs	r3, #1
 801351e:	612b      	str	r3, [r5, #16]
 8013520:	f8c9 3000 	str.w	r3, [r9]
 8013524:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013526:	2762      	movs	r7, #98	; 0x62
 8013528:	601d      	str	r5, [r3, #0]
 801352a:	e72a      	b.n	8013382 <__gethex+0x110>
 801352c:	1e71      	subs	r1, r6, #1
 801352e:	4628      	mov	r0, r5
 8013530:	f000 fde2 	bl	80140f8 <__any_on>
 8013534:	2800      	cmp	r0, #0
 8013536:	d1ed      	bne.n	8013514 <__gethex+0x2a2>
 8013538:	4629      	mov	r1, r5
 801353a:	9802      	ldr	r0, [sp, #8]
 801353c:	f000 fa32 	bl	80139a4 <_Bfree>
 8013540:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013542:	2300      	movs	r3, #0
 8013544:	6013      	str	r3, [r2, #0]
 8013546:	2750      	movs	r7, #80	; 0x50
 8013548:	e71b      	b.n	8013382 <__gethex+0x110>
 801354a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801354c:	2b00      	cmp	r3, #0
 801354e:	d0e1      	beq.n	8013514 <__gethex+0x2a2>
 8013550:	e7f2      	b.n	8013538 <__gethex+0x2c6>
 8013552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013554:	2b00      	cmp	r3, #0
 8013556:	d1dd      	bne.n	8013514 <__gethex+0x2a2>
 8013558:	e7ee      	b.n	8013538 <__gethex+0x2c6>
 801355a:	1e67      	subs	r7, r4, #1
 801355c:	f1ba 0f00 	cmp.w	sl, #0
 8013560:	d131      	bne.n	80135c6 <__gethex+0x354>
 8013562:	b127      	cbz	r7, 801356e <__gethex+0x2fc>
 8013564:	4639      	mov	r1, r7
 8013566:	4628      	mov	r0, r5
 8013568:	f000 fdc6 	bl	80140f8 <__any_on>
 801356c:	4682      	mov	sl, r0
 801356e:	117a      	asrs	r2, r7, #5
 8013570:	2301      	movs	r3, #1
 8013572:	f007 071f 	and.w	r7, r7, #31
 8013576:	fa03 f707 	lsl.w	r7, r3, r7
 801357a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801357e:	4621      	mov	r1, r4
 8013580:	421f      	tst	r7, r3
 8013582:	4628      	mov	r0, r5
 8013584:	bf18      	it	ne
 8013586:	f04a 0a02 	orrne.w	sl, sl, #2
 801358a:	1b36      	subs	r6, r6, r4
 801358c:	f7ff fe22 	bl	80131d4 <rshift>
 8013590:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013594:	2702      	movs	r7, #2
 8013596:	f1ba 0f00 	cmp.w	sl, #0
 801359a:	d048      	beq.n	801362e <__gethex+0x3bc>
 801359c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80135a0:	2b02      	cmp	r3, #2
 80135a2:	d015      	beq.n	80135d0 <__gethex+0x35e>
 80135a4:	2b03      	cmp	r3, #3
 80135a6:	d017      	beq.n	80135d8 <__gethex+0x366>
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d109      	bne.n	80135c0 <__gethex+0x34e>
 80135ac:	f01a 0f02 	tst.w	sl, #2
 80135b0:	d006      	beq.n	80135c0 <__gethex+0x34e>
 80135b2:	f8d9 3000 	ldr.w	r3, [r9]
 80135b6:	ea4a 0a03 	orr.w	sl, sl, r3
 80135ba:	f01a 0f01 	tst.w	sl, #1
 80135be:	d10e      	bne.n	80135de <__gethex+0x36c>
 80135c0:	f047 0710 	orr.w	r7, r7, #16
 80135c4:	e033      	b.n	801362e <__gethex+0x3bc>
 80135c6:	f04f 0a01 	mov.w	sl, #1
 80135ca:	e7d0      	b.n	801356e <__gethex+0x2fc>
 80135cc:	2701      	movs	r7, #1
 80135ce:	e7e2      	b.n	8013596 <__gethex+0x324>
 80135d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135d2:	f1c3 0301 	rsb	r3, r3, #1
 80135d6:	9315      	str	r3, [sp, #84]	; 0x54
 80135d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d0f0      	beq.n	80135c0 <__gethex+0x34e>
 80135de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80135e2:	f105 0314 	add.w	r3, r5, #20
 80135e6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80135ea:	eb03 010a 	add.w	r1, r3, sl
 80135ee:	f04f 0c00 	mov.w	ip, #0
 80135f2:	4618      	mov	r0, r3
 80135f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80135f8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80135fc:	d01c      	beq.n	8013638 <__gethex+0x3c6>
 80135fe:	3201      	adds	r2, #1
 8013600:	6002      	str	r2, [r0, #0]
 8013602:	2f02      	cmp	r7, #2
 8013604:	f105 0314 	add.w	r3, r5, #20
 8013608:	d138      	bne.n	801367c <__gethex+0x40a>
 801360a:	f8d8 2000 	ldr.w	r2, [r8]
 801360e:	3a01      	subs	r2, #1
 8013610:	42b2      	cmp	r2, r6
 8013612:	d10a      	bne.n	801362a <__gethex+0x3b8>
 8013614:	1171      	asrs	r1, r6, #5
 8013616:	2201      	movs	r2, #1
 8013618:	f006 061f 	and.w	r6, r6, #31
 801361c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013620:	fa02 f606 	lsl.w	r6, r2, r6
 8013624:	421e      	tst	r6, r3
 8013626:	bf18      	it	ne
 8013628:	4617      	movne	r7, r2
 801362a:	f047 0720 	orr.w	r7, r7, #32
 801362e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013630:	601d      	str	r5, [r3, #0]
 8013632:	9b06      	ldr	r3, [sp, #24]
 8013634:	601c      	str	r4, [r3, #0]
 8013636:	e6a4      	b.n	8013382 <__gethex+0x110>
 8013638:	4299      	cmp	r1, r3
 801363a:	f843 cc04 	str.w	ip, [r3, #-4]
 801363e:	d8d8      	bhi.n	80135f2 <__gethex+0x380>
 8013640:	68ab      	ldr	r3, [r5, #8]
 8013642:	4599      	cmp	r9, r3
 8013644:	db12      	blt.n	801366c <__gethex+0x3fa>
 8013646:	6869      	ldr	r1, [r5, #4]
 8013648:	9802      	ldr	r0, [sp, #8]
 801364a:	3101      	adds	r1, #1
 801364c:	f000 f976 	bl	801393c <_Balloc>
 8013650:	692a      	ldr	r2, [r5, #16]
 8013652:	3202      	adds	r2, #2
 8013654:	f105 010c 	add.w	r1, r5, #12
 8013658:	4683      	mov	fp, r0
 801365a:	0092      	lsls	r2, r2, #2
 801365c:	300c      	adds	r0, #12
 801365e:	f7fd f9b3 	bl	80109c8 <memcpy>
 8013662:	4629      	mov	r1, r5
 8013664:	9802      	ldr	r0, [sp, #8]
 8013666:	f000 f99d 	bl	80139a4 <_Bfree>
 801366a:	465d      	mov	r5, fp
 801366c:	692b      	ldr	r3, [r5, #16]
 801366e:	1c5a      	adds	r2, r3, #1
 8013670:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013674:	612a      	str	r2, [r5, #16]
 8013676:	2201      	movs	r2, #1
 8013678:	615a      	str	r2, [r3, #20]
 801367a:	e7c2      	b.n	8013602 <__gethex+0x390>
 801367c:	692a      	ldr	r2, [r5, #16]
 801367e:	454a      	cmp	r2, r9
 8013680:	dd0b      	ble.n	801369a <__gethex+0x428>
 8013682:	2101      	movs	r1, #1
 8013684:	4628      	mov	r0, r5
 8013686:	f7ff fda5 	bl	80131d4 <rshift>
 801368a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801368e:	3401      	adds	r4, #1
 8013690:	42a3      	cmp	r3, r4
 8013692:	f6ff aed9 	blt.w	8013448 <__gethex+0x1d6>
 8013696:	2701      	movs	r7, #1
 8013698:	e7c7      	b.n	801362a <__gethex+0x3b8>
 801369a:	f016 061f 	ands.w	r6, r6, #31
 801369e:	d0fa      	beq.n	8013696 <__gethex+0x424>
 80136a0:	449a      	add	sl, r3
 80136a2:	f1c6 0620 	rsb	r6, r6, #32
 80136a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80136aa:	f000 fa0b 	bl	8013ac4 <__hi0bits>
 80136ae:	42b0      	cmp	r0, r6
 80136b0:	dbe7      	blt.n	8013682 <__gethex+0x410>
 80136b2:	e7f0      	b.n	8013696 <__gethex+0x424>

080136b4 <L_shift>:
 80136b4:	f1c2 0208 	rsb	r2, r2, #8
 80136b8:	0092      	lsls	r2, r2, #2
 80136ba:	b570      	push	{r4, r5, r6, lr}
 80136bc:	f1c2 0620 	rsb	r6, r2, #32
 80136c0:	6843      	ldr	r3, [r0, #4]
 80136c2:	6804      	ldr	r4, [r0, #0]
 80136c4:	fa03 f506 	lsl.w	r5, r3, r6
 80136c8:	432c      	orrs	r4, r5
 80136ca:	40d3      	lsrs	r3, r2
 80136cc:	6004      	str	r4, [r0, #0]
 80136ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80136d2:	4288      	cmp	r0, r1
 80136d4:	d3f4      	bcc.n	80136c0 <L_shift+0xc>
 80136d6:	bd70      	pop	{r4, r5, r6, pc}

080136d8 <__match>:
 80136d8:	b530      	push	{r4, r5, lr}
 80136da:	6803      	ldr	r3, [r0, #0]
 80136dc:	3301      	adds	r3, #1
 80136de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136e2:	b914      	cbnz	r4, 80136ea <__match+0x12>
 80136e4:	6003      	str	r3, [r0, #0]
 80136e6:	2001      	movs	r0, #1
 80136e8:	bd30      	pop	{r4, r5, pc}
 80136ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80136f2:	2d19      	cmp	r5, #25
 80136f4:	bf98      	it	ls
 80136f6:	3220      	addls	r2, #32
 80136f8:	42a2      	cmp	r2, r4
 80136fa:	d0f0      	beq.n	80136de <__match+0x6>
 80136fc:	2000      	movs	r0, #0
 80136fe:	e7f3      	b.n	80136e8 <__match+0x10>

08013700 <__hexnan>:
 8013700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013704:	680b      	ldr	r3, [r1, #0]
 8013706:	6801      	ldr	r1, [r0, #0]
 8013708:	115f      	asrs	r7, r3, #5
 801370a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801370e:	f013 031f 	ands.w	r3, r3, #31
 8013712:	b087      	sub	sp, #28
 8013714:	bf18      	it	ne
 8013716:	3704      	addne	r7, #4
 8013718:	2500      	movs	r5, #0
 801371a:	1f3e      	subs	r6, r7, #4
 801371c:	4682      	mov	sl, r0
 801371e:	4690      	mov	r8, r2
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	f847 5c04 	str.w	r5, [r7, #-4]
 8013726:	46b1      	mov	r9, r6
 8013728:	4634      	mov	r4, r6
 801372a:	9502      	str	r5, [sp, #8]
 801372c:	46ab      	mov	fp, r5
 801372e:	784a      	ldrb	r2, [r1, #1]
 8013730:	1c4b      	adds	r3, r1, #1
 8013732:	9303      	str	r3, [sp, #12]
 8013734:	b342      	cbz	r2, 8013788 <__hexnan+0x88>
 8013736:	4610      	mov	r0, r2
 8013738:	9105      	str	r1, [sp, #20]
 801373a:	9204      	str	r2, [sp, #16]
 801373c:	f7ff fd84 	bl	8013248 <__hexdig_fun>
 8013740:	2800      	cmp	r0, #0
 8013742:	d143      	bne.n	80137cc <__hexnan+0xcc>
 8013744:	9a04      	ldr	r2, [sp, #16]
 8013746:	9905      	ldr	r1, [sp, #20]
 8013748:	2a20      	cmp	r2, #32
 801374a:	d818      	bhi.n	801377e <__hexnan+0x7e>
 801374c:	9b02      	ldr	r3, [sp, #8]
 801374e:	459b      	cmp	fp, r3
 8013750:	dd13      	ble.n	801377a <__hexnan+0x7a>
 8013752:	454c      	cmp	r4, r9
 8013754:	d206      	bcs.n	8013764 <__hexnan+0x64>
 8013756:	2d07      	cmp	r5, #7
 8013758:	dc04      	bgt.n	8013764 <__hexnan+0x64>
 801375a:	462a      	mov	r2, r5
 801375c:	4649      	mov	r1, r9
 801375e:	4620      	mov	r0, r4
 8013760:	f7ff ffa8 	bl	80136b4 <L_shift>
 8013764:	4544      	cmp	r4, r8
 8013766:	d944      	bls.n	80137f2 <__hexnan+0xf2>
 8013768:	2300      	movs	r3, #0
 801376a:	f1a4 0904 	sub.w	r9, r4, #4
 801376e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013772:	f8cd b008 	str.w	fp, [sp, #8]
 8013776:	464c      	mov	r4, r9
 8013778:	461d      	mov	r5, r3
 801377a:	9903      	ldr	r1, [sp, #12]
 801377c:	e7d7      	b.n	801372e <__hexnan+0x2e>
 801377e:	2a29      	cmp	r2, #41	; 0x29
 8013780:	d14a      	bne.n	8013818 <__hexnan+0x118>
 8013782:	3102      	adds	r1, #2
 8013784:	f8ca 1000 	str.w	r1, [sl]
 8013788:	f1bb 0f00 	cmp.w	fp, #0
 801378c:	d044      	beq.n	8013818 <__hexnan+0x118>
 801378e:	454c      	cmp	r4, r9
 8013790:	d206      	bcs.n	80137a0 <__hexnan+0xa0>
 8013792:	2d07      	cmp	r5, #7
 8013794:	dc04      	bgt.n	80137a0 <__hexnan+0xa0>
 8013796:	462a      	mov	r2, r5
 8013798:	4649      	mov	r1, r9
 801379a:	4620      	mov	r0, r4
 801379c:	f7ff ff8a 	bl	80136b4 <L_shift>
 80137a0:	4544      	cmp	r4, r8
 80137a2:	d928      	bls.n	80137f6 <__hexnan+0xf6>
 80137a4:	4643      	mov	r3, r8
 80137a6:	f854 2b04 	ldr.w	r2, [r4], #4
 80137aa:	f843 2b04 	str.w	r2, [r3], #4
 80137ae:	42a6      	cmp	r6, r4
 80137b0:	d2f9      	bcs.n	80137a6 <__hexnan+0xa6>
 80137b2:	2200      	movs	r2, #0
 80137b4:	f843 2b04 	str.w	r2, [r3], #4
 80137b8:	429e      	cmp	r6, r3
 80137ba:	d2fb      	bcs.n	80137b4 <__hexnan+0xb4>
 80137bc:	6833      	ldr	r3, [r6, #0]
 80137be:	b91b      	cbnz	r3, 80137c8 <__hexnan+0xc8>
 80137c0:	4546      	cmp	r6, r8
 80137c2:	d127      	bne.n	8013814 <__hexnan+0x114>
 80137c4:	2301      	movs	r3, #1
 80137c6:	6033      	str	r3, [r6, #0]
 80137c8:	2005      	movs	r0, #5
 80137ca:	e026      	b.n	801381a <__hexnan+0x11a>
 80137cc:	3501      	adds	r5, #1
 80137ce:	2d08      	cmp	r5, #8
 80137d0:	f10b 0b01 	add.w	fp, fp, #1
 80137d4:	dd06      	ble.n	80137e4 <__hexnan+0xe4>
 80137d6:	4544      	cmp	r4, r8
 80137d8:	d9cf      	bls.n	801377a <__hexnan+0x7a>
 80137da:	2300      	movs	r3, #0
 80137dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80137e0:	2501      	movs	r5, #1
 80137e2:	3c04      	subs	r4, #4
 80137e4:	6822      	ldr	r2, [r4, #0]
 80137e6:	f000 000f 	and.w	r0, r0, #15
 80137ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80137ee:	6020      	str	r0, [r4, #0]
 80137f0:	e7c3      	b.n	801377a <__hexnan+0x7a>
 80137f2:	2508      	movs	r5, #8
 80137f4:	e7c1      	b.n	801377a <__hexnan+0x7a>
 80137f6:	9b01      	ldr	r3, [sp, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d0df      	beq.n	80137bc <__hexnan+0xbc>
 80137fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013800:	f1c3 0320 	rsb	r3, r3, #32
 8013804:	fa22 f303 	lsr.w	r3, r2, r3
 8013808:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801380c:	401a      	ands	r2, r3
 801380e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013812:	e7d3      	b.n	80137bc <__hexnan+0xbc>
 8013814:	3e04      	subs	r6, #4
 8013816:	e7d1      	b.n	80137bc <__hexnan+0xbc>
 8013818:	2004      	movs	r0, #4
 801381a:	b007      	add	sp, #28
 801381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013820 <__localeconv_l>:
 8013820:	30f0      	adds	r0, #240	; 0xf0
 8013822:	4770      	bx	lr

08013824 <_localeconv_r>:
 8013824:	4b04      	ldr	r3, [pc, #16]	; (8013838 <_localeconv_r+0x14>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	6a18      	ldr	r0, [r3, #32]
 801382a:	4b04      	ldr	r3, [pc, #16]	; (801383c <_localeconv_r+0x18>)
 801382c:	2800      	cmp	r0, #0
 801382e:	bf08      	it	eq
 8013830:	4618      	moveq	r0, r3
 8013832:	30f0      	adds	r0, #240	; 0xf0
 8013834:	4770      	bx	lr
 8013836:	bf00      	nop
 8013838:	20000178 	.word	0x20000178
 801383c:	200001dc 	.word	0x200001dc

08013840 <__swhatbuf_r>:
 8013840:	b570      	push	{r4, r5, r6, lr}
 8013842:	460e      	mov	r6, r1
 8013844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013848:	2900      	cmp	r1, #0
 801384a:	b096      	sub	sp, #88	; 0x58
 801384c:	4614      	mov	r4, r2
 801384e:	461d      	mov	r5, r3
 8013850:	da07      	bge.n	8013862 <__swhatbuf_r+0x22>
 8013852:	2300      	movs	r3, #0
 8013854:	602b      	str	r3, [r5, #0]
 8013856:	89b3      	ldrh	r3, [r6, #12]
 8013858:	061a      	lsls	r2, r3, #24
 801385a:	d410      	bmi.n	801387e <__swhatbuf_r+0x3e>
 801385c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013860:	e00e      	b.n	8013880 <__swhatbuf_r+0x40>
 8013862:	466a      	mov	r2, sp
 8013864:	f001 f84c 	bl	8014900 <_fstat_r>
 8013868:	2800      	cmp	r0, #0
 801386a:	dbf2      	blt.n	8013852 <__swhatbuf_r+0x12>
 801386c:	9a01      	ldr	r2, [sp, #4]
 801386e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013876:	425a      	negs	r2, r3
 8013878:	415a      	adcs	r2, r3
 801387a:	602a      	str	r2, [r5, #0]
 801387c:	e7ee      	b.n	801385c <__swhatbuf_r+0x1c>
 801387e:	2340      	movs	r3, #64	; 0x40
 8013880:	2000      	movs	r0, #0
 8013882:	6023      	str	r3, [r4, #0]
 8013884:	b016      	add	sp, #88	; 0x58
 8013886:	bd70      	pop	{r4, r5, r6, pc}

08013888 <__smakebuf_r>:
 8013888:	898b      	ldrh	r3, [r1, #12]
 801388a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801388c:	079d      	lsls	r5, r3, #30
 801388e:	4606      	mov	r6, r0
 8013890:	460c      	mov	r4, r1
 8013892:	d507      	bpl.n	80138a4 <__smakebuf_r+0x1c>
 8013894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013898:	6023      	str	r3, [r4, #0]
 801389a:	6123      	str	r3, [r4, #16]
 801389c:	2301      	movs	r3, #1
 801389e:	6163      	str	r3, [r4, #20]
 80138a0:	b002      	add	sp, #8
 80138a2:	bd70      	pop	{r4, r5, r6, pc}
 80138a4:	ab01      	add	r3, sp, #4
 80138a6:	466a      	mov	r2, sp
 80138a8:	f7ff ffca 	bl	8013840 <__swhatbuf_r>
 80138ac:	9900      	ldr	r1, [sp, #0]
 80138ae:	4605      	mov	r5, r0
 80138b0:	4630      	mov	r0, r6
 80138b2:	f000 fc9f 	bl	80141f4 <_malloc_r>
 80138b6:	b948      	cbnz	r0, 80138cc <__smakebuf_r+0x44>
 80138b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138bc:	059a      	lsls	r2, r3, #22
 80138be:	d4ef      	bmi.n	80138a0 <__smakebuf_r+0x18>
 80138c0:	f023 0303 	bic.w	r3, r3, #3
 80138c4:	f043 0302 	orr.w	r3, r3, #2
 80138c8:	81a3      	strh	r3, [r4, #12]
 80138ca:	e7e3      	b.n	8013894 <__smakebuf_r+0xc>
 80138cc:	4b0d      	ldr	r3, [pc, #52]	; (8013904 <__smakebuf_r+0x7c>)
 80138ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80138d0:	89a3      	ldrh	r3, [r4, #12]
 80138d2:	6020      	str	r0, [r4, #0]
 80138d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138d8:	81a3      	strh	r3, [r4, #12]
 80138da:	9b00      	ldr	r3, [sp, #0]
 80138dc:	6163      	str	r3, [r4, #20]
 80138de:	9b01      	ldr	r3, [sp, #4]
 80138e0:	6120      	str	r0, [r4, #16]
 80138e2:	b15b      	cbz	r3, 80138fc <__smakebuf_r+0x74>
 80138e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138e8:	4630      	mov	r0, r6
 80138ea:	f001 f81b 	bl	8014924 <_isatty_r>
 80138ee:	b128      	cbz	r0, 80138fc <__smakebuf_r+0x74>
 80138f0:	89a3      	ldrh	r3, [r4, #12]
 80138f2:	f023 0303 	bic.w	r3, r3, #3
 80138f6:	f043 0301 	orr.w	r3, r3, #1
 80138fa:	81a3      	strh	r3, [r4, #12]
 80138fc:	89a3      	ldrh	r3, [r4, #12]
 80138fe:	431d      	orrs	r5, r3
 8013900:	81a5      	strh	r5, [r4, #12]
 8013902:	e7cd      	b.n	80138a0 <__smakebuf_r+0x18>
 8013904:	08013089 	.word	0x08013089

08013908 <malloc>:
 8013908:	4b02      	ldr	r3, [pc, #8]	; (8013914 <malloc+0xc>)
 801390a:	4601      	mov	r1, r0
 801390c:	6818      	ldr	r0, [r3, #0]
 801390e:	f000 bc71 	b.w	80141f4 <_malloc_r>
 8013912:	bf00      	nop
 8013914:	20000178 	.word	0x20000178

08013918 <__ascii_mbtowc>:
 8013918:	b082      	sub	sp, #8
 801391a:	b901      	cbnz	r1, 801391e <__ascii_mbtowc+0x6>
 801391c:	a901      	add	r1, sp, #4
 801391e:	b142      	cbz	r2, 8013932 <__ascii_mbtowc+0x1a>
 8013920:	b14b      	cbz	r3, 8013936 <__ascii_mbtowc+0x1e>
 8013922:	7813      	ldrb	r3, [r2, #0]
 8013924:	600b      	str	r3, [r1, #0]
 8013926:	7812      	ldrb	r2, [r2, #0]
 8013928:	1c10      	adds	r0, r2, #0
 801392a:	bf18      	it	ne
 801392c:	2001      	movne	r0, #1
 801392e:	b002      	add	sp, #8
 8013930:	4770      	bx	lr
 8013932:	4610      	mov	r0, r2
 8013934:	e7fb      	b.n	801392e <__ascii_mbtowc+0x16>
 8013936:	f06f 0001 	mvn.w	r0, #1
 801393a:	e7f8      	b.n	801392e <__ascii_mbtowc+0x16>

0801393c <_Balloc>:
 801393c:	b570      	push	{r4, r5, r6, lr}
 801393e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013940:	4604      	mov	r4, r0
 8013942:	460e      	mov	r6, r1
 8013944:	b93d      	cbnz	r5, 8013956 <_Balloc+0x1a>
 8013946:	2010      	movs	r0, #16
 8013948:	f7ff ffde 	bl	8013908 <malloc>
 801394c:	6260      	str	r0, [r4, #36]	; 0x24
 801394e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013952:	6005      	str	r5, [r0, #0]
 8013954:	60c5      	str	r5, [r0, #12]
 8013956:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013958:	68eb      	ldr	r3, [r5, #12]
 801395a:	b183      	cbz	r3, 801397e <_Balloc+0x42>
 801395c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013964:	b9b8      	cbnz	r0, 8013996 <_Balloc+0x5a>
 8013966:	2101      	movs	r1, #1
 8013968:	fa01 f506 	lsl.w	r5, r1, r6
 801396c:	1d6a      	adds	r2, r5, #5
 801396e:	0092      	lsls	r2, r2, #2
 8013970:	4620      	mov	r0, r4
 8013972:	f000 fbe2 	bl	801413a <_calloc_r>
 8013976:	b160      	cbz	r0, 8013992 <_Balloc+0x56>
 8013978:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801397c:	e00e      	b.n	801399c <_Balloc+0x60>
 801397e:	2221      	movs	r2, #33	; 0x21
 8013980:	2104      	movs	r1, #4
 8013982:	4620      	mov	r0, r4
 8013984:	f000 fbd9 	bl	801413a <_calloc_r>
 8013988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801398a:	60e8      	str	r0, [r5, #12]
 801398c:	68db      	ldr	r3, [r3, #12]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d1e4      	bne.n	801395c <_Balloc+0x20>
 8013992:	2000      	movs	r0, #0
 8013994:	bd70      	pop	{r4, r5, r6, pc}
 8013996:	6802      	ldr	r2, [r0, #0]
 8013998:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801399c:	2300      	movs	r3, #0
 801399e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80139a2:	e7f7      	b.n	8013994 <_Balloc+0x58>

080139a4 <_Bfree>:
 80139a4:	b570      	push	{r4, r5, r6, lr}
 80139a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80139a8:	4606      	mov	r6, r0
 80139aa:	460d      	mov	r5, r1
 80139ac:	b93c      	cbnz	r4, 80139be <_Bfree+0x1a>
 80139ae:	2010      	movs	r0, #16
 80139b0:	f7ff ffaa 	bl	8013908 <malloc>
 80139b4:	6270      	str	r0, [r6, #36]	; 0x24
 80139b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80139ba:	6004      	str	r4, [r0, #0]
 80139bc:	60c4      	str	r4, [r0, #12]
 80139be:	b13d      	cbz	r5, 80139d0 <_Bfree+0x2c>
 80139c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80139c2:	686a      	ldr	r2, [r5, #4]
 80139c4:	68db      	ldr	r3, [r3, #12]
 80139c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80139ca:	6029      	str	r1, [r5, #0]
 80139cc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80139d0:	bd70      	pop	{r4, r5, r6, pc}

080139d2 <__multadd>:
 80139d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d6:	690d      	ldr	r5, [r1, #16]
 80139d8:	461f      	mov	r7, r3
 80139da:	4606      	mov	r6, r0
 80139dc:	460c      	mov	r4, r1
 80139de:	f101 0c14 	add.w	ip, r1, #20
 80139e2:	2300      	movs	r3, #0
 80139e4:	f8dc 0000 	ldr.w	r0, [ip]
 80139e8:	b281      	uxth	r1, r0
 80139ea:	fb02 7101 	mla	r1, r2, r1, r7
 80139ee:	0c0f      	lsrs	r7, r1, #16
 80139f0:	0c00      	lsrs	r0, r0, #16
 80139f2:	fb02 7000 	mla	r0, r2, r0, r7
 80139f6:	b289      	uxth	r1, r1
 80139f8:	3301      	adds	r3, #1
 80139fa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80139fe:	429d      	cmp	r5, r3
 8013a00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013a04:	f84c 1b04 	str.w	r1, [ip], #4
 8013a08:	dcec      	bgt.n	80139e4 <__multadd+0x12>
 8013a0a:	b1d7      	cbz	r7, 8013a42 <__multadd+0x70>
 8013a0c:	68a3      	ldr	r3, [r4, #8]
 8013a0e:	42ab      	cmp	r3, r5
 8013a10:	dc12      	bgt.n	8013a38 <__multadd+0x66>
 8013a12:	6861      	ldr	r1, [r4, #4]
 8013a14:	4630      	mov	r0, r6
 8013a16:	3101      	adds	r1, #1
 8013a18:	f7ff ff90 	bl	801393c <_Balloc>
 8013a1c:	6922      	ldr	r2, [r4, #16]
 8013a1e:	3202      	adds	r2, #2
 8013a20:	f104 010c 	add.w	r1, r4, #12
 8013a24:	4680      	mov	r8, r0
 8013a26:	0092      	lsls	r2, r2, #2
 8013a28:	300c      	adds	r0, #12
 8013a2a:	f7fc ffcd 	bl	80109c8 <memcpy>
 8013a2e:	4621      	mov	r1, r4
 8013a30:	4630      	mov	r0, r6
 8013a32:	f7ff ffb7 	bl	80139a4 <_Bfree>
 8013a36:	4644      	mov	r4, r8
 8013a38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a3c:	3501      	adds	r5, #1
 8013a3e:	615f      	str	r7, [r3, #20]
 8013a40:	6125      	str	r5, [r4, #16]
 8013a42:	4620      	mov	r0, r4
 8013a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a48 <__s2b>:
 8013a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a4c:	460c      	mov	r4, r1
 8013a4e:	4615      	mov	r5, r2
 8013a50:	461f      	mov	r7, r3
 8013a52:	2209      	movs	r2, #9
 8013a54:	3308      	adds	r3, #8
 8013a56:	4606      	mov	r6, r0
 8013a58:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	2201      	movs	r2, #1
 8013a60:	429a      	cmp	r2, r3
 8013a62:	db20      	blt.n	8013aa6 <__s2b+0x5e>
 8013a64:	4630      	mov	r0, r6
 8013a66:	f7ff ff69 	bl	801393c <_Balloc>
 8013a6a:	9b08      	ldr	r3, [sp, #32]
 8013a6c:	6143      	str	r3, [r0, #20]
 8013a6e:	2d09      	cmp	r5, #9
 8013a70:	f04f 0301 	mov.w	r3, #1
 8013a74:	6103      	str	r3, [r0, #16]
 8013a76:	dd19      	ble.n	8013aac <__s2b+0x64>
 8013a78:	f104 0809 	add.w	r8, r4, #9
 8013a7c:	46c1      	mov	r9, r8
 8013a7e:	442c      	add	r4, r5
 8013a80:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013a84:	4601      	mov	r1, r0
 8013a86:	3b30      	subs	r3, #48	; 0x30
 8013a88:	220a      	movs	r2, #10
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	f7ff ffa1 	bl	80139d2 <__multadd>
 8013a90:	45a1      	cmp	r9, r4
 8013a92:	d1f5      	bne.n	8013a80 <__s2b+0x38>
 8013a94:	eb08 0405 	add.w	r4, r8, r5
 8013a98:	3c08      	subs	r4, #8
 8013a9a:	1b2d      	subs	r5, r5, r4
 8013a9c:	1963      	adds	r3, r4, r5
 8013a9e:	42bb      	cmp	r3, r7
 8013aa0:	db07      	blt.n	8013ab2 <__s2b+0x6a>
 8013aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aa6:	0052      	lsls	r2, r2, #1
 8013aa8:	3101      	adds	r1, #1
 8013aaa:	e7d9      	b.n	8013a60 <__s2b+0x18>
 8013aac:	340a      	adds	r4, #10
 8013aae:	2509      	movs	r5, #9
 8013ab0:	e7f3      	b.n	8013a9a <__s2b+0x52>
 8013ab2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ab6:	4601      	mov	r1, r0
 8013ab8:	3b30      	subs	r3, #48	; 0x30
 8013aba:	220a      	movs	r2, #10
 8013abc:	4630      	mov	r0, r6
 8013abe:	f7ff ff88 	bl	80139d2 <__multadd>
 8013ac2:	e7eb      	b.n	8013a9c <__s2b+0x54>

08013ac4 <__hi0bits>:
 8013ac4:	0c02      	lsrs	r2, r0, #16
 8013ac6:	0412      	lsls	r2, r2, #16
 8013ac8:	4603      	mov	r3, r0
 8013aca:	b9b2      	cbnz	r2, 8013afa <__hi0bits+0x36>
 8013acc:	0403      	lsls	r3, r0, #16
 8013ace:	2010      	movs	r0, #16
 8013ad0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013ad4:	bf04      	itt	eq
 8013ad6:	021b      	lsleq	r3, r3, #8
 8013ad8:	3008      	addeq	r0, #8
 8013ada:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013ade:	bf04      	itt	eq
 8013ae0:	011b      	lsleq	r3, r3, #4
 8013ae2:	3004      	addeq	r0, #4
 8013ae4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013ae8:	bf04      	itt	eq
 8013aea:	009b      	lsleq	r3, r3, #2
 8013aec:	3002      	addeq	r0, #2
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	db06      	blt.n	8013b00 <__hi0bits+0x3c>
 8013af2:	005b      	lsls	r3, r3, #1
 8013af4:	d503      	bpl.n	8013afe <__hi0bits+0x3a>
 8013af6:	3001      	adds	r0, #1
 8013af8:	4770      	bx	lr
 8013afa:	2000      	movs	r0, #0
 8013afc:	e7e8      	b.n	8013ad0 <__hi0bits+0xc>
 8013afe:	2020      	movs	r0, #32
 8013b00:	4770      	bx	lr

08013b02 <__lo0bits>:
 8013b02:	6803      	ldr	r3, [r0, #0]
 8013b04:	f013 0207 	ands.w	r2, r3, #7
 8013b08:	4601      	mov	r1, r0
 8013b0a:	d00b      	beq.n	8013b24 <__lo0bits+0x22>
 8013b0c:	07da      	lsls	r2, r3, #31
 8013b0e:	d423      	bmi.n	8013b58 <__lo0bits+0x56>
 8013b10:	0798      	lsls	r0, r3, #30
 8013b12:	bf49      	itett	mi
 8013b14:	085b      	lsrmi	r3, r3, #1
 8013b16:	089b      	lsrpl	r3, r3, #2
 8013b18:	2001      	movmi	r0, #1
 8013b1a:	600b      	strmi	r3, [r1, #0]
 8013b1c:	bf5c      	itt	pl
 8013b1e:	600b      	strpl	r3, [r1, #0]
 8013b20:	2002      	movpl	r0, #2
 8013b22:	4770      	bx	lr
 8013b24:	b298      	uxth	r0, r3
 8013b26:	b9a8      	cbnz	r0, 8013b54 <__lo0bits+0x52>
 8013b28:	0c1b      	lsrs	r3, r3, #16
 8013b2a:	2010      	movs	r0, #16
 8013b2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013b30:	bf04      	itt	eq
 8013b32:	0a1b      	lsreq	r3, r3, #8
 8013b34:	3008      	addeq	r0, #8
 8013b36:	071a      	lsls	r2, r3, #28
 8013b38:	bf04      	itt	eq
 8013b3a:	091b      	lsreq	r3, r3, #4
 8013b3c:	3004      	addeq	r0, #4
 8013b3e:	079a      	lsls	r2, r3, #30
 8013b40:	bf04      	itt	eq
 8013b42:	089b      	lsreq	r3, r3, #2
 8013b44:	3002      	addeq	r0, #2
 8013b46:	07da      	lsls	r2, r3, #31
 8013b48:	d402      	bmi.n	8013b50 <__lo0bits+0x4e>
 8013b4a:	085b      	lsrs	r3, r3, #1
 8013b4c:	d006      	beq.n	8013b5c <__lo0bits+0x5a>
 8013b4e:	3001      	adds	r0, #1
 8013b50:	600b      	str	r3, [r1, #0]
 8013b52:	4770      	bx	lr
 8013b54:	4610      	mov	r0, r2
 8013b56:	e7e9      	b.n	8013b2c <__lo0bits+0x2a>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	4770      	bx	lr
 8013b5c:	2020      	movs	r0, #32
 8013b5e:	4770      	bx	lr

08013b60 <__i2b>:
 8013b60:	b510      	push	{r4, lr}
 8013b62:	460c      	mov	r4, r1
 8013b64:	2101      	movs	r1, #1
 8013b66:	f7ff fee9 	bl	801393c <_Balloc>
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	6144      	str	r4, [r0, #20]
 8013b6e:	6102      	str	r2, [r0, #16]
 8013b70:	bd10      	pop	{r4, pc}

08013b72 <__multiply>:
 8013b72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b76:	4614      	mov	r4, r2
 8013b78:	690a      	ldr	r2, [r1, #16]
 8013b7a:	6923      	ldr	r3, [r4, #16]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	bfb8      	it	lt
 8013b80:	460b      	movlt	r3, r1
 8013b82:	4688      	mov	r8, r1
 8013b84:	bfbc      	itt	lt
 8013b86:	46a0      	movlt	r8, r4
 8013b88:	461c      	movlt	r4, r3
 8013b8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013b8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013b96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013b9a:	eb07 0609 	add.w	r6, r7, r9
 8013b9e:	42b3      	cmp	r3, r6
 8013ba0:	bfb8      	it	lt
 8013ba2:	3101      	addlt	r1, #1
 8013ba4:	f7ff feca 	bl	801393c <_Balloc>
 8013ba8:	f100 0514 	add.w	r5, r0, #20
 8013bac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013bb0:	462b      	mov	r3, r5
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	4573      	cmp	r3, lr
 8013bb6:	d316      	bcc.n	8013be6 <__multiply+0x74>
 8013bb8:	f104 0214 	add.w	r2, r4, #20
 8013bbc:	f108 0114 	add.w	r1, r8, #20
 8013bc0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013bc4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	9b00      	ldr	r3, [sp, #0]
 8013bcc:	9201      	str	r2, [sp, #4]
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d80c      	bhi.n	8013bec <__multiply+0x7a>
 8013bd2:	2e00      	cmp	r6, #0
 8013bd4:	dd03      	ble.n	8013bde <__multiply+0x6c>
 8013bd6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d05d      	beq.n	8013c9a <__multiply+0x128>
 8013bde:	6106      	str	r6, [r0, #16]
 8013be0:	b003      	add	sp, #12
 8013be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be6:	f843 2b04 	str.w	r2, [r3], #4
 8013bea:	e7e3      	b.n	8013bb4 <__multiply+0x42>
 8013bec:	f8b2 b000 	ldrh.w	fp, [r2]
 8013bf0:	f1bb 0f00 	cmp.w	fp, #0
 8013bf4:	d023      	beq.n	8013c3e <__multiply+0xcc>
 8013bf6:	4689      	mov	r9, r1
 8013bf8:	46ac      	mov	ip, r5
 8013bfa:	f04f 0800 	mov.w	r8, #0
 8013bfe:	f859 4b04 	ldr.w	r4, [r9], #4
 8013c02:	f8dc a000 	ldr.w	sl, [ip]
 8013c06:	b2a3      	uxth	r3, r4
 8013c08:	fa1f fa8a 	uxth.w	sl, sl
 8013c0c:	fb0b a303 	mla	r3, fp, r3, sl
 8013c10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c14:	f8dc 4000 	ldr.w	r4, [ip]
 8013c18:	4443      	add	r3, r8
 8013c1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c1e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013c22:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013c26:	46e2      	mov	sl, ip
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013c2e:	454f      	cmp	r7, r9
 8013c30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c34:	f84a 3b04 	str.w	r3, [sl], #4
 8013c38:	d82b      	bhi.n	8013c92 <__multiply+0x120>
 8013c3a:	f8cc 8004 	str.w	r8, [ip, #4]
 8013c3e:	9b01      	ldr	r3, [sp, #4]
 8013c40:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013c44:	3204      	adds	r2, #4
 8013c46:	f1ba 0f00 	cmp.w	sl, #0
 8013c4a:	d020      	beq.n	8013c8e <__multiply+0x11c>
 8013c4c:	682b      	ldr	r3, [r5, #0]
 8013c4e:	4689      	mov	r9, r1
 8013c50:	46a8      	mov	r8, r5
 8013c52:	f04f 0b00 	mov.w	fp, #0
 8013c56:	f8b9 c000 	ldrh.w	ip, [r9]
 8013c5a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013c5e:	fb0a 440c 	mla	r4, sl, ip, r4
 8013c62:	445c      	add	r4, fp
 8013c64:	46c4      	mov	ip, r8
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013c6c:	f84c 3b04 	str.w	r3, [ip], #4
 8013c70:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c74:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013c78:	0c1b      	lsrs	r3, r3, #16
 8013c7a:	fb0a b303 	mla	r3, sl, r3, fp
 8013c7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013c82:	454f      	cmp	r7, r9
 8013c84:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013c88:	d805      	bhi.n	8013c96 <__multiply+0x124>
 8013c8a:	f8c8 3004 	str.w	r3, [r8, #4]
 8013c8e:	3504      	adds	r5, #4
 8013c90:	e79b      	b.n	8013bca <__multiply+0x58>
 8013c92:	46d4      	mov	ip, sl
 8013c94:	e7b3      	b.n	8013bfe <__multiply+0x8c>
 8013c96:	46e0      	mov	r8, ip
 8013c98:	e7dd      	b.n	8013c56 <__multiply+0xe4>
 8013c9a:	3e01      	subs	r6, #1
 8013c9c:	e799      	b.n	8013bd2 <__multiply+0x60>
	...

08013ca0 <__pow5mult>:
 8013ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ca4:	4615      	mov	r5, r2
 8013ca6:	f012 0203 	ands.w	r2, r2, #3
 8013caa:	4606      	mov	r6, r0
 8013cac:	460f      	mov	r7, r1
 8013cae:	d007      	beq.n	8013cc0 <__pow5mult+0x20>
 8013cb0:	3a01      	subs	r2, #1
 8013cb2:	4c21      	ldr	r4, [pc, #132]	; (8013d38 <__pow5mult+0x98>)
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cba:	f7ff fe8a 	bl	80139d2 <__multadd>
 8013cbe:	4607      	mov	r7, r0
 8013cc0:	10ad      	asrs	r5, r5, #2
 8013cc2:	d035      	beq.n	8013d30 <__pow5mult+0x90>
 8013cc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013cc6:	b93c      	cbnz	r4, 8013cd8 <__pow5mult+0x38>
 8013cc8:	2010      	movs	r0, #16
 8013cca:	f7ff fe1d 	bl	8013908 <malloc>
 8013cce:	6270      	str	r0, [r6, #36]	; 0x24
 8013cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013cd4:	6004      	str	r4, [r0, #0]
 8013cd6:	60c4      	str	r4, [r0, #12]
 8013cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ce0:	b94c      	cbnz	r4, 8013cf6 <__pow5mult+0x56>
 8013ce2:	f240 2171 	movw	r1, #625	; 0x271
 8013ce6:	4630      	mov	r0, r6
 8013ce8:	f7ff ff3a 	bl	8013b60 <__i2b>
 8013cec:	2300      	movs	r3, #0
 8013cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8013cf2:	4604      	mov	r4, r0
 8013cf4:	6003      	str	r3, [r0, #0]
 8013cf6:	f04f 0800 	mov.w	r8, #0
 8013cfa:	07eb      	lsls	r3, r5, #31
 8013cfc:	d50a      	bpl.n	8013d14 <__pow5mult+0x74>
 8013cfe:	4639      	mov	r1, r7
 8013d00:	4622      	mov	r2, r4
 8013d02:	4630      	mov	r0, r6
 8013d04:	f7ff ff35 	bl	8013b72 <__multiply>
 8013d08:	4639      	mov	r1, r7
 8013d0a:	4681      	mov	r9, r0
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	f7ff fe49 	bl	80139a4 <_Bfree>
 8013d12:	464f      	mov	r7, r9
 8013d14:	106d      	asrs	r5, r5, #1
 8013d16:	d00b      	beq.n	8013d30 <__pow5mult+0x90>
 8013d18:	6820      	ldr	r0, [r4, #0]
 8013d1a:	b938      	cbnz	r0, 8013d2c <__pow5mult+0x8c>
 8013d1c:	4622      	mov	r2, r4
 8013d1e:	4621      	mov	r1, r4
 8013d20:	4630      	mov	r0, r6
 8013d22:	f7ff ff26 	bl	8013b72 <__multiply>
 8013d26:	6020      	str	r0, [r4, #0]
 8013d28:	f8c0 8000 	str.w	r8, [r0]
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	e7e4      	b.n	8013cfa <__pow5mult+0x5a>
 8013d30:	4638      	mov	r0, r7
 8013d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d36:	bf00      	nop
 8013d38:	08016d30 	.word	0x08016d30

08013d3c <__lshift>:
 8013d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d40:	460c      	mov	r4, r1
 8013d42:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d46:	6923      	ldr	r3, [r4, #16]
 8013d48:	6849      	ldr	r1, [r1, #4]
 8013d4a:	eb0a 0903 	add.w	r9, sl, r3
 8013d4e:	68a3      	ldr	r3, [r4, #8]
 8013d50:	4607      	mov	r7, r0
 8013d52:	4616      	mov	r6, r2
 8013d54:	f109 0501 	add.w	r5, r9, #1
 8013d58:	42ab      	cmp	r3, r5
 8013d5a:	db32      	blt.n	8013dc2 <__lshift+0x86>
 8013d5c:	4638      	mov	r0, r7
 8013d5e:	f7ff fded 	bl	801393c <_Balloc>
 8013d62:	2300      	movs	r3, #0
 8013d64:	4680      	mov	r8, r0
 8013d66:	f100 0114 	add.w	r1, r0, #20
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	4553      	cmp	r3, sl
 8013d6e:	db2b      	blt.n	8013dc8 <__lshift+0x8c>
 8013d70:	6920      	ldr	r0, [r4, #16]
 8013d72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d76:	f104 0314 	add.w	r3, r4, #20
 8013d7a:	f016 021f 	ands.w	r2, r6, #31
 8013d7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d82:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d86:	d025      	beq.n	8013dd4 <__lshift+0x98>
 8013d88:	f1c2 0e20 	rsb	lr, r2, #32
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	681e      	ldr	r6, [r3, #0]
 8013d90:	468a      	mov	sl, r1
 8013d92:	4096      	lsls	r6, r2
 8013d94:	4330      	orrs	r0, r6
 8013d96:	f84a 0b04 	str.w	r0, [sl], #4
 8013d9a:	f853 0b04 	ldr.w	r0, [r3], #4
 8013d9e:	459c      	cmp	ip, r3
 8013da0:	fa20 f00e 	lsr.w	r0, r0, lr
 8013da4:	d814      	bhi.n	8013dd0 <__lshift+0x94>
 8013da6:	6048      	str	r0, [r1, #4]
 8013da8:	b108      	cbz	r0, 8013dae <__lshift+0x72>
 8013daa:	f109 0502 	add.w	r5, r9, #2
 8013dae:	3d01      	subs	r5, #1
 8013db0:	4638      	mov	r0, r7
 8013db2:	f8c8 5010 	str.w	r5, [r8, #16]
 8013db6:	4621      	mov	r1, r4
 8013db8:	f7ff fdf4 	bl	80139a4 <_Bfree>
 8013dbc:	4640      	mov	r0, r8
 8013dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc2:	3101      	adds	r1, #1
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	e7c7      	b.n	8013d58 <__lshift+0x1c>
 8013dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	e7cd      	b.n	8013d6c <__lshift+0x30>
 8013dd0:	4651      	mov	r1, sl
 8013dd2:	e7dc      	b.n	8013d8e <__lshift+0x52>
 8013dd4:	3904      	subs	r1, #4
 8013dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dda:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dde:	459c      	cmp	ip, r3
 8013de0:	d8f9      	bhi.n	8013dd6 <__lshift+0x9a>
 8013de2:	e7e4      	b.n	8013dae <__lshift+0x72>

08013de4 <__mcmp>:
 8013de4:	6903      	ldr	r3, [r0, #16]
 8013de6:	690a      	ldr	r2, [r1, #16]
 8013de8:	1a9b      	subs	r3, r3, r2
 8013dea:	b530      	push	{r4, r5, lr}
 8013dec:	d10c      	bne.n	8013e08 <__mcmp+0x24>
 8013dee:	0092      	lsls	r2, r2, #2
 8013df0:	3014      	adds	r0, #20
 8013df2:	3114      	adds	r1, #20
 8013df4:	1884      	adds	r4, r0, r2
 8013df6:	4411      	add	r1, r2
 8013df8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013dfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013e00:	4295      	cmp	r5, r2
 8013e02:	d003      	beq.n	8013e0c <__mcmp+0x28>
 8013e04:	d305      	bcc.n	8013e12 <__mcmp+0x2e>
 8013e06:	2301      	movs	r3, #1
 8013e08:	4618      	mov	r0, r3
 8013e0a:	bd30      	pop	{r4, r5, pc}
 8013e0c:	42a0      	cmp	r0, r4
 8013e0e:	d3f3      	bcc.n	8013df8 <__mcmp+0x14>
 8013e10:	e7fa      	b.n	8013e08 <__mcmp+0x24>
 8013e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e16:	e7f7      	b.n	8013e08 <__mcmp+0x24>

08013e18 <__mdiff>:
 8013e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e1c:	460d      	mov	r5, r1
 8013e1e:	4607      	mov	r7, r0
 8013e20:	4611      	mov	r1, r2
 8013e22:	4628      	mov	r0, r5
 8013e24:	4614      	mov	r4, r2
 8013e26:	f7ff ffdd 	bl	8013de4 <__mcmp>
 8013e2a:	1e06      	subs	r6, r0, #0
 8013e2c:	d108      	bne.n	8013e40 <__mdiff+0x28>
 8013e2e:	4631      	mov	r1, r6
 8013e30:	4638      	mov	r0, r7
 8013e32:	f7ff fd83 	bl	801393c <_Balloc>
 8013e36:	2301      	movs	r3, #1
 8013e38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e40:	bfa4      	itt	ge
 8013e42:	4623      	movge	r3, r4
 8013e44:	462c      	movge	r4, r5
 8013e46:	4638      	mov	r0, r7
 8013e48:	6861      	ldr	r1, [r4, #4]
 8013e4a:	bfa6      	itte	ge
 8013e4c:	461d      	movge	r5, r3
 8013e4e:	2600      	movge	r6, #0
 8013e50:	2601      	movlt	r6, #1
 8013e52:	f7ff fd73 	bl	801393c <_Balloc>
 8013e56:	692b      	ldr	r3, [r5, #16]
 8013e58:	60c6      	str	r6, [r0, #12]
 8013e5a:	6926      	ldr	r6, [r4, #16]
 8013e5c:	f105 0914 	add.w	r9, r5, #20
 8013e60:	f104 0214 	add.w	r2, r4, #20
 8013e64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013e68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013e6c:	f100 0514 	add.w	r5, r0, #20
 8013e70:	f04f 0e00 	mov.w	lr, #0
 8013e74:	f852 ab04 	ldr.w	sl, [r2], #4
 8013e78:	f859 4b04 	ldr.w	r4, [r9], #4
 8013e7c:	fa1e f18a 	uxtah	r1, lr, sl
 8013e80:	b2a3      	uxth	r3, r4
 8013e82:	1ac9      	subs	r1, r1, r3
 8013e84:	0c23      	lsrs	r3, r4, #16
 8013e86:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013e8a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013e8e:	b289      	uxth	r1, r1
 8013e90:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013e94:	45c8      	cmp	r8, r9
 8013e96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013e9a:	4694      	mov	ip, r2
 8013e9c:	f845 3b04 	str.w	r3, [r5], #4
 8013ea0:	d8e8      	bhi.n	8013e74 <__mdiff+0x5c>
 8013ea2:	45bc      	cmp	ip, r7
 8013ea4:	d304      	bcc.n	8013eb0 <__mdiff+0x98>
 8013ea6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013eaa:	b183      	cbz	r3, 8013ece <__mdiff+0xb6>
 8013eac:	6106      	str	r6, [r0, #16]
 8013eae:	e7c5      	b.n	8013e3c <__mdiff+0x24>
 8013eb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013eb4:	fa1e f381 	uxtah	r3, lr, r1
 8013eb8:	141a      	asrs	r2, r3, #16
 8013eba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ec4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013ec8:	f845 3b04 	str.w	r3, [r5], #4
 8013ecc:	e7e9      	b.n	8013ea2 <__mdiff+0x8a>
 8013ece:	3e01      	subs	r6, #1
 8013ed0:	e7e9      	b.n	8013ea6 <__mdiff+0x8e>
	...

08013ed4 <__ulp>:
 8013ed4:	4b12      	ldr	r3, [pc, #72]	; (8013f20 <__ulp+0x4c>)
 8013ed6:	ee10 2a90 	vmov	r2, s1
 8013eda:	401a      	ands	r2, r3
 8013edc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	dd04      	ble.n	8013eee <__ulp+0x1a>
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	ec41 0b10 	vmov	d0, r0, r1
 8013eec:	4770      	bx	lr
 8013eee:	425b      	negs	r3, r3
 8013ef0:	151b      	asrs	r3, r3, #20
 8013ef2:	2b13      	cmp	r3, #19
 8013ef4:	f04f 0000 	mov.w	r0, #0
 8013ef8:	f04f 0100 	mov.w	r1, #0
 8013efc:	dc04      	bgt.n	8013f08 <__ulp+0x34>
 8013efe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013f02:	fa42 f103 	asr.w	r1, r2, r3
 8013f06:	e7ef      	b.n	8013ee8 <__ulp+0x14>
 8013f08:	3b14      	subs	r3, #20
 8013f0a:	2b1e      	cmp	r3, #30
 8013f0c:	f04f 0201 	mov.w	r2, #1
 8013f10:	bfda      	itte	le
 8013f12:	f1c3 031f 	rsble	r3, r3, #31
 8013f16:	fa02 f303 	lslle.w	r3, r2, r3
 8013f1a:	4613      	movgt	r3, r2
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	e7e3      	b.n	8013ee8 <__ulp+0x14>
 8013f20:	7ff00000 	.word	0x7ff00000

08013f24 <__b2d>:
 8013f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f26:	6905      	ldr	r5, [r0, #16]
 8013f28:	f100 0714 	add.w	r7, r0, #20
 8013f2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f30:	1f2e      	subs	r6, r5, #4
 8013f32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f36:	4620      	mov	r0, r4
 8013f38:	f7ff fdc4 	bl	8013ac4 <__hi0bits>
 8013f3c:	f1c0 0320 	rsb	r3, r0, #32
 8013f40:	280a      	cmp	r0, #10
 8013f42:	600b      	str	r3, [r1, #0]
 8013f44:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013fbc <__b2d+0x98>
 8013f48:	dc14      	bgt.n	8013f74 <__b2d+0x50>
 8013f4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013f52:	42b7      	cmp	r7, r6
 8013f54:	ea41 030c 	orr.w	r3, r1, ip
 8013f58:	bf34      	ite	cc
 8013f5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f5e:	2100      	movcs	r1, #0
 8013f60:	3015      	adds	r0, #21
 8013f62:	fa04 f000 	lsl.w	r0, r4, r0
 8013f66:	fa21 f10e 	lsr.w	r1, r1, lr
 8013f6a:	ea40 0201 	orr.w	r2, r0, r1
 8013f6e:	ec43 2b10 	vmov	d0, r2, r3
 8013f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f74:	42b7      	cmp	r7, r6
 8013f76:	bf3a      	itte	cc
 8013f78:	f1a5 0608 	subcc.w	r6, r5, #8
 8013f7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f80:	2100      	movcs	r1, #0
 8013f82:	380b      	subs	r0, #11
 8013f84:	d015      	beq.n	8013fb2 <__b2d+0x8e>
 8013f86:	4084      	lsls	r4, r0
 8013f88:	f1c0 0520 	rsb	r5, r0, #32
 8013f8c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013f90:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013f94:	42be      	cmp	r6, r7
 8013f96:	fa21 fc05 	lsr.w	ip, r1, r5
 8013f9a:	ea44 030c 	orr.w	r3, r4, ip
 8013f9e:	bf8c      	ite	hi
 8013fa0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013fa4:	2400      	movls	r4, #0
 8013fa6:	fa01 f000 	lsl.w	r0, r1, r0
 8013faa:	40ec      	lsrs	r4, r5
 8013fac:	ea40 0204 	orr.w	r2, r0, r4
 8013fb0:	e7dd      	b.n	8013f6e <__b2d+0x4a>
 8013fb2:	ea44 030c 	orr.w	r3, r4, ip
 8013fb6:	460a      	mov	r2, r1
 8013fb8:	e7d9      	b.n	8013f6e <__b2d+0x4a>
 8013fba:	bf00      	nop
 8013fbc:	3ff00000 	.word	0x3ff00000

08013fc0 <__d2b>:
 8013fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013fc4:	460e      	mov	r6, r1
 8013fc6:	2101      	movs	r1, #1
 8013fc8:	ec59 8b10 	vmov	r8, r9, d0
 8013fcc:	4615      	mov	r5, r2
 8013fce:	f7ff fcb5 	bl	801393c <_Balloc>
 8013fd2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013fd6:	4607      	mov	r7, r0
 8013fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013fdc:	bb34      	cbnz	r4, 801402c <__d2b+0x6c>
 8013fde:	9301      	str	r3, [sp, #4]
 8013fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8013fe4:	d027      	beq.n	8014036 <__d2b+0x76>
 8013fe6:	a802      	add	r0, sp, #8
 8013fe8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013fec:	f7ff fd89 	bl	8013b02 <__lo0bits>
 8013ff0:	9900      	ldr	r1, [sp, #0]
 8013ff2:	b1f0      	cbz	r0, 8014032 <__d2b+0x72>
 8013ff4:	9a01      	ldr	r2, [sp, #4]
 8013ff6:	f1c0 0320 	rsb	r3, r0, #32
 8013ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8013ffe:	430b      	orrs	r3, r1
 8014000:	40c2      	lsrs	r2, r0
 8014002:	617b      	str	r3, [r7, #20]
 8014004:	9201      	str	r2, [sp, #4]
 8014006:	9b01      	ldr	r3, [sp, #4]
 8014008:	61bb      	str	r3, [r7, #24]
 801400a:	2b00      	cmp	r3, #0
 801400c:	bf14      	ite	ne
 801400e:	2102      	movne	r1, #2
 8014010:	2101      	moveq	r1, #1
 8014012:	6139      	str	r1, [r7, #16]
 8014014:	b1c4      	cbz	r4, 8014048 <__d2b+0x88>
 8014016:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801401a:	4404      	add	r4, r0
 801401c:	6034      	str	r4, [r6, #0]
 801401e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014022:	6028      	str	r0, [r5, #0]
 8014024:	4638      	mov	r0, r7
 8014026:	b003      	add	sp, #12
 8014028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801402c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014030:	e7d5      	b.n	8013fde <__d2b+0x1e>
 8014032:	6179      	str	r1, [r7, #20]
 8014034:	e7e7      	b.n	8014006 <__d2b+0x46>
 8014036:	a801      	add	r0, sp, #4
 8014038:	f7ff fd63 	bl	8013b02 <__lo0bits>
 801403c:	9b01      	ldr	r3, [sp, #4]
 801403e:	617b      	str	r3, [r7, #20]
 8014040:	2101      	movs	r1, #1
 8014042:	6139      	str	r1, [r7, #16]
 8014044:	3020      	adds	r0, #32
 8014046:	e7e5      	b.n	8014014 <__d2b+0x54>
 8014048:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801404c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014050:	6030      	str	r0, [r6, #0]
 8014052:	6918      	ldr	r0, [r3, #16]
 8014054:	f7ff fd36 	bl	8013ac4 <__hi0bits>
 8014058:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801405c:	e7e1      	b.n	8014022 <__d2b+0x62>

0801405e <__ratio>:
 801405e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014062:	4688      	mov	r8, r1
 8014064:	4669      	mov	r1, sp
 8014066:	4681      	mov	r9, r0
 8014068:	f7ff ff5c 	bl	8013f24 <__b2d>
 801406c:	a901      	add	r1, sp, #4
 801406e:	4640      	mov	r0, r8
 8014070:	ec57 6b10 	vmov	r6, r7, d0
 8014074:	f7ff ff56 	bl	8013f24 <__b2d>
 8014078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801407c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014080:	eba3 0c02 	sub.w	ip, r3, r2
 8014084:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014088:	1a9b      	subs	r3, r3, r2
 801408a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801408e:	ec5b ab10 	vmov	sl, fp, d0
 8014092:	2b00      	cmp	r3, #0
 8014094:	bfce      	itee	gt
 8014096:	463a      	movgt	r2, r7
 8014098:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801409c:	465a      	movle	r2, fp
 801409e:	4659      	mov	r1, fp
 80140a0:	463d      	mov	r5, r7
 80140a2:	bfd4      	ite	le
 80140a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80140a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80140ac:	4630      	mov	r0, r6
 80140ae:	ee10 2a10 	vmov	r2, s0
 80140b2:	460b      	mov	r3, r1
 80140b4:	4629      	mov	r1, r5
 80140b6:	f7ec fbc9 	bl	800084c <__aeabi_ddiv>
 80140ba:	ec41 0b10 	vmov	d0, r0, r1
 80140be:	b003      	add	sp, #12
 80140c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140c4 <__copybits>:
 80140c4:	3901      	subs	r1, #1
 80140c6:	b510      	push	{r4, lr}
 80140c8:	1149      	asrs	r1, r1, #5
 80140ca:	6914      	ldr	r4, [r2, #16]
 80140cc:	3101      	adds	r1, #1
 80140ce:	f102 0314 	add.w	r3, r2, #20
 80140d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80140d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80140da:	42a3      	cmp	r3, r4
 80140dc:	4602      	mov	r2, r0
 80140de:	d303      	bcc.n	80140e8 <__copybits+0x24>
 80140e0:	2300      	movs	r3, #0
 80140e2:	428a      	cmp	r2, r1
 80140e4:	d305      	bcc.n	80140f2 <__copybits+0x2e>
 80140e6:	bd10      	pop	{r4, pc}
 80140e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80140ec:	f840 2b04 	str.w	r2, [r0], #4
 80140f0:	e7f3      	b.n	80140da <__copybits+0x16>
 80140f2:	f842 3b04 	str.w	r3, [r2], #4
 80140f6:	e7f4      	b.n	80140e2 <__copybits+0x1e>

080140f8 <__any_on>:
 80140f8:	f100 0214 	add.w	r2, r0, #20
 80140fc:	6900      	ldr	r0, [r0, #16]
 80140fe:	114b      	asrs	r3, r1, #5
 8014100:	4298      	cmp	r0, r3
 8014102:	b510      	push	{r4, lr}
 8014104:	db11      	blt.n	801412a <__any_on+0x32>
 8014106:	dd0a      	ble.n	801411e <__any_on+0x26>
 8014108:	f011 011f 	ands.w	r1, r1, #31
 801410c:	d007      	beq.n	801411e <__any_on+0x26>
 801410e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014112:	fa24 f001 	lsr.w	r0, r4, r1
 8014116:	fa00 f101 	lsl.w	r1, r0, r1
 801411a:	428c      	cmp	r4, r1
 801411c:	d10b      	bne.n	8014136 <__any_on+0x3e>
 801411e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014122:	4293      	cmp	r3, r2
 8014124:	d803      	bhi.n	801412e <__any_on+0x36>
 8014126:	2000      	movs	r0, #0
 8014128:	bd10      	pop	{r4, pc}
 801412a:	4603      	mov	r3, r0
 801412c:	e7f7      	b.n	801411e <__any_on+0x26>
 801412e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014132:	2900      	cmp	r1, #0
 8014134:	d0f5      	beq.n	8014122 <__any_on+0x2a>
 8014136:	2001      	movs	r0, #1
 8014138:	e7f6      	b.n	8014128 <__any_on+0x30>

0801413a <_calloc_r>:
 801413a:	b538      	push	{r3, r4, r5, lr}
 801413c:	fb02 f401 	mul.w	r4, r2, r1
 8014140:	4621      	mov	r1, r4
 8014142:	f000 f857 	bl	80141f4 <_malloc_r>
 8014146:	4605      	mov	r5, r0
 8014148:	b118      	cbz	r0, 8014152 <_calloc_r+0x18>
 801414a:	4622      	mov	r2, r4
 801414c:	2100      	movs	r1, #0
 801414e:	f7fc fc46 	bl	80109de <memset>
 8014152:	4628      	mov	r0, r5
 8014154:	bd38      	pop	{r3, r4, r5, pc}
	...

08014158 <_free_r>:
 8014158:	b538      	push	{r3, r4, r5, lr}
 801415a:	4605      	mov	r5, r0
 801415c:	2900      	cmp	r1, #0
 801415e:	d045      	beq.n	80141ec <_free_r+0x94>
 8014160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014164:	1f0c      	subs	r4, r1, #4
 8014166:	2b00      	cmp	r3, #0
 8014168:	bfb8      	it	lt
 801416a:	18e4      	addlt	r4, r4, r3
 801416c:	f000 fc15 	bl	801499a <__malloc_lock>
 8014170:	4a1f      	ldr	r2, [pc, #124]	; (80141f0 <_free_r+0x98>)
 8014172:	6813      	ldr	r3, [r2, #0]
 8014174:	4610      	mov	r0, r2
 8014176:	b933      	cbnz	r3, 8014186 <_free_r+0x2e>
 8014178:	6063      	str	r3, [r4, #4]
 801417a:	6014      	str	r4, [r2, #0]
 801417c:	4628      	mov	r0, r5
 801417e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014182:	f000 bc0b 	b.w	801499c <__malloc_unlock>
 8014186:	42a3      	cmp	r3, r4
 8014188:	d90c      	bls.n	80141a4 <_free_r+0x4c>
 801418a:	6821      	ldr	r1, [r4, #0]
 801418c:	1862      	adds	r2, r4, r1
 801418e:	4293      	cmp	r3, r2
 8014190:	bf04      	itt	eq
 8014192:	681a      	ldreq	r2, [r3, #0]
 8014194:	685b      	ldreq	r3, [r3, #4]
 8014196:	6063      	str	r3, [r4, #4]
 8014198:	bf04      	itt	eq
 801419a:	1852      	addeq	r2, r2, r1
 801419c:	6022      	streq	r2, [r4, #0]
 801419e:	6004      	str	r4, [r0, #0]
 80141a0:	e7ec      	b.n	801417c <_free_r+0x24>
 80141a2:	4613      	mov	r3, r2
 80141a4:	685a      	ldr	r2, [r3, #4]
 80141a6:	b10a      	cbz	r2, 80141ac <_free_r+0x54>
 80141a8:	42a2      	cmp	r2, r4
 80141aa:	d9fa      	bls.n	80141a2 <_free_r+0x4a>
 80141ac:	6819      	ldr	r1, [r3, #0]
 80141ae:	1858      	adds	r0, r3, r1
 80141b0:	42a0      	cmp	r0, r4
 80141b2:	d10b      	bne.n	80141cc <_free_r+0x74>
 80141b4:	6820      	ldr	r0, [r4, #0]
 80141b6:	4401      	add	r1, r0
 80141b8:	1858      	adds	r0, r3, r1
 80141ba:	4282      	cmp	r2, r0
 80141bc:	6019      	str	r1, [r3, #0]
 80141be:	d1dd      	bne.n	801417c <_free_r+0x24>
 80141c0:	6810      	ldr	r0, [r2, #0]
 80141c2:	6852      	ldr	r2, [r2, #4]
 80141c4:	605a      	str	r2, [r3, #4]
 80141c6:	4401      	add	r1, r0
 80141c8:	6019      	str	r1, [r3, #0]
 80141ca:	e7d7      	b.n	801417c <_free_r+0x24>
 80141cc:	d902      	bls.n	80141d4 <_free_r+0x7c>
 80141ce:	230c      	movs	r3, #12
 80141d0:	602b      	str	r3, [r5, #0]
 80141d2:	e7d3      	b.n	801417c <_free_r+0x24>
 80141d4:	6820      	ldr	r0, [r4, #0]
 80141d6:	1821      	adds	r1, r4, r0
 80141d8:	428a      	cmp	r2, r1
 80141da:	bf04      	itt	eq
 80141dc:	6811      	ldreq	r1, [r2, #0]
 80141de:	6852      	ldreq	r2, [r2, #4]
 80141e0:	6062      	str	r2, [r4, #4]
 80141e2:	bf04      	itt	eq
 80141e4:	1809      	addeq	r1, r1, r0
 80141e6:	6021      	streq	r1, [r4, #0]
 80141e8:	605c      	str	r4, [r3, #4]
 80141ea:	e7c7      	b.n	801417c <_free_r+0x24>
 80141ec:	bd38      	pop	{r3, r4, r5, pc}
 80141ee:	bf00      	nop
 80141f0:	200008a0 	.word	0x200008a0

080141f4 <_malloc_r>:
 80141f4:	b570      	push	{r4, r5, r6, lr}
 80141f6:	1ccd      	adds	r5, r1, #3
 80141f8:	f025 0503 	bic.w	r5, r5, #3
 80141fc:	3508      	adds	r5, #8
 80141fe:	2d0c      	cmp	r5, #12
 8014200:	bf38      	it	cc
 8014202:	250c      	movcc	r5, #12
 8014204:	2d00      	cmp	r5, #0
 8014206:	4606      	mov	r6, r0
 8014208:	db01      	blt.n	801420e <_malloc_r+0x1a>
 801420a:	42a9      	cmp	r1, r5
 801420c:	d903      	bls.n	8014216 <_malloc_r+0x22>
 801420e:	230c      	movs	r3, #12
 8014210:	6033      	str	r3, [r6, #0]
 8014212:	2000      	movs	r0, #0
 8014214:	bd70      	pop	{r4, r5, r6, pc}
 8014216:	f000 fbc0 	bl	801499a <__malloc_lock>
 801421a:	4a21      	ldr	r2, [pc, #132]	; (80142a0 <_malloc_r+0xac>)
 801421c:	6814      	ldr	r4, [r2, #0]
 801421e:	4621      	mov	r1, r4
 8014220:	b991      	cbnz	r1, 8014248 <_malloc_r+0x54>
 8014222:	4c20      	ldr	r4, [pc, #128]	; (80142a4 <_malloc_r+0xb0>)
 8014224:	6823      	ldr	r3, [r4, #0]
 8014226:	b91b      	cbnz	r3, 8014230 <_malloc_r+0x3c>
 8014228:	4630      	mov	r0, r6
 801422a:	f000 facf 	bl	80147cc <_sbrk_r>
 801422e:	6020      	str	r0, [r4, #0]
 8014230:	4629      	mov	r1, r5
 8014232:	4630      	mov	r0, r6
 8014234:	f000 faca 	bl	80147cc <_sbrk_r>
 8014238:	1c43      	adds	r3, r0, #1
 801423a:	d124      	bne.n	8014286 <_malloc_r+0x92>
 801423c:	230c      	movs	r3, #12
 801423e:	6033      	str	r3, [r6, #0]
 8014240:	4630      	mov	r0, r6
 8014242:	f000 fbab 	bl	801499c <__malloc_unlock>
 8014246:	e7e4      	b.n	8014212 <_malloc_r+0x1e>
 8014248:	680b      	ldr	r3, [r1, #0]
 801424a:	1b5b      	subs	r3, r3, r5
 801424c:	d418      	bmi.n	8014280 <_malloc_r+0x8c>
 801424e:	2b0b      	cmp	r3, #11
 8014250:	d90f      	bls.n	8014272 <_malloc_r+0x7e>
 8014252:	600b      	str	r3, [r1, #0]
 8014254:	50cd      	str	r5, [r1, r3]
 8014256:	18cc      	adds	r4, r1, r3
 8014258:	4630      	mov	r0, r6
 801425a:	f000 fb9f 	bl	801499c <__malloc_unlock>
 801425e:	f104 000b 	add.w	r0, r4, #11
 8014262:	1d23      	adds	r3, r4, #4
 8014264:	f020 0007 	bic.w	r0, r0, #7
 8014268:	1ac3      	subs	r3, r0, r3
 801426a:	d0d3      	beq.n	8014214 <_malloc_r+0x20>
 801426c:	425a      	negs	r2, r3
 801426e:	50e2      	str	r2, [r4, r3]
 8014270:	e7d0      	b.n	8014214 <_malloc_r+0x20>
 8014272:	428c      	cmp	r4, r1
 8014274:	684b      	ldr	r3, [r1, #4]
 8014276:	bf16      	itet	ne
 8014278:	6063      	strne	r3, [r4, #4]
 801427a:	6013      	streq	r3, [r2, #0]
 801427c:	460c      	movne	r4, r1
 801427e:	e7eb      	b.n	8014258 <_malloc_r+0x64>
 8014280:	460c      	mov	r4, r1
 8014282:	6849      	ldr	r1, [r1, #4]
 8014284:	e7cc      	b.n	8014220 <_malloc_r+0x2c>
 8014286:	1cc4      	adds	r4, r0, #3
 8014288:	f024 0403 	bic.w	r4, r4, #3
 801428c:	42a0      	cmp	r0, r4
 801428e:	d005      	beq.n	801429c <_malloc_r+0xa8>
 8014290:	1a21      	subs	r1, r4, r0
 8014292:	4630      	mov	r0, r6
 8014294:	f000 fa9a 	bl	80147cc <_sbrk_r>
 8014298:	3001      	adds	r0, #1
 801429a:	d0cf      	beq.n	801423c <_malloc_r+0x48>
 801429c:	6025      	str	r5, [r4, #0]
 801429e:	e7db      	b.n	8014258 <_malloc_r+0x64>
 80142a0:	200008a0 	.word	0x200008a0
 80142a4:	200008a4 	.word	0x200008a4

080142a8 <__ssputs_r>:
 80142a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142ac:	688e      	ldr	r6, [r1, #8]
 80142ae:	429e      	cmp	r6, r3
 80142b0:	4682      	mov	sl, r0
 80142b2:	460c      	mov	r4, r1
 80142b4:	4690      	mov	r8, r2
 80142b6:	4699      	mov	r9, r3
 80142b8:	d837      	bhi.n	801432a <__ssputs_r+0x82>
 80142ba:	898a      	ldrh	r2, [r1, #12]
 80142bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142c0:	d031      	beq.n	8014326 <__ssputs_r+0x7e>
 80142c2:	6825      	ldr	r5, [r4, #0]
 80142c4:	6909      	ldr	r1, [r1, #16]
 80142c6:	1a6f      	subs	r7, r5, r1
 80142c8:	6965      	ldr	r5, [r4, #20]
 80142ca:	2302      	movs	r3, #2
 80142cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80142d4:	f109 0301 	add.w	r3, r9, #1
 80142d8:	443b      	add	r3, r7
 80142da:	429d      	cmp	r5, r3
 80142dc:	bf38      	it	cc
 80142de:	461d      	movcc	r5, r3
 80142e0:	0553      	lsls	r3, r2, #21
 80142e2:	d530      	bpl.n	8014346 <__ssputs_r+0x9e>
 80142e4:	4629      	mov	r1, r5
 80142e6:	f7ff ff85 	bl	80141f4 <_malloc_r>
 80142ea:	4606      	mov	r6, r0
 80142ec:	b950      	cbnz	r0, 8014304 <__ssputs_r+0x5c>
 80142ee:	230c      	movs	r3, #12
 80142f0:	f8ca 3000 	str.w	r3, [sl]
 80142f4:	89a3      	ldrh	r3, [r4, #12]
 80142f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142fa:	81a3      	strh	r3, [r4, #12]
 80142fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014304:	463a      	mov	r2, r7
 8014306:	6921      	ldr	r1, [r4, #16]
 8014308:	f7fc fb5e 	bl	80109c8 <memcpy>
 801430c:	89a3      	ldrh	r3, [r4, #12]
 801430e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014316:	81a3      	strh	r3, [r4, #12]
 8014318:	6126      	str	r6, [r4, #16]
 801431a:	6165      	str	r5, [r4, #20]
 801431c:	443e      	add	r6, r7
 801431e:	1bed      	subs	r5, r5, r7
 8014320:	6026      	str	r6, [r4, #0]
 8014322:	60a5      	str	r5, [r4, #8]
 8014324:	464e      	mov	r6, r9
 8014326:	454e      	cmp	r6, r9
 8014328:	d900      	bls.n	801432c <__ssputs_r+0x84>
 801432a:	464e      	mov	r6, r9
 801432c:	4632      	mov	r2, r6
 801432e:	4641      	mov	r1, r8
 8014330:	6820      	ldr	r0, [r4, #0]
 8014332:	f000 fb19 	bl	8014968 <memmove>
 8014336:	68a3      	ldr	r3, [r4, #8]
 8014338:	1b9b      	subs	r3, r3, r6
 801433a:	60a3      	str	r3, [r4, #8]
 801433c:	6823      	ldr	r3, [r4, #0]
 801433e:	441e      	add	r6, r3
 8014340:	6026      	str	r6, [r4, #0]
 8014342:	2000      	movs	r0, #0
 8014344:	e7dc      	b.n	8014300 <__ssputs_r+0x58>
 8014346:	462a      	mov	r2, r5
 8014348:	f000 fb29 	bl	801499e <_realloc_r>
 801434c:	4606      	mov	r6, r0
 801434e:	2800      	cmp	r0, #0
 8014350:	d1e2      	bne.n	8014318 <__ssputs_r+0x70>
 8014352:	6921      	ldr	r1, [r4, #16]
 8014354:	4650      	mov	r0, sl
 8014356:	f7ff feff 	bl	8014158 <_free_r>
 801435a:	e7c8      	b.n	80142ee <__ssputs_r+0x46>

0801435c <_svfiprintf_r>:
 801435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014360:	461d      	mov	r5, r3
 8014362:	898b      	ldrh	r3, [r1, #12]
 8014364:	061f      	lsls	r7, r3, #24
 8014366:	b09d      	sub	sp, #116	; 0x74
 8014368:	4680      	mov	r8, r0
 801436a:	460c      	mov	r4, r1
 801436c:	4616      	mov	r6, r2
 801436e:	d50f      	bpl.n	8014390 <_svfiprintf_r+0x34>
 8014370:	690b      	ldr	r3, [r1, #16]
 8014372:	b96b      	cbnz	r3, 8014390 <_svfiprintf_r+0x34>
 8014374:	2140      	movs	r1, #64	; 0x40
 8014376:	f7ff ff3d 	bl	80141f4 <_malloc_r>
 801437a:	6020      	str	r0, [r4, #0]
 801437c:	6120      	str	r0, [r4, #16]
 801437e:	b928      	cbnz	r0, 801438c <_svfiprintf_r+0x30>
 8014380:	230c      	movs	r3, #12
 8014382:	f8c8 3000 	str.w	r3, [r8]
 8014386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801438a:	e0c8      	b.n	801451e <_svfiprintf_r+0x1c2>
 801438c:	2340      	movs	r3, #64	; 0x40
 801438e:	6163      	str	r3, [r4, #20]
 8014390:	2300      	movs	r3, #0
 8014392:	9309      	str	r3, [sp, #36]	; 0x24
 8014394:	2320      	movs	r3, #32
 8014396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801439a:	2330      	movs	r3, #48	; 0x30
 801439c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143a0:	9503      	str	r5, [sp, #12]
 80143a2:	f04f 0b01 	mov.w	fp, #1
 80143a6:	4637      	mov	r7, r6
 80143a8:	463d      	mov	r5, r7
 80143aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80143ae:	b10b      	cbz	r3, 80143b4 <_svfiprintf_r+0x58>
 80143b0:	2b25      	cmp	r3, #37	; 0x25
 80143b2:	d13e      	bne.n	8014432 <_svfiprintf_r+0xd6>
 80143b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80143b8:	d00b      	beq.n	80143d2 <_svfiprintf_r+0x76>
 80143ba:	4653      	mov	r3, sl
 80143bc:	4632      	mov	r2, r6
 80143be:	4621      	mov	r1, r4
 80143c0:	4640      	mov	r0, r8
 80143c2:	f7ff ff71 	bl	80142a8 <__ssputs_r>
 80143c6:	3001      	adds	r0, #1
 80143c8:	f000 80a4 	beq.w	8014514 <_svfiprintf_r+0x1b8>
 80143cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143ce:	4453      	add	r3, sl
 80143d0:	9309      	str	r3, [sp, #36]	; 0x24
 80143d2:	783b      	ldrb	r3, [r7, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	f000 809d 	beq.w	8014514 <_svfiprintf_r+0x1b8>
 80143da:	2300      	movs	r3, #0
 80143dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143e4:	9304      	str	r3, [sp, #16]
 80143e6:	9307      	str	r3, [sp, #28]
 80143e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143ec:	931a      	str	r3, [sp, #104]	; 0x68
 80143ee:	462f      	mov	r7, r5
 80143f0:	2205      	movs	r2, #5
 80143f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80143f6:	4850      	ldr	r0, [pc, #320]	; (8014538 <_svfiprintf_r+0x1dc>)
 80143f8:	f7eb fef2 	bl	80001e0 <memchr>
 80143fc:	9b04      	ldr	r3, [sp, #16]
 80143fe:	b9d0      	cbnz	r0, 8014436 <_svfiprintf_r+0xda>
 8014400:	06d9      	lsls	r1, r3, #27
 8014402:	bf44      	itt	mi
 8014404:	2220      	movmi	r2, #32
 8014406:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801440a:	071a      	lsls	r2, r3, #28
 801440c:	bf44      	itt	mi
 801440e:	222b      	movmi	r2, #43	; 0x2b
 8014410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014414:	782a      	ldrb	r2, [r5, #0]
 8014416:	2a2a      	cmp	r2, #42	; 0x2a
 8014418:	d015      	beq.n	8014446 <_svfiprintf_r+0xea>
 801441a:	9a07      	ldr	r2, [sp, #28]
 801441c:	462f      	mov	r7, r5
 801441e:	2000      	movs	r0, #0
 8014420:	250a      	movs	r5, #10
 8014422:	4639      	mov	r1, r7
 8014424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014428:	3b30      	subs	r3, #48	; 0x30
 801442a:	2b09      	cmp	r3, #9
 801442c:	d94d      	bls.n	80144ca <_svfiprintf_r+0x16e>
 801442e:	b1b8      	cbz	r0, 8014460 <_svfiprintf_r+0x104>
 8014430:	e00f      	b.n	8014452 <_svfiprintf_r+0xf6>
 8014432:	462f      	mov	r7, r5
 8014434:	e7b8      	b.n	80143a8 <_svfiprintf_r+0x4c>
 8014436:	4a40      	ldr	r2, [pc, #256]	; (8014538 <_svfiprintf_r+0x1dc>)
 8014438:	1a80      	subs	r0, r0, r2
 801443a:	fa0b f000 	lsl.w	r0, fp, r0
 801443e:	4318      	orrs	r0, r3
 8014440:	9004      	str	r0, [sp, #16]
 8014442:	463d      	mov	r5, r7
 8014444:	e7d3      	b.n	80143ee <_svfiprintf_r+0x92>
 8014446:	9a03      	ldr	r2, [sp, #12]
 8014448:	1d11      	adds	r1, r2, #4
 801444a:	6812      	ldr	r2, [r2, #0]
 801444c:	9103      	str	r1, [sp, #12]
 801444e:	2a00      	cmp	r2, #0
 8014450:	db01      	blt.n	8014456 <_svfiprintf_r+0xfa>
 8014452:	9207      	str	r2, [sp, #28]
 8014454:	e004      	b.n	8014460 <_svfiprintf_r+0x104>
 8014456:	4252      	negs	r2, r2
 8014458:	f043 0302 	orr.w	r3, r3, #2
 801445c:	9207      	str	r2, [sp, #28]
 801445e:	9304      	str	r3, [sp, #16]
 8014460:	783b      	ldrb	r3, [r7, #0]
 8014462:	2b2e      	cmp	r3, #46	; 0x2e
 8014464:	d10c      	bne.n	8014480 <_svfiprintf_r+0x124>
 8014466:	787b      	ldrb	r3, [r7, #1]
 8014468:	2b2a      	cmp	r3, #42	; 0x2a
 801446a:	d133      	bne.n	80144d4 <_svfiprintf_r+0x178>
 801446c:	9b03      	ldr	r3, [sp, #12]
 801446e:	1d1a      	adds	r2, r3, #4
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	9203      	str	r2, [sp, #12]
 8014474:	2b00      	cmp	r3, #0
 8014476:	bfb8      	it	lt
 8014478:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801447c:	3702      	adds	r7, #2
 801447e:	9305      	str	r3, [sp, #20]
 8014480:	4d2e      	ldr	r5, [pc, #184]	; (801453c <_svfiprintf_r+0x1e0>)
 8014482:	7839      	ldrb	r1, [r7, #0]
 8014484:	2203      	movs	r2, #3
 8014486:	4628      	mov	r0, r5
 8014488:	f7eb feaa 	bl	80001e0 <memchr>
 801448c:	b138      	cbz	r0, 801449e <_svfiprintf_r+0x142>
 801448e:	2340      	movs	r3, #64	; 0x40
 8014490:	1b40      	subs	r0, r0, r5
 8014492:	fa03 f000 	lsl.w	r0, r3, r0
 8014496:	9b04      	ldr	r3, [sp, #16]
 8014498:	4303      	orrs	r3, r0
 801449a:	3701      	adds	r7, #1
 801449c:	9304      	str	r3, [sp, #16]
 801449e:	7839      	ldrb	r1, [r7, #0]
 80144a0:	4827      	ldr	r0, [pc, #156]	; (8014540 <_svfiprintf_r+0x1e4>)
 80144a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144a6:	2206      	movs	r2, #6
 80144a8:	1c7e      	adds	r6, r7, #1
 80144aa:	f7eb fe99 	bl	80001e0 <memchr>
 80144ae:	2800      	cmp	r0, #0
 80144b0:	d038      	beq.n	8014524 <_svfiprintf_r+0x1c8>
 80144b2:	4b24      	ldr	r3, [pc, #144]	; (8014544 <_svfiprintf_r+0x1e8>)
 80144b4:	bb13      	cbnz	r3, 80144fc <_svfiprintf_r+0x1a0>
 80144b6:	9b03      	ldr	r3, [sp, #12]
 80144b8:	3307      	adds	r3, #7
 80144ba:	f023 0307 	bic.w	r3, r3, #7
 80144be:	3308      	adds	r3, #8
 80144c0:	9303      	str	r3, [sp, #12]
 80144c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144c4:	444b      	add	r3, r9
 80144c6:	9309      	str	r3, [sp, #36]	; 0x24
 80144c8:	e76d      	b.n	80143a6 <_svfiprintf_r+0x4a>
 80144ca:	fb05 3202 	mla	r2, r5, r2, r3
 80144ce:	2001      	movs	r0, #1
 80144d0:	460f      	mov	r7, r1
 80144d2:	e7a6      	b.n	8014422 <_svfiprintf_r+0xc6>
 80144d4:	2300      	movs	r3, #0
 80144d6:	3701      	adds	r7, #1
 80144d8:	9305      	str	r3, [sp, #20]
 80144da:	4619      	mov	r1, r3
 80144dc:	250a      	movs	r5, #10
 80144de:	4638      	mov	r0, r7
 80144e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144e4:	3a30      	subs	r2, #48	; 0x30
 80144e6:	2a09      	cmp	r2, #9
 80144e8:	d903      	bls.n	80144f2 <_svfiprintf_r+0x196>
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d0c8      	beq.n	8014480 <_svfiprintf_r+0x124>
 80144ee:	9105      	str	r1, [sp, #20]
 80144f0:	e7c6      	b.n	8014480 <_svfiprintf_r+0x124>
 80144f2:	fb05 2101 	mla	r1, r5, r1, r2
 80144f6:	2301      	movs	r3, #1
 80144f8:	4607      	mov	r7, r0
 80144fa:	e7f0      	b.n	80144de <_svfiprintf_r+0x182>
 80144fc:	ab03      	add	r3, sp, #12
 80144fe:	9300      	str	r3, [sp, #0]
 8014500:	4622      	mov	r2, r4
 8014502:	4b11      	ldr	r3, [pc, #68]	; (8014548 <_svfiprintf_r+0x1ec>)
 8014504:	a904      	add	r1, sp, #16
 8014506:	4640      	mov	r0, r8
 8014508:	f7fc fb06 	bl	8010b18 <_printf_float>
 801450c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014510:	4681      	mov	r9, r0
 8014512:	d1d6      	bne.n	80144c2 <_svfiprintf_r+0x166>
 8014514:	89a3      	ldrh	r3, [r4, #12]
 8014516:	065b      	lsls	r3, r3, #25
 8014518:	f53f af35 	bmi.w	8014386 <_svfiprintf_r+0x2a>
 801451c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801451e:	b01d      	add	sp, #116	; 0x74
 8014520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014524:	ab03      	add	r3, sp, #12
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	4622      	mov	r2, r4
 801452a:	4b07      	ldr	r3, [pc, #28]	; (8014548 <_svfiprintf_r+0x1ec>)
 801452c:	a904      	add	r1, sp, #16
 801452e:	4640      	mov	r0, r8
 8014530:	f7fc fda8 	bl	8011084 <_printf_i>
 8014534:	e7ea      	b.n	801450c <_svfiprintf_r+0x1b0>
 8014536:	bf00      	nop
 8014538:	08016d3c 	.word	0x08016d3c
 801453c:	08016d42 	.word	0x08016d42
 8014540:	08016d46 	.word	0x08016d46
 8014544:	08010b19 	.word	0x08010b19
 8014548:	080142a9 	.word	0x080142a9

0801454c <__sfputc_r>:
 801454c:	6893      	ldr	r3, [r2, #8]
 801454e:	3b01      	subs	r3, #1
 8014550:	2b00      	cmp	r3, #0
 8014552:	b410      	push	{r4}
 8014554:	6093      	str	r3, [r2, #8]
 8014556:	da08      	bge.n	801456a <__sfputc_r+0x1e>
 8014558:	6994      	ldr	r4, [r2, #24]
 801455a:	42a3      	cmp	r3, r4
 801455c:	db01      	blt.n	8014562 <__sfputc_r+0x16>
 801455e:	290a      	cmp	r1, #10
 8014560:	d103      	bne.n	801456a <__sfputc_r+0x1e>
 8014562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014566:	f7fd bdb7 	b.w	80120d8 <__swbuf_r>
 801456a:	6813      	ldr	r3, [r2, #0]
 801456c:	1c58      	adds	r0, r3, #1
 801456e:	6010      	str	r0, [r2, #0]
 8014570:	7019      	strb	r1, [r3, #0]
 8014572:	4608      	mov	r0, r1
 8014574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014578:	4770      	bx	lr

0801457a <__sfputs_r>:
 801457a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801457c:	4606      	mov	r6, r0
 801457e:	460f      	mov	r7, r1
 8014580:	4614      	mov	r4, r2
 8014582:	18d5      	adds	r5, r2, r3
 8014584:	42ac      	cmp	r4, r5
 8014586:	d101      	bne.n	801458c <__sfputs_r+0x12>
 8014588:	2000      	movs	r0, #0
 801458a:	e007      	b.n	801459c <__sfputs_r+0x22>
 801458c:	463a      	mov	r2, r7
 801458e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014592:	4630      	mov	r0, r6
 8014594:	f7ff ffda 	bl	801454c <__sfputc_r>
 8014598:	1c43      	adds	r3, r0, #1
 801459a:	d1f3      	bne.n	8014584 <__sfputs_r+0xa>
 801459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080145a0 <_vfiprintf_r>:
 80145a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a4:	460c      	mov	r4, r1
 80145a6:	b09d      	sub	sp, #116	; 0x74
 80145a8:	4617      	mov	r7, r2
 80145aa:	461d      	mov	r5, r3
 80145ac:	4606      	mov	r6, r0
 80145ae:	b118      	cbz	r0, 80145b8 <_vfiprintf_r+0x18>
 80145b0:	6983      	ldr	r3, [r0, #24]
 80145b2:	b90b      	cbnz	r3, 80145b8 <_vfiprintf_r+0x18>
 80145b4:	f7fe fd84 	bl	80130c0 <__sinit>
 80145b8:	4b7c      	ldr	r3, [pc, #496]	; (80147ac <_vfiprintf_r+0x20c>)
 80145ba:	429c      	cmp	r4, r3
 80145bc:	d158      	bne.n	8014670 <_vfiprintf_r+0xd0>
 80145be:	6874      	ldr	r4, [r6, #4]
 80145c0:	89a3      	ldrh	r3, [r4, #12]
 80145c2:	0718      	lsls	r0, r3, #28
 80145c4:	d55e      	bpl.n	8014684 <_vfiprintf_r+0xe4>
 80145c6:	6923      	ldr	r3, [r4, #16]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d05b      	beq.n	8014684 <_vfiprintf_r+0xe4>
 80145cc:	2300      	movs	r3, #0
 80145ce:	9309      	str	r3, [sp, #36]	; 0x24
 80145d0:	2320      	movs	r3, #32
 80145d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145d6:	2330      	movs	r3, #48	; 0x30
 80145d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145dc:	9503      	str	r5, [sp, #12]
 80145de:	f04f 0b01 	mov.w	fp, #1
 80145e2:	46b8      	mov	r8, r7
 80145e4:	4645      	mov	r5, r8
 80145e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80145ea:	b10b      	cbz	r3, 80145f0 <_vfiprintf_r+0x50>
 80145ec:	2b25      	cmp	r3, #37	; 0x25
 80145ee:	d154      	bne.n	801469a <_vfiprintf_r+0xfa>
 80145f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80145f4:	d00b      	beq.n	801460e <_vfiprintf_r+0x6e>
 80145f6:	4653      	mov	r3, sl
 80145f8:	463a      	mov	r2, r7
 80145fa:	4621      	mov	r1, r4
 80145fc:	4630      	mov	r0, r6
 80145fe:	f7ff ffbc 	bl	801457a <__sfputs_r>
 8014602:	3001      	adds	r0, #1
 8014604:	f000 80c2 	beq.w	801478c <_vfiprintf_r+0x1ec>
 8014608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801460a:	4453      	add	r3, sl
 801460c:	9309      	str	r3, [sp, #36]	; 0x24
 801460e:	f898 3000 	ldrb.w	r3, [r8]
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 80ba 	beq.w	801478c <_vfiprintf_r+0x1ec>
 8014618:	2300      	movs	r3, #0
 801461a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801461e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014622:	9304      	str	r3, [sp, #16]
 8014624:	9307      	str	r3, [sp, #28]
 8014626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801462a:	931a      	str	r3, [sp, #104]	; 0x68
 801462c:	46a8      	mov	r8, r5
 801462e:	2205      	movs	r2, #5
 8014630:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014634:	485e      	ldr	r0, [pc, #376]	; (80147b0 <_vfiprintf_r+0x210>)
 8014636:	f7eb fdd3 	bl	80001e0 <memchr>
 801463a:	9b04      	ldr	r3, [sp, #16]
 801463c:	bb78      	cbnz	r0, 801469e <_vfiprintf_r+0xfe>
 801463e:	06d9      	lsls	r1, r3, #27
 8014640:	bf44      	itt	mi
 8014642:	2220      	movmi	r2, #32
 8014644:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014648:	071a      	lsls	r2, r3, #28
 801464a:	bf44      	itt	mi
 801464c:	222b      	movmi	r2, #43	; 0x2b
 801464e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014652:	782a      	ldrb	r2, [r5, #0]
 8014654:	2a2a      	cmp	r2, #42	; 0x2a
 8014656:	d02a      	beq.n	80146ae <_vfiprintf_r+0x10e>
 8014658:	9a07      	ldr	r2, [sp, #28]
 801465a:	46a8      	mov	r8, r5
 801465c:	2000      	movs	r0, #0
 801465e:	250a      	movs	r5, #10
 8014660:	4641      	mov	r1, r8
 8014662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014666:	3b30      	subs	r3, #48	; 0x30
 8014668:	2b09      	cmp	r3, #9
 801466a:	d969      	bls.n	8014740 <_vfiprintf_r+0x1a0>
 801466c:	b360      	cbz	r0, 80146c8 <_vfiprintf_r+0x128>
 801466e:	e024      	b.n	80146ba <_vfiprintf_r+0x11a>
 8014670:	4b50      	ldr	r3, [pc, #320]	; (80147b4 <_vfiprintf_r+0x214>)
 8014672:	429c      	cmp	r4, r3
 8014674:	d101      	bne.n	801467a <_vfiprintf_r+0xda>
 8014676:	68b4      	ldr	r4, [r6, #8]
 8014678:	e7a2      	b.n	80145c0 <_vfiprintf_r+0x20>
 801467a:	4b4f      	ldr	r3, [pc, #316]	; (80147b8 <_vfiprintf_r+0x218>)
 801467c:	429c      	cmp	r4, r3
 801467e:	bf08      	it	eq
 8014680:	68f4      	ldreq	r4, [r6, #12]
 8014682:	e79d      	b.n	80145c0 <_vfiprintf_r+0x20>
 8014684:	4621      	mov	r1, r4
 8014686:	4630      	mov	r0, r6
 8014688:	f7fd fd78 	bl	801217c <__swsetup_r>
 801468c:	2800      	cmp	r0, #0
 801468e:	d09d      	beq.n	80145cc <_vfiprintf_r+0x2c>
 8014690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014694:	b01d      	add	sp, #116	; 0x74
 8014696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801469a:	46a8      	mov	r8, r5
 801469c:	e7a2      	b.n	80145e4 <_vfiprintf_r+0x44>
 801469e:	4a44      	ldr	r2, [pc, #272]	; (80147b0 <_vfiprintf_r+0x210>)
 80146a0:	1a80      	subs	r0, r0, r2
 80146a2:	fa0b f000 	lsl.w	r0, fp, r0
 80146a6:	4318      	orrs	r0, r3
 80146a8:	9004      	str	r0, [sp, #16]
 80146aa:	4645      	mov	r5, r8
 80146ac:	e7be      	b.n	801462c <_vfiprintf_r+0x8c>
 80146ae:	9a03      	ldr	r2, [sp, #12]
 80146b0:	1d11      	adds	r1, r2, #4
 80146b2:	6812      	ldr	r2, [r2, #0]
 80146b4:	9103      	str	r1, [sp, #12]
 80146b6:	2a00      	cmp	r2, #0
 80146b8:	db01      	blt.n	80146be <_vfiprintf_r+0x11e>
 80146ba:	9207      	str	r2, [sp, #28]
 80146bc:	e004      	b.n	80146c8 <_vfiprintf_r+0x128>
 80146be:	4252      	negs	r2, r2
 80146c0:	f043 0302 	orr.w	r3, r3, #2
 80146c4:	9207      	str	r2, [sp, #28]
 80146c6:	9304      	str	r3, [sp, #16]
 80146c8:	f898 3000 	ldrb.w	r3, [r8]
 80146cc:	2b2e      	cmp	r3, #46	; 0x2e
 80146ce:	d10e      	bne.n	80146ee <_vfiprintf_r+0x14e>
 80146d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80146d4:	2b2a      	cmp	r3, #42	; 0x2a
 80146d6:	d138      	bne.n	801474a <_vfiprintf_r+0x1aa>
 80146d8:	9b03      	ldr	r3, [sp, #12]
 80146da:	1d1a      	adds	r2, r3, #4
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	9203      	str	r2, [sp, #12]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	bfb8      	it	lt
 80146e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80146e8:	f108 0802 	add.w	r8, r8, #2
 80146ec:	9305      	str	r3, [sp, #20]
 80146ee:	4d33      	ldr	r5, [pc, #204]	; (80147bc <_vfiprintf_r+0x21c>)
 80146f0:	f898 1000 	ldrb.w	r1, [r8]
 80146f4:	2203      	movs	r2, #3
 80146f6:	4628      	mov	r0, r5
 80146f8:	f7eb fd72 	bl	80001e0 <memchr>
 80146fc:	b140      	cbz	r0, 8014710 <_vfiprintf_r+0x170>
 80146fe:	2340      	movs	r3, #64	; 0x40
 8014700:	1b40      	subs	r0, r0, r5
 8014702:	fa03 f000 	lsl.w	r0, r3, r0
 8014706:	9b04      	ldr	r3, [sp, #16]
 8014708:	4303      	orrs	r3, r0
 801470a:	f108 0801 	add.w	r8, r8, #1
 801470e:	9304      	str	r3, [sp, #16]
 8014710:	f898 1000 	ldrb.w	r1, [r8]
 8014714:	482a      	ldr	r0, [pc, #168]	; (80147c0 <_vfiprintf_r+0x220>)
 8014716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801471a:	2206      	movs	r2, #6
 801471c:	f108 0701 	add.w	r7, r8, #1
 8014720:	f7eb fd5e 	bl	80001e0 <memchr>
 8014724:	2800      	cmp	r0, #0
 8014726:	d037      	beq.n	8014798 <_vfiprintf_r+0x1f8>
 8014728:	4b26      	ldr	r3, [pc, #152]	; (80147c4 <_vfiprintf_r+0x224>)
 801472a:	bb1b      	cbnz	r3, 8014774 <_vfiprintf_r+0x1d4>
 801472c:	9b03      	ldr	r3, [sp, #12]
 801472e:	3307      	adds	r3, #7
 8014730:	f023 0307 	bic.w	r3, r3, #7
 8014734:	3308      	adds	r3, #8
 8014736:	9303      	str	r3, [sp, #12]
 8014738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801473a:	444b      	add	r3, r9
 801473c:	9309      	str	r3, [sp, #36]	; 0x24
 801473e:	e750      	b.n	80145e2 <_vfiprintf_r+0x42>
 8014740:	fb05 3202 	mla	r2, r5, r2, r3
 8014744:	2001      	movs	r0, #1
 8014746:	4688      	mov	r8, r1
 8014748:	e78a      	b.n	8014660 <_vfiprintf_r+0xc0>
 801474a:	2300      	movs	r3, #0
 801474c:	f108 0801 	add.w	r8, r8, #1
 8014750:	9305      	str	r3, [sp, #20]
 8014752:	4619      	mov	r1, r3
 8014754:	250a      	movs	r5, #10
 8014756:	4640      	mov	r0, r8
 8014758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801475c:	3a30      	subs	r2, #48	; 0x30
 801475e:	2a09      	cmp	r2, #9
 8014760:	d903      	bls.n	801476a <_vfiprintf_r+0x1ca>
 8014762:	2b00      	cmp	r3, #0
 8014764:	d0c3      	beq.n	80146ee <_vfiprintf_r+0x14e>
 8014766:	9105      	str	r1, [sp, #20]
 8014768:	e7c1      	b.n	80146ee <_vfiprintf_r+0x14e>
 801476a:	fb05 2101 	mla	r1, r5, r1, r2
 801476e:	2301      	movs	r3, #1
 8014770:	4680      	mov	r8, r0
 8014772:	e7f0      	b.n	8014756 <_vfiprintf_r+0x1b6>
 8014774:	ab03      	add	r3, sp, #12
 8014776:	9300      	str	r3, [sp, #0]
 8014778:	4622      	mov	r2, r4
 801477a:	4b13      	ldr	r3, [pc, #76]	; (80147c8 <_vfiprintf_r+0x228>)
 801477c:	a904      	add	r1, sp, #16
 801477e:	4630      	mov	r0, r6
 8014780:	f7fc f9ca 	bl	8010b18 <_printf_float>
 8014784:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014788:	4681      	mov	r9, r0
 801478a:	d1d5      	bne.n	8014738 <_vfiprintf_r+0x198>
 801478c:	89a3      	ldrh	r3, [r4, #12]
 801478e:	065b      	lsls	r3, r3, #25
 8014790:	f53f af7e 	bmi.w	8014690 <_vfiprintf_r+0xf0>
 8014794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014796:	e77d      	b.n	8014694 <_vfiprintf_r+0xf4>
 8014798:	ab03      	add	r3, sp, #12
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	4622      	mov	r2, r4
 801479e:	4b0a      	ldr	r3, [pc, #40]	; (80147c8 <_vfiprintf_r+0x228>)
 80147a0:	a904      	add	r1, sp, #16
 80147a2:	4630      	mov	r0, r6
 80147a4:	f7fc fc6e 	bl	8011084 <_printf_i>
 80147a8:	e7ec      	b.n	8014784 <_vfiprintf_r+0x1e4>
 80147aa:	bf00      	nop
 80147ac:	08016bf0 	.word	0x08016bf0
 80147b0:	08016d3c 	.word	0x08016d3c
 80147b4:	08016c10 	.word	0x08016c10
 80147b8:	08016bd0 	.word	0x08016bd0
 80147bc:	08016d42 	.word	0x08016d42
 80147c0:	08016d46 	.word	0x08016d46
 80147c4:	08010b19 	.word	0x08010b19
 80147c8:	0801457b 	.word	0x0801457b

080147cc <_sbrk_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4c06      	ldr	r4, [pc, #24]	; (80147e8 <_sbrk_r+0x1c>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4605      	mov	r5, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	6023      	str	r3, [r4, #0]
 80147d8:	f7ef fca8 	bl	800412c <_sbrk>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_sbrk_r+0x1a>
 80147e0:	6823      	ldr	r3, [r4, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_sbrk_r+0x1a>
 80147e4:	602b      	str	r3, [r5, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	20010238 	.word	0x20010238

080147ec <nanf>:
 80147ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80147f4 <nanf+0x8>
 80147f0:	4770      	bx	lr
 80147f2:	bf00      	nop
 80147f4:	7fc00000 	.word	0x7fc00000

080147f8 <__sread>:
 80147f8:	b510      	push	{r4, lr}
 80147fa:	460c      	mov	r4, r1
 80147fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014800:	f000 f8f4 	bl	80149ec <_read_r>
 8014804:	2800      	cmp	r0, #0
 8014806:	bfab      	itete	ge
 8014808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801480a:	89a3      	ldrhlt	r3, [r4, #12]
 801480c:	181b      	addge	r3, r3, r0
 801480e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014812:	bfac      	ite	ge
 8014814:	6563      	strge	r3, [r4, #84]	; 0x54
 8014816:	81a3      	strhlt	r3, [r4, #12]
 8014818:	bd10      	pop	{r4, pc}

0801481a <__swrite>:
 801481a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801481e:	461f      	mov	r7, r3
 8014820:	898b      	ldrh	r3, [r1, #12]
 8014822:	05db      	lsls	r3, r3, #23
 8014824:	4605      	mov	r5, r0
 8014826:	460c      	mov	r4, r1
 8014828:	4616      	mov	r6, r2
 801482a:	d505      	bpl.n	8014838 <__swrite+0x1e>
 801482c:	2302      	movs	r3, #2
 801482e:	2200      	movs	r2, #0
 8014830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014834:	f000 f886 	bl	8014944 <_lseek_r>
 8014838:	89a3      	ldrh	r3, [r4, #12]
 801483a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801483e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014842:	81a3      	strh	r3, [r4, #12]
 8014844:	4632      	mov	r2, r6
 8014846:	463b      	mov	r3, r7
 8014848:	4628      	mov	r0, r5
 801484a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801484e:	f000 b835 	b.w	80148bc <_write_r>

08014852 <__sseek>:
 8014852:	b510      	push	{r4, lr}
 8014854:	460c      	mov	r4, r1
 8014856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801485a:	f000 f873 	bl	8014944 <_lseek_r>
 801485e:	1c43      	adds	r3, r0, #1
 8014860:	89a3      	ldrh	r3, [r4, #12]
 8014862:	bf15      	itete	ne
 8014864:	6560      	strne	r0, [r4, #84]	; 0x54
 8014866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801486a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801486e:	81a3      	strheq	r3, [r4, #12]
 8014870:	bf18      	it	ne
 8014872:	81a3      	strhne	r3, [r4, #12]
 8014874:	bd10      	pop	{r4, pc}

08014876 <__sclose>:
 8014876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801487a:	f000 b831 	b.w	80148e0 <_close_r>

0801487e <strncmp>:
 801487e:	b510      	push	{r4, lr}
 8014880:	b16a      	cbz	r2, 801489e <strncmp+0x20>
 8014882:	3901      	subs	r1, #1
 8014884:	1884      	adds	r4, r0, r2
 8014886:	f810 3b01 	ldrb.w	r3, [r0], #1
 801488a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801488e:	4293      	cmp	r3, r2
 8014890:	d103      	bne.n	801489a <strncmp+0x1c>
 8014892:	42a0      	cmp	r0, r4
 8014894:	d001      	beq.n	801489a <strncmp+0x1c>
 8014896:	2b00      	cmp	r3, #0
 8014898:	d1f5      	bne.n	8014886 <strncmp+0x8>
 801489a:	1a98      	subs	r0, r3, r2
 801489c:	bd10      	pop	{r4, pc}
 801489e:	4610      	mov	r0, r2
 80148a0:	e7fc      	b.n	801489c <strncmp+0x1e>

080148a2 <__ascii_wctomb>:
 80148a2:	b149      	cbz	r1, 80148b8 <__ascii_wctomb+0x16>
 80148a4:	2aff      	cmp	r2, #255	; 0xff
 80148a6:	bf85      	ittet	hi
 80148a8:	238a      	movhi	r3, #138	; 0x8a
 80148aa:	6003      	strhi	r3, [r0, #0]
 80148ac:	700a      	strbls	r2, [r1, #0]
 80148ae:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80148b2:	bf98      	it	ls
 80148b4:	2001      	movls	r0, #1
 80148b6:	4770      	bx	lr
 80148b8:	4608      	mov	r0, r1
 80148ba:	4770      	bx	lr

080148bc <_write_r>:
 80148bc:	b538      	push	{r3, r4, r5, lr}
 80148be:	4c07      	ldr	r4, [pc, #28]	; (80148dc <_write_r+0x20>)
 80148c0:	4605      	mov	r5, r0
 80148c2:	4608      	mov	r0, r1
 80148c4:	4611      	mov	r1, r2
 80148c6:	2200      	movs	r2, #0
 80148c8:	6022      	str	r2, [r4, #0]
 80148ca:	461a      	mov	r2, r3
 80148cc:	f7ef fbde 	bl	800408c <_write>
 80148d0:	1c43      	adds	r3, r0, #1
 80148d2:	d102      	bne.n	80148da <_write_r+0x1e>
 80148d4:	6823      	ldr	r3, [r4, #0]
 80148d6:	b103      	cbz	r3, 80148da <_write_r+0x1e>
 80148d8:	602b      	str	r3, [r5, #0]
 80148da:	bd38      	pop	{r3, r4, r5, pc}
 80148dc:	20010238 	.word	0x20010238

080148e0 <_close_r>:
 80148e0:	b538      	push	{r3, r4, r5, lr}
 80148e2:	4c06      	ldr	r4, [pc, #24]	; (80148fc <_close_r+0x1c>)
 80148e4:	2300      	movs	r3, #0
 80148e6:	4605      	mov	r5, r0
 80148e8:	4608      	mov	r0, r1
 80148ea:	6023      	str	r3, [r4, #0]
 80148ec:	f7ef fbea 	bl	80040c4 <_close>
 80148f0:	1c43      	adds	r3, r0, #1
 80148f2:	d102      	bne.n	80148fa <_close_r+0x1a>
 80148f4:	6823      	ldr	r3, [r4, #0]
 80148f6:	b103      	cbz	r3, 80148fa <_close_r+0x1a>
 80148f8:	602b      	str	r3, [r5, #0]
 80148fa:	bd38      	pop	{r3, r4, r5, pc}
 80148fc:	20010238 	.word	0x20010238

08014900 <_fstat_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4c07      	ldr	r4, [pc, #28]	; (8014920 <_fstat_r+0x20>)
 8014904:	2300      	movs	r3, #0
 8014906:	4605      	mov	r5, r0
 8014908:	4608      	mov	r0, r1
 801490a:	4611      	mov	r1, r2
 801490c:	6023      	str	r3, [r4, #0]
 801490e:	f7ef fbe5 	bl	80040dc <_fstat>
 8014912:	1c43      	adds	r3, r0, #1
 8014914:	d102      	bne.n	801491c <_fstat_r+0x1c>
 8014916:	6823      	ldr	r3, [r4, #0]
 8014918:	b103      	cbz	r3, 801491c <_fstat_r+0x1c>
 801491a:	602b      	str	r3, [r5, #0]
 801491c:	bd38      	pop	{r3, r4, r5, pc}
 801491e:	bf00      	nop
 8014920:	20010238 	.word	0x20010238

08014924 <_isatty_r>:
 8014924:	b538      	push	{r3, r4, r5, lr}
 8014926:	4c06      	ldr	r4, [pc, #24]	; (8014940 <_isatty_r+0x1c>)
 8014928:	2300      	movs	r3, #0
 801492a:	4605      	mov	r5, r0
 801492c:	4608      	mov	r0, r1
 801492e:	6023      	str	r3, [r4, #0]
 8014930:	f7ef fbe4 	bl	80040fc <_isatty>
 8014934:	1c43      	adds	r3, r0, #1
 8014936:	d102      	bne.n	801493e <_isatty_r+0x1a>
 8014938:	6823      	ldr	r3, [r4, #0]
 801493a:	b103      	cbz	r3, 801493e <_isatty_r+0x1a>
 801493c:	602b      	str	r3, [r5, #0]
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	20010238 	.word	0x20010238

08014944 <_lseek_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4c07      	ldr	r4, [pc, #28]	; (8014964 <_lseek_r+0x20>)
 8014948:	4605      	mov	r5, r0
 801494a:	4608      	mov	r0, r1
 801494c:	4611      	mov	r1, r2
 801494e:	2200      	movs	r2, #0
 8014950:	6022      	str	r2, [r4, #0]
 8014952:	461a      	mov	r2, r3
 8014954:	f7ef fbdd 	bl	8004112 <_lseek>
 8014958:	1c43      	adds	r3, r0, #1
 801495a:	d102      	bne.n	8014962 <_lseek_r+0x1e>
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	b103      	cbz	r3, 8014962 <_lseek_r+0x1e>
 8014960:	602b      	str	r3, [r5, #0]
 8014962:	bd38      	pop	{r3, r4, r5, pc}
 8014964:	20010238 	.word	0x20010238

08014968 <memmove>:
 8014968:	4288      	cmp	r0, r1
 801496a:	b510      	push	{r4, lr}
 801496c:	eb01 0302 	add.w	r3, r1, r2
 8014970:	d807      	bhi.n	8014982 <memmove+0x1a>
 8014972:	1e42      	subs	r2, r0, #1
 8014974:	4299      	cmp	r1, r3
 8014976:	d00a      	beq.n	801498e <memmove+0x26>
 8014978:	f811 4b01 	ldrb.w	r4, [r1], #1
 801497c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014980:	e7f8      	b.n	8014974 <memmove+0xc>
 8014982:	4283      	cmp	r3, r0
 8014984:	d9f5      	bls.n	8014972 <memmove+0xa>
 8014986:	1881      	adds	r1, r0, r2
 8014988:	1ad2      	subs	r2, r2, r3
 801498a:	42d3      	cmn	r3, r2
 801498c:	d100      	bne.n	8014990 <memmove+0x28>
 801498e:	bd10      	pop	{r4, pc}
 8014990:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014994:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014998:	e7f7      	b.n	801498a <memmove+0x22>

0801499a <__malloc_lock>:
 801499a:	4770      	bx	lr

0801499c <__malloc_unlock>:
 801499c:	4770      	bx	lr

0801499e <_realloc_r>:
 801499e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149a0:	4607      	mov	r7, r0
 80149a2:	4614      	mov	r4, r2
 80149a4:	460e      	mov	r6, r1
 80149a6:	b921      	cbnz	r1, 80149b2 <_realloc_r+0x14>
 80149a8:	4611      	mov	r1, r2
 80149aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80149ae:	f7ff bc21 	b.w	80141f4 <_malloc_r>
 80149b2:	b922      	cbnz	r2, 80149be <_realloc_r+0x20>
 80149b4:	f7ff fbd0 	bl	8014158 <_free_r>
 80149b8:	4625      	mov	r5, r4
 80149ba:	4628      	mov	r0, r5
 80149bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149be:	f000 f827 	bl	8014a10 <_malloc_usable_size_r>
 80149c2:	42a0      	cmp	r0, r4
 80149c4:	d20f      	bcs.n	80149e6 <_realloc_r+0x48>
 80149c6:	4621      	mov	r1, r4
 80149c8:	4638      	mov	r0, r7
 80149ca:	f7ff fc13 	bl	80141f4 <_malloc_r>
 80149ce:	4605      	mov	r5, r0
 80149d0:	2800      	cmp	r0, #0
 80149d2:	d0f2      	beq.n	80149ba <_realloc_r+0x1c>
 80149d4:	4631      	mov	r1, r6
 80149d6:	4622      	mov	r2, r4
 80149d8:	f7fb fff6 	bl	80109c8 <memcpy>
 80149dc:	4631      	mov	r1, r6
 80149de:	4638      	mov	r0, r7
 80149e0:	f7ff fbba 	bl	8014158 <_free_r>
 80149e4:	e7e9      	b.n	80149ba <_realloc_r+0x1c>
 80149e6:	4635      	mov	r5, r6
 80149e8:	e7e7      	b.n	80149ba <_realloc_r+0x1c>
	...

080149ec <_read_r>:
 80149ec:	b538      	push	{r3, r4, r5, lr}
 80149ee:	4c07      	ldr	r4, [pc, #28]	; (8014a0c <_read_r+0x20>)
 80149f0:	4605      	mov	r5, r0
 80149f2:	4608      	mov	r0, r1
 80149f4:	4611      	mov	r1, r2
 80149f6:	2200      	movs	r2, #0
 80149f8:	6022      	str	r2, [r4, #0]
 80149fa:	461a      	mov	r2, r3
 80149fc:	f7ef fb29 	bl	8004052 <_read>
 8014a00:	1c43      	adds	r3, r0, #1
 8014a02:	d102      	bne.n	8014a0a <_read_r+0x1e>
 8014a04:	6823      	ldr	r3, [r4, #0]
 8014a06:	b103      	cbz	r3, 8014a0a <_read_r+0x1e>
 8014a08:	602b      	str	r3, [r5, #0]
 8014a0a:	bd38      	pop	{r3, r4, r5, pc}
 8014a0c:	20010238 	.word	0x20010238

08014a10 <_malloc_usable_size_r>:
 8014a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a14:	1f18      	subs	r0, r3, #4
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	bfbc      	itt	lt
 8014a1a:	580b      	ldrlt	r3, [r1, r0]
 8014a1c:	18c0      	addlt	r0, r0, r3
 8014a1e:	4770      	bx	lr

08014a20 <pow>:
 8014a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a24:	ed2d 8b04 	vpush	{d8-d9}
 8014a28:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014cfc <pow+0x2dc>
 8014a2c:	b08d      	sub	sp, #52	; 0x34
 8014a2e:	ec57 6b10 	vmov	r6, r7, d0
 8014a32:	ec55 4b11 	vmov	r4, r5, d1
 8014a36:	f000 fb73 	bl	8015120 <__ieee754_pow>
 8014a3a:	f999 3000 	ldrsb.w	r3, [r9]
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	3301      	adds	r3, #1
 8014a42:	eeb0 8a40 	vmov.f32	s16, s0
 8014a46:	eef0 8a60 	vmov.f32	s17, s1
 8014a4a:	46c8      	mov	r8, r9
 8014a4c:	d05f      	beq.n	8014b0e <pow+0xee>
 8014a4e:	4622      	mov	r2, r4
 8014a50:	462b      	mov	r3, r5
 8014a52:	4620      	mov	r0, r4
 8014a54:	4629      	mov	r1, r5
 8014a56:	f7ec f869 	bl	8000b2c <__aeabi_dcmpun>
 8014a5a:	4683      	mov	fp, r0
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	d156      	bne.n	8014b0e <pow+0xee>
 8014a60:	4632      	mov	r2, r6
 8014a62:	463b      	mov	r3, r7
 8014a64:	4630      	mov	r0, r6
 8014a66:	4639      	mov	r1, r7
 8014a68:	f7ec f860 	bl	8000b2c <__aeabi_dcmpun>
 8014a6c:	9001      	str	r0, [sp, #4]
 8014a6e:	b1e8      	cbz	r0, 8014aac <pow+0x8c>
 8014a70:	2200      	movs	r2, #0
 8014a72:	2300      	movs	r3, #0
 8014a74:	4620      	mov	r0, r4
 8014a76:	4629      	mov	r1, r5
 8014a78:	f7ec f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	d046      	beq.n	8014b0e <pow+0xee>
 8014a80:	2301      	movs	r3, #1
 8014a82:	9302      	str	r3, [sp, #8]
 8014a84:	4b96      	ldr	r3, [pc, #600]	; (8014ce0 <pow+0x2c0>)
 8014a86:	9303      	str	r3, [sp, #12]
 8014a88:	4b96      	ldr	r3, [pc, #600]	; (8014ce4 <pow+0x2c4>)
 8014a8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014a8e:	2200      	movs	r2, #0
 8014a90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014a94:	9b00      	ldr	r3, [sp, #0]
 8014a96:	2b02      	cmp	r3, #2
 8014a98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014a9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014aa0:	d033      	beq.n	8014b0a <pow+0xea>
 8014aa2:	a802      	add	r0, sp, #8
 8014aa4:	f001 fbce 	bl	8016244 <matherr>
 8014aa8:	bb48      	cbnz	r0, 8014afe <pow+0xde>
 8014aaa:	e05d      	b.n	8014b68 <pow+0x148>
 8014aac:	f04f 0a00 	mov.w	sl, #0
 8014ab0:	f04f 0b00 	mov.w	fp, #0
 8014ab4:	4652      	mov	r2, sl
 8014ab6:	465b      	mov	r3, fp
 8014ab8:	4630      	mov	r0, r6
 8014aba:	4639      	mov	r1, r7
 8014abc:	f7ec f804 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ac0:	ec4b ab19 	vmov	d9, sl, fp
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d054      	beq.n	8014b72 <pow+0x152>
 8014ac8:	4652      	mov	r2, sl
 8014aca:	465b      	mov	r3, fp
 8014acc:	4620      	mov	r0, r4
 8014ace:	4629      	mov	r1, r5
 8014ad0:	f7eb fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ad4:	4680      	mov	r8, r0
 8014ad6:	b318      	cbz	r0, 8014b20 <pow+0x100>
 8014ad8:	2301      	movs	r3, #1
 8014ada:	9302      	str	r3, [sp, #8]
 8014adc:	4b80      	ldr	r3, [pc, #512]	; (8014ce0 <pow+0x2c0>)
 8014ade:	9303      	str	r3, [sp, #12]
 8014ae0:	9b01      	ldr	r3, [sp, #4]
 8014ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ae4:	9b00      	ldr	r3, [sp, #0]
 8014ae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014aea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014aee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d0d5      	beq.n	8014aa2 <pow+0x82>
 8014af6:	4b7b      	ldr	r3, [pc, #492]	; (8014ce4 <pow+0x2c4>)
 8014af8:	2200      	movs	r2, #0
 8014afa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b00:	b11b      	cbz	r3, 8014b0a <pow+0xea>
 8014b02:	f7fb ff37 	bl	8010974 <__errno>
 8014b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b08:	6003      	str	r3, [r0, #0]
 8014b0a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014b0e:	eeb0 0a48 	vmov.f32	s0, s16
 8014b12:	eef0 0a68 	vmov.f32	s1, s17
 8014b16:	b00d      	add	sp, #52	; 0x34
 8014b18:	ecbd 8b04 	vpop	{d8-d9}
 8014b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b20:	ec45 4b10 	vmov	d0, r4, r5
 8014b24:	f001 fb86 	bl	8016234 <finite>
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	d0f0      	beq.n	8014b0e <pow+0xee>
 8014b2c:	4652      	mov	r2, sl
 8014b2e:	465b      	mov	r3, fp
 8014b30:	4620      	mov	r0, r4
 8014b32:	4629      	mov	r1, r5
 8014b34:	f7eb ffd2 	bl	8000adc <__aeabi_dcmplt>
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	d0e8      	beq.n	8014b0e <pow+0xee>
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	9302      	str	r3, [sp, #8]
 8014b40:	4b67      	ldr	r3, [pc, #412]	; (8014ce0 <pow+0x2c0>)
 8014b42:	9303      	str	r3, [sp, #12]
 8014b44:	f999 3000 	ldrsb.w	r3, [r9]
 8014b48:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014b4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014b54:	b913      	cbnz	r3, 8014b5c <pow+0x13c>
 8014b56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014b5a:	e7a2      	b.n	8014aa2 <pow+0x82>
 8014b5c:	4962      	ldr	r1, [pc, #392]	; (8014ce8 <pow+0x2c8>)
 8014b5e:	2000      	movs	r0, #0
 8014b60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014b64:	2b02      	cmp	r3, #2
 8014b66:	d19c      	bne.n	8014aa2 <pow+0x82>
 8014b68:	f7fb ff04 	bl	8010974 <__errno>
 8014b6c:	2321      	movs	r3, #33	; 0x21
 8014b6e:	6003      	str	r3, [r0, #0]
 8014b70:	e7c5      	b.n	8014afe <pow+0xde>
 8014b72:	eeb0 0a48 	vmov.f32	s0, s16
 8014b76:	eef0 0a68 	vmov.f32	s1, s17
 8014b7a:	f001 fb5b 	bl	8016234 <finite>
 8014b7e:	9000      	str	r0, [sp, #0]
 8014b80:	2800      	cmp	r0, #0
 8014b82:	f040 8081 	bne.w	8014c88 <pow+0x268>
 8014b86:	ec47 6b10 	vmov	d0, r6, r7
 8014b8a:	f001 fb53 	bl	8016234 <finite>
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d07a      	beq.n	8014c88 <pow+0x268>
 8014b92:	ec45 4b10 	vmov	d0, r4, r5
 8014b96:	f001 fb4d 	bl	8016234 <finite>
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d074      	beq.n	8014c88 <pow+0x268>
 8014b9e:	ec53 2b18 	vmov	r2, r3, d8
 8014ba2:	ee18 0a10 	vmov	r0, s16
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	f7eb ffc0 	bl	8000b2c <__aeabi_dcmpun>
 8014bac:	f999 9000 	ldrsb.w	r9, [r9]
 8014bb0:	4b4b      	ldr	r3, [pc, #300]	; (8014ce0 <pow+0x2c0>)
 8014bb2:	b1b0      	cbz	r0, 8014be2 <pow+0x1c2>
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014bba:	9b00      	ldr	r3, [sp, #0]
 8014bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8014bbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014bc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014bc6:	f1b9 0f00 	cmp.w	r9, #0
 8014bca:	d0c4      	beq.n	8014b56 <pow+0x136>
 8014bcc:	4652      	mov	r2, sl
 8014bce:	465b      	mov	r3, fp
 8014bd0:	4650      	mov	r0, sl
 8014bd2:	4659      	mov	r1, fp
 8014bd4:	f7eb fe3a 	bl	800084c <__aeabi_ddiv>
 8014bd8:	f1b9 0f02 	cmp.w	r9, #2
 8014bdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014be0:	e7c1      	b.n	8014b66 <pow+0x146>
 8014be2:	2203      	movs	r2, #3
 8014be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014be8:	900a      	str	r0, [sp, #40]	; 0x28
 8014bea:	4629      	mov	r1, r5
 8014bec:	4620      	mov	r0, r4
 8014bee:	2200      	movs	r2, #0
 8014bf0:	4b3e      	ldr	r3, [pc, #248]	; (8014cec <pow+0x2cc>)
 8014bf2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014bf6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014bfa:	f7eb fcfd 	bl	80005f8 <__aeabi_dmul>
 8014bfe:	4604      	mov	r4, r0
 8014c00:	460d      	mov	r5, r1
 8014c02:	f1b9 0f00 	cmp.w	r9, #0
 8014c06:	d124      	bne.n	8014c52 <pow+0x232>
 8014c08:	4b39      	ldr	r3, [pc, #228]	; (8014cf0 <pow+0x2d0>)
 8014c0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014c0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c12:	4630      	mov	r0, r6
 8014c14:	4652      	mov	r2, sl
 8014c16:	465b      	mov	r3, fp
 8014c18:	4639      	mov	r1, r7
 8014c1a:	f7eb ff5f 	bl	8000adc <__aeabi_dcmplt>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	d056      	beq.n	8014cd0 <pow+0x2b0>
 8014c22:	ec45 4b10 	vmov	d0, r4, r5
 8014c26:	f001 fb17 	bl	8016258 <rint>
 8014c2a:	4622      	mov	r2, r4
 8014c2c:	462b      	mov	r3, r5
 8014c2e:	ec51 0b10 	vmov	r0, r1, d0
 8014c32:	f7eb ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c36:	b920      	cbnz	r0, 8014c42 <pow+0x222>
 8014c38:	4b2e      	ldr	r3, [pc, #184]	; (8014cf4 <pow+0x2d4>)
 8014c3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014c3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c42:	f998 3000 	ldrsb.w	r3, [r8]
 8014c46:	2b02      	cmp	r3, #2
 8014c48:	d142      	bne.n	8014cd0 <pow+0x2b0>
 8014c4a:	f7fb fe93 	bl	8010974 <__errno>
 8014c4e:	2322      	movs	r3, #34	; 0x22
 8014c50:	e78d      	b.n	8014b6e <pow+0x14e>
 8014c52:	4b29      	ldr	r3, [pc, #164]	; (8014cf8 <pow+0x2d8>)
 8014c54:	2200      	movs	r2, #0
 8014c56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c5a:	4630      	mov	r0, r6
 8014c5c:	4652      	mov	r2, sl
 8014c5e:	465b      	mov	r3, fp
 8014c60:	4639      	mov	r1, r7
 8014c62:	f7eb ff3b 	bl	8000adc <__aeabi_dcmplt>
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d0eb      	beq.n	8014c42 <pow+0x222>
 8014c6a:	ec45 4b10 	vmov	d0, r4, r5
 8014c6e:	f001 faf3 	bl	8016258 <rint>
 8014c72:	4622      	mov	r2, r4
 8014c74:	462b      	mov	r3, r5
 8014c76:	ec51 0b10 	vmov	r0, r1, d0
 8014c7a:	f7eb ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d1df      	bne.n	8014c42 <pow+0x222>
 8014c82:	2200      	movs	r2, #0
 8014c84:	4b18      	ldr	r3, [pc, #96]	; (8014ce8 <pow+0x2c8>)
 8014c86:	e7da      	b.n	8014c3e <pow+0x21e>
 8014c88:	2200      	movs	r2, #0
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	ec51 0b18 	vmov	r0, r1, d8
 8014c90:	f7eb ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c94:	2800      	cmp	r0, #0
 8014c96:	f43f af3a 	beq.w	8014b0e <pow+0xee>
 8014c9a:	ec47 6b10 	vmov	d0, r6, r7
 8014c9e:	f001 fac9 	bl	8016234 <finite>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	f43f af33 	beq.w	8014b0e <pow+0xee>
 8014ca8:	ec45 4b10 	vmov	d0, r4, r5
 8014cac:	f001 fac2 	bl	8016234 <finite>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	f43f af2c 	beq.w	8014b0e <pow+0xee>
 8014cb6:	2304      	movs	r3, #4
 8014cb8:	9302      	str	r3, [sp, #8]
 8014cba:	4b09      	ldr	r3, [pc, #36]	; (8014ce0 <pow+0x2c0>)
 8014cbc:	9303      	str	r3, [sp, #12]
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8014cc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014cc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014cca:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014cce:	e7b8      	b.n	8014c42 <pow+0x222>
 8014cd0:	a802      	add	r0, sp, #8
 8014cd2:	f001 fab7 	bl	8016244 <matherr>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	f47f af11 	bne.w	8014afe <pow+0xde>
 8014cdc:	e7b5      	b.n	8014c4a <pow+0x22a>
 8014cde:	bf00      	nop
 8014ce0:	08016e4e 	.word	0x08016e4e
 8014ce4:	3ff00000 	.word	0x3ff00000
 8014ce8:	fff00000 	.word	0xfff00000
 8014cec:	3fe00000 	.word	0x3fe00000
 8014cf0:	47efffff 	.word	0x47efffff
 8014cf4:	c7efffff 	.word	0xc7efffff
 8014cf8:	7ff00000 	.word	0x7ff00000
 8014cfc:	20000348 	.word	0x20000348

08014d00 <sqrt>:
 8014d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d04:	ed2d 8b02 	vpush	{d8}
 8014d08:	b08b      	sub	sp, #44	; 0x2c
 8014d0a:	ec55 4b10 	vmov	r4, r5, d0
 8014d0e:	f000 ff15 	bl	8015b3c <__ieee754_sqrt>
 8014d12:	4b26      	ldr	r3, [pc, #152]	; (8014dac <sqrt+0xac>)
 8014d14:	eeb0 8a40 	vmov.f32	s16, s0
 8014d18:	eef0 8a60 	vmov.f32	s17, s1
 8014d1c:	f993 6000 	ldrsb.w	r6, [r3]
 8014d20:	1c73      	adds	r3, r6, #1
 8014d22:	d02a      	beq.n	8014d7a <sqrt+0x7a>
 8014d24:	4622      	mov	r2, r4
 8014d26:	462b      	mov	r3, r5
 8014d28:	4620      	mov	r0, r4
 8014d2a:	4629      	mov	r1, r5
 8014d2c:	f7eb fefe 	bl	8000b2c <__aeabi_dcmpun>
 8014d30:	4607      	mov	r7, r0
 8014d32:	bb10      	cbnz	r0, 8014d7a <sqrt+0x7a>
 8014d34:	f04f 0800 	mov.w	r8, #0
 8014d38:	f04f 0900 	mov.w	r9, #0
 8014d3c:	4642      	mov	r2, r8
 8014d3e:	464b      	mov	r3, r9
 8014d40:	4620      	mov	r0, r4
 8014d42:	4629      	mov	r1, r5
 8014d44:	f7eb feca 	bl	8000adc <__aeabi_dcmplt>
 8014d48:	b1b8      	cbz	r0, 8014d7a <sqrt+0x7a>
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	4b18      	ldr	r3, [pc, #96]	; (8014db0 <sqrt+0xb0>)
 8014d50:	9301      	str	r3, [sp, #4]
 8014d52:	9708      	str	r7, [sp, #32]
 8014d54:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014d58:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014d5c:	b9b6      	cbnz	r6, 8014d8c <sqrt+0x8c>
 8014d5e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014d62:	4668      	mov	r0, sp
 8014d64:	f001 fa6e 	bl	8016244 <matherr>
 8014d68:	b1d0      	cbz	r0, 8014da0 <sqrt+0xa0>
 8014d6a:	9b08      	ldr	r3, [sp, #32]
 8014d6c:	b11b      	cbz	r3, 8014d76 <sqrt+0x76>
 8014d6e:	f7fb fe01 	bl	8010974 <__errno>
 8014d72:	9b08      	ldr	r3, [sp, #32]
 8014d74:	6003      	str	r3, [r0, #0]
 8014d76:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014d7a:	eeb0 0a48 	vmov.f32	s0, s16
 8014d7e:	eef0 0a68 	vmov.f32	s1, s17
 8014d82:	b00b      	add	sp, #44	; 0x2c
 8014d84:	ecbd 8b02 	vpop	{d8}
 8014d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d8c:	4642      	mov	r2, r8
 8014d8e:	464b      	mov	r3, r9
 8014d90:	4640      	mov	r0, r8
 8014d92:	4649      	mov	r1, r9
 8014d94:	f7eb fd5a 	bl	800084c <__aeabi_ddiv>
 8014d98:	2e02      	cmp	r6, #2
 8014d9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014d9e:	d1e0      	bne.n	8014d62 <sqrt+0x62>
 8014da0:	f7fb fde8 	bl	8010974 <__errno>
 8014da4:	2321      	movs	r3, #33	; 0x21
 8014da6:	6003      	str	r3, [r0, #0]
 8014da8:	e7df      	b.n	8014d6a <sqrt+0x6a>
 8014daa:	bf00      	nop
 8014dac:	20000348 	.word	0x20000348
 8014db0:	08016e52 	.word	0x08016e52

08014db4 <powf>:
 8014db4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8014db8:	ed2d 8b04 	vpush	{d8-d9}
 8014dbc:	4ca7      	ldr	r4, [pc, #668]	; (801505c <powf+0x2a8>)
 8014dbe:	b08a      	sub	sp, #40	; 0x28
 8014dc0:	eef0 8a40 	vmov.f32	s17, s0
 8014dc4:	eeb0 8a60 	vmov.f32	s16, s1
 8014dc8:	f000 ff68 	bl	8015c9c <__ieee754_powf>
 8014dcc:	f994 5000 	ldrsb.w	r5, [r4]
 8014dd0:	1c6b      	adds	r3, r5, #1
 8014dd2:	eeb0 9a40 	vmov.f32	s18, s0
 8014dd6:	4626      	mov	r6, r4
 8014dd8:	d05f      	beq.n	8014e9a <powf+0xe6>
 8014dda:	eeb4 8a48 	vcmp.f32	s16, s16
 8014dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de2:	d65a      	bvs.n	8014e9a <powf+0xe6>
 8014de4:	eef4 8a68 	vcmp.f32	s17, s17
 8014de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dec:	d721      	bvc.n	8014e32 <powf+0x7e>
 8014dee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df6:	d150      	bne.n	8014e9a <powf+0xe6>
 8014df8:	2301      	movs	r3, #1
 8014dfa:	9300      	str	r3, [sp, #0]
 8014dfc:	4b98      	ldr	r3, [pc, #608]	; (8015060 <powf+0x2ac>)
 8014dfe:	9301      	str	r3, [sp, #4]
 8014e00:	ee18 0a90 	vmov	r0, s17
 8014e04:	2300      	movs	r3, #0
 8014e06:	9308      	str	r3, [sp, #32]
 8014e08:	f7eb fb9e 	bl	8000548 <__aeabi_f2d>
 8014e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e10:	ee18 0a10 	vmov	r0, s16
 8014e14:	f7eb fb98 	bl	8000548 <__aeabi_f2d>
 8014e18:	4b92      	ldr	r3, [pc, #584]	; (8015064 <powf+0x2b0>)
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	2d02      	cmp	r5, #2
 8014e1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014e26:	d032      	beq.n	8014e8e <powf+0xda>
 8014e28:	4668      	mov	r0, sp
 8014e2a:	f001 fa0b 	bl	8016244 <matherr>
 8014e2e:	bb40      	cbnz	r0, 8014e82 <powf+0xce>
 8014e30:	e065      	b.n	8014efe <powf+0x14a>
 8014e32:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8015068 <powf+0x2b4>
 8014e36:	eef4 8a69 	vcmp.f32	s17, s19
 8014e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e3e:	d163      	bne.n	8014f08 <powf+0x154>
 8014e40:	eeb4 8a69 	vcmp.f32	s16, s19
 8014e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e48:	d12e      	bne.n	8014ea8 <powf+0xf4>
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	9300      	str	r3, [sp, #0]
 8014e4e:	4b84      	ldr	r3, [pc, #528]	; (8015060 <powf+0x2ac>)
 8014e50:	9301      	str	r3, [sp, #4]
 8014e52:	ee18 0a90 	vmov	r0, s17
 8014e56:	2300      	movs	r3, #0
 8014e58:	9308      	str	r3, [sp, #32]
 8014e5a:	f7eb fb75 	bl	8000548 <__aeabi_f2d>
 8014e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e62:	ee18 0a10 	vmov	r0, s16
 8014e66:	f7eb fb6f 	bl	8000548 <__aeabi_f2d>
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014e76:	2d00      	cmp	r5, #0
 8014e78:	d0d6      	beq.n	8014e28 <powf+0x74>
 8014e7a:	4b7a      	ldr	r3, [pc, #488]	; (8015064 <powf+0x2b0>)
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014e82:	9b08      	ldr	r3, [sp, #32]
 8014e84:	b11b      	cbz	r3, 8014e8e <powf+0xda>
 8014e86:	f7fb fd75 	bl	8010974 <__errno>
 8014e8a:	9b08      	ldr	r3, [sp, #32]
 8014e8c:	6003      	str	r3, [r0, #0]
 8014e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e92:	f7eb fea9 	bl	8000be8 <__aeabi_d2f>
 8014e96:	ee09 0a10 	vmov	s18, r0
 8014e9a:	eeb0 0a49 	vmov.f32	s0, s18
 8014e9e:	b00a      	add	sp, #40	; 0x28
 8014ea0:	ecbd 8b04 	vpop	{d8-d9}
 8014ea4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8014ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8014eac:	f001 fad5 	bl	801645a <finitef>
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d0f2      	beq.n	8014e9a <powf+0xe6>
 8014eb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ebc:	d5ed      	bpl.n	8014e9a <powf+0xe6>
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	4b67      	ldr	r3, [pc, #412]	; (8015060 <powf+0x2ac>)
 8014ec4:	9301      	str	r3, [sp, #4]
 8014ec6:	ee18 0a90 	vmov	r0, s17
 8014eca:	2300      	movs	r3, #0
 8014ecc:	9308      	str	r3, [sp, #32]
 8014ece:	f7eb fb3b 	bl	8000548 <__aeabi_f2d>
 8014ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ed6:	ee18 0a10 	vmov	r0, s16
 8014eda:	f7eb fb35 	bl	8000548 <__aeabi_f2d>
 8014ede:	f994 3000 	ldrsb.w	r3, [r4]
 8014ee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ee6:	b923      	cbnz	r3, 8014ef2 <powf+0x13e>
 8014ee8:	2200      	movs	r2, #0
 8014eea:	2300      	movs	r3, #0
 8014eec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014ef0:	e79a      	b.n	8014e28 <powf+0x74>
 8014ef2:	495e      	ldr	r1, [pc, #376]	; (801506c <powf+0x2b8>)
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014efa:	2b02      	cmp	r3, #2
 8014efc:	d194      	bne.n	8014e28 <powf+0x74>
 8014efe:	f7fb fd39 	bl	8010974 <__errno>
 8014f02:	2321      	movs	r3, #33	; 0x21
 8014f04:	6003      	str	r3, [r0, #0]
 8014f06:	e7bc      	b.n	8014e82 <powf+0xce>
 8014f08:	f001 faa7 	bl	801645a <finitef>
 8014f0c:	4605      	mov	r5, r0
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d173      	bne.n	8014ffa <powf+0x246>
 8014f12:	eeb0 0a68 	vmov.f32	s0, s17
 8014f16:	f001 faa0 	bl	801645a <finitef>
 8014f1a:	2800      	cmp	r0, #0
 8014f1c:	d06d      	beq.n	8014ffa <powf+0x246>
 8014f1e:	eeb0 0a48 	vmov.f32	s0, s16
 8014f22:	f001 fa9a 	bl	801645a <finitef>
 8014f26:	2800      	cmp	r0, #0
 8014f28:	d067      	beq.n	8014ffa <powf+0x246>
 8014f2a:	ee18 0a90 	vmov	r0, s17
 8014f2e:	f7eb fb0b 	bl	8000548 <__aeabi_f2d>
 8014f32:	4680      	mov	r8, r0
 8014f34:	ee18 0a10 	vmov	r0, s16
 8014f38:	4689      	mov	r9, r1
 8014f3a:	f7eb fb05 	bl	8000548 <__aeabi_f2d>
 8014f3e:	eeb4 9a49 	vcmp.f32	s18, s18
 8014f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f46:	f994 4000 	ldrsb.w	r4, [r4]
 8014f4a:	4b45      	ldr	r3, [pc, #276]	; (8015060 <powf+0x2ac>)
 8014f4c:	d713      	bvc.n	8014f76 <powf+0x1c2>
 8014f4e:	2201      	movs	r2, #1
 8014f50:	e9cd 2300 	strd	r2, r3, [sp]
 8014f54:	9508      	str	r5, [sp, #32]
 8014f56:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f5e:	2c00      	cmp	r4, #0
 8014f60:	d0c2      	beq.n	8014ee8 <powf+0x134>
 8014f62:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8014f66:	ee17 0a90 	vmov	r0, s15
 8014f6a:	f7eb faed 	bl	8000548 <__aeabi_f2d>
 8014f6e:	2c02      	cmp	r4, #2
 8014f70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014f74:	e7c2      	b.n	8014efc <powf+0x148>
 8014f76:	2203      	movs	r2, #3
 8014f78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014f7c:	e9cd 2300 	strd	r2, r3, [sp]
 8014f80:	9508      	str	r5, [sp, #32]
 8014f82:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f8a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014f8e:	b9fc      	cbnz	r4, 8014fd0 <powf+0x21c>
 8014f90:	4b37      	ldr	r3, [pc, #220]	; (8015070 <powf+0x2bc>)
 8014f92:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8014f96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014fa2:	d553      	bpl.n	801504c <powf+0x298>
 8014fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8014fa8:	f001 fa62 	bl	8016470 <rintf>
 8014fac:	eeb4 0a48 	vcmp.f32	s0, s16
 8014fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb4:	d004      	beq.n	8014fc0 <powf+0x20c>
 8014fb6:	4b2f      	ldr	r3, [pc, #188]	; (8015074 <powf+0x2c0>)
 8014fb8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014fbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014fc0:	f996 3000 	ldrsb.w	r3, [r6]
 8014fc4:	2b02      	cmp	r3, #2
 8014fc6:	d141      	bne.n	801504c <powf+0x298>
 8014fc8:	f7fb fcd4 	bl	8010974 <__errno>
 8014fcc:	2322      	movs	r3, #34	; 0x22
 8014fce:	e799      	b.n	8014f04 <powf+0x150>
 8014fd0:	4b29      	ldr	r3, [pc, #164]	; (8015078 <powf+0x2c4>)
 8014fd2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014fe0:	d5ee      	bpl.n	8014fc0 <powf+0x20c>
 8014fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8014fe6:	f001 fa43 	bl	8016470 <rintf>
 8014fea:	eeb4 0a48 	vcmp.f32	s0, s16
 8014fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff2:	d0e5      	beq.n	8014fc0 <powf+0x20c>
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	4b1d      	ldr	r3, [pc, #116]	; (801506c <powf+0x2b8>)
 8014ff8:	e7e0      	b.n	8014fbc <powf+0x208>
 8014ffa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015002:	f47f af4a 	bne.w	8014e9a <powf+0xe6>
 8015006:	eeb0 0a68 	vmov.f32	s0, s17
 801500a:	f001 fa26 	bl	801645a <finitef>
 801500e:	2800      	cmp	r0, #0
 8015010:	f43f af43 	beq.w	8014e9a <powf+0xe6>
 8015014:	eeb0 0a48 	vmov.f32	s0, s16
 8015018:	f001 fa1f 	bl	801645a <finitef>
 801501c:	2800      	cmp	r0, #0
 801501e:	f43f af3c 	beq.w	8014e9a <powf+0xe6>
 8015022:	2304      	movs	r3, #4
 8015024:	9300      	str	r3, [sp, #0]
 8015026:	4b0e      	ldr	r3, [pc, #56]	; (8015060 <powf+0x2ac>)
 8015028:	9301      	str	r3, [sp, #4]
 801502a:	ee18 0a90 	vmov	r0, s17
 801502e:	2300      	movs	r3, #0
 8015030:	9308      	str	r3, [sp, #32]
 8015032:	f7eb fa89 	bl	8000548 <__aeabi_f2d>
 8015036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801503a:	ee18 0a10 	vmov	r0, s16
 801503e:	f7eb fa83 	bl	8000548 <__aeabi_f2d>
 8015042:	2200      	movs	r2, #0
 8015044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015048:	2300      	movs	r3, #0
 801504a:	e7b7      	b.n	8014fbc <powf+0x208>
 801504c:	4668      	mov	r0, sp
 801504e:	f001 f8f9 	bl	8016244 <matherr>
 8015052:	2800      	cmp	r0, #0
 8015054:	f47f af15 	bne.w	8014e82 <powf+0xce>
 8015058:	e7b6      	b.n	8014fc8 <powf+0x214>
 801505a:	bf00      	nop
 801505c:	20000348 	.word	0x20000348
 8015060:	08016e57 	.word	0x08016e57
 8015064:	3ff00000 	.word	0x3ff00000
 8015068:	00000000 	.word	0x00000000
 801506c:	fff00000 	.word	0xfff00000
 8015070:	47efffff 	.word	0x47efffff
 8015074:	c7efffff 	.word	0xc7efffff
 8015078:	7ff00000 	.word	0x7ff00000

0801507c <sqrtf>:
 801507c:	b510      	push	{r4, lr}
 801507e:	ed2d 8b02 	vpush	{d8}
 8015082:	b08a      	sub	sp, #40	; 0x28
 8015084:	eeb0 8a40 	vmov.f32	s16, s0
 8015088:	f001 f8c8 	bl	801621c <__ieee754_sqrtf>
 801508c:	4b21      	ldr	r3, [pc, #132]	; (8015114 <sqrtf+0x98>)
 801508e:	f993 4000 	ldrsb.w	r4, [r3]
 8015092:	1c63      	adds	r3, r4, #1
 8015094:	d02c      	beq.n	80150f0 <sqrtf+0x74>
 8015096:	eeb4 8a48 	vcmp.f32	s16, s16
 801509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509e:	d627      	bvs.n	80150f0 <sqrtf+0x74>
 80150a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80150a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a8:	d522      	bpl.n	80150f0 <sqrtf+0x74>
 80150aa:	2301      	movs	r3, #1
 80150ac:	9300      	str	r3, [sp, #0]
 80150ae:	4b1a      	ldr	r3, [pc, #104]	; (8015118 <sqrtf+0x9c>)
 80150b0:	9301      	str	r3, [sp, #4]
 80150b2:	ee18 0a10 	vmov	r0, s16
 80150b6:	2300      	movs	r3, #0
 80150b8:	9308      	str	r3, [sp, #32]
 80150ba:	f7eb fa45 	bl	8000548 <__aeabi_f2d>
 80150be:	2200      	movs	r2, #0
 80150c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150c8:	2300      	movs	r3, #0
 80150ca:	b9ac      	cbnz	r4, 80150f8 <sqrtf+0x7c>
 80150cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80150d0:	4668      	mov	r0, sp
 80150d2:	f001 f8b7 	bl	8016244 <matherr>
 80150d6:	b1b8      	cbz	r0, 8015108 <sqrtf+0x8c>
 80150d8:	9b08      	ldr	r3, [sp, #32]
 80150da:	b11b      	cbz	r3, 80150e4 <sqrtf+0x68>
 80150dc:	f7fb fc4a 	bl	8010974 <__errno>
 80150e0:	9b08      	ldr	r3, [sp, #32]
 80150e2:	6003      	str	r3, [r0, #0]
 80150e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150e8:	f7eb fd7e 	bl	8000be8 <__aeabi_d2f>
 80150ec:	ee00 0a10 	vmov	s0, r0
 80150f0:	b00a      	add	sp, #40	; 0x28
 80150f2:	ecbd 8b02 	vpop	{d8}
 80150f6:	bd10      	pop	{r4, pc}
 80150f8:	4610      	mov	r0, r2
 80150fa:	4619      	mov	r1, r3
 80150fc:	f7eb fba6 	bl	800084c <__aeabi_ddiv>
 8015100:	2c02      	cmp	r4, #2
 8015102:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015106:	d1e3      	bne.n	80150d0 <sqrtf+0x54>
 8015108:	f7fb fc34 	bl	8010974 <__errno>
 801510c:	2321      	movs	r3, #33	; 0x21
 801510e:	6003      	str	r3, [r0, #0]
 8015110:	e7e2      	b.n	80150d8 <sqrtf+0x5c>
 8015112:	bf00      	nop
 8015114:	20000348 	.word	0x20000348
 8015118:	08016e5c 	.word	0x08016e5c
 801511c:	00000000 	.word	0x00000000

08015120 <__ieee754_pow>:
 8015120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	b091      	sub	sp, #68	; 0x44
 8015126:	ed8d 1b00 	vstr	d1, [sp]
 801512a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801512e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8015132:	ea58 0302 	orrs.w	r3, r8, r2
 8015136:	ec57 6b10 	vmov	r6, r7, d0
 801513a:	f000 84be 	beq.w	8015aba <__ieee754_pow+0x99a>
 801513e:	4b7a      	ldr	r3, [pc, #488]	; (8015328 <__ieee754_pow+0x208>)
 8015140:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8015144:	429c      	cmp	r4, r3
 8015146:	463d      	mov	r5, r7
 8015148:	ee10 aa10 	vmov	sl, s0
 801514c:	dc09      	bgt.n	8015162 <__ieee754_pow+0x42>
 801514e:	d103      	bne.n	8015158 <__ieee754_pow+0x38>
 8015150:	b93e      	cbnz	r6, 8015162 <__ieee754_pow+0x42>
 8015152:	45a0      	cmp	r8, r4
 8015154:	dc0d      	bgt.n	8015172 <__ieee754_pow+0x52>
 8015156:	e001      	b.n	801515c <__ieee754_pow+0x3c>
 8015158:	4598      	cmp	r8, r3
 801515a:	dc02      	bgt.n	8015162 <__ieee754_pow+0x42>
 801515c:	4598      	cmp	r8, r3
 801515e:	d10e      	bne.n	801517e <__ieee754_pow+0x5e>
 8015160:	b16a      	cbz	r2, 801517e <__ieee754_pow+0x5e>
 8015162:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015166:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801516a:	ea54 030a 	orrs.w	r3, r4, sl
 801516e:	f000 84a4 	beq.w	8015aba <__ieee754_pow+0x99a>
 8015172:	486e      	ldr	r0, [pc, #440]	; (801532c <__ieee754_pow+0x20c>)
 8015174:	b011      	add	sp, #68	; 0x44
 8015176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801517a:	f001 b865 	b.w	8016248 <nan>
 801517e:	2d00      	cmp	r5, #0
 8015180:	da53      	bge.n	801522a <__ieee754_pow+0x10a>
 8015182:	4b6b      	ldr	r3, [pc, #428]	; (8015330 <__ieee754_pow+0x210>)
 8015184:	4598      	cmp	r8, r3
 8015186:	dc4d      	bgt.n	8015224 <__ieee754_pow+0x104>
 8015188:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801518c:	4598      	cmp	r8, r3
 801518e:	dd4c      	ble.n	801522a <__ieee754_pow+0x10a>
 8015190:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015194:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015198:	2b14      	cmp	r3, #20
 801519a:	dd26      	ble.n	80151ea <__ieee754_pow+0xca>
 801519c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80151a0:	fa22 f103 	lsr.w	r1, r2, r3
 80151a4:	fa01 f303 	lsl.w	r3, r1, r3
 80151a8:	4293      	cmp	r3, r2
 80151aa:	d13e      	bne.n	801522a <__ieee754_pow+0x10a>
 80151ac:	f001 0101 	and.w	r1, r1, #1
 80151b0:	f1c1 0b02 	rsb	fp, r1, #2
 80151b4:	2a00      	cmp	r2, #0
 80151b6:	d15b      	bne.n	8015270 <__ieee754_pow+0x150>
 80151b8:	4b5b      	ldr	r3, [pc, #364]	; (8015328 <__ieee754_pow+0x208>)
 80151ba:	4598      	cmp	r8, r3
 80151bc:	d124      	bne.n	8015208 <__ieee754_pow+0xe8>
 80151be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80151c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80151c6:	ea53 030a 	orrs.w	r3, r3, sl
 80151ca:	f000 8476 	beq.w	8015aba <__ieee754_pow+0x99a>
 80151ce:	4b59      	ldr	r3, [pc, #356]	; (8015334 <__ieee754_pow+0x214>)
 80151d0:	429c      	cmp	r4, r3
 80151d2:	dd2d      	ble.n	8015230 <__ieee754_pow+0x110>
 80151d4:	f1b9 0f00 	cmp.w	r9, #0
 80151d8:	f280 8473 	bge.w	8015ac2 <__ieee754_pow+0x9a2>
 80151dc:	2000      	movs	r0, #0
 80151de:	2100      	movs	r1, #0
 80151e0:	ec41 0b10 	vmov	d0, r0, r1
 80151e4:	b011      	add	sp, #68	; 0x44
 80151e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ea:	2a00      	cmp	r2, #0
 80151ec:	d13e      	bne.n	801526c <__ieee754_pow+0x14c>
 80151ee:	f1c3 0314 	rsb	r3, r3, #20
 80151f2:	fa48 f103 	asr.w	r1, r8, r3
 80151f6:	fa01 f303 	lsl.w	r3, r1, r3
 80151fa:	4543      	cmp	r3, r8
 80151fc:	f040 8469 	bne.w	8015ad2 <__ieee754_pow+0x9b2>
 8015200:	f001 0101 	and.w	r1, r1, #1
 8015204:	f1c1 0b02 	rsb	fp, r1, #2
 8015208:	4b4b      	ldr	r3, [pc, #300]	; (8015338 <__ieee754_pow+0x218>)
 801520a:	4598      	cmp	r8, r3
 801520c:	d118      	bne.n	8015240 <__ieee754_pow+0x120>
 801520e:	f1b9 0f00 	cmp.w	r9, #0
 8015212:	f280 845a 	bge.w	8015aca <__ieee754_pow+0x9aa>
 8015216:	4948      	ldr	r1, [pc, #288]	; (8015338 <__ieee754_pow+0x218>)
 8015218:	4632      	mov	r2, r6
 801521a:	463b      	mov	r3, r7
 801521c:	2000      	movs	r0, #0
 801521e:	f7eb fb15 	bl	800084c <__aeabi_ddiv>
 8015222:	e7dd      	b.n	80151e0 <__ieee754_pow+0xc0>
 8015224:	f04f 0b02 	mov.w	fp, #2
 8015228:	e7c4      	b.n	80151b4 <__ieee754_pow+0x94>
 801522a:	f04f 0b00 	mov.w	fp, #0
 801522e:	e7c1      	b.n	80151b4 <__ieee754_pow+0x94>
 8015230:	f1b9 0f00 	cmp.w	r9, #0
 8015234:	dad2      	bge.n	80151dc <__ieee754_pow+0xbc>
 8015236:	e9dd 0300 	ldrd	r0, r3, [sp]
 801523a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801523e:	e7cf      	b.n	80151e0 <__ieee754_pow+0xc0>
 8015240:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015244:	d106      	bne.n	8015254 <__ieee754_pow+0x134>
 8015246:	4632      	mov	r2, r6
 8015248:	463b      	mov	r3, r7
 801524a:	4610      	mov	r0, r2
 801524c:	4619      	mov	r1, r3
 801524e:	f7eb f9d3 	bl	80005f8 <__aeabi_dmul>
 8015252:	e7c5      	b.n	80151e0 <__ieee754_pow+0xc0>
 8015254:	4b39      	ldr	r3, [pc, #228]	; (801533c <__ieee754_pow+0x21c>)
 8015256:	4599      	cmp	r9, r3
 8015258:	d10a      	bne.n	8015270 <__ieee754_pow+0x150>
 801525a:	2d00      	cmp	r5, #0
 801525c:	db08      	blt.n	8015270 <__ieee754_pow+0x150>
 801525e:	ec47 6b10 	vmov	d0, r6, r7
 8015262:	b011      	add	sp, #68	; 0x44
 8015264:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015268:	f000 bc68 	b.w	8015b3c <__ieee754_sqrt>
 801526c:	f04f 0b00 	mov.w	fp, #0
 8015270:	ec47 6b10 	vmov	d0, r6, r7
 8015274:	f000 ffd5 	bl	8016222 <fabs>
 8015278:	ec51 0b10 	vmov	r0, r1, d0
 801527c:	f1ba 0f00 	cmp.w	sl, #0
 8015280:	d127      	bne.n	80152d2 <__ieee754_pow+0x1b2>
 8015282:	b124      	cbz	r4, 801528e <__ieee754_pow+0x16e>
 8015284:	4b2c      	ldr	r3, [pc, #176]	; (8015338 <__ieee754_pow+0x218>)
 8015286:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801528a:	429a      	cmp	r2, r3
 801528c:	d121      	bne.n	80152d2 <__ieee754_pow+0x1b2>
 801528e:	f1b9 0f00 	cmp.w	r9, #0
 8015292:	da05      	bge.n	80152a0 <__ieee754_pow+0x180>
 8015294:	4602      	mov	r2, r0
 8015296:	460b      	mov	r3, r1
 8015298:	2000      	movs	r0, #0
 801529a:	4927      	ldr	r1, [pc, #156]	; (8015338 <__ieee754_pow+0x218>)
 801529c:	f7eb fad6 	bl	800084c <__aeabi_ddiv>
 80152a0:	2d00      	cmp	r5, #0
 80152a2:	da9d      	bge.n	80151e0 <__ieee754_pow+0xc0>
 80152a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80152a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80152ac:	ea54 030b 	orrs.w	r3, r4, fp
 80152b0:	d108      	bne.n	80152c4 <__ieee754_pow+0x1a4>
 80152b2:	4602      	mov	r2, r0
 80152b4:	460b      	mov	r3, r1
 80152b6:	4610      	mov	r0, r2
 80152b8:	4619      	mov	r1, r3
 80152ba:	f7ea ffe5 	bl	8000288 <__aeabi_dsub>
 80152be:	4602      	mov	r2, r0
 80152c0:	460b      	mov	r3, r1
 80152c2:	e7ac      	b.n	801521e <__ieee754_pow+0xfe>
 80152c4:	f1bb 0f01 	cmp.w	fp, #1
 80152c8:	d18a      	bne.n	80151e0 <__ieee754_pow+0xc0>
 80152ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152ce:	4619      	mov	r1, r3
 80152d0:	e786      	b.n	80151e0 <__ieee754_pow+0xc0>
 80152d2:	0fed      	lsrs	r5, r5, #31
 80152d4:	1e6b      	subs	r3, r5, #1
 80152d6:	930d      	str	r3, [sp, #52]	; 0x34
 80152d8:	ea5b 0303 	orrs.w	r3, fp, r3
 80152dc:	d102      	bne.n	80152e4 <__ieee754_pow+0x1c4>
 80152de:	4632      	mov	r2, r6
 80152e0:	463b      	mov	r3, r7
 80152e2:	e7e8      	b.n	80152b6 <__ieee754_pow+0x196>
 80152e4:	4b16      	ldr	r3, [pc, #88]	; (8015340 <__ieee754_pow+0x220>)
 80152e6:	4598      	cmp	r8, r3
 80152e8:	f340 80fe 	ble.w	80154e8 <__ieee754_pow+0x3c8>
 80152ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80152f0:	4598      	cmp	r8, r3
 80152f2:	dd0a      	ble.n	801530a <__ieee754_pow+0x1ea>
 80152f4:	4b0f      	ldr	r3, [pc, #60]	; (8015334 <__ieee754_pow+0x214>)
 80152f6:	429c      	cmp	r4, r3
 80152f8:	dc0d      	bgt.n	8015316 <__ieee754_pow+0x1f6>
 80152fa:	f1b9 0f00 	cmp.w	r9, #0
 80152fe:	f6bf af6d 	bge.w	80151dc <__ieee754_pow+0xbc>
 8015302:	a307      	add	r3, pc, #28	; (adr r3, 8015320 <__ieee754_pow+0x200>)
 8015304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015308:	e79f      	b.n	801524a <__ieee754_pow+0x12a>
 801530a:	4b0e      	ldr	r3, [pc, #56]	; (8015344 <__ieee754_pow+0x224>)
 801530c:	429c      	cmp	r4, r3
 801530e:	ddf4      	ble.n	80152fa <__ieee754_pow+0x1da>
 8015310:	4b09      	ldr	r3, [pc, #36]	; (8015338 <__ieee754_pow+0x218>)
 8015312:	429c      	cmp	r4, r3
 8015314:	dd18      	ble.n	8015348 <__ieee754_pow+0x228>
 8015316:	f1b9 0f00 	cmp.w	r9, #0
 801531a:	dcf2      	bgt.n	8015302 <__ieee754_pow+0x1e2>
 801531c:	e75e      	b.n	80151dc <__ieee754_pow+0xbc>
 801531e:	bf00      	nop
 8015320:	8800759c 	.word	0x8800759c
 8015324:	7e37e43c 	.word	0x7e37e43c
 8015328:	7ff00000 	.word	0x7ff00000
 801532c:	08016d41 	.word	0x08016d41
 8015330:	433fffff 	.word	0x433fffff
 8015334:	3fefffff 	.word	0x3fefffff
 8015338:	3ff00000 	.word	0x3ff00000
 801533c:	3fe00000 	.word	0x3fe00000
 8015340:	41e00000 	.word	0x41e00000
 8015344:	3feffffe 	.word	0x3feffffe
 8015348:	2200      	movs	r2, #0
 801534a:	4b63      	ldr	r3, [pc, #396]	; (80154d8 <__ieee754_pow+0x3b8>)
 801534c:	f7ea ff9c 	bl	8000288 <__aeabi_dsub>
 8015350:	a355      	add	r3, pc, #340	; (adr r3, 80154a8 <__ieee754_pow+0x388>)
 8015352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015356:	4604      	mov	r4, r0
 8015358:	460d      	mov	r5, r1
 801535a:	f7eb f94d 	bl	80005f8 <__aeabi_dmul>
 801535e:	a354      	add	r3, pc, #336	; (adr r3, 80154b0 <__ieee754_pow+0x390>)
 8015360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015364:	4606      	mov	r6, r0
 8015366:	460f      	mov	r7, r1
 8015368:	4620      	mov	r0, r4
 801536a:	4629      	mov	r1, r5
 801536c:	f7eb f944 	bl	80005f8 <__aeabi_dmul>
 8015370:	2200      	movs	r2, #0
 8015372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015376:	4b59      	ldr	r3, [pc, #356]	; (80154dc <__ieee754_pow+0x3bc>)
 8015378:	4620      	mov	r0, r4
 801537a:	4629      	mov	r1, r5
 801537c:	f7eb f93c 	bl	80005f8 <__aeabi_dmul>
 8015380:	4602      	mov	r2, r0
 8015382:	460b      	mov	r3, r1
 8015384:	a14c      	add	r1, pc, #304	; (adr r1, 80154b8 <__ieee754_pow+0x398>)
 8015386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801538a:	f7ea ff7d 	bl	8000288 <__aeabi_dsub>
 801538e:	4622      	mov	r2, r4
 8015390:	462b      	mov	r3, r5
 8015392:	f7eb f931 	bl	80005f8 <__aeabi_dmul>
 8015396:	4602      	mov	r2, r0
 8015398:	460b      	mov	r3, r1
 801539a:	2000      	movs	r0, #0
 801539c:	4950      	ldr	r1, [pc, #320]	; (80154e0 <__ieee754_pow+0x3c0>)
 801539e:	f7ea ff73 	bl	8000288 <__aeabi_dsub>
 80153a2:	4622      	mov	r2, r4
 80153a4:	462b      	mov	r3, r5
 80153a6:	4680      	mov	r8, r0
 80153a8:	4689      	mov	r9, r1
 80153aa:	4620      	mov	r0, r4
 80153ac:	4629      	mov	r1, r5
 80153ae:	f7eb f923 	bl	80005f8 <__aeabi_dmul>
 80153b2:	4602      	mov	r2, r0
 80153b4:	460b      	mov	r3, r1
 80153b6:	4640      	mov	r0, r8
 80153b8:	4649      	mov	r1, r9
 80153ba:	f7eb f91d 	bl	80005f8 <__aeabi_dmul>
 80153be:	a340      	add	r3, pc, #256	; (adr r3, 80154c0 <__ieee754_pow+0x3a0>)
 80153c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c4:	f7eb f918 	bl	80005f8 <__aeabi_dmul>
 80153c8:	4602      	mov	r2, r0
 80153ca:	460b      	mov	r3, r1
 80153cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153d0:	f7ea ff5a 	bl	8000288 <__aeabi_dsub>
 80153d4:	4602      	mov	r2, r0
 80153d6:	460b      	mov	r3, r1
 80153d8:	4604      	mov	r4, r0
 80153da:	460d      	mov	r5, r1
 80153dc:	4630      	mov	r0, r6
 80153de:	4639      	mov	r1, r7
 80153e0:	f7ea ff54 	bl	800028c <__adddf3>
 80153e4:	2000      	movs	r0, #0
 80153e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153ea:	4632      	mov	r2, r6
 80153ec:	463b      	mov	r3, r7
 80153ee:	f7ea ff4b 	bl	8000288 <__aeabi_dsub>
 80153f2:	4602      	mov	r2, r0
 80153f4:	460b      	mov	r3, r1
 80153f6:	4620      	mov	r0, r4
 80153f8:	4629      	mov	r1, r5
 80153fa:	f7ea ff45 	bl	8000288 <__aeabi_dsub>
 80153fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015400:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8015404:	4313      	orrs	r3, r2
 8015406:	4606      	mov	r6, r0
 8015408:	460f      	mov	r7, r1
 801540a:	f040 81eb 	bne.w	80157e4 <__ieee754_pow+0x6c4>
 801540e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80154c8 <__ieee754_pow+0x3a8>
 8015412:	e9dd 4500 	ldrd	r4, r5, [sp]
 8015416:	2400      	movs	r4, #0
 8015418:	4622      	mov	r2, r4
 801541a:	462b      	mov	r3, r5
 801541c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015424:	f7ea ff30 	bl	8000288 <__aeabi_dsub>
 8015428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801542c:	f7eb f8e4 	bl	80005f8 <__aeabi_dmul>
 8015430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015434:	4680      	mov	r8, r0
 8015436:	4689      	mov	r9, r1
 8015438:	4630      	mov	r0, r6
 801543a:	4639      	mov	r1, r7
 801543c:	f7eb f8dc 	bl	80005f8 <__aeabi_dmul>
 8015440:	4602      	mov	r2, r0
 8015442:	460b      	mov	r3, r1
 8015444:	4640      	mov	r0, r8
 8015446:	4649      	mov	r1, r9
 8015448:	f7ea ff20 	bl	800028c <__adddf3>
 801544c:	4622      	mov	r2, r4
 801544e:	462b      	mov	r3, r5
 8015450:	4680      	mov	r8, r0
 8015452:	4689      	mov	r9, r1
 8015454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015458:	f7eb f8ce 	bl	80005f8 <__aeabi_dmul>
 801545c:	460b      	mov	r3, r1
 801545e:	4604      	mov	r4, r0
 8015460:	460d      	mov	r5, r1
 8015462:	4602      	mov	r2, r0
 8015464:	4649      	mov	r1, r9
 8015466:	4640      	mov	r0, r8
 8015468:	e9cd 4500 	strd	r4, r5, [sp]
 801546c:	f7ea ff0e 	bl	800028c <__adddf3>
 8015470:	4b1c      	ldr	r3, [pc, #112]	; (80154e4 <__ieee754_pow+0x3c4>)
 8015472:	4299      	cmp	r1, r3
 8015474:	4606      	mov	r6, r0
 8015476:	460f      	mov	r7, r1
 8015478:	468b      	mov	fp, r1
 801547a:	f340 82f7 	ble.w	8015a6c <__ieee754_pow+0x94c>
 801547e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015486:	4303      	orrs	r3, r0
 8015488:	f000 81ea 	beq.w	8015860 <__ieee754_pow+0x740>
 801548c:	a310      	add	r3, pc, #64	; (adr r3, 80154d0 <__ieee754_pow+0x3b0>)
 801548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015496:	f7eb f8af 	bl	80005f8 <__aeabi_dmul>
 801549a:	a30d      	add	r3, pc, #52	; (adr r3, 80154d0 <__ieee754_pow+0x3b0>)
 801549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a0:	e6d5      	b.n	801524e <__ieee754_pow+0x12e>
 80154a2:	bf00      	nop
 80154a4:	f3af 8000 	nop.w
 80154a8:	60000000 	.word	0x60000000
 80154ac:	3ff71547 	.word	0x3ff71547
 80154b0:	f85ddf44 	.word	0xf85ddf44
 80154b4:	3e54ae0b 	.word	0x3e54ae0b
 80154b8:	55555555 	.word	0x55555555
 80154bc:	3fd55555 	.word	0x3fd55555
 80154c0:	652b82fe 	.word	0x652b82fe
 80154c4:	3ff71547 	.word	0x3ff71547
 80154c8:	00000000 	.word	0x00000000
 80154cc:	bff00000 	.word	0xbff00000
 80154d0:	8800759c 	.word	0x8800759c
 80154d4:	7e37e43c 	.word	0x7e37e43c
 80154d8:	3ff00000 	.word	0x3ff00000
 80154dc:	3fd00000 	.word	0x3fd00000
 80154e0:	3fe00000 	.word	0x3fe00000
 80154e4:	408fffff 	.word	0x408fffff
 80154e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80154ec:	f04f 0200 	mov.w	r2, #0
 80154f0:	da05      	bge.n	80154fe <__ieee754_pow+0x3de>
 80154f2:	4bd3      	ldr	r3, [pc, #844]	; (8015840 <__ieee754_pow+0x720>)
 80154f4:	f7eb f880 	bl	80005f8 <__aeabi_dmul>
 80154f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80154fc:	460c      	mov	r4, r1
 80154fe:	1523      	asrs	r3, r4, #20
 8015500:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015504:	4413      	add	r3, r2
 8015506:	9309      	str	r3, [sp, #36]	; 0x24
 8015508:	4bce      	ldr	r3, [pc, #824]	; (8015844 <__ieee754_pow+0x724>)
 801550a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801550e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015512:	429c      	cmp	r4, r3
 8015514:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015518:	dd08      	ble.n	801552c <__ieee754_pow+0x40c>
 801551a:	4bcb      	ldr	r3, [pc, #812]	; (8015848 <__ieee754_pow+0x728>)
 801551c:	429c      	cmp	r4, r3
 801551e:	f340 815e 	ble.w	80157de <__ieee754_pow+0x6be>
 8015522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015524:	3301      	adds	r3, #1
 8015526:	9309      	str	r3, [sp, #36]	; 0x24
 8015528:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801552c:	f04f 0a00 	mov.w	sl, #0
 8015530:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015534:	930c      	str	r3, [sp, #48]	; 0x30
 8015536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015538:	4bc4      	ldr	r3, [pc, #784]	; (801584c <__ieee754_pow+0x72c>)
 801553a:	4413      	add	r3, r2
 801553c:	ed93 7b00 	vldr	d7, [r3]
 8015540:	4629      	mov	r1, r5
 8015542:	ec53 2b17 	vmov	r2, r3, d7
 8015546:	ed8d 7b06 	vstr	d7, [sp, #24]
 801554a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801554e:	f7ea fe9b 	bl	8000288 <__aeabi_dsub>
 8015552:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015556:	4606      	mov	r6, r0
 8015558:	460f      	mov	r7, r1
 801555a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801555e:	f7ea fe95 	bl	800028c <__adddf3>
 8015562:	4602      	mov	r2, r0
 8015564:	460b      	mov	r3, r1
 8015566:	2000      	movs	r0, #0
 8015568:	49b9      	ldr	r1, [pc, #740]	; (8015850 <__ieee754_pow+0x730>)
 801556a:	f7eb f96f 	bl	800084c <__aeabi_ddiv>
 801556e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015572:	4602      	mov	r2, r0
 8015574:	460b      	mov	r3, r1
 8015576:	4630      	mov	r0, r6
 8015578:	4639      	mov	r1, r7
 801557a:	f7eb f83d 	bl	80005f8 <__aeabi_dmul>
 801557e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015582:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801558a:	2300      	movs	r3, #0
 801558c:	9302      	str	r3, [sp, #8]
 801558e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015592:	106d      	asrs	r5, r5, #1
 8015594:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015598:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801559c:	2200      	movs	r2, #0
 801559e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80155a2:	4640      	mov	r0, r8
 80155a4:	4649      	mov	r1, r9
 80155a6:	4614      	mov	r4, r2
 80155a8:	461d      	mov	r5, r3
 80155aa:	f7eb f825 	bl	80005f8 <__aeabi_dmul>
 80155ae:	4602      	mov	r2, r0
 80155b0:	460b      	mov	r3, r1
 80155b2:	4630      	mov	r0, r6
 80155b4:	4639      	mov	r1, r7
 80155b6:	f7ea fe67 	bl	8000288 <__aeabi_dsub>
 80155ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80155be:	4606      	mov	r6, r0
 80155c0:	460f      	mov	r7, r1
 80155c2:	4620      	mov	r0, r4
 80155c4:	4629      	mov	r1, r5
 80155c6:	f7ea fe5f 	bl	8000288 <__aeabi_dsub>
 80155ca:	4602      	mov	r2, r0
 80155cc:	460b      	mov	r3, r1
 80155ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80155d2:	f7ea fe59 	bl	8000288 <__aeabi_dsub>
 80155d6:	4642      	mov	r2, r8
 80155d8:	464b      	mov	r3, r9
 80155da:	f7eb f80d 	bl	80005f8 <__aeabi_dmul>
 80155de:	4602      	mov	r2, r0
 80155e0:	460b      	mov	r3, r1
 80155e2:	4630      	mov	r0, r6
 80155e4:	4639      	mov	r1, r7
 80155e6:	f7ea fe4f 	bl	8000288 <__aeabi_dsub>
 80155ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80155ee:	f7eb f803 	bl	80005f8 <__aeabi_dmul>
 80155f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80155fa:	4610      	mov	r0, r2
 80155fc:	4619      	mov	r1, r3
 80155fe:	f7ea fffb 	bl	80005f8 <__aeabi_dmul>
 8015602:	a37b      	add	r3, pc, #492	; (adr r3, 80157f0 <__ieee754_pow+0x6d0>)
 8015604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015608:	4604      	mov	r4, r0
 801560a:	460d      	mov	r5, r1
 801560c:	f7ea fff4 	bl	80005f8 <__aeabi_dmul>
 8015610:	a379      	add	r3, pc, #484	; (adr r3, 80157f8 <__ieee754_pow+0x6d8>)
 8015612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015616:	f7ea fe39 	bl	800028c <__adddf3>
 801561a:	4622      	mov	r2, r4
 801561c:	462b      	mov	r3, r5
 801561e:	f7ea ffeb 	bl	80005f8 <__aeabi_dmul>
 8015622:	a377      	add	r3, pc, #476	; (adr r3, 8015800 <__ieee754_pow+0x6e0>)
 8015624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015628:	f7ea fe30 	bl	800028c <__adddf3>
 801562c:	4622      	mov	r2, r4
 801562e:	462b      	mov	r3, r5
 8015630:	f7ea ffe2 	bl	80005f8 <__aeabi_dmul>
 8015634:	a374      	add	r3, pc, #464	; (adr r3, 8015808 <__ieee754_pow+0x6e8>)
 8015636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563a:	f7ea fe27 	bl	800028c <__adddf3>
 801563e:	4622      	mov	r2, r4
 8015640:	462b      	mov	r3, r5
 8015642:	f7ea ffd9 	bl	80005f8 <__aeabi_dmul>
 8015646:	a372      	add	r3, pc, #456	; (adr r3, 8015810 <__ieee754_pow+0x6f0>)
 8015648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801564c:	f7ea fe1e 	bl	800028c <__adddf3>
 8015650:	4622      	mov	r2, r4
 8015652:	462b      	mov	r3, r5
 8015654:	f7ea ffd0 	bl	80005f8 <__aeabi_dmul>
 8015658:	a36f      	add	r3, pc, #444	; (adr r3, 8015818 <__ieee754_pow+0x6f8>)
 801565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565e:	f7ea fe15 	bl	800028c <__adddf3>
 8015662:	4622      	mov	r2, r4
 8015664:	4606      	mov	r6, r0
 8015666:	460f      	mov	r7, r1
 8015668:	462b      	mov	r3, r5
 801566a:	4620      	mov	r0, r4
 801566c:	4629      	mov	r1, r5
 801566e:	f7ea ffc3 	bl	80005f8 <__aeabi_dmul>
 8015672:	4602      	mov	r2, r0
 8015674:	460b      	mov	r3, r1
 8015676:	4630      	mov	r0, r6
 8015678:	4639      	mov	r1, r7
 801567a:	f7ea ffbd 	bl	80005f8 <__aeabi_dmul>
 801567e:	4642      	mov	r2, r8
 8015680:	4604      	mov	r4, r0
 8015682:	460d      	mov	r5, r1
 8015684:	464b      	mov	r3, r9
 8015686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801568a:	f7ea fdff 	bl	800028c <__adddf3>
 801568e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015692:	f7ea ffb1 	bl	80005f8 <__aeabi_dmul>
 8015696:	4622      	mov	r2, r4
 8015698:	462b      	mov	r3, r5
 801569a:	f7ea fdf7 	bl	800028c <__adddf3>
 801569e:	4642      	mov	r2, r8
 80156a0:	4606      	mov	r6, r0
 80156a2:	460f      	mov	r7, r1
 80156a4:	464b      	mov	r3, r9
 80156a6:	4640      	mov	r0, r8
 80156a8:	4649      	mov	r1, r9
 80156aa:	f7ea ffa5 	bl	80005f8 <__aeabi_dmul>
 80156ae:	2200      	movs	r2, #0
 80156b0:	4b68      	ldr	r3, [pc, #416]	; (8015854 <__ieee754_pow+0x734>)
 80156b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80156b6:	f7ea fde9 	bl	800028c <__adddf3>
 80156ba:	4632      	mov	r2, r6
 80156bc:	463b      	mov	r3, r7
 80156be:	f7ea fde5 	bl	800028c <__adddf3>
 80156c2:	9802      	ldr	r0, [sp, #8]
 80156c4:	460d      	mov	r5, r1
 80156c6:	4604      	mov	r4, r0
 80156c8:	4602      	mov	r2, r0
 80156ca:	460b      	mov	r3, r1
 80156cc:	4640      	mov	r0, r8
 80156ce:	4649      	mov	r1, r9
 80156d0:	f7ea ff92 	bl	80005f8 <__aeabi_dmul>
 80156d4:	2200      	movs	r2, #0
 80156d6:	4680      	mov	r8, r0
 80156d8:	4689      	mov	r9, r1
 80156da:	4b5e      	ldr	r3, [pc, #376]	; (8015854 <__ieee754_pow+0x734>)
 80156dc:	4620      	mov	r0, r4
 80156de:	4629      	mov	r1, r5
 80156e0:	f7ea fdd2 	bl	8000288 <__aeabi_dsub>
 80156e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80156e8:	f7ea fdce 	bl	8000288 <__aeabi_dsub>
 80156ec:	4602      	mov	r2, r0
 80156ee:	460b      	mov	r3, r1
 80156f0:	4630      	mov	r0, r6
 80156f2:	4639      	mov	r1, r7
 80156f4:	f7ea fdc8 	bl	8000288 <__aeabi_dsub>
 80156f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156fc:	f7ea ff7c 	bl	80005f8 <__aeabi_dmul>
 8015700:	4622      	mov	r2, r4
 8015702:	4606      	mov	r6, r0
 8015704:	460f      	mov	r7, r1
 8015706:	462b      	mov	r3, r5
 8015708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801570c:	f7ea ff74 	bl	80005f8 <__aeabi_dmul>
 8015710:	4602      	mov	r2, r0
 8015712:	460b      	mov	r3, r1
 8015714:	4630      	mov	r0, r6
 8015716:	4639      	mov	r1, r7
 8015718:	f7ea fdb8 	bl	800028c <__adddf3>
 801571c:	4606      	mov	r6, r0
 801571e:	460f      	mov	r7, r1
 8015720:	4602      	mov	r2, r0
 8015722:	460b      	mov	r3, r1
 8015724:	4640      	mov	r0, r8
 8015726:	4649      	mov	r1, r9
 8015728:	f7ea fdb0 	bl	800028c <__adddf3>
 801572c:	9802      	ldr	r0, [sp, #8]
 801572e:	a33c      	add	r3, pc, #240	; (adr r3, 8015820 <__ieee754_pow+0x700>)
 8015730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015734:	4604      	mov	r4, r0
 8015736:	460d      	mov	r5, r1
 8015738:	f7ea ff5e 	bl	80005f8 <__aeabi_dmul>
 801573c:	4642      	mov	r2, r8
 801573e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015742:	464b      	mov	r3, r9
 8015744:	4620      	mov	r0, r4
 8015746:	4629      	mov	r1, r5
 8015748:	f7ea fd9e 	bl	8000288 <__aeabi_dsub>
 801574c:	4602      	mov	r2, r0
 801574e:	460b      	mov	r3, r1
 8015750:	4630      	mov	r0, r6
 8015752:	4639      	mov	r1, r7
 8015754:	f7ea fd98 	bl	8000288 <__aeabi_dsub>
 8015758:	a333      	add	r3, pc, #204	; (adr r3, 8015828 <__ieee754_pow+0x708>)
 801575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575e:	f7ea ff4b 	bl	80005f8 <__aeabi_dmul>
 8015762:	a333      	add	r3, pc, #204	; (adr r3, 8015830 <__ieee754_pow+0x710>)
 8015764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015768:	4606      	mov	r6, r0
 801576a:	460f      	mov	r7, r1
 801576c:	4620      	mov	r0, r4
 801576e:	4629      	mov	r1, r5
 8015770:	f7ea ff42 	bl	80005f8 <__aeabi_dmul>
 8015774:	4602      	mov	r2, r0
 8015776:	460b      	mov	r3, r1
 8015778:	4630      	mov	r0, r6
 801577a:	4639      	mov	r1, r7
 801577c:	f7ea fd86 	bl	800028c <__adddf3>
 8015780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015782:	4b35      	ldr	r3, [pc, #212]	; (8015858 <__ieee754_pow+0x738>)
 8015784:	4413      	add	r3, r2
 8015786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578a:	f7ea fd7f 	bl	800028c <__adddf3>
 801578e:	4604      	mov	r4, r0
 8015790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015792:	460d      	mov	r5, r1
 8015794:	f7ea fec6 	bl	8000524 <__aeabi_i2d>
 8015798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801579a:	4b30      	ldr	r3, [pc, #192]	; (801585c <__ieee754_pow+0x73c>)
 801579c:	4413      	add	r3, r2
 801579e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80157a2:	4606      	mov	r6, r0
 80157a4:	460f      	mov	r7, r1
 80157a6:	4622      	mov	r2, r4
 80157a8:	462b      	mov	r3, r5
 80157aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157ae:	f7ea fd6d 	bl	800028c <__adddf3>
 80157b2:	4642      	mov	r2, r8
 80157b4:	464b      	mov	r3, r9
 80157b6:	f7ea fd69 	bl	800028c <__adddf3>
 80157ba:	4632      	mov	r2, r6
 80157bc:	463b      	mov	r3, r7
 80157be:	f7ea fd65 	bl	800028c <__adddf3>
 80157c2:	9802      	ldr	r0, [sp, #8]
 80157c4:	4632      	mov	r2, r6
 80157c6:	463b      	mov	r3, r7
 80157c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157cc:	f7ea fd5c 	bl	8000288 <__aeabi_dsub>
 80157d0:	4642      	mov	r2, r8
 80157d2:	464b      	mov	r3, r9
 80157d4:	f7ea fd58 	bl	8000288 <__aeabi_dsub>
 80157d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157dc:	e607      	b.n	80153ee <__ieee754_pow+0x2ce>
 80157de:	f04f 0a01 	mov.w	sl, #1
 80157e2:	e6a5      	b.n	8015530 <__ieee754_pow+0x410>
 80157e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015838 <__ieee754_pow+0x718>
 80157e8:	e613      	b.n	8015412 <__ieee754_pow+0x2f2>
 80157ea:	bf00      	nop
 80157ec:	f3af 8000 	nop.w
 80157f0:	4a454eef 	.word	0x4a454eef
 80157f4:	3fca7e28 	.word	0x3fca7e28
 80157f8:	93c9db65 	.word	0x93c9db65
 80157fc:	3fcd864a 	.word	0x3fcd864a
 8015800:	a91d4101 	.word	0xa91d4101
 8015804:	3fd17460 	.word	0x3fd17460
 8015808:	518f264d 	.word	0x518f264d
 801580c:	3fd55555 	.word	0x3fd55555
 8015810:	db6fabff 	.word	0xdb6fabff
 8015814:	3fdb6db6 	.word	0x3fdb6db6
 8015818:	33333303 	.word	0x33333303
 801581c:	3fe33333 	.word	0x3fe33333
 8015820:	e0000000 	.word	0xe0000000
 8015824:	3feec709 	.word	0x3feec709
 8015828:	dc3a03fd 	.word	0xdc3a03fd
 801582c:	3feec709 	.word	0x3feec709
 8015830:	145b01f5 	.word	0x145b01f5
 8015834:	be3e2fe0 	.word	0xbe3e2fe0
 8015838:	00000000 	.word	0x00000000
 801583c:	3ff00000 	.word	0x3ff00000
 8015840:	43400000 	.word	0x43400000
 8015844:	0003988e 	.word	0x0003988e
 8015848:	000bb679 	.word	0x000bb679
 801584c:	08016e68 	.word	0x08016e68
 8015850:	3ff00000 	.word	0x3ff00000
 8015854:	40080000 	.word	0x40080000
 8015858:	08016e88 	.word	0x08016e88
 801585c:	08016e78 	.word	0x08016e78
 8015860:	a3b4      	add	r3, pc, #720	; (adr r3, 8015b34 <__ieee754_pow+0xa14>)
 8015862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015866:	4640      	mov	r0, r8
 8015868:	4649      	mov	r1, r9
 801586a:	f7ea fd0f 	bl	800028c <__adddf3>
 801586e:	4622      	mov	r2, r4
 8015870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015874:	462b      	mov	r3, r5
 8015876:	4630      	mov	r0, r6
 8015878:	4639      	mov	r1, r7
 801587a:	f7ea fd05 	bl	8000288 <__aeabi_dsub>
 801587e:	4602      	mov	r2, r0
 8015880:	460b      	mov	r3, r1
 8015882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015886:	f7eb f947 	bl	8000b18 <__aeabi_dcmpgt>
 801588a:	2800      	cmp	r0, #0
 801588c:	f47f adfe 	bne.w	801548c <__ieee754_pow+0x36c>
 8015890:	4aa3      	ldr	r2, [pc, #652]	; (8015b20 <__ieee754_pow+0xa00>)
 8015892:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015896:	4293      	cmp	r3, r2
 8015898:	f340 810a 	ble.w	8015ab0 <__ieee754_pow+0x990>
 801589c:	151b      	asrs	r3, r3, #20
 801589e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80158a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80158a6:	fa4a f303 	asr.w	r3, sl, r3
 80158aa:	445b      	add	r3, fp
 80158ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80158b0:	4e9c      	ldr	r6, [pc, #624]	; (8015b24 <__ieee754_pow+0xa04>)
 80158b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80158b6:	4116      	asrs	r6, r2
 80158b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80158bc:	2000      	movs	r0, #0
 80158be:	ea23 0106 	bic.w	r1, r3, r6
 80158c2:	f1c2 0214 	rsb	r2, r2, #20
 80158c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80158ca:	fa4a fa02 	asr.w	sl, sl, r2
 80158ce:	f1bb 0f00 	cmp.w	fp, #0
 80158d2:	4602      	mov	r2, r0
 80158d4:	460b      	mov	r3, r1
 80158d6:	4620      	mov	r0, r4
 80158d8:	4629      	mov	r1, r5
 80158da:	bfb8      	it	lt
 80158dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80158e0:	f7ea fcd2 	bl	8000288 <__aeabi_dsub>
 80158e4:	e9cd 0100 	strd	r0, r1, [sp]
 80158e8:	4642      	mov	r2, r8
 80158ea:	464b      	mov	r3, r9
 80158ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158f0:	f7ea fccc 	bl	800028c <__adddf3>
 80158f4:	2000      	movs	r0, #0
 80158f6:	a378      	add	r3, pc, #480	; (adr r3, 8015ad8 <__ieee754_pow+0x9b8>)
 80158f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158fc:	4604      	mov	r4, r0
 80158fe:	460d      	mov	r5, r1
 8015900:	f7ea fe7a 	bl	80005f8 <__aeabi_dmul>
 8015904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015908:	4606      	mov	r6, r0
 801590a:	460f      	mov	r7, r1
 801590c:	4620      	mov	r0, r4
 801590e:	4629      	mov	r1, r5
 8015910:	f7ea fcba 	bl	8000288 <__aeabi_dsub>
 8015914:	4602      	mov	r2, r0
 8015916:	460b      	mov	r3, r1
 8015918:	4640      	mov	r0, r8
 801591a:	4649      	mov	r1, r9
 801591c:	f7ea fcb4 	bl	8000288 <__aeabi_dsub>
 8015920:	a36f      	add	r3, pc, #444	; (adr r3, 8015ae0 <__ieee754_pow+0x9c0>)
 8015922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015926:	f7ea fe67 	bl	80005f8 <__aeabi_dmul>
 801592a:	a36f      	add	r3, pc, #444	; (adr r3, 8015ae8 <__ieee754_pow+0x9c8>)
 801592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015930:	4680      	mov	r8, r0
 8015932:	4689      	mov	r9, r1
 8015934:	4620      	mov	r0, r4
 8015936:	4629      	mov	r1, r5
 8015938:	f7ea fe5e 	bl	80005f8 <__aeabi_dmul>
 801593c:	4602      	mov	r2, r0
 801593e:	460b      	mov	r3, r1
 8015940:	4640      	mov	r0, r8
 8015942:	4649      	mov	r1, r9
 8015944:	f7ea fca2 	bl	800028c <__adddf3>
 8015948:	4604      	mov	r4, r0
 801594a:	460d      	mov	r5, r1
 801594c:	4602      	mov	r2, r0
 801594e:	460b      	mov	r3, r1
 8015950:	4630      	mov	r0, r6
 8015952:	4639      	mov	r1, r7
 8015954:	f7ea fc9a 	bl	800028c <__adddf3>
 8015958:	4632      	mov	r2, r6
 801595a:	463b      	mov	r3, r7
 801595c:	4680      	mov	r8, r0
 801595e:	4689      	mov	r9, r1
 8015960:	f7ea fc92 	bl	8000288 <__aeabi_dsub>
 8015964:	4602      	mov	r2, r0
 8015966:	460b      	mov	r3, r1
 8015968:	4620      	mov	r0, r4
 801596a:	4629      	mov	r1, r5
 801596c:	f7ea fc8c 	bl	8000288 <__aeabi_dsub>
 8015970:	4642      	mov	r2, r8
 8015972:	4606      	mov	r6, r0
 8015974:	460f      	mov	r7, r1
 8015976:	464b      	mov	r3, r9
 8015978:	4640      	mov	r0, r8
 801597a:	4649      	mov	r1, r9
 801597c:	f7ea fe3c 	bl	80005f8 <__aeabi_dmul>
 8015980:	a35b      	add	r3, pc, #364	; (adr r3, 8015af0 <__ieee754_pow+0x9d0>)
 8015982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015986:	4604      	mov	r4, r0
 8015988:	460d      	mov	r5, r1
 801598a:	f7ea fe35 	bl	80005f8 <__aeabi_dmul>
 801598e:	a35a      	add	r3, pc, #360	; (adr r3, 8015af8 <__ieee754_pow+0x9d8>)
 8015990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015994:	f7ea fc78 	bl	8000288 <__aeabi_dsub>
 8015998:	4622      	mov	r2, r4
 801599a:	462b      	mov	r3, r5
 801599c:	f7ea fe2c 	bl	80005f8 <__aeabi_dmul>
 80159a0:	a357      	add	r3, pc, #348	; (adr r3, 8015b00 <__ieee754_pow+0x9e0>)
 80159a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a6:	f7ea fc71 	bl	800028c <__adddf3>
 80159aa:	4622      	mov	r2, r4
 80159ac:	462b      	mov	r3, r5
 80159ae:	f7ea fe23 	bl	80005f8 <__aeabi_dmul>
 80159b2:	a355      	add	r3, pc, #340	; (adr r3, 8015b08 <__ieee754_pow+0x9e8>)
 80159b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b8:	f7ea fc66 	bl	8000288 <__aeabi_dsub>
 80159bc:	4622      	mov	r2, r4
 80159be:	462b      	mov	r3, r5
 80159c0:	f7ea fe1a 	bl	80005f8 <__aeabi_dmul>
 80159c4:	a352      	add	r3, pc, #328	; (adr r3, 8015b10 <__ieee754_pow+0x9f0>)
 80159c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ca:	f7ea fc5f 	bl	800028c <__adddf3>
 80159ce:	4622      	mov	r2, r4
 80159d0:	462b      	mov	r3, r5
 80159d2:	f7ea fe11 	bl	80005f8 <__aeabi_dmul>
 80159d6:	4602      	mov	r2, r0
 80159d8:	460b      	mov	r3, r1
 80159da:	4640      	mov	r0, r8
 80159dc:	4649      	mov	r1, r9
 80159de:	f7ea fc53 	bl	8000288 <__aeabi_dsub>
 80159e2:	4604      	mov	r4, r0
 80159e4:	460d      	mov	r5, r1
 80159e6:	4602      	mov	r2, r0
 80159e8:	460b      	mov	r3, r1
 80159ea:	4640      	mov	r0, r8
 80159ec:	4649      	mov	r1, r9
 80159ee:	f7ea fe03 	bl	80005f8 <__aeabi_dmul>
 80159f2:	2200      	movs	r2, #0
 80159f4:	e9cd 0100 	strd	r0, r1, [sp]
 80159f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80159fc:	4620      	mov	r0, r4
 80159fe:	4629      	mov	r1, r5
 8015a00:	f7ea fc42 	bl	8000288 <__aeabi_dsub>
 8015a04:	4602      	mov	r2, r0
 8015a06:	460b      	mov	r3, r1
 8015a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a0c:	f7ea ff1e 	bl	800084c <__aeabi_ddiv>
 8015a10:	4632      	mov	r2, r6
 8015a12:	4604      	mov	r4, r0
 8015a14:	460d      	mov	r5, r1
 8015a16:	463b      	mov	r3, r7
 8015a18:	4640      	mov	r0, r8
 8015a1a:	4649      	mov	r1, r9
 8015a1c:	f7ea fdec 	bl	80005f8 <__aeabi_dmul>
 8015a20:	4632      	mov	r2, r6
 8015a22:	463b      	mov	r3, r7
 8015a24:	f7ea fc32 	bl	800028c <__adddf3>
 8015a28:	4602      	mov	r2, r0
 8015a2a:	460b      	mov	r3, r1
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	4629      	mov	r1, r5
 8015a30:	f7ea fc2a 	bl	8000288 <__aeabi_dsub>
 8015a34:	4642      	mov	r2, r8
 8015a36:	464b      	mov	r3, r9
 8015a38:	f7ea fc26 	bl	8000288 <__aeabi_dsub>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	460b      	mov	r3, r1
 8015a40:	2000      	movs	r0, #0
 8015a42:	4939      	ldr	r1, [pc, #228]	; (8015b28 <__ieee754_pow+0xa08>)
 8015a44:	f7ea fc20 	bl	8000288 <__aeabi_dsub>
 8015a48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015a4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015a50:	4602      	mov	r2, r0
 8015a52:	460b      	mov	r3, r1
 8015a54:	da2f      	bge.n	8015ab6 <__ieee754_pow+0x996>
 8015a56:	4650      	mov	r0, sl
 8015a58:	ec43 2b10 	vmov	d0, r2, r3
 8015a5c:	f000 fc80 	bl	8016360 <scalbn>
 8015a60:	ec51 0b10 	vmov	r0, r1, d0
 8015a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015a68:	f7ff bbf1 	b.w	801524e <__ieee754_pow+0x12e>
 8015a6c:	4b2f      	ldr	r3, [pc, #188]	; (8015b2c <__ieee754_pow+0xa0c>)
 8015a6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015a72:	429e      	cmp	r6, r3
 8015a74:	f77f af0c 	ble.w	8015890 <__ieee754_pow+0x770>
 8015a78:	4b2d      	ldr	r3, [pc, #180]	; (8015b30 <__ieee754_pow+0xa10>)
 8015a7a:	440b      	add	r3, r1
 8015a7c:	4303      	orrs	r3, r0
 8015a7e:	d00b      	beq.n	8015a98 <__ieee754_pow+0x978>
 8015a80:	a325      	add	r3, pc, #148	; (adr r3, 8015b18 <__ieee754_pow+0x9f8>)
 8015a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a8a:	f7ea fdb5 	bl	80005f8 <__aeabi_dmul>
 8015a8e:	a322      	add	r3, pc, #136	; (adr r3, 8015b18 <__ieee754_pow+0x9f8>)
 8015a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a94:	f7ff bbdb 	b.w	801524e <__ieee754_pow+0x12e>
 8015a98:	4622      	mov	r2, r4
 8015a9a:	462b      	mov	r3, r5
 8015a9c:	f7ea fbf4 	bl	8000288 <__aeabi_dsub>
 8015aa0:	4642      	mov	r2, r8
 8015aa2:	464b      	mov	r3, r9
 8015aa4:	f7eb f82e 	bl	8000b04 <__aeabi_dcmpge>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	f43f aef1 	beq.w	8015890 <__ieee754_pow+0x770>
 8015aae:	e7e7      	b.n	8015a80 <__ieee754_pow+0x960>
 8015ab0:	f04f 0a00 	mov.w	sl, #0
 8015ab4:	e718      	b.n	80158e8 <__ieee754_pow+0x7c8>
 8015ab6:	4621      	mov	r1, r4
 8015ab8:	e7d4      	b.n	8015a64 <__ieee754_pow+0x944>
 8015aba:	2000      	movs	r0, #0
 8015abc:	491a      	ldr	r1, [pc, #104]	; (8015b28 <__ieee754_pow+0xa08>)
 8015abe:	f7ff bb8f 	b.w	80151e0 <__ieee754_pow+0xc0>
 8015ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ac6:	f7ff bb8b 	b.w	80151e0 <__ieee754_pow+0xc0>
 8015aca:	4630      	mov	r0, r6
 8015acc:	4639      	mov	r1, r7
 8015ace:	f7ff bb87 	b.w	80151e0 <__ieee754_pow+0xc0>
 8015ad2:	4693      	mov	fp, r2
 8015ad4:	f7ff bb98 	b.w	8015208 <__ieee754_pow+0xe8>
 8015ad8:	00000000 	.word	0x00000000
 8015adc:	3fe62e43 	.word	0x3fe62e43
 8015ae0:	fefa39ef 	.word	0xfefa39ef
 8015ae4:	3fe62e42 	.word	0x3fe62e42
 8015ae8:	0ca86c39 	.word	0x0ca86c39
 8015aec:	be205c61 	.word	0xbe205c61
 8015af0:	72bea4d0 	.word	0x72bea4d0
 8015af4:	3e663769 	.word	0x3e663769
 8015af8:	c5d26bf1 	.word	0xc5d26bf1
 8015afc:	3ebbbd41 	.word	0x3ebbbd41
 8015b00:	af25de2c 	.word	0xaf25de2c
 8015b04:	3f11566a 	.word	0x3f11566a
 8015b08:	16bebd93 	.word	0x16bebd93
 8015b0c:	3f66c16c 	.word	0x3f66c16c
 8015b10:	5555553e 	.word	0x5555553e
 8015b14:	3fc55555 	.word	0x3fc55555
 8015b18:	c2f8f359 	.word	0xc2f8f359
 8015b1c:	01a56e1f 	.word	0x01a56e1f
 8015b20:	3fe00000 	.word	0x3fe00000
 8015b24:	000fffff 	.word	0x000fffff
 8015b28:	3ff00000 	.word	0x3ff00000
 8015b2c:	4090cbff 	.word	0x4090cbff
 8015b30:	3f6f3400 	.word	0x3f6f3400
 8015b34:	652b82fe 	.word	0x652b82fe
 8015b38:	3c971547 	.word	0x3c971547

08015b3c <__ieee754_sqrt>:
 8015b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b40:	4955      	ldr	r1, [pc, #340]	; (8015c98 <__ieee754_sqrt+0x15c>)
 8015b42:	ec55 4b10 	vmov	r4, r5, d0
 8015b46:	43a9      	bics	r1, r5
 8015b48:	462b      	mov	r3, r5
 8015b4a:	462a      	mov	r2, r5
 8015b4c:	d112      	bne.n	8015b74 <__ieee754_sqrt+0x38>
 8015b4e:	ee10 2a10 	vmov	r2, s0
 8015b52:	ee10 0a10 	vmov	r0, s0
 8015b56:	4629      	mov	r1, r5
 8015b58:	f7ea fd4e 	bl	80005f8 <__aeabi_dmul>
 8015b5c:	4602      	mov	r2, r0
 8015b5e:	460b      	mov	r3, r1
 8015b60:	4620      	mov	r0, r4
 8015b62:	4629      	mov	r1, r5
 8015b64:	f7ea fb92 	bl	800028c <__adddf3>
 8015b68:	4604      	mov	r4, r0
 8015b6a:	460d      	mov	r5, r1
 8015b6c:	ec45 4b10 	vmov	d0, r4, r5
 8015b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b74:	2d00      	cmp	r5, #0
 8015b76:	ee10 0a10 	vmov	r0, s0
 8015b7a:	4621      	mov	r1, r4
 8015b7c:	dc0f      	bgt.n	8015b9e <__ieee754_sqrt+0x62>
 8015b7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015b82:	4330      	orrs	r0, r6
 8015b84:	d0f2      	beq.n	8015b6c <__ieee754_sqrt+0x30>
 8015b86:	b155      	cbz	r5, 8015b9e <__ieee754_sqrt+0x62>
 8015b88:	ee10 2a10 	vmov	r2, s0
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	4629      	mov	r1, r5
 8015b90:	f7ea fb7a 	bl	8000288 <__aeabi_dsub>
 8015b94:	4602      	mov	r2, r0
 8015b96:	460b      	mov	r3, r1
 8015b98:	f7ea fe58 	bl	800084c <__aeabi_ddiv>
 8015b9c:	e7e4      	b.n	8015b68 <__ieee754_sqrt+0x2c>
 8015b9e:	151b      	asrs	r3, r3, #20
 8015ba0:	d073      	beq.n	8015c8a <__ieee754_sqrt+0x14e>
 8015ba2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015ba6:	07dd      	lsls	r5, r3, #31
 8015ba8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015bac:	bf48      	it	mi
 8015bae:	0fc8      	lsrmi	r0, r1, #31
 8015bb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015bb4:	bf44      	itt	mi
 8015bb6:	0049      	lslmi	r1, r1, #1
 8015bb8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8015bbc:	2500      	movs	r5, #0
 8015bbe:	1058      	asrs	r0, r3, #1
 8015bc0:	0fcb      	lsrs	r3, r1, #31
 8015bc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015bc6:	0049      	lsls	r1, r1, #1
 8015bc8:	2316      	movs	r3, #22
 8015bca:	462c      	mov	r4, r5
 8015bcc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015bd0:	19a7      	adds	r7, r4, r6
 8015bd2:	4297      	cmp	r7, r2
 8015bd4:	bfde      	ittt	le
 8015bd6:	19bc      	addle	r4, r7, r6
 8015bd8:	1bd2      	suble	r2, r2, r7
 8015bda:	19ad      	addle	r5, r5, r6
 8015bdc:	0fcf      	lsrs	r7, r1, #31
 8015bde:	3b01      	subs	r3, #1
 8015be0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015be4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015be8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015bec:	d1f0      	bne.n	8015bd0 <__ieee754_sqrt+0x94>
 8015bee:	f04f 0c20 	mov.w	ip, #32
 8015bf2:	469e      	mov	lr, r3
 8015bf4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015bf8:	42a2      	cmp	r2, r4
 8015bfa:	eb06 070e 	add.w	r7, r6, lr
 8015bfe:	dc02      	bgt.n	8015c06 <__ieee754_sqrt+0xca>
 8015c00:	d112      	bne.n	8015c28 <__ieee754_sqrt+0xec>
 8015c02:	428f      	cmp	r7, r1
 8015c04:	d810      	bhi.n	8015c28 <__ieee754_sqrt+0xec>
 8015c06:	2f00      	cmp	r7, #0
 8015c08:	eb07 0e06 	add.w	lr, r7, r6
 8015c0c:	da42      	bge.n	8015c94 <__ieee754_sqrt+0x158>
 8015c0e:	f1be 0f00 	cmp.w	lr, #0
 8015c12:	db3f      	blt.n	8015c94 <__ieee754_sqrt+0x158>
 8015c14:	f104 0801 	add.w	r8, r4, #1
 8015c18:	1b12      	subs	r2, r2, r4
 8015c1a:	428f      	cmp	r7, r1
 8015c1c:	bf88      	it	hi
 8015c1e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8015c22:	1bc9      	subs	r1, r1, r7
 8015c24:	4433      	add	r3, r6
 8015c26:	4644      	mov	r4, r8
 8015c28:	0052      	lsls	r2, r2, #1
 8015c2a:	f1bc 0c01 	subs.w	ip, ip, #1
 8015c2e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015c32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015c36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015c3a:	d1dd      	bne.n	8015bf8 <__ieee754_sqrt+0xbc>
 8015c3c:	430a      	orrs	r2, r1
 8015c3e:	d006      	beq.n	8015c4e <__ieee754_sqrt+0x112>
 8015c40:	1c5c      	adds	r4, r3, #1
 8015c42:	bf13      	iteet	ne
 8015c44:	3301      	addne	r3, #1
 8015c46:	3501      	addeq	r5, #1
 8015c48:	4663      	moveq	r3, ip
 8015c4a:	f023 0301 	bicne.w	r3, r3, #1
 8015c4e:	106a      	asrs	r2, r5, #1
 8015c50:	085b      	lsrs	r3, r3, #1
 8015c52:	07e9      	lsls	r1, r5, #31
 8015c54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015c58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015c5c:	bf48      	it	mi
 8015c5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015c62:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015c66:	461c      	mov	r4, r3
 8015c68:	e780      	b.n	8015b6c <__ieee754_sqrt+0x30>
 8015c6a:	0aca      	lsrs	r2, r1, #11
 8015c6c:	3815      	subs	r0, #21
 8015c6e:	0549      	lsls	r1, r1, #21
 8015c70:	2a00      	cmp	r2, #0
 8015c72:	d0fa      	beq.n	8015c6a <__ieee754_sqrt+0x12e>
 8015c74:	02d6      	lsls	r6, r2, #11
 8015c76:	d50a      	bpl.n	8015c8e <__ieee754_sqrt+0x152>
 8015c78:	f1c3 0420 	rsb	r4, r3, #32
 8015c7c:	fa21 f404 	lsr.w	r4, r1, r4
 8015c80:	1e5d      	subs	r5, r3, #1
 8015c82:	4099      	lsls	r1, r3
 8015c84:	4322      	orrs	r2, r4
 8015c86:	1b43      	subs	r3, r0, r5
 8015c88:	e78b      	b.n	8015ba2 <__ieee754_sqrt+0x66>
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	e7f0      	b.n	8015c70 <__ieee754_sqrt+0x134>
 8015c8e:	0052      	lsls	r2, r2, #1
 8015c90:	3301      	adds	r3, #1
 8015c92:	e7ef      	b.n	8015c74 <__ieee754_sqrt+0x138>
 8015c94:	46a0      	mov	r8, r4
 8015c96:	e7bf      	b.n	8015c18 <__ieee754_sqrt+0xdc>
 8015c98:	7ff00000 	.word	0x7ff00000

08015c9c <__ieee754_powf>:
 8015c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ca0:	ee10 5a90 	vmov	r5, s1
 8015ca4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015ca8:	ed2d 8b02 	vpush	{d8}
 8015cac:	eeb0 8a40 	vmov.f32	s16, s0
 8015cb0:	eef0 8a60 	vmov.f32	s17, s1
 8015cb4:	f000 8293 	beq.w	80161de <__ieee754_powf+0x542>
 8015cb8:	ee10 8a10 	vmov	r8, s0
 8015cbc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8015cc0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015cc4:	dc06      	bgt.n	8015cd4 <__ieee754_powf+0x38>
 8015cc6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015cca:	dd0a      	ble.n	8015ce2 <__ieee754_powf+0x46>
 8015ccc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015cd0:	f000 8285 	beq.w	80161de <__ieee754_powf+0x542>
 8015cd4:	ecbd 8b02 	vpop	{d8}
 8015cd8:	48d9      	ldr	r0, [pc, #868]	; (8016040 <__ieee754_powf+0x3a4>)
 8015cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cde:	f7fe bd85 	b.w	80147ec <nanf>
 8015ce2:	f1b8 0f00 	cmp.w	r8, #0
 8015ce6:	da1d      	bge.n	8015d24 <__ieee754_powf+0x88>
 8015ce8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8015cec:	da2c      	bge.n	8015d48 <__ieee754_powf+0xac>
 8015cee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015cf2:	db30      	blt.n	8015d56 <__ieee754_powf+0xba>
 8015cf4:	15fb      	asrs	r3, r7, #23
 8015cf6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015cfa:	fa47 f603 	asr.w	r6, r7, r3
 8015cfe:	fa06 f303 	lsl.w	r3, r6, r3
 8015d02:	42bb      	cmp	r3, r7
 8015d04:	d127      	bne.n	8015d56 <__ieee754_powf+0xba>
 8015d06:	f006 0601 	and.w	r6, r6, #1
 8015d0a:	f1c6 0602 	rsb	r6, r6, #2
 8015d0e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015d12:	d122      	bne.n	8015d5a <__ieee754_powf+0xbe>
 8015d14:	2d00      	cmp	r5, #0
 8015d16:	f280 8268 	bge.w	80161ea <__ieee754_powf+0x54e>
 8015d1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d1e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015d22:	e00d      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015d24:	2600      	movs	r6, #0
 8015d26:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015d2a:	d1f0      	bne.n	8015d0e <__ieee754_powf+0x72>
 8015d2c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015d30:	f000 8255 	beq.w	80161de <__ieee754_powf+0x542>
 8015d34:	dd0a      	ble.n	8015d4c <__ieee754_powf+0xb0>
 8015d36:	2d00      	cmp	r5, #0
 8015d38:	f280 8254 	bge.w	80161e4 <__ieee754_powf+0x548>
 8015d3c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8016044 <__ieee754_powf+0x3a8>
 8015d40:	ecbd 8b02 	vpop	{d8}
 8015d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d48:	2602      	movs	r6, #2
 8015d4a:	e7ec      	b.n	8015d26 <__ieee754_powf+0x8a>
 8015d4c:	2d00      	cmp	r5, #0
 8015d4e:	daf5      	bge.n	8015d3c <__ieee754_powf+0xa0>
 8015d50:	eeb1 0a68 	vneg.f32	s0, s17
 8015d54:	e7f4      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015d56:	2600      	movs	r6, #0
 8015d58:	e7d9      	b.n	8015d0e <__ieee754_powf+0x72>
 8015d5a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8015d5e:	d102      	bne.n	8015d66 <__ieee754_powf+0xca>
 8015d60:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015d64:	e7ec      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015d66:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8015d6a:	eeb0 0a48 	vmov.f32	s0, s16
 8015d6e:	d108      	bne.n	8015d82 <__ieee754_powf+0xe6>
 8015d70:	f1b8 0f00 	cmp.w	r8, #0
 8015d74:	db05      	blt.n	8015d82 <__ieee754_powf+0xe6>
 8015d76:	ecbd 8b02 	vpop	{d8}
 8015d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7e:	f000 ba4d 	b.w	801621c <__ieee754_sqrtf>
 8015d82:	f000 fb63 	bl	801644c <fabsf>
 8015d86:	b124      	cbz	r4, 8015d92 <__ieee754_powf+0xf6>
 8015d88:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8015d8c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015d90:	d117      	bne.n	8015dc2 <__ieee754_powf+0x126>
 8015d92:	2d00      	cmp	r5, #0
 8015d94:	bfbc      	itt	lt
 8015d96:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8015d9a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015d9e:	f1b8 0f00 	cmp.w	r8, #0
 8015da2:	dacd      	bge.n	8015d40 <__ieee754_powf+0xa4>
 8015da4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015da8:	ea54 0306 	orrs.w	r3, r4, r6
 8015dac:	d104      	bne.n	8015db8 <__ieee754_powf+0x11c>
 8015dae:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015db2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015db6:	e7c3      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015db8:	2e01      	cmp	r6, #1
 8015dba:	d1c1      	bne.n	8015d40 <__ieee754_powf+0xa4>
 8015dbc:	eeb1 0a40 	vneg.f32	s0, s0
 8015dc0:	e7be      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015dc2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8015dc6:	3801      	subs	r0, #1
 8015dc8:	ea56 0300 	orrs.w	r3, r6, r0
 8015dcc:	d104      	bne.n	8015dd8 <__ieee754_powf+0x13c>
 8015dce:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015dd2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015dd6:	e7b3      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015dd8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8015ddc:	dd6d      	ble.n	8015eba <__ieee754_powf+0x21e>
 8015dde:	4b9a      	ldr	r3, [pc, #616]	; (8016048 <__ieee754_powf+0x3ac>)
 8015de0:	429c      	cmp	r4, r3
 8015de2:	dc06      	bgt.n	8015df2 <__ieee754_powf+0x156>
 8015de4:	2d00      	cmp	r5, #0
 8015de6:	daa9      	bge.n	8015d3c <__ieee754_powf+0xa0>
 8015de8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801604c <__ieee754_powf+0x3b0>
 8015dec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015df0:	e7a6      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015df2:	4b97      	ldr	r3, [pc, #604]	; (8016050 <__ieee754_powf+0x3b4>)
 8015df4:	429c      	cmp	r4, r3
 8015df6:	dd02      	ble.n	8015dfe <__ieee754_powf+0x162>
 8015df8:	2d00      	cmp	r5, #0
 8015dfa:	dcf5      	bgt.n	8015de8 <__ieee754_powf+0x14c>
 8015dfc:	e79e      	b.n	8015d3c <__ieee754_powf+0xa0>
 8015dfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015e06:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8016054 <__ieee754_powf+0x3b8>
 8015e0a:	eef1 6a40 	vneg.f32	s13, s0
 8015e0e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015e12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015e16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015e1a:	eee7 7a40 	vfms.f32	s15, s14, s0
 8015e1e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8015e22:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8016058 <__ieee754_powf+0x3bc>
 8015e26:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015e2a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801605c <__ieee754_powf+0x3c0>
 8015e2e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8015e32:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015e36:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016060 <__ieee754_powf+0x3c4>
 8015e3a:	eeb0 6a67 	vmov.f32	s12, s15
 8015e3e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8015e42:	ee16 3a10 	vmov	r3, s12
 8015e46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015e4a:	f023 030f 	bic.w	r3, r3, #15
 8015e4e:	ee00 3a90 	vmov	s1, r3
 8015e52:	eee6 0a87 	vfma.f32	s1, s13, s14
 8015e56:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015e5a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8015e5e:	f025 050f 	bic.w	r5, r5, #15
 8015e62:	ee07 5a10 	vmov	s14, r5
 8015e66:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015e6a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015e6e:	ee07 3a90 	vmov	s15, r3
 8015e72:	eee7 0a27 	vfma.f32	s1, s14, s15
 8015e76:	3e01      	subs	r6, #1
 8015e78:	ea56 0200 	orrs.w	r2, r6, r0
 8015e7c:	ee07 5a10 	vmov	s14, r5
 8015e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e84:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015e88:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015e8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015e90:	ee17 4a10 	vmov	r4, s14
 8015e94:	bf08      	it	eq
 8015e96:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015e9a:	2c00      	cmp	r4, #0
 8015e9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015ea0:	f340 8184 	ble.w	80161ac <__ieee754_powf+0x510>
 8015ea4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015ea8:	f340 80fc 	ble.w	80160a4 <__ieee754_powf+0x408>
 8015eac:	eddf 7a67 	vldr	s15, [pc, #412]	; 801604c <__ieee754_powf+0x3b0>
 8015eb0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015eb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015eb8:	e742      	b.n	8015d40 <__ieee754_powf+0xa4>
 8015eba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8015ebe:	bfbf      	itttt	lt
 8015ec0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8016064 <__ieee754_powf+0x3c8>
 8015ec4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8015ec8:	f06f 0217 	mvnlt.w	r2, #23
 8015ecc:	ee17 4a90 	vmovlt	r4, s15
 8015ed0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8015ed4:	bfa8      	it	ge
 8015ed6:	2200      	movge	r2, #0
 8015ed8:	3b7f      	subs	r3, #127	; 0x7f
 8015eda:	4413      	add	r3, r2
 8015edc:	4a62      	ldr	r2, [pc, #392]	; (8016068 <__ieee754_powf+0x3cc>)
 8015ede:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015ee2:	4294      	cmp	r4, r2
 8015ee4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8015ee8:	dd06      	ble.n	8015ef8 <__ieee754_powf+0x25c>
 8015eea:	4a60      	ldr	r2, [pc, #384]	; (801606c <__ieee754_powf+0x3d0>)
 8015eec:	4294      	cmp	r4, r2
 8015eee:	f340 80a5 	ble.w	801603c <__ieee754_powf+0x3a0>
 8015ef2:	3301      	adds	r3, #1
 8015ef4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8015ef8:	2400      	movs	r4, #0
 8015efa:	4a5d      	ldr	r2, [pc, #372]	; (8016070 <__ieee754_powf+0x3d4>)
 8015efc:	00a7      	lsls	r7, r4, #2
 8015efe:	443a      	add	r2, r7
 8015f00:	ee07 1a90 	vmov	s15, r1
 8015f04:	ed92 7a00 	vldr	s14, [r2]
 8015f08:	4a5a      	ldr	r2, [pc, #360]	; (8016074 <__ieee754_powf+0x3d8>)
 8015f0a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8015f0e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015f12:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8015f16:	1049      	asrs	r1, r1, #1
 8015f18:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015f1c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8015f20:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015f24:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8015f28:	ee06 1a10 	vmov	s12, r1
 8015f2c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8015f30:	ee14 ca90 	vmov	ip, s9
 8015f34:	ea02 0c0c 	and.w	ip, r2, ip
 8015f38:	ee05 ca10 	vmov	s10, ip
 8015f3c:	eeb1 4a45 	vneg.f32	s8, s10
 8015f40:	eee4 5a06 	vfma.f32	s11, s8, s12
 8015f44:	ee36 6a47 	vsub.f32	s12, s12, s14
 8015f48:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016078 <__ieee754_powf+0x3dc>
 8015f4c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8015f50:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8015f54:	eee4 5a06 	vfma.f32	s11, s8, s12
 8015f58:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8015f5c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8015f60:	eddf 5a46 	vldr	s11, [pc, #280]	; 801607c <__ieee754_powf+0x3e0>
 8015f64:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015f68:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016080 <__ieee754_powf+0x3e4>
 8015f6c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015f70:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8016054 <__ieee754_powf+0x3b8>
 8015f74:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015f78:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016084 <__ieee754_powf+0x3e8>
 8015f7c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015f80:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016088 <__ieee754_powf+0x3ec>
 8015f84:	ee75 6a24 	vadd.f32	s13, s10, s9
 8015f88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015f8c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015f90:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8015f94:	eef0 7a65 	vmov.f32	s15, s11
 8015f98:	eee3 6a87 	vfma.f32	s13, s7, s14
 8015f9c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8015fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015fa4:	ee17 1a90 	vmov	r1, s15
 8015fa8:	4011      	ands	r1, r2
 8015faa:	ee07 1a90 	vmov	s15, r1
 8015fae:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8015fb2:	eddf 5a36 	vldr	s11, [pc, #216]	; 801608c <__ieee754_powf+0x3f0>
 8015fb6:	eea4 7a05 	vfma.f32	s14, s8, s10
 8015fba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015fbe:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015fc2:	eea7 7a86 	vfma.f32	s14, s15, s12
 8015fc6:	eeb0 6a47 	vmov.f32	s12, s14
 8015fca:	eea5 6a27 	vfma.f32	s12, s10, s15
 8015fce:	ee16 1a10 	vmov	r1, s12
 8015fd2:	4011      	ands	r1, r2
 8015fd4:	ee06 1a90 	vmov	s13, r1
 8015fd8:	eee4 6a27 	vfma.f32	s13, s8, s15
 8015fdc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016090 <__ieee754_powf+0x3f4>
 8015fe0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015fe4:	ee06 1a10 	vmov	s12, r1
 8015fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015fec:	eddf 7a29 	vldr	s15, [pc, #164]	; 8016094 <__ieee754_powf+0x3f8>
 8015ff0:	4929      	ldr	r1, [pc, #164]	; (8016098 <__ieee754_powf+0x3fc>)
 8015ff2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015ff6:	4439      	add	r1, r7
 8015ff8:	edd1 7a00 	vldr	s15, [r1]
 8015ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016000:	ee07 3a90 	vmov	s15, r3
 8016004:	eef0 0a47 	vmov.f32	s1, s14
 8016008:	4b24      	ldr	r3, [pc, #144]	; (801609c <__ieee754_powf+0x400>)
 801600a:	eee6 0a25 	vfma.f32	s1, s12, s11
 801600e:	443b      	add	r3, r7
 8016010:	ed93 5a00 	vldr	s10, [r3]
 8016014:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016018:	ee70 0a85 	vadd.f32	s1, s1, s10
 801601c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8016020:	ee17 3a90 	vmov	r3, s15
 8016024:	4013      	ands	r3, r2
 8016026:	ee07 3a90 	vmov	s15, r3
 801602a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801602e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016032:	eee6 7a65 	vfms.f32	s15, s12, s11
 8016036:	ee77 7a67 	vsub.f32	s15, s14, s15
 801603a:	e70e      	b.n	8015e5a <__ieee754_powf+0x1be>
 801603c:	2401      	movs	r4, #1
 801603e:	e75c      	b.n	8015efa <__ieee754_powf+0x25e>
 8016040:	08016d41 	.word	0x08016d41
 8016044:	00000000 	.word	0x00000000
 8016048:	3f7ffff7 	.word	0x3f7ffff7
 801604c:	7149f2ca 	.word	0x7149f2ca
 8016050:	3f800007 	.word	0x3f800007
 8016054:	3eaaaaab 	.word	0x3eaaaaab
 8016058:	36eca570 	.word	0x36eca570
 801605c:	3fb8aa3b 	.word	0x3fb8aa3b
 8016060:	3fb8aa00 	.word	0x3fb8aa00
 8016064:	4b800000 	.word	0x4b800000
 8016068:	001cc471 	.word	0x001cc471
 801606c:	005db3d6 	.word	0x005db3d6
 8016070:	08016e98 	.word	0x08016e98
 8016074:	fffff000 	.word	0xfffff000
 8016078:	3e6c3255 	.word	0x3e6c3255
 801607c:	3e53f142 	.word	0x3e53f142
 8016080:	3e8ba305 	.word	0x3e8ba305
 8016084:	3edb6db7 	.word	0x3edb6db7
 8016088:	3f19999a 	.word	0x3f19999a
 801608c:	3f763800 	.word	0x3f763800
 8016090:	3f76384f 	.word	0x3f76384f
 8016094:	369dc3a0 	.word	0x369dc3a0
 8016098:	08016ea8 	.word	0x08016ea8
 801609c:	08016ea0 	.word	0x08016ea0
 80160a0:	3338aa3c 	.word	0x3338aa3c
 80160a4:	f040 8092 	bne.w	80161cc <__ieee754_powf+0x530>
 80160a8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80160a0 <__ieee754_powf+0x404>
 80160ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80160b0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80160b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80160b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160bc:	f73f aef6 	bgt.w	8015eac <__ieee754_powf+0x210>
 80160c0:	15db      	asrs	r3, r3, #23
 80160c2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80160c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80160ca:	4103      	asrs	r3, r0
 80160cc:	4423      	add	r3, r4
 80160ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80160d2:	4947      	ldr	r1, [pc, #284]	; (80161f0 <__ieee754_powf+0x554>)
 80160d4:	3a7f      	subs	r2, #127	; 0x7f
 80160d6:	4111      	asrs	r1, r2
 80160d8:	ea23 0101 	bic.w	r1, r3, r1
 80160dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80160e0:	ee07 1a10 	vmov	s14, r1
 80160e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80160e8:	f1c2 0217 	rsb	r2, r2, #23
 80160ec:	4110      	asrs	r0, r2
 80160ee:	2c00      	cmp	r4, #0
 80160f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80160f4:	bfb8      	it	lt
 80160f6:	4240      	neglt	r0, r0
 80160f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80160fc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80161f4 <__ieee754_powf+0x558>
 8016100:	ee17 3a10 	vmov	r3, s14
 8016104:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016108:	f023 030f 	bic.w	r3, r3, #15
 801610c:	ee07 3a10 	vmov	s14, r3
 8016110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016114:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016118:	eddf 7a37 	vldr	s15, [pc, #220]	; 80161f8 <__ieee754_powf+0x55c>
 801611c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016120:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8016124:	eddf 6a35 	vldr	s13, [pc, #212]	; 80161fc <__ieee754_powf+0x560>
 8016128:	eeb0 0a67 	vmov.f32	s0, s15
 801612c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8016130:	eeb0 6a40 	vmov.f32	s12, s0
 8016134:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016138:	ee20 7a00 	vmul.f32	s14, s0, s0
 801613c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016140:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8016200 <__ieee754_powf+0x564>
 8016144:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8016204 <__ieee754_powf+0x568>
 8016148:	eea7 6a26 	vfma.f32	s12, s14, s13
 801614c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8016208 <__ieee754_powf+0x56c>
 8016150:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016154:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801620c <__ieee754_powf+0x570>
 8016158:	eea6 6a87 	vfma.f32	s12, s13, s14
 801615c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8016210 <__ieee754_powf+0x574>
 8016160:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016164:	eeb0 6a40 	vmov.f32	s12, s0
 8016168:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801616c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016170:	eeb0 7a46 	vmov.f32	s14, s12
 8016174:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016178:	ee20 6a06 	vmul.f32	s12, s0, s12
 801617c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8016180:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016188:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801618c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016190:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016194:	ee10 3a10 	vmov	r3, s0
 8016198:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801619c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80161a0:	da1a      	bge.n	80161d8 <__ieee754_powf+0x53c>
 80161a2:	f000 f9bf 	bl	8016524 <scalbnf>
 80161a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80161aa:	e5c9      	b.n	8015d40 <__ieee754_powf+0xa4>
 80161ac:	4a19      	ldr	r2, [pc, #100]	; (8016214 <__ieee754_powf+0x578>)
 80161ae:	4293      	cmp	r3, r2
 80161b0:	dd02      	ble.n	80161b8 <__ieee754_powf+0x51c>
 80161b2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016218 <__ieee754_powf+0x57c>
 80161b6:	e67b      	b.n	8015eb0 <__ieee754_powf+0x214>
 80161b8:	d108      	bne.n	80161cc <__ieee754_powf+0x530>
 80161ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80161be:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80161c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c6:	f6ff af7b 	blt.w	80160c0 <__ieee754_powf+0x424>
 80161ca:	e7f2      	b.n	80161b2 <__ieee754_powf+0x516>
 80161cc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80161d0:	f73f af76 	bgt.w	80160c0 <__ieee754_powf+0x424>
 80161d4:	2000      	movs	r0, #0
 80161d6:	e78f      	b.n	80160f8 <__ieee754_powf+0x45c>
 80161d8:	ee00 3a10 	vmov	s0, r3
 80161dc:	e7e3      	b.n	80161a6 <__ieee754_powf+0x50a>
 80161de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80161e2:	e5ad      	b.n	8015d40 <__ieee754_powf+0xa4>
 80161e4:	eeb0 0a68 	vmov.f32	s0, s17
 80161e8:	e5aa      	b.n	8015d40 <__ieee754_powf+0xa4>
 80161ea:	eeb0 0a48 	vmov.f32	s0, s16
 80161ee:	e5a7      	b.n	8015d40 <__ieee754_powf+0xa4>
 80161f0:	007fffff 	.word	0x007fffff
 80161f4:	3f317218 	.word	0x3f317218
 80161f8:	35bfbe8c 	.word	0x35bfbe8c
 80161fc:	3f317200 	.word	0x3f317200
 8016200:	3331bb4c 	.word	0x3331bb4c
 8016204:	b5ddea0e 	.word	0xb5ddea0e
 8016208:	388ab355 	.word	0x388ab355
 801620c:	bb360b61 	.word	0xbb360b61
 8016210:	3e2aaaab 	.word	0x3e2aaaab
 8016214:	43160000 	.word	0x43160000
 8016218:	0da24260 	.word	0x0da24260

0801621c <__ieee754_sqrtf>:
 801621c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016220:	4770      	bx	lr

08016222 <fabs>:
 8016222:	ec51 0b10 	vmov	r0, r1, d0
 8016226:	ee10 2a10 	vmov	r2, s0
 801622a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801622e:	ec43 2b10 	vmov	d0, r2, r3
 8016232:	4770      	bx	lr

08016234 <finite>:
 8016234:	ee10 3a90 	vmov	r3, s1
 8016238:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801623c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016240:	0fc0      	lsrs	r0, r0, #31
 8016242:	4770      	bx	lr

08016244 <matherr>:
 8016244:	2000      	movs	r0, #0
 8016246:	4770      	bx	lr

08016248 <nan>:
 8016248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016250 <nan+0x8>
 801624c:	4770      	bx	lr
 801624e:	bf00      	nop
 8016250:	00000000 	.word	0x00000000
 8016254:	7ff80000 	.word	0x7ff80000

08016258 <rint>:
 8016258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801625a:	ec51 0b10 	vmov	r0, r1, d0
 801625e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016262:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016266:	2e13      	cmp	r6, #19
 8016268:	460b      	mov	r3, r1
 801626a:	ee10 4a10 	vmov	r4, s0
 801626e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016272:	dc56      	bgt.n	8016322 <rint+0xca>
 8016274:	2e00      	cmp	r6, #0
 8016276:	da2b      	bge.n	80162d0 <rint+0x78>
 8016278:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801627c:	4302      	orrs	r2, r0
 801627e:	d023      	beq.n	80162c8 <rint+0x70>
 8016280:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016284:	4302      	orrs	r2, r0
 8016286:	4254      	negs	r4, r2
 8016288:	4314      	orrs	r4, r2
 801628a:	0c4b      	lsrs	r3, r1, #17
 801628c:	0b24      	lsrs	r4, r4, #12
 801628e:	045b      	lsls	r3, r3, #17
 8016290:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016294:	ea44 0103 	orr.w	r1, r4, r3
 8016298:	460b      	mov	r3, r1
 801629a:	492f      	ldr	r1, [pc, #188]	; (8016358 <rint+0x100>)
 801629c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80162a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80162a4:	4602      	mov	r2, r0
 80162a6:	4639      	mov	r1, r7
 80162a8:	4630      	mov	r0, r6
 80162aa:	f7e9 ffef 	bl	800028c <__adddf3>
 80162ae:	e9cd 0100 	strd	r0, r1, [sp]
 80162b2:	463b      	mov	r3, r7
 80162b4:	4632      	mov	r2, r6
 80162b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162ba:	f7e9 ffe5 	bl	8000288 <__aeabi_dsub>
 80162be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80162c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80162c6:	4639      	mov	r1, r7
 80162c8:	ec41 0b10 	vmov	d0, r0, r1
 80162cc:	b003      	add	sp, #12
 80162ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162d0:	4a22      	ldr	r2, [pc, #136]	; (801635c <rint+0x104>)
 80162d2:	4132      	asrs	r2, r6
 80162d4:	ea01 0702 	and.w	r7, r1, r2
 80162d8:	4307      	orrs	r7, r0
 80162da:	d0f5      	beq.n	80162c8 <rint+0x70>
 80162dc:	0852      	lsrs	r2, r2, #1
 80162de:	4011      	ands	r1, r2
 80162e0:	430c      	orrs	r4, r1
 80162e2:	d00b      	beq.n	80162fc <rint+0xa4>
 80162e4:	ea23 0202 	bic.w	r2, r3, r2
 80162e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80162ec:	2e13      	cmp	r6, #19
 80162ee:	fa43 f306 	asr.w	r3, r3, r6
 80162f2:	bf0c      	ite	eq
 80162f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80162f8:	2400      	movne	r4, #0
 80162fa:	4313      	orrs	r3, r2
 80162fc:	4916      	ldr	r1, [pc, #88]	; (8016358 <rint+0x100>)
 80162fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016302:	4622      	mov	r2, r4
 8016304:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016308:	4620      	mov	r0, r4
 801630a:	4629      	mov	r1, r5
 801630c:	f7e9 ffbe 	bl	800028c <__adddf3>
 8016310:	e9cd 0100 	strd	r0, r1, [sp]
 8016314:	4622      	mov	r2, r4
 8016316:	462b      	mov	r3, r5
 8016318:	e9dd 0100 	ldrd	r0, r1, [sp]
 801631c:	f7e9 ffb4 	bl	8000288 <__aeabi_dsub>
 8016320:	e7d2      	b.n	80162c8 <rint+0x70>
 8016322:	2e33      	cmp	r6, #51	; 0x33
 8016324:	dd07      	ble.n	8016336 <rint+0xde>
 8016326:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801632a:	d1cd      	bne.n	80162c8 <rint+0x70>
 801632c:	ee10 2a10 	vmov	r2, s0
 8016330:	f7e9 ffac 	bl	800028c <__adddf3>
 8016334:	e7c8      	b.n	80162c8 <rint+0x70>
 8016336:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801633a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801633e:	40f2      	lsrs	r2, r6
 8016340:	4210      	tst	r0, r2
 8016342:	d0c1      	beq.n	80162c8 <rint+0x70>
 8016344:	0852      	lsrs	r2, r2, #1
 8016346:	4210      	tst	r0, r2
 8016348:	bf1f      	itttt	ne
 801634a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801634e:	ea20 0202 	bicne.w	r2, r0, r2
 8016352:	4134      	asrne	r4, r6
 8016354:	4314      	orrne	r4, r2
 8016356:	e7d1      	b.n	80162fc <rint+0xa4>
 8016358:	08016eb0 	.word	0x08016eb0
 801635c:	000fffff 	.word	0x000fffff

08016360 <scalbn>:
 8016360:	b570      	push	{r4, r5, r6, lr}
 8016362:	ec55 4b10 	vmov	r4, r5, d0
 8016366:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801636a:	4606      	mov	r6, r0
 801636c:	462b      	mov	r3, r5
 801636e:	b9aa      	cbnz	r2, 801639c <scalbn+0x3c>
 8016370:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016374:	4323      	orrs	r3, r4
 8016376:	d03b      	beq.n	80163f0 <scalbn+0x90>
 8016378:	4b31      	ldr	r3, [pc, #196]	; (8016440 <scalbn+0xe0>)
 801637a:	4629      	mov	r1, r5
 801637c:	2200      	movs	r2, #0
 801637e:	ee10 0a10 	vmov	r0, s0
 8016382:	f7ea f939 	bl	80005f8 <__aeabi_dmul>
 8016386:	4b2f      	ldr	r3, [pc, #188]	; (8016444 <scalbn+0xe4>)
 8016388:	429e      	cmp	r6, r3
 801638a:	4604      	mov	r4, r0
 801638c:	460d      	mov	r5, r1
 801638e:	da12      	bge.n	80163b6 <scalbn+0x56>
 8016390:	a327      	add	r3, pc, #156	; (adr r3, 8016430 <scalbn+0xd0>)
 8016392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016396:	f7ea f92f 	bl	80005f8 <__aeabi_dmul>
 801639a:	e009      	b.n	80163b0 <scalbn+0x50>
 801639c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80163a0:	428a      	cmp	r2, r1
 80163a2:	d10c      	bne.n	80163be <scalbn+0x5e>
 80163a4:	ee10 2a10 	vmov	r2, s0
 80163a8:	4620      	mov	r0, r4
 80163aa:	4629      	mov	r1, r5
 80163ac:	f7e9 ff6e 	bl	800028c <__adddf3>
 80163b0:	4604      	mov	r4, r0
 80163b2:	460d      	mov	r5, r1
 80163b4:	e01c      	b.n	80163f0 <scalbn+0x90>
 80163b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80163ba:	460b      	mov	r3, r1
 80163bc:	3a36      	subs	r2, #54	; 0x36
 80163be:	4432      	add	r2, r6
 80163c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80163c4:	428a      	cmp	r2, r1
 80163c6:	dd0b      	ble.n	80163e0 <scalbn+0x80>
 80163c8:	ec45 4b11 	vmov	d1, r4, r5
 80163cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016438 <scalbn+0xd8>
 80163d0:	f000 f908 	bl	80165e4 <copysign>
 80163d4:	a318      	add	r3, pc, #96	; (adr r3, 8016438 <scalbn+0xd8>)
 80163d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163da:	ec51 0b10 	vmov	r0, r1, d0
 80163de:	e7da      	b.n	8016396 <scalbn+0x36>
 80163e0:	2a00      	cmp	r2, #0
 80163e2:	dd08      	ble.n	80163f6 <scalbn+0x96>
 80163e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80163e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80163ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80163f0:	ec45 4b10 	vmov	d0, r4, r5
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80163fa:	da0d      	bge.n	8016418 <scalbn+0xb8>
 80163fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016400:	429e      	cmp	r6, r3
 8016402:	ec45 4b11 	vmov	d1, r4, r5
 8016406:	dce1      	bgt.n	80163cc <scalbn+0x6c>
 8016408:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016430 <scalbn+0xd0>
 801640c:	f000 f8ea 	bl	80165e4 <copysign>
 8016410:	a307      	add	r3, pc, #28	; (adr r3, 8016430 <scalbn+0xd0>)
 8016412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016416:	e7e0      	b.n	80163da <scalbn+0x7a>
 8016418:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801641c:	3236      	adds	r2, #54	; 0x36
 801641e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016426:	4620      	mov	r0, r4
 8016428:	4629      	mov	r1, r5
 801642a:	2200      	movs	r2, #0
 801642c:	4b06      	ldr	r3, [pc, #24]	; (8016448 <scalbn+0xe8>)
 801642e:	e7b2      	b.n	8016396 <scalbn+0x36>
 8016430:	c2f8f359 	.word	0xc2f8f359
 8016434:	01a56e1f 	.word	0x01a56e1f
 8016438:	8800759c 	.word	0x8800759c
 801643c:	7e37e43c 	.word	0x7e37e43c
 8016440:	43500000 	.word	0x43500000
 8016444:	ffff3cb0 	.word	0xffff3cb0
 8016448:	3c900000 	.word	0x3c900000

0801644c <fabsf>:
 801644c:	ee10 3a10 	vmov	r3, s0
 8016450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016454:	ee00 3a10 	vmov	s0, r3
 8016458:	4770      	bx	lr

0801645a <finitef>:
 801645a:	ee10 3a10 	vmov	r3, s0
 801645e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8016462:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016466:	bfac      	ite	ge
 8016468:	2000      	movge	r0, #0
 801646a:	2001      	movlt	r0, #1
 801646c:	4770      	bx	lr
	...

08016470 <rintf>:
 8016470:	b513      	push	{r0, r1, r4, lr}
 8016472:	ee10 1a10 	vmov	r1, s0
 8016476:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801647a:	0ddc      	lsrs	r4, r3, #23
 801647c:	3c7f      	subs	r4, #127	; 0x7f
 801647e:	2c16      	cmp	r4, #22
 8016480:	dc46      	bgt.n	8016510 <rintf+0xa0>
 8016482:	b32b      	cbz	r3, 80164d0 <rintf+0x60>
 8016484:	2c00      	cmp	r4, #0
 8016486:	ee10 2a10 	vmov	r2, s0
 801648a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801648e:	da21      	bge.n	80164d4 <rintf+0x64>
 8016490:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8016494:	425b      	negs	r3, r3
 8016496:	4a21      	ldr	r2, [pc, #132]	; (801651c <rintf+0xac>)
 8016498:	0a5b      	lsrs	r3, r3, #9
 801649a:	0d09      	lsrs	r1, r1, #20
 801649c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80164a0:	0509      	lsls	r1, r1, #20
 80164a2:	430b      	orrs	r3, r1
 80164a4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80164a8:	ee07 3a90 	vmov	s15, r3
 80164ac:	edd2 6a00 	vldr	s13, [r2]
 80164b0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80164b4:	ed8d 7a01 	vstr	s14, [sp, #4]
 80164b8:	eddd 7a01 	vldr	s15, [sp, #4]
 80164bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80164c0:	ee17 3a90 	vmov	r3, s15
 80164c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164c8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80164cc:	ee00 3a10 	vmov	s0, r3
 80164d0:	b002      	add	sp, #8
 80164d2:	bd10      	pop	{r4, pc}
 80164d4:	4b12      	ldr	r3, [pc, #72]	; (8016520 <rintf+0xb0>)
 80164d6:	4123      	asrs	r3, r4
 80164d8:	4219      	tst	r1, r3
 80164da:	d0f9      	beq.n	80164d0 <rintf+0x60>
 80164dc:	085b      	lsrs	r3, r3, #1
 80164de:	4219      	tst	r1, r3
 80164e0:	d006      	beq.n	80164f0 <rintf+0x80>
 80164e2:	ea21 0203 	bic.w	r2, r1, r3
 80164e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80164ea:	fa43 f404 	asr.w	r4, r3, r4
 80164ee:	4322      	orrs	r2, r4
 80164f0:	4b0a      	ldr	r3, [pc, #40]	; (801651c <rintf+0xac>)
 80164f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80164f6:	ed90 7a00 	vldr	s14, [r0]
 80164fa:	ee07 2a90 	vmov	s15, r2
 80164fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016502:	edcd 7a01 	vstr	s15, [sp, #4]
 8016506:	ed9d 0a01 	vldr	s0, [sp, #4]
 801650a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801650e:	e7df      	b.n	80164d0 <rintf+0x60>
 8016510:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016514:	d3dc      	bcc.n	80164d0 <rintf+0x60>
 8016516:	ee30 0a00 	vadd.f32	s0, s0, s0
 801651a:	e7d9      	b.n	80164d0 <rintf+0x60>
 801651c:	08016ec0 	.word	0x08016ec0
 8016520:	007fffff 	.word	0x007fffff

08016524 <scalbnf>:
 8016524:	b508      	push	{r3, lr}
 8016526:	ee10 2a10 	vmov	r2, s0
 801652a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801652e:	ed2d 8b02 	vpush	{d8}
 8016532:	eef0 0a40 	vmov.f32	s1, s0
 8016536:	d004      	beq.n	8016542 <scalbnf+0x1e>
 8016538:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801653c:	d306      	bcc.n	801654c <scalbnf+0x28>
 801653e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8016542:	ecbd 8b02 	vpop	{d8}
 8016546:	eeb0 0a60 	vmov.f32	s0, s1
 801654a:	bd08      	pop	{r3, pc}
 801654c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016550:	d21c      	bcs.n	801658c <scalbnf+0x68>
 8016552:	4b1f      	ldr	r3, [pc, #124]	; (80165d0 <scalbnf+0xac>)
 8016554:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80165d4 <scalbnf+0xb0>
 8016558:	4298      	cmp	r0, r3
 801655a:	ee60 0a27 	vmul.f32	s1, s0, s15
 801655e:	db10      	blt.n	8016582 <scalbnf+0x5e>
 8016560:	ee10 2a90 	vmov	r2, s1
 8016564:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8016568:	3b19      	subs	r3, #25
 801656a:	4403      	add	r3, r0
 801656c:	2bfe      	cmp	r3, #254	; 0xfe
 801656e:	dd0f      	ble.n	8016590 <scalbnf+0x6c>
 8016570:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80165d8 <scalbnf+0xb4>
 8016574:	eeb0 0a48 	vmov.f32	s0, s16
 8016578:	f000 f843 	bl	8016602 <copysignf>
 801657c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8016580:	e7df      	b.n	8016542 <scalbnf+0x1e>
 8016582:	eddf 7a16 	vldr	s15, [pc, #88]	; 80165dc <scalbnf+0xb8>
 8016586:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801658a:	e7da      	b.n	8016542 <scalbnf+0x1e>
 801658c:	0ddb      	lsrs	r3, r3, #23
 801658e:	e7ec      	b.n	801656a <scalbnf+0x46>
 8016590:	2b00      	cmp	r3, #0
 8016592:	dd06      	ble.n	80165a2 <scalbnf+0x7e>
 8016594:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016598:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801659c:	ee00 3a90 	vmov	s1, r3
 80165a0:	e7cf      	b.n	8016542 <scalbnf+0x1e>
 80165a2:	f113 0f16 	cmn.w	r3, #22
 80165a6:	da06      	bge.n	80165b6 <scalbnf+0x92>
 80165a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80165ac:	4298      	cmp	r0, r3
 80165ae:	dcdf      	bgt.n	8016570 <scalbnf+0x4c>
 80165b0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80165dc <scalbnf+0xb8>
 80165b4:	e7de      	b.n	8016574 <scalbnf+0x50>
 80165b6:	3319      	adds	r3, #25
 80165b8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80165bc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80165c0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80165e0 <scalbnf+0xbc>
 80165c4:	ee07 3a10 	vmov	s14, r3
 80165c8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80165cc:	e7b9      	b.n	8016542 <scalbnf+0x1e>
 80165ce:	bf00      	nop
 80165d0:	ffff3cb0 	.word	0xffff3cb0
 80165d4:	4c000000 	.word	0x4c000000
 80165d8:	7149f2ca 	.word	0x7149f2ca
 80165dc:	0da24260 	.word	0x0da24260
 80165e0:	33000000 	.word	0x33000000

080165e4 <copysign>:
 80165e4:	ec51 0b10 	vmov	r0, r1, d0
 80165e8:	ee11 0a90 	vmov	r0, s3
 80165ec:	ee10 2a10 	vmov	r2, s0
 80165f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80165f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80165f8:	ea41 0300 	orr.w	r3, r1, r0
 80165fc:	ec43 2b10 	vmov	d0, r2, r3
 8016600:	4770      	bx	lr

08016602 <copysignf>:
 8016602:	ee10 3a10 	vmov	r3, s0
 8016606:	ee10 2a90 	vmov	r2, s1
 801660a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801660e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8016612:	4313      	orrs	r3, r2
 8016614:	ee00 3a10 	vmov	s0, r3
 8016618:	4770      	bx	lr
	...

0801661c <_init>:
 801661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801661e:	bf00      	nop
 8016620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016622:	bc08      	pop	{r3}
 8016624:	469e      	mov	lr, r3
 8016626:	4770      	bx	lr

08016628 <_fini>:
 8016628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801662a:	bf00      	nop
 801662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801662e:	bc08      	pop	{r3}
 8016630:	469e      	mov	lr, r3
 8016632:	4770      	bx	lr
