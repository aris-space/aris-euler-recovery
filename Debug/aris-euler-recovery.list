
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009a48  08009a48  00019a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f38  08009f38  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f40  08009f40  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08009f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200002a0  0800a1e8  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 0000224c  20000564  0800a1e8  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afd8  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032ee  00000000  00000000  0003b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  0003e598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  0003f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002410b  00000000  00000000  00040250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fca  00000000  00000000  0006435b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5e54  00000000  00000000  00075325  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  0013b1f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a2c 	.word	0x08009a2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	08009a2c 	.word	0x08009a2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0xa0>)
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000faa:	f002 f839 	bl	8003020 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 fc62 	bl	800187c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fca:	f002 f86d 	bl	80030a8 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f000 fc52 	bl	800187c <Error_Handler>
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200002d8 	.word	0x200002d8
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	0f000001 	.word	0x0f000001

08000fec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_ADC_MspInit+0xb0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d141      	bne.n	8001092 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001062:	230f      	movs	r3, #15
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001066:	2303      	movs	r3, #3
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <HAL_ADC_MspInit+0xb8>)
 8001076:	f002 fb1b 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800107a:	2307      	movs	r3, #7
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <HAL_ADC_MspInit+0xbc>)
 800108e:	f002 fb0f 	bl	80036b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020000 	.word	0x40020000

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b64      	ldr	r3, [pc, #400]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a63      	ldr	r2, [pc, #396]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b61      	ldr	r3, [pc, #388]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a5c      	ldr	r2, [pc, #368]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a55      	ldr	r2, [pc, #340]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <MX_GPIO_Init+0x1ac>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b4f      	ldr	r3, [pc, #316]	; (8001258 <MX_GPIO_Init+0x1ac>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a47      	ldr	r2, [pc, #284]	; (8001258 <MX_GPIO_Init+0x1ac>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2110      	movs	r1, #16
 8001152:	4842      	ldr	r0, [pc, #264]	; (800125c <MX_GPIO_Init+0x1b0>)
 8001154:	f002 fc46 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2120      	movs	r1, #32
 800115c:	4840      	ldr	r0, [pc, #256]	; (8001260 <MX_GPIO_Init+0x1b4>)
 800115e:	f002 fc41 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001162:	2200      	movs	r2, #0
 8001164:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001168:	483e      	ldr	r0, [pc, #248]	; (8001264 <MX_GPIO_Init+0x1b8>)
 800116a:	f002 fc3b 	bl	80039e4 <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001174:	483c      	ldr	r0, [pc, #240]	; (8001268 <MX_GPIO_Init+0x1bc>)
 8001176:	f002 fc35 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 800117a:	2308      	movs	r3, #8
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4835      	ldr	r0, [pc, #212]	; (8001264 <MX_GPIO_Init+0x1b8>)
 800118e:	f002 fa8f 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <MX_GPIO_Init+0x1b4>)
 80011a8:	f002 fa82 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011ac:	2310      	movs	r3, #16
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <MX_GPIO_Init+0x1b0>)
 80011c4:	f002 fa74 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80011c8:	2320      	movs	r3, #32
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4820      	ldr	r0, [pc, #128]	; (8001260 <MX_GPIO_Init+0x1b4>)
 80011e0:	f002 fa66 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 80011e4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80011e8:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <MX_GPIO_Init+0x1b8>)
 80011fe:	f002 fa57 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 8001202:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_GPIO_Init+0x1bc>)
 800121c:	f002 fa48 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <MX_GPIO_Init+0x1c0>)
 8001234:	f002 fa3c 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_GPIO_Init+0x1bc>)
 800124c:	f002 fa30 	bl	80036b0 <HAL_GPIO_Init>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020800 	.word	0x40020800
 8001264:	40021000 	.word	0x40021000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020c00 	.word	0x40020c00

08001270 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_I2C1_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C1_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_I2C1_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012ae:	f002 fbcd 	bl	8003a4c <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 fae0 	bl	800187c <Error_Handler>
  }

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000320 	.word	0x20000320
 80012c4:	40005400 	.word	0x40005400
 80012c8:	00061a80 	.word	0x00061a80

080012cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_I2C2_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <MX_I2C2_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_I2C2_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_I2C2_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_I2C2_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_I2C2_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_I2C2_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_I2C2_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_I2C2_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_I2C2_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_I2C2_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_I2C2_Init+0x50>)
 800130a:	f002 fb9f 	bl	8003a4c <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 fab2 	bl	800187c <Error_Handler>
  }

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000374 	.word	0x20000374
 8001320:	40005800 	.word	0x40005800
 8001324:	000186a0 	.word	0x000186a0

08001328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_I2C_MspInit+0xe8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_I2C_MspInit+0xec>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001366:	23c0      	movs	r3, #192	; 0xc0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001376:	2304      	movs	r3, #4
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4825      	ldr	r0, [pc, #148]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 8001382:	f002 f995 	bl	80036b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_I2C_MspInit+0xec>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a21      	ldr	r2, [pc, #132]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013a2:	e031      	b.n	8001408 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_I2C_MspInit+0xf4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12c      	bne.n	8001408 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013dc:	2304      	movs	r3, #4
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 80013e8:	f002 f962 	bl	80036b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3730      	adds	r7, #48	; 0x30
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400
 800141c:	40005800 	.word	0x40005800

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001426:	f001 fd67 	bl	8002ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142a:	f000 f9bd 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142e:	f7ff fe3d 	bl	80010ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001432:	f7ff ff1d 	bl	8001270 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001436:	f000 faf7 	bl	8001a28 <MX_SPI2_Init>
  MX_ADC1_Init();
 800143a:	f7ff fd85 	bl	8000f48 <MX_ADC1_Init>
  MX_I2C2_Init();
 800143e:	f7ff ff45 	bl	80012cc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001442:	f000 fa23 	bl	800188c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001446:	f000 fab9 	bl	80019bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  turn_on(&STAT);
 800144a:	48b6      	ldr	r0, [pc, #728]	; (8001724 <main+0x304>)
 800144c:	f001 f833 	bl	80024b6 <turn_on>
  HAL_Delay(300);
 8001450:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001454:	f001 fdc2 	bl	8002fdc <HAL_Delay>
  turn_on(&SAVE);
 8001458:	48b3      	ldr	r0, [pc, #716]	; (8001728 <main+0x308>)
 800145a:	f001 f82c 	bl	80024b6 <turn_on>
  HAL_Delay(300);
 800145e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001462:	f001 fdbb 	bl	8002fdc <HAL_Delay>
  turn_on(&PRGM);
 8001466:	48b1      	ldr	r0, [pc, #708]	; (800172c <main+0x30c>)
 8001468:	f001 f825 	bl	80024b6 <turn_on>
  HAL_Delay(300);
 800146c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001470:	f001 fdb4 	bl	8002fdc <HAL_Delay>

  turn_off(&STAT);
 8001474:	48ab      	ldr	r0, [pc, #684]	; (8001724 <main+0x304>)
 8001476:	f001 f82e 	bl	80024d6 <turn_off>
  turn_off(&SAVE);
 800147a:	48ab      	ldr	r0, [pc, #684]	; (8001728 <main+0x308>)
 800147c:	f001 f82b 	bl	80024d6 <turn_off>
  turn_off(&PRGM);
 8001480:	48aa      	ldr	r0, [pc, #680]	; (800172c <main+0x30c>)
 8001482:	f001 f828 	bl	80024d6 <turn_off>
  HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148a:	f001 fda7 	bl	8002fdc <HAL_Delay>


  ms5607_init(&BARO1);
 800148e:	48a8      	ldr	r0, [pc, #672]	; (8001730 <main+0x310>)
 8001490:	f001 f860 	bl	8002554 <ms5607_init>
  ms5607_init(&BARO2);
 8001494:	48a7      	ldr	r0, [pc, #668]	; (8001734 <main+0x314>)
 8001496:	f001 f85d 	bl	8002554 <ms5607_init>

  if (icm20601_init(&IMU1)) printf("setup IMU1 successful \n");
 800149a:	48a7      	ldr	r0, [pc, #668]	; (8001738 <main+0x318>)
 800149c:	f000 fd6b 	bl	8001f76 <icm20601_init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <main+0x8c>
 80014a6:	48a5      	ldr	r0, [pc, #660]	; (800173c <main+0x31c>)
 80014a8:	f006 fc06 	bl	8007cb8 <puts>
  if (icm20601_init(&IMU2)) printf("setup IMU2 successful \n");
 80014ac:	48a4      	ldr	r0, [pc, #656]	; (8001740 <main+0x320>)
 80014ae:	f000 fd62 	bl	8001f76 <icm20601_init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <main+0x9e>
 80014b8:	48a2      	ldr	r0, [pc, #648]	; (8001744 <main+0x324>)
 80014ba:	f006 fbfd 	bl	8007cb8 <puts>

  sht31_init(&TEMP);
 80014be:	48a2      	ldr	r0, [pc, #648]	; (8001748 <main+0x328>)
 80014c0:	f001 fc00 	bl	8002cc4 <sht31_init>

  HAL_Delay(1000);
 80014c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c8:	f001 fd88 	bl	8002fdc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	tick = HAL_GetTick();
 80014cc:	f001 fd7a 	bl	8002fc4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b9e      	ldr	r3, [pc, #632]	; (800174c <main+0x32c>)
 80014d4:	601a      	str	r2, [r3, #0]

	if (LED_is_busy(&STAT)) toggle(&STAT);
 80014d6:	4893      	ldr	r0, [pc, #588]	; (8001724 <main+0x304>)
 80014d8:	f000 ffc4 	bl	8002464 <LED_is_busy>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <main+0xc8>
 80014e2:	4890      	ldr	r0, [pc, #576]	; (8001724 <main+0x304>)
 80014e4:	f000 ffd7 	bl	8002496 <toggle>

	if (LED_is_busy(&SAVE)) toggle(&SAVE);
 80014e8:	488f      	ldr	r0, [pc, #572]	; (8001728 <main+0x308>)
 80014ea:	f000 ffbb 	bl	8002464 <LED_is_busy>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <main+0xda>
 80014f4:	488c      	ldr	r0, [pc, #560]	; (8001728 <main+0x308>)
 80014f6:	f000 ffce 	bl	8002496 <toggle>

	if (LED_is_busy(&PRGM)) toggle(&PRGM);
 80014fa:	488c      	ldr	r0, [pc, #560]	; (800172c <main+0x30c>)
 80014fc:	f000 ffb2 	bl	8002464 <LED_is_busy>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <main+0xec>
 8001506:	4889      	ldr	r0, [pc, #548]	; (800172c <main+0x30c>)
 8001508:	f000 ffc5 	bl	8002496 <toggle>

	if (LED_is_busy(&RDY)) toggle(&RDY);
 800150c:	4890      	ldr	r0, [pc, #576]	; (8001750 <main+0x330>)
 800150e:	f000 ffa9 	bl	8002464 <LED_is_busy>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <main+0xfe>
 8001518:	488d      	ldr	r0, [pc, #564]	; (8001750 <main+0x330>)
 800151a:	f000 ffbc 	bl	8002496 <toggle>


	if (sht31_is_busy(&TEMP))
 800151e:	488a      	ldr	r0, [pc, #552]	; (8001748 <main+0x328>)
 8001520:	f001 fbb8 	bl	8002c94 <sht31_is_busy>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <main+0x114>
	{
		sht31_read(&TEMP, t_val, t_buf);
 800152a:	4a8a      	ldr	r2, [pc, #552]	; (8001754 <main+0x334>)
 800152c:	498a      	ldr	r1, [pc, #552]	; (8001758 <main+0x338>)
 800152e:	4886      	ldr	r0, [pc, #536]	; (8001748 <main+0x328>)
 8001530:	f001 fc1e 	bl	8002d70 <sht31_read>
	}


	//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
	//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
	icm20601_read_data(&IMU1, accel1_val);
 8001534:	4989      	ldr	r1, [pc, #548]	; (800175c <main+0x33c>)
 8001536:	4880      	ldr	r0, [pc, #512]	; (8001738 <main+0x318>)
 8001538:	f000 febe 	bl	80022b8 <icm20601_read_data>

	//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
	//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
	icm20601_read_data(&IMU2, accel2_val);
 800153c:	4988      	ldr	r1, [pc, #544]	; (8001760 <main+0x340>)
 800153e:	4880      	ldr	r0, [pc, #512]	; (8001740 <main+0x320>)
 8001540:	f000 feba 	bl	80022b8 <icm20601_read_data>



	if (ms5607_is_busy(&BARO1, 3, MS_TEMPERATURE_REQ))
 8001544:	2201      	movs	r2, #1
 8001546:	2103      	movs	r1, #3
 8001548:	4879      	ldr	r0, [pc, #484]	; (8001730 <main+0x310>)
 800154a:	f000 ffd4 	bl	80024f6 <ms5607_is_busy>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <main+0x13a>
	{
		ms5607_prep_temp(&BARO1);
 8001554:	4876      	ldr	r0, [pc, #472]	; (8001730 <main+0x310>)
 8001556:	f001 f89b 	bl	8002690 <ms5607_prep_temp>
	}
	if (ms5607_is_busy(&BARO2, 3, MS_TEMPERATURE_REQ))
 800155a:	2201      	movs	r2, #1
 800155c:	2103      	movs	r1, #3
 800155e:	4875      	ldr	r0, [pc, #468]	; (8001734 <main+0x314>)
 8001560:	f000 ffc9 	bl	80024f6 <ms5607_is_busy>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <main+0x150>
	{
		ms5607_prep_temp(&BARO2);
 800156a:	4872      	ldr	r0, [pc, #456]	; (8001734 <main+0x314>)
 800156c:	f001 f890 	bl	8002690 <ms5607_prep_temp>
	}
	//delay 3ms

	//HAL_Delay(5);

	if (ms5607_is_busy(&BARO1, 3, MS_PRESSURE_REQ))
 8001570:	2202      	movs	r2, #2
 8001572:	2103      	movs	r1, #3
 8001574:	486e      	ldr	r0, [pc, #440]	; (8001730 <main+0x310>)
 8001576:	f000 ffbe 	bl	80024f6 <ms5607_is_busy>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <main+0x168>
	{
		ms5607_prep_pressure(&BARO1, raw_data1);
 8001580:	4978      	ldr	r1, [pc, #480]	; (8001764 <main+0x344>)
 8001582:	486b      	ldr	r0, [pc, #428]	; (8001730 <main+0x310>)
 8001584:	f001 f89b 	bl	80026be <ms5607_prep_pressure>
	}
	if (ms5607_is_busy(&BARO2, 3, MS_PRESSURE_REQ))
 8001588:	2202      	movs	r2, #2
 800158a:	2103      	movs	r1, #3
 800158c:	4869      	ldr	r0, [pc, #420]	; (8001734 <main+0x314>)
 800158e:	f000 ffb2 	bl	80024f6 <ms5607_is_busy>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <main+0x180>
	{
		ms5607_prep_pressure(&BARO2, raw_data2);
 8001598:	4973      	ldr	r1, [pc, #460]	; (8001768 <main+0x348>)
 800159a:	4866      	ldr	r0, [pc, #408]	; (8001734 <main+0x314>)
 800159c:	f001 f88f 	bl	80026be <ms5607_prep_pressure>
	}
	//delay 3ms

	//HAL_Delay(5);

	if (ms5607_is_busy(&BARO1, 3, MS_DATA_READOUT)) {
 80015a0:	2203      	movs	r2, #3
 80015a2:	2103      	movs	r1, #3
 80015a4:	4862      	ldr	r0, [pc, #392]	; (8001730 <main+0x310>)
 80015a6:	f000 ffa6 	bl	80024f6 <ms5607_is_busy>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <main+0x1a2>
		ms5607_read_pressure(&BARO1, raw_data1);
 80015b0:	496c      	ldr	r1, [pc, #432]	; (8001764 <main+0x344>)
 80015b2:	485f      	ldr	r0, [pc, #380]	; (8001730 <main+0x310>)
 80015b4:	f001 f8cc 	bl	8002750 <ms5607_read_pressure>
		ms5607_convert(&BARO1, &p1, &t_p1);
 80015b8:	4a6c      	ldr	r2, [pc, #432]	; (800176c <main+0x34c>)
 80015ba:	496d      	ldr	r1, [pc, #436]	; (8001770 <main+0x350>)
 80015bc:	485c      	ldr	r0, [pc, #368]	; (8001730 <main+0x310>)
 80015be:	f001 f903 	bl	80027c8 <ms5607_convert>
	}
	if (ms5607_is_busy(&BARO2, 3, MS_DATA_READOUT)) {
 80015c2:	2203      	movs	r2, #3
 80015c4:	2103      	movs	r1, #3
 80015c6:	485b      	ldr	r0, [pc, #364]	; (8001734 <main+0x314>)
 80015c8:	f000 ff95 	bl	80024f6 <ms5607_is_busy>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <main+0x1c4>
		ms5607_read_pressure(&BARO2, raw_data2);
 80015d2:	4965      	ldr	r1, [pc, #404]	; (8001768 <main+0x348>)
 80015d4:	4857      	ldr	r0, [pc, #348]	; (8001734 <main+0x314>)
 80015d6:	f001 f8bb 	bl	8002750 <ms5607_read_pressure>
		ms5607_convert(&BARO2, &p2, &t_p2);
 80015da:	4a66      	ldr	r2, [pc, #408]	; (8001774 <main+0x354>)
 80015dc:	4966      	ldr	r1, [pc, #408]	; (8001778 <main+0x358>)
 80015de:	4855      	ldr	r0, [pc, #340]	; (8001734 <main+0x314>)
 80015e0:	f001 f8f2 	bl	80027c8 <ms5607_convert>
	}




	printf("p1 = %4.2f bar and t1 = %4.2f C \n",p1,t_p1);
 80015e4:	4b62      	ldr	r3, [pc, #392]	; (8001770 <main+0x350>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffad 	bl	8000548 <__aeabi_f2d>
 80015ee:	4605      	mov	r5, r0
 80015f0:	460e      	mov	r6, r1
 80015f2:	4b5e      	ldr	r3, [pc, #376]	; (800176c <main+0x34c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffa6 	bl	8000548 <__aeabi_f2d>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	e9cd 3400 	strd	r3, r4, [sp]
 8001604:	462a      	mov	r2, r5
 8001606:	4633      	mov	r3, r6
 8001608:	485c      	ldr	r0, [pc, #368]	; (800177c <main+0x35c>)
 800160a:	f006 fae1 	bl	8007bd0 <iprintf>
	printf("p2 = %4.2f bar and t2 = %4.2f C \n",p2,t_p2);
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <main+0x358>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff98 	bl	8000548 <__aeabi_f2d>
 8001618:	4605      	mov	r5, r0
 800161a:	460e      	mov	r6, r1
 800161c:	4b55      	ldr	r3, [pc, #340]	; (8001774 <main+0x354>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4603      	mov	r3, r0
 8001628:	460c      	mov	r4, r1
 800162a:	e9cd 3400 	strd	r3, r4, [sp]
 800162e:	462a      	mov	r2, r5
 8001630:	4633      	mov	r3, r6
 8001632:	4853      	ldr	r0, [pc, #332]	; (8001780 <main+0x360>)
 8001634:	f006 facc 	bl	8007bd0 <iprintf>
	printf("T = %4.2f C and H = %4.2f perc \n",t_val[0],t_val[1]);
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <main+0x338>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff83 	bl	8000548 <__aeabi_f2d>
 8001642:	4605      	mov	r5, r0
 8001644:	460e      	mov	r6, r1
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <main+0x338>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff7c 	bl	8000548 <__aeabi_f2d>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	e9cd 3400 	strd	r3, r4, [sp]
 8001658:	462a      	mov	r2, r5
 800165a:	4633      	mov	r3, r6
 800165c:	4849      	ldr	r0, [pc, #292]	; (8001784 <main+0x364>)
 800165e:	f006 fab7 	bl	8007bd0 <iprintf>
	printf("IMU1 T: %4.2f C \n", accel1_val[0]);
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <main+0x33c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff6e 	bl	8000548 <__aeabi_f2d>
 800166c:	4603      	mov	r3, r0
 800166e:	460c      	mov	r4, r1
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	4844      	ldr	r0, [pc, #272]	; (8001788 <main+0x368>)
 8001676:	f006 faab 	bl	8007bd0 <iprintf>
	printf("IMU1 ax: %4.2f m/s2 \n", accel1_val[1]);
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <main+0x33c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	4603      	mov	r3, r0
 8001686:	460c      	mov	r4, r1
 8001688:	461a      	mov	r2, r3
 800168a:	4623      	mov	r3, r4
 800168c:	483f      	ldr	r0, [pc, #252]	; (800178c <main+0x36c>)
 800168e:	f006 fa9f 	bl	8007bd0 <iprintf>
	printf("IMU1 ay: %4.2f m/s2 \n", accel1_val[2]);
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <main+0x33c>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff56 	bl	8000548 <__aeabi_f2d>
 800169c:	4603      	mov	r3, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	461a      	mov	r2, r3
 80016a2:	4623      	mov	r3, r4
 80016a4:	483a      	ldr	r0, [pc, #232]	; (8001790 <main+0x370>)
 80016a6:	f006 fa93 	bl	8007bd0 <iprintf>
	printf("IMU1 az: %4.2f m/s2 \n", accel1_val[3]);
 80016aa:	4b2c      	ldr	r3, [pc, #176]	; (800175c <main+0x33c>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff4a 	bl	8000548 <__aeabi_f2d>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	4835      	ldr	r0, [pc, #212]	; (8001794 <main+0x374>)
 80016be:	f006 fa87 	bl	8007bd0 <iprintf>
	printf("IMU2 T: %4.2f C \n", accel2_val[0]);
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <main+0x340>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff3e 	bl	8000548 <__aeabi_f2d>
 80016cc:	4603      	mov	r3, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	4830      	ldr	r0, [pc, #192]	; (8001798 <main+0x378>)
 80016d6:	f006 fa7b 	bl	8007bd0 <iprintf>
	printf("IMU2 ax: %4.2f m/s2 \n", accel2_val[1]);
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <main+0x340>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff32 	bl	8000548 <__aeabi_f2d>
 80016e4:	4603      	mov	r3, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	461a      	mov	r2, r3
 80016ea:	4623      	mov	r3, r4
 80016ec:	482b      	ldr	r0, [pc, #172]	; (800179c <main+0x37c>)
 80016ee:	f006 fa6f 	bl	8007bd0 <iprintf>
	printf("IMU2 ay: %4.2f m/s2 \n", accel2_val[2]);
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <main+0x340>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4603      	mov	r3, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	4826      	ldr	r0, [pc, #152]	; (80017a0 <main+0x380>)
 8001706:	f006 fa63 	bl	8007bd0 <iprintf>
	printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <main+0x340>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff1a 	bl	8000548 <__aeabi_f2d>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	4821      	ldr	r0, [pc, #132]	; (80017a4 <main+0x384>)
 800171e:	f006 fa57 	bl	8007bd0 <iprintf>
	tick = HAL_GetTick();
 8001722:	e6d3      	b.n	80014cc <main+0xac>
 8001724:	20000000 	.word	0x20000000
 8001728:	20000010 	.word	0x20000010
 800172c:	20000020 	.word	0x20000020
 8001730:	20000040 	.word	0x20000040
 8001734:	20000068 	.word	0x20000068
 8001738:	20000090 	.word	0x20000090
 800173c:	08009a48 	.word	0x08009a48
 8001740:	200000a0 	.word	0x200000a0
 8001744:	08009a60 	.word	0x08009a60
 8001748:	200000b0 	.word	0x200000b0
 800174c:	200003dc 	.word	0x200003dc
 8001750:	20000030 	.word	0x20000030
 8001754:	200003d8 	.word	0x200003d8
 8001758:	20000408 	.word	0x20000408
 800175c:	20000410 	.word	0x20000410
 8001760:	200003e4 	.word	0x200003e4
 8001764:	200003e0 	.word	0x200003e0
 8001768:	200003c8 	.word	0x200003c8
 800176c:	200002c4 	.word	0x200002c4
 8001770:	200002bc 	.word	0x200002bc
 8001774:	200002c8 	.word	0x200002c8
 8001778:	200002c0 	.word	0x200002c0
 800177c:	08009a78 	.word	0x08009a78
 8001780:	08009a9c 	.word	0x08009a9c
 8001784:	08009ac0 	.word	0x08009ac0
 8001788:	08009ae4 	.word	0x08009ae4
 800178c:	08009af8 	.word	0x08009af8
 8001790:	08009b10 	.word	0x08009b10
 8001794:	08009b28 	.word	0x08009b28
 8001798:	08009b40 	.word	0x08009b40
 800179c:	08009b54 	.word	0x08009b54
 80017a0:	08009b6c 	.word	0x08009b6c
 80017a4:	08009b84 	.word	0x08009b84

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	; 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fda6 	bl	8007308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <SystemClock_Config+0xcc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <SystemClock_Config+0xcc>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <SystemClock_Config+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <SystemClock_Config+0xd0>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180c:	2310      	movs	r3, #16
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001818:	2308      	movs	r3, #8
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800181c:	23a8      	movs	r3, #168	; 0xa8
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001824:	2307      	movs	r3, #7
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4618      	mov	r0, r3
 800182e:	f003 f9d1 	bl	8004bd4 <HAL_RCC_OscConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001838:	f000 f820 	bl	800187c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001840:	2302      	movs	r3, #2
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001848:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800184c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2105      	movs	r1, #5
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fc2a 	bl	80050b4 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001866:	f000 f809 	bl	800187c <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3750      	adds	r7, #80	; 0x50
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <MX_SDIO_SD_Init+0x5c>)
 8001894:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 80018bc:	f003 fdb2 	bl	8005424 <HAL_SD_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80018c6:	f7ff ffd9 	bl	800187c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80018ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_SDIO_SD_Init+0x58>)
 80018d0:	f003 ffdc 	bl	800588c <HAL_SD_ConfigWideBusOperation>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80018da:	f7ff ffcf 	bl	800187c <Error_Handler>
  }

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000428 	.word	0x20000428
 80018e8:	40012c00 	.word	0x40012c00

080018ec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a28      	ldr	r2, [pc, #160]	; (80019ac <HAL_SD_MspInit+0xc0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d14a      	bne.n	80019a4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 8001918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_SD_MspInit+0xc4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001962:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001966:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001974:	230c      	movs	r3, #12
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <HAL_SD_MspInit+0xc8>)
 8001980:	f001 fe96 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001984:	2304      	movs	r3, #4
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001994:	230c      	movs	r3, #12
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_SD_MspInit+0xcc>)
 80019a0:	f001 fe86 	bl	80036b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020c00 	.word	0x40020c00

080019bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <MX_SPI1_Init+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_SPI1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_SPI1_Init+0x64>)
 8001a08:	220a      	movs	r2, #10
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_SPI1_Init+0x64>)
 8001a0e:	f004 fa75 	bl	8005efc <HAL_SPI_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a18:	f7ff ff30 	bl	800187c <Error_Handler>
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000504 	.word	0x20000504
 8001a24:	40013000 	.word	0x40013000

08001a28 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_SPI2_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a74:	220a      	movs	r2, #10
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_SPI2_Init+0x64>)
 8001a7a:	f004 fa3f 	bl	8005efc <HAL_SPI_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a84:	f7ff fefa 	bl	800187c <Error_Handler>
  }

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200004ac 	.word	0x200004ac
 8001a90:	40003800 	.word	0x40003800

08001a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a32      	ldr	r2, [pc, #200]	; (8001b7c <HAL_SPI_MspInit+0xe8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d12c      	bne.n	8001b10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aee:	23e0      	movs	r3, #224	; 0xe0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001afe:	2305      	movs	r3, #5
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	481e      	ldr	r0, [pc, #120]	; (8001b84 <HAL_SPI_MspInit+0xf0>)
 8001b0a:	f001 fdd1 	bl	80036b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b0e:	e031      	b.n	8001b74 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_SPI_MspInit+0xf4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d12c      	bne.n	8001b74 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_SPI_MspInit+0xec>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b64:	2305      	movs	r3, #5
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4807      	ldr	r0, [pc, #28]	; (8001b8c <HAL_SPI_MspInit+0xf8>)
 8001b70:	f001 fd9e 	bl	80036b0 <HAL_GPIO_Init>
}
 8001b74:	bf00      	nop
 8001b76:	3730      	adds	r7, #48	; 0x30
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40013000 	.word	0x40013000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40003800 	.word	0x40003800
 8001b8c:	40020400 	.word	0x40020400

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f001 f9b2 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c48:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c58:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c5c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c64:	e000      	b.n	8001c68 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c66:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f9      	beq.n	8001c66 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c72:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e00a      	b.n	8001cb2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	60ba      	str	r2, [r7, #8]
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbf0      	blt.n	8001c9c <_read+0x12>
	}

return len;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e009      	b.n	8001cea <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	60ba      	str	r2, [r7, #8]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ffac 	bl	8001c3c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dbf1      	blt.n	8001cd6 <_write+0x12>
	}
	return len;
 8001cf2:	687b      	ldr	r3, [r7, #4]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_close>:

int _close(int file)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d24:	605a      	str	r2, [r3, #4]
	return 0;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_isatty>:

int _isatty(int file)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
	return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <_sbrk+0x50>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x16>
		heap_end = &end;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <_sbrk+0x50>)
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <_sbrk+0x54>)
 8001d78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <_sbrk+0x50>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <_sbrk+0x50>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	466a      	mov	r2, sp
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d907      	bls.n	8001d9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d8e:	f005 fa91 	bl	80072b4 <__errno>
 8001d92:	4602      	mov	r2, r0
 8001d94:	230c      	movs	r3, #12
 8001d96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d9c:	e006      	b.n	8001dac <_sbrk+0x48>
	}

	heap_end += incr;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <_sbrk+0x50>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <_sbrk+0x50>)
 8001da8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200002cc 	.word	0x200002cc
 8001db8:	20000568 	.word	0x20000568

08001dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <SystemInit+0x28>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <SystemInit+0x28>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SystemInit+0x28>)
 8001dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd6:	609a      	str	r2, [r3, #8]
#endif
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d81a      	bhi.n	8001e34 <_get_accel_sensitivity+0x4c>
 8001dfe:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <_get_accel_sensitivity+0x1c>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e1d 	.word	0x08001e1d
 8001e0c:	08001e25 	.word	0x08001e25
 8001e10:	08001e2d 	.word	0x08001e2d
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 8001e14:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001e18:	60fb      	str	r3, [r7, #12]
    break;
 8001e1a:	e00b      	b.n	8001e34 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 8001e1c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001e20:	60fb      	str	r3, [r7, #12]
    break;
 8001e22:	e007      	b.n	8001e34 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 8001e24:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001e28:	60fb      	str	r3, [r7, #12]
    break;
 8001e2a:	e003      	b.n	8001e34 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 8001e2c:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8001e30:	60fb      	str	r3, [r7, #12]
    break;
 8001e32:	bf00      	nop
  }
  return f;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	ee07 3a90 	vmov	s15, r3
}
 8001e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d816      	bhi.n	8001e8c <_get_gyro_sensitivity+0x44>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <_get_gyro_sensitivity+0x1c>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e7b 	.word	0x08001e7b
 8001e6c:	08001e81 	.word	0x08001e81
 8001e70:	08001e87 	.word	0x08001e87
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <_get_gyro_sensitivity+0x58>)
 8001e76:	60fb      	str	r3, [r7, #12]
	break;
 8001e78:	e008      	b.n	8001e8c <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <_get_gyro_sensitivity+0x5c>)
 8001e7c:	60fb      	str	r3, [r7, #12]
    break;
 8001e7e:	e005      	b.n	8001e8c <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <_get_gyro_sensitivity+0x60>)
 8001e82:	60fb      	str	r3, [r7, #12]
    break;
 8001e84:	e002      	b.n	8001e8c <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <_get_gyro_sensitivity+0x64>)
 8001e88:	60fb      	str	r3, [r7, #12]
    break;
 8001e8a:	bf00      	nop
  }
  return f;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	ee07 3a90 	vmov	s15, r3
}
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	42830000 	.word	0x42830000
 8001ea4:	42033333 	.word	0x42033333
 8001ea8:	41833333 	.word	0x41833333
 8001eac:	41033333 	.word	0x41033333

08001eb0 <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	72fb      	strb	r3, [r7, #11]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	889b      	ldrh	r3, [r3, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f001 fd83 	bl	80039e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6898      	ldr	r0, [r3, #8]
 8001ee2:	f107 010b 	add.w	r1, r7, #11
 8001ee6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001eea:	2201      	movs	r2, #1
 8001eec:	f004 f86a 	bl	8005fc4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6898      	ldr	r0, [r3, #8]
 8001ef4:	893a      	ldrh	r2, [r7, #8]
 8001ef6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	f004 f996 	bl	800622c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	889b      	ldrh	r3, [r3, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f001 fd6a 	bl	80039e4 <HAL_GPIO_WritePin>
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	461a      	mov	r2, r3
 8001f24:	460b      	mov	r3, r1
 8001f26:	72fb      	strb	r3, [r7, #11]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	889b      	ldrh	r3, [r3, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	f001 fd54 	bl	80039e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6898      	ldr	r0, [r3, #8]
 8001f40:	f107 010b 	add.w	r1, r7, #11
 8001f44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f004 f83b 	bl	8005fc4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6898      	ldr	r0, [r3, #8]
 8001f52:	893a      	ldrh	r2, [r7, #8]
 8001f54:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	f004 f833 	bl	8005fc4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	889b      	ldrh	r3, [r3, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f001 fd3b 	bl	80039e4 <HAL_GPIO_WritePin>
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8001f82:	2300      	movs	r3, #0
 8001f84:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8001f86:	2381      	movs	r3, #129	; 0x81
 8001f88:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8001f8a:	f107 020f 	add.w	r2, r7, #15
 8001f8e:	2301      	movs	r3, #1
 8001f90:	216b      	movs	r1, #107	; 0x6b
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffc0 	bl	8001f18 <_icm_write_bytes>
	HAL_Delay(1);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f001 f81f 	bl	8002fdc <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8001fa2:	f107 020f 	add.w	r2, r7, #15
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	216b      	movs	r1, #107	; 0x6b
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffb4 	bl	8001f18 <_icm_write_bytes>
    HAL_Delay(1);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f001 f813 	bl	8002fdc <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2175      	movs	r1, #117	; 0x75
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff76 	bl	8001eb0 <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8001fc4:	7b3b      	ldrb	r3, [r7, #12]
 8001fc6:	2bac      	cmp	r3, #172	; 0xac
 8001fc8:	d001      	beq.n	8001fce <icm20601_init+0x58>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e093      	b.n	80020f6 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8001fce:	233f      	movs	r3, #63	; 0x3f
 8001fd0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8001fd2:	f107 020f 	add.w	r2, r7, #15
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	216c      	movs	r1, #108	; 0x6c
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff9c 	bl	8001f18 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8001fe4:	f107 020f 	add.w	r2, r7, #15
 8001fe8:	2301      	movs	r3, #1
 8001fea:	216a      	movs	r1, #106	; 0x6a
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff93 	bl	8001f18 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8001ff2:	2341      	movs	r3, #65	; 0x41
 8001ff4:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8001ff6:	f107 020f 	add.w	r2, r7, #15
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	216a      	movs	r1, #106	; 0x6a
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff8a 	bl	8001f18 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7b1b      	ldrb	r3, [r3, #12]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d102      	bne.n	8002012 <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 800200c:	2308      	movs	r3, #8
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e002      	b.n	8002018 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7b1b      	ldrb	r3, [r3, #12]
 8002016:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8002018:	f107 020f 	add.w	r2, r7, #15
 800201c:	2301      	movs	r3, #1
 800201e:	211d      	movs	r1, #29
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff79 	bl	8001f18 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7b5b      	ldrb	r3, [r3, #13]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8002030:	f107 020f 	add.w	r2, r7, #15
 8002034:	2301      	movs	r3, #1
 8002036:	211c      	movs	r1, #28
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff6d 	bl	8001f18 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7b9b      	ldrb	r3, [r3, #14]
 8002042:	2b08      	cmp	r3, #8
 8002044:	d119      	bne.n	800207a <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 800204a:	f107 020f 	add.w	r2, r7, #15
 800204e:	2301      	movs	r3, #1
 8002050:	211a      	movs	r1, #26
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff60 	bl	8001f18 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7bdb      	ldrb	r3, [r3, #15]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	b25b      	sxtb	r3, r3
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	b25b      	sxtb	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 800206a:	f107 020f 	add.w	r2, r7, #15
 800206e:	2301      	movs	r3, #1
 8002070:	211b      	movs	r1, #27
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff50 	bl	8001f18 <_icm_write_bytes>
 8002078:	e033      	b.n	80020e2 <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7b9b      	ldrb	r3, [r3, #14]
 800207e:	2b09      	cmp	r3, #9
 8002080:	d119      	bne.n	80020b6 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8002086:	f107 020f 	add.w	r2, r7, #15
 800208a:	2301      	movs	r3, #1
 800208c:	211a      	movs	r1, #26
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff42 	bl	8001f18 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7bdb      	ldrb	r3, [r3, #15]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	b25b      	sxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80020a6:	f107 020f 	add.w	r2, r7, #15
 80020aa:	2301      	movs	r3, #1
 80020ac:	211b      	movs	r1, #27
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ff32 	bl	8001f18 <_icm_write_bytes>
 80020b4:	e015      	b.n	80020e2 <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7b9b      	ldrb	r3, [r3, #14]
 80020ba:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80020bc:	f107 020f 	add.w	r2, r7, #15
 80020c0:	2301      	movs	r3, #1
 80020c2:	211a      	movs	r1, #26
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff27 	bl	8001f18 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7bdb      	ldrb	r3, [r3, #15]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80020d4:	f107 020f 	add.w	r2, r7, #15
 80020d8:	2301      	movs	r3, #1
 80020da:	211b      	movs	r1, #27
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff1b 	bl	8001f18 <_icm_write_bytes>
     }


    tmp = 0x00;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 80020e6:	f107 020f 	add.w	r2, r7, #15
 80020ea:	2301      	movs	r3, #1
 80020ec:	216c      	movs	r1, #108	; 0x6c
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff12 	bl	8001f18 <_icm_write_bytes>


    return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8002112:	f107 0208 	add.w	r2, r7, #8
 8002116:	2306      	movs	r3, #6
 8002118:	213b      	movs	r1, #59	; 0x3b
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fec8 	bl	8001eb0 <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8002120:	7a3b      	ldrb	r3, [r7, #8]
 8002122:	b21a      	sxth	r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	801a      	strh	r2, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b21a      	sxth	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	801a      	strh	r2, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f9b3 2000 	ldrsh.w	r2, [r3]
 800213c:	7a7b      	ldrb	r3, [r7, #9]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21a      	sxth	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8002148:	7aba      	ldrb	r2, [r7, #10]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3302      	adds	r3, #2
 800214e:	b212      	sxth	r2, r2
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3302      	adds	r3, #2
 8002156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215a:	021a      	lsls	r2, r3, #8
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3302      	adds	r3, #2
 8002160:	b212      	sxth	r2, r2
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	3302      	adds	r3, #2
 8002168:	f9b3 1000 	ldrsh.w	r1, [r3]
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	b21a      	sxth	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	3302      	adds	r3, #2
 8002174:	430a      	orrs	r2, r1
 8002176:	b212      	sxth	r2, r2
 8002178:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 800217a:	7b3a      	ldrb	r2, [r7, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3304      	adds	r3, #4
 8002180:	b212      	sxth	r2, r2
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	3304      	adds	r3, #4
 8002188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218c:	021a      	lsls	r2, r3, #8
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3304      	adds	r3, #4
 8002192:	b212      	sxth	r2, r2
 8002194:	801a      	strh	r2, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3304      	adds	r3, #4
 800219a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800219e:	7b7b      	ldrb	r3, [r7, #13]
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	3304      	adds	r3, #4
 80021a6:	430a      	orrs	r2, r1
 80021a8:	b212      	sxth	r2, r2
 80021aa:	801a      	strh	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 80021c8:	f107 0208 	add.w	r2, r7, #8
 80021cc:	2306      	movs	r3, #6
 80021ce:	2143      	movs	r1, #67	; 0x43
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe6d 	bl	8001eb0 <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 80021d6:	7a3b      	ldrb	r3, [r7, #8]
 80021d8:	b21a      	sxth	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021f2:	7a7b      	ldrb	r3, [r7, #9]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 80021fe:	7aba      	ldrb	r2, [r7, #10]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3302      	adds	r3, #2
 8002204:	b212      	sxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3302      	adds	r3, #2
 800220c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002210:	021a      	lsls	r2, r3, #8
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	3302      	adds	r3, #2
 8002216:	b212      	sxth	r2, r2
 8002218:	801a      	strh	r2, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	3302      	adds	r3, #2
 800221e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	b21a      	sxth	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3302      	adds	r3, #2
 800222a:	430a      	orrs	r2, r1
 800222c:	b212      	sxth	r2, r2
 800222e:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8002230:	7b3a      	ldrb	r2, [r7, #12]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	3304      	adds	r3, #4
 8002236:	b212      	sxth	r2, r2
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3304      	adds	r3, #4
 800223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002242:	021a      	lsls	r2, r3, #8
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	3304      	adds	r3, #4
 8002248:	b212      	sxth	r2, r2
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3304      	adds	r3, #4
 8002250:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002254:	7b7b      	ldrb	r3, [r7, #13]
 8002256:	b21a      	sxth	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	3304      	adds	r3, #4
 800225c:	430a      	orrs	r2, r1
 800225e:	b212      	sxth	r2, r2
 8002260:	801a      	strh	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8002274:	2300      	movs	r3, #0
 8002276:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8002278:	f107 020c 	add.w	r2, r7, #12
 800227c:	2302      	movs	r3, #2
 800227e:	2141      	movs	r1, #65	; 0x41
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fe15 	bl	8001eb0 <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8002286:	7b3b      	ldrb	r3, [r7, #12]
 8002288:	b21a      	sxth	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	801a      	strh	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	801a      	strh	r2, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022a2:	7b7b      	ldrb	r3, [r7, #13]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	801a      	strh	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 80022c2:	f107 0316 	add.w	r3, r7, #22
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffce 	bl	800226a <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 80022ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022da:	4b61      	ldr	r3, [pc, #388]	; (8002460 <icm20601_read_data+0x1a8>)
 80022dc:	ed93 7a00 	vldr	s14, [r3]
 80022e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7b5b      	ldrb	r3, [r3, #13]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fd71 	bl	8001de8 <_get_accel_sensitivity>
 8002306:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	4619      	mov	r1, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fef4 	bl	80020fe <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 8002316:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002322:	edd7 7a07 	vldr	s15, [r7, #28]
 8002326:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800232a:	ee16 0a90 	vmov	r0, s13
 800232e:	f7fe f90b 	bl	8000548 <__aeabi_f2d>
 8002332:	a349      	add	r3, pc, #292	; (adr r3, 8002458 <icm20601_read_data+0x1a0>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fe f95e 	bl	80005f8 <__aeabi_dmul>
 800233c:	4603      	mov	r3, r0
 800233e:	460c      	mov	r4, r1
 8002340:	4619      	mov	r1, r3
 8002342:	4622      	mov	r2, r4
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	1d1c      	adds	r4, r3, #4
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	f7fe fc2c 	bl	8000ba8 <__aeabi_d2f>
 8002350:	4603      	mov	r3, r0
 8002352:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8002354:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002360:	edd7 7a07 	vldr	s15, [r7, #28]
 8002364:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002368:	ee16 0a90 	vmov	r0, s13
 800236c:	f7fe f8ec 	bl	8000548 <__aeabi_f2d>
 8002370:	a339      	add	r3, pc, #228	; (adr r3, 8002458 <icm20601_read_data+0x1a0>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe f93f 	bl	80005f8 <__aeabi_dmul>
 800237a:	4603      	mov	r3, r0
 800237c:	460c      	mov	r4, r1
 800237e:	4619      	mov	r1, r3
 8002380:	4622      	mov	r2, r4
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f103 0408 	add.w	r4, r3, #8
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	f7fe fc0c 	bl	8000ba8 <__aeabi_d2f>
 8002390:	4603      	mov	r3, r0
 8002392:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 8002394:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80023a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023a8:	ee16 0a90 	vmov	r0, s13
 80023ac:	f7fe f8cc 	bl	8000548 <__aeabi_f2d>
 80023b0:	a329      	add	r3, pc, #164	; (adr r3, 8002458 <icm20601_read_data+0x1a0>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f91f 	bl	80005f8 <__aeabi_dmul>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	4619      	mov	r1, r3
 80023c0:	4622      	mov	r2, r4
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f103 040c 	add.w	r4, r3, #12
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	f7fe fbec 	bl	8000ba8 <__aeabi_d2f>
 80023d0:	4603      	mov	r3, r0
 80023d2:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->accel_g);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7b5b      	ldrb	r3, [r3, #13]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fd30 	bl	8001e48 <_get_gyro_sensitivity>
 80023e8:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 80023ec:	f107 0308 	add.w	r3, r7, #8
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fede 	bl	80021b4 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 80023f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	3310      	adds	r3, #16
 8002408:	ed97 7a06 	vldr	s14, [r7, #24]
 800240c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002410:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 8002414:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	ed97 7a06 	vldr	s14, [r7, #24]
 8002428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242c:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8002430:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	3318      	adds	r3, #24
 8002440:	ed97 7a06 	vldr	s14, [r7, #24]
 8002444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002448:	edc3 7a00 	vstr	s15, [r3]
}
 800244c:	bf00      	nop
 800244e:	3724      	adds	r7, #36	; 0x24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	f3af 8000 	nop.w
 8002458:	51eb851f 	.word	0x51eb851f
 800245c:	40239eb8 	.word	0x40239eb8
 8002460:	200000c4 	.word	0x200000c4

08002464 <LED_is_busy>:
 *      Author: linus
 */

#include "devices/LED.h"

uint8_t LED_is_busy(struct LED_dev * dev){
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = HAL_GetTick();
 800246c:	f000 fdaa 	bl	8002fc4 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]
	if (tick > dev->last_call + dev->interval){
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4413      	add	r3, r2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	429a      	cmp	r2, r3
 8002480:	d904      	bls.n	800248c <LED_is_busy+0x28>
		dev->last_call = tick;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
		return 1;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LED_is_busy+0x2a>
	}
	return 0;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <toggle>:

void toggle(struct LED_dev * ctrl){
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	889b      	ldrh	r3, [r3, #4]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f001 fab4 	bl	8003a16 <HAL_GPIO_TogglePin>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <turn_on>:

void turn_on(struct LED_dev * ctrl){
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	889b      	ldrh	r3, [r3, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4619      	mov	r1, r3
 80024ca:	f001 fa8b 	bl	80039e4 <HAL_GPIO_WritePin>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <turn_off>:

void turn_off(struct LED_dev * ctrl){
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	889b      	ldrh	r3, [r3, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	f001 fa7b 	bl	80039e4 <HAL_GPIO_WritePin>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <ms5607_is_busy>:

#include <devices/MS5607.h>



uint8_t ms5607_is_busy(struct ms5607_dev * dev, uint32_t interval, uint8_t stage){
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	4613      	mov	r3, r2
 8002502:	71fb      	strb	r3, [r7, #7]
	uint32_t tick;
	tick = HAL_GetTick();
 8002504:	f000 fd5e 	bl	8002fc4 <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]
	if (tick >= dev->last_call + interval){
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4413      	add	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	d317      	bcc.n	8002548 <ms5607_is_busy+0x52>
		if (dev->last_stage + 1 == stage){
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	429a      	cmp	r2, r3
 8002524:	d110      	bne.n	8002548 <ms5607_is_busy+0x52>
			dev->last_call = tick;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	621a      	str	r2, [r3, #32]
			if (stage == MS_DATA_READOUT){
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d104      	bne.n	800253c <ms5607_is_busy+0x46>
				dev->last_stage = MS_IDLE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800253a:	e003      	b.n	8002544 <ms5607_is_busy+0x4e>
			} else {
				dev->last_stage = stage;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	79fa      	ldrb	r2, [r7, #7]
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
			return 1;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <ms5607_is_busy+0x54>
		}
	}
	return 0;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <ms5607_init>:

uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af02      	add	r7, sp, #8
 800255a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f001 fffd 	bl	8004560 <HAL_I2C_GetState>
 8002566:	4603      	mov	r3, r0
 8002568:	2b20      	cmp	r3, #32
 800256a:	d003      	beq.n	8002574 <ms5607_init+0x20>
	{
		printf("i2c1 not ready!\n");
 800256c:	4842      	ldr	r0, [pc, #264]	; (8002678 <ms5607_init+0x124>)
 800256e:	f005 fba3 	bl	8007cb8 <puts>
 8002572:	e002      	b.n	800257a <ms5607_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8002574:	4841      	ldr	r0, [pc, #260]	; (800267c <ms5607_init+0x128>)
 8002576:	f005 fb9f 	bl	8007cb8 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6858      	ldr	r0, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b299      	uxth	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	220a      	movs	r2, #10
 800258a:	f001 febb 	bl	8004304 <HAL_I2C_IsDeviceReady>
 800258e:	4603      	mov	r3, r0
 8002590:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d009      	beq.n	80025ac <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 8002598:	4839      	ldr	r0, [pc, #228]	; (8002680 <ms5607_init+0x12c>)
 800259a:	f005 fb8d 	bl	8007cb8 <puts>
		printf("Errorcode: %d\n", _ret);
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4838      	ldr	r0, [pc, #224]	; (8002684 <ms5607_init+0x130>)
 80025a4:	f005 fb14 	bl	8007bd0 <iprintf>
		return 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e061      	b.n	8002670 <ms5607_init+0x11c>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 80025ac:	231e      	movs	r3, #30
 80025ae:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6858      	ldr	r0, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b299      	uxth	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7a1b      	ldrb	r3, [r3, #8]
 80025be:	f107 0210 	add.w	r2, r7, #16
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2301      	movs	r3, #1
 80025c6:	f001 fb79 	bl	8003cbc <HAL_I2C_Master_Transmit>
 80025ca:	4603      	mov	r3, r0
 80025cc:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 80025ce:	2064      	movs	r0, #100	; 0x64
 80025d0:	f000 fd04 	bl	8002fdc <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add[1];
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 80025d4:	2301      	movs	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e043      	b.n	8002662 <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add[0] = 0b10100000;
 80025da:	23a0      	movs	r3, #160	; 0xa0
 80025dc:	733b      	strb	r3, [r7, #12]
		get_add[0] = get_add[0] + 2*i;
 80025de:	7b3a      	ldrb	r2, [r7, #12]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	733b      	strb	r3, [r7, #12]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, get_add, 1, dev->delay);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6858      	ldr	r0, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b299      	uxth	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7a1b      	ldrb	r3, [r3, #8]
 80025fc:	f107 020c 	add.w	r2, r7, #12
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2301      	movs	r3, #1
 8002604:	f001 fb5a 	bl	8003cbc <HAL_I2C_Master_Transmit>
 8002608:	4603      	mov	r3, r0
 800260a:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 800260c:	200f      	movs	r0, #15
 800260e:	f000 fce5 	bl	8002fdc <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6858      	ldr	r0, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b299      	uxth	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7a1b      	ldrb	r3, [r3, #8]
 8002620:	f107 0208 	add.w	r2, r7, #8
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2301      	movs	r3, #1
 8002628:	f001 fc46 	bl	8003eb8 <HAL_I2C_Master_Receive>
 800262c:	4603      	mov	r3, r0
 800262e:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8002630:	7a3b      	ldrb	r3, [r7, #8]
 8002632:	b29b      	uxth	r3, r3
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	b299      	uxth	r1, r3
 8002638:	7a7b      	ldrb	r3, [r7, #9]
 800263a:	b29a      	uxth	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3b01      	subs	r3, #1
 8002640:	430a      	orrs	r2, r1
 8002642:	b291      	uxth	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	460a      	mov	r2, r1
 800264e:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8002656:	480c      	ldr	r0, [pc, #48]	; (8002688 <ms5607_init+0x134>)
 8002658:	f005 fb2e 	bl	8007cb8 <puts>
	for(int i = 1; i < 7; i++){
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3301      	adds	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b06      	cmp	r3, #6
 8002666:	ddb8      	ble.n	80025da <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8002668:	4808      	ldr	r0, [pc, #32]	; (800268c <ms5607_init+0x138>)
 800266a:	f005 fb25 	bl	8007cb8 <puts>
	return 1;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	08009b9c 	.word	0x08009b9c
 800267c:	08009bac 	.word	0x08009bac
 8002680:	08009bbc 	.word	0x08009bbc
 8002684:	08009bcc 	.word	0x08009bcc
 8002688:	08009bdc 	.word	0x08009bdc
 800268c:	08009bf4 	.word	0x08009bf4

08002690 <ms5607_prep_temp>:

void ms5607_prep_temp(struct ms5607_dev * dev)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af02      	add	r7, sp, #8
 8002696:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];
	buf[0] = 0x44;
 8002698:	2344      	movs	r3, #68	; 0x44
 800269a:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6858      	ldr	r0, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b299      	uxth	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7a1b      	ldrb	r3, [r3, #8]
 80026aa:	f107 020c 	add.w	r2, r7, #12
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	f001 fb03 	bl	8003cbc <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af02      	add	r7, sp, #8
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 80026c8:	2300      	movs	r3, #0
 80026ca:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6858      	ldr	r0, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b299      	uxth	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7a1b      	ldrb	r3, [r3, #8]
 80026da:	f107 020c 	add.w	r2, r7, #12
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	f001 faeb 	bl	8003cbc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6858      	ldr	r0, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b299      	uxth	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7a1b      	ldrb	r3, [r3, #8]
 80026f4:	f107 020c 	add.w	r2, r7, #12
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2303      	movs	r3, #3
 80026fc:	f001 fbdc 	bl	8003eb8 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8002700:	7b3b      	ldrb	r3, [r7, #12]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	461a      	mov	r2, r3
 8002706:	7b7b      	ldrb	r3, [r7, #13]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	4313      	orrs	r3, r2
 800270c:	7bba      	ldrb	r2, [r7, #14]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8002714:	7b3a      	ldrb	r2, [r7, #12]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	7b7a      	ldrb	r2, [r7, #13]
 8002720:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3302      	adds	r3, #2
 8002726:	7bba      	ldrb	r2, [r7, #14]
 8002728:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 800272a:	2354      	movs	r3, #84	; 0x54
 800272c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6858      	ldr	r0, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b299      	uxth	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7a1b      	ldrb	r3, [r3, #8]
 800273c:	f107 020c 	add.w	r2, r7, #12
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2301      	movs	r3, #1
 8002744:	f001 faba 	bl	8003cbc <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af02      	add	r7, sp, #8
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6858      	ldr	r0, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b299      	uxth	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7a1b      	ldrb	r3, [r3, #8]
 800276c:	f107 020c 	add.w	r2, r7, #12
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	f001 faa2 	bl	8003cbc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6858      	ldr	r0, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b299      	uxth	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7a1b      	ldrb	r3, [r3, #8]
 8002786:	f107 020c 	add.w	r2, r7, #12
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2303      	movs	r3, #3
 800278e:	f001 fb93 	bl	8003eb8 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8002792:	7b3b      	ldrb	r3, [r7, #12]
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	461a      	mov	r2, r3
 8002798:	7b7b      	ldrb	r3, [r7, #13]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	4313      	orrs	r3, r2
 800279e:	7bba      	ldrb	r2, [r7, #14]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	3303      	adds	r3, #3
 80027aa:	7b3a      	ldrb	r2, [r7, #12]
 80027ac:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3304      	adds	r3, #4
 80027b2:	7b7a      	ldrb	r2, [r7, #13]
 80027b4:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3305      	adds	r3, #5
 80027ba:	7bba      	ldrb	r2, [r7, #14]
 80027bc:	701a      	strb	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 80027c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027cc:	b092      	sub	sp, #72	; 0x48
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	895b      	ldrh	r3, [r3, #10]
 80027da:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	899b      	ldrh	r3, [r3, #12]
 80027e0:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	89db      	ldrh	r3, [r3, #14]
 80027e6:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8a1b      	ldrh	r3, [r3, #16]
 80027ec:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8a5b      	ldrh	r3, [r3, #18]
 80027f2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8a9b      	ldrh	r3, [r3, #20]
 80027f8:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002810:	ee17 0a90 	vmov	r0, s15
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	4604      	mov	r4, r0
 800281a:	460d      	mov	r5, r1
 800281c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe80 	bl	8000524 <__aeabi_i2d>
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4bd9      	ldr	r3, [pc, #868]	; (8002b90 <ms5607_convert+0x3c8>)
 800282a:	f7fd fee5 	bl	80005f8 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fd27 	bl	8000288 <__aeabi_dsub>
 800283a:	4603      	mov	r3, r0
 800283c:	460c      	mov	r4, r1
 800283e:	4618      	mov	r0, r3
 8002840:	4621      	mov	r1, r4
 8002842:	f7fe f9b1 	bl	8000ba8 <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 800284a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe69 	bl	8000524 <__aeabi_i2d>
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800285a:	f7fd fecd 	bl	80005f8 <__aeabi_dmul>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	4625      	mov	r5, r4
 8002864:	461c      	mov	r4, r3
 8002866:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002870:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002878:	ee17 0a90 	vmov	r0, s15
 800287c:	f7fd fe64 	bl	8000548 <__aeabi_f2d>
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	4bc3      	ldr	r3, [pc, #780]	; (8002b94 <ms5607_convert+0x3cc>)
 8002886:	f7fd ffe1 	bl	800084c <__aeabi_ddiv>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4620      	mov	r0, r4
 8002890:	4629      	mov	r1, r5
 8002892:	f7fd fcfb 	bl	800028c <__adddf3>
 8002896:	4603      	mov	r3, r0
 8002898:	460c      	mov	r4, r1
 800289a:	4618      	mov	r0, r3
 800289c:	4621      	mov	r1, r4
 800289e:	f7fe f983 	bl	8000ba8 <__aeabi_d2f>
 80028a2:	4603      	mov	r3, r0
 80028a4:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 80028a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe3b 	bl	8000524 <__aeabi_i2d>
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	4bb9      	ldr	r3, [pc, #740]	; (8002b98 <ms5607_convert+0x3d0>)
 80028b4:	f7fd fea0 	bl	80005f8 <__aeabi_dmul>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	4625      	mov	r5, r4
 80028be:	461c      	mov	r4, r3
 80028c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	ee17 0a90 	vmov	r0, s15
 80028d6:	f7fd fe37 	bl	8000548 <__aeabi_f2d>
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	4baf      	ldr	r3, [pc, #700]	; (8002b9c <ms5607_convert+0x3d4>)
 80028e0:	f7fd ffb4 	bl	800084c <__aeabi_ddiv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fcce 	bl	800028c <__adddf3>
 80028f0:	4603      	mov	r3, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	4618      	mov	r0, r3
 80028f6:	4621      	mov	r1, r4
 80028f8:	f7fe f956 	bl	8000ba8 <__aeabi_d2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8002900:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800290a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	ee17 0a90 	vmov	r0, s15
 8002916:	f7fd fe17 	bl	8000548 <__aeabi_f2d>
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <ms5607_convert+0x3d8>)
 8002920:	f7fd ff94 	bl	800084c <__aeabi_ddiv>
 8002924:	4603      	mov	r3, r0
 8002926:	460c      	mov	r4, r1
 8002928:	4618      	mov	r0, r3
 800292a:	4621      	mov	r1, r4
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4b9c      	ldr	r3, [pc, #624]	; (8002ba4 <ms5607_convert+0x3dc>)
 8002932:	f7fd fcab 	bl	800028c <__adddf3>
 8002936:	4603      	mov	r3, r0
 8002938:	460c      	mov	r4, r1
 800293a:	4618      	mov	r0, r3
 800293c:	4621      	mov	r1, r4
 800293e:	f7fe f933 	bl	8000ba8 <__aeabi_d2f>
 8002942:	4603      	mov	r3, r0
 8002944:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002950:	edd7 7a07 	vldr	s15, [r7, #28]
 8002954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002958:	ee17 0a90 	vmov	r0, s15
 800295c:	f7fd fdf4 	bl	8000548 <__aeabi_f2d>
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b90      	ldr	r3, [pc, #576]	; (8002ba8 <ms5607_convert+0x3e0>)
 8002966:	f7fd ff71 	bl	800084c <__aeabi_ddiv>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	4625      	mov	r5, r4
 8002970:	461c      	mov	r4, r3
 8002972:	6a38      	ldr	r0, [r7, #32]
 8002974:	f7fd fde8 	bl	8000548 <__aeabi_f2d>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fc82 	bl	8000288 <__aeabi_dsub>
 8002984:	4603      	mov	r3, r0
 8002986:	460c      	mov	r4, r1
 8002988:	4618      	mov	r0, r3
 800298a:	4621      	mov	r1, r4
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b86      	ldr	r3, [pc, #536]	; (8002bac <ms5607_convert+0x3e4>)
 8002992:	f7fd ff5b 	bl	800084c <__aeabi_ddiv>
 8002996:	4603      	mov	r3, r0
 8002998:	460c      	mov	r4, r1
 800299a:	4618      	mov	r0, r3
 800299c:	4621      	mov	r1, r4
 800299e:	f7fe f903 	bl	8000ba8 <__aeabi_d2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 80029b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029bc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002bb0 <ms5607_convert+0x3e8>
 80029c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	f140 8104 	bpl.w	8002bd4 <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 80029cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d8:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002bb4 <ms5607_convert+0x3ec>
 80029dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 80029e4:	69b8      	ldr	r0, [r7, #24]
 80029e6:	f7fd fdaf 	bl	8000548 <__aeabi_f2d>
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <ms5607_convert+0x3dc>)
 80029f0:	f7fd fc4a 	bl	8000288 <__aeabi_dsub>
 80029f4:	4603      	mov	r3, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	4618      	mov	r0, r3
 80029fa:	4621      	mov	r1, r4
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	4b6d      	ldr	r3, [pc, #436]	; (8002bb8 <ms5607_convert+0x3f0>)
 8002a02:	f7fd fdf9 	bl	80005f8 <__aeabi_dmul>
 8002a06:	4603      	mov	r3, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	4625      	mov	r5, r4
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	69b8      	ldr	r0, [r7, #24]
 8002a10:	f7fd fd9a 	bl	8000548 <__aeabi_f2d>
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	4b62      	ldr	r3, [pc, #392]	; (8002ba4 <ms5607_convert+0x3dc>)
 8002a1a:	f7fd fc35 	bl	8000288 <__aeabi_dsub>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4620      	mov	r0, r4
 8002a24:	4629      	mov	r1, r5
 8002a26:	f7fd fde7 	bl	80005f8 <__aeabi_dmul>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	4621      	mov	r1, r4
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <ms5607_convert+0x3f4>)
 8002a38:	f7fd ff08 	bl	800084c <__aeabi_ddiv>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	4618      	mov	r0, r3
 8002a42:	4621      	mov	r1, r4
 8002a44:	f7fe f8b0 	bl	8000ba8 <__aeabi_d2f>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8002a4c:	69b8      	ldr	r0, [r7, #24]
 8002a4e:	f7fd fd7b 	bl	8000548 <__aeabi_f2d>
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <ms5607_convert+0x3dc>)
 8002a58:	f7fd fc16 	bl	8000288 <__aeabi_dsub>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	460c      	mov	r4, r1
 8002a60:	4618      	mov	r0, r3
 8002a62:	4621      	mov	r1, r4
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	f7fd fc10 	bl	800028c <__adddf3>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	4625      	mov	r5, r4
 8002a72:	461c      	mov	r4, r3
 8002a74:	69b8      	ldr	r0, [r7, #24]
 8002a76:	f7fd fd67 	bl	8000548 <__aeabi_f2d>
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <ms5607_convert+0x3dc>)
 8002a80:	f7fd fc02 	bl	8000288 <__aeabi_dsub>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fdb4 	bl	80005f8 <__aeabi_dmul>
 8002a90:	4603      	mov	r3, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	4618      	mov	r0, r3
 8002a96:	4621      	mov	r1, r4
 8002a98:	f7fe f886 	bl	8000ba8 <__aeabi_d2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8002aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aa4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002bc0 <ms5607_convert+0x3f8>
 8002aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab0:	f140 8090 	bpl.w	8002bd4 <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8002ab4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ab6:	f7fd fd47 	bl	8000548 <__aeabi_f2d>
 8002aba:	4604      	mov	r4, r0
 8002abc:	460d      	mov	r5, r1
 8002abe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002bc4 <ms5607_convert+0x3fc>
 8002ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aca:	ee17 0a90 	vmov	r0, s15
 8002ace:	f7fd fd3b 	bl	8000548 <__aeabi_f2d>
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <ms5607_convert+0x400>)
 8002ad8:	f7fd fd8e 	bl	80005f8 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	69b8      	ldr	r0, [r7, #24]
 8002ae6:	f7fd fd2f 	bl	8000548 <__aeabi_f2d>
 8002aea:	a327      	add	r3, pc, #156	; (adr r3, 8002b88 <ms5607_convert+0x3c0>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f7fd fbcc 	bl	800028c <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4640      	mov	r0, r8
 8002afa:	4649      	mov	r1, r9
 8002afc:	f7fd fd7c 	bl	80005f8 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f7fd fbc0 	bl	800028c <__adddf3>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	4618      	mov	r0, r3
 8002b12:	4621      	mov	r1, r4
 8002b14:	f7fe f848 	bl	8000ba8 <__aeabi_d2f>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8002b1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b1e:	f7fd fd13 	bl	8000548 <__aeabi_f2d>
 8002b22:	4604      	mov	r4, r0
 8002b24:	460d      	mov	r5, r1
 8002b26:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b2a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002bc4 <ms5607_convert+0x3fc>
 8002b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b32:	ee17 0a90 	vmov	r0, s15
 8002b36:	f7fd fd07 	bl	8000548 <__aeabi_f2d>
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <ms5607_convert+0x404>)
 8002b40:	f7fd fd5a 	bl	80005f8 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4690      	mov	r8, r2
 8002b4a:	4699      	mov	r9, r3
 8002b4c:	69b8      	ldr	r0, [r7, #24]
 8002b4e:	f7fd fcfb 	bl	8000548 <__aeabi_f2d>
 8002b52:	a30d      	add	r3, pc, #52	; (adr r3, 8002b88 <ms5607_convert+0x3c0>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fb98 	bl	800028c <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4640      	mov	r0, r8
 8002b62:	4649      	mov	r1, r9
 8002b64:	f7fd fd48 	bl	80005f8 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	4629      	mov	r1, r5
 8002b70:	f7fd fb8c 	bl	800028c <__adddf3>
 8002b74:	4603      	mov	r3, r0
 8002b76:	460c      	mov	r4, r1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	f7fe f814 	bl	8000ba8 <__aeabi_d2f>
 8002b80:	4603      	mov	r3, r0
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b84:	e026      	b.n	8002bd4 <ms5607_convert+0x40c>
 8002b86:	bf00      	nop
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40977000 	.word	0x40977000
 8002b90:	40700000 	.word	0x40700000
 8002b94:	40500000 	.word	0x40500000
 8002b98:	40f00000 	.word	0x40f00000
 8002b9c:	40600000 	.word	0x40600000
 8002ba0:	41600000 	.word	0x41600000
 8002ba4:	409f4000 	.word	0x409f4000
 8002ba8:	41400000 	.word	0x41400000
 8002bac:	40e00000 	.word	0x40e00000
 8002bb0:	44fa0000 	.word	0x44fa0000
 8002bb4:	4f000000 	.word	0x4f000000
 8002bb8:	404e8000 	.word	0x404e8000
 8002bbc:	40300000 	.word	0x40300000
 8002bc0:	c4bb8000 	.word	0xc4bb8000
 8002bc4:	44bb8000 	.word	0x44bb8000
 8002bc8:	402e0000 	.word	0x402e0000
 8002bcc:	40200000 	.word	0x40200000
 8002bd0:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8002bd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be0:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8002be4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002be8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf0:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8002bf4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bf8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c00:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8002c04:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c08:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8002bd0 <ms5607_convert+0x408>
 8002c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c10:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	ee17 0a90 	vmov	r0, s15
 8002c2a:	f7fd fc8d 	bl	8000548 <__aeabi_f2d>
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <ms5607_convert+0x4c4>)
 8002c34:	f7fd fe0a 	bl	800084c <__aeabi_ddiv>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	4625      	mov	r5, r4
 8002c3e:	461c      	mov	r4, r3
 8002c40:	6a38      	ldr	r0, [r7, #32]
 8002c42:	f7fd fc81 	bl	8000548 <__aeabi_f2d>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f7fd fb1b 	bl	8000288 <__aeabi_dsub>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	4618      	mov	r0, r3
 8002c58:	4621      	mov	r1, r4
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <ms5607_convert+0x4c8>)
 8002c60:	f7fd fdf4 	bl	800084c <__aeabi_ddiv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f7fd ff9c 	bl	8000ba8 <__aeabi_d2f>
 8002c70:	4603      	mov	r3, r0
 8002c72:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	601a      	str	r2, [r3, #0]
	*p = pressure;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 8002c80:	bf00      	nop
 8002c82:	3748      	adds	r7, #72	; 0x48
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c8a:	bf00      	nop
 8002c8c:	41400000 	.word	0x41400000
 8002c90:	40e00000 	.word	0x40e00000

08002c94 <sht31_is_busy>:
#include <string.h>
#include <stdio.h>



uint8_t sht31_is_busy(struct sht31_dev * dev){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = HAL_GetTick();
 8002c9c:	f000 f992 	bl	8002fc4 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]
	if (tick >= dev->last_call + SHT_SAMPLING){
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d304      	bcc.n	8002cba <sht31_is_busy+0x26>
		dev->last_call = tick;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	60da      	str	r2, [r3, #12]
		return 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <sht31_is_busy+0x28>
	}
	return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <sht31_init>:


int sht31_init(struct sht31_dev * dev)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fc45 	bl	8004560 <HAL_I2C_GetState>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d003      	beq.n	8002ce4 <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8002cdc:	481f      	ldr	r0, [pc, #124]	; (8002d5c <sht31_init+0x98>)
 8002cde:	f004 ffeb 	bl	8007cb8 <puts>
 8002ce2:	e002      	b.n	8002cea <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8002ce4:	481e      	ldr	r0, [pc, #120]	; (8002d60 <sht31_init+0x9c>)
 8002ce6:	f004 ffe7 	bl	8007cb8 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6858      	ldr	r0, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b299      	uxth	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7a1b      	ldrb	r3, [r3, #8]
 8002cf8:	220a      	movs	r2, #10
 8002cfa:	f001 fb03 	bl	8004304 <HAL_I2C_IsDeviceReady>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8002d08:	4816      	ldr	r0, [pc, #88]	; (8002d64 <sht31_init+0xa0>)
 8002d0a:	f004 ffd5 	bl	8007cb8 <puts>
		printf("Errorcode: %d\n", _ret);
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4815      	ldr	r0, [pc, #84]	; (8002d68 <sht31_init+0xa4>)
 8002d14:	f004 ff5c 	bl	8007bd0 <iprintf>
		return 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e01b      	b.n	8002d54 <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8002d1c:	4813      	ldr	r0, [pc, #76]	; (8002d6c <sht31_init+0xa8>)
 8002d1e:	f004 ffcb 	bl	8007cb8 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8002d22:	f242 4316 	movw	r3, #9238	; 0x2416
 8002d26:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8002d28:	89bb      	ldrh	r3, [r7, #12]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8002d32:	89bb      	ldrh	r3, [r7, #12]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6858      	ldr	r0, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b299      	uxth	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7a1b      	ldrb	r3, [r3, #8]
 8002d46:	f107 0208 	add.w	r2, r7, #8
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f000 ffb5 	bl	8003cbc <HAL_I2C_Master_Transmit>
	return 1;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	08009c08 	.word	0x08009c08
 8002d60:	08009c18 	.word	0x08009c18
 8002d64:	08009c28 	.word	0x08009c28
 8002d68:	08009c3c 	.word	0x08009c3c
 8002d6c:	08009c4c 	.word	0x08009c4c

08002d70 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b08d      	sub	sp, #52	; 0x34
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6858      	ldr	r0, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b299      	uxth	r1, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	7a1b      	ldrb	r3, [r3, #8]
 8002d8a:	f107 0214 	add.w	r2, r7, #20
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2306      	movs	r3, #6
 8002d92:	f001 f891 	bl	8003eb8 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8002d96:	7d3b      	ldrb	r3, [r7, #20]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	b21a      	sxth	r2, r3
 8002d9c:	7d7b      	ldrb	r3, [r7, #21]
 8002d9e:	b21b      	sxth	r3, r3
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b21b      	sxth	r3, r3
 8002da4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	7e3b      	ldrb	r3, [r7, #24]
 8002dae:	b21b      	sxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 8002db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc0:	ee17 0a90 	vmov	r0, s15
 8002dc4:	f7fd fbc0 	bl	8000548 <__aeabi_f2d>
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <sht31_read+0x128>)
 8002dce:	f7fd fc13 	bl	80005f8 <__aeabi_dmul>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4621      	mov	r1, r4
 8002dda:	a32d      	add	r3, pc, #180	; (adr r3, 8002e90 <sht31_read+0x120>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd fd34 	bl	800084c <__aeabi_ddiv>
 8002de4:	4603      	mov	r3, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	4618      	mov	r0, r3
 8002dea:	4621      	mov	r1, r4
 8002dec:	f7fd fedc 	bl	8000ba8 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8002df4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfe:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002e9c <sht31_read+0x12c>
 8002e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e06:	ee17 0a90 	vmov	r0, s15
 8002e0a:	f7fd fb9d 	bl	8000548 <__aeabi_f2d>
 8002e0e:	a320      	add	r3, pc, #128	; (adr r3, 8002e90 <sht31_read+0x120>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fd1a 	bl	800084c <__aeabi_ddiv>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4621      	mov	r1, r4
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <sht31_read+0x130>)
 8002e26:	f7fd fa2f 	bl	8000288 <__aeabi_dsub>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	4621      	mov	r1, r4
 8002e32:	f7fd feb9 	bl	8000ba8 <__aeabi_d2f>
 8002e36:	4603      	mov	r3, r0
 8002e38:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3304      	adds	r3, #4
 8002e44:	6a3a      	ldr	r2, [r7, #32]
 8002e46:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e4c:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3302      	adds	r3, #2
 8002e52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e54:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8002e56:	f242 4316 	movw	r3, #9238	; 0x2416
 8002e5a:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 8002e5c:	8b7b      	ldrh	r3, [r7, #26]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8002e66:	8b7b      	ldrh	r3, [r7, #26]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6858      	ldr	r0, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	b299      	uxth	r1, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	7a1b      	ldrb	r3, [r3, #8]
 8002e7a:	f107 0214 	add.w	r2, r7, #20
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2302      	movs	r3, #2
 8002e82:	f000 ff1b 	bl	8003cbc <HAL_I2C_Master_Transmit>

};
 8002e86:	bf00      	nop
 8002e88:	372c      	adds	r7, #44	; 0x2c
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	00000000 	.word	0x00000000
 8002e94:	40efffe0 	.word	0x40efffe0
 8002e98:	40590000 	.word	0x40590000
 8002e9c:	432f0000 	.word	0x432f0000
 8002ea0:	40468000 	.word	0x40468000

08002ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002edc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eaa:	e003      	b.n	8002eb4 <LoopCopyDataInit>

08002eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eb2:	3104      	adds	r1, #4

08002eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002eb4:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ebc:	d3f6      	bcc.n	8002eac <CopyDataInit>
  ldr  r2, =_sbss
 8002ebe:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ec0:	e002      	b.n	8002ec8 <LoopFillZerobss>

08002ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ec4:	f842 3b04 	str.w	r3, [r2], #4

08002ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ecc:	d3f9      	bcc.n	8002ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ece:	f7fe ff75 	bl	8001dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ed2:	f004 f9f5 	bl	80072c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed6:	f7fe faa3 	bl	8001420 <main>
  bx  lr    
 8002eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002edc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ee0:	08009f48 	.word	0x08009f48
  ldr  r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ee8:	200002a0 	.word	0x200002a0
  ldr  r2, =_sbss
 8002eec:	200002a0 	.word	0x200002a0
  ldr  r3, = _ebss
 8002ef0:	20000564 	.word	0x20000564

08002ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC_IRQHandler>
	...

08002ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <HAL_Init+0x40>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_Init+0x40>)
 8002f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <HAL_Init+0x40>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f20:	2003      	movs	r0, #3
 8002f22:	f000 fb91 	bl	8003648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 f808 	bl	8002f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f2c:	f7fe fe30 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023c00 	.word	0x40023c00

08002f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x54>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_InitTick+0x58>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fb9b 	bl	8003696 <HAL_SYSTICK_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00e      	b.n	8002f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d80a      	bhi.n	8002f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f70:	2200      	movs	r2, #0
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f78:	f000 fb71 	bl	800365e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f7c:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <HAL_InitTick+0x5c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200000c0 	.word	0x200000c0
 8002f94:	200000cc 	.word	0x200000cc
 8002f98:	200000c8 	.word	0x200000c8

08002f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x20>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	200000cc 	.word	0x200000cc
 8002fc0:	2000055c 	.word	0x2000055c

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	2000055c 	.word	0x2000055c

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff4:	d005      	beq.n	8003002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_Delay+0x40>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003002:	bf00      	nop
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d8f7      	bhi.n	8003004 <HAL_Delay+0x28>
  {
  }
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200000cc 	.word	0x200000cc

08003020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e033      	b.n	800309e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd ffd4 	bl	8000fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003066:	f023 0302 	bic.w	r3, r3, #2
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f93a 	bl	80032ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
 800308e:	e001      	b.n	8003094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1c>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e105      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x228>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b09      	cmp	r3, #9
 80030d2:	d925      	bls.n	8003120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68d9      	ldr	r1, [r3, #12]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	3b1e      	subs	r3, #30
 80030ea:	2207      	movs	r2, #7
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43da      	mvns	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	400a      	ands	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68d9      	ldr	r1, [r3, #12]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4618      	mov	r0, r3
 800310c:	4603      	mov	r3, r0
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4403      	add	r3, r0
 8003112:	3b1e      	subs	r3, #30
 8003114:	409a      	lsls	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	e022      	b.n	8003166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6919      	ldr	r1, [r3, #16]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	2207      	movs	r2, #7
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	4618      	mov	r0, r3
 8003156:	4603      	mov	r3, r0
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4403      	add	r3, r0
 800315c:	409a      	lsls	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d824      	bhi.n	80031b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	3b05      	subs	r3, #5
 8003180:	221f      	movs	r2, #31
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	400a      	ands	r2, r1
 800318e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	4618      	mov	r0, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	3b05      	subs	r3, #5
 80031aa:	fa00 f203 	lsl.w	r2, r0, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34
 80031b6:	e04c      	b.n	8003252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d824      	bhi.n	800320a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b23      	subs	r3, #35	; 0x23
 80031d2:	221f      	movs	r2, #31
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43da      	mvns	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	400a      	ands	r2, r1
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	4618      	mov	r0, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b23      	subs	r3, #35	; 0x23
 80031fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
 8003208:	e023      	b.n	8003252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	3b41      	subs	r3, #65	; 0x41
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b41      	subs	r3, #65	; 0x41
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_ADC_ConfigChannel+0x234>)
 8003254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_ADC_ConfigChannel+0x238>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d109      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1cc>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b12      	cmp	r3, #18
 8003266:	d105      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_ADC_ConfigChannel+0x238>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d123      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x21e>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b10      	cmp	r3, #16
 8003284:	d003      	beq.n	800328e <HAL_ADC_ConfigChannel+0x1e6>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b11      	cmp	r3, #17
 800328c:	d11b      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d111      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_ADC_ConfigChannel+0x23c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_ADC_ConfigChannel+0x240>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	0c9a      	lsrs	r2, r3, #18
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032b8:	e002      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f9      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40012300 	.word	0x40012300
 80032e0:	40012000 	.word	0x40012000
 80032e4:	200000c0 	.word	0x200000c0
 80032e8:	431bde83 	.word	0x431bde83

080032ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f4:	4b79      	ldr	r3, [pc, #484]	; (80034dc <ADC_Init+0x1f0>)
 80032f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <ADC_Init+0x1f4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	e00f      	b.n	80033ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0202 	bic.w	r2, r2, #2
 80033f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
 8003404:	005a      	lsls	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003426:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003436:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	3b01      	subs	r3, #1
 8003444:	035a      	lsls	r2, r3, #13
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	e007      	b.n	8003460 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	3b01      	subs	r3, #1
 800347c:	051a      	lsls	r2, r3, #20
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034a2:	025a      	lsls	r2, r3, #9
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	029a      	lsls	r2, r3, #10
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40012300 	.word	0x40012300
 80034e0:	0f000001 	.word	0x0f000001

080034e4 <__NVIC_SetPriorityGrouping>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800350c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003516:	4a04      	ldr	r2, [pc, #16]	; (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	60d3      	str	r3, [r2, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_GetPriorityGrouping>:
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <__NVIC_GetPriorityGrouping+0x18>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 0307 	and.w	r3, r3, #7
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_SetPriority>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <SysTick_Config>:
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d301      	bcc.n	800361a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003616:	2301      	movs	r3, #1
 8003618:	e00f      	b.n	800363a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <SysTick_Config+0x40>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003622:	210f      	movs	r1, #15
 8003624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003628:	f7ff ff8e 	bl	8003548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SysTick_Config+0x40>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SysTick_Config+0x40>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff47 	bl	80034e4 <__NVIC_SetPriorityGrouping>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003670:	f7ff ff5c 	bl	800352c <__NVIC_GetPriorityGrouping>
 8003674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff8e 	bl	800359c <NVIC_EncodePriority>
 8003680:	4602      	mov	r2, r0
 8003682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5d 	bl	8003548 <__NVIC_SetPriority>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ffb0 	bl	8003604 <SysTick_Config>
 80036a4:	4603      	mov	r3, r0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e16b      	b.n	80039a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 815a 	bne.w	800399e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d00b      	beq.n	800370a <HAL_GPIO_Init+0x5a>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036fe:	2b11      	cmp	r3, #17
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b12      	cmp	r3, #18
 8003708:	d130      	bne.n	800376c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003740:	2201      	movs	r2, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0201 	and.w	r2, r3, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0xfc>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b12      	cmp	r3, #18
 80037aa:	d123      	bne.n	80037f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80b4 	beq.w	800399e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b5f      	ldr	r3, [pc, #380]	; (80039b8 <HAL_GPIO_Init+0x308>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a5e      	ldr	r2, [pc, #376]	; (80039b8 <HAL_GPIO_Init+0x308>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b5c      	ldr	r3, [pc, #368]	; (80039b8 <HAL_GPIO_Init+0x308>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a5a      	ldr	r2, [pc, #360]	; (80039bc <HAL_GPIO_Init+0x30c>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_GPIO_Init+0x310>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d02b      	beq.n	80038d6 <HAL_GPIO_Init+0x226>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a50      	ldr	r2, [pc, #320]	; (80039c4 <HAL_GPIO_Init+0x314>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d025      	beq.n	80038d2 <HAL_GPIO_Init+0x222>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <HAL_GPIO_Init+0x318>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <HAL_GPIO_Init+0x21e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <HAL_GPIO_Init+0x31c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d019      	beq.n	80038ca <HAL_GPIO_Init+0x21a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_GPIO_Init+0x320>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0x216>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_GPIO_Init+0x324>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00d      	beq.n	80038c2 <HAL_GPIO_Init+0x212>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <HAL_GPIO_Init+0x328>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <HAL_GPIO_Init+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <HAL_GPIO_Init+0x32c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_GPIO_Init+0x20a>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e00e      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ba:	2308      	movs	r3, #8
 80038bc:	e00c      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038be:	2306      	movs	r3, #6
 80038c0:	e00a      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c2:	2305      	movs	r3, #5
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c6:	2304      	movs	r3, #4
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4934      	ldr	r1, [pc, #208]	; (80039bc <HAL_GPIO_Init+0x30c>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f6:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_GPIO_Init+0x330>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800391a:	4a31      	ldr	r2, [pc, #196]	; (80039e0 <HAL_GPIO_Init+0x330>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003920:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_GPIO_Init+0x330>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <HAL_GPIO_Init+0x330>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_GPIO_Init+0x330>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_GPIO_Init+0x330>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_GPIO_Init+0x330>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_GPIO_Init+0x330>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f ae90 	bls.w	80036cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	3724      	adds	r7, #36	; 0x24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40013800 	.word	0x40013800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40020400 	.word	0x40020400
 80039c8:	40020800 	.word	0x40020800
 80039cc:	40020c00 	.word	0x40020c00
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40021400 	.word	0x40021400
 80039d8:	40021800 	.word	0x40021800
 80039dc:	40021c00 	.word	0x40021c00
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
 80039f0:	4613      	mov	r3, r2
 80039f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f4:	787b      	ldrb	r3, [r7, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a00:	e003      	b.n	8003a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	041a      	lsls	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	619a      	str	r2, [r3, #24]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	401a      	ands	r2, r3
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d104      	bne.n	8003a3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	041a      	lsls	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e11f      	b.n	8003c9e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fc58 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f001 fca4 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8003ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a7b      	ldr	r2, [pc, #492]	; (8003ca8 <HAL_I2C_Init+0x25c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d807      	bhi.n	8003ad0 <HAL_I2C_Init+0x84>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a7a      	ldr	r2, [pc, #488]	; (8003cac <HAL_I2C_Init+0x260>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	bf94      	ite	ls
 8003ac8:	2301      	movls	r3, #1
 8003aca:	2300      	movhi	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e006      	b.n	8003ade <HAL_I2C_Init+0x92>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a77      	ldr	r2, [pc, #476]	; (8003cb0 <HAL_I2C_Init+0x264>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bf94      	ite	ls
 8003ad8:	2301      	movls	r3, #1
 8003ada:	2300      	movhi	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0db      	b.n	8003c9e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a72      	ldr	r2, [pc, #456]	; (8003cb4 <HAL_I2C_Init+0x268>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0c9b      	lsrs	r3, r3, #18
 8003af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <HAL_I2C_Init+0x25c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d802      	bhi.n	8003b20 <HAL_I2C_Init+0xd4>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	e009      	b.n	8003b34 <HAL_I2C_Init+0xe8>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	4a63      	ldr	r2, [pc, #396]	; (8003cb8 <HAL_I2C_Init+0x26c>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	3301      	adds	r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4956      	ldr	r1, [pc, #344]	; (8003ca8 <HAL_I2C_Init+0x25c>)
 8003b50:	428b      	cmp	r3, r1
 8003b52:	d80d      	bhi.n	8003b70 <HAL_I2C_Init+0x124>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e59      	subs	r1, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	bf38      	it	cc
 8003b6c:	2304      	movcc	r3, #4
 8003b6e:	e04f      	b.n	8003c10 <HAL_I2C_Init+0x1c4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d111      	bne.n	8003b9c <HAL_I2C_Init+0x150>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e012      	b.n	8003bc2 <HAL_I2C_Init+0x176>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1e58      	subs	r0, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	0099      	lsls	r1, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_Init+0x17e>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e022      	b.n	8003c10 <HAL_I2C_Init+0x1c4>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_I2C_Init+0x1a4>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1e58      	subs	r0, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	440b      	add	r3, r1
 8003be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bee:	e00f      	b.n	8003c10 <HAL_I2C_Init+0x1c4>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1e58      	subs	r0, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	0099      	lsls	r1, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c06:	3301      	adds	r3, #1
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	6809      	ldr	r1, [r1, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6911      	ldr	r1, [r2, #16]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68d2      	ldr	r2, [r2, #12]
 8003c4a:	4311      	orrs	r1, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	000186a0 	.word	0x000186a0
 8003cac:	001e847f 	.word	0x001e847f
 8003cb0:	003d08ff 	.word	0x003d08ff
 8003cb4:	431bde83 	.word	0x431bde83
 8003cb8:	10624dd3 	.word	0x10624dd3

08003cbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	460b      	mov	r3, r1
 8003cca:	817b      	strh	r3, [r7, #10]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff f978 	bl	8002fc4 <HAL_GetTick>
 8003cd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	f040 80e0 	bne.w	8003ea4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2319      	movs	r3, #25
 8003cea:	2201      	movs	r2, #1
 8003cec:	4970      	ldr	r1, [pc, #448]	; (8003eb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fd92 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e0d3      	b.n	8003ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_I2C_Master_Transmit+0x50>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0cc      	b.n	8003ea6 <HAL_I2C_Master_Transmit+0x1ea>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d007      	beq.n	8003d32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2221      	movs	r2, #33	; 0x21
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	893a      	ldrh	r2, [r7, #8]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a50      	ldr	r2, [pc, #320]	; (8003eb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d74:	8979      	ldrh	r1, [r7, #10]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fbfe 	bl	800457c <I2C_MasterRequestWrite>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e08d      	b.n	8003ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003da0:	e066      	b.n	8003e70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fe0c 	bl	80049c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d107      	bne.n	8003dca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e06b      	b.n	8003ea6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d11b      	bne.n	8003e44 <HAL_I2C_Master_Transmit+0x188>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	6a39      	ldr	r1, [r7, #32]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fdfc 	bl	8004a46 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d107      	bne.n	8003e6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e01a      	b.n	8003ea6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d194      	bne.n	8003da2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	00100002 	.word	0x00100002
 8003eb4:	ffff0000 	.word	0xffff0000

08003eb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08c      	sub	sp, #48	; 0x30
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	817b      	strh	r3, [r7, #10]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7ff f87a 	bl	8002fc4 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	f040 820b 	bne.w	80042f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2319      	movs	r3, #25
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	497c      	ldr	r1, [pc, #496]	; (80040dc <HAL_I2C_Master_Receive+0x224>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fc94 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e1fe      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_I2C_Master_Receive+0x50>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e1f7      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d007      	beq.n	8003f2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2222      	movs	r2, #34	; 0x22
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2210      	movs	r2, #16
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	893a      	ldrh	r2, [r7, #8]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a5c      	ldr	r2, [pc, #368]	; (80040e0 <HAL_I2C_Master_Receive+0x228>)
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fb82 	bl	8004680 <I2C_MasterRequestRead>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e1b8      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d113      	bne.n	8003fb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e18c      	b.n	80042d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	e16c      	b.n	80042d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d11b      	bne.n	8004036 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800401c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	e14c      	b.n	80042d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800405c:	e138      	b.n	80042d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	2b03      	cmp	r3, #3
 8004064:	f200 80f1 	bhi.w	800424a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406c:	2b01      	cmp	r3, #1
 800406e:	d123      	bne.n	80040b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fd27 	bl	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e139      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040b6:	e10b      	b.n	80042d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d14e      	bne.n	800415e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	2200      	movs	r2, #0
 80040c8:	4906      	ldr	r1, [pc, #24]	; (80040e4 <HAL_I2C_Master_Receive+0x22c>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fba4 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e10e      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
 80040da:	bf00      	nop
 80040dc:	00100002 	.word	0x00100002
 80040e0:	ffff0000 	.word	0xffff0000
 80040e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800415c:	e0b8      	b.n	80042d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	2200      	movs	r2, #0
 8004166:	4966      	ldr	r1, [pc, #408]	; (8004300 <HAL_I2C_Master_Receive+0x448>)
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fb55 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0bf      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	2200      	movs	r2, #0
 80041c2:	494f      	ldr	r1, [pc, #316]	; (8004300 <HAL_I2C_Master_Receive+0x448>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fb27 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e091      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004248:	e042      	b.n	80042d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fc3a 	bl	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e04c      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d118      	bne.n	80042d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f aec2 	bne.w	800405e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3728      	adds	r7, #40	; 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	00010004 	.word	0x00010004

08004304 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	460b      	mov	r3, r1
 8004312:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004314:	f7fe fe56 	bl	8002fc4 <HAL_GetTick>
 8004318:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800431a:	2301      	movs	r3, #1
 800431c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	f040 8110 	bne.w	800454c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2319      	movs	r3, #25
 8004332:	2201      	movs	r2, #1
 8004334:	4988      	ldr	r1, [pc, #544]	; (8004558 <HAL_I2C_IsDeviceReady+0x254>)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fa6e 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	e103      	b.n	800454e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_I2C_IsDeviceReady+0x50>
 8004350:	2302      	movs	r3, #2
 8004352:	e0fc      	b.n	800454e <HAL_I2C_IsDeviceReady+0x24a>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d007      	beq.n	800437a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004388:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2224      	movs	r2, #36	; 0x24
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a70      	ldr	r2, [pc, #448]	; (800455c <HAL_I2C_IsDeviceReady+0x258>)
 800439c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fa2c 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00c      	beq.n	80043e0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0b6      	b.n	800454e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043e0:	897b      	ldrh	r3, [r7, #10]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043ee:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043f0:	f7fe fde8 	bl	8002fc4 <HAL_GetTick>
 80043f4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b02      	cmp	r3, #2
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004424:	e025      	b.n	8004472 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe fdcd 	bl	8002fc4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <HAL_I2C_IsDeviceReady+0x138>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	22a0      	movs	r2, #160	; 0xa0
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2ba0      	cmp	r3, #160	; 0xa0
 800447c:	d005      	beq.n	800448a <HAL_I2C_IsDeviceReady+0x186>
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <HAL_I2C_IsDeviceReady+0x186>
 8004484:	7dbb      	ldrb	r3, [r7, #22]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0cd      	beq.n	8004426 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d129      	bne.n	80044f4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2319      	movs	r3, #25
 80044cc:	2201      	movs	r2, #1
 80044ce:	4922      	ldr	r1, [pc, #136]	; (8004558 <HAL_I2C_IsDeviceReady+0x254>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9a1 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e036      	b.n	800454e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e02c      	b.n	800454e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004502:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800450c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2319      	movs	r3, #25
 8004514:	2201      	movs	r2, #1
 8004516:	4910      	ldr	r1, [pc, #64]	; (8004558 <HAL_I2C_IsDeviceReady+0x254>)
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f97d 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e012      	b.n	800454e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3301      	adds	r3, #1
 800452c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	f4ff af33 	bcc.w	800439e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	00100002 	.word	0x00100002
 800455c:	ffff0000 	.word	0xffff0000

08004560 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	b2db      	uxtb	r3, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	460b      	mov	r3, r1
 800458a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d006      	beq.n	80045a6 <I2C_MasterRequestWrite+0x2a>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d003      	beq.n	80045a6 <I2C_MasterRequestWrite+0x2a>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a4:	d108      	bne.n	80045b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e00b      	b.n	80045d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	2b12      	cmp	r3, #18
 80045be:	d107      	bne.n	80045d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f91b 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e035      	b.n	800466e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800460a:	d108      	bne.n	800461e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460c:	897b      	ldrh	r3, [r7, #10]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800461a:	611a      	str	r2, [r3, #16]
 800461c:	e01b      	b.n	8004656 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	11db      	asrs	r3, r3, #7
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 0306 	and.w	r3, r3, #6
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f063 030f 	orn	r3, r3, #15
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	490f      	ldr	r1, [pc, #60]	; (8004678 <I2C_MasterRequestWrite+0xfc>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f942 	bl	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e010      	b.n	800466e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800464c:	897b      	ldrh	r3, [r7, #10]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4908      	ldr	r1, [pc, #32]	; (800467c <I2C_MasterRequestWrite+0x100>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f932 	bl	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	00010008 	.word	0x00010008
 800467c:	00010002 	.word	0x00010002

08004680 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	460b      	mov	r3, r1
 800468e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d006      	beq.n	80046ba <I2C_MasterRequestRead+0x3a>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d003      	beq.n	80046ba <I2C_MasterRequestRead+0x3a>
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046b8:	d108      	bne.n	80046cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e00b      	b.n	80046e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	2b11      	cmp	r3, #17
 80046d2:	d107      	bne.n	80046e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f891 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e078      	b.n	8004808 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800471e:	d108      	bne.n	8004732 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004720:	897b      	ldrh	r3, [r7, #10]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]
 8004730:	e05e      	b.n	80047f0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	11db      	asrs	r3, r3, #7
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 0306 	and.w	r3, r3, #6
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f063 030f 	orn	r3, r3, #15
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	4930      	ldr	r1, [pc, #192]	; (8004810 <I2C_MasterRequestRead+0x190>)
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f8b8 	bl	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e053      	b.n	8004808 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4929      	ldr	r1, [pc, #164]	; (8004814 <I2C_MasterRequestRead+0x194>)
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f8a8 	bl	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e043      	b.n	8004808 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f830 	bl	8004818 <I2C_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e017      	b.n	8004808 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047d8:	897b      	ldrh	r3, [r7, #10]
 80047da:	11db      	asrs	r3, r3, #7
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0306 	and.w	r3, r3, #6
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f063 030e 	orn	r3, r3, #14
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4907      	ldr	r1, [pc, #28]	; (8004814 <I2C_MasterRequestRead+0x194>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f865 	bl	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	00010008 	.word	0x00010008
 8004814:	00010002 	.word	0x00010002

08004818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004828:	e025      	b.n	8004876 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004830:	d021      	beq.n	8004876 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004832:	f7fe fbc7 	bl	8002fc4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d116      	bne.n	8004876 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e023      	b.n	80048be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10d      	bne.n	800489c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	e00c      	b.n	80048b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	43da      	mvns	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d0b6      	beq.n	800482a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d4:	e051      	b.n	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e4:	d123      	bne.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f043 0204 	orr.w	r2, r3, #4
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e046      	b.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004934:	d021      	beq.n	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7fe fb45 	bl	8002fc4 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d116      	bne.n	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e020      	b.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10c      	bne.n	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	43da      	mvns	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e00b      	b.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	43da      	mvns	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d18d      	bne.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d0:	e02d      	b.n	8004a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f8ce 	bl	8004b74 <I2C_IsAcknowledgeFailed>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e02d      	b.n	8004a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e8:	d021      	beq.n	8004a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ea:	f7fe faeb 	bl	8002fc4 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d302      	bcc.n	8004a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d116      	bne.n	8004a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e007      	b.n	8004a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d1ca      	bne.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a52:	e02d      	b.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f88d 	bl	8004b74 <I2C_IsAcknowledgeFailed>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e02d      	b.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a6a:	d021      	beq.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7fe faaa 	bl	8002fc4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d116      	bne.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e007      	b.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d1ca      	bne.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ad4:	e042      	b.n	8004b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d119      	bne.n	8004b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0210 	mvn.w	r2, #16
 8004aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e029      	b.n	8004b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b18:	f7fe fa54 	bl	8002fc4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d116      	bne.n	8004b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e007      	b.n	8004b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d1b5      	bne.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	d11b      	bne.n	8004bc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f043 0204 	orr.w	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e25b      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d075      	beq.n	8004cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bf2:	4ba3      	ldr	r3, [pc, #652]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d00c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfe:	4ba0      	ldr	r3, [pc, #640]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d112      	bne.n	8004c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0a:	4b9d      	ldr	r3, [pc, #628]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c16:	d10b      	bne.n	8004c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	4b99      	ldr	r3, [pc, #612]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d05b      	beq.n	8004cdc <HAL_RCC_OscConfig+0x108>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d157      	bne.n	8004cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e236      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d106      	bne.n	8004c48 <HAL_RCC_OscConfig+0x74>
 8004c3a:	4b91      	ldr	r3, [pc, #580]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a90      	ldr	r2, [pc, #576]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e01d      	b.n	8004c84 <HAL_RCC_OscConfig+0xb0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x98>
 8004c52:	4b8b      	ldr	r3, [pc, #556]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a8a      	ldr	r2, [pc, #552]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a87      	ldr	r2, [pc, #540]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCC_OscConfig+0xb0>
 8004c6c:	4b84      	ldr	r3, [pc, #528]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a83      	ldr	r2, [pc, #524]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a80      	ldr	r2, [pc, #512]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d013      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fe f99a 	bl	8002fc4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fe f996 	bl	8002fc4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1fb      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0xc0>
 8004cb2:	e014      	b.n	8004cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fe f986 	bl	8002fc4 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fe f982 	bl	8002fc4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e1e7      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	4b6c      	ldr	r3, [pc, #432]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0xe8>
 8004cda:	e000      	b.n	8004cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d063      	beq.n	8004db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cea:	4b65      	ldr	r3, [pc, #404]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf6:	4b62      	ldr	r3, [pc, #392]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d11c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d02:	4b5f      	ldr	r3, [pc, #380]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d116      	bne.n	8004d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0e:	4b5c      	ldr	r3, [pc, #368]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_RCC_OscConfig+0x152>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d001      	beq.n	8004d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e1bb      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d26:	4b56      	ldr	r3, [pc, #344]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4952      	ldr	r1, [pc, #328]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3a:	e03a      	b.n	8004db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d44:	4b4f      	ldr	r3, [pc, #316]	; (8004e84 <HAL_RCC_OscConfig+0x2b0>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7fe f93b 	bl	8002fc4 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d52:	f7fe f937 	bl	8002fc4 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e19c      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d64:	4b46      	ldr	r3, [pc, #280]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	4b43      	ldr	r3, [pc, #268]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4940      	ldr	r1, [pc, #256]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]
 8004d84:	e015      	b.n	8004db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d86:	4b3f      	ldr	r3, [pc, #252]	; (8004e84 <HAL_RCC_OscConfig+0x2b0>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fe f91a 	bl	8002fc4 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d94:	f7fe f916 	bl	8002fc4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e17b      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d030      	beq.n	8004e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d016      	beq.n	8004df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dc6:	4b30      	ldr	r3, [pc, #192]	; (8004e88 <HAL_RCC_OscConfig+0x2b4>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fe f8fa 	bl	8002fc4 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd4:	f7fe f8f6 	bl	8002fc4 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e15b      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de6:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x200>
 8004df2:	e015      	b.n	8004e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <HAL_RCC_OscConfig+0x2b4>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfa:	f7fe f8e3 	bl	8002fc4 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e02:	f7fe f8df 	bl	8002fc4 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e144      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80a0 	beq.w	8004f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_OscConfig+0x2b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d121      	bne.n	8004eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_RCC_OscConfig+0x2b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a07      	ldr	r2, [pc, #28]	; (8004e8c <HAL_RCC_OscConfig+0x2b8>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e76:	f7fe f8a5 	bl	8002fc4 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7c:	e011      	b.n	8004ea2 <HAL_RCC_OscConfig+0x2ce>
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
 8004e84:	42470000 	.word	0x42470000
 8004e88:	42470e80 	.word	0x42470e80
 8004e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e90:	f7fe f898 	bl	8002fc4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0fd      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	4b81      	ldr	r3, [pc, #516]	; (80050a8 <HAL_RCC_OscConfig+0x4d4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x2f0>
 8004eb6:	4b7d      	ldr	r3, [pc, #500]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	4a7c      	ldr	r2, [pc, #496]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec2:	e01c      	b.n	8004efe <HAL_RCC_OscConfig+0x32a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b05      	cmp	r3, #5
 8004eca:	d10c      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x312>
 8004ecc:	4b77      	ldr	r3, [pc, #476]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	4a76      	ldr	r2, [pc, #472]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004ed2:	f043 0304 	orr.w	r3, r3, #4
 8004ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed8:	4b74      	ldr	r3, [pc, #464]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	4a73      	ldr	r2, [pc, #460]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee4:	e00b      	b.n	8004efe <HAL_RCC_OscConfig+0x32a>
 8004ee6:	4b71      	ldr	r3, [pc, #452]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a70      	ldr	r2, [pc, #448]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef2:	4b6e      	ldr	r3, [pc, #440]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a6d      	ldr	r2, [pc, #436]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d015      	beq.n	8004f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f06:	f7fe f85d 	bl	8002fc4 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0c:	e00a      	b.n	8004f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0e:	f7fe f859 	bl	8002fc4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0bc      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f24:	4b61      	ldr	r3, [pc, #388]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ee      	beq.n	8004f0e <HAL_RCC_OscConfig+0x33a>
 8004f30:	e014      	b.n	8004f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f32:	f7fe f847 	bl	8002fc4 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f38:	e00a      	b.n	8004f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fe f843 	bl	8002fc4 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e0a6      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f50:	4b56      	ldr	r3, [pc, #344]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1ee      	bne.n	8004f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f62:	4b52      	ldr	r3, [pc, #328]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	4a51      	ldr	r2, [pc, #324]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8092 	beq.w	800509c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f78:	4b4c      	ldr	r3, [pc, #304]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d05c      	beq.n	800503e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d141      	bne.n	8005010 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8c:	4b48      	ldr	r3, [pc, #288]	; (80050b0 <HAL_RCC_OscConfig+0x4dc>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f92:	f7fe f817 	bl	8002fc4 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9a:	f7fe f813 	bl	8002fc4 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e078      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fac:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f0      	bne.n	8004f9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	019b      	lsls	r3, r3, #6
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	4933      	ldr	r1, [pc, #204]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe2:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCC_OscConfig+0x4dc>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe8:	f7fd ffec 	bl	8002fc4 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fd ffe8 	bl	8002fc4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e04d      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005002:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x41c>
 800500e:	e045      	b.n	800509c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCC_OscConfig+0x4dc>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fd ffd5 	bl	8002fc4 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501e:	f7fd ffd1 	bl	8002fc4 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e036      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005030:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x44a>
 800503c:	e02e      	b.n	800509c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e029      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <HAL_RCC_OscConfig+0x4d8>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	429a      	cmp	r2, r3
 800505c:	d11c      	bne.n	8005098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d115      	bne.n	8005098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005072:	4013      	ands	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005078:	4293      	cmp	r3, r2
 800507a:	d10d      	bne.n	8005098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d106      	bne.n	8005098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40007000 	.word	0x40007000
 80050ac:	40023800 	.word	0x40023800
 80050b0:	42470060 	.word	0x42470060

080050b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0cc      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c8:	4b68      	ldr	r3, [pc, #416]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90c      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d6:	4b65      	ldr	r3, [pc, #404]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b63      	ldr	r3, [pc, #396]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0b8      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005108:	4b59      	ldr	r3, [pc, #356]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a58      	ldr	r2, [pc, #352]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005120:	4b53      	ldr	r3, [pc, #332]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a52      	ldr	r2, [pc, #328]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800512a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512c:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	494d      	ldr	r1, [pc, #308]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d044      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d119      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d003      	beq.n	8005172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800516e:	2b03      	cmp	r3, #3
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005172:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e06f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005182:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e067      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005192:	4b37      	ldr	r3, [pc, #220]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 0203 	bic.w	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4934      	ldr	r1, [pc, #208]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051a4:	f7fd ff0e 	bl	8002fc4 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ac:	f7fd ff0a 	bl	8002fc4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e04f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c2:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 020c 	and.w	r2, r3, #12
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d1eb      	bne.n	80051ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051d4:	4b25      	ldr	r3, [pc, #148]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d20c      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b22      	ldr	r3, [pc, #136]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e032      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4916      	ldr	r1, [pc, #88]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	490e      	ldr	r1, [pc, #56]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800523a:	f000 f821 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800523e:	4601      	mov	r1, r0
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	5cd3      	ldrb	r3, [r2, r3]
 800524e:	fa21 f303 	lsr.w	r3, r1, r3
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fd fe6e 	bl	8002f3c <HAL_InitTick>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023c00 	.word	0x40023c00
 8005270:	40023800 	.word	0x40023800
 8005274:	08009c60 	.word	0x08009c60
 8005278:	200000c0 	.word	0x200000c0
 800527c:	200000c8 	.word	0x200000c8

08005280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	2300      	movs	r3, #0
 8005290:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005296:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d007      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x32>
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d008      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x38>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 808d 	bne.w	80053c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b4b      	ldr	r3, [pc, #300]	; (80053dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80052ae:	60bb      	str	r3, [r7, #8]
       break;
 80052b0:	e08c      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052b2:	4b4b      	ldr	r3, [pc, #300]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80052b4:	60bb      	str	r3, [r7, #8]
      break;
 80052b6:	e089      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b8:	4b47      	ldr	r3, [pc, #284]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c2:	4b45      	ldr	r3, [pc, #276]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d023      	beq.n	8005316 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ce:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	f04f 0400 	mov.w	r4, #0
 80052d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	ea03 0501 	and.w	r5, r3, r1
 80052e4:	ea04 0602 	and.w	r6, r4, r2
 80052e8:	4a3d      	ldr	r2, [pc, #244]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80052ea:	fb02 f106 	mul.w	r1, r2, r6
 80052ee:	2200      	movs	r2, #0
 80052f0:	fb02 f205 	mul.w	r2, r2, r5
 80052f4:	440a      	add	r2, r1
 80052f6:	493a      	ldr	r1, [pc, #232]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80052f8:	fba5 0101 	umull	r0, r1, r5, r1
 80052fc:	1853      	adds	r3, r2, r1
 80052fe:	4619      	mov	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f04f 0400 	mov.w	r4, #0
 8005306:	461a      	mov	r2, r3
 8005308:	4623      	mov	r3, r4
 800530a:	f7fb fc9d 	bl	8000c48 <__aeabi_uldivmod>
 800530e:	4603      	mov	r3, r0
 8005310:	460c      	mov	r4, r1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e049      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005316:	4b30      	ldr	r3, [pc, #192]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	099b      	lsrs	r3, r3, #6
 800531c:	f04f 0400 	mov.w	r4, #0
 8005320:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	ea03 0501 	and.w	r5, r3, r1
 800532c:	ea04 0602 	and.w	r6, r4, r2
 8005330:	4629      	mov	r1, r5
 8005332:	4632      	mov	r2, r6
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	0154      	lsls	r4, r2, #5
 800533e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005342:	014b      	lsls	r3, r1, #5
 8005344:	4619      	mov	r1, r3
 8005346:	4622      	mov	r2, r4
 8005348:	1b49      	subs	r1, r1, r5
 800534a:	eb62 0206 	sbc.w	r2, r2, r6
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	f04f 0400 	mov.w	r4, #0
 8005356:	0194      	lsls	r4, r2, #6
 8005358:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800535c:	018b      	lsls	r3, r1, #6
 800535e:	1a5b      	subs	r3, r3, r1
 8005360:	eb64 0402 	sbc.w	r4, r4, r2
 8005364:	f04f 0100 	mov.w	r1, #0
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	00e2      	lsls	r2, r4, #3
 800536e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005372:	00d9      	lsls	r1, r3, #3
 8005374:	460b      	mov	r3, r1
 8005376:	4614      	mov	r4, r2
 8005378:	195b      	adds	r3, r3, r5
 800537a:	eb44 0406 	adc.w	r4, r4, r6
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	02a2      	lsls	r2, r4, #10
 8005388:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800538c:	0299      	lsls	r1, r3, #10
 800538e:	460b      	mov	r3, r1
 8005390:	4614      	mov	r4, r2
 8005392:	4618      	mov	r0, r3
 8005394:	4621      	mov	r1, r4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	f7fb fc52 	bl	8000c48 <__aeabi_uldivmod>
 80053a4:	4603      	mov	r3, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	0c1b      	lsrs	r3, r3, #16
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	3301      	adds	r3, #1
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	60bb      	str	r3, [r7, #8]
      break;
 80053c4:	e002      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80053c8:	60bb      	str	r3, [r7, #8]
      break;
 80053ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053cc:	68bb      	ldr	r3, [r7, #8]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	017d7840 	.word	0x017d7840

080053e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	200000c0 	.word	0x200000c0

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff fff0 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 8005404:	4601      	mov	r1, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4a03      	ldr	r2, [pc, #12]	; (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5cd3      	ldrb	r3, [r2, r3]
 8005414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	08009c70 	.word	0x08009c70

08005424 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e022      	b.n	800547c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fc fa4f 	bl	80018ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2203      	movs	r2, #3
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f814 	bl	8005484 <HAL_SD_InitCard>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e00a      	b.n	800547c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b08e      	sub	sp, #56	; 0x38
 8005488:	af04      	add	r7, sp, #16
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80054a0:	2376      	movs	r3, #118	; 0x76
 80054a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681d      	ldr	r5, [r3, #0]
 80054a8:	466c      	mov	r4, sp
 80054aa:	f107 0314 	add.w	r3, r7, #20
 80054ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054bc:	4628      	mov	r0, r5
 80054be:	f001 fa71 	bl	80069a4 <SDIO_Init>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80054c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e031      	b.n	8005538 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <HAL_SD_InitCard+0xbc>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fa98 	bl	8006a14 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80054e4:	4b16      	ldr	r3, [pc, #88]	; (8005540 <HAL_SD_InitCard+0xbc>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fb18 	bl	8005b20 <SD_PowerON>
 80054f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e013      	b.n	8005538 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fa37 	bl	8005984 <SD_InitCard>
 8005516:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3728      	adds	r7, #40	; 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bdb0      	pop	{r4, r5, r7, pc}
 8005540:	422580a0 	.word	0x422580a0

08005544 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005552:	0f9b      	lsrs	r3, r3, #30
 8005554:	b2da      	uxtb	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800555e:	0e9b      	lsrs	r3, r3, #26
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	b2da      	uxtb	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	b2da      	uxtb	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	b2da      	uxtb	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	b2da      	uxtb	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559a:	b2da      	uxtb	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a4:	0d1b      	lsrs	r3, r3, #20
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c2:	0bdb      	lsrs	r3, r3, #15
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055d4:	0b9b      	lsrs	r3, r3, #14
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e6:	0b5b      	lsrs	r3, r3, #13
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f8:	0b1b      	lsrs	r3, r3, #12
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005610:	2b00      	cmp	r3, #0
 8005612:	d163      	bne.n	80056dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005618:	009a      	lsls	r2, r3, #2
 800561a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005624:	0f92      	lsrs	r2, r2, #30
 8005626:	431a      	orrs	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005630:	0edb      	lsrs	r3, r3, #27
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	b2da      	uxtb	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005642:	0e1b      	lsrs	r3, r3, #24
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	b2da      	uxtb	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005654:	0d5b      	lsrs	r3, r3, #21
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	b2da      	uxtb	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005666:	0c9b      	lsrs	r3, r3, #18
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	b2da      	uxtb	r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005678:	0bdb      	lsrs	r3, r3, #15
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	b2da      	uxtb	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7e1b      	ldrb	r3, [r3, #24]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	3302      	adds	r3, #2
 800569c:	2201      	movs	r2, #1
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80056a6:	fb02 f203 	mul.w	r2, r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	7a1b      	ldrb	r3, [r3, #8]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	2201      	movs	r2, #1
 80056ba:	409a      	lsls	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80056c8:	0a52      	lsrs	r2, r2, #9
 80056ca:	fb02 f203 	mul.w	r2, r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d8:	661a      	str	r2, [r3, #96]	; 0x60
 80056da:	e031      	b.n	8005740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d11d      	bne.n	8005720 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	431a      	orrs	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	3301      	adds	r3, #1
 8005700:	029a      	lsls	r2, r3, #10
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005714:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	661a      	str	r2, [r3, #96]	; 0x60
 800571e:	e00f      	b.n	8005740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a58      	ldr	r2, [pc, #352]	; (8005888 <HAL_SD_GetCardCSD+0x344>)
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e09d      	b.n	800587c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005744:	0b9b      	lsrs	r3, r3, #14
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	b2da      	uxtb	r2, r3
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	09db      	lsrs	r3, r3, #7
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575e:	b2da      	uxtb	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576e:	b2da      	uxtb	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	0fdb      	lsrs	r3, r3, #31
 800577a:	b2da      	uxtb	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	0f5b      	lsrs	r3, r3, #29
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	b2da      	uxtb	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	0e9b      	lsrs	r3, r3, #26
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	0d9b      	lsrs	r3, r3, #22
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	0d5b      	lsrs	r3, r3, #21
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	0bdb      	lsrs	r3, r3, #15
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	0b9b      	lsrs	r3, r3, #14
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	b2da      	uxtb	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	0b5b      	lsrs	r3, r3, #13
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	0b1b      	lsrs	r3, r3, #12
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	b2da      	uxtb	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	0a9b      	lsrs	r3, r3, #10
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	b2da      	uxtb	r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	b2da      	uxtb	r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586a:	b2da      	uxtb	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	004005ff 	.word	0x004005ff

0800588c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800588c:	b5b0      	push	{r4, r5, r7, lr}
 800588e:	b08e      	sub	sp, #56	; 0x38
 8005890:	af04      	add	r7, sp, #16
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2203      	movs	r2, #3
 800589a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d02e      	beq.n	8005904 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ac:	d106      	bne.n	80058bc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
 80058ba:	e029      	b.n	8005910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c2:	d10a      	bne.n	80058da <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f9b9 	bl	8005c3c <SD_WideBus_Enable>
 80058ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
 80058d8:	e01a      	b.n	8005910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9f6 	bl	8005cd2 <SD_WideBus_Disable>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
 80058f4:	e00c      	b.n	8005910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
 8005902:	e005      	b.n	8005910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e024      	b.n	8005976 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	466c      	mov	r4, sp
 8005954:	f107 0318 	add.w	r3, r7, #24
 8005958:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800595c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005966:	4628      	mov	r0, r5
 8005968:	f001 f81c 	bl	80069a4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3728      	adds	r7, #40	; 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bdb0      	pop	{r4, r5, r7, pc}
 800597e:	bf00      	nop
 8005980:	004005ff 	.word	0x004005ff

08005984 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005984:	b5b0      	push	{r4, r5, r7, lr}
 8005986:	b094      	sub	sp, #80	; 0x50
 8005988:	af04      	add	r7, sp, #16
 800598a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800598c:	2301      	movs	r3, #1
 800598e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f001 f84c 	bl	8006a32 <SDIO_GetPowerState>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059a4:	e0b7      	b.n	8005b16 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d02f      	beq.n	8005a0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f9cb 	bl	8006d4e <SDMMC_CmdSendCID>
 80059b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	e0a8      	b.n	8005b16 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f876 	bl	8006abc <SDIO_GetResponse>
 80059d0:	4602      	mov	r2, r0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2104      	movs	r1, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 f86d 	bl	8006abc <SDIO_GetResponse>
 80059e2:	4602      	mov	r2, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2108      	movs	r1, #8
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 f864 	bl	8006abc <SDIO_GetResponse>
 80059f4:	4602      	mov	r2, r0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	210c      	movs	r1, #12
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 f85b 	bl	8006abc <SDIO_GetResponse>
 8005a06:	4602      	mov	r2, r0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d00d      	beq.n	8005a32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f107 020e 	add.w	r2, r7, #14
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f9d1 	bl	8006dc8 <SDMMC_CmdSetRelAdd>
 8005a26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <SD_InitCard+0xae>
    {
      return errorstate;
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	e071      	b.n	8005b16 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d036      	beq.n	8005aa8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a3a:	89fb      	ldrh	r3, [r7, #14]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f001 f99b 	bl	8006d8a <SDMMC_CmdSendCSD>
 8005a54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	e05a      	b.n	8005b16 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 f828 	bl	8006abc <SDIO_GetResponse>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2104      	movs	r1, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 f81f 	bl	8006abc <SDIO_GetResponse>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2108      	movs	r1, #8
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f816 	bl	8006abc <SDIO_GetResponse>
 8005a90:	4602      	mov	r2, r0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	210c      	movs	r1, #12
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f80d 	bl	8006abc <SDIO_GetResponse>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2104      	movs	r1, #4
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 f804 	bl	8006abc <SDIO_GetResponse>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	0d1a      	lsrs	r2, r3, #20
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005abc:	f107 0310 	add.w	r3, r7, #16
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fd3e 	bl	8005544 <HAL_SD_GetCardCSD>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ace:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ad2:	e020      	b.n	8005b16 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6819      	ldr	r1, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	f04f 0400 	mov.w	r4, #0
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	f001 f849 	bl	8006b7e <SDMMC_CmdSelDesel>
 8005aec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <SD_InitCard+0x174>
  {
    return errorstate;
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	e00e      	b.n	8005b16 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681d      	ldr	r5, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	466c      	mov	r4, sp
 8005b00:	f103 0210 	add.w	r2, r3, #16
 8005b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 ff48 	bl	80069a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3740      	adds	r7, #64	; 0x40
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 f843 	bl	8006bc4 <SDMMC_CmdGoIdleState>
 8005b3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	e072      	b.n	8005c30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 f856 	bl	8006c00 <SDMMC_CmdOperCond>
 8005b54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 f82c 	bl	8006bc4 <SDMMC_CmdGoIdleState>
 8005b6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e05b      	b.n	8005c30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d137      	bne.n	8005bf6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 f856 	bl	8006c3e <SDMMC_CmdAppCommand>
 8005b92:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02d      	beq.n	8005bf6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b9e:	e047      	b.n	8005c30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 f849 	bl	8006c3e <SDMMC_CmdAppCommand>
 8005bac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <SD_PowerON+0x98>
    {
      return errorstate;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	e03b      	b.n	8005c30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	491e      	ldr	r1, [pc, #120]	; (8005c38 <SD_PowerON+0x118>)
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 f85f 	bl	8006c82 <SDMMC_CmdAppOperCommand>
 8005bc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bd0:	e02e      	b.n	8005c30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 ff6f 	bl	8006abc <SDIO_GetResponse>
 8005bde:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	0fdb      	lsrs	r3, r3, #31
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <SD_PowerON+0xcc>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <SD_PowerON+0xce>
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]

    count++;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d802      	bhi.n	8005c06 <SD_PowerON+0xe6>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0cc      	beq.n	8005ba0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d902      	bls.n	8005c16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c14:	e00c      	b.n	8005c30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44
 8005c26:	e002      	b.n	8005c2e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	c1100000 	.word	0xc1100000

08005c3c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 ff32 	bl	8006abc <SDIO_GetResponse>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c62:	d102      	bne.n	8005c6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c68:	e02f      	b.n	8005cca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f879 	bl	8005d68 <SD_FindSCR>
 8005c76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	e023      	b.n	8005cca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01c      	beq.n	8005cc6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 ffd0 	bl	8006c3e <SDMMC_CmdAppCommand>
 8005c9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	e00f      	b.n	8005cca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2102      	movs	r1, #2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 f809 	bl	8006cc8 <SDMMC_CmdBusWidth>
 8005cb6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	e003      	b.n	8005cca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e001      	b.n	8005cca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b086      	sub	sp, #24
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fee7 	bl	8006abc <SDIO_GetResponse>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cf8:	d102      	bne.n	8005d00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cfe:	e02f      	b.n	8005d60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f82e 	bl	8005d68 <SD_FindSCR>
 8005d0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	e023      	b.n	8005d60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01c      	beq.n	8005d5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f000 ff85 	bl	8006c3e <SDMMC_CmdAppCommand>
 8005d34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	e00f      	b.n	8005d60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 ffbe 	bl	8006cc8 <SDMMC_CmdBusWidth>
 8005d4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	e003      	b.n	8005d60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e001      	b.n	8005d60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b08f      	sub	sp, #60	; 0x3c
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d72:	f7fd f927 	bl	8002fc4 <HAL_GetTick>
 8005d76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2108      	movs	r1, #8
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fed3 	bl	8006b3a <SDMMC_CmdBlockLength>
 8005d94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	e0a9      	b.n	8005ef4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f000 ff46 	bl	8006c3e <SDMMC_CmdAppCommand>
 8005db2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <SD_FindSCR+0x56>
  {
    return errorstate;
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	e09a      	b.n	8005ef4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005dc8:	2330      	movs	r3, #48	; 0x30
 8005dca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f107 0210 	add.w	r2, r7, #16
 8005de0:	4611      	mov	r1, r2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fe7d 	bl	8006ae2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 ff8d 	bl	8006d0c <SDMMC_CmdSendSCR>
 8005df2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d022      	beq.n	8005e40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	e07a      	b.n	8005ef4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	f107 0208 	add.w	r2, r7, #8
 8005e18:	18d4      	adds	r4, r2, r3
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	f000 fded 	bl	80069fa <SDIO_ReadFIFO>
 8005e20:	4603      	mov	r3, r0
 8005e22:	6023      	str	r3, [r4, #0]
      index++;
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	3301      	adds	r3, #1
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e2a:	f7fd f8cb 	bl	8002fc4 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e38:	d102      	bne.n	8005e40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e3e:	e059      	b.n	8005ef4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e46:	f240 432a 	movw	r3, #1066	; 0x42a
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0d6      	beq.n	8005dfe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2208      	movs	r2, #8
 8005e64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e66:	2308      	movs	r3, #8
 8005e68:	e044      	b.n	8005ef4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e80:	2302      	movs	r3, #2
 8005e82:	e037      	b.n	8005ef4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2220      	movs	r2, #32
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	e02a      	b.n	8005ef4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	061a      	lsls	r2, r3, #24
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005eb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ebe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	0e1b      	lsrs	r3, r3, #24
 8005ec4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	601a      	str	r2, [r3, #0]
    scr++;
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	3304      	adds	r3, #4
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	061a      	lsls	r2, r3, #24
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005edc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ee6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	0e1b      	lsrs	r3, r3, #24
 8005eec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	373c      	adds	r7, #60	; 0x3c
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd90      	pop	{r4, r7, pc}

08005efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e056      	b.n	8005fbc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fb fdb3 	bl	8001a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	ea42 0103 	orr.w	r1, r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	f003 0104 	and.w	r1, r3, #4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69da      	ldr	r2, [r3, #28]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005faa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_SPI_Transmit+0x22>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e11e      	b.n	8006224 <HAL_SPI_Transmit+0x260>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fee:	f7fc ffe9 	bl	8002fc4 <HAL_GetTick>
 8005ff2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d002      	beq.n	800600a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006004:	2302      	movs	r3, #2
 8006006:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006008:	e103      	b.n	8006212 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_SPI_Transmit+0x52>
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	77fb      	strb	r3, [r7, #31]
    goto error;
 800601a:	e0fa      	b.n	8006212 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2203      	movs	r2, #3
 8006020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	88fa      	ldrh	r2, [r7, #6]
 800603a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006062:	d107      	bne.n	8006074 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006072:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d007      	beq.n	8006092 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609a:	d14b      	bne.n	8006134 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_SPI_Transmit+0xe6>
 80060a4:	8afb      	ldrh	r3, [r7, #22]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d13e      	bne.n	8006128 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	881a      	ldrh	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060ce:	e02b      	b.n	8006128 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d112      	bne.n	8006104 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	881a      	ldrh	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	1c9a      	adds	r2, r3, #2
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	86da      	strh	r2, [r3, #54]	; 0x36
 8006102:	e011      	b.n	8006128 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006104:	f7fc ff5e 	bl	8002fc4 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d803      	bhi.n	800611c <HAL_SPI_Transmit+0x158>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800611a:	d102      	bne.n	8006122 <HAL_SPI_Transmit+0x15e>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006126:	e074      	b.n	8006212 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1ce      	bne.n	80060d0 <HAL_SPI_Transmit+0x10c>
 8006132:	e04c      	b.n	80061ce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit+0x17e>
 800613c:	8afb      	ldrh	r3, [r7, #22]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d140      	bne.n	80061c4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006168:	e02c      	b.n	80061c4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d113      	bne.n	80061a0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	86da      	strh	r2, [r3, #54]	; 0x36
 800619e:	e011      	b.n	80061c4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a0:	f7fc ff10 	bl	8002fc4 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d803      	bhi.n	80061b8 <HAL_SPI_Transmit+0x1f4>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b6:	d102      	bne.n	80061be <HAL_SPI_Transmit+0x1fa>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061c2:	e026      	b.n	8006212 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1cd      	bne.n	800616a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fba4 	bl	8006920 <SPI_EndRxTxTransaction>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e000      	b.n	8006212 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006222:	7ffb      	ldrb	r3, [r7, #31]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006248:	d112      	bne.n	8006270 <HAL_SPI_Receive+0x44>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10e      	bne.n	8006270 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2204      	movs	r2, #4
 8006256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f8e9 	bl	800643e <HAL_SPI_TransmitReceive>
 800626c:	4603      	mov	r3, r0
 800626e:	e0e2      	b.n	8006436 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_SPI_Receive+0x52>
 800627a:	2302      	movs	r3, #2
 800627c:	e0db      	b.n	8006436 <HAL_SPI_Receive+0x20a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006286:	f7fc fe9d 	bl	8002fc4 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d002      	beq.n	800629e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006298:	2302      	movs	r3, #2
 800629a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800629c:	e0c2      	b.n	8006424 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_SPI_Receive+0x7e>
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ae:	e0b9      	b.n	8006424 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2204      	movs	r2, #4
 80062b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f6:	d107      	bne.n	8006308 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006306:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d007      	beq.n	8006326 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006324:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d162      	bne.n	80063f4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800632e:	e02e      	b.n	800638e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d115      	bne.n	800636a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f103 020c 	add.w	r2, r3, #12
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006368:	e011      	b.n	800638e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636a:	f7fc fe2b 	bl	8002fc4 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d803      	bhi.n	8006382 <HAL_SPI_Receive+0x156>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Receive+0x15c>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800638c:	e04a      	b.n	8006424 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1cb      	bne.n	8006330 <HAL_SPI_Receive+0x104>
 8006398:	e031      	b.n	80063fe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d113      	bne.n	80063d0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	b292      	uxth	r2, r2
 80063b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ce:	e011      	b.n	80063f4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d0:	f7fc fdf8 	bl	8002fc4 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d803      	bhi.n	80063e8 <HAL_SPI_Receive+0x1bc>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e6:	d102      	bne.n	80063ee <HAL_SPI_Receive+0x1c2>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063f2:	e017      	b.n	8006424 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1cd      	bne.n	800639a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fa27 	bl	8006856 <SPI_EndRxTransaction>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
 8006420:	e000      	b.n	8006424 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006422:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006434:	7dfb      	ldrb	r3, [r7, #23]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b08c      	sub	sp, #48	; 0x30
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800644c:	2301      	movs	r3, #1
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x26>
 8006460:	2302      	movs	r3, #2
 8006462:	e18a      	b.n	800677a <HAL_SPI_TransmitReceive+0x33c>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800646c:	f7fc fdaa 	bl	8002fc4 <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006482:	887b      	ldrh	r3, [r7, #2]
 8006484:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800648a:	2b01      	cmp	r3, #1
 800648c:	d00f      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x70>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006494:	d107      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x68>
 800649e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d003      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
 80064a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064ac:	e15b      	b.n	8006766 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_SPI_TransmitReceive+0x82>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_SPI_TransmitReceive+0x82>
 80064ba:	887b      	ldrh	r3, [r7, #2]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064c6:	e14e      	b.n	8006766 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d003      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2205      	movs	r2, #5
 80064d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	887a      	ldrh	r2, [r7, #2]
 80064ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	887a      	ldrh	r2, [r7, #2]
 80064f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	887a      	ldrh	r2, [r7, #2]
 80064fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	887a      	ldrh	r2, [r7, #2]
 8006504:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d007      	beq.n	8006530 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800652e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006538:	d178      	bne.n	800662c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_SPI_TransmitReceive+0x10a>
 8006542:	8b7b      	ldrh	r3, [r7, #26]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d166      	bne.n	8006616 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	881a      	ldrh	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	1c9a      	adds	r2, r3, #2
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800656c:	e053      	b.n	8006616 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b02      	cmp	r3, #2
 800657a:	d11b      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x176>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x176>
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d113      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	881a      	ldrh	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	1c9a      	adds	r2, r3, #2
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d119      	bne.n	80065f6 <HAL_SPI_TransmitReceive+0x1b8>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d014      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	b292      	uxth	r2, r2
 80065d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	1c9a      	adds	r2, r3, #2
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065f2:	2301      	movs	r3, #1
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065f6:	f7fc fce5 	bl	8002fc4 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006602:	429a      	cmp	r2, r3
 8006604:	d807      	bhi.n	8006616 <HAL_SPI_TransmitReceive+0x1d8>
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800660c:	d003      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006614:	e0a7      	b.n	8006766 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1a6      	bne.n	800656e <HAL_SPI_TransmitReceive+0x130>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1a1      	bne.n	800656e <HAL_SPI_TransmitReceive+0x130>
 800662a:	e07c      	b.n	8006726 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_SPI_TransmitReceive+0x1fc>
 8006634:	8b7b      	ldrh	r3, [r7, #26]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d16b      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006660:	e057      	b.n	8006712 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d11c      	bne.n	80066aa <HAL_SPI_TransmitReceive+0x26c>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d017      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x26c>
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d114      	bne.n	80066aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d119      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x2ae>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d014      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066e8:	2301      	movs	r3, #1
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066ec:	f7fc fc6a 	bl	8002fc4 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d803      	bhi.n	8006704 <HAL_SPI_TransmitReceive+0x2c6>
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006702:	d102      	bne.n	800670a <HAL_SPI_TransmitReceive+0x2cc>
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d103      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006710:	e029      	b.n	8006766 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1a2      	bne.n	8006662 <HAL_SPI_TransmitReceive+0x224>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d19d      	bne.n	8006662 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f8f8 	bl	8006920 <SPI_EndRxTxTransaction>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d006      	beq.n	8006744 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006742:	e010      	b.n	8006766 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	e000      	b.n	8006766 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006776:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800677a:	4618      	mov	r0, r3
 800677c:	3730      	adds	r7, #48	; 0x30
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006792:	e04c      	b.n	800682e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800679a:	d048      	beq.n	800682e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800679c:	f7fc fc12 	bl	8002fc4 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d902      	bls.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d13d      	bne.n	800682e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ca:	d111      	bne.n	80067f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d4:	d004      	beq.n	80067e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067de:	d107      	bne.n	80067f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f8:	d10f      	bne.n	800681a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e00f      	b.n	800684e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	429a      	cmp	r2, r3
 800684a:	d1a3      	bne.n	8006794 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af02      	add	r7, sp, #8
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686a:	d111      	bne.n	8006890 <SPI_EndRxTransaction+0x3a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006874:	d004      	beq.n	8006880 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d107      	bne.n	8006890 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006898:	d12a      	bne.n	80068f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a2:	d012      	beq.n	80068ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	2180      	movs	r1, #128	; 0x80
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ff67 	bl	8006782 <SPI_WaitFlagStateUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d02d      	beq.n	8006916 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	f043 0220 	orr.w	r2, r3, #32
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e026      	b.n	8006918 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2200      	movs	r2, #0
 80068d2:	2101      	movs	r1, #1
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff ff54 	bl	8006782 <SPI_WaitFlagStateUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01a      	beq.n	8006916 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e013      	b.n	8006918 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2200      	movs	r2, #0
 80068f8:	2101      	movs	r1, #1
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff ff41 	bl	8006782 <SPI_WaitFlagStateUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e000      	b.n	8006918 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <SPI_EndRxTxTransaction+0x7c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <SPI_EndRxTxTransaction+0x80>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	0d5b      	lsrs	r3, r3, #21
 8006938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800693c:	fb02 f303 	mul.w	r3, r2, r3
 8006940:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800694a:	d112      	bne.n	8006972 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2200      	movs	r2, #0
 8006954:	2180      	movs	r1, #128	; 0x80
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff ff13 	bl	8006782 <SPI_WaitFlagStateUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d016      	beq.n	8006990 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	f043 0220 	orr.w	r2, r3, #32
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e00f      	b.n	8006992 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00a      	beq.n	800698e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3b01      	subs	r3, #1
 800697c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d0f2      	beq.n	8006972 <SPI_EndRxTxTransaction+0x52>
 800698c:	e000      	b.n	8006990 <SPI_EndRxTxTransaction+0x70>
        break;
 800698e:	bf00      	nop
  }

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	200000c0 	.word	0x200000c0
 80069a0:	165e9f81 	.word	0x165e9f81

080069a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80069a4:	b084      	sub	sp, #16
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	f107 001c 	add.w	r0, r7, #28
 80069b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80069ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80069bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80069be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80069c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80069c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80069ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80069ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80069de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	b004      	add	sp, #16
 80069f8:	4770      	bx	lr

080069fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006a22:	2002      	movs	r0, #2
 8006a24:	f7fc fada 	bl	8002fdc <HAL_Delay>
  
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006a72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006a78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a88:	f023 030f 	bic.w	r3, r3, #15
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	b2db      	uxtb	r3, r3
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3314      	adds	r3, #20
 8006aca:	461a      	mov	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	4413      	add	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
}  
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006b0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006b14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0

}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b088      	sub	sp, #32
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006b48:	2310      	movs	r3, #16
 8006b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b4c:	2340      	movs	r3, #64	; 0x40
 8006b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b5a:	f107 0308 	add.w	r3, r7, #8
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ff74 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6a:	2110      	movs	r1, #16
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f975 	bl	8006e5c <SDMMC_GetCmdResp1>
 8006b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b74:	69fb      	ldr	r3, [r7, #28]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b08a      	sub	sp, #40	; 0x28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b8e:	2307      	movs	r3, #7
 8006b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff ff51 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb0:	2107      	movs	r1, #7
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f952 	bl	8006e5c <SDMMC_GetCmdResp1>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3728      	adds	r7, #40	; 0x28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff30 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f90c 	bl	8006e0c <SDMMC_GetCmdError>
 8006bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c08:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c0e:	2308      	movs	r3, #8
 8006c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c12:	2340      	movs	r3, #64	; 0x40
 8006c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff ff11 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 faf5 	bl	800721c <SDMMC_GetCmdResp7>
 8006c32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c34:	69fb      	ldr	r3, [r7, #28]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b088      	sub	sp, #32
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c4c:	2337      	movs	r3, #55	; 0x37
 8006c4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c5e:	f107 0308 	add.w	r3, r7, #8
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff fef2 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	2137      	movs	r1, #55	; 0x37
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8f3 	bl	8006e5c <SDMMC_GetCmdResp1>
 8006c76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c78:	69fb      	ldr	r3, [r7, #28]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b088      	sub	sp, #32
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006c98:	2329      	movs	r3, #41	; 0x29
 8006c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff fecc 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa02 	bl	80070c0 <SDMMC_GetCmdResp3>
 8006cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006cd6:	2306      	movs	r3, #6
 8006cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fead 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	2106      	movs	r1, #6
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8ae 	bl	8006e5c <SDMMC_GetCmdResp1>
 8006d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d02:	69fb      	ldr	r3, [r7, #28]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d18:	2333      	movs	r3, #51	; 0x33
 8006d1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fe8c 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3a:	2133      	movs	r1, #51	; 0x33
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f88d 	bl	8006e5c <SDMMC_GetCmdResp1>
 8006d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d44:	69fb      	ldr	r3, [r7, #28]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b088      	sub	sp, #32
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d5e:	23c0      	movs	r3, #192	; 0xc0
 8006d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d6c:	f107 0308 	add.w	r3, r7, #8
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff fe6b 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f95b 	bl	8007034 <SDMMC_GetCmdResp2>
 8006d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d80:	69fb      	ldr	r3, [r7, #28]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b088      	sub	sp, #32
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006d98:	2309      	movs	r3, #9
 8006d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d9c:	23c0      	movs	r3, #192	; 0xc0
 8006d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fe4c 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f93c 	bl	8007034 <SDMMC_GetCmdResp2>
 8006dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3720      	adds	r7, #32
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de8:	f107 0308 	add.w	r3, r7, #8
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fe2d 	bl	8006a4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	2103      	movs	r1, #3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f99b 	bl	8007134 <SDMMC_GetCmdResp6>
 8006dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e00:	69fb      	ldr	r3, [r7, #28]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3720      	adds	r7, #32
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006e0c:	b490      	push	{r4, r7}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <SDMMC_GetCmdError+0x48>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a0f      	ldr	r2, [pc, #60]	; (8006e58 <SDMMC_GetCmdError+0x4c>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	0a5b      	lsrs	r3, r3, #9
 8006e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e28:	4623      	mov	r3, r4
 8006e2a:	1e5c      	subs	r4, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e34:	e009      	b.n	8006e4a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f2      	beq.n	8006e28 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	22c5      	movs	r2, #197	; 0xc5
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc90      	pop	{r4, r7}
 8006e52:	4770      	bx	lr
 8006e54:	200000c0 	.word	0x200000c0
 8006e58:	10624dd3 	.word	0x10624dd3

08006e5c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	460b      	mov	r3, r1
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e6a:	4b6f      	ldr	r3, [pc, #444]	; (8007028 <SDMMC_GetCmdResp1+0x1cc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a6f      	ldr	r2, [pc, #444]	; (800702c <SDMMC_GetCmdResp1+0x1d0>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	0a5b      	lsrs	r3, r3, #9
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e7c:	4623      	mov	r3, r4
 8006e7e:	1e5c      	subs	r4, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e88:	e0c9      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <SDMMC_GetCmdResp1+0x20>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1eb      	bne.n	8006e7c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	e0b1      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0a6      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	22c5      	movs	r2, #197	; 0xc5
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff fde3 	bl	8006aa2 <SDIO_GetCommandResponse>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d001      	beq.n	8006eea <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e099      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006eea:	2100      	movs	r1, #0
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff fde5 	bl	8006abc <SDIO_GetResponse>
 8006ef2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <SDMMC_GetCmdResp1+0x1d4>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e08d      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da02      	bge.n	8006f0e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f0c:	e087      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f18:	2340      	movs	r3, #64	; 0x40
 8006f1a:	e080      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f26:	2380      	movs	r3, #128	; 0x80
 8006f28:	e079      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f38:	e071      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f48:	e069      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f58:	e061      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f68:	e059      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f78:	e051      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f88:	e049      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f98:	e041      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa8:	e039      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fb8:	e031      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006fc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fc8:	e029      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fd8:	e021      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006fe4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fe8:	e019      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ff4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ff8:	e011      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007004:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007008:	e009      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007014:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007018:	e001      	b.n	800701e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800701a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	bd90      	pop	{r4, r7, pc}
 8007026:	bf00      	nop
 8007028:	200000c0 	.word	0x200000c0
 800702c:	10624dd3 	.word	0x10624dd3
 8007030:	fdffe008 	.word	0xfdffe008

08007034 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007034:	b490      	push	{r4, r7}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800703c:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <SDMMC_GetCmdResp2+0x84>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <SDMMC_GetCmdResp2+0x88>)
 8007042:	fba2 2303 	umull	r2, r3, r2, r3
 8007046:	0a5b      	lsrs	r3, r3, #9
 8007048:	f241 3288 	movw	r2, #5000	; 0x1388
 800704c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007050:	4623      	mov	r3, r4
 8007052:	1e5c      	subs	r4, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800705c:	e026      	b.n	80070ac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <SDMMC_GetCmdResp2+0x1c>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1eb      	bne.n	8007050 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2204      	movs	r2, #4
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800708a:	2304      	movs	r3, #4
 800708c:	e00e      	b.n	80070ac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e003      	b.n	80070ac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	22c5      	movs	r2, #197	; 0xc5
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc90      	pop	{r4, r7}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	200000c0 	.word	0x200000c0
 80070bc:	10624dd3 	.word	0x10624dd3

080070c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80070c0:	b490      	push	{r4, r7}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070c8:	4b18      	ldr	r3, [pc, #96]	; (800712c <SDMMC_GetCmdResp3+0x6c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a18      	ldr	r2, [pc, #96]	; (8007130 <SDMMC_GetCmdResp3+0x70>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	0a5b      	lsrs	r3, r3, #9
 80070d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80070dc:	4623      	mov	r3, r4
 80070de:	1e5c      	subs	r4, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070e8:	e01b      	b.n	8007122 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0f0      	beq.n	80070dc <SDMMC_GetCmdResp3+0x1c>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1eb      	bne.n	80070dc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2204      	movs	r2, #4
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007116:	2304      	movs	r3, #4
 8007118:	e003      	b.n	8007122 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	22c5      	movs	r2, #197	; 0xc5
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bc90      	pop	{r4, r7}
 800712a:	4770      	bx	lr
 800712c:	200000c0 	.word	0x200000c0
 8007130:	10624dd3 	.word	0x10624dd3

08007134 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007134:	b590      	push	{r4, r7, lr}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	460b      	mov	r3, r1
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007142:	4b34      	ldr	r3, [pc, #208]	; (8007214 <SDMMC_GetCmdResp6+0xe0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a34      	ldr	r2, [pc, #208]	; (8007218 <SDMMC_GetCmdResp6+0xe4>)
 8007148:	fba2 2303 	umull	r2, r3, r2, r3
 800714c:	0a5b      	lsrs	r3, r3, #9
 800714e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007152:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007156:	4623      	mov	r3, r4
 8007158:	1e5c      	subs	r4, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800715e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007162:	e052      	b.n	800720a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f0      	beq.n	8007156 <SDMMC_GetCmdResp6+0x22>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1eb      	bne.n	8007156 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2204      	movs	r2, #4
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007190:	2304      	movs	r3, #4
 8007192:	e03a      	b.n	800720a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e02f      	b.n	800720a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff fc79 	bl	8006aa2 <SDIO_GetCommandResponse>
 80071b0:	4603      	mov	r3, r0
 80071b2:	461a      	mov	r2, r3
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d001      	beq.n	80071be <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e025      	b.n	800720a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	22c5      	movs	r2, #197	; 0xc5
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80071c4:	2100      	movs	r1, #0
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7ff fc78 	bl	8006abc <SDIO_GetResponse>
 80071cc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e011      	b.n	800720a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071f4:	e009      	b.n	800720a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007204:	e001      	b.n	800720a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	bd90      	pop	{r4, r7, pc}
 8007212:	bf00      	nop
 8007214:	200000c0 	.word	0x200000c0
 8007218:	10624dd3 	.word	0x10624dd3

0800721c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800721c:	b490      	push	{r4, r7}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007224:	4b21      	ldr	r3, [pc, #132]	; (80072ac <SDMMC_GetCmdResp7+0x90>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a21      	ldr	r2, [pc, #132]	; (80072b0 <SDMMC_GetCmdResp7+0x94>)
 800722a:	fba2 2303 	umull	r2, r3, r2, r3
 800722e:	0a5b      	lsrs	r3, r3, #9
 8007230:	f241 3288 	movw	r2, #5000	; 0x1388
 8007234:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007238:	4623      	mov	r3, r4
 800723a:	1e5c      	subs	r4, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007244:	e02c      	b.n	80072a0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <SDMMC_GetCmdResp7+0x1c>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1eb      	bne.n	8007238 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d004      	beq.n	8007276 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2204      	movs	r2, #4
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007272:	2304      	movs	r3, #4
 8007274:	e014      	b.n	80072a0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007288:	2301      	movs	r3, #1
 800728a:	e009      	b.n	80072a0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800729e:	2300      	movs	r3, #0
  
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc90      	pop	{r4, r7}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	200000c0 	.word	0x200000c0
 80072b0:	10624dd3 	.word	0x10624dd3

080072b4 <__errno>:
 80072b4:	4b01      	ldr	r3, [pc, #4]	; (80072bc <__errno+0x8>)
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	200000d0 	.word	0x200000d0

080072c0 <__libc_init_array>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4e0d      	ldr	r6, [pc, #52]	; (80072f8 <__libc_init_array+0x38>)
 80072c4:	4c0d      	ldr	r4, [pc, #52]	; (80072fc <__libc_init_array+0x3c>)
 80072c6:	1ba4      	subs	r4, r4, r6
 80072c8:	10a4      	asrs	r4, r4, #2
 80072ca:	2500      	movs	r5, #0
 80072cc:	42a5      	cmp	r5, r4
 80072ce:	d109      	bne.n	80072e4 <__libc_init_array+0x24>
 80072d0:	4e0b      	ldr	r6, [pc, #44]	; (8007300 <__libc_init_array+0x40>)
 80072d2:	4c0c      	ldr	r4, [pc, #48]	; (8007304 <__libc_init_array+0x44>)
 80072d4:	f002 fbaa 	bl	8009a2c <_init>
 80072d8:	1ba4      	subs	r4, r4, r6
 80072da:	10a4      	asrs	r4, r4, #2
 80072dc:	2500      	movs	r5, #0
 80072de:	42a5      	cmp	r5, r4
 80072e0:	d105      	bne.n	80072ee <__libc_init_array+0x2e>
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072e8:	4798      	blx	r3
 80072ea:	3501      	adds	r5, #1
 80072ec:	e7ee      	b.n	80072cc <__libc_init_array+0xc>
 80072ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f2:	4798      	blx	r3
 80072f4:	3501      	adds	r5, #1
 80072f6:	e7f2      	b.n	80072de <__libc_init_array+0x1e>
 80072f8:	08009f40 	.word	0x08009f40
 80072fc:	08009f40 	.word	0x08009f40
 8007300:	08009f40 	.word	0x08009f40
 8007304:	08009f44 	.word	0x08009f44

08007308 <memset>:
 8007308:	4402      	add	r2, r0
 800730a:	4603      	mov	r3, r0
 800730c:	4293      	cmp	r3, r2
 800730e:	d100      	bne.n	8007312 <memset+0xa>
 8007310:	4770      	bx	lr
 8007312:	f803 1b01 	strb.w	r1, [r3], #1
 8007316:	e7f9      	b.n	800730c <memset+0x4>

08007318 <__cvt>:
 8007318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	ec55 4b10 	vmov	r4, r5, d0
 8007320:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007322:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007326:	2d00      	cmp	r5, #0
 8007328:	460e      	mov	r6, r1
 800732a:	4691      	mov	r9, r2
 800732c:	4619      	mov	r1, r3
 800732e:	bfb8      	it	lt
 8007330:	4622      	movlt	r2, r4
 8007332:	462b      	mov	r3, r5
 8007334:	f027 0720 	bic.w	r7, r7, #32
 8007338:	bfbb      	ittet	lt
 800733a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800733e:	461d      	movlt	r5, r3
 8007340:	2300      	movge	r3, #0
 8007342:	232d      	movlt	r3, #45	; 0x2d
 8007344:	bfb8      	it	lt
 8007346:	4614      	movlt	r4, r2
 8007348:	2f46      	cmp	r7, #70	; 0x46
 800734a:	700b      	strb	r3, [r1, #0]
 800734c:	d004      	beq.n	8007358 <__cvt+0x40>
 800734e:	2f45      	cmp	r7, #69	; 0x45
 8007350:	d100      	bne.n	8007354 <__cvt+0x3c>
 8007352:	3601      	adds	r6, #1
 8007354:	2102      	movs	r1, #2
 8007356:	e000      	b.n	800735a <__cvt+0x42>
 8007358:	2103      	movs	r1, #3
 800735a:	ab03      	add	r3, sp, #12
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	ab02      	add	r3, sp, #8
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	4632      	mov	r2, r6
 8007364:	4653      	mov	r3, sl
 8007366:	ec45 4b10 	vmov	d0, r4, r5
 800736a:	f000 fdf9 	bl	8007f60 <_dtoa_r>
 800736e:	2f47      	cmp	r7, #71	; 0x47
 8007370:	4680      	mov	r8, r0
 8007372:	d102      	bne.n	800737a <__cvt+0x62>
 8007374:	f019 0f01 	tst.w	r9, #1
 8007378:	d026      	beq.n	80073c8 <__cvt+0xb0>
 800737a:	2f46      	cmp	r7, #70	; 0x46
 800737c:	eb08 0906 	add.w	r9, r8, r6
 8007380:	d111      	bne.n	80073a6 <__cvt+0x8e>
 8007382:	f898 3000 	ldrb.w	r3, [r8]
 8007386:	2b30      	cmp	r3, #48	; 0x30
 8007388:	d10a      	bne.n	80073a0 <__cvt+0x88>
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f9 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 8007396:	b918      	cbnz	r0, 80073a0 <__cvt+0x88>
 8007398:	f1c6 0601 	rsb	r6, r6, #1
 800739c:	f8ca 6000 	str.w	r6, [sl]
 80073a0:	f8da 3000 	ldr.w	r3, [sl]
 80073a4:	4499      	add	r9, r3
 80073a6:	2200      	movs	r2, #0
 80073a8:	2300      	movs	r3, #0
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f9 fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80073b2:	b938      	cbnz	r0, 80073c4 <__cvt+0xac>
 80073b4:	2230      	movs	r2, #48	; 0x30
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	454b      	cmp	r3, r9
 80073ba:	d205      	bcs.n	80073c8 <__cvt+0xb0>
 80073bc:	1c59      	adds	r1, r3, #1
 80073be:	9103      	str	r1, [sp, #12]
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e7f8      	b.n	80073b6 <__cvt+0x9e>
 80073c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073cc:	eba3 0308 	sub.w	r3, r3, r8
 80073d0:	4640      	mov	r0, r8
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	b004      	add	sp, #16
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080073da <__exponent>:
 80073da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073dc:	2900      	cmp	r1, #0
 80073de:	4604      	mov	r4, r0
 80073e0:	bfba      	itte	lt
 80073e2:	4249      	neglt	r1, r1
 80073e4:	232d      	movlt	r3, #45	; 0x2d
 80073e6:	232b      	movge	r3, #43	; 0x2b
 80073e8:	2909      	cmp	r1, #9
 80073ea:	f804 2b02 	strb.w	r2, [r4], #2
 80073ee:	7043      	strb	r3, [r0, #1]
 80073f0:	dd20      	ble.n	8007434 <__exponent+0x5a>
 80073f2:	f10d 0307 	add.w	r3, sp, #7
 80073f6:	461f      	mov	r7, r3
 80073f8:	260a      	movs	r6, #10
 80073fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80073fe:	fb06 1115 	mls	r1, r6, r5, r1
 8007402:	3130      	adds	r1, #48	; 0x30
 8007404:	2d09      	cmp	r5, #9
 8007406:	f803 1c01 	strb.w	r1, [r3, #-1]
 800740a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800740e:	4629      	mov	r1, r5
 8007410:	dc09      	bgt.n	8007426 <__exponent+0x4c>
 8007412:	3130      	adds	r1, #48	; 0x30
 8007414:	3b02      	subs	r3, #2
 8007416:	f802 1c01 	strb.w	r1, [r2, #-1]
 800741a:	42bb      	cmp	r3, r7
 800741c:	4622      	mov	r2, r4
 800741e:	d304      	bcc.n	800742a <__exponent+0x50>
 8007420:	1a10      	subs	r0, r2, r0
 8007422:	b003      	add	sp, #12
 8007424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007426:	4613      	mov	r3, r2
 8007428:	e7e7      	b.n	80073fa <__exponent+0x20>
 800742a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800742e:	f804 2b01 	strb.w	r2, [r4], #1
 8007432:	e7f2      	b.n	800741a <__exponent+0x40>
 8007434:	2330      	movs	r3, #48	; 0x30
 8007436:	4419      	add	r1, r3
 8007438:	7083      	strb	r3, [r0, #2]
 800743a:	1d02      	adds	r2, r0, #4
 800743c:	70c1      	strb	r1, [r0, #3]
 800743e:	e7ef      	b.n	8007420 <__exponent+0x46>

08007440 <_printf_float>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	b08d      	sub	sp, #52	; 0x34
 8007446:	460c      	mov	r4, r1
 8007448:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800744c:	4616      	mov	r6, r2
 800744e:	461f      	mov	r7, r3
 8007450:	4605      	mov	r5, r0
 8007452:	f001 fcb7 	bl	8008dc4 <_localeconv_r>
 8007456:	6803      	ldr	r3, [r0, #0]
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	4618      	mov	r0, r3
 800745c:	f7f8 feb8 	bl	80001d0 <strlen>
 8007460:	2300      	movs	r3, #0
 8007462:	930a      	str	r3, [sp, #40]	; 0x28
 8007464:	f8d8 3000 	ldr.w	r3, [r8]
 8007468:	9005      	str	r0, [sp, #20]
 800746a:	3307      	adds	r3, #7
 800746c:	f023 0307 	bic.w	r3, r3, #7
 8007470:	f103 0208 	add.w	r2, r3, #8
 8007474:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007478:	f8d4 b000 	ldr.w	fp, [r4]
 800747c:	f8c8 2000 	str.w	r2, [r8]
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007488:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800748c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007490:	9307      	str	r3, [sp, #28]
 8007492:	f8cd 8018 	str.w	r8, [sp, #24]
 8007496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800749a:	4ba7      	ldr	r3, [pc, #668]	; (8007738 <_printf_float+0x2f8>)
 800749c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a0:	f7f9 fb44 	bl	8000b2c <__aeabi_dcmpun>
 80074a4:	bb70      	cbnz	r0, 8007504 <_printf_float+0xc4>
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074aa:	4ba3      	ldr	r3, [pc, #652]	; (8007738 <_printf_float+0x2f8>)
 80074ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074b0:	f7f9 fb1e 	bl	8000af0 <__aeabi_dcmple>
 80074b4:	bb30      	cbnz	r0, 8007504 <_printf_float+0xc4>
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	f7f9 fb0d 	bl	8000adc <__aeabi_dcmplt>
 80074c2:	b110      	cbz	r0, 80074ca <_printf_float+0x8a>
 80074c4:	232d      	movs	r3, #45	; 0x2d
 80074c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ca:	4a9c      	ldr	r2, [pc, #624]	; (800773c <_printf_float+0x2fc>)
 80074cc:	4b9c      	ldr	r3, [pc, #624]	; (8007740 <_printf_float+0x300>)
 80074ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80074d2:	bf8c      	ite	hi
 80074d4:	4690      	movhi	r8, r2
 80074d6:	4698      	movls	r8, r3
 80074d8:	2303      	movs	r3, #3
 80074da:	f02b 0204 	bic.w	r2, fp, #4
 80074de:	6123      	str	r3, [r4, #16]
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	f04f 0900 	mov.w	r9, #0
 80074e6:	9700      	str	r7, [sp, #0]
 80074e8:	4633      	mov	r3, r6
 80074ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80074ec:	4621      	mov	r1, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 f9e6 	bl	80078c0 <_printf_common>
 80074f4:	3001      	adds	r0, #1
 80074f6:	f040 808d 	bne.w	8007614 <_printf_float+0x1d4>
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074fe:	b00d      	add	sp, #52	; 0x34
 8007500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007504:	4642      	mov	r2, r8
 8007506:	464b      	mov	r3, r9
 8007508:	4640      	mov	r0, r8
 800750a:	4649      	mov	r1, r9
 800750c:	f7f9 fb0e 	bl	8000b2c <__aeabi_dcmpun>
 8007510:	b110      	cbz	r0, 8007518 <_printf_float+0xd8>
 8007512:	4a8c      	ldr	r2, [pc, #560]	; (8007744 <_printf_float+0x304>)
 8007514:	4b8c      	ldr	r3, [pc, #560]	; (8007748 <_printf_float+0x308>)
 8007516:	e7da      	b.n	80074ce <_printf_float+0x8e>
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	1c4b      	adds	r3, r1, #1
 800751c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007520:	a80a      	add	r0, sp, #40	; 0x28
 8007522:	d13e      	bne.n	80075a2 <_printf_float+0x162>
 8007524:	2306      	movs	r3, #6
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	2300      	movs	r3, #0
 800752a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800752e:	ab09      	add	r3, sp, #36	; 0x24
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	ec49 8b10 	vmov	d0, r8, r9
 8007536:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	f8cd a004 	str.w	sl, [sp, #4]
 8007540:	6861      	ldr	r1, [r4, #4]
 8007542:	4628      	mov	r0, r5
 8007544:	f7ff fee8 	bl	8007318 <__cvt>
 8007548:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800754c:	2b47      	cmp	r3, #71	; 0x47
 800754e:	4680      	mov	r8, r0
 8007550:	d109      	bne.n	8007566 <_printf_float+0x126>
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	1cd8      	adds	r0, r3, #3
 8007556:	db02      	blt.n	800755e <_printf_float+0x11e>
 8007558:	6862      	ldr	r2, [r4, #4]
 800755a:	4293      	cmp	r3, r2
 800755c:	dd47      	ble.n	80075ee <_printf_float+0x1ae>
 800755e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007562:	fa5f fa8a 	uxtb.w	sl, sl
 8007566:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800756a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800756c:	d824      	bhi.n	80075b8 <_printf_float+0x178>
 800756e:	3901      	subs	r1, #1
 8007570:	4652      	mov	r2, sl
 8007572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007576:	9109      	str	r1, [sp, #36]	; 0x24
 8007578:	f7ff ff2f 	bl	80073da <__exponent>
 800757c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800757e:	1813      	adds	r3, r2, r0
 8007580:	2a01      	cmp	r2, #1
 8007582:	4681      	mov	r9, r0
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	dc02      	bgt.n	800758e <_printf_float+0x14e>
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	07d1      	lsls	r1, r2, #31
 800758c:	d501      	bpl.n	8007592 <_printf_float+0x152>
 800758e:	3301      	adds	r3, #1
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0a5      	beq.n	80074e6 <_printf_float+0xa6>
 800759a:	232d      	movs	r3, #45	; 0x2d
 800759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a0:	e7a1      	b.n	80074e6 <_printf_float+0xa6>
 80075a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80075a6:	f000 8177 	beq.w	8007898 <_printf_float+0x458>
 80075aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075ae:	d1bb      	bne.n	8007528 <_printf_float+0xe8>
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d1b9      	bne.n	8007528 <_printf_float+0xe8>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e7b6      	b.n	8007526 <_printf_float+0xe6>
 80075b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80075bc:	d119      	bne.n	80075f2 <_printf_float+0x1b2>
 80075be:	2900      	cmp	r1, #0
 80075c0:	6863      	ldr	r3, [r4, #4]
 80075c2:	dd0c      	ble.n	80075de <_printf_float+0x19e>
 80075c4:	6121      	str	r1, [r4, #16]
 80075c6:	b913      	cbnz	r3, 80075ce <_printf_float+0x18e>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	07d2      	lsls	r2, r2, #31
 80075cc:	d502      	bpl.n	80075d4 <_printf_float+0x194>
 80075ce:	3301      	adds	r3, #1
 80075d0:	440b      	add	r3, r1
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80075d8:	f04f 0900 	mov.w	r9, #0
 80075dc:	e7d9      	b.n	8007592 <_printf_float+0x152>
 80075de:	b913      	cbnz	r3, 80075e6 <_printf_float+0x1a6>
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	07d0      	lsls	r0, r2, #31
 80075e4:	d501      	bpl.n	80075ea <_printf_float+0x1aa>
 80075e6:	3302      	adds	r3, #2
 80075e8:	e7f3      	b.n	80075d2 <_printf_float+0x192>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e7f1      	b.n	80075d2 <_printf_float+0x192>
 80075ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80075f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075f6:	4293      	cmp	r3, r2
 80075f8:	db05      	blt.n	8007606 <_printf_float+0x1c6>
 80075fa:	6822      	ldr	r2, [r4, #0]
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	07d1      	lsls	r1, r2, #31
 8007600:	d5e8      	bpl.n	80075d4 <_printf_float+0x194>
 8007602:	3301      	adds	r3, #1
 8007604:	e7e5      	b.n	80075d2 <_printf_float+0x192>
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfd4      	ite	le
 800760a:	f1c3 0302 	rsble	r3, r3, #2
 800760e:	2301      	movgt	r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	e7de      	b.n	80075d2 <_printf_float+0x192>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	055a      	lsls	r2, r3, #21
 8007618:	d407      	bmi.n	800762a <_printf_float+0x1ea>
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	4642      	mov	r2, r8
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	d12b      	bne.n	8007680 <_printf_float+0x240>
 8007628:	e767      	b.n	80074fa <_printf_float+0xba>
 800762a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800762e:	f240 80dc 	bls.w	80077ea <_printf_float+0x3aa>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800763a:	f7f9 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800763e:	2800      	cmp	r0, #0
 8007640:	d033      	beq.n	80076aa <_printf_float+0x26a>
 8007642:	2301      	movs	r3, #1
 8007644:	4a41      	ldr	r2, [pc, #260]	; (800774c <_printf_float+0x30c>)
 8007646:	4631      	mov	r1, r6
 8007648:	4628      	mov	r0, r5
 800764a:	47b8      	blx	r7
 800764c:	3001      	adds	r0, #1
 800764e:	f43f af54 	beq.w	80074fa <_printf_float+0xba>
 8007652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007656:	429a      	cmp	r2, r3
 8007658:	db02      	blt.n	8007660 <_printf_float+0x220>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	07d8      	lsls	r0, r3, #31
 800765e:	d50f      	bpl.n	8007680 <_printf_float+0x240>
 8007660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	f43f af45 	beq.w	80074fa <_printf_float+0xba>
 8007670:	f04f 0800 	mov.w	r8, #0
 8007674:	f104 091a 	add.w	r9, r4, #26
 8007678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767a:	3b01      	subs	r3, #1
 800767c:	4543      	cmp	r3, r8
 800767e:	dc09      	bgt.n	8007694 <_printf_float+0x254>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	079b      	lsls	r3, r3, #30
 8007684:	f100 8103 	bmi.w	800788e <_printf_float+0x44e>
 8007688:	68e0      	ldr	r0, [r4, #12]
 800768a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800768c:	4298      	cmp	r0, r3
 800768e:	bfb8      	it	lt
 8007690:	4618      	movlt	r0, r3
 8007692:	e734      	b.n	80074fe <_printf_float+0xbe>
 8007694:	2301      	movs	r3, #1
 8007696:	464a      	mov	r2, r9
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af2b 	beq.w	80074fa <_printf_float+0xba>
 80076a4:	f108 0801 	add.w	r8, r8, #1
 80076a8:	e7e6      	b.n	8007678 <_printf_float+0x238>
 80076aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	dc2b      	bgt.n	8007708 <_printf_float+0x2c8>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4a26      	ldr	r2, [pc, #152]	; (800774c <_printf_float+0x30c>)
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	f43f af1d 	beq.w	80074fa <_printf_float+0xba>
 80076c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c2:	b923      	cbnz	r3, 80076ce <_printf_float+0x28e>
 80076c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c6:	b913      	cbnz	r3, 80076ce <_printf_float+0x28e>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	d5d8      	bpl.n	8007680 <_printf_float+0x240>
 80076ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f af0e 	beq.w	80074fa <_printf_float+0xba>
 80076de:	f04f 0900 	mov.w	r9, #0
 80076e2:	f104 0a1a 	add.w	sl, r4, #26
 80076e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e8:	425b      	negs	r3, r3
 80076ea:	454b      	cmp	r3, r9
 80076ec:	dc01      	bgt.n	80076f2 <_printf_float+0x2b2>
 80076ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f0:	e794      	b.n	800761c <_printf_float+0x1dc>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4652      	mov	r2, sl
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f aefc 	beq.w	80074fa <_printf_float+0xba>
 8007702:	f109 0901 	add.w	r9, r9, #1
 8007706:	e7ee      	b.n	80076e6 <_printf_float+0x2a6>
 8007708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800770c:	429a      	cmp	r2, r3
 800770e:	bfa8      	it	ge
 8007710:	461a      	movge	r2, r3
 8007712:	2a00      	cmp	r2, #0
 8007714:	4691      	mov	r9, r2
 8007716:	dd07      	ble.n	8007728 <_printf_float+0x2e8>
 8007718:	4613      	mov	r3, r2
 800771a:	4631      	mov	r1, r6
 800771c:	4642      	mov	r2, r8
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f aee9 	beq.w	80074fa <_printf_float+0xba>
 8007728:	f104 031a 	add.w	r3, r4, #26
 800772c:	f04f 0b00 	mov.w	fp, #0
 8007730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007734:	9306      	str	r3, [sp, #24]
 8007736:	e015      	b.n	8007764 <_printf_float+0x324>
 8007738:	7fefffff 	.word	0x7fefffff
 800773c:	08009c80 	.word	0x08009c80
 8007740:	08009c7c 	.word	0x08009c7c
 8007744:	08009c88 	.word	0x08009c88
 8007748:	08009c84 	.word	0x08009c84
 800774c:	08009c8c 	.word	0x08009c8c
 8007750:	2301      	movs	r3, #1
 8007752:	9a06      	ldr	r2, [sp, #24]
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	47b8      	blx	r7
 800775a:	3001      	adds	r0, #1
 800775c:	f43f aecd 	beq.w	80074fa <_printf_float+0xba>
 8007760:	f10b 0b01 	add.w	fp, fp, #1
 8007764:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007768:	ebaa 0309 	sub.w	r3, sl, r9
 800776c:	455b      	cmp	r3, fp
 800776e:	dcef      	bgt.n	8007750 <_printf_float+0x310>
 8007770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007774:	429a      	cmp	r2, r3
 8007776:	44d0      	add	r8, sl
 8007778:	db15      	blt.n	80077a6 <_printf_float+0x366>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	07da      	lsls	r2, r3, #31
 800777e:	d412      	bmi.n	80077a6 <_printf_float+0x366>
 8007780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007784:	eba3 020a 	sub.w	r2, r3, sl
 8007788:	eba3 0a01 	sub.w	sl, r3, r1
 800778c:	4592      	cmp	sl, r2
 800778e:	bfa8      	it	ge
 8007790:	4692      	movge	sl, r2
 8007792:	f1ba 0f00 	cmp.w	sl, #0
 8007796:	dc0e      	bgt.n	80077b6 <_printf_float+0x376>
 8007798:	f04f 0800 	mov.w	r8, #0
 800779c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077a0:	f104 091a 	add.w	r9, r4, #26
 80077a4:	e019      	b.n	80077da <_printf_float+0x39a>
 80077a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	d1e5      	bne.n	8007780 <_printf_float+0x340>
 80077b4:	e6a1      	b.n	80074fa <_printf_float+0xba>
 80077b6:	4653      	mov	r3, sl
 80077b8:	4642      	mov	r2, r8
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d1e9      	bne.n	8007798 <_printf_float+0x358>
 80077c4:	e699      	b.n	80074fa <_printf_float+0xba>
 80077c6:	2301      	movs	r3, #1
 80077c8:	464a      	mov	r2, r9
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f ae92 	beq.w	80074fa <_printf_float+0xba>
 80077d6:	f108 0801 	add.w	r8, r8, #1
 80077da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	eba3 030a 	sub.w	r3, r3, sl
 80077e4:	4543      	cmp	r3, r8
 80077e6:	dcee      	bgt.n	80077c6 <_printf_float+0x386>
 80077e8:	e74a      	b.n	8007680 <_printf_float+0x240>
 80077ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ec:	2a01      	cmp	r2, #1
 80077ee:	dc01      	bgt.n	80077f4 <_printf_float+0x3b4>
 80077f0:	07db      	lsls	r3, r3, #31
 80077f2:	d53a      	bpl.n	800786a <_printf_float+0x42a>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4642      	mov	r2, r8
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	f43f ae7b 	beq.w	80074fa <_printf_float+0xba>
 8007804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f108 0801 	add.w	r8, r8, #1
 8007814:	f43f ae71 	beq.w	80074fa <_printf_float+0xba>
 8007818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781a:	2200      	movs	r2, #0
 800781c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007824:	2300      	movs	r3, #0
 8007826:	f7f9 f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800782a:	b9c8      	cbnz	r0, 8007860 <_printf_float+0x420>
 800782c:	4653      	mov	r3, sl
 800782e:	4642      	mov	r2, r8
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	d10e      	bne.n	8007858 <_printf_float+0x418>
 800783a:	e65e      	b.n	80074fa <_printf_float+0xba>
 800783c:	2301      	movs	r3, #1
 800783e:	4652      	mov	r2, sl
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f ae57 	beq.w	80074fa <_printf_float+0xba>
 800784c:	f108 0801 	add.w	r8, r8, #1
 8007850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007852:	3b01      	subs	r3, #1
 8007854:	4543      	cmp	r3, r8
 8007856:	dcf1      	bgt.n	800783c <_printf_float+0x3fc>
 8007858:	464b      	mov	r3, r9
 800785a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800785e:	e6de      	b.n	800761e <_printf_float+0x1de>
 8007860:	f04f 0800 	mov.w	r8, #0
 8007864:	f104 0a1a 	add.w	sl, r4, #26
 8007868:	e7f2      	b.n	8007850 <_printf_float+0x410>
 800786a:	2301      	movs	r3, #1
 800786c:	e7df      	b.n	800782e <_printf_float+0x3ee>
 800786e:	2301      	movs	r3, #1
 8007870:	464a      	mov	r2, r9
 8007872:	4631      	mov	r1, r6
 8007874:	4628      	mov	r0, r5
 8007876:	47b8      	blx	r7
 8007878:	3001      	adds	r0, #1
 800787a:	f43f ae3e 	beq.w	80074fa <_printf_float+0xba>
 800787e:	f108 0801 	add.w	r8, r8, #1
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	4543      	cmp	r3, r8
 800788a:	dcf0      	bgt.n	800786e <_printf_float+0x42e>
 800788c:	e6fc      	b.n	8007688 <_printf_float+0x248>
 800788e:	f04f 0800 	mov.w	r8, #0
 8007892:	f104 0919 	add.w	r9, r4, #25
 8007896:	e7f4      	b.n	8007882 <_printf_float+0x442>
 8007898:	2900      	cmp	r1, #0
 800789a:	f43f ae8b 	beq.w	80075b4 <_printf_float+0x174>
 800789e:	2300      	movs	r3, #0
 80078a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80078a4:	ab09      	add	r3, sp, #36	; 0x24
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	ec49 8b10 	vmov	d0, r8, r9
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	f8cd a004 	str.w	sl, [sp, #4]
 80078b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078b6:	4628      	mov	r0, r5
 80078b8:	f7ff fd2e 	bl	8007318 <__cvt>
 80078bc:	4680      	mov	r8, r0
 80078be:	e648      	b.n	8007552 <_printf_float+0x112>

080078c0 <_printf_common>:
 80078c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	4691      	mov	r9, r2
 80078c6:	461f      	mov	r7, r3
 80078c8:	688a      	ldr	r2, [r1, #8]
 80078ca:	690b      	ldr	r3, [r1, #16]
 80078cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d0:	4293      	cmp	r3, r2
 80078d2:	bfb8      	it	lt
 80078d4:	4613      	movlt	r3, r2
 80078d6:	f8c9 3000 	str.w	r3, [r9]
 80078da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078de:	4606      	mov	r6, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	b112      	cbz	r2, 80078ea <_printf_common+0x2a>
 80078e4:	3301      	adds	r3, #1
 80078e6:	f8c9 3000 	str.w	r3, [r9]
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	0699      	lsls	r1, r3, #26
 80078ee:	bf42      	ittt	mi
 80078f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078f4:	3302      	addmi	r3, #2
 80078f6:	f8c9 3000 	strmi.w	r3, [r9]
 80078fa:	6825      	ldr	r5, [r4, #0]
 80078fc:	f015 0506 	ands.w	r5, r5, #6
 8007900:	d107      	bne.n	8007912 <_printf_common+0x52>
 8007902:	f104 0a19 	add.w	sl, r4, #25
 8007906:	68e3      	ldr	r3, [r4, #12]
 8007908:	f8d9 2000 	ldr.w	r2, [r9]
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	42ab      	cmp	r3, r5
 8007910:	dc28      	bgt.n	8007964 <_printf_common+0xa4>
 8007912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007916:	6822      	ldr	r2, [r4, #0]
 8007918:	3300      	adds	r3, #0
 800791a:	bf18      	it	ne
 800791c:	2301      	movne	r3, #1
 800791e:	0692      	lsls	r2, r2, #26
 8007920:	d42d      	bmi.n	800797e <_printf_common+0xbe>
 8007922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007926:	4639      	mov	r1, r7
 8007928:	4630      	mov	r0, r6
 800792a:	47c0      	blx	r8
 800792c:	3001      	adds	r0, #1
 800792e:	d020      	beq.n	8007972 <_printf_common+0xb2>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	68e5      	ldr	r5, [r4, #12]
 8007934:	f8d9 2000 	ldr.w	r2, [r9]
 8007938:	f003 0306 	and.w	r3, r3, #6
 800793c:	2b04      	cmp	r3, #4
 800793e:	bf08      	it	eq
 8007940:	1aad      	subeq	r5, r5, r2
 8007942:	68a3      	ldr	r3, [r4, #8]
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	bf0c      	ite	eq
 8007948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800794c:	2500      	movne	r5, #0
 800794e:	4293      	cmp	r3, r2
 8007950:	bfc4      	itt	gt
 8007952:	1a9b      	subgt	r3, r3, r2
 8007954:	18ed      	addgt	r5, r5, r3
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	341a      	adds	r4, #26
 800795c:	454d      	cmp	r5, r9
 800795e:	d11a      	bne.n	8007996 <_printf_common+0xd6>
 8007960:	2000      	movs	r0, #0
 8007962:	e008      	b.n	8007976 <_printf_common+0xb6>
 8007964:	2301      	movs	r3, #1
 8007966:	4652      	mov	r2, sl
 8007968:	4639      	mov	r1, r7
 800796a:	4630      	mov	r0, r6
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d103      	bne.n	800797a <_printf_common+0xba>
 8007972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797a:	3501      	adds	r5, #1
 800797c:	e7c3      	b.n	8007906 <_printf_common+0x46>
 800797e:	18e1      	adds	r1, r4, r3
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	2030      	movs	r0, #48	; 0x30
 8007984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007988:	4422      	add	r2, r4
 800798a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800798e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007992:	3302      	adds	r3, #2
 8007994:	e7c5      	b.n	8007922 <_printf_common+0x62>
 8007996:	2301      	movs	r3, #1
 8007998:	4622      	mov	r2, r4
 800799a:	4639      	mov	r1, r7
 800799c:	4630      	mov	r0, r6
 800799e:	47c0      	blx	r8
 80079a0:	3001      	adds	r0, #1
 80079a2:	d0e6      	beq.n	8007972 <_printf_common+0xb2>
 80079a4:	f109 0901 	add.w	r9, r9, #1
 80079a8:	e7d8      	b.n	800795c <_printf_common+0x9c>
	...

080079ac <_printf_i>:
 80079ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80079b4:	460c      	mov	r4, r1
 80079b6:	7e09      	ldrb	r1, [r1, #24]
 80079b8:	b085      	sub	sp, #20
 80079ba:	296e      	cmp	r1, #110	; 0x6e
 80079bc:	4617      	mov	r7, r2
 80079be:	4606      	mov	r6, r0
 80079c0:	4698      	mov	r8, r3
 80079c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079c4:	f000 80b3 	beq.w	8007b2e <_printf_i+0x182>
 80079c8:	d822      	bhi.n	8007a10 <_printf_i+0x64>
 80079ca:	2963      	cmp	r1, #99	; 0x63
 80079cc:	d036      	beq.n	8007a3c <_printf_i+0x90>
 80079ce:	d80a      	bhi.n	80079e6 <_printf_i+0x3a>
 80079d0:	2900      	cmp	r1, #0
 80079d2:	f000 80b9 	beq.w	8007b48 <_printf_i+0x19c>
 80079d6:	2958      	cmp	r1, #88	; 0x58
 80079d8:	f000 8083 	beq.w	8007ae2 <_printf_i+0x136>
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80079e4:	e032      	b.n	8007a4c <_printf_i+0xa0>
 80079e6:	2964      	cmp	r1, #100	; 0x64
 80079e8:	d001      	beq.n	80079ee <_printf_i+0x42>
 80079ea:	2969      	cmp	r1, #105	; 0x69
 80079ec:	d1f6      	bne.n	80079dc <_printf_i+0x30>
 80079ee:	6820      	ldr	r0, [r4, #0]
 80079f0:	6813      	ldr	r3, [r2, #0]
 80079f2:	0605      	lsls	r5, r0, #24
 80079f4:	f103 0104 	add.w	r1, r3, #4
 80079f8:	d52a      	bpl.n	8007a50 <_printf_i+0xa4>
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6011      	str	r1, [r2, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	da03      	bge.n	8007a0a <_printf_i+0x5e>
 8007a02:	222d      	movs	r2, #45	; 0x2d
 8007a04:	425b      	negs	r3, r3
 8007a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a0a:	486f      	ldr	r0, [pc, #444]	; (8007bc8 <_printf_i+0x21c>)
 8007a0c:	220a      	movs	r2, #10
 8007a0e:	e039      	b.n	8007a84 <_printf_i+0xd8>
 8007a10:	2973      	cmp	r1, #115	; 0x73
 8007a12:	f000 809d 	beq.w	8007b50 <_printf_i+0x1a4>
 8007a16:	d808      	bhi.n	8007a2a <_printf_i+0x7e>
 8007a18:	296f      	cmp	r1, #111	; 0x6f
 8007a1a:	d020      	beq.n	8007a5e <_printf_i+0xb2>
 8007a1c:	2970      	cmp	r1, #112	; 0x70
 8007a1e:	d1dd      	bne.n	80079dc <_printf_i+0x30>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	f043 0320 	orr.w	r3, r3, #32
 8007a26:	6023      	str	r3, [r4, #0]
 8007a28:	e003      	b.n	8007a32 <_printf_i+0x86>
 8007a2a:	2975      	cmp	r1, #117	; 0x75
 8007a2c:	d017      	beq.n	8007a5e <_printf_i+0xb2>
 8007a2e:	2978      	cmp	r1, #120	; 0x78
 8007a30:	d1d4      	bne.n	80079dc <_printf_i+0x30>
 8007a32:	2378      	movs	r3, #120	; 0x78
 8007a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a38:	4864      	ldr	r0, [pc, #400]	; (8007bcc <_printf_i+0x220>)
 8007a3a:	e055      	b.n	8007ae8 <_printf_i+0x13c>
 8007a3c:	6813      	ldr	r3, [r2, #0]
 8007a3e:	1d19      	adds	r1, r3, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6011      	str	r1, [r2, #0]
 8007a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e08c      	b.n	8007b6a <_printf_i+0x1be>
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6011      	str	r1, [r2, #0]
 8007a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a58:	bf18      	it	ne
 8007a5a:	b21b      	sxthne	r3, r3
 8007a5c:	e7cf      	b.n	80079fe <_printf_i+0x52>
 8007a5e:	6813      	ldr	r3, [r2, #0]
 8007a60:	6825      	ldr	r5, [r4, #0]
 8007a62:	1d18      	adds	r0, r3, #4
 8007a64:	6010      	str	r0, [r2, #0]
 8007a66:	0628      	lsls	r0, r5, #24
 8007a68:	d501      	bpl.n	8007a6e <_printf_i+0xc2>
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	e002      	b.n	8007a74 <_printf_i+0xc8>
 8007a6e:	0668      	lsls	r0, r5, #25
 8007a70:	d5fb      	bpl.n	8007a6a <_printf_i+0xbe>
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	4854      	ldr	r0, [pc, #336]	; (8007bc8 <_printf_i+0x21c>)
 8007a76:	296f      	cmp	r1, #111	; 0x6f
 8007a78:	bf14      	ite	ne
 8007a7a:	220a      	movne	r2, #10
 8007a7c:	2208      	moveq	r2, #8
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a84:	6865      	ldr	r5, [r4, #4]
 8007a86:	60a5      	str	r5, [r4, #8]
 8007a88:	2d00      	cmp	r5, #0
 8007a8a:	f2c0 8095 	blt.w	8007bb8 <_printf_i+0x20c>
 8007a8e:	6821      	ldr	r1, [r4, #0]
 8007a90:	f021 0104 	bic.w	r1, r1, #4
 8007a94:	6021      	str	r1, [r4, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d13d      	bne.n	8007b16 <_printf_i+0x16a>
 8007a9a:	2d00      	cmp	r5, #0
 8007a9c:	f040 808e 	bne.w	8007bbc <_printf_i+0x210>
 8007aa0:	4665      	mov	r5, ip
 8007aa2:	2a08      	cmp	r2, #8
 8007aa4:	d10b      	bne.n	8007abe <_printf_i+0x112>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	07db      	lsls	r3, r3, #31
 8007aaa:	d508      	bpl.n	8007abe <_printf_i+0x112>
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	6862      	ldr	r2, [r4, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	bfde      	ittt	le
 8007ab4:	2330      	movle	r3, #48	; 0x30
 8007ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007aba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007abe:	ebac 0305 	sub.w	r3, ip, r5
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	f8cd 8000 	str.w	r8, [sp]
 8007ac8:	463b      	mov	r3, r7
 8007aca:	aa03      	add	r2, sp, #12
 8007acc:	4621      	mov	r1, r4
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff fef6 	bl	80078c0 <_printf_common>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d14d      	bne.n	8007b74 <_printf_i+0x1c8>
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007adc:	b005      	add	sp, #20
 8007ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae2:	4839      	ldr	r0, [pc, #228]	; (8007bc8 <_printf_i+0x21c>)
 8007ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ae8:	6813      	ldr	r3, [r2, #0]
 8007aea:	6821      	ldr	r1, [r4, #0]
 8007aec:	1d1d      	adds	r5, r3, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6015      	str	r5, [r2, #0]
 8007af2:	060a      	lsls	r2, r1, #24
 8007af4:	d50b      	bpl.n	8007b0e <_printf_i+0x162>
 8007af6:	07ca      	lsls	r2, r1, #31
 8007af8:	bf44      	itt	mi
 8007afa:	f041 0120 	orrmi.w	r1, r1, #32
 8007afe:	6021      	strmi	r1, [r4, #0]
 8007b00:	b91b      	cbnz	r3, 8007b0a <_printf_i+0x15e>
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	f022 0220 	bic.w	r2, r2, #32
 8007b08:	6022      	str	r2, [r4, #0]
 8007b0a:	2210      	movs	r2, #16
 8007b0c:	e7b7      	b.n	8007a7e <_printf_i+0xd2>
 8007b0e:	064d      	lsls	r5, r1, #25
 8007b10:	bf48      	it	mi
 8007b12:	b29b      	uxthmi	r3, r3
 8007b14:	e7ef      	b.n	8007af6 <_printf_i+0x14a>
 8007b16:	4665      	mov	r5, ip
 8007b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8007b20:	5cc3      	ldrb	r3, [r0, r3]
 8007b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b26:	460b      	mov	r3, r1
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	d1f5      	bne.n	8007b18 <_printf_i+0x16c>
 8007b2c:	e7b9      	b.n	8007aa2 <_printf_i+0xf6>
 8007b2e:	6813      	ldr	r3, [r2, #0]
 8007b30:	6825      	ldr	r5, [r4, #0]
 8007b32:	6961      	ldr	r1, [r4, #20]
 8007b34:	1d18      	adds	r0, r3, #4
 8007b36:	6010      	str	r0, [r2, #0]
 8007b38:	0628      	lsls	r0, r5, #24
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	d501      	bpl.n	8007b42 <_printf_i+0x196>
 8007b3e:	6019      	str	r1, [r3, #0]
 8007b40:	e002      	b.n	8007b48 <_printf_i+0x19c>
 8007b42:	066a      	lsls	r2, r5, #25
 8007b44:	d5fb      	bpl.n	8007b3e <_printf_i+0x192>
 8007b46:	8019      	strh	r1, [r3, #0]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	4665      	mov	r5, ip
 8007b4e:	e7b9      	b.n	8007ac4 <_printf_i+0x118>
 8007b50:	6813      	ldr	r3, [r2, #0]
 8007b52:	1d19      	adds	r1, r3, #4
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	681d      	ldr	r5, [r3, #0]
 8007b58:	6862      	ldr	r2, [r4, #4]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f7f8 fb3f 	bl	80001e0 <memchr>
 8007b62:	b108      	cbz	r0, 8007b68 <_printf_i+0x1bc>
 8007b64:	1b40      	subs	r0, r0, r5
 8007b66:	6060      	str	r0, [r4, #4]
 8007b68:	6863      	ldr	r3, [r4, #4]
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b72:	e7a7      	b.n	8007ac4 <_printf_i+0x118>
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	462a      	mov	r2, r5
 8007b78:	4639      	mov	r1, r7
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	47c0      	blx	r8
 8007b7e:	3001      	adds	r0, #1
 8007b80:	d0aa      	beq.n	8007ad8 <_printf_i+0x12c>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	079b      	lsls	r3, r3, #30
 8007b86:	d413      	bmi.n	8007bb0 <_printf_i+0x204>
 8007b88:	68e0      	ldr	r0, [r4, #12]
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	4298      	cmp	r0, r3
 8007b8e:	bfb8      	it	lt
 8007b90:	4618      	movlt	r0, r3
 8007b92:	e7a3      	b.n	8007adc <_printf_i+0x130>
 8007b94:	2301      	movs	r3, #1
 8007b96:	464a      	mov	r2, r9
 8007b98:	4639      	mov	r1, r7
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	47c0      	blx	r8
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d09a      	beq.n	8007ad8 <_printf_i+0x12c>
 8007ba2:	3501      	adds	r5, #1
 8007ba4:	68e3      	ldr	r3, [r4, #12]
 8007ba6:	9a03      	ldr	r2, [sp, #12]
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	42ab      	cmp	r3, r5
 8007bac:	dcf2      	bgt.n	8007b94 <_printf_i+0x1e8>
 8007bae:	e7eb      	b.n	8007b88 <_printf_i+0x1dc>
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	f104 0919 	add.w	r9, r4, #25
 8007bb6:	e7f5      	b.n	8007ba4 <_printf_i+0x1f8>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1ac      	bne.n	8007b16 <_printf_i+0x16a>
 8007bbc:	7803      	ldrb	r3, [r0, #0]
 8007bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc6:	e76c      	b.n	8007aa2 <_printf_i+0xf6>
 8007bc8:	08009c8e 	.word	0x08009c8e
 8007bcc:	08009c9f 	.word	0x08009c9f

08007bd0 <iprintf>:
 8007bd0:	b40f      	push	{r0, r1, r2, r3}
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <iprintf+0x2c>)
 8007bd4:	b513      	push	{r0, r1, r4, lr}
 8007bd6:	681c      	ldr	r4, [r3, #0]
 8007bd8:	b124      	cbz	r4, 8007be4 <iprintf+0x14>
 8007bda:	69a3      	ldr	r3, [r4, #24]
 8007bdc:	b913      	cbnz	r3, 8007be4 <iprintf+0x14>
 8007bde:	4620      	mov	r0, r4
 8007be0:	f001 f866 	bl	8008cb0 <__sinit>
 8007be4:	ab05      	add	r3, sp, #20
 8007be6:	9a04      	ldr	r2, [sp, #16]
 8007be8:	68a1      	ldr	r1, [r4, #8]
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	4620      	mov	r0, r4
 8007bee:	f001 fd29 	bl	8009644 <_vfiprintf_r>
 8007bf2:	b002      	add	sp, #8
 8007bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf8:	b004      	add	sp, #16
 8007bfa:	4770      	bx	lr
 8007bfc:	200000d0 	.word	0x200000d0

08007c00 <_puts_r>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	460e      	mov	r6, r1
 8007c04:	4605      	mov	r5, r0
 8007c06:	b118      	cbz	r0, 8007c10 <_puts_r+0x10>
 8007c08:	6983      	ldr	r3, [r0, #24]
 8007c0a:	b90b      	cbnz	r3, 8007c10 <_puts_r+0x10>
 8007c0c:	f001 f850 	bl	8008cb0 <__sinit>
 8007c10:	69ab      	ldr	r3, [r5, #24]
 8007c12:	68ac      	ldr	r4, [r5, #8]
 8007c14:	b913      	cbnz	r3, 8007c1c <_puts_r+0x1c>
 8007c16:	4628      	mov	r0, r5
 8007c18:	f001 f84a 	bl	8008cb0 <__sinit>
 8007c1c:	4b23      	ldr	r3, [pc, #140]	; (8007cac <_puts_r+0xac>)
 8007c1e:	429c      	cmp	r4, r3
 8007c20:	d117      	bne.n	8007c52 <_puts_r+0x52>
 8007c22:	686c      	ldr	r4, [r5, #4]
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	071b      	lsls	r3, r3, #28
 8007c28:	d51d      	bpl.n	8007c66 <_puts_r+0x66>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	b1db      	cbz	r3, 8007c66 <_puts_r+0x66>
 8007c2e:	3e01      	subs	r6, #1
 8007c30:	68a3      	ldr	r3, [r4, #8]
 8007c32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c36:	3b01      	subs	r3, #1
 8007c38:	60a3      	str	r3, [r4, #8]
 8007c3a:	b9e9      	cbnz	r1, 8007c78 <_puts_r+0x78>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da2e      	bge.n	8007c9e <_puts_r+0x9e>
 8007c40:	4622      	mov	r2, r4
 8007c42:	210a      	movs	r1, #10
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 f83f 	bl	8007cc8 <__swbuf_r>
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d011      	beq.n	8007c72 <_puts_r+0x72>
 8007c4e:	200a      	movs	r0, #10
 8007c50:	e011      	b.n	8007c76 <_puts_r+0x76>
 8007c52:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <_puts_r+0xb0>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d101      	bne.n	8007c5c <_puts_r+0x5c>
 8007c58:	68ac      	ldr	r4, [r5, #8]
 8007c5a:	e7e3      	b.n	8007c24 <_puts_r+0x24>
 8007c5c:	4b15      	ldr	r3, [pc, #84]	; (8007cb4 <_puts_r+0xb4>)
 8007c5e:	429c      	cmp	r4, r3
 8007c60:	bf08      	it	eq
 8007c62:	68ec      	ldreq	r4, [r5, #12]
 8007c64:	e7de      	b.n	8007c24 <_puts_r+0x24>
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f87f 	bl	8007d6c <__swsetup_r>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0dd      	beq.n	8007c2e <_puts_r+0x2e>
 8007c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da04      	bge.n	8007c86 <_puts_r+0x86>
 8007c7c:	69a2      	ldr	r2, [r4, #24]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	dc06      	bgt.n	8007c90 <_puts_r+0x90>
 8007c82:	290a      	cmp	r1, #10
 8007c84:	d004      	beq.n	8007c90 <_puts_r+0x90>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	6022      	str	r2, [r4, #0]
 8007c8c:	7019      	strb	r1, [r3, #0]
 8007c8e:	e7cf      	b.n	8007c30 <_puts_r+0x30>
 8007c90:	4622      	mov	r2, r4
 8007c92:	4628      	mov	r0, r5
 8007c94:	f000 f818 	bl	8007cc8 <__swbuf_r>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d1c9      	bne.n	8007c30 <_puts_r+0x30>
 8007c9c:	e7e9      	b.n	8007c72 <_puts_r+0x72>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	200a      	movs	r0, #10
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	6022      	str	r2, [r4, #0]
 8007ca6:	7018      	strb	r0, [r3, #0]
 8007ca8:	e7e5      	b.n	8007c76 <_puts_r+0x76>
 8007caa:	bf00      	nop
 8007cac:	08009ce0 	.word	0x08009ce0
 8007cb0:	08009d00 	.word	0x08009d00
 8007cb4:	08009cc0 	.word	0x08009cc0

08007cb8 <puts>:
 8007cb8:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <puts+0xc>)
 8007cba:	4601      	mov	r1, r0
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f7ff bf9f 	b.w	8007c00 <_puts_r>
 8007cc2:	bf00      	nop
 8007cc4:	200000d0 	.word	0x200000d0

08007cc8 <__swbuf_r>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	460e      	mov	r6, r1
 8007ccc:	4614      	mov	r4, r2
 8007cce:	4605      	mov	r5, r0
 8007cd0:	b118      	cbz	r0, 8007cda <__swbuf_r+0x12>
 8007cd2:	6983      	ldr	r3, [r0, #24]
 8007cd4:	b90b      	cbnz	r3, 8007cda <__swbuf_r+0x12>
 8007cd6:	f000 ffeb 	bl	8008cb0 <__sinit>
 8007cda:	4b21      	ldr	r3, [pc, #132]	; (8007d60 <__swbuf_r+0x98>)
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d12a      	bne.n	8007d36 <__swbuf_r+0x6e>
 8007ce0:	686c      	ldr	r4, [r5, #4]
 8007ce2:	69a3      	ldr	r3, [r4, #24]
 8007ce4:	60a3      	str	r3, [r4, #8]
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	071a      	lsls	r2, r3, #28
 8007cea:	d52e      	bpl.n	8007d4a <__swbuf_r+0x82>
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	b363      	cbz	r3, 8007d4a <__swbuf_r+0x82>
 8007cf0:	6923      	ldr	r3, [r4, #16]
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	1ac0      	subs	r0, r0, r3
 8007cf6:	6963      	ldr	r3, [r4, #20]
 8007cf8:	b2f6      	uxtb	r6, r6
 8007cfa:	4283      	cmp	r3, r0
 8007cfc:	4637      	mov	r7, r6
 8007cfe:	dc04      	bgt.n	8007d0a <__swbuf_r+0x42>
 8007d00:	4621      	mov	r1, r4
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 ff6a 	bl	8008bdc <_fflush_r>
 8007d08:	bb28      	cbnz	r0, 8007d56 <__swbuf_r+0x8e>
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	60a3      	str	r3, [r4, #8]
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	6022      	str	r2, [r4, #0]
 8007d16:	701e      	strb	r6, [r3, #0]
 8007d18:	6963      	ldr	r3, [r4, #20]
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	4283      	cmp	r3, r0
 8007d1e:	d004      	beq.n	8007d2a <__swbuf_r+0x62>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	07db      	lsls	r3, r3, #31
 8007d24:	d519      	bpl.n	8007d5a <__swbuf_r+0x92>
 8007d26:	2e0a      	cmp	r6, #10
 8007d28:	d117      	bne.n	8007d5a <__swbuf_r+0x92>
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f000 ff55 	bl	8008bdc <_fflush_r>
 8007d32:	b190      	cbz	r0, 8007d5a <__swbuf_r+0x92>
 8007d34:	e00f      	b.n	8007d56 <__swbuf_r+0x8e>
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <__swbuf_r+0x9c>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	d101      	bne.n	8007d40 <__swbuf_r+0x78>
 8007d3c:	68ac      	ldr	r4, [r5, #8]
 8007d3e:	e7d0      	b.n	8007ce2 <__swbuf_r+0x1a>
 8007d40:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <__swbuf_r+0xa0>)
 8007d42:	429c      	cmp	r4, r3
 8007d44:	bf08      	it	eq
 8007d46:	68ec      	ldreq	r4, [r5, #12]
 8007d48:	e7cb      	b.n	8007ce2 <__swbuf_r+0x1a>
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f000 f80d 	bl	8007d6c <__swsetup_r>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d0cc      	beq.n	8007cf0 <__swbuf_r+0x28>
 8007d56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	08009ce0 	.word	0x08009ce0
 8007d64:	08009d00 	.word	0x08009d00
 8007d68:	08009cc0 	.word	0x08009cc0

08007d6c <__swsetup_r>:
 8007d6c:	4b32      	ldr	r3, [pc, #200]	; (8007e38 <__swsetup_r+0xcc>)
 8007d6e:	b570      	push	{r4, r5, r6, lr}
 8007d70:	681d      	ldr	r5, [r3, #0]
 8007d72:	4606      	mov	r6, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	b125      	cbz	r5, 8007d82 <__swsetup_r+0x16>
 8007d78:	69ab      	ldr	r3, [r5, #24]
 8007d7a:	b913      	cbnz	r3, 8007d82 <__swsetup_r+0x16>
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f000 ff97 	bl	8008cb0 <__sinit>
 8007d82:	4b2e      	ldr	r3, [pc, #184]	; (8007e3c <__swsetup_r+0xd0>)
 8007d84:	429c      	cmp	r4, r3
 8007d86:	d10f      	bne.n	8007da8 <__swsetup_r+0x3c>
 8007d88:	686c      	ldr	r4, [r5, #4]
 8007d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	0715      	lsls	r5, r2, #28
 8007d92:	d42c      	bmi.n	8007dee <__swsetup_r+0x82>
 8007d94:	06d0      	lsls	r0, r2, #27
 8007d96:	d411      	bmi.n	8007dbc <__swsetup_r+0x50>
 8007d98:	2209      	movs	r2, #9
 8007d9a:	6032      	str	r2, [r6, #0]
 8007d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da6:	e03e      	b.n	8007e26 <__swsetup_r+0xba>
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <__swsetup_r+0xd4>)
 8007daa:	429c      	cmp	r4, r3
 8007dac:	d101      	bne.n	8007db2 <__swsetup_r+0x46>
 8007dae:	68ac      	ldr	r4, [r5, #8]
 8007db0:	e7eb      	b.n	8007d8a <__swsetup_r+0x1e>
 8007db2:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <__swsetup_r+0xd8>)
 8007db4:	429c      	cmp	r4, r3
 8007db6:	bf08      	it	eq
 8007db8:	68ec      	ldreq	r4, [r5, #12]
 8007dba:	e7e6      	b.n	8007d8a <__swsetup_r+0x1e>
 8007dbc:	0751      	lsls	r1, r2, #29
 8007dbe:	d512      	bpl.n	8007de6 <__swsetup_r+0x7a>
 8007dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc2:	b141      	cbz	r1, 8007dd6 <__swsetup_r+0x6a>
 8007dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d002      	beq.n	8007dd2 <__swsetup_r+0x66>
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f001 fb67 	bl	80094a0 <_free_r>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	2300      	movs	r3, #0
 8007de0:	6063      	str	r3, [r4, #4]
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	f043 0308 	orr.w	r3, r3, #8
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	b94b      	cbnz	r3, 8007e06 <__swsetup_r+0x9a>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfc:	d003      	beq.n	8007e06 <__swsetup_r+0x9a>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4630      	mov	r0, r6
 8007e02:	f001 f811 	bl	8008e28 <__smakebuf_r>
 8007e06:	89a2      	ldrh	r2, [r4, #12]
 8007e08:	f012 0301 	ands.w	r3, r2, #1
 8007e0c:	d00c      	beq.n	8007e28 <__swsetup_r+0xbc>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60a3      	str	r3, [r4, #8]
 8007e12:	6963      	ldr	r3, [r4, #20]
 8007e14:	425b      	negs	r3, r3
 8007e16:	61a3      	str	r3, [r4, #24]
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	b953      	cbnz	r3, 8007e32 <__swsetup_r+0xc6>
 8007e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e24:	d1ba      	bne.n	8007d9c <__swsetup_r+0x30>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	0792      	lsls	r2, r2, #30
 8007e2a:	bf58      	it	pl
 8007e2c:	6963      	ldrpl	r3, [r4, #20]
 8007e2e:	60a3      	str	r3, [r4, #8]
 8007e30:	e7f2      	b.n	8007e18 <__swsetup_r+0xac>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e7f7      	b.n	8007e26 <__swsetup_r+0xba>
 8007e36:	bf00      	nop
 8007e38:	200000d0 	.word	0x200000d0
 8007e3c:	08009ce0 	.word	0x08009ce0
 8007e40:	08009d00 	.word	0x08009d00
 8007e44:	08009cc0 	.word	0x08009cc0

08007e48 <quorem>:
 8007e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	6903      	ldr	r3, [r0, #16]
 8007e4e:	690c      	ldr	r4, [r1, #16]
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	4680      	mov	r8, r0
 8007e54:	f2c0 8082 	blt.w	8007f5c <quorem+0x114>
 8007e58:	3c01      	subs	r4, #1
 8007e5a:	f101 0714 	add.w	r7, r1, #20
 8007e5e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e62:	f100 0614 	add.w	r6, r0, #20
 8007e66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e6e:	eb06 030c 	add.w	r3, r6, ip
 8007e72:	3501      	adds	r5, #1
 8007e74:	eb07 090c 	add.w	r9, r7, ip
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e7e:	b395      	cbz	r5, 8007ee6 <quorem+0x9e>
 8007e80:	f04f 0a00 	mov.w	sl, #0
 8007e84:	4638      	mov	r0, r7
 8007e86:	46b6      	mov	lr, r6
 8007e88:	46d3      	mov	fp, sl
 8007e8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e8e:	b293      	uxth	r3, r2
 8007e90:	fb05 a303 	mla	r3, r5, r3, sl
 8007e94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	ebab 0303 	sub.w	r3, fp, r3
 8007e9e:	0c12      	lsrs	r2, r2, #16
 8007ea0:	f8de b000 	ldr.w	fp, [lr]
 8007ea4:	fb05 a202 	mla	r2, r5, r2, sl
 8007ea8:	fa13 f38b 	uxtah	r3, r3, fp
 8007eac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007eb0:	fa1f fb82 	uxth.w	fp, r2
 8007eb4:	f8de 2000 	ldr.w	r2, [lr]
 8007eb8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ebc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ec6:	4581      	cmp	r9, r0
 8007ec8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ecc:	f84e 3b04 	str.w	r3, [lr], #4
 8007ed0:	d2db      	bcs.n	8007e8a <quorem+0x42>
 8007ed2:	f856 300c 	ldr.w	r3, [r6, ip]
 8007ed6:	b933      	cbnz	r3, 8007ee6 <quorem+0x9e>
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	3b04      	subs	r3, #4
 8007edc:	429e      	cmp	r6, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	d330      	bcc.n	8007f44 <quorem+0xfc>
 8007ee2:	f8c8 4010 	str.w	r4, [r8, #16]
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	f001 fa06 	bl	80092f8 <__mcmp>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	db25      	blt.n	8007f3c <quorem+0xf4>
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f04f 0c00 	mov.w	ip, #0
 8007ef8:	f857 2b04 	ldr.w	r2, [r7], #4
 8007efc:	f8d0 e000 	ldr.w	lr, [r0]
 8007f00:	b293      	uxth	r3, r2
 8007f02:	ebac 0303 	sub.w	r3, ip, r3
 8007f06:	0c12      	lsrs	r2, r2, #16
 8007f08:	fa13 f38e 	uxtah	r3, r3, lr
 8007f0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f1a:	45b9      	cmp	r9, r7
 8007f1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f20:	f840 3b04 	str.w	r3, [r0], #4
 8007f24:	d2e8      	bcs.n	8007ef8 <quorem+0xb0>
 8007f26:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f2a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f2e:	b92a      	cbnz	r2, 8007f3c <quorem+0xf4>
 8007f30:	3b04      	subs	r3, #4
 8007f32:	429e      	cmp	r6, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	d30b      	bcc.n	8007f50 <quorem+0x108>
 8007f38:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	b003      	add	sp, #12
 8007f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	3b04      	subs	r3, #4
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d1ca      	bne.n	8007ee2 <quorem+0x9a>
 8007f4c:	3c01      	subs	r4, #1
 8007f4e:	e7c5      	b.n	8007edc <quorem+0x94>
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	3b04      	subs	r3, #4
 8007f54:	2a00      	cmp	r2, #0
 8007f56:	d1ef      	bne.n	8007f38 <quorem+0xf0>
 8007f58:	3c01      	subs	r4, #1
 8007f5a:	e7ea      	b.n	8007f32 <quorem+0xea>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e7ee      	b.n	8007f3e <quorem+0xf6>

08007f60 <_dtoa_r>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	ec57 6b10 	vmov	r6, r7, d0
 8007f68:	b097      	sub	sp, #92	; 0x5c
 8007f6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f6c:	9106      	str	r1, [sp, #24]
 8007f6e:	4604      	mov	r4, r0
 8007f70:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f72:	9312      	str	r3, [sp, #72]	; 0x48
 8007f74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f78:	e9cd 6700 	strd	r6, r7, [sp]
 8007f7c:	b93d      	cbnz	r5, 8007f8e <_dtoa_r+0x2e>
 8007f7e:	2010      	movs	r0, #16
 8007f80:	f000 ff92 	bl	8008ea8 <malloc>
 8007f84:	6260      	str	r0, [r4, #36]	; 0x24
 8007f86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f8a:	6005      	str	r5, [r0, #0]
 8007f8c:	60c5      	str	r5, [r0, #12]
 8007f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f90:	6819      	ldr	r1, [r3, #0]
 8007f92:	b151      	cbz	r1, 8007faa <_dtoa_r+0x4a>
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	604a      	str	r2, [r1, #4]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	4093      	lsls	r3, r2
 8007f9c:	608b      	str	r3, [r1, #8]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 ffc9 	bl	8008f36 <_Bfree>
 8007fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	1e3b      	subs	r3, r7, #0
 8007fac:	bfbb      	ittet	lt
 8007fae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fb2:	9301      	strlt	r3, [sp, #4]
 8007fb4:	2300      	movge	r3, #0
 8007fb6:	2201      	movlt	r2, #1
 8007fb8:	bfac      	ite	ge
 8007fba:	f8c8 3000 	strge.w	r3, [r8]
 8007fbe:	f8c8 2000 	strlt.w	r2, [r8]
 8007fc2:	4baf      	ldr	r3, [pc, #700]	; (8008280 <_dtoa_r+0x320>)
 8007fc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007fc8:	ea33 0308 	bics.w	r3, r3, r8
 8007fcc:	d114      	bne.n	8007ff8 <_dtoa_r+0x98>
 8007fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	b923      	cbnz	r3, 8007fe4 <_dtoa_r+0x84>
 8007fda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f000 8542 	beq.w	8008a68 <_dtoa_r+0xb08>
 8007fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008294 <_dtoa_r+0x334>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 8544 	beq.w	8008a78 <_dtoa_r+0xb18>
 8007ff0:	f10b 0303 	add.w	r3, fp, #3
 8007ff4:	f000 bd3e 	b.w	8008a74 <_dtoa_r+0xb14>
 8007ff8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008008:	4681      	mov	r9, r0
 800800a:	b168      	cbz	r0, 8008028 <_dtoa_r+0xc8>
 800800c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800800e:	2301      	movs	r3, #1
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8524 	beq.w	8008a62 <_dtoa_r+0xb02>
 800801a:	4b9a      	ldr	r3, [pc, #616]	; (8008284 <_dtoa_r+0x324>)
 800801c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800801e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	f000 bd28 	b.w	8008a78 <_dtoa_r+0xb18>
 8008028:	aa14      	add	r2, sp, #80	; 0x50
 800802a:	a915      	add	r1, sp, #84	; 0x54
 800802c:	ec47 6b10 	vmov	d0, r6, r7
 8008030:	4620      	mov	r0, r4
 8008032:	f001 f9d8 	bl	80093e6 <__d2b>
 8008036:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800803a:	9004      	str	r0, [sp, #16]
 800803c:	2d00      	cmp	r5, #0
 800803e:	d07c      	beq.n	800813a <_dtoa_r+0x1da>
 8008040:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008044:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008048:	46b2      	mov	sl, r6
 800804a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800804e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008052:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008056:	2200      	movs	r2, #0
 8008058:	4b8b      	ldr	r3, [pc, #556]	; (8008288 <_dtoa_r+0x328>)
 800805a:	4650      	mov	r0, sl
 800805c:	4659      	mov	r1, fp
 800805e:	f7f8 f913 	bl	8000288 <__aeabi_dsub>
 8008062:	a381      	add	r3, pc, #516	; (adr r3, 8008268 <_dtoa_r+0x308>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 fac6 	bl	80005f8 <__aeabi_dmul>
 800806c:	a380      	add	r3, pc, #512	; (adr r3, 8008270 <_dtoa_r+0x310>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7f8 f90b 	bl	800028c <__adddf3>
 8008076:	4606      	mov	r6, r0
 8008078:	4628      	mov	r0, r5
 800807a:	460f      	mov	r7, r1
 800807c:	f7f8 fa52 	bl	8000524 <__aeabi_i2d>
 8008080:	a37d      	add	r3, pc, #500	; (adr r3, 8008278 <_dtoa_r+0x318>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 fab7 	bl	80005f8 <__aeabi_dmul>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 f8fb 	bl	800028c <__adddf3>
 8008096:	4606      	mov	r6, r0
 8008098:	460f      	mov	r7, r1
 800809a:	f7f8 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800809e:	2200      	movs	r2, #0
 80080a0:	4682      	mov	sl, r0
 80080a2:	2300      	movs	r3, #0
 80080a4:	4630      	mov	r0, r6
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 fd18 	bl	8000adc <__aeabi_dcmplt>
 80080ac:	b148      	cbz	r0, 80080c2 <_dtoa_r+0x162>
 80080ae:	4650      	mov	r0, sl
 80080b0:	f7f8 fa38 	bl	8000524 <__aeabi_i2d>
 80080b4:	4632      	mov	r2, r6
 80080b6:	463b      	mov	r3, r7
 80080b8:	f7f8 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80080bc:	b908      	cbnz	r0, 80080c2 <_dtoa_r+0x162>
 80080be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080c2:	f1ba 0f16 	cmp.w	sl, #22
 80080c6:	d859      	bhi.n	800817c <_dtoa_r+0x21c>
 80080c8:	4970      	ldr	r1, [pc, #448]	; (800828c <_dtoa_r+0x32c>)
 80080ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d6:	f7f8 fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d050      	beq.n	8008180 <_dtoa_r+0x220>
 80080de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080e2:	2300      	movs	r3, #0
 80080e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080e8:	1b5d      	subs	r5, r3, r5
 80080ea:	f1b5 0801 	subs.w	r8, r5, #1
 80080ee:	bf49      	itett	mi
 80080f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80080f4:	2300      	movpl	r3, #0
 80080f6:	9305      	strmi	r3, [sp, #20]
 80080f8:	f04f 0800 	movmi.w	r8, #0
 80080fc:	bf58      	it	pl
 80080fe:	9305      	strpl	r3, [sp, #20]
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	db3e      	blt.n	8008184 <_dtoa_r+0x224>
 8008106:	2300      	movs	r3, #0
 8008108:	44d0      	add	r8, sl
 800810a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800810e:	9307      	str	r3, [sp, #28]
 8008110:	9b06      	ldr	r3, [sp, #24]
 8008112:	2b09      	cmp	r3, #9
 8008114:	f200 8090 	bhi.w	8008238 <_dtoa_r+0x2d8>
 8008118:	2b05      	cmp	r3, #5
 800811a:	bfc4      	itt	gt
 800811c:	3b04      	subgt	r3, #4
 800811e:	9306      	strgt	r3, [sp, #24]
 8008120:	9b06      	ldr	r3, [sp, #24]
 8008122:	f1a3 0302 	sub.w	r3, r3, #2
 8008126:	bfcc      	ite	gt
 8008128:	2500      	movgt	r5, #0
 800812a:	2501      	movle	r5, #1
 800812c:	2b03      	cmp	r3, #3
 800812e:	f200 808f 	bhi.w	8008250 <_dtoa_r+0x2f0>
 8008132:	e8df f003 	tbb	[pc, r3]
 8008136:	7f7d      	.short	0x7f7d
 8008138:	7131      	.short	0x7131
 800813a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800813e:	441d      	add	r5, r3
 8008140:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008144:	2820      	cmp	r0, #32
 8008146:	dd13      	ble.n	8008170 <_dtoa_r+0x210>
 8008148:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800814c:	9b00      	ldr	r3, [sp, #0]
 800814e:	fa08 f800 	lsl.w	r8, r8, r0
 8008152:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008156:	fa23 f000 	lsr.w	r0, r3, r0
 800815a:	ea48 0000 	orr.w	r0, r8, r0
 800815e:	f7f8 f9d1 	bl	8000504 <__aeabi_ui2d>
 8008162:	2301      	movs	r3, #1
 8008164:	4682      	mov	sl, r0
 8008166:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800816a:	3d01      	subs	r5, #1
 800816c:	9313      	str	r3, [sp, #76]	; 0x4c
 800816e:	e772      	b.n	8008056 <_dtoa_r+0xf6>
 8008170:	9b00      	ldr	r3, [sp, #0]
 8008172:	f1c0 0020 	rsb	r0, r0, #32
 8008176:	fa03 f000 	lsl.w	r0, r3, r0
 800817a:	e7f0      	b.n	800815e <_dtoa_r+0x1fe>
 800817c:	2301      	movs	r3, #1
 800817e:	e7b1      	b.n	80080e4 <_dtoa_r+0x184>
 8008180:	900f      	str	r0, [sp, #60]	; 0x3c
 8008182:	e7b0      	b.n	80080e6 <_dtoa_r+0x186>
 8008184:	9b05      	ldr	r3, [sp, #20]
 8008186:	eba3 030a 	sub.w	r3, r3, sl
 800818a:	9305      	str	r3, [sp, #20]
 800818c:	f1ca 0300 	rsb	r3, sl, #0
 8008190:	9307      	str	r3, [sp, #28]
 8008192:	2300      	movs	r3, #0
 8008194:	930e      	str	r3, [sp, #56]	; 0x38
 8008196:	e7bb      	b.n	8008110 <_dtoa_r+0x1b0>
 8008198:	2301      	movs	r3, #1
 800819a:	930a      	str	r3, [sp, #40]	; 0x28
 800819c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd59      	ble.n	8008256 <_dtoa_r+0x2f6>
 80081a2:	9302      	str	r3, [sp, #8]
 80081a4:	4699      	mov	r9, r3
 80081a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081a8:	2200      	movs	r2, #0
 80081aa:	6072      	str	r2, [r6, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	f102 0014 	add.w	r0, r2, #20
 80081b2:	4298      	cmp	r0, r3
 80081b4:	6871      	ldr	r1, [r6, #4]
 80081b6:	d953      	bls.n	8008260 <_dtoa_r+0x300>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fe88 	bl	8008ece <_Balloc>
 80081be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c0:	6030      	str	r0, [r6, #0]
 80081c2:	f1b9 0f0e 	cmp.w	r9, #14
 80081c6:	f8d3 b000 	ldr.w	fp, [r3]
 80081ca:	f200 80e6 	bhi.w	800839a <_dtoa_r+0x43a>
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	f000 80e3 	beq.w	800839a <_dtoa_r+0x43a>
 80081d4:	ed9d 7b00 	vldr	d7, [sp]
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80081e0:	dd74      	ble.n	80082cc <_dtoa_r+0x36c>
 80081e2:	4a2a      	ldr	r2, [pc, #168]	; (800828c <_dtoa_r+0x32c>)
 80081e4:	f00a 030f 	and.w	r3, sl, #15
 80081e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081ec:	ed93 7b00 	vldr	d7, [r3]
 80081f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80081f4:	06f0      	lsls	r0, r6, #27
 80081f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80081fa:	d565      	bpl.n	80082c8 <_dtoa_r+0x368>
 80081fc:	4b24      	ldr	r3, [pc, #144]	; (8008290 <_dtoa_r+0x330>)
 80081fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008202:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008206:	f7f8 fb21 	bl	800084c <__aeabi_ddiv>
 800820a:	e9cd 0100 	strd	r0, r1, [sp]
 800820e:	f006 060f 	and.w	r6, r6, #15
 8008212:	2503      	movs	r5, #3
 8008214:	4f1e      	ldr	r7, [pc, #120]	; (8008290 <_dtoa_r+0x330>)
 8008216:	e04c      	b.n	80082b2 <_dtoa_r+0x352>
 8008218:	2301      	movs	r3, #1
 800821a:	930a      	str	r3, [sp, #40]	; 0x28
 800821c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821e:	4453      	add	r3, sl
 8008220:	f103 0901 	add.w	r9, r3, #1
 8008224:	9302      	str	r3, [sp, #8]
 8008226:	464b      	mov	r3, r9
 8008228:	2b01      	cmp	r3, #1
 800822a:	bfb8      	it	lt
 800822c:	2301      	movlt	r3, #1
 800822e:	e7ba      	b.n	80081a6 <_dtoa_r+0x246>
 8008230:	2300      	movs	r3, #0
 8008232:	e7b2      	b.n	800819a <_dtoa_r+0x23a>
 8008234:	2300      	movs	r3, #0
 8008236:	e7f0      	b.n	800821a <_dtoa_r+0x2ba>
 8008238:	2501      	movs	r5, #1
 800823a:	2300      	movs	r3, #0
 800823c:	9306      	str	r3, [sp, #24]
 800823e:	950a      	str	r5, [sp, #40]	; 0x28
 8008240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008244:	9302      	str	r3, [sp, #8]
 8008246:	4699      	mov	r9, r3
 8008248:	2200      	movs	r2, #0
 800824a:	2312      	movs	r3, #18
 800824c:	920b      	str	r2, [sp, #44]	; 0x2c
 800824e:	e7aa      	b.n	80081a6 <_dtoa_r+0x246>
 8008250:	2301      	movs	r3, #1
 8008252:	930a      	str	r3, [sp, #40]	; 0x28
 8008254:	e7f4      	b.n	8008240 <_dtoa_r+0x2e0>
 8008256:	2301      	movs	r3, #1
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	4699      	mov	r9, r3
 800825c:	461a      	mov	r2, r3
 800825e:	e7f5      	b.n	800824c <_dtoa_r+0x2ec>
 8008260:	3101      	adds	r1, #1
 8008262:	6071      	str	r1, [r6, #4]
 8008264:	0052      	lsls	r2, r2, #1
 8008266:	e7a2      	b.n	80081ae <_dtoa_r+0x24e>
 8008268:	636f4361 	.word	0x636f4361
 800826c:	3fd287a7 	.word	0x3fd287a7
 8008270:	8b60c8b3 	.word	0x8b60c8b3
 8008274:	3fc68a28 	.word	0x3fc68a28
 8008278:	509f79fb 	.word	0x509f79fb
 800827c:	3fd34413 	.word	0x3fd34413
 8008280:	7ff00000 	.word	0x7ff00000
 8008284:	08009c8d 	.word	0x08009c8d
 8008288:	3ff80000 	.word	0x3ff80000
 800828c:	08009d48 	.word	0x08009d48
 8008290:	08009d20 	.word	0x08009d20
 8008294:	08009cb9 	.word	0x08009cb9
 8008298:	07f1      	lsls	r1, r6, #31
 800829a:	d508      	bpl.n	80082ae <_dtoa_r+0x34e>
 800829c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a4:	f7f8 f9a8 	bl	80005f8 <__aeabi_dmul>
 80082a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082ac:	3501      	adds	r5, #1
 80082ae:	1076      	asrs	r6, r6, #1
 80082b0:	3708      	adds	r7, #8
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	d1f0      	bne.n	8008298 <_dtoa_r+0x338>
 80082b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082be:	f7f8 fac5 	bl	800084c <__aeabi_ddiv>
 80082c2:	e9cd 0100 	strd	r0, r1, [sp]
 80082c6:	e01a      	b.n	80082fe <_dtoa_r+0x39e>
 80082c8:	2502      	movs	r5, #2
 80082ca:	e7a3      	b.n	8008214 <_dtoa_r+0x2b4>
 80082cc:	f000 80a0 	beq.w	8008410 <_dtoa_r+0x4b0>
 80082d0:	f1ca 0600 	rsb	r6, sl, #0
 80082d4:	4b9f      	ldr	r3, [pc, #636]	; (8008554 <_dtoa_r+0x5f4>)
 80082d6:	4fa0      	ldr	r7, [pc, #640]	; (8008558 <_dtoa_r+0x5f8>)
 80082d8:	f006 020f 	and.w	r2, r6, #15
 80082dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082e8:	f7f8 f986 	bl	80005f8 <__aeabi_dmul>
 80082ec:	e9cd 0100 	strd	r0, r1, [sp]
 80082f0:	1136      	asrs	r6, r6, #4
 80082f2:	2300      	movs	r3, #0
 80082f4:	2502      	movs	r5, #2
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d17f      	bne.n	80083fa <_dtoa_r+0x49a>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e1      	bne.n	80082c2 <_dtoa_r+0x362>
 80082fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8087 	beq.w	8008414 <_dtoa_r+0x4b4>
 8008306:	e9dd 6700 	ldrd	r6, r7, [sp]
 800830a:	2200      	movs	r2, #0
 800830c:	4b93      	ldr	r3, [pc, #588]	; (800855c <_dtoa_r+0x5fc>)
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	f7f8 fbe3 	bl	8000adc <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d07c      	beq.n	8008414 <_dtoa_r+0x4b4>
 800831a:	f1b9 0f00 	cmp.w	r9, #0
 800831e:	d079      	beq.n	8008414 <_dtoa_r+0x4b4>
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	dd35      	ble.n	8008392 <_dtoa_r+0x432>
 8008326:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800832a:	9308      	str	r3, [sp, #32]
 800832c:	4639      	mov	r1, r7
 800832e:	2200      	movs	r2, #0
 8008330:	4b8b      	ldr	r3, [pc, #556]	; (8008560 <_dtoa_r+0x600>)
 8008332:	4630      	mov	r0, r6
 8008334:	f7f8 f960 	bl	80005f8 <__aeabi_dmul>
 8008338:	e9cd 0100 	strd	r0, r1, [sp]
 800833c:	9f02      	ldr	r7, [sp, #8]
 800833e:	3501      	adds	r5, #1
 8008340:	4628      	mov	r0, r5
 8008342:	f7f8 f8ef 	bl	8000524 <__aeabi_i2d>
 8008346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800834a:	f7f8 f955 	bl	80005f8 <__aeabi_dmul>
 800834e:	2200      	movs	r2, #0
 8008350:	4b84      	ldr	r3, [pc, #528]	; (8008564 <_dtoa_r+0x604>)
 8008352:	f7f7 ff9b 	bl	800028c <__adddf3>
 8008356:	4605      	mov	r5, r0
 8008358:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800835c:	2f00      	cmp	r7, #0
 800835e:	d15d      	bne.n	800841c <_dtoa_r+0x4bc>
 8008360:	2200      	movs	r2, #0
 8008362:	4b81      	ldr	r3, [pc, #516]	; (8008568 <_dtoa_r+0x608>)
 8008364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008368:	f7f7 ff8e 	bl	8000288 <__aeabi_dsub>
 800836c:	462a      	mov	r2, r5
 800836e:	4633      	mov	r3, r6
 8008370:	e9cd 0100 	strd	r0, r1, [sp]
 8008374:	f7f8 fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8008378:	2800      	cmp	r0, #0
 800837a:	f040 8288 	bne.w	800888e <_dtoa_r+0x92e>
 800837e:	462a      	mov	r2, r5
 8008380:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008384:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008388:	f7f8 fba8 	bl	8000adc <__aeabi_dcmplt>
 800838c:	2800      	cmp	r0, #0
 800838e:	f040 827c 	bne.w	800888a <_dtoa_r+0x92a>
 8008392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008396:	e9cd 2300 	strd	r2, r3, [sp]
 800839a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800839c:	2b00      	cmp	r3, #0
 800839e:	f2c0 8150 	blt.w	8008642 <_dtoa_r+0x6e2>
 80083a2:	f1ba 0f0e 	cmp.w	sl, #14
 80083a6:	f300 814c 	bgt.w	8008642 <_dtoa_r+0x6e2>
 80083aa:	4b6a      	ldr	r3, [pc, #424]	; (8008554 <_dtoa_r+0x5f4>)
 80083ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083b0:	ed93 7b00 	vldr	d7, [r3]
 80083b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083bc:	f280 80d8 	bge.w	8008570 <_dtoa_r+0x610>
 80083c0:	f1b9 0f00 	cmp.w	r9, #0
 80083c4:	f300 80d4 	bgt.w	8008570 <_dtoa_r+0x610>
 80083c8:	f040 825e 	bne.w	8008888 <_dtoa_r+0x928>
 80083cc:	2200      	movs	r2, #0
 80083ce:	4b66      	ldr	r3, [pc, #408]	; (8008568 <_dtoa_r+0x608>)
 80083d0:	ec51 0b17 	vmov	r0, r1, d7
 80083d4:	f7f8 f910 	bl	80005f8 <__aeabi_dmul>
 80083d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083dc:	f7f8 fb92 	bl	8000b04 <__aeabi_dcmpge>
 80083e0:	464f      	mov	r7, r9
 80083e2:	464e      	mov	r6, r9
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f040 8234 	bne.w	8008852 <_dtoa_r+0x8f2>
 80083ea:	2331      	movs	r3, #49	; 0x31
 80083ec:	f10b 0501 	add.w	r5, fp, #1
 80083f0:	f88b 3000 	strb.w	r3, [fp]
 80083f4:	f10a 0a01 	add.w	sl, sl, #1
 80083f8:	e22f      	b.n	800885a <_dtoa_r+0x8fa>
 80083fa:	07f2      	lsls	r2, r6, #31
 80083fc:	d505      	bpl.n	800840a <_dtoa_r+0x4aa>
 80083fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008402:	f7f8 f8f9 	bl	80005f8 <__aeabi_dmul>
 8008406:	3501      	adds	r5, #1
 8008408:	2301      	movs	r3, #1
 800840a:	1076      	asrs	r6, r6, #1
 800840c:	3708      	adds	r7, #8
 800840e:	e772      	b.n	80082f6 <_dtoa_r+0x396>
 8008410:	2502      	movs	r5, #2
 8008412:	e774      	b.n	80082fe <_dtoa_r+0x39e>
 8008414:	f8cd a020 	str.w	sl, [sp, #32]
 8008418:	464f      	mov	r7, r9
 800841a:	e791      	b.n	8008340 <_dtoa_r+0x3e0>
 800841c:	4b4d      	ldr	r3, [pc, #308]	; (8008554 <_dtoa_r+0x5f4>)
 800841e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008422:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	d047      	beq.n	80084bc <_dtoa_r+0x55c>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	2000      	movs	r0, #0
 8008432:	494e      	ldr	r1, [pc, #312]	; (800856c <_dtoa_r+0x60c>)
 8008434:	f7f8 fa0a 	bl	800084c <__aeabi_ddiv>
 8008438:	462a      	mov	r2, r5
 800843a:	4633      	mov	r3, r6
 800843c:	f7f7 ff24 	bl	8000288 <__aeabi_dsub>
 8008440:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008444:	465d      	mov	r5, fp
 8008446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800844a:	f7f8 fb85 	bl	8000b58 <__aeabi_d2iz>
 800844e:	4606      	mov	r6, r0
 8008450:	f7f8 f868 	bl	8000524 <__aeabi_i2d>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	e9dd 0100 	ldrd	r0, r1, [sp]
 800845c:	f7f7 ff14 	bl	8000288 <__aeabi_dsub>
 8008460:	3630      	adds	r6, #48	; 0x30
 8008462:	f805 6b01 	strb.w	r6, [r5], #1
 8008466:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800846a:	e9cd 0100 	strd	r0, r1, [sp]
 800846e:	f7f8 fb35 	bl	8000adc <__aeabi_dcmplt>
 8008472:	2800      	cmp	r0, #0
 8008474:	d163      	bne.n	800853e <_dtoa_r+0x5de>
 8008476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800847a:	2000      	movs	r0, #0
 800847c:	4937      	ldr	r1, [pc, #220]	; (800855c <_dtoa_r+0x5fc>)
 800847e:	f7f7 ff03 	bl	8000288 <__aeabi_dsub>
 8008482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008486:	f7f8 fb29 	bl	8000adc <__aeabi_dcmplt>
 800848a:	2800      	cmp	r0, #0
 800848c:	f040 80b7 	bne.w	80085fe <_dtoa_r+0x69e>
 8008490:	eba5 030b 	sub.w	r3, r5, fp
 8008494:	429f      	cmp	r7, r3
 8008496:	f77f af7c 	ble.w	8008392 <_dtoa_r+0x432>
 800849a:	2200      	movs	r2, #0
 800849c:	4b30      	ldr	r3, [pc, #192]	; (8008560 <_dtoa_r+0x600>)
 800849e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	2200      	movs	r2, #0
 80084a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084ac:	4b2c      	ldr	r3, [pc, #176]	; (8008560 <_dtoa_r+0x600>)
 80084ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b2:	f7f8 f8a1 	bl	80005f8 <__aeabi_dmul>
 80084b6:	e9cd 0100 	strd	r0, r1, [sp]
 80084ba:	e7c4      	b.n	8008446 <_dtoa_r+0x4e6>
 80084bc:	462a      	mov	r2, r5
 80084be:	4633      	mov	r3, r6
 80084c0:	f7f8 f89a 	bl	80005f8 <__aeabi_dmul>
 80084c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084c8:	eb0b 0507 	add.w	r5, fp, r7
 80084cc:	465e      	mov	r6, fp
 80084ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084d2:	f7f8 fb41 	bl	8000b58 <__aeabi_d2iz>
 80084d6:	4607      	mov	r7, r0
 80084d8:	f7f8 f824 	bl	8000524 <__aeabi_i2d>
 80084dc:	3730      	adds	r7, #48	; 0x30
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e6:	f7f7 fecf 	bl	8000288 <__aeabi_dsub>
 80084ea:	f806 7b01 	strb.w	r7, [r6], #1
 80084ee:	42ae      	cmp	r6, r5
 80084f0:	e9cd 0100 	strd	r0, r1, [sp]
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	d126      	bne.n	8008548 <_dtoa_r+0x5e8>
 80084fa:	4b1c      	ldr	r3, [pc, #112]	; (800856c <_dtoa_r+0x60c>)
 80084fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008500:	f7f7 fec4 	bl	800028c <__adddf3>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800850c:	f7f8 fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8008510:	2800      	cmp	r0, #0
 8008512:	d174      	bne.n	80085fe <_dtoa_r+0x69e>
 8008514:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008518:	2000      	movs	r0, #0
 800851a:	4914      	ldr	r1, [pc, #80]	; (800856c <_dtoa_r+0x60c>)
 800851c:	f7f7 feb4 	bl	8000288 <__aeabi_dsub>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008528:	f7f8 fad8 	bl	8000adc <__aeabi_dcmplt>
 800852c:	2800      	cmp	r0, #0
 800852e:	f43f af30 	beq.w	8008392 <_dtoa_r+0x432>
 8008532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008536:	2b30      	cmp	r3, #48	; 0x30
 8008538:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800853c:	d002      	beq.n	8008544 <_dtoa_r+0x5e4>
 800853e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008542:	e04a      	b.n	80085da <_dtoa_r+0x67a>
 8008544:	4615      	mov	r5, r2
 8008546:	e7f4      	b.n	8008532 <_dtoa_r+0x5d2>
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <_dtoa_r+0x600>)
 800854a:	f7f8 f855 	bl	80005f8 <__aeabi_dmul>
 800854e:	e9cd 0100 	strd	r0, r1, [sp]
 8008552:	e7bc      	b.n	80084ce <_dtoa_r+0x56e>
 8008554:	08009d48 	.word	0x08009d48
 8008558:	08009d20 	.word	0x08009d20
 800855c:	3ff00000 	.word	0x3ff00000
 8008560:	40240000 	.word	0x40240000
 8008564:	401c0000 	.word	0x401c0000
 8008568:	40140000 	.word	0x40140000
 800856c:	3fe00000 	.word	0x3fe00000
 8008570:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008574:	465d      	mov	r5, fp
 8008576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800857a:	4630      	mov	r0, r6
 800857c:	4639      	mov	r1, r7
 800857e:	f7f8 f965 	bl	800084c <__aeabi_ddiv>
 8008582:	f7f8 fae9 	bl	8000b58 <__aeabi_d2iz>
 8008586:	4680      	mov	r8, r0
 8008588:	f7f7 ffcc 	bl	8000524 <__aeabi_i2d>
 800858c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008590:	f7f8 f832 	bl	80005f8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085a0:	f7f7 fe72 	bl	8000288 <__aeabi_dsub>
 80085a4:	f805 6b01 	strb.w	r6, [r5], #1
 80085a8:	eba5 060b 	sub.w	r6, r5, fp
 80085ac:	45b1      	cmp	r9, r6
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	d139      	bne.n	8008628 <_dtoa_r+0x6c8>
 80085b4:	f7f7 fe6a 	bl	800028c <__adddf3>
 80085b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085bc:	4606      	mov	r6, r0
 80085be:	460f      	mov	r7, r1
 80085c0:	f7f8 faaa 	bl	8000b18 <__aeabi_dcmpgt>
 80085c4:	b9c8      	cbnz	r0, 80085fa <_dtoa_r+0x69a>
 80085c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f7f8 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80085d2:	b110      	cbz	r0, 80085da <_dtoa_r+0x67a>
 80085d4:	f018 0f01 	tst.w	r8, #1
 80085d8:	d10f      	bne.n	80085fa <_dtoa_r+0x69a>
 80085da:	9904      	ldr	r1, [sp, #16]
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fcaa 	bl	8008f36 <_Bfree>
 80085e2:	2300      	movs	r3, #0
 80085e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085e6:	702b      	strb	r3, [r5, #0]
 80085e8:	f10a 0301 	add.w	r3, sl, #1
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8241 	beq.w	8008a78 <_dtoa_r+0xb18>
 80085f6:	601d      	str	r5, [r3, #0]
 80085f8:	e23e      	b.n	8008a78 <_dtoa_r+0xb18>
 80085fa:	f8cd a020 	str.w	sl, [sp, #32]
 80085fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008602:	2a39      	cmp	r2, #57	; 0x39
 8008604:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008608:	d108      	bne.n	800861c <_dtoa_r+0x6bc>
 800860a:	459b      	cmp	fp, r3
 800860c:	d10a      	bne.n	8008624 <_dtoa_r+0x6c4>
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	3301      	adds	r3, #1
 8008612:	9308      	str	r3, [sp, #32]
 8008614:	2330      	movs	r3, #48	; 0x30
 8008616:	f88b 3000 	strb.w	r3, [fp]
 800861a:	465b      	mov	r3, fp
 800861c:	781a      	ldrb	r2, [r3, #0]
 800861e:	3201      	adds	r2, #1
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	e78c      	b.n	800853e <_dtoa_r+0x5de>
 8008624:	461d      	mov	r5, r3
 8008626:	e7ea      	b.n	80085fe <_dtoa_r+0x69e>
 8008628:	2200      	movs	r2, #0
 800862a:	4b9b      	ldr	r3, [pc, #620]	; (8008898 <_dtoa_r+0x938>)
 800862c:	f7f7 ffe4 	bl	80005f8 <__aeabi_dmul>
 8008630:	2200      	movs	r2, #0
 8008632:	2300      	movs	r3, #0
 8008634:	4606      	mov	r6, r0
 8008636:	460f      	mov	r7, r1
 8008638:	f7f8 fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800863c:	2800      	cmp	r0, #0
 800863e:	d09a      	beq.n	8008576 <_dtoa_r+0x616>
 8008640:	e7cb      	b.n	80085da <_dtoa_r+0x67a>
 8008642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008644:	2a00      	cmp	r2, #0
 8008646:	f000 808b 	beq.w	8008760 <_dtoa_r+0x800>
 800864a:	9a06      	ldr	r2, [sp, #24]
 800864c:	2a01      	cmp	r2, #1
 800864e:	dc6e      	bgt.n	800872e <_dtoa_r+0x7ce>
 8008650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008652:	2a00      	cmp	r2, #0
 8008654:	d067      	beq.n	8008726 <_dtoa_r+0x7c6>
 8008656:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800865a:	9f07      	ldr	r7, [sp, #28]
 800865c:	9d05      	ldr	r5, [sp, #20]
 800865e:	9a05      	ldr	r2, [sp, #20]
 8008660:	2101      	movs	r1, #1
 8008662:	441a      	add	r2, r3
 8008664:	4620      	mov	r0, r4
 8008666:	9205      	str	r2, [sp, #20]
 8008668:	4498      	add	r8, r3
 800866a:	f000 fd04 	bl	8009076 <__i2b>
 800866e:	4606      	mov	r6, r0
 8008670:	2d00      	cmp	r5, #0
 8008672:	dd0c      	ble.n	800868e <_dtoa_r+0x72e>
 8008674:	f1b8 0f00 	cmp.w	r8, #0
 8008678:	dd09      	ble.n	800868e <_dtoa_r+0x72e>
 800867a:	4545      	cmp	r5, r8
 800867c:	9a05      	ldr	r2, [sp, #20]
 800867e:	462b      	mov	r3, r5
 8008680:	bfa8      	it	ge
 8008682:	4643      	movge	r3, r8
 8008684:	1ad2      	subs	r2, r2, r3
 8008686:	9205      	str	r2, [sp, #20]
 8008688:	1aed      	subs	r5, r5, r3
 800868a:	eba8 0803 	sub.w	r8, r8, r3
 800868e:	9b07      	ldr	r3, [sp, #28]
 8008690:	b1eb      	cbz	r3, 80086ce <_dtoa_r+0x76e>
 8008692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d067      	beq.n	8008768 <_dtoa_r+0x808>
 8008698:	b18f      	cbz	r7, 80086be <_dtoa_r+0x75e>
 800869a:	4631      	mov	r1, r6
 800869c:	463a      	mov	r2, r7
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fd88 	bl	80091b4 <__pow5mult>
 80086a4:	9a04      	ldr	r2, [sp, #16]
 80086a6:	4601      	mov	r1, r0
 80086a8:	4606      	mov	r6, r0
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 fcec 	bl	8009088 <__multiply>
 80086b0:	9904      	ldr	r1, [sp, #16]
 80086b2:	9008      	str	r0, [sp, #32]
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 fc3e 	bl	8008f36 <_Bfree>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	9b07      	ldr	r3, [sp, #28]
 80086c0:	1bda      	subs	r2, r3, r7
 80086c2:	d004      	beq.n	80086ce <_dtoa_r+0x76e>
 80086c4:	9904      	ldr	r1, [sp, #16]
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fd74 	bl	80091b4 <__pow5mult>
 80086cc:	9004      	str	r0, [sp, #16]
 80086ce:	2101      	movs	r1, #1
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fcd0 	bl	8009076 <__i2b>
 80086d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d8:	4607      	mov	r7, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 81d0 	beq.w	8008a80 <_dtoa_r+0xb20>
 80086e0:	461a      	mov	r2, r3
 80086e2:	4601      	mov	r1, r0
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fd65 	bl	80091b4 <__pow5mult>
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	4607      	mov	r7, r0
 80086f0:	dc40      	bgt.n	8008774 <_dtoa_r+0x814>
 80086f2:	9b00      	ldr	r3, [sp, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d139      	bne.n	800876c <_dtoa_r+0x80c>
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d136      	bne.n	8008770 <_dtoa_r+0x810>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008708:	0d1b      	lsrs	r3, r3, #20
 800870a:	051b      	lsls	r3, r3, #20
 800870c:	b12b      	cbz	r3, 800871a <_dtoa_r+0x7ba>
 800870e:	9b05      	ldr	r3, [sp, #20]
 8008710:	3301      	adds	r3, #1
 8008712:	9305      	str	r3, [sp, #20]
 8008714:	f108 0801 	add.w	r8, r8, #1
 8008718:	2301      	movs	r3, #1
 800871a:	9307      	str	r3, [sp, #28]
 800871c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800871e:	2b00      	cmp	r3, #0
 8008720:	d12a      	bne.n	8008778 <_dtoa_r+0x818>
 8008722:	2001      	movs	r0, #1
 8008724:	e030      	b.n	8008788 <_dtoa_r+0x828>
 8008726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008728:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800872c:	e795      	b.n	800865a <_dtoa_r+0x6fa>
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8008734:	42bb      	cmp	r3, r7
 8008736:	bfbf      	itttt	lt
 8008738:	9b07      	ldrlt	r3, [sp, #28]
 800873a:	9707      	strlt	r7, [sp, #28]
 800873c:	1afa      	sublt	r2, r7, r3
 800873e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008740:	bfbb      	ittet	lt
 8008742:	189b      	addlt	r3, r3, r2
 8008744:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008746:	1bdf      	subge	r7, r3, r7
 8008748:	2700      	movlt	r7, #0
 800874a:	f1b9 0f00 	cmp.w	r9, #0
 800874e:	bfb5      	itete	lt
 8008750:	9b05      	ldrlt	r3, [sp, #20]
 8008752:	9d05      	ldrge	r5, [sp, #20]
 8008754:	eba3 0509 	sublt.w	r5, r3, r9
 8008758:	464b      	movge	r3, r9
 800875a:	bfb8      	it	lt
 800875c:	2300      	movlt	r3, #0
 800875e:	e77e      	b.n	800865e <_dtoa_r+0x6fe>
 8008760:	9f07      	ldr	r7, [sp, #28]
 8008762:	9d05      	ldr	r5, [sp, #20]
 8008764:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008766:	e783      	b.n	8008670 <_dtoa_r+0x710>
 8008768:	9a07      	ldr	r2, [sp, #28]
 800876a:	e7ab      	b.n	80086c4 <_dtoa_r+0x764>
 800876c:	2300      	movs	r3, #0
 800876e:	e7d4      	b.n	800871a <_dtoa_r+0x7ba>
 8008770:	9b00      	ldr	r3, [sp, #0]
 8008772:	e7d2      	b.n	800871a <_dtoa_r+0x7ba>
 8008774:	2300      	movs	r3, #0
 8008776:	9307      	str	r3, [sp, #28]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800877e:	6918      	ldr	r0, [r3, #16]
 8008780:	f000 fc2b 	bl	8008fda <__hi0bits>
 8008784:	f1c0 0020 	rsb	r0, r0, #32
 8008788:	4440      	add	r0, r8
 800878a:	f010 001f 	ands.w	r0, r0, #31
 800878e:	d047      	beq.n	8008820 <_dtoa_r+0x8c0>
 8008790:	f1c0 0320 	rsb	r3, r0, #32
 8008794:	2b04      	cmp	r3, #4
 8008796:	dd3b      	ble.n	8008810 <_dtoa_r+0x8b0>
 8008798:	9b05      	ldr	r3, [sp, #20]
 800879a:	f1c0 001c 	rsb	r0, r0, #28
 800879e:	4403      	add	r3, r0
 80087a0:	9305      	str	r3, [sp, #20]
 80087a2:	4405      	add	r5, r0
 80087a4:	4480      	add	r8, r0
 80087a6:	9b05      	ldr	r3, [sp, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dd05      	ble.n	80087b8 <_dtoa_r+0x858>
 80087ac:	461a      	mov	r2, r3
 80087ae:	9904      	ldr	r1, [sp, #16]
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fd4d 	bl	8009250 <__lshift>
 80087b6:	9004      	str	r0, [sp, #16]
 80087b8:	f1b8 0f00 	cmp.w	r8, #0
 80087bc:	dd05      	ble.n	80087ca <_dtoa_r+0x86a>
 80087be:	4639      	mov	r1, r7
 80087c0:	4642      	mov	r2, r8
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fd44 	bl	8009250 <__lshift>
 80087c8:	4607      	mov	r7, r0
 80087ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087cc:	b353      	cbz	r3, 8008824 <_dtoa_r+0x8c4>
 80087ce:	4639      	mov	r1, r7
 80087d0:	9804      	ldr	r0, [sp, #16]
 80087d2:	f000 fd91 	bl	80092f8 <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	da24      	bge.n	8008824 <_dtoa_r+0x8c4>
 80087da:	2300      	movs	r3, #0
 80087dc:	220a      	movs	r2, #10
 80087de:	9904      	ldr	r1, [sp, #16]
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fbbf 	bl	8008f64 <__multadd>
 80087e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e8:	9004      	str	r0, [sp, #16]
 80087ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 814d 	beq.w	8008a8e <_dtoa_r+0xb2e>
 80087f4:	2300      	movs	r3, #0
 80087f6:	4631      	mov	r1, r6
 80087f8:	220a      	movs	r2, #10
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fbb2 	bl	8008f64 <__multadd>
 8008800:	9b02      	ldr	r3, [sp, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	4606      	mov	r6, r0
 8008806:	dc4f      	bgt.n	80088a8 <_dtoa_r+0x948>
 8008808:	9b06      	ldr	r3, [sp, #24]
 800880a:	2b02      	cmp	r3, #2
 800880c:	dd4c      	ble.n	80088a8 <_dtoa_r+0x948>
 800880e:	e011      	b.n	8008834 <_dtoa_r+0x8d4>
 8008810:	d0c9      	beq.n	80087a6 <_dtoa_r+0x846>
 8008812:	9a05      	ldr	r2, [sp, #20]
 8008814:	331c      	adds	r3, #28
 8008816:	441a      	add	r2, r3
 8008818:	9205      	str	r2, [sp, #20]
 800881a:	441d      	add	r5, r3
 800881c:	4498      	add	r8, r3
 800881e:	e7c2      	b.n	80087a6 <_dtoa_r+0x846>
 8008820:	4603      	mov	r3, r0
 8008822:	e7f6      	b.n	8008812 <_dtoa_r+0x8b2>
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	dc38      	bgt.n	800889c <_dtoa_r+0x93c>
 800882a:	9b06      	ldr	r3, [sp, #24]
 800882c:	2b02      	cmp	r3, #2
 800882e:	dd35      	ble.n	800889c <_dtoa_r+0x93c>
 8008830:	f8cd 9008 	str.w	r9, [sp, #8]
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	b963      	cbnz	r3, 8008852 <_dtoa_r+0x8f2>
 8008838:	4639      	mov	r1, r7
 800883a:	2205      	movs	r2, #5
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fb91 	bl	8008f64 <__multadd>
 8008842:	4601      	mov	r1, r0
 8008844:	4607      	mov	r7, r0
 8008846:	9804      	ldr	r0, [sp, #16]
 8008848:	f000 fd56 	bl	80092f8 <__mcmp>
 800884c:	2800      	cmp	r0, #0
 800884e:	f73f adcc 	bgt.w	80083ea <_dtoa_r+0x48a>
 8008852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008854:	465d      	mov	r5, fp
 8008856:	ea6f 0a03 	mvn.w	sl, r3
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	4639      	mov	r1, r7
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fb68 	bl	8008f36 <_Bfree>
 8008866:	2e00      	cmp	r6, #0
 8008868:	f43f aeb7 	beq.w	80085da <_dtoa_r+0x67a>
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	d005      	beq.n	800887e <_dtoa_r+0x91e>
 8008872:	45b1      	cmp	r9, r6
 8008874:	d003      	beq.n	800887e <_dtoa_r+0x91e>
 8008876:	4649      	mov	r1, r9
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fb5c 	bl	8008f36 <_Bfree>
 800887e:	4631      	mov	r1, r6
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fb58 	bl	8008f36 <_Bfree>
 8008886:	e6a8      	b.n	80085da <_dtoa_r+0x67a>
 8008888:	2700      	movs	r7, #0
 800888a:	463e      	mov	r6, r7
 800888c:	e7e1      	b.n	8008852 <_dtoa_r+0x8f2>
 800888e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008892:	463e      	mov	r6, r7
 8008894:	e5a9      	b.n	80083ea <_dtoa_r+0x48a>
 8008896:	bf00      	nop
 8008898:	40240000 	.word	0x40240000
 800889c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800889e:	f8cd 9008 	str.w	r9, [sp, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 80fa 	beq.w	8008a9c <_dtoa_r+0xb3c>
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	dd05      	ble.n	80088b8 <_dtoa_r+0x958>
 80088ac:	4631      	mov	r1, r6
 80088ae:	462a      	mov	r2, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fccd 	bl	8009250 <__lshift>
 80088b6:	4606      	mov	r6, r0
 80088b8:	9b07      	ldr	r3, [sp, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d04c      	beq.n	8008958 <_dtoa_r+0x9f8>
 80088be:	6871      	ldr	r1, [r6, #4]
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fb04 	bl	8008ece <_Balloc>
 80088c6:	6932      	ldr	r2, [r6, #16]
 80088c8:	3202      	adds	r2, #2
 80088ca:	4605      	mov	r5, r0
 80088cc:	0092      	lsls	r2, r2, #2
 80088ce:	f106 010c 	add.w	r1, r6, #12
 80088d2:	300c      	adds	r0, #12
 80088d4:	f000 faf0 	bl	8008eb8 <memcpy>
 80088d8:	2201      	movs	r2, #1
 80088da:	4629      	mov	r1, r5
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fcb7 	bl	8009250 <__lshift>
 80088e2:	9b00      	ldr	r3, [sp, #0]
 80088e4:	f8cd b014 	str.w	fp, [sp, #20]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	46b1      	mov	r9, r6
 80088ee:	9307      	str	r3, [sp, #28]
 80088f0:	4606      	mov	r6, r0
 80088f2:	4639      	mov	r1, r7
 80088f4:	9804      	ldr	r0, [sp, #16]
 80088f6:	f7ff faa7 	bl	8007e48 <quorem>
 80088fa:	4649      	mov	r1, r9
 80088fc:	4605      	mov	r5, r0
 80088fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008902:	9804      	ldr	r0, [sp, #16]
 8008904:	f000 fcf8 	bl	80092f8 <__mcmp>
 8008908:	4632      	mov	r2, r6
 800890a:	9000      	str	r0, [sp, #0]
 800890c:	4639      	mov	r1, r7
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fd0c 	bl	800932c <__mdiff>
 8008914:	68c3      	ldr	r3, [r0, #12]
 8008916:	4602      	mov	r2, r0
 8008918:	bb03      	cbnz	r3, 800895c <_dtoa_r+0x9fc>
 800891a:	4601      	mov	r1, r0
 800891c:	9008      	str	r0, [sp, #32]
 800891e:	9804      	ldr	r0, [sp, #16]
 8008920:	f000 fcea 	bl	80092f8 <__mcmp>
 8008924:	9a08      	ldr	r2, [sp, #32]
 8008926:	4603      	mov	r3, r0
 8008928:	4611      	mov	r1, r2
 800892a:	4620      	mov	r0, r4
 800892c:	9308      	str	r3, [sp, #32]
 800892e:	f000 fb02 	bl	8008f36 <_Bfree>
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	b9a3      	cbnz	r3, 8008960 <_dtoa_r+0xa00>
 8008936:	9a06      	ldr	r2, [sp, #24]
 8008938:	b992      	cbnz	r2, 8008960 <_dtoa_r+0xa00>
 800893a:	9a07      	ldr	r2, [sp, #28]
 800893c:	b982      	cbnz	r2, 8008960 <_dtoa_r+0xa00>
 800893e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008942:	d029      	beq.n	8008998 <_dtoa_r+0xa38>
 8008944:	9b00      	ldr	r3, [sp, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	dd01      	ble.n	800894e <_dtoa_r+0x9ee>
 800894a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800894e:	9b05      	ldr	r3, [sp, #20]
 8008950:	1c5d      	adds	r5, r3, #1
 8008952:	f883 8000 	strb.w	r8, [r3]
 8008956:	e782      	b.n	800885e <_dtoa_r+0x8fe>
 8008958:	4630      	mov	r0, r6
 800895a:	e7c2      	b.n	80088e2 <_dtoa_r+0x982>
 800895c:	2301      	movs	r3, #1
 800895e:	e7e3      	b.n	8008928 <_dtoa_r+0x9c8>
 8008960:	9a00      	ldr	r2, [sp, #0]
 8008962:	2a00      	cmp	r2, #0
 8008964:	db04      	blt.n	8008970 <_dtoa_r+0xa10>
 8008966:	d125      	bne.n	80089b4 <_dtoa_r+0xa54>
 8008968:	9a06      	ldr	r2, [sp, #24]
 800896a:	bb1a      	cbnz	r2, 80089b4 <_dtoa_r+0xa54>
 800896c:	9a07      	ldr	r2, [sp, #28]
 800896e:	bb0a      	cbnz	r2, 80089b4 <_dtoa_r+0xa54>
 8008970:	2b00      	cmp	r3, #0
 8008972:	ddec      	ble.n	800894e <_dtoa_r+0x9ee>
 8008974:	2201      	movs	r2, #1
 8008976:	9904      	ldr	r1, [sp, #16]
 8008978:	4620      	mov	r0, r4
 800897a:	f000 fc69 	bl	8009250 <__lshift>
 800897e:	4639      	mov	r1, r7
 8008980:	9004      	str	r0, [sp, #16]
 8008982:	f000 fcb9 	bl	80092f8 <__mcmp>
 8008986:	2800      	cmp	r0, #0
 8008988:	dc03      	bgt.n	8008992 <_dtoa_r+0xa32>
 800898a:	d1e0      	bne.n	800894e <_dtoa_r+0x9ee>
 800898c:	f018 0f01 	tst.w	r8, #1
 8008990:	d0dd      	beq.n	800894e <_dtoa_r+0x9ee>
 8008992:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008996:	d1d8      	bne.n	800894a <_dtoa_r+0x9ea>
 8008998:	9b05      	ldr	r3, [sp, #20]
 800899a:	9a05      	ldr	r2, [sp, #20]
 800899c:	1c5d      	adds	r5, r3, #1
 800899e:	2339      	movs	r3, #57	; 0x39
 80089a0:	7013      	strb	r3, [r2, #0]
 80089a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a6:	2b39      	cmp	r3, #57	; 0x39
 80089a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80089ac:	d04f      	beq.n	8008a4e <_dtoa_r+0xaee>
 80089ae:	3301      	adds	r3, #1
 80089b0:	7013      	strb	r3, [r2, #0]
 80089b2:	e754      	b.n	800885e <_dtoa_r+0x8fe>
 80089b4:	9a05      	ldr	r2, [sp, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f102 0501 	add.w	r5, r2, #1
 80089bc:	dd06      	ble.n	80089cc <_dtoa_r+0xa6c>
 80089be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089c2:	d0e9      	beq.n	8008998 <_dtoa_r+0xa38>
 80089c4:	f108 0801 	add.w	r8, r8, #1
 80089c8:	9b05      	ldr	r3, [sp, #20]
 80089ca:	e7c2      	b.n	8008952 <_dtoa_r+0x9f2>
 80089cc:	9a02      	ldr	r2, [sp, #8]
 80089ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089d2:	eba5 030b 	sub.w	r3, r5, fp
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d021      	beq.n	8008a1e <_dtoa_r+0xabe>
 80089da:	2300      	movs	r3, #0
 80089dc:	220a      	movs	r2, #10
 80089de:	9904      	ldr	r1, [sp, #16]
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fabf 	bl	8008f64 <__multadd>
 80089e6:	45b1      	cmp	r9, r6
 80089e8:	9004      	str	r0, [sp, #16]
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	f04f 020a 	mov.w	r2, #10
 80089f2:	4649      	mov	r1, r9
 80089f4:	4620      	mov	r0, r4
 80089f6:	d105      	bne.n	8008a04 <_dtoa_r+0xaa4>
 80089f8:	f000 fab4 	bl	8008f64 <__multadd>
 80089fc:	4681      	mov	r9, r0
 80089fe:	4606      	mov	r6, r0
 8008a00:	9505      	str	r5, [sp, #20]
 8008a02:	e776      	b.n	80088f2 <_dtoa_r+0x992>
 8008a04:	f000 faae 	bl	8008f64 <__multadd>
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4681      	mov	r9, r0
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	220a      	movs	r2, #10
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 faa7 	bl	8008f64 <__multadd>
 8008a16:	4606      	mov	r6, r0
 8008a18:	e7f2      	b.n	8008a00 <_dtoa_r+0xaa0>
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	2201      	movs	r2, #1
 8008a20:	9904      	ldr	r1, [sp, #16]
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fc14 	bl	8009250 <__lshift>
 8008a28:	4639      	mov	r1, r7
 8008a2a:	9004      	str	r0, [sp, #16]
 8008a2c:	f000 fc64 	bl	80092f8 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	dcb6      	bgt.n	80089a2 <_dtoa_r+0xa42>
 8008a34:	d102      	bne.n	8008a3c <_dtoa_r+0xadc>
 8008a36:	f018 0f01 	tst.w	r8, #1
 8008a3a:	d1b2      	bne.n	80089a2 <_dtoa_r+0xa42>
 8008a3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a40:	2b30      	cmp	r3, #48	; 0x30
 8008a42:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008a46:	f47f af0a 	bne.w	800885e <_dtoa_r+0x8fe>
 8008a4a:	4615      	mov	r5, r2
 8008a4c:	e7f6      	b.n	8008a3c <_dtoa_r+0xadc>
 8008a4e:	4593      	cmp	fp, r2
 8008a50:	d105      	bne.n	8008a5e <_dtoa_r+0xafe>
 8008a52:	2331      	movs	r3, #49	; 0x31
 8008a54:	f10a 0a01 	add.w	sl, sl, #1
 8008a58:	f88b 3000 	strb.w	r3, [fp]
 8008a5c:	e6ff      	b.n	800885e <_dtoa_r+0x8fe>
 8008a5e:	4615      	mov	r5, r2
 8008a60:	e79f      	b.n	80089a2 <_dtoa_r+0xa42>
 8008a62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008ac8 <_dtoa_r+0xb68>
 8008a66:	e007      	b.n	8008a78 <_dtoa_r+0xb18>
 8008a68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008acc <_dtoa_r+0xb6c>
 8008a6e:	b11b      	cbz	r3, 8008a78 <_dtoa_r+0xb18>
 8008a70:	f10b 0308 	add.w	r3, fp, #8
 8008a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	4658      	mov	r0, fp
 8008a7a:	b017      	add	sp, #92	; 0x5c
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	9b06      	ldr	r3, [sp, #24]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	f77f ae35 	ble.w	80086f2 <_dtoa_r+0x792>
 8008a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a8a:	9307      	str	r3, [sp, #28]
 8008a8c:	e649      	b.n	8008722 <_dtoa_r+0x7c2>
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc03      	bgt.n	8008a9c <_dtoa_r+0xb3c>
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	f73f aecc 	bgt.w	8008834 <_dtoa_r+0x8d4>
 8008a9c:	465d      	mov	r5, fp
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	9804      	ldr	r0, [sp, #16]
 8008aa2:	f7ff f9d1 	bl	8007e48 <quorem>
 8008aa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008aaa:	f805 8b01 	strb.w	r8, [r5], #1
 8008aae:	9a02      	ldr	r2, [sp, #8]
 8008ab0:	eba5 030b 	sub.w	r3, r5, fp
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	ddb0      	ble.n	8008a1a <_dtoa_r+0xaba>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	220a      	movs	r2, #10
 8008abc:	9904      	ldr	r1, [sp, #16]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fa50 	bl	8008f64 <__multadd>
 8008ac4:	9004      	str	r0, [sp, #16]
 8008ac6:	e7ea      	b.n	8008a9e <_dtoa_r+0xb3e>
 8008ac8:	08009c8c 	.word	0x08009c8c
 8008acc:	08009cb0 	.word	0x08009cb0

08008ad0 <__sflush_r>:
 8008ad0:	898a      	ldrh	r2, [r1, #12]
 8008ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	0710      	lsls	r0, r2, #28
 8008ada:	460c      	mov	r4, r1
 8008adc:	d458      	bmi.n	8008b90 <__sflush_r+0xc0>
 8008ade:	684b      	ldr	r3, [r1, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	dc05      	bgt.n	8008af0 <__sflush_r+0x20>
 8008ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dc02      	bgt.n	8008af0 <__sflush_r+0x20>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	d0f9      	beq.n	8008aea <__sflush_r+0x1a>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008afc:	682f      	ldr	r7, [r5, #0]
 8008afe:	6a21      	ldr	r1, [r4, #32]
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	d032      	beq.n	8008b6a <__sflush_r+0x9a>
 8008b04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	075a      	lsls	r2, r3, #29
 8008b0a:	d505      	bpl.n	8008b18 <__sflush_r+0x48>
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	1ac0      	subs	r0, r0, r3
 8008b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b12:	b10b      	cbz	r3, 8008b18 <__sflush_r+0x48>
 8008b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b16:	1ac0      	subs	r0, r0, r3
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1e:	6a21      	ldr	r1, [r4, #32]
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	d106      	bne.n	8008b38 <__sflush_r+0x68>
 8008b2a:	6829      	ldr	r1, [r5, #0]
 8008b2c:	291d      	cmp	r1, #29
 8008b2e:	d848      	bhi.n	8008bc2 <__sflush_r+0xf2>
 8008b30:	4a29      	ldr	r2, [pc, #164]	; (8008bd8 <__sflush_r+0x108>)
 8008b32:	40ca      	lsrs	r2, r1
 8008b34:	07d6      	lsls	r6, r2, #31
 8008b36:	d544      	bpl.n	8008bc2 <__sflush_r+0xf2>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	6062      	str	r2, [r4, #4]
 8008b3c:	04d9      	lsls	r1, r3, #19
 8008b3e:	6922      	ldr	r2, [r4, #16]
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	d504      	bpl.n	8008b4e <__sflush_r+0x7e>
 8008b44:	1c42      	adds	r2, r0, #1
 8008b46:	d101      	bne.n	8008b4c <__sflush_r+0x7c>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	b903      	cbnz	r3, 8008b4e <__sflush_r+0x7e>
 8008b4c:	6560      	str	r0, [r4, #84]	; 0x54
 8008b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b50:	602f      	str	r7, [r5, #0]
 8008b52:	2900      	cmp	r1, #0
 8008b54:	d0c9      	beq.n	8008aea <__sflush_r+0x1a>
 8008b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	d002      	beq.n	8008b64 <__sflush_r+0x94>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fc9e 	bl	80094a0 <_free_r>
 8008b64:	2000      	movs	r0, #0
 8008b66:	6360      	str	r0, [r4, #52]	; 0x34
 8008b68:	e7c0      	b.n	8008aec <__sflush_r+0x1c>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	1c41      	adds	r1, r0, #1
 8008b72:	d1c8      	bne.n	8008b06 <__sflush_r+0x36>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0c5      	beq.n	8008b06 <__sflush_r+0x36>
 8008b7a:	2b1d      	cmp	r3, #29
 8008b7c:	d001      	beq.n	8008b82 <__sflush_r+0xb2>
 8008b7e:	2b16      	cmp	r3, #22
 8008b80:	d101      	bne.n	8008b86 <__sflush_r+0xb6>
 8008b82:	602f      	str	r7, [r5, #0]
 8008b84:	e7b1      	b.n	8008aea <__sflush_r+0x1a>
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	e7ad      	b.n	8008aec <__sflush_r+0x1c>
 8008b90:	690f      	ldr	r7, [r1, #16]
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	d0a9      	beq.n	8008aea <__sflush_r+0x1a>
 8008b96:	0793      	lsls	r3, r2, #30
 8008b98:	680e      	ldr	r6, [r1, #0]
 8008b9a:	bf08      	it	eq
 8008b9c:	694b      	ldreq	r3, [r1, #20]
 8008b9e:	600f      	str	r7, [r1, #0]
 8008ba0:	bf18      	it	ne
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	eba6 0807 	sub.w	r8, r6, r7
 8008ba8:	608b      	str	r3, [r1, #8]
 8008baa:	f1b8 0f00 	cmp.w	r8, #0
 8008bae:	dd9c      	ble.n	8008aea <__sflush_r+0x1a>
 8008bb0:	4643      	mov	r3, r8
 8008bb2:	463a      	mov	r2, r7
 8008bb4:	6a21      	ldr	r1, [r4, #32]
 8008bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b0      	blx	r6
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	dc06      	bgt.n	8008bce <__sflush_r+0xfe>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bcc:	e78e      	b.n	8008aec <__sflush_r+0x1c>
 8008bce:	4407      	add	r7, r0
 8008bd0:	eba8 0800 	sub.w	r8, r8, r0
 8008bd4:	e7e9      	b.n	8008baa <__sflush_r+0xda>
 8008bd6:	bf00      	nop
 8008bd8:	20400001 	.word	0x20400001

08008bdc <_fflush_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	690b      	ldr	r3, [r1, #16]
 8008be0:	4605      	mov	r5, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	b1db      	cbz	r3, 8008c1e <_fflush_r+0x42>
 8008be6:	b118      	cbz	r0, 8008bf0 <_fflush_r+0x14>
 8008be8:	6983      	ldr	r3, [r0, #24]
 8008bea:	b90b      	cbnz	r3, 8008bf0 <_fflush_r+0x14>
 8008bec:	f000 f860 	bl	8008cb0 <__sinit>
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <_fflush_r+0x48>)
 8008bf2:	429c      	cmp	r4, r3
 8008bf4:	d109      	bne.n	8008c0a <_fflush_r+0x2e>
 8008bf6:	686c      	ldr	r4, [r5, #4]
 8008bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfc:	b17b      	cbz	r3, 8008c1e <_fflush_r+0x42>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4628      	mov	r0, r5
 8008c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c06:	f7ff bf63 	b.w	8008ad0 <__sflush_r>
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <_fflush_r+0x4c>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	d101      	bne.n	8008c14 <_fflush_r+0x38>
 8008c10:	68ac      	ldr	r4, [r5, #8]
 8008c12:	e7f1      	b.n	8008bf8 <_fflush_r+0x1c>
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <_fflush_r+0x50>)
 8008c16:	429c      	cmp	r4, r3
 8008c18:	bf08      	it	eq
 8008c1a:	68ec      	ldreq	r4, [r5, #12]
 8008c1c:	e7ec      	b.n	8008bf8 <_fflush_r+0x1c>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	08009ce0 	.word	0x08009ce0
 8008c28:	08009d00 	.word	0x08009d00
 8008c2c:	08009cc0 	.word	0x08009cc0

08008c30 <std>:
 8008c30:	2300      	movs	r3, #0
 8008c32:	b510      	push	{r4, lr}
 8008c34:	4604      	mov	r4, r0
 8008c36:	e9c0 3300 	strd	r3, r3, [r0]
 8008c3a:	6083      	str	r3, [r0, #8]
 8008c3c:	8181      	strh	r1, [r0, #12]
 8008c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c40:	81c2      	strh	r2, [r0, #14]
 8008c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c46:	6183      	str	r3, [r0, #24]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	305c      	adds	r0, #92	; 0x5c
 8008c4e:	f7fe fb5b 	bl	8007308 <memset>
 8008c52:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <std+0x38>)
 8008c54:	6263      	str	r3, [r4, #36]	; 0x24
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <std+0x3c>)
 8008c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <std+0x40>)
 8008c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <std+0x44>)
 8008c60:	6224      	str	r4, [r4, #32]
 8008c62:	6323      	str	r3, [r4, #48]	; 0x30
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	bf00      	nop
 8008c68:	08009891 	.word	0x08009891
 8008c6c:	080098b3 	.word	0x080098b3
 8008c70:	080098eb 	.word	0x080098eb
 8008c74:	0800990f 	.word	0x0800990f

08008c78 <_cleanup_r>:
 8008c78:	4901      	ldr	r1, [pc, #4]	; (8008c80 <_cleanup_r+0x8>)
 8008c7a:	f000 b885 	b.w	8008d88 <_fwalk_reent>
 8008c7e:	bf00      	nop
 8008c80:	08008bdd 	.word	0x08008bdd

08008c84 <__sfmoreglue>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	1e4a      	subs	r2, r1, #1
 8008c88:	2568      	movs	r5, #104	; 0x68
 8008c8a:	4355      	muls	r5, r2
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c92:	f000 fc53 	bl	800953c <_malloc_r>
 8008c96:	4604      	mov	r4, r0
 8008c98:	b140      	cbz	r0, 8008cac <__sfmoreglue+0x28>
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	60a0      	str	r0, [r4, #8]
 8008ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ca8:	f7fe fb2e 	bl	8007308 <memset>
 8008cac:	4620      	mov	r0, r4
 8008cae:	bd70      	pop	{r4, r5, r6, pc}

08008cb0 <__sinit>:
 8008cb0:	6983      	ldr	r3, [r0, #24]
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	bb33      	cbnz	r3, 8008d06 <__sinit+0x56>
 8008cb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008cbc:	6503      	str	r3, [r0, #80]	; 0x50
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <__sinit+0x58>)
 8008cc0:	4a12      	ldr	r2, [pc, #72]	; (8008d0c <__sinit+0x5c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6282      	str	r2, [r0, #40]	; 0x28
 8008cc6:	4298      	cmp	r0, r3
 8008cc8:	bf04      	itt	eq
 8008cca:	2301      	moveq	r3, #1
 8008ccc:	6183      	streq	r3, [r0, #24]
 8008cce:	f000 f81f 	bl	8008d10 <__sfp>
 8008cd2:	6060      	str	r0, [r4, #4]
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 f81b 	bl	8008d10 <__sfp>
 8008cda:	60a0      	str	r0, [r4, #8]
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 f817 	bl	8008d10 <__sfp>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	60e0      	str	r0, [r4, #12]
 8008ce6:	2104      	movs	r1, #4
 8008ce8:	6860      	ldr	r0, [r4, #4]
 8008cea:	f7ff ffa1 	bl	8008c30 <std>
 8008cee:	2201      	movs	r2, #1
 8008cf0:	2109      	movs	r1, #9
 8008cf2:	68a0      	ldr	r0, [r4, #8]
 8008cf4:	f7ff ff9c 	bl	8008c30 <std>
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	2112      	movs	r1, #18
 8008cfc:	68e0      	ldr	r0, [r4, #12]
 8008cfe:	f7ff ff97 	bl	8008c30 <std>
 8008d02:	2301      	movs	r3, #1
 8008d04:	61a3      	str	r3, [r4, #24]
 8008d06:	bd10      	pop	{r4, pc}
 8008d08:	08009c78 	.word	0x08009c78
 8008d0c:	08008c79 	.word	0x08008c79

08008d10 <__sfp>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	4b1b      	ldr	r3, [pc, #108]	; (8008d80 <__sfp+0x70>)
 8008d14:	681e      	ldr	r6, [r3, #0]
 8008d16:	69b3      	ldr	r3, [r6, #24]
 8008d18:	4607      	mov	r7, r0
 8008d1a:	b913      	cbnz	r3, 8008d22 <__sfp+0x12>
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f7ff ffc7 	bl	8008cb0 <__sinit>
 8008d22:	3648      	adds	r6, #72	; 0x48
 8008d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	d503      	bpl.n	8008d34 <__sfp+0x24>
 8008d2c:	6833      	ldr	r3, [r6, #0]
 8008d2e:	b133      	cbz	r3, 8008d3e <__sfp+0x2e>
 8008d30:	6836      	ldr	r6, [r6, #0]
 8008d32:	e7f7      	b.n	8008d24 <__sfp+0x14>
 8008d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d38:	b16d      	cbz	r5, 8008d56 <__sfp+0x46>
 8008d3a:	3468      	adds	r4, #104	; 0x68
 8008d3c:	e7f4      	b.n	8008d28 <__sfp+0x18>
 8008d3e:	2104      	movs	r1, #4
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff ff9f 	bl	8008c84 <__sfmoreglue>
 8008d46:	6030      	str	r0, [r6, #0]
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d1f1      	bne.n	8008d30 <__sfp+0x20>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	4604      	mov	r4, r0
 8008d52:	4620      	mov	r0, r4
 8008d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <__sfp+0x74>)
 8008d58:	6665      	str	r5, [r4, #100]	; 0x64
 8008d5a:	e9c4 5500 	strd	r5, r5, [r4]
 8008d5e:	60a5      	str	r5, [r4, #8]
 8008d60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008d64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008d68:	2208      	movs	r2, #8
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d70:	f7fe faca 	bl	8007308 <memset>
 8008d74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d7c:	e7e9      	b.n	8008d52 <__sfp+0x42>
 8008d7e:	bf00      	nop
 8008d80:	08009c78 	.word	0x08009c78
 8008d84:	ffff0001 	.word	0xffff0001

08008d88 <_fwalk_reent>:
 8008d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4689      	mov	r9, r1
 8008d90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d94:	2600      	movs	r6, #0
 8008d96:	b914      	cbnz	r4, 8008d9e <_fwalk_reent+0x16>
 8008d98:	4630      	mov	r0, r6
 8008d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008da2:	3f01      	subs	r7, #1
 8008da4:	d501      	bpl.n	8008daa <_fwalk_reent+0x22>
 8008da6:	6824      	ldr	r4, [r4, #0]
 8008da8:	e7f5      	b.n	8008d96 <_fwalk_reent+0xe>
 8008daa:	89ab      	ldrh	r3, [r5, #12]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d907      	bls.n	8008dc0 <_fwalk_reent+0x38>
 8008db0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008db4:	3301      	adds	r3, #1
 8008db6:	d003      	beq.n	8008dc0 <_fwalk_reent+0x38>
 8008db8:	4629      	mov	r1, r5
 8008dba:	4640      	mov	r0, r8
 8008dbc:	47c8      	blx	r9
 8008dbe:	4306      	orrs	r6, r0
 8008dc0:	3568      	adds	r5, #104	; 0x68
 8008dc2:	e7ee      	b.n	8008da2 <_fwalk_reent+0x1a>

08008dc4 <_localeconv_r>:
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <_localeconv_r+0x14>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6a18      	ldr	r0, [r3, #32]
 8008dca:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <_localeconv_r+0x18>)
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	bf08      	it	eq
 8008dd0:	4618      	moveq	r0, r3
 8008dd2:	30f0      	adds	r0, #240	; 0xf0
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	200000d0 	.word	0x200000d0
 8008ddc:	20000134 	.word	0x20000134

08008de0 <__swhatbuf_r>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	460e      	mov	r6, r1
 8008de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de8:	2900      	cmp	r1, #0
 8008dea:	b096      	sub	sp, #88	; 0x58
 8008dec:	4614      	mov	r4, r2
 8008dee:	461d      	mov	r5, r3
 8008df0:	da07      	bge.n	8008e02 <__swhatbuf_r+0x22>
 8008df2:	2300      	movs	r3, #0
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	89b3      	ldrh	r3, [r6, #12]
 8008df8:	061a      	lsls	r2, r3, #24
 8008dfa:	d410      	bmi.n	8008e1e <__swhatbuf_r+0x3e>
 8008dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e00:	e00e      	b.n	8008e20 <__swhatbuf_r+0x40>
 8008e02:	466a      	mov	r2, sp
 8008e04:	f000 fdaa 	bl	800995c <_fstat_r>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	dbf2      	blt.n	8008df2 <__swhatbuf_r+0x12>
 8008e0c:	9a01      	ldr	r2, [sp, #4]
 8008e0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e16:	425a      	negs	r2, r3
 8008e18:	415a      	adcs	r2, r3
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	e7ee      	b.n	8008dfc <__swhatbuf_r+0x1c>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	2000      	movs	r0, #0
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	b016      	add	sp, #88	; 0x58
 8008e26:	bd70      	pop	{r4, r5, r6, pc}

08008e28 <__smakebuf_r>:
 8008e28:	898b      	ldrh	r3, [r1, #12]
 8008e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e2c:	079d      	lsls	r5, r3, #30
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	d507      	bpl.n	8008e44 <__smakebuf_r+0x1c>
 8008e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	6123      	str	r3, [r4, #16]
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	6163      	str	r3, [r4, #20]
 8008e40:	b002      	add	sp, #8
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	ab01      	add	r3, sp, #4
 8008e46:	466a      	mov	r2, sp
 8008e48:	f7ff ffca 	bl	8008de0 <__swhatbuf_r>
 8008e4c:	9900      	ldr	r1, [sp, #0]
 8008e4e:	4605      	mov	r5, r0
 8008e50:	4630      	mov	r0, r6
 8008e52:	f000 fb73 	bl	800953c <_malloc_r>
 8008e56:	b948      	cbnz	r0, 8008e6c <__smakebuf_r+0x44>
 8008e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5c:	059a      	lsls	r2, r3, #22
 8008e5e:	d4ef      	bmi.n	8008e40 <__smakebuf_r+0x18>
 8008e60:	f023 0303 	bic.w	r3, r3, #3
 8008e64:	f043 0302 	orr.w	r3, r3, #2
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	e7e3      	b.n	8008e34 <__smakebuf_r+0xc>
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <__smakebuf_r+0x7c>)
 8008e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	6020      	str	r0, [r4, #0]
 8008e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e78:	81a3      	strh	r3, [r4, #12]
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	6163      	str	r3, [r4, #20]
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	6120      	str	r0, [r4, #16]
 8008e82:	b15b      	cbz	r3, 8008e9c <__smakebuf_r+0x74>
 8008e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f000 fd79 	bl	8009980 <_isatty_r>
 8008e8e:	b128      	cbz	r0, 8008e9c <__smakebuf_r+0x74>
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f023 0303 	bic.w	r3, r3, #3
 8008e96:	f043 0301 	orr.w	r3, r3, #1
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	431d      	orrs	r5, r3
 8008ea0:	81a5      	strh	r5, [r4, #12]
 8008ea2:	e7cd      	b.n	8008e40 <__smakebuf_r+0x18>
 8008ea4:	08008c79 	.word	0x08008c79

08008ea8 <malloc>:
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <malloc+0xc>)
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f000 bb45 	b.w	800953c <_malloc_r>
 8008eb2:	bf00      	nop
 8008eb4:	200000d0 	.word	0x200000d0

08008eb8 <memcpy>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	1e43      	subs	r3, r0, #1
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	d100      	bne.n	8008ec4 <memcpy+0xc>
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ecc:	e7f7      	b.n	8008ebe <memcpy+0x6>

08008ece <_Balloc>:
 8008ece:	b570      	push	{r4, r5, r6, lr}
 8008ed0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	460e      	mov	r6, r1
 8008ed6:	b93d      	cbnz	r5, 8008ee8 <_Balloc+0x1a>
 8008ed8:	2010      	movs	r0, #16
 8008eda:	f7ff ffe5 	bl	8008ea8 <malloc>
 8008ede:	6260      	str	r0, [r4, #36]	; 0x24
 8008ee0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ee4:	6005      	str	r5, [r0, #0]
 8008ee6:	60c5      	str	r5, [r0, #12]
 8008ee8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008eea:	68eb      	ldr	r3, [r5, #12]
 8008eec:	b183      	cbz	r3, 8008f10 <_Balloc+0x42>
 8008eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008ef6:	b9b8      	cbnz	r0, 8008f28 <_Balloc+0x5a>
 8008ef8:	2101      	movs	r1, #1
 8008efa:	fa01 f506 	lsl.w	r5, r1, r6
 8008efe:	1d6a      	adds	r2, r5, #5
 8008f00:	0092      	lsls	r2, r2, #2
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 fabe 	bl	8009484 <_calloc_r>
 8008f08:	b160      	cbz	r0, 8008f24 <_Balloc+0x56>
 8008f0a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f0e:	e00e      	b.n	8008f2e <_Balloc+0x60>
 8008f10:	2221      	movs	r2, #33	; 0x21
 8008f12:	2104      	movs	r1, #4
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 fab5 	bl	8009484 <_calloc_r>
 8008f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f1c:	60e8      	str	r0, [r5, #12]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e4      	bne.n	8008eee <_Balloc+0x20>
 8008f24:	2000      	movs	r0, #0
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	6802      	ldr	r2, [r0, #0]
 8008f2a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f34:	e7f7      	b.n	8008f26 <_Balloc+0x58>

08008f36 <_Bfree>:
 8008f36:	b570      	push	{r4, r5, r6, lr}
 8008f38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	b93c      	cbnz	r4, 8008f50 <_Bfree+0x1a>
 8008f40:	2010      	movs	r0, #16
 8008f42:	f7ff ffb1 	bl	8008ea8 <malloc>
 8008f46:	6270      	str	r0, [r6, #36]	; 0x24
 8008f48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f4c:	6004      	str	r4, [r0, #0]
 8008f4e:	60c4      	str	r4, [r0, #12]
 8008f50:	b13d      	cbz	r5, 8008f62 <_Bfree+0x2c>
 8008f52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f54:	686a      	ldr	r2, [r5, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f5c:	6029      	str	r1, [r5, #0]
 8008f5e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f62:	bd70      	pop	{r4, r5, r6, pc}

08008f64 <__multadd>:
 8008f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f68:	690d      	ldr	r5, [r1, #16]
 8008f6a:	461f      	mov	r7, r3
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	f101 0c14 	add.w	ip, r1, #20
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8dc 0000 	ldr.w	r0, [ip]
 8008f7a:	b281      	uxth	r1, r0
 8008f7c:	fb02 7101 	mla	r1, r2, r1, r7
 8008f80:	0c0f      	lsrs	r7, r1, #16
 8008f82:	0c00      	lsrs	r0, r0, #16
 8008f84:	fb02 7000 	mla	r0, r2, r0, r7
 8008f88:	b289      	uxth	r1, r1
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f90:	429d      	cmp	r5, r3
 8008f92:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f96:	f84c 1b04 	str.w	r1, [ip], #4
 8008f9a:	dcec      	bgt.n	8008f76 <__multadd+0x12>
 8008f9c:	b1d7      	cbz	r7, 8008fd4 <__multadd+0x70>
 8008f9e:	68a3      	ldr	r3, [r4, #8]
 8008fa0:	42ab      	cmp	r3, r5
 8008fa2:	dc12      	bgt.n	8008fca <__multadd+0x66>
 8008fa4:	6861      	ldr	r1, [r4, #4]
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	3101      	adds	r1, #1
 8008faa:	f7ff ff90 	bl	8008ece <_Balloc>
 8008fae:	6922      	ldr	r2, [r4, #16]
 8008fb0:	3202      	adds	r2, #2
 8008fb2:	f104 010c 	add.w	r1, r4, #12
 8008fb6:	4680      	mov	r8, r0
 8008fb8:	0092      	lsls	r2, r2, #2
 8008fba:	300c      	adds	r0, #12
 8008fbc:	f7ff ff7c 	bl	8008eb8 <memcpy>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f7ff ffb7 	bl	8008f36 <_Bfree>
 8008fc8:	4644      	mov	r4, r8
 8008fca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fce:	3501      	adds	r5, #1
 8008fd0:	615f      	str	r7, [r3, #20]
 8008fd2:	6125      	str	r5, [r4, #16]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fda <__hi0bits>:
 8008fda:	0c02      	lsrs	r2, r0, #16
 8008fdc:	0412      	lsls	r2, r2, #16
 8008fde:	4603      	mov	r3, r0
 8008fe0:	b9b2      	cbnz	r2, 8009010 <__hi0bits+0x36>
 8008fe2:	0403      	lsls	r3, r0, #16
 8008fe4:	2010      	movs	r0, #16
 8008fe6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fea:	bf04      	itt	eq
 8008fec:	021b      	lsleq	r3, r3, #8
 8008fee:	3008      	addeq	r0, #8
 8008ff0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ff4:	bf04      	itt	eq
 8008ff6:	011b      	lsleq	r3, r3, #4
 8008ff8:	3004      	addeq	r0, #4
 8008ffa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ffe:	bf04      	itt	eq
 8009000:	009b      	lsleq	r3, r3, #2
 8009002:	3002      	addeq	r0, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	db06      	blt.n	8009016 <__hi0bits+0x3c>
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	d503      	bpl.n	8009014 <__hi0bits+0x3a>
 800900c:	3001      	adds	r0, #1
 800900e:	4770      	bx	lr
 8009010:	2000      	movs	r0, #0
 8009012:	e7e8      	b.n	8008fe6 <__hi0bits+0xc>
 8009014:	2020      	movs	r0, #32
 8009016:	4770      	bx	lr

08009018 <__lo0bits>:
 8009018:	6803      	ldr	r3, [r0, #0]
 800901a:	f013 0207 	ands.w	r2, r3, #7
 800901e:	4601      	mov	r1, r0
 8009020:	d00b      	beq.n	800903a <__lo0bits+0x22>
 8009022:	07da      	lsls	r2, r3, #31
 8009024:	d423      	bmi.n	800906e <__lo0bits+0x56>
 8009026:	0798      	lsls	r0, r3, #30
 8009028:	bf49      	itett	mi
 800902a:	085b      	lsrmi	r3, r3, #1
 800902c:	089b      	lsrpl	r3, r3, #2
 800902e:	2001      	movmi	r0, #1
 8009030:	600b      	strmi	r3, [r1, #0]
 8009032:	bf5c      	itt	pl
 8009034:	600b      	strpl	r3, [r1, #0]
 8009036:	2002      	movpl	r0, #2
 8009038:	4770      	bx	lr
 800903a:	b298      	uxth	r0, r3
 800903c:	b9a8      	cbnz	r0, 800906a <__lo0bits+0x52>
 800903e:	0c1b      	lsrs	r3, r3, #16
 8009040:	2010      	movs	r0, #16
 8009042:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009046:	bf04      	itt	eq
 8009048:	0a1b      	lsreq	r3, r3, #8
 800904a:	3008      	addeq	r0, #8
 800904c:	071a      	lsls	r2, r3, #28
 800904e:	bf04      	itt	eq
 8009050:	091b      	lsreq	r3, r3, #4
 8009052:	3004      	addeq	r0, #4
 8009054:	079a      	lsls	r2, r3, #30
 8009056:	bf04      	itt	eq
 8009058:	089b      	lsreq	r3, r3, #2
 800905a:	3002      	addeq	r0, #2
 800905c:	07da      	lsls	r2, r3, #31
 800905e:	d402      	bmi.n	8009066 <__lo0bits+0x4e>
 8009060:	085b      	lsrs	r3, r3, #1
 8009062:	d006      	beq.n	8009072 <__lo0bits+0x5a>
 8009064:	3001      	adds	r0, #1
 8009066:	600b      	str	r3, [r1, #0]
 8009068:	4770      	bx	lr
 800906a:	4610      	mov	r0, r2
 800906c:	e7e9      	b.n	8009042 <__lo0bits+0x2a>
 800906e:	2000      	movs	r0, #0
 8009070:	4770      	bx	lr
 8009072:	2020      	movs	r0, #32
 8009074:	4770      	bx	lr

08009076 <__i2b>:
 8009076:	b510      	push	{r4, lr}
 8009078:	460c      	mov	r4, r1
 800907a:	2101      	movs	r1, #1
 800907c:	f7ff ff27 	bl	8008ece <_Balloc>
 8009080:	2201      	movs	r2, #1
 8009082:	6144      	str	r4, [r0, #20]
 8009084:	6102      	str	r2, [r0, #16]
 8009086:	bd10      	pop	{r4, pc}

08009088 <__multiply>:
 8009088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	4614      	mov	r4, r2
 800908e:	690a      	ldr	r2, [r1, #16]
 8009090:	6923      	ldr	r3, [r4, #16]
 8009092:	429a      	cmp	r2, r3
 8009094:	bfb8      	it	lt
 8009096:	460b      	movlt	r3, r1
 8009098:	4688      	mov	r8, r1
 800909a:	bfbc      	itt	lt
 800909c:	46a0      	movlt	r8, r4
 800909e:	461c      	movlt	r4, r3
 80090a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80090a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090b0:	eb07 0609 	add.w	r6, r7, r9
 80090b4:	42b3      	cmp	r3, r6
 80090b6:	bfb8      	it	lt
 80090b8:	3101      	addlt	r1, #1
 80090ba:	f7ff ff08 	bl	8008ece <_Balloc>
 80090be:	f100 0514 	add.w	r5, r0, #20
 80090c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80090c6:	462b      	mov	r3, r5
 80090c8:	2200      	movs	r2, #0
 80090ca:	4573      	cmp	r3, lr
 80090cc:	d316      	bcc.n	80090fc <__multiply+0x74>
 80090ce:	f104 0214 	add.w	r2, r4, #20
 80090d2:	f108 0114 	add.w	r1, r8, #20
 80090d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80090da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	9b00      	ldr	r3, [sp, #0]
 80090e2:	9201      	str	r2, [sp, #4]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d80c      	bhi.n	8009102 <__multiply+0x7a>
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	dd03      	ble.n	80090f4 <__multiply+0x6c>
 80090ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d05d      	beq.n	80091b0 <__multiply+0x128>
 80090f4:	6106      	str	r6, [r0, #16]
 80090f6:	b003      	add	sp, #12
 80090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fc:	f843 2b04 	str.w	r2, [r3], #4
 8009100:	e7e3      	b.n	80090ca <__multiply+0x42>
 8009102:	f8b2 b000 	ldrh.w	fp, [r2]
 8009106:	f1bb 0f00 	cmp.w	fp, #0
 800910a:	d023      	beq.n	8009154 <__multiply+0xcc>
 800910c:	4689      	mov	r9, r1
 800910e:	46ac      	mov	ip, r5
 8009110:	f04f 0800 	mov.w	r8, #0
 8009114:	f859 4b04 	ldr.w	r4, [r9], #4
 8009118:	f8dc a000 	ldr.w	sl, [ip]
 800911c:	b2a3      	uxth	r3, r4
 800911e:	fa1f fa8a 	uxth.w	sl, sl
 8009122:	fb0b a303 	mla	r3, fp, r3, sl
 8009126:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800912a:	f8dc 4000 	ldr.w	r4, [ip]
 800912e:	4443      	add	r3, r8
 8009130:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009134:	fb0b 840a 	mla	r4, fp, sl, r8
 8009138:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800913c:	46e2      	mov	sl, ip
 800913e:	b29b      	uxth	r3, r3
 8009140:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009144:	454f      	cmp	r7, r9
 8009146:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800914a:	f84a 3b04 	str.w	r3, [sl], #4
 800914e:	d82b      	bhi.n	80091a8 <__multiply+0x120>
 8009150:	f8cc 8004 	str.w	r8, [ip, #4]
 8009154:	9b01      	ldr	r3, [sp, #4]
 8009156:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800915a:	3204      	adds	r2, #4
 800915c:	f1ba 0f00 	cmp.w	sl, #0
 8009160:	d020      	beq.n	80091a4 <__multiply+0x11c>
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	4689      	mov	r9, r1
 8009166:	46a8      	mov	r8, r5
 8009168:	f04f 0b00 	mov.w	fp, #0
 800916c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009170:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009174:	fb0a 440c 	mla	r4, sl, ip, r4
 8009178:	445c      	add	r4, fp
 800917a:	46c4      	mov	ip, r8
 800917c:	b29b      	uxth	r3, r3
 800917e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009182:	f84c 3b04 	str.w	r3, [ip], #4
 8009186:	f859 3b04 	ldr.w	r3, [r9], #4
 800918a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	fb0a b303 	mla	r3, sl, r3, fp
 8009194:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009198:	454f      	cmp	r7, r9
 800919a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800919e:	d805      	bhi.n	80091ac <__multiply+0x124>
 80091a0:	f8c8 3004 	str.w	r3, [r8, #4]
 80091a4:	3504      	adds	r5, #4
 80091a6:	e79b      	b.n	80090e0 <__multiply+0x58>
 80091a8:	46d4      	mov	ip, sl
 80091aa:	e7b3      	b.n	8009114 <__multiply+0x8c>
 80091ac:	46e0      	mov	r8, ip
 80091ae:	e7dd      	b.n	800916c <__multiply+0xe4>
 80091b0:	3e01      	subs	r6, #1
 80091b2:	e799      	b.n	80090e8 <__multiply+0x60>

080091b4 <__pow5mult>:
 80091b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b8:	4615      	mov	r5, r2
 80091ba:	f012 0203 	ands.w	r2, r2, #3
 80091be:	4606      	mov	r6, r0
 80091c0:	460f      	mov	r7, r1
 80091c2:	d007      	beq.n	80091d4 <__pow5mult+0x20>
 80091c4:	3a01      	subs	r2, #1
 80091c6:	4c21      	ldr	r4, [pc, #132]	; (800924c <__pow5mult+0x98>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091ce:	f7ff fec9 	bl	8008f64 <__multadd>
 80091d2:	4607      	mov	r7, r0
 80091d4:	10ad      	asrs	r5, r5, #2
 80091d6:	d035      	beq.n	8009244 <__pow5mult+0x90>
 80091d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091da:	b93c      	cbnz	r4, 80091ec <__pow5mult+0x38>
 80091dc:	2010      	movs	r0, #16
 80091de:	f7ff fe63 	bl	8008ea8 <malloc>
 80091e2:	6270      	str	r0, [r6, #36]	; 0x24
 80091e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091e8:	6004      	str	r4, [r0, #0]
 80091ea:	60c4      	str	r4, [r0, #12]
 80091ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091f4:	b94c      	cbnz	r4, 800920a <__pow5mult+0x56>
 80091f6:	f240 2171 	movw	r1, #625	; 0x271
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ff3b 	bl	8009076 <__i2b>
 8009200:	2300      	movs	r3, #0
 8009202:	f8c8 0008 	str.w	r0, [r8, #8]
 8009206:	4604      	mov	r4, r0
 8009208:	6003      	str	r3, [r0, #0]
 800920a:	f04f 0800 	mov.w	r8, #0
 800920e:	07eb      	lsls	r3, r5, #31
 8009210:	d50a      	bpl.n	8009228 <__pow5mult+0x74>
 8009212:	4639      	mov	r1, r7
 8009214:	4622      	mov	r2, r4
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ff36 	bl	8009088 <__multiply>
 800921c:	4639      	mov	r1, r7
 800921e:	4681      	mov	r9, r0
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff fe88 	bl	8008f36 <_Bfree>
 8009226:	464f      	mov	r7, r9
 8009228:	106d      	asrs	r5, r5, #1
 800922a:	d00b      	beq.n	8009244 <__pow5mult+0x90>
 800922c:	6820      	ldr	r0, [r4, #0]
 800922e:	b938      	cbnz	r0, 8009240 <__pow5mult+0x8c>
 8009230:	4622      	mov	r2, r4
 8009232:	4621      	mov	r1, r4
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff ff27 	bl	8009088 <__multiply>
 800923a:	6020      	str	r0, [r4, #0]
 800923c:	f8c0 8000 	str.w	r8, [r0]
 8009240:	4604      	mov	r4, r0
 8009242:	e7e4      	b.n	800920e <__pow5mult+0x5a>
 8009244:	4638      	mov	r0, r7
 8009246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924a:	bf00      	nop
 800924c:	08009e10 	.word	0x08009e10

08009250 <__lshift>:
 8009250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800925a:	6923      	ldr	r3, [r4, #16]
 800925c:	6849      	ldr	r1, [r1, #4]
 800925e:	eb0a 0903 	add.w	r9, sl, r3
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	4607      	mov	r7, r0
 8009266:	4616      	mov	r6, r2
 8009268:	f109 0501 	add.w	r5, r9, #1
 800926c:	42ab      	cmp	r3, r5
 800926e:	db32      	blt.n	80092d6 <__lshift+0x86>
 8009270:	4638      	mov	r0, r7
 8009272:	f7ff fe2c 	bl	8008ece <_Balloc>
 8009276:	2300      	movs	r3, #0
 8009278:	4680      	mov	r8, r0
 800927a:	f100 0114 	add.w	r1, r0, #20
 800927e:	461a      	mov	r2, r3
 8009280:	4553      	cmp	r3, sl
 8009282:	db2b      	blt.n	80092dc <__lshift+0x8c>
 8009284:	6920      	ldr	r0, [r4, #16]
 8009286:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800928a:	f104 0314 	add.w	r3, r4, #20
 800928e:	f016 021f 	ands.w	r2, r6, #31
 8009292:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009296:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800929a:	d025      	beq.n	80092e8 <__lshift+0x98>
 800929c:	f1c2 0e20 	rsb	lr, r2, #32
 80092a0:	2000      	movs	r0, #0
 80092a2:	681e      	ldr	r6, [r3, #0]
 80092a4:	468a      	mov	sl, r1
 80092a6:	4096      	lsls	r6, r2
 80092a8:	4330      	orrs	r0, r6
 80092aa:	f84a 0b04 	str.w	r0, [sl], #4
 80092ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80092b2:	459c      	cmp	ip, r3
 80092b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80092b8:	d814      	bhi.n	80092e4 <__lshift+0x94>
 80092ba:	6048      	str	r0, [r1, #4]
 80092bc:	b108      	cbz	r0, 80092c2 <__lshift+0x72>
 80092be:	f109 0502 	add.w	r5, r9, #2
 80092c2:	3d01      	subs	r5, #1
 80092c4:	4638      	mov	r0, r7
 80092c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80092ca:	4621      	mov	r1, r4
 80092cc:	f7ff fe33 	bl	8008f36 <_Bfree>
 80092d0:	4640      	mov	r0, r8
 80092d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d6:	3101      	adds	r1, #1
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	e7c7      	b.n	800926c <__lshift+0x1c>
 80092dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80092e0:	3301      	adds	r3, #1
 80092e2:	e7cd      	b.n	8009280 <__lshift+0x30>
 80092e4:	4651      	mov	r1, sl
 80092e6:	e7dc      	b.n	80092a2 <__lshift+0x52>
 80092e8:	3904      	subs	r1, #4
 80092ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80092f2:	459c      	cmp	ip, r3
 80092f4:	d8f9      	bhi.n	80092ea <__lshift+0x9a>
 80092f6:	e7e4      	b.n	80092c2 <__lshift+0x72>

080092f8 <__mcmp>:
 80092f8:	6903      	ldr	r3, [r0, #16]
 80092fa:	690a      	ldr	r2, [r1, #16]
 80092fc:	1a9b      	subs	r3, r3, r2
 80092fe:	b530      	push	{r4, r5, lr}
 8009300:	d10c      	bne.n	800931c <__mcmp+0x24>
 8009302:	0092      	lsls	r2, r2, #2
 8009304:	3014      	adds	r0, #20
 8009306:	3114      	adds	r1, #20
 8009308:	1884      	adds	r4, r0, r2
 800930a:	4411      	add	r1, r2
 800930c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009314:	4295      	cmp	r5, r2
 8009316:	d003      	beq.n	8009320 <__mcmp+0x28>
 8009318:	d305      	bcc.n	8009326 <__mcmp+0x2e>
 800931a:	2301      	movs	r3, #1
 800931c:	4618      	mov	r0, r3
 800931e:	bd30      	pop	{r4, r5, pc}
 8009320:	42a0      	cmp	r0, r4
 8009322:	d3f3      	bcc.n	800930c <__mcmp+0x14>
 8009324:	e7fa      	b.n	800931c <__mcmp+0x24>
 8009326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800932a:	e7f7      	b.n	800931c <__mcmp+0x24>

0800932c <__mdiff>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	460d      	mov	r5, r1
 8009332:	4607      	mov	r7, r0
 8009334:	4611      	mov	r1, r2
 8009336:	4628      	mov	r0, r5
 8009338:	4614      	mov	r4, r2
 800933a:	f7ff ffdd 	bl	80092f8 <__mcmp>
 800933e:	1e06      	subs	r6, r0, #0
 8009340:	d108      	bne.n	8009354 <__mdiff+0x28>
 8009342:	4631      	mov	r1, r6
 8009344:	4638      	mov	r0, r7
 8009346:	f7ff fdc2 	bl	8008ece <_Balloc>
 800934a:	2301      	movs	r3, #1
 800934c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	bfa4      	itt	ge
 8009356:	4623      	movge	r3, r4
 8009358:	462c      	movge	r4, r5
 800935a:	4638      	mov	r0, r7
 800935c:	6861      	ldr	r1, [r4, #4]
 800935e:	bfa6      	itte	ge
 8009360:	461d      	movge	r5, r3
 8009362:	2600      	movge	r6, #0
 8009364:	2601      	movlt	r6, #1
 8009366:	f7ff fdb2 	bl	8008ece <_Balloc>
 800936a:	692b      	ldr	r3, [r5, #16]
 800936c:	60c6      	str	r6, [r0, #12]
 800936e:	6926      	ldr	r6, [r4, #16]
 8009370:	f105 0914 	add.w	r9, r5, #20
 8009374:	f104 0214 	add.w	r2, r4, #20
 8009378:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800937c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009380:	f100 0514 	add.w	r5, r0, #20
 8009384:	f04f 0e00 	mov.w	lr, #0
 8009388:	f852 ab04 	ldr.w	sl, [r2], #4
 800938c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009390:	fa1e f18a 	uxtah	r1, lr, sl
 8009394:	b2a3      	uxth	r3, r4
 8009396:	1ac9      	subs	r1, r1, r3
 8009398:	0c23      	lsrs	r3, r4, #16
 800939a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800939e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093a2:	b289      	uxth	r1, r1
 80093a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80093a8:	45c8      	cmp	r8, r9
 80093aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80093ae:	4694      	mov	ip, r2
 80093b0:	f845 3b04 	str.w	r3, [r5], #4
 80093b4:	d8e8      	bhi.n	8009388 <__mdiff+0x5c>
 80093b6:	45bc      	cmp	ip, r7
 80093b8:	d304      	bcc.n	80093c4 <__mdiff+0x98>
 80093ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80093be:	b183      	cbz	r3, 80093e2 <__mdiff+0xb6>
 80093c0:	6106      	str	r6, [r0, #16]
 80093c2:	e7c5      	b.n	8009350 <__mdiff+0x24>
 80093c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093c8:	fa1e f381 	uxtah	r3, lr, r1
 80093cc:	141a      	asrs	r2, r3, #16
 80093ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80093dc:	f845 3b04 	str.w	r3, [r5], #4
 80093e0:	e7e9      	b.n	80093b6 <__mdiff+0x8a>
 80093e2:	3e01      	subs	r6, #1
 80093e4:	e7e9      	b.n	80093ba <__mdiff+0x8e>

080093e6 <__d2b>:
 80093e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093ea:	460e      	mov	r6, r1
 80093ec:	2101      	movs	r1, #1
 80093ee:	ec59 8b10 	vmov	r8, r9, d0
 80093f2:	4615      	mov	r5, r2
 80093f4:	f7ff fd6b 	bl	8008ece <_Balloc>
 80093f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80093fc:	4607      	mov	r7, r0
 80093fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009402:	bb34      	cbnz	r4, 8009452 <__d2b+0x6c>
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	f1b8 0300 	subs.w	r3, r8, #0
 800940a:	d027      	beq.n	800945c <__d2b+0x76>
 800940c:	a802      	add	r0, sp, #8
 800940e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009412:	f7ff fe01 	bl	8009018 <__lo0bits>
 8009416:	9900      	ldr	r1, [sp, #0]
 8009418:	b1f0      	cbz	r0, 8009458 <__d2b+0x72>
 800941a:	9a01      	ldr	r2, [sp, #4]
 800941c:	f1c0 0320 	rsb	r3, r0, #32
 8009420:	fa02 f303 	lsl.w	r3, r2, r3
 8009424:	430b      	orrs	r3, r1
 8009426:	40c2      	lsrs	r2, r0
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	9201      	str	r2, [sp, #4]
 800942c:	9b01      	ldr	r3, [sp, #4]
 800942e:	61bb      	str	r3, [r7, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	bf14      	ite	ne
 8009434:	2102      	movne	r1, #2
 8009436:	2101      	moveq	r1, #1
 8009438:	6139      	str	r1, [r7, #16]
 800943a:	b1c4      	cbz	r4, 800946e <__d2b+0x88>
 800943c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009440:	4404      	add	r4, r0
 8009442:	6034      	str	r4, [r6, #0]
 8009444:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009448:	6028      	str	r0, [r5, #0]
 800944a:	4638      	mov	r0, r7
 800944c:	b003      	add	sp, #12
 800944e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009456:	e7d5      	b.n	8009404 <__d2b+0x1e>
 8009458:	6179      	str	r1, [r7, #20]
 800945a:	e7e7      	b.n	800942c <__d2b+0x46>
 800945c:	a801      	add	r0, sp, #4
 800945e:	f7ff fddb 	bl	8009018 <__lo0bits>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	2101      	movs	r1, #1
 8009468:	6139      	str	r1, [r7, #16]
 800946a:	3020      	adds	r0, #32
 800946c:	e7e5      	b.n	800943a <__d2b+0x54>
 800946e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009472:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009476:	6030      	str	r0, [r6, #0]
 8009478:	6918      	ldr	r0, [r3, #16]
 800947a:	f7ff fdae 	bl	8008fda <__hi0bits>
 800947e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009482:	e7e1      	b.n	8009448 <__d2b+0x62>

08009484 <_calloc_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	fb02 f401 	mul.w	r4, r2, r1
 800948a:	4621      	mov	r1, r4
 800948c:	f000 f856 	bl	800953c <_malloc_r>
 8009490:	4605      	mov	r5, r0
 8009492:	b118      	cbz	r0, 800949c <_calloc_r+0x18>
 8009494:	4622      	mov	r2, r4
 8009496:	2100      	movs	r1, #0
 8009498:	f7fd ff36 	bl	8007308 <memset>
 800949c:	4628      	mov	r0, r5
 800949e:	bd38      	pop	{r3, r4, r5, pc}

080094a0 <_free_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4605      	mov	r5, r0
 80094a4:	2900      	cmp	r1, #0
 80094a6:	d045      	beq.n	8009534 <_free_r+0x94>
 80094a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ac:	1f0c      	subs	r4, r1, #4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	bfb8      	it	lt
 80094b2:	18e4      	addlt	r4, r4, r3
 80094b4:	f000 fa98 	bl	80099e8 <__malloc_lock>
 80094b8:	4a1f      	ldr	r2, [pc, #124]	; (8009538 <_free_r+0x98>)
 80094ba:	6813      	ldr	r3, [r2, #0]
 80094bc:	4610      	mov	r0, r2
 80094be:	b933      	cbnz	r3, 80094ce <_free_r+0x2e>
 80094c0:	6063      	str	r3, [r4, #4]
 80094c2:	6014      	str	r4, [r2, #0]
 80094c4:	4628      	mov	r0, r5
 80094c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ca:	f000 ba8e 	b.w	80099ea <__malloc_unlock>
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	d90c      	bls.n	80094ec <_free_r+0x4c>
 80094d2:	6821      	ldr	r1, [r4, #0]
 80094d4:	1862      	adds	r2, r4, r1
 80094d6:	4293      	cmp	r3, r2
 80094d8:	bf04      	itt	eq
 80094da:	681a      	ldreq	r2, [r3, #0]
 80094dc:	685b      	ldreq	r3, [r3, #4]
 80094de:	6063      	str	r3, [r4, #4]
 80094e0:	bf04      	itt	eq
 80094e2:	1852      	addeq	r2, r2, r1
 80094e4:	6022      	streq	r2, [r4, #0]
 80094e6:	6004      	str	r4, [r0, #0]
 80094e8:	e7ec      	b.n	80094c4 <_free_r+0x24>
 80094ea:	4613      	mov	r3, r2
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	b10a      	cbz	r2, 80094f4 <_free_r+0x54>
 80094f0:	42a2      	cmp	r2, r4
 80094f2:	d9fa      	bls.n	80094ea <_free_r+0x4a>
 80094f4:	6819      	ldr	r1, [r3, #0]
 80094f6:	1858      	adds	r0, r3, r1
 80094f8:	42a0      	cmp	r0, r4
 80094fa:	d10b      	bne.n	8009514 <_free_r+0x74>
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	4401      	add	r1, r0
 8009500:	1858      	adds	r0, r3, r1
 8009502:	4282      	cmp	r2, r0
 8009504:	6019      	str	r1, [r3, #0]
 8009506:	d1dd      	bne.n	80094c4 <_free_r+0x24>
 8009508:	6810      	ldr	r0, [r2, #0]
 800950a:	6852      	ldr	r2, [r2, #4]
 800950c:	605a      	str	r2, [r3, #4]
 800950e:	4401      	add	r1, r0
 8009510:	6019      	str	r1, [r3, #0]
 8009512:	e7d7      	b.n	80094c4 <_free_r+0x24>
 8009514:	d902      	bls.n	800951c <_free_r+0x7c>
 8009516:	230c      	movs	r3, #12
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	e7d3      	b.n	80094c4 <_free_r+0x24>
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	1821      	adds	r1, r4, r0
 8009520:	428a      	cmp	r2, r1
 8009522:	bf04      	itt	eq
 8009524:	6811      	ldreq	r1, [r2, #0]
 8009526:	6852      	ldreq	r2, [r2, #4]
 8009528:	6062      	str	r2, [r4, #4]
 800952a:	bf04      	itt	eq
 800952c:	1809      	addeq	r1, r1, r0
 800952e:	6021      	streq	r1, [r4, #0]
 8009530:	605c      	str	r4, [r3, #4]
 8009532:	e7c7      	b.n	80094c4 <_free_r+0x24>
 8009534:	bd38      	pop	{r3, r4, r5, pc}
 8009536:	bf00      	nop
 8009538:	200002d0 	.word	0x200002d0

0800953c <_malloc_r>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	1ccd      	adds	r5, r1, #3
 8009540:	f025 0503 	bic.w	r5, r5, #3
 8009544:	3508      	adds	r5, #8
 8009546:	2d0c      	cmp	r5, #12
 8009548:	bf38      	it	cc
 800954a:	250c      	movcc	r5, #12
 800954c:	2d00      	cmp	r5, #0
 800954e:	4606      	mov	r6, r0
 8009550:	db01      	blt.n	8009556 <_malloc_r+0x1a>
 8009552:	42a9      	cmp	r1, r5
 8009554:	d903      	bls.n	800955e <_malloc_r+0x22>
 8009556:	230c      	movs	r3, #12
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	2000      	movs	r0, #0
 800955c:	bd70      	pop	{r4, r5, r6, pc}
 800955e:	f000 fa43 	bl	80099e8 <__malloc_lock>
 8009562:	4a21      	ldr	r2, [pc, #132]	; (80095e8 <_malloc_r+0xac>)
 8009564:	6814      	ldr	r4, [r2, #0]
 8009566:	4621      	mov	r1, r4
 8009568:	b991      	cbnz	r1, 8009590 <_malloc_r+0x54>
 800956a:	4c20      	ldr	r4, [pc, #128]	; (80095ec <_malloc_r+0xb0>)
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	b91b      	cbnz	r3, 8009578 <_malloc_r+0x3c>
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f97d 	bl	8009870 <_sbrk_r>
 8009576:	6020      	str	r0, [r4, #0]
 8009578:	4629      	mov	r1, r5
 800957a:	4630      	mov	r0, r6
 800957c:	f000 f978 	bl	8009870 <_sbrk_r>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d124      	bne.n	80095ce <_malloc_r+0x92>
 8009584:	230c      	movs	r3, #12
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	4630      	mov	r0, r6
 800958a:	f000 fa2e 	bl	80099ea <__malloc_unlock>
 800958e:	e7e4      	b.n	800955a <_malloc_r+0x1e>
 8009590:	680b      	ldr	r3, [r1, #0]
 8009592:	1b5b      	subs	r3, r3, r5
 8009594:	d418      	bmi.n	80095c8 <_malloc_r+0x8c>
 8009596:	2b0b      	cmp	r3, #11
 8009598:	d90f      	bls.n	80095ba <_malloc_r+0x7e>
 800959a:	600b      	str	r3, [r1, #0]
 800959c:	50cd      	str	r5, [r1, r3]
 800959e:	18cc      	adds	r4, r1, r3
 80095a0:	4630      	mov	r0, r6
 80095a2:	f000 fa22 	bl	80099ea <__malloc_unlock>
 80095a6:	f104 000b 	add.w	r0, r4, #11
 80095aa:	1d23      	adds	r3, r4, #4
 80095ac:	f020 0007 	bic.w	r0, r0, #7
 80095b0:	1ac3      	subs	r3, r0, r3
 80095b2:	d0d3      	beq.n	800955c <_malloc_r+0x20>
 80095b4:	425a      	negs	r2, r3
 80095b6:	50e2      	str	r2, [r4, r3]
 80095b8:	e7d0      	b.n	800955c <_malloc_r+0x20>
 80095ba:	428c      	cmp	r4, r1
 80095bc:	684b      	ldr	r3, [r1, #4]
 80095be:	bf16      	itet	ne
 80095c0:	6063      	strne	r3, [r4, #4]
 80095c2:	6013      	streq	r3, [r2, #0]
 80095c4:	460c      	movne	r4, r1
 80095c6:	e7eb      	b.n	80095a0 <_malloc_r+0x64>
 80095c8:	460c      	mov	r4, r1
 80095ca:	6849      	ldr	r1, [r1, #4]
 80095cc:	e7cc      	b.n	8009568 <_malloc_r+0x2c>
 80095ce:	1cc4      	adds	r4, r0, #3
 80095d0:	f024 0403 	bic.w	r4, r4, #3
 80095d4:	42a0      	cmp	r0, r4
 80095d6:	d005      	beq.n	80095e4 <_malloc_r+0xa8>
 80095d8:	1a21      	subs	r1, r4, r0
 80095da:	4630      	mov	r0, r6
 80095dc:	f000 f948 	bl	8009870 <_sbrk_r>
 80095e0:	3001      	adds	r0, #1
 80095e2:	d0cf      	beq.n	8009584 <_malloc_r+0x48>
 80095e4:	6025      	str	r5, [r4, #0]
 80095e6:	e7db      	b.n	80095a0 <_malloc_r+0x64>
 80095e8:	200002d0 	.word	0x200002d0
 80095ec:	200002d4 	.word	0x200002d4

080095f0 <__sfputc_r>:
 80095f0:	6893      	ldr	r3, [r2, #8]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	b410      	push	{r4}
 80095f8:	6093      	str	r3, [r2, #8]
 80095fa:	da08      	bge.n	800960e <__sfputc_r+0x1e>
 80095fc:	6994      	ldr	r4, [r2, #24]
 80095fe:	42a3      	cmp	r3, r4
 8009600:	db01      	blt.n	8009606 <__sfputc_r+0x16>
 8009602:	290a      	cmp	r1, #10
 8009604:	d103      	bne.n	800960e <__sfputc_r+0x1e>
 8009606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800960a:	f7fe bb5d 	b.w	8007cc8 <__swbuf_r>
 800960e:	6813      	ldr	r3, [r2, #0]
 8009610:	1c58      	adds	r0, r3, #1
 8009612:	6010      	str	r0, [r2, #0]
 8009614:	7019      	strb	r1, [r3, #0]
 8009616:	4608      	mov	r0, r1
 8009618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800961c:	4770      	bx	lr

0800961e <__sfputs_r>:
 800961e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	4614      	mov	r4, r2
 8009626:	18d5      	adds	r5, r2, r3
 8009628:	42ac      	cmp	r4, r5
 800962a:	d101      	bne.n	8009630 <__sfputs_r+0x12>
 800962c:	2000      	movs	r0, #0
 800962e:	e007      	b.n	8009640 <__sfputs_r+0x22>
 8009630:	463a      	mov	r2, r7
 8009632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009636:	4630      	mov	r0, r6
 8009638:	f7ff ffda 	bl	80095f0 <__sfputc_r>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d1f3      	bne.n	8009628 <__sfputs_r+0xa>
 8009640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009644 <_vfiprintf_r>:
 8009644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009648:	460c      	mov	r4, r1
 800964a:	b09d      	sub	sp, #116	; 0x74
 800964c:	4617      	mov	r7, r2
 800964e:	461d      	mov	r5, r3
 8009650:	4606      	mov	r6, r0
 8009652:	b118      	cbz	r0, 800965c <_vfiprintf_r+0x18>
 8009654:	6983      	ldr	r3, [r0, #24]
 8009656:	b90b      	cbnz	r3, 800965c <_vfiprintf_r+0x18>
 8009658:	f7ff fb2a 	bl	8008cb0 <__sinit>
 800965c:	4b7c      	ldr	r3, [pc, #496]	; (8009850 <_vfiprintf_r+0x20c>)
 800965e:	429c      	cmp	r4, r3
 8009660:	d158      	bne.n	8009714 <_vfiprintf_r+0xd0>
 8009662:	6874      	ldr	r4, [r6, #4]
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	0718      	lsls	r0, r3, #28
 8009668:	d55e      	bpl.n	8009728 <_vfiprintf_r+0xe4>
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d05b      	beq.n	8009728 <_vfiprintf_r+0xe4>
 8009670:	2300      	movs	r3, #0
 8009672:	9309      	str	r3, [sp, #36]	; 0x24
 8009674:	2320      	movs	r3, #32
 8009676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800967a:	2330      	movs	r3, #48	; 0x30
 800967c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009680:	9503      	str	r5, [sp, #12]
 8009682:	f04f 0b01 	mov.w	fp, #1
 8009686:	46b8      	mov	r8, r7
 8009688:	4645      	mov	r5, r8
 800968a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800968e:	b10b      	cbz	r3, 8009694 <_vfiprintf_r+0x50>
 8009690:	2b25      	cmp	r3, #37	; 0x25
 8009692:	d154      	bne.n	800973e <_vfiprintf_r+0xfa>
 8009694:	ebb8 0a07 	subs.w	sl, r8, r7
 8009698:	d00b      	beq.n	80096b2 <_vfiprintf_r+0x6e>
 800969a:	4653      	mov	r3, sl
 800969c:	463a      	mov	r2, r7
 800969e:	4621      	mov	r1, r4
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7ff ffbc 	bl	800961e <__sfputs_r>
 80096a6:	3001      	adds	r0, #1
 80096a8:	f000 80c2 	beq.w	8009830 <_vfiprintf_r+0x1ec>
 80096ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ae:	4453      	add	r3, sl
 80096b0:	9309      	str	r3, [sp, #36]	; 0x24
 80096b2:	f898 3000 	ldrb.w	r3, [r8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 80ba 	beq.w	8009830 <_vfiprintf_r+0x1ec>
 80096bc:	2300      	movs	r3, #0
 80096be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096c6:	9304      	str	r3, [sp, #16]
 80096c8:	9307      	str	r3, [sp, #28]
 80096ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ce:	931a      	str	r3, [sp, #104]	; 0x68
 80096d0:	46a8      	mov	r8, r5
 80096d2:	2205      	movs	r2, #5
 80096d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80096d8:	485e      	ldr	r0, [pc, #376]	; (8009854 <_vfiprintf_r+0x210>)
 80096da:	f7f6 fd81 	bl	80001e0 <memchr>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	bb78      	cbnz	r0, 8009742 <_vfiprintf_r+0xfe>
 80096e2:	06d9      	lsls	r1, r3, #27
 80096e4:	bf44      	itt	mi
 80096e6:	2220      	movmi	r2, #32
 80096e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096ec:	071a      	lsls	r2, r3, #28
 80096ee:	bf44      	itt	mi
 80096f0:	222b      	movmi	r2, #43	; 0x2b
 80096f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096f6:	782a      	ldrb	r2, [r5, #0]
 80096f8:	2a2a      	cmp	r2, #42	; 0x2a
 80096fa:	d02a      	beq.n	8009752 <_vfiprintf_r+0x10e>
 80096fc:	9a07      	ldr	r2, [sp, #28]
 80096fe:	46a8      	mov	r8, r5
 8009700:	2000      	movs	r0, #0
 8009702:	250a      	movs	r5, #10
 8009704:	4641      	mov	r1, r8
 8009706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800970a:	3b30      	subs	r3, #48	; 0x30
 800970c:	2b09      	cmp	r3, #9
 800970e:	d969      	bls.n	80097e4 <_vfiprintf_r+0x1a0>
 8009710:	b360      	cbz	r0, 800976c <_vfiprintf_r+0x128>
 8009712:	e024      	b.n	800975e <_vfiprintf_r+0x11a>
 8009714:	4b50      	ldr	r3, [pc, #320]	; (8009858 <_vfiprintf_r+0x214>)
 8009716:	429c      	cmp	r4, r3
 8009718:	d101      	bne.n	800971e <_vfiprintf_r+0xda>
 800971a:	68b4      	ldr	r4, [r6, #8]
 800971c:	e7a2      	b.n	8009664 <_vfiprintf_r+0x20>
 800971e:	4b4f      	ldr	r3, [pc, #316]	; (800985c <_vfiprintf_r+0x218>)
 8009720:	429c      	cmp	r4, r3
 8009722:	bf08      	it	eq
 8009724:	68f4      	ldreq	r4, [r6, #12]
 8009726:	e79d      	b.n	8009664 <_vfiprintf_r+0x20>
 8009728:	4621      	mov	r1, r4
 800972a:	4630      	mov	r0, r6
 800972c:	f7fe fb1e 	bl	8007d6c <__swsetup_r>
 8009730:	2800      	cmp	r0, #0
 8009732:	d09d      	beq.n	8009670 <_vfiprintf_r+0x2c>
 8009734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009738:	b01d      	add	sp, #116	; 0x74
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	46a8      	mov	r8, r5
 8009740:	e7a2      	b.n	8009688 <_vfiprintf_r+0x44>
 8009742:	4a44      	ldr	r2, [pc, #272]	; (8009854 <_vfiprintf_r+0x210>)
 8009744:	1a80      	subs	r0, r0, r2
 8009746:	fa0b f000 	lsl.w	r0, fp, r0
 800974a:	4318      	orrs	r0, r3
 800974c:	9004      	str	r0, [sp, #16]
 800974e:	4645      	mov	r5, r8
 8009750:	e7be      	b.n	80096d0 <_vfiprintf_r+0x8c>
 8009752:	9a03      	ldr	r2, [sp, #12]
 8009754:	1d11      	adds	r1, r2, #4
 8009756:	6812      	ldr	r2, [r2, #0]
 8009758:	9103      	str	r1, [sp, #12]
 800975a:	2a00      	cmp	r2, #0
 800975c:	db01      	blt.n	8009762 <_vfiprintf_r+0x11e>
 800975e:	9207      	str	r2, [sp, #28]
 8009760:	e004      	b.n	800976c <_vfiprintf_r+0x128>
 8009762:	4252      	negs	r2, r2
 8009764:	f043 0302 	orr.w	r3, r3, #2
 8009768:	9207      	str	r2, [sp, #28]
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	f898 3000 	ldrb.w	r3, [r8]
 8009770:	2b2e      	cmp	r3, #46	; 0x2e
 8009772:	d10e      	bne.n	8009792 <_vfiprintf_r+0x14e>
 8009774:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009778:	2b2a      	cmp	r3, #42	; 0x2a
 800977a:	d138      	bne.n	80097ee <_vfiprintf_r+0x1aa>
 800977c:	9b03      	ldr	r3, [sp, #12]
 800977e:	1d1a      	adds	r2, r3, #4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	9203      	str	r2, [sp, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	bfb8      	it	lt
 8009788:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800978c:	f108 0802 	add.w	r8, r8, #2
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	4d33      	ldr	r5, [pc, #204]	; (8009860 <_vfiprintf_r+0x21c>)
 8009794:	f898 1000 	ldrb.w	r1, [r8]
 8009798:	2203      	movs	r2, #3
 800979a:	4628      	mov	r0, r5
 800979c:	f7f6 fd20 	bl	80001e0 <memchr>
 80097a0:	b140      	cbz	r0, 80097b4 <_vfiprintf_r+0x170>
 80097a2:	2340      	movs	r3, #64	; 0x40
 80097a4:	1b40      	subs	r0, r0, r5
 80097a6:	fa03 f000 	lsl.w	r0, r3, r0
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	4303      	orrs	r3, r0
 80097ae:	f108 0801 	add.w	r8, r8, #1
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	f898 1000 	ldrb.w	r1, [r8]
 80097b8:	482a      	ldr	r0, [pc, #168]	; (8009864 <_vfiprintf_r+0x220>)
 80097ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097be:	2206      	movs	r2, #6
 80097c0:	f108 0701 	add.w	r7, r8, #1
 80097c4:	f7f6 fd0c 	bl	80001e0 <memchr>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d037      	beq.n	800983c <_vfiprintf_r+0x1f8>
 80097cc:	4b26      	ldr	r3, [pc, #152]	; (8009868 <_vfiprintf_r+0x224>)
 80097ce:	bb1b      	cbnz	r3, 8009818 <_vfiprintf_r+0x1d4>
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	3307      	adds	r3, #7
 80097d4:	f023 0307 	bic.w	r3, r3, #7
 80097d8:	3308      	adds	r3, #8
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097de:	444b      	add	r3, r9
 80097e0:	9309      	str	r3, [sp, #36]	; 0x24
 80097e2:	e750      	b.n	8009686 <_vfiprintf_r+0x42>
 80097e4:	fb05 3202 	mla	r2, r5, r2, r3
 80097e8:	2001      	movs	r0, #1
 80097ea:	4688      	mov	r8, r1
 80097ec:	e78a      	b.n	8009704 <_vfiprintf_r+0xc0>
 80097ee:	2300      	movs	r3, #0
 80097f0:	f108 0801 	add.w	r8, r8, #1
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	4619      	mov	r1, r3
 80097f8:	250a      	movs	r5, #10
 80097fa:	4640      	mov	r0, r8
 80097fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009800:	3a30      	subs	r2, #48	; 0x30
 8009802:	2a09      	cmp	r2, #9
 8009804:	d903      	bls.n	800980e <_vfiprintf_r+0x1ca>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0c3      	beq.n	8009792 <_vfiprintf_r+0x14e>
 800980a:	9105      	str	r1, [sp, #20]
 800980c:	e7c1      	b.n	8009792 <_vfiprintf_r+0x14e>
 800980e:	fb05 2101 	mla	r1, r5, r1, r2
 8009812:	2301      	movs	r3, #1
 8009814:	4680      	mov	r8, r0
 8009816:	e7f0      	b.n	80097fa <_vfiprintf_r+0x1b6>
 8009818:	ab03      	add	r3, sp, #12
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	4622      	mov	r2, r4
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <_vfiprintf_r+0x228>)
 8009820:	a904      	add	r1, sp, #16
 8009822:	4630      	mov	r0, r6
 8009824:	f7fd fe0c 	bl	8007440 <_printf_float>
 8009828:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800982c:	4681      	mov	r9, r0
 800982e:	d1d5      	bne.n	80097dc <_vfiprintf_r+0x198>
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	065b      	lsls	r3, r3, #25
 8009834:	f53f af7e 	bmi.w	8009734 <_vfiprintf_r+0xf0>
 8009838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800983a:	e77d      	b.n	8009738 <_vfiprintf_r+0xf4>
 800983c:	ab03      	add	r3, sp, #12
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	4622      	mov	r2, r4
 8009842:	4b0a      	ldr	r3, [pc, #40]	; (800986c <_vfiprintf_r+0x228>)
 8009844:	a904      	add	r1, sp, #16
 8009846:	4630      	mov	r0, r6
 8009848:	f7fe f8b0 	bl	80079ac <_printf_i>
 800984c:	e7ec      	b.n	8009828 <_vfiprintf_r+0x1e4>
 800984e:	bf00      	nop
 8009850:	08009ce0 	.word	0x08009ce0
 8009854:	08009e1c 	.word	0x08009e1c
 8009858:	08009d00 	.word	0x08009d00
 800985c:	08009cc0 	.word	0x08009cc0
 8009860:	08009e22 	.word	0x08009e22
 8009864:	08009e26 	.word	0x08009e26
 8009868:	08007441 	.word	0x08007441
 800986c:	0800961f 	.word	0x0800961f

08009870 <_sbrk_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4c06      	ldr	r4, [pc, #24]	; (800988c <_sbrk_r+0x1c>)
 8009874:	2300      	movs	r3, #0
 8009876:	4605      	mov	r5, r0
 8009878:	4608      	mov	r0, r1
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	f7f8 fa72 	bl	8001d64 <_sbrk>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_sbrk_r+0x1a>
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	b103      	cbz	r3, 800988a <_sbrk_r+0x1a>
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	20000560 	.word	0x20000560

08009890 <__sread>:
 8009890:	b510      	push	{r4, lr}
 8009892:	460c      	mov	r4, r1
 8009894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009898:	f000 f8a8 	bl	80099ec <_read_r>
 800989c:	2800      	cmp	r0, #0
 800989e:	bfab      	itete	ge
 80098a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098a2:	89a3      	ldrhlt	r3, [r4, #12]
 80098a4:	181b      	addge	r3, r3, r0
 80098a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098aa:	bfac      	ite	ge
 80098ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80098ae:	81a3      	strhlt	r3, [r4, #12]
 80098b0:	bd10      	pop	{r4, pc}

080098b2 <__swrite>:
 80098b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b6:	461f      	mov	r7, r3
 80098b8:	898b      	ldrh	r3, [r1, #12]
 80098ba:	05db      	lsls	r3, r3, #23
 80098bc:	4605      	mov	r5, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	4616      	mov	r6, r2
 80098c2:	d505      	bpl.n	80098d0 <__swrite+0x1e>
 80098c4:	2302      	movs	r3, #2
 80098c6:	2200      	movs	r2, #0
 80098c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098cc:	f000 f868 	bl	80099a0 <_lseek_r>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	4632      	mov	r2, r6
 80098de:	463b      	mov	r3, r7
 80098e0:	4628      	mov	r0, r5
 80098e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098e6:	f000 b817 	b.w	8009918 <_write_r>

080098ea <__sseek>:
 80098ea:	b510      	push	{r4, lr}
 80098ec:	460c      	mov	r4, r1
 80098ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f2:	f000 f855 	bl	80099a0 <_lseek_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	bf15      	itete	ne
 80098fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009906:	81a3      	strheq	r3, [r4, #12]
 8009908:	bf18      	it	ne
 800990a:	81a3      	strhne	r3, [r4, #12]
 800990c:	bd10      	pop	{r4, pc}

0800990e <__sclose>:
 800990e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009912:	f000 b813 	b.w	800993c <_close_r>
	...

08009918 <_write_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4c07      	ldr	r4, [pc, #28]	; (8009938 <_write_r+0x20>)
 800991c:	4605      	mov	r5, r0
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	2200      	movs	r2, #0
 8009924:	6022      	str	r2, [r4, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	f7f8 f9cc 	bl	8001cc4 <_write>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_write_r+0x1e>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	b103      	cbz	r3, 8009936 <_write_r+0x1e>
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	20000560 	.word	0x20000560

0800993c <_close_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4c06      	ldr	r4, [pc, #24]	; (8009958 <_close_r+0x1c>)
 8009940:	2300      	movs	r3, #0
 8009942:	4605      	mov	r5, r0
 8009944:	4608      	mov	r0, r1
 8009946:	6023      	str	r3, [r4, #0]
 8009948:	f7f8 f9d8 	bl	8001cfc <_close>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_close_r+0x1a>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	b103      	cbz	r3, 8009956 <_close_r+0x1a>
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	20000560 	.word	0x20000560

0800995c <_fstat_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4c07      	ldr	r4, [pc, #28]	; (800997c <_fstat_r+0x20>)
 8009960:	2300      	movs	r3, #0
 8009962:	4605      	mov	r5, r0
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	f7f8 f9d3 	bl	8001d14 <_fstat>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d102      	bne.n	8009978 <_fstat_r+0x1c>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	b103      	cbz	r3, 8009978 <_fstat_r+0x1c>
 8009976:	602b      	str	r3, [r5, #0]
 8009978:	bd38      	pop	{r3, r4, r5, pc}
 800997a:	bf00      	nop
 800997c:	20000560 	.word	0x20000560

08009980 <_isatty_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4c06      	ldr	r4, [pc, #24]	; (800999c <_isatty_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4605      	mov	r5, r0
 8009988:	4608      	mov	r0, r1
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	f7f8 f9d2 	bl	8001d34 <_isatty>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_isatty_r+0x1a>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	b103      	cbz	r3, 800999a <_isatty_r+0x1a>
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	20000560 	.word	0x20000560

080099a0 <_lseek_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4c07      	ldr	r4, [pc, #28]	; (80099c0 <_lseek_r+0x20>)
 80099a4:	4605      	mov	r5, r0
 80099a6:	4608      	mov	r0, r1
 80099a8:	4611      	mov	r1, r2
 80099aa:	2200      	movs	r2, #0
 80099ac:	6022      	str	r2, [r4, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	f7f8 f9cb 	bl	8001d4a <_lseek>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_lseek_r+0x1e>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	b103      	cbz	r3, 80099be <_lseek_r+0x1e>
 80099bc:	602b      	str	r3, [r5, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	20000560 	.word	0x20000560

080099c4 <__ascii_mbtowc>:
 80099c4:	b082      	sub	sp, #8
 80099c6:	b901      	cbnz	r1, 80099ca <__ascii_mbtowc+0x6>
 80099c8:	a901      	add	r1, sp, #4
 80099ca:	b142      	cbz	r2, 80099de <__ascii_mbtowc+0x1a>
 80099cc:	b14b      	cbz	r3, 80099e2 <__ascii_mbtowc+0x1e>
 80099ce:	7813      	ldrb	r3, [r2, #0]
 80099d0:	600b      	str	r3, [r1, #0]
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	1c10      	adds	r0, r2, #0
 80099d6:	bf18      	it	ne
 80099d8:	2001      	movne	r0, #1
 80099da:	b002      	add	sp, #8
 80099dc:	4770      	bx	lr
 80099de:	4610      	mov	r0, r2
 80099e0:	e7fb      	b.n	80099da <__ascii_mbtowc+0x16>
 80099e2:	f06f 0001 	mvn.w	r0, #1
 80099e6:	e7f8      	b.n	80099da <__ascii_mbtowc+0x16>

080099e8 <__malloc_lock>:
 80099e8:	4770      	bx	lr

080099ea <__malloc_unlock>:
 80099ea:	4770      	bx	lr

080099ec <_read_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4c07      	ldr	r4, [pc, #28]	; (8009a0c <_read_r+0x20>)
 80099f0:	4605      	mov	r5, r0
 80099f2:	4608      	mov	r0, r1
 80099f4:	4611      	mov	r1, r2
 80099f6:	2200      	movs	r2, #0
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f7f8 f945 	bl	8001c8a <_read>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_read_r+0x1e>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_read_r+0x1e>
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	20000560 	.word	0x20000560

08009a10 <__ascii_wctomb>:
 8009a10:	b149      	cbz	r1, 8009a26 <__ascii_wctomb+0x16>
 8009a12:	2aff      	cmp	r2, #255	; 0xff
 8009a14:	bf85      	ittet	hi
 8009a16:	238a      	movhi	r3, #138	; 0x8a
 8009a18:	6003      	strhi	r3, [r0, #0]
 8009a1a:	700a      	strbls	r2, [r1, #0]
 8009a1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009a20:	bf98      	it	ls
 8009a22:	2001      	movls	r0, #1
 8009a24:	4770      	bx	lr
 8009a26:	4608      	mov	r0, r1
 8009a28:	4770      	bx	lr
	...

08009a2c <_init>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr

08009a38 <_fini>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr
