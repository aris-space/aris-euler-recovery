
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001741c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  080175b0  080175b0  000275b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018490  08018490  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08018490  08018490  00028490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018498  08018498  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018498  08018498  00028498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801849c  0801849c  0002849c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080184a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ff40  20000378  08018818  00030378  2**3
                  ALLOC
 10 ._user_heap_stack 00002248  200102b8  08018818  000402b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c4d  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ba9  00000000  00000000  00058ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001788  00000000  00000000  0005eba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00060328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027cf9  00000000  00000000  000617d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001eb01  00000000  00000000  000894d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9839  00000000  00000000  000a7fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017180b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a0  00000000  00000000  00171888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017594 	.word	0x08017594

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08017594 	.word	0x08017594

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <stay_alive>:
 */

#include "IO.h"
#include "adc.h"

void stay_alive(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STAY_ALIVE_GPIO_Port, STAY_ALIVE_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <stay_alive+0x14>)
 8000f92:	f008 fe0f 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <fire_HAWKs>:


void fire_HAWKs(uint8_t * armed){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <fire_HAWKs+0x1c>
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fb8:	f008 fdfc 	bl	8009bb4 <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <fire_HAWKs+0x30>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fcc:	f008 fdf2 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000

08000fdc <turn_off_HAWKs>:

void turn_off_HAWKs(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000fe8:	f008 fde4 	bl	8009bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4802      	ldr	r0, [pc, #8]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000ff4:	f008 fdde 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <fire_TDs>:

void fire_TDs(uint8_t * armed){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <fire_TDs+0x1c>
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <fire_TDs+0x38>)
 8001018:	f008 fdcc 	bl	8009bb4 <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <fire_TDs+0x30>
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <fire_TDs+0x38>)
 800102c:	f008 fdc2 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <turn_off_TDs>:

void turn_off_TDs(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <turn_off_TDs+0x20>)
 8001048:	f008 fdb4 	bl	8009bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <turn_off_TDs+0x20>)
 8001054:	f008 fdae 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <init_ADC>:

void init_ADC(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <init_ADC+0x18>)
 8001066:	f007 fbcd 	bl	8008804 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 800106a:	2208      	movs	r2, #8
 800106c:	4903      	ldr	r1, [pc, #12]	; (800107c <init_ADC+0x1c>)
 800106e:	4802      	ldr	r0, [pc, #8]	; (8001078 <init_ADC+0x18>)
 8001070:	f007 fad6 	bl	8008620 <HAL_ADC_Start_DMA>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200049d8 	.word	0x200049d8
 800107c:	200008e8 	.word	0x200008e8

08001080 <read_ADC>:

void read_ADC(float * out){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8001088:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <read_ADC+0x230>)
 800108a:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 800108c:	4b89      	ldr	r3, [pc, #548]	; (80012b4 <read_ADC+0x234>)
 800108e:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001090:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <read_ADC+0x238>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109c:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 80010b2:	4b81      	ldr	r3, [pc, #516]	; (80012b8 <read_ADC+0x238>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010be:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <read_ADC+0x238>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3308      	adds	r3, #8
 80010ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <read_ADC+0x238>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	edd7 7a03 	vldr	s15, [r7, #12]
 800110a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110e:	ee17 0a90 	vmov	r0, s15
 8001112:	f7ff fa19 	bl	8000548 <__aeabi_f2d>
 8001116:	4603      	mov	r3, r0
 8001118:	460c      	mov	r4, r1
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	a15c      	add	r1, pc, #368	; (adr r1, 8001290 <read_ADC+0x210>)
 8001120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001124:	f7ff f8b0 	bl	8000288 <__aeabi_dsub>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4618      	mov	r0, r3
 800112e:	4621      	mov	r1, r4
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <read_ADC+0x23c>)
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	a355      	add	r3, pc, #340	; (adr r3, 8001298 <read_ADC+0x218>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fb80 	bl	800084c <__aeabi_ddiv>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	4618      	mov	r0, r3
 8001152:	4621      	mov	r1, r4
 8001154:	f7ff fd48 	bl	8000be8 <__aeabi_d2f>
 8001158:	4602      	mov	r2, r0
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330c      	adds	r3, #12
 800115e:	ee07 2a90 	vmov	s15, r2
 8001162:	eef1 7a67 	vneg.f32	s15, s15
 8001166:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <read_ADC+0x238>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001176:	edd7 7a03 	vldr	s15, [r7, #12]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	ee17 0a90 	vmov	r0, s15
 8001182:	f7ff f9e1 	bl	8000548 <__aeabi_f2d>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	461a      	mov	r2, r3
 800118c:	4623      	mov	r3, r4
 800118e:	a140      	add	r1, pc, #256	; (adr r1, 8001290 <read_ADC+0x210>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff f878 	bl	8000288 <__aeabi_dsub>
 8001198:	4603      	mov	r3, r0
 800119a:	460c      	mov	r4, r1
 800119c:	4618      	mov	r0, r3
 800119e:	4621      	mov	r1, r4
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b45      	ldr	r3, [pc, #276]	; (80012bc <read_ADC+0x23c>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	4618      	mov	r0, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	a339      	add	r3, pc, #228	; (adr r3, 8001298 <read_ADC+0x218>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fb48 	bl	800084c <__aeabi_ddiv>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fd10 	bl	8000be8 <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3310      	adds	r3, #16
 80011ce:	ee07 2a90 	vmov	s15, r2
 80011d2:	eef1 7a67 	vneg.f32	s15, s15
 80011d6:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <read_ADC+0x238>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3314      	adds	r3, #20
 80011f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <read_ADC+0x238>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3318      	adds	r3, #24
 8001216:	edd7 7a02 	vldr	s15, [r7, #8]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <read_ADC+0x238>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800122e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f7ff f985 	bl	8000548 <__aeabi_f2d>
 800123e:	a318      	add	r3, pc, #96	; (adr r3, 80012a0 <read_ADC+0x220>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	a315      	add	r3, pc, #84	; (adr r3, 80012a8 <read_ADC+0x228>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff faf9 	bl	800084c <__aeabi_ddiv>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	4618      	mov	r0, r3
 8001260:	4621      	mov	r1, r4
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <read_ADC+0x240>)
 8001268:	f7ff f810 	bl	800028c <__adddf3>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4619      	mov	r1, r3
 8001272:	4622      	mov	r2, r4
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f103 041c 	add.w	r4, r3, #28
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	f7ff fcb3 	bl	8000be8 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	6023      	str	r3, [r4, #0]

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	66666666 	.word	0x66666666
 8001294:	3ffa6666 	.word	0x3ffa6666
 8001298:	4189374c 	.word	0x4189374c
 800129c:	3fb0e560 	.word	0x3fb0e560
 80012a0:	851eb852 	.word	0x851eb852
 80012a4:	3fe851eb 	.word	0x3fe851eb
 80012a8:	47ae147b 	.word	0x47ae147b
 80012ac:	3f647ae1 	.word	0x3f647ae1
 80012b0:	3a533333 	.word	0x3a533333
 80012b4:	409b26ca 	.word	0x409b26ca
 80012b8:	200008e8 	.word	0x200008e8
 80012bc:	408f4000 	.word	0x408f4000
 80012c0:	40390000 	.word	0x40390000

080012c4 <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e007      	b.n	80012e2 <bufclear+0x1e>
	{
		buffer[i] = '\0';
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	dbf3      	blt.n	80012d2 <bufclear+0xe>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b09d      	sub	sp, #116	; 0x74
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	/* capacity related variables */
	FATFS *pfs;
	DWORD fre_clust;
	uint32_t total, free_space;

	if (DEBUG_PRINT == 1) printf("mounting SD card...\n");
 8001302:	486c      	ldr	r0, [pc, #432]	; (80014b4 <init_sd+0x1bc>)
 8001304:	f010 ffcc 	bl	80122a0 <puts>

	FRESULT ret = f_mount(&fs, SDPath, 1);
 8001308:	2201      	movs	r2, #1
 800130a:	496b      	ldr	r1, [pc, #428]	; (80014b8 <init_sd+0x1c0>)
 800130c:	486b      	ldr	r0, [pc, #428]	; (80014bc <init_sd+0x1c4>)
 800130e:	f00f f839 	bl	8010384 <f_mount>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 8001318:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800131c:	2b00      	cmp	r3, #0
 800131e:	d154      	bne.n	80013ca <init_sd+0xd2>
	{
		if (DEBUG_PRINT == 1) printf("mounted SD card\n");
 8001320:	4867      	ldr	r0, [pc, #412]	; (80014c0 <init_sd+0x1c8>)
 8001322:	f010 ffbd 	bl	80122a0 <puts>
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
	  return 0;
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 8001326:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800132a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800132e:	4619      	mov	r1, r3
 8001330:	4861      	ldr	r0, [pc, #388]	; (80014b8 <init_sd+0x1c0>)
 8001332:	f010 f8a8 	bl	8011486 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	3b02      	subs	r3, #2
 800133c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800133e:	8952      	ldrh	r2, [r2, #10]
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8dd 	bl	8000504 <__aeabi_ui2d>
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <init_sd+0x1cc>)
 8001350:	f7ff f952 	bl	80005f8 <__aeabi_dmul>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	f7ff fc24 	bl	8000ba8 <__aeabi_d2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	667b      	str	r3, [r7, #100]	; 0x64
	if (DEBUG_PRINT == 1) printf("SD CARD Total Size: \t%lu\n",total);
 8001364:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001366:	4858      	ldr	r0, [pc, #352]	; (80014c8 <init_sd+0x1d0>)
 8001368:	f010 ff12 	bl	8012190 <iprintf>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800136c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800136e:	895b      	ldrh	r3, [r3, #10]
 8001370:	461a      	mov	r2, r3
 8001372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001374:	fb03 f302 	mul.w	r3, r3, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8c3 	bl	8000504 <__aeabi_ui2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <init_sd+0x1cc>)
 8001384:	f7ff f938 	bl	80005f8 <__aeabi_dmul>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4618      	mov	r0, r3
 800138e:	4621      	mov	r1, r4
 8001390:	f7ff fc0a 	bl	8000ba8 <__aeabi_d2uiz>
 8001394:	4603      	mov	r3, r0
 8001396:	663b      	str	r3, [r7, #96]	; 0x60
	if (DEBUG_PRINT == 1) printf("SD CARD Free Space: \t%lu\n",free_space);
 8001398:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800139a:	484c      	ldr	r0, [pc, #304]	; (80014cc <init_sd+0x1d4>)
 800139c:	f010 fef8 	bl	8012190 <iprintf>

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t cnt2 = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4941      	ldr	r1, [pc, #260]	; (80014b8 <init_sd+0x1c0>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00f ffb7 	bl	8011326 <f_opendir>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <init_sd+0x1d8>)
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <init_sd+0x1d8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d15b      	bne.n	8001480 <init_sd+0x188>
 80013c8:	e047      	b.n	800145a <init_sd+0x162>
		if (DEBUG_PRINT == 1) printf("no SD connection established\n");
 80013ca:	4842      	ldr	r0, [pc, #264]	; (80014d4 <init_sd+0x1dc>)
 80013cc:	f010 ff68 	bl	80122a0 <puts>
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
 80013d0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80013d4:	4619      	mov	r1, r3
 80013d6:	4840      	ldr	r0, [pc, #256]	; (80014d8 <init_sd+0x1e0>)
 80013d8:	f010 feda 	bl	8012190 <iprintf>
	  return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e064      	b.n	80014aa <init_sd+0x1b2>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
			{
				fn = Finfo.fname;
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	3309      	adds	r3, #9
 80013e6:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 80013e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b46      	cmp	r3, #70	; 0x46
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f8:	3301      	adds	r3, #1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b4c      	cmp	r3, #76	; 0x4c
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4013      	ands	r3, r2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <init_sd+0x12a>
				{
					if (DEBUG_PRINT == 1) printf("found flight log: %s \n",fn);
 800140e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001410:	4832      	ldr	r0, [pc, #200]	; (80014dc <init_sd+0x1e4>)
 8001412:	f010 febd 	bl	8012190 <iprintf>
					cnt1 ++;
 8001416:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800141a:	3301      	adds	r3, #1
 800141c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001420:	e01b      	b.n	800145a <init_sd+0x162>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 8001422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b4c      	cmp	r3, #76	; 0x4c
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2da      	uxtb	r2, r3
 8001430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001432:	3301      	adds	r3, #1
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b4f      	cmp	r3, #79	; 0x4f
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4013      	ands	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <init_sd+0x162>
				{
					if (DEBUG_PRINT == 1) printf("found log file: %s \n",fn);
 8001448:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800144a:	4825      	ldr	r0, [pc, #148]	; (80014e0 <init_sd+0x1e8>)
 800144c:	f010 fea0 	bl	8012190 <iprintf>
					cnt2 ++;
 8001450:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001454:	3301      	adds	r3, #1
 8001456:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f00f ffd1 	bl	801140c <f_readdir>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <init_sd+0x1d8>)
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <init_sd+0x1d8>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <init_sd+0x188>
 800147a:	7d7b      	ldrb	r3, [r7, #21]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1af      	bne.n	80013e0 <init_sd+0xe8>
				}

			}
	}
	*file_count = cnt1;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001486:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800148e:	801a      	strh	r2, [r3, #0]
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th flight. \n", *file_count);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4813      	ldr	r0, [pc, #76]	; (80014e4 <init_sd+0x1ec>)
 8001498:	f010 fe7a 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th log file. \n", *log_count);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <init_sd+0x1f0>)
 80014a4:	f010 fe74 	bl	8012190 <iprintf>
	return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3774      	adds	r7, #116	; 0x74
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	080175b8 	.word	0x080175b8
 80014b8:	2000e24c 	.word	0x2000e24c
 80014bc:	20000908 	.word	0x20000908
 80014c0:	080175cc 	.word	0x080175cc
 80014c4:	3fe00000 	.word	0x3fe00000
 80014c8:	08017608 	.word	0x08017608
 80014cc:	08017624 	.word	0x08017624
 80014d0:	200039a4 	.word	0x200039a4
 80014d4:	080175dc 	.word	0x080175dc
 80014d8:	080175fc 	.word	0x080175fc
 80014dc:	08017640 	.word	0x08017640
 80014e0:	08017658 	.word	0x08017658
 80014e4:	08017670 	.word	0x08017670
 80014e8:	08017690 	.word	0x08017690

080014ec <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0e4      	sub	sp, #400	; 0x190
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	6018      	str	r0, [r3, #0]
 80014f6:	463b      	mov	r3, r7
 80014f8:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	220a      	movs	r2, #10
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	4848      	ldr	r0, [pc, #288]	; (8001624 <init_file+0x138>)
 8001502:	f00e ff85 	bl	8010410 <f_open>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <init_file+0x13c>)
 800150c:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800150e:	4b46      	ldr	r3, [pc, #280]	; (8001628 <init_file+0x13c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <init_file+0x3a>
		if (DEBUG_PRINT == 1) printf("trying to open datalog file, error-code: %d \n",fresult);
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <init_file+0x13c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4843      	ldr	r0, [pc, #268]	; (800162c <init_file+0x140>)
 800151e:	f010 fe37 	bl	8012190 <iprintf>
		return 0;
 8001522:	2300      	movs	r3, #0
 8001524:	e079      	b.n	800161a <init_file+0x12e>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State2,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 8001526:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800152a:	4a41      	ldr	r2, [pc, #260]	; (8001630 <init_file+0x144>)
 800152c:	4618      	mov	r0, r3
 800152e:	4611      	mov	r1, r2
 8001530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001534:	461a      	mov	r2, r3
 8001536:	f010 f9bb 	bl	80118b0 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 800153a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <init_file+0x148>)
 8001540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001544:	4837      	ldr	r0, [pc, #220]	; (8001624 <init_file+0x138>)
 8001546:	f00f fa8e 	bl	8010a66 <f_write>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <init_file+0x13c>)
 8001550:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 8001552:	4834      	ldr	r0, [pc, #208]	; (8001624 <init_file+0x138>)
 8001554:	f00f fc99 	bl	8010e8a <f_close>

	if (fresult != FR_OK){
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <init_file+0x13c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <init_file+0x84>
		if (DEBUG_PRINT == 1) printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <init_file+0x13c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	4834      	ldr	r0, [pc, #208]	; (8001638 <init_file+0x14c>)
 8001568:	f010 fe12 	bl	8012190 <iprintf>
		return 0;
 800156c:	2300      	movs	r3, #0
 800156e:	e054      	b.n	800161a <init_file+0x12e>
	}
	//bufclear();

	HAL_Delay(100);
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f006 ffef 	bl	8008554 <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 8001576:	463b      	mov	r3, r7
 8001578:	2206      	movs	r2, #6
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	482f      	ldr	r0, [pc, #188]	; (800163c <init_file+0x150>)
 800157e:	f00e ff47 	bl	8010410 <f_open>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <init_file+0x13c>)
 8001588:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <init_file+0x13c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <init_file+0xb6>
		if (DEBUG_PRINT == 1) printf("trying to open setuplog file, error-code: %d \n",fresult);
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <init_file+0x13c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4829      	ldr	r0, [pc, #164]	; (8001640 <init_file+0x154>)
 800159a:	f010 fdf9 	bl	8012190 <iprintf>
		return 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	e03b      	b.n	800161a <init_file+0x12e>

	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	bw = 0;
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <init_file+0x148>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	char myLog[128];

	for (int i=0; i<128; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80015ae:	e00b      	b.n	80015c8 <init_file+0xdc>
	{
		myLog[i] = '\0';
 80015b0:	f107 020c 	add.w	r2, r7, #12
 80015b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015b8:	4413      	add	r3, r2
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<128; i++)
 80015be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015c2:	3301      	adds	r3, #1
 80015c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80015c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015cc:	2b7f      	cmp	r3, #127	; 0x7f
 80015ce:	ddef      	ble.n	80015b0 <init_file+0xc4>
	}

	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 80015d0:	f006 ffb4 	bl	800853c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	f107 000c 	add.w	r0, r7, #12
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4919      	ldr	r1, [pc, #100]	; (8001644 <init_file+0x158>)
 80015e0:	f010 fe66 	bl	80122b0 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 80015e4:	f107 010c 	add.w	r1, r7, #12
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <init_file+0x148>)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <init_file+0x150>)
 80015ee:	f00f fa3a 	bl	8010a66 <f_write>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <init_file+0x13c>)
 80015f8:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <init_file+0x13c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <init_file+0x126>
		if (DEBUG_PRINT == 1) printf ("LOG FILE not created, error-code: %d \n",fresult);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <init_file+0x13c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <init_file+0x15c>)
 800160a:	f010 fdc1 	bl	8012190 <iprintf>
		return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e003      	b.n	800161a <init_file+0x12e>
	}

	/* Close file */
	f_close(&log_file);
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <init_file+0x150>)
 8001614:	f00f fc39 	bl	8010e8a <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 8001618:	2301      	movs	r3, #1

}
 800161a:	4618      	mov	r0, r3
 800161c:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000193c 	.word	0x2000193c
 8001628:	200039a4 	.word	0x200039a4
 800162c:	080176b4 	.word	0x080176b4
 8001630:	080177a4 	.word	0x080177a4
 8001634:	200039a0 	.word	0x200039a0
 8001638:	080176e4 	.word	0x080176e4
 800163c:	200039a8 	.word	0x200039a8
 8001640:	08017710 	.word	0x08017710
 8001644:	08017740 	.word	0x08017740
 8001648:	0801777c 	.word	0x0801777c

0800164c <extract_from_str>:

float extract_from_str(char* buffer, uint8_t *start, uint8_t *end){
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	; 0x40
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	uint8_t x = *start;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t y = *end;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    char c[30];
	for (int j=0; j<30; j++) {
 8001668:	2300      	movs	r3, #0
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
 800166c:	e008      	b.n	8001680 <extract_from_str+0x34>
		c[j] = '\0';
 800166e:	f107 0210 	add.w	r2, r7, #16
 8001672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001674:	4413      	add	r3, r2
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
	for (int j=0; j<30; j++) {
 800167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167c:	3301      	adds	r3, #1
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001682:	2b1d      	cmp	r3, #29
 8001684:	ddf3      	ble.n	800166e <extract_from_str+0x22>
	}
	while (buffer[y] != ','){
 8001686:	e004      	b.n	8001692 <extract_from_str+0x46>
		y ++;
 8001688:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800168c:	3301      	adds	r3, #1
 800168e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while (buffer[y] != ','){
 8001692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b2c      	cmp	r3, #44	; 0x2c
 800169e:	d1f3      	bne.n	8001688 <extract_from_str+0x3c>
	}
	*end = y;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80016a6:	701a      	strb	r2, [r3, #0]
	strncpy(c, buffer + x, y - x);
 80016a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	18d1      	adds	r1, r2, r3
 80016b0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80016b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4618      	mov	r0, r3
 80016c2:	f010 fe15 	bl	80122f0 <strncpy>
	float ret = strtof(c,NULL);
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f011 fc37 	bl	8012f40 <strtof>
 80016d2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	return ret;
 80016d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d8:	ee07 3a90 	vmov	s15, r3
}
 80016dc:	eeb0 0a67 	vmov.f32	s0, s15
 80016e0:	3740      	adds	r7, #64	; 0x40
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <read_from_SD>:

void read_from_SD(char * FILE_NAME, float * TIME, float * P1, float * P2, float * Ax1, float * Ay1, float * Az1, float * Ax2, float * Ay2, float * Az2){
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	f107 040c 	add.w	r4, r7, #12
 80016f4:	6020      	str	r0, [r4, #0]
 80016f6:	f107 0008 	add.w	r0, r7, #8
 80016fa:	6001      	str	r1, [r0, #0]
 80016fc:	1d39      	adds	r1, r7, #4
 80016fe:	600a      	str	r2, [r1, #0]
 8001700:	463a      	mov	r2, r7
 8001702:	6013      	str	r3, [r2, #0]

	printf("reading FF file: \n");
 8001704:	48c9      	ldr	r0, [pc, #804]	; (8001a2c <read_from_SD+0x344>)
 8001706:	f010 fdcb 	bl	80122a0 <puts>
	fresult = f_open(&fake_file, FILE_NAME, FA_READ);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2201      	movs	r2, #1
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	48c7      	ldr	r0, [pc, #796]	; (8001a30 <read_from_SD+0x348>)
 8001714:	f00e fe7c 	bl	8010410 <f_open>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4bc5      	ldr	r3, [pc, #788]	; (8001a34 <read_from_SD+0x34c>)
 800171e:	701a      	strb	r2, [r3, #0]
	printf("trying to read the file, error-code: %d \n",fresult);
 8001720:	4bc4      	ldr	r3, [pc, #784]	; (8001a34 <read_from_SD+0x34c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	48c4      	ldr	r0, [pc, #784]	; (8001a38 <read_from_SD+0x350>)
 8001728:	f010 fd32 	bl	8012190 <iprintf>

	char buffer[FAKE_LINE_LEN];
	uint8_t x = 0;
 800172c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
	uint8_t y = 0;
 8001734:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < FAKE_FILE_LEN; i++){
 800173c:	2301      	movs	r3, #1
 800173e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001742:	e164      	b.n	8001a0e <read_from_SD+0x326>
	        f_gets(buffer, f_size(&fake_file), &fake_file);
 8001744:	4bba      	ldr	r3, [pc, #744]	; (8001a30 <read_from_SD+0x348>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4619      	mov	r1, r3
 800174a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174e:	4ab8      	ldr	r2, [pc, #736]	; (8001a30 <read_from_SD+0x348>)
 8001750:	4618      	mov	r0, r3
 8001752:	f00f ff4d 	bl	80115f0 <f_gets>
	        printf("reading line: %d  \n",i);
 8001756:	f8d7 1434 	ldr.w	r1, [r7, #1076]	; 0x434
 800175a:	48b8      	ldr	r0, [pc, #736]	; (8001a3c <read_from_SD+0x354>)
 800175c:	f010 fd18 	bl	8012190 <iprintf>
	        x = 0;
 8001760:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
	        y = 0;
 8001768:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

			TIME[i] = extract_from_str(buffer, &x, &y);
 8001770:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	f107 0208 	add.w	r2, r7, #8
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	18d4      	adds	r4, r2, r3
 800177e:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001782:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff5e 	bl	800164c <extract_from_str>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001798:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80017a6:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80017a8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017b6:	701a      	strb	r2, [r3, #0]

			Ax1[i] = extract_from_str(buffer, &x, &y);
 80017b8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80017c2:	18d4      	adds	r4, r2, r3
 80017c4:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80017c8:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80017cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff3b 	bl	800164c <extract_from_str>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 80017de:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80017ec:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80017ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017fc:	701a      	strb	r2, [r3, #0]

	 		Ay1[i] = extract_from_str(buffer, &x, &y);
 80017fe:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8001808:	18d4      	adds	r4, r2, r3
 800180a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800180e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff18 	bl	800164c <extract_from_str>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 8001824:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001832:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001834:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001842:	701a      	strb	r2, [r3, #0]

			Az1[i] = extract_from_str(buffer, &x, &y);
 8001844:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800184e:	18d4      	adds	r4, r2, r3
 8001850:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001854:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fef5 	bl	800164c <extract_from_str>
 8001862:	eef0 7a40 	vmov.f32	s15, s0
 8001866:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 800186a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001878:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 800187a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001888:	701a      	strb	r2, [r3, #0]

	 		Ax2[i] = extract_from_str(buffer, &x, &y);
 800188a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001894:	18d4      	adds	r4, r2, r3
 8001896:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800189a:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fed2 	bl	800164c <extract_from_str>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 80018b0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80018be:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80018c0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80018ce:	701a      	strb	r2, [r3, #0]

	 		Ay2[i] = extract_from_str(buffer, &x, &y);
 80018d0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80018da:	18d4      	adds	r4, r2, r3
 80018dc:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80018e0:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80018e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff feaf 	bl	800164c <extract_from_str>
 80018ee:	eef0 7a40 	vmov.f32	s15, s0
 80018f2:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 80018f6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001904:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001906:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001914:	701a      	strb	r2, [r3, #0]

			Az2[i] = extract_from_str(buffer, &x, &y);
 8001916:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8001920:	18d4      	adds	r4, r2, r3
 8001922:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001926:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800192a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe8c 	bl	800164c <extract_from_str>
 8001934:	eef0 7a40 	vmov.f32	s15, s0
 8001938:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 800193c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800194a:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 800194c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800195a:	701a      	strb	r2, [r3, #0]

			P1[i] = extract_from_str(buffer, &x, &y);
 800195c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	1d3a      	adds	r2, r7, #4
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	18d4      	adds	r4, r2, r3
 8001968:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800196c:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fe69 	bl	800164c <extract_from_str>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
 800197e:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001982:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	b2da      	uxtb	r2, r3
 800198c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001990:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001992:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80019a0:	701a      	strb	r2, [r3, #0]

			//printf("%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f \n",TIME[i],P1[i],P2[i],Ax1[i],Ay1[i],Az1[i],Ax2[i],Ay2[i],Az2[i]);

		    char c[30];

			for (int j=0; j<30; j++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80019a8:	e00b      	b.n	80019c2 <read_from_SD+0x2da>
				c[j] = '\0';
 80019aa:	f107 0210 	add.w	r2, r7, #16
 80019ae:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80019b2:	4413      	add	r3, r2
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			for (int j=0; j<30; j++) {
 80019b8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80019bc:	3301      	adds	r3, #1
 80019be:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80019c2:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80019c6:	2b1d      	cmp	r3, #29
 80019c8:	ddef      	ble.n	80019aa <read_from_SD+0x2c2>
			}

			strncpy(c, buffer + x, 10);
 80019ca:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d6:	1899      	adds	r1, r3, r2
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	220a      	movs	r2, #10
 80019de:	4618      	mov	r0, r3
 80019e0:	f010 fc86 	bl	80122f0 <strncpy>

	 		P2[i] = strtof(c,NULL);
 80019e4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	463a      	mov	r2, r7
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	18d4      	adds	r4, r2, r3
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f011 faa2 	bl	8012f40 <strtof>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 1; i < FAKE_FILE_LEN; i++){
 8001a04:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001a0e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a16:	f6ff ae95 	blt.w	8001744 <read_from_SD+0x5c>
	    }

		// Close file
		f_close(&fake_file);
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <read_from_SD+0x348>)
 8001a1c:	f00f fa35 	bl	8010e8a <f_close>


}
 8001a20:	bf00      	nop
 8001a22:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	080178a4 	.word	0x080178a4
 8001a30:	20002970 	.word	0x20002970
 8001a34:	200039a4 	.word	0x200039a4
 8001a38:	080178b8 	.word	0x080178b8
 8001a3c:	080178e4 	.word	0x080178e4

08001a40 <write_to_SD>:


void write_to_SD(char * FILE_NAME, char * buffer){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001a4a:	2212      	movs	r2, #18
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	482d      	ldr	r0, [pc, #180]	; (8001b04 <write_to_SD+0xc4>)
 8001a50:	f00e fcde 	bl	8010410 <f_open>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <write_to_SD+0xc8>)
 8001a5a:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <write_to_SD+0xc8>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d103      	bne.n	8001a6c <write_to_SD+0x2c>
	{

		if (DEBUG_PRINT == 1) printf("opened file \n");
 8001a64:	4829      	ldr	r0, [pc, #164]	; (8001b0c <write_to_SD+0xcc>)
 8001a66:	f010 fc1b 	bl	80122a0 <puts>
 8001a6a:	e02e      	b.n	8001aca <write_to_SD+0x8a>

	} else {

		if (DEBUG_PRINT == 1) printf("error opening file for writing\n");
 8001a6c:	4828      	ldr	r0, [pc, #160]	; (8001b10 <write_to_SD+0xd0>)
 8001a6e:	f010 fc17 	bl	80122a0 <puts>
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <write_to_SD+0xc8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4826      	ldr	r0, [pc, #152]	; (8001b14 <write_to_SD+0xd4>)
 8001a7a:	f010 fb89 	bl	8012190 <iprintf>

		fresult = f_mount(NULL, SDPath, 1);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4925      	ldr	r1, [pc, #148]	; (8001b18 <write_to_SD+0xd8>)
 8001a82:	2000      	movs	r0, #0
 8001a84:	f00e fc7e 	bl	8010384 <f_mount>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <write_to_SD+0xc8>)
 8001a8e:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <write_to_SD+0xc8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <write_to_SD+0x5e>
 8001a98:	4820      	ldr	r0, [pc, #128]	; (8001b1c <write_to_SD+0xdc>)
 8001a9a:	f010 fc01 	bl	80122a0 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	491d      	ldr	r1, [pc, #116]	; (8001b18 <write_to_SD+0xd8>)
 8001aa2:	481f      	ldr	r0, [pc, #124]	; (8001b20 <write_to_SD+0xe0>)
 8001aa4:	f00e fc6e 	bl	8010384 <f_mount>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
		if (ret == FR_OK)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d103      	bne.n	8001aba <write_to_SD+0x7a>
		{
			if (DEBUG_PRINT == 1) printf("mounted SD card\n");
 8001ab2:	481c      	ldr	r0, [pc, #112]	; (8001b24 <write_to_SD+0xe4>)
 8001ab4:	f010 fbf4 	bl	80122a0 <puts>
 8001ab8:	e007      	b.n	8001aca <write_to_SD+0x8a>
		} else {
			if (DEBUG_PRINT == 1) printf("no SD connection established\n");
 8001aba:	481b      	ldr	r0, [pc, #108]	; (8001b28 <write_to_SD+0xe8>)
 8001abc:	f010 fbf0 	bl	80122a0 <puts>
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <write_to_SD+0xd4>)
 8001ac6:	f010 fb63 	bl	8012190 <iprintf>
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <write_to_SD+0xc4>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <write_to_SD+0xc4>)
 8001ad2:	f00f fa04 	bl	8010ede <f_lseek>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <write_to_SD+0xc8>)
 8001adc:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 8001ade:	4909      	ldr	r1, [pc, #36]	; (8001b04 <write_to_SD+0xc4>)
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f00f fe3a 	bl	801175a <f_puts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <write_to_SD+0xc8>)
 8001aec:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <write_to_SD+0xc4>)
 8001af0:	f00f f9cb 	bl	8010e8a <f_close>

	bufclear(buffer);
 8001af4:	6838      	ldr	r0, [r7, #0]
 8001af6:	f7ff fbe5 	bl	80012c4 <bufclear>

}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000193c 	.word	0x2000193c
 8001b08:	200039a4 	.word	0x200039a4
 8001b0c:	080178f8 	.word	0x080178f8
 8001b10:	08017908 	.word	0x08017908
 8001b14:	080175fc 	.word	0x080175fc
 8001b18:	2000e24c 	.word	0x2000e24c
 8001b1c:	08017928 	.word	0x08017928
 8001b20:	20000908 	.word	0x20000908
 8001b24:	080175cc 	.word	0x080175cc
 8001b28:	080175dc 	.word	0x080175dc

08001b2c <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001b36:	2212      	movs	r2, #18
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	482d      	ldr	r0, [pc, #180]	; (8001bf0 <log_to_SD+0xc4>)
 8001b3c:	f00e fc68 	bl	8010410 <f_open>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <log_to_SD+0xc8>)
 8001b46:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <log_to_SD+0xc8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <log_to_SD+0x2c>
	{

		if (DEBUG_PRINT == 1) printf("opened file \n");
 8001b50:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <log_to_SD+0xcc>)
 8001b52:	f010 fba5 	bl	80122a0 <puts>
 8001b56:	e02e      	b.n	8001bb6 <log_to_SD+0x8a>

	} else {

		if (DEBUG_PRINT == 1) printf("error opening log file for writing\n");
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <log_to_SD+0xd0>)
 8001b5a:	f010 fba1 	bl	80122a0 <puts>
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <log_to_SD+0xc8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4826      	ldr	r0, [pc, #152]	; (8001c00 <log_to_SD+0xd4>)
 8001b66:	f010 fb13 	bl	8012190 <iprintf>

		fresult = f_mount(NULL, SDPath, 1);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4925      	ldr	r1, [pc, #148]	; (8001c04 <log_to_SD+0xd8>)
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f00e fc08 	bl	8010384 <f_mount>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <log_to_SD+0xc8>)
 8001b7a:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <log_to_SD+0xc8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <log_to_SD+0x5e>
 8001b84:	4820      	ldr	r0, [pc, #128]	; (8001c08 <log_to_SD+0xdc>)
 8001b86:	f010 fb8b 	bl	80122a0 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	491d      	ldr	r1, [pc, #116]	; (8001c04 <log_to_SD+0xd8>)
 8001b8e:	481f      	ldr	r0, [pc, #124]	; (8001c0c <log_to_SD+0xe0>)
 8001b90:	f00e fbf8 	bl	8010384 <f_mount>
 8001b94:	4603      	mov	r3, r0
 8001b96:	73fb      	strb	r3, [r7, #15]
		if (ret == FR_OK)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d103      	bne.n	8001ba6 <log_to_SD+0x7a>
		{
			if (DEBUG_PRINT == 1) printf("mounted SD card\n");
 8001b9e:	481c      	ldr	r0, [pc, #112]	; (8001c10 <log_to_SD+0xe4>)
 8001ba0:	f010 fb7e 	bl	80122a0 <puts>
 8001ba4:	e007      	b.n	8001bb6 <log_to_SD+0x8a>
		} else {
			if (DEBUG_PRINT == 1) printf("no SD connection established\n");
 8001ba6:	481b      	ldr	r0, [pc, #108]	; (8001c14 <log_to_SD+0xe8>)
 8001ba8:	f010 fb7a 	bl	80122a0 <puts>
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <log_to_SD+0xd4>)
 8001bb2:	f010 faed 	bl	8012190 <iprintf>
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <log_to_SD+0xc4>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <log_to_SD+0xc4>)
 8001bbe:	f00f f98e 	bl	8010ede <f_lseek>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <log_to_SD+0xc8>)
 8001bc8:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 8001bca:	4909      	ldr	r1, [pc, #36]	; (8001bf0 <log_to_SD+0xc4>)
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f00f fdc4 	bl	801175a <f_puts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <log_to_SD+0xc8>)
 8001bd8:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <log_to_SD+0xc4>)
 8001bdc:	f00f f955 	bl	8010e8a <f_close>

	bufclear(buffer);
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	f7ff fb6f 	bl	80012c4 <bufclear>

}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200039a8 	.word	0x200039a8
 8001bf4:	200039a4 	.word	0x200039a4
 8001bf8:	080178f8 	.word	0x080178f8
 8001bfc:	0801794c 	.word	0x0801794c
 8001c00:	080175fc 	.word	0x080175fc
 8001c04:	2000e24c 	.word	0x2000e24c
 8001c08:	08017928 	.word	0x08017928
 8001c0c:	20000908 	.word	0x20000908
 8001c10:	080175cc 	.word	0x080175cc
 8001c14:	080175dc 	.word	0x080175dc

08001c18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c2a:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <MX_ADC1_Init+0x160>)
 8001c2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c38:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c3e:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c44:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c58:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c5a:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <MX_ADC1_Init+0x164>)
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c5e:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001c64:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c66:	2208      	movs	r2, #8
 8001c68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c6a:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c78:	483e      	ldr	r0, [pc, #248]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c7a:	f006 fc8d 	bl	8008598 <HAL_ADC_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c84:	f001 f846 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c90:	2307      	movs	r3, #7
 8001c92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	4836      	ldr	r0, [pc, #216]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001c9a:	f006 fe1b 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ca4:	f001 f836 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	482f      	ldr	r0, [pc, #188]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001cb6:	f006 fe0d 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001cc0:	f001 f828 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4828      	ldr	r0, [pc, #160]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001cd2:	f006 fdff 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001cdc:	f001 f81a 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4619      	mov	r1, r3
 8001cec:	4821      	ldr	r0, [pc, #132]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001cee:	f006 fdf1 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001cf8:	f001 f80c 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001cfc:	230b      	movs	r3, #11
 8001cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001d00:	2305      	movs	r3, #5
 8001d02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d04:	463b      	mov	r3, r7
 8001d06:	4619      	mov	r1, r3
 8001d08:	481a      	ldr	r0, [pc, #104]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001d0a:	f006 fde3 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001d14:	f000 fffe 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4813      	ldr	r0, [pc, #76]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001d26:	f006 fdd5 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001d30:	f000 fff0 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001d34:	230d      	movs	r3, #13
 8001d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001d42:	f006 fdc7 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001d4c:	f000 ffe2 	bl	8002d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001d50:	2310      	movs	r3, #16
 8001d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001d54:	2308      	movs	r3, #8
 8001d56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_ADC1_Init+0x15c>)
 8001d5e:	f006 fdb9 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001d68:	f000 ffd4 	bl	8002d14 <Error_Handler>
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200049d8 	.word	0x200049d8
 8001d78:	40012000 	.word	0x40012000
 8001d7c:	0f000001 	.word	0x0f000001

08001d80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a3c      	ldr	r2, [pc, #240]	; (8001e90 <HAL_ADC_MspInit+0x110>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d171      	bne.n	8001e86 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a2c      	ldr	r2, [pc, #176]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_ADC_MspInit+0x114>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001df6:	230f      	movs	r3, #15
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4823      	ldr	r0, [pc, #140]	; (8001e98 <HAL_ADC_MspInit+0x118>)
 8001e0a:	f007 fd21 	bl	8009850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e0e:	2307      	movs	r3, #7
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e12:	2303      	movs	r3, #3
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	481e      	ldr	r0, [pc, #120]	; (8001e9c <HAL_ADC_MspInit+0x11c>)
 8001e22:	f007 fd15 	bl	8009850 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e28:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <HAL_ADC_MspInit+0x124>)
 8001e2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e6c:	f007 f8e4 	bl	8009038 <HAL_DMA_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001e76:	f000 ff4d 	bl	8002d14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40012000 	.word	0x40012000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	20004a20 	.word	0x20004a20
 8001ea4:	40026410 	.word	0x40026410

08001ea8 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <DWT_Delay_us+0x3c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001eb6:	f009 fb7d 	bl	800b5b4 <HAL_RCC_GetHCLKFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <DWT_Delay_us+0x40>)
 8001ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001ecc:	bf00      	nop
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <DWT_Delay_us+0x3c>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad2      	subs	r2, r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d3f8      	bcc.n	8001ece <DWT_Delay_us+0x26>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	e0001000 	.word	0xe0001000
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <play>:
float fourth = 512.0 / SF;
float half = 1024.0 / SF;


void play(float freq, float time)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ef6:	edc7 0a00 	vstr	s1, [r7]
	float value = 0.0;
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
	while(value < time){
 8001f00:	e01b      	b.n	8001f3a <play+0x4e>
		HAL_GPIO_TogglePin(BUZ_GPIO_Port, BUZ_Pin);
 8001f02:	2120      	movs	r1, #32
 8001f04:	4816      	ldr	r0, [pc, #88]	; (8001f60 <play+0x74>)
 8001f06:	f007 fe6e 	bl	8009be6 <HAL_GPIO_TogglePin>
		DWT_Delay_us (1000*1000/freq);
 8001f0a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001f64 <play+0x78>
 8001f0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1a:	ee17 0a90 	vmov	r0, s15
 8001f1e:	f7ff ffc3 	bl	8001ea8 <DWT_Delay_us>
		value += 1000/freq;
 8001f22:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001f68 <play+0x7c>
 8001f26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	edc7 7a03 	vstr	s15, [r7, #12]
	while(value < time){
 8001f3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f3e:	edd7 7a00 	vldr	s15, [r7]
 8001f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	d4da      	bmi.n	8001f02 <play+0x16>
	}
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2120      	movs	r1, #32
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <play+0x74>)
 8001f52:	f007 fe2f 	bl	8009bb4 <HAL_GPIO_WritePin>
};
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40020800 	.word	0x40020800
 8001f64:	49742400 	.word	0x49742400
 8001f68:	447a0000 	.word	0x447a0000

08001f6c <seven_nation_army>:

void seven_nation_army(void){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0

	toggle(&BPRGM);
 8001f72:	48d1      	ldr	r0, [pc, #836]	; (80022b8 <seven_nation_army+0x34c>)
 8001f74:	f003 fcc6 	bl	8005904 <toggle>
	toggle(&BRDY);
 8001f78:	48d0      	ldr	r0, [pc, #832]	; (80022bc <seven_nation_army+0x350>)
 8001f7a:	f003 fcc3 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8001f7e:	48d0      	ldr	r0, [pc, #832]	; (80022c0 <seven_nation_army+0x354>)
 8001f80:	f003 fcc0 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8001f84:	48cf      	ldr	r0, [pc, #828]	; (80022c4 <seven_nation_army+0x358>)
 8001f86:	f003 fcbd 	bl	8005904 <toggle>

	play(E,fourth);
 8001f8a:	4bcf      	ldr	r3, [pc, #828]	; (80022c8 <seven_nation_army+0x35c>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	4bce      	ldr	r3, [pc, #824]	; (80022cc <seven_nation_army+0x360>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	eef0 0a47 	vmov.f32	s1, s14
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	f7ff ffa5 	bl	8001eec <play>

	toggle(&BPRGM);
 8001fa2:	48c5      	ldr	r0, [pc, #788]	; (80022b8 <seven_nation_army+0x34c>)
 8001fa4:	f003 fcae 	bl	8005904 <toggle>
	toggle(&BRDY);
 8001fa8:	48c4      	ldr	r0, [pc, #784]	; (80022bc <seven_nation_army+0x350>)
 8001faa:	f003 fcab 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8001fae:	48c4      	ldr	r0, [pc, #784]	; (80022c0 <seven_nation_army+0x354>)
 8001fb0:	f003 fca8 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8001fb4:	48c3      	ldr	r0, [pc, #780]	; (80022c4 <seven_nation_army+0x358>)
 8001fb6:	f003 fca5 	bl	8005904 <toggle>

	HAL_Delay(eighth);
 8001fba:	4bc5      	ldr	r3, [pc, #788]	; (80022d0 <seven_nation_army+0x364>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc4:	ee17 0a90 	vmov	r0, s15
 8001fc8:	f006 fac4 	bl	8008554 <HAL_Delay>
	play(E,eighth);
 8001fcc:	4bbe      	ldr	r3, [pc, #760]	; (80022c8 <seven_nation_army+0x35c>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	4bbf      	ldr	r3, [pc, #764]	; (80022d0 <seven_nation_army+0x364>)
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	eef0 0a47 	vmov.f32	s1, s14
 8001fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe0:	f7ff ff84 	bl	8001eec <play>

	toggle(&BPRGM);
 8001fe4:	48b4      	ldr	r0, [pc, #720]	; (80022b8 <seven_nation_army+0x34c>)
 8001fe6:	f003 fc8d 	bl	8005904 <toggle>
	toggle(&BRDY);
 8001fea:	48b4      	ldr	r0, [pc, #720]	; (80022bc <seven_nation_army+0x350>)
 8001fec:	f003 fc8a 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8001ff0:	48b3      	ldr	r0, [pc, #716]	; (80022c0 <seven_nation_army+0x354>)
 8001ff2:	f003 fc87 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8001ff6:	48b3      	ldr	r0, [pc, #716]	; (80022c4 <seven_nation_army+0x358>)
 8001ff8:	f003 fc84 	bl	8005904 <toggle>

	play(G,eighth);
 8001ffc:	4bb5      	ldr	r3, [pc, #724]	; (80022d4 <seven_nation_army+0x368>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	4bb3      	ldr	r3, [pc, #716]	; (80022d0 <seven_nation_army+0x364>)
 8002004:	ed93 7a00 	vldr	s14, [r3]
 8002008:	eef0 0a47 	vmov.f32	s1, s14
 800200c:	eeb0 0a67 	vmov.f32	s0, s15
 8002010:	f7ff ff6c 	bl	8001eec <play>
	HAL_Delay(sixteenth);
 8002014:	4bb0      	ldr	r3, [pc, #704]	; (80022d8 <seven_nation_army+0x36c>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	ee17 0a90 	vmov	r0, s15
 8002022:	f006 fa97 	bl	8008554 <HAL_Delay>
	play(E,sixteenth);
 8002026:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <seven_nation_army+0x35c>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	4baa      	ldr	r3, [pc, #680]	; (80022d8 <seven_nation_army+0x36c>)
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	eef0 0a47 	vmov.f32	s1, s14
 8002036:	eeb0 0a67 	vmov.f32	s0, s15
 800203a:	f7ff ff57 	bl	8001eec <play>

	toggle(&BPRGM);
 800203e:	489e      	ldr	r0, [pc, #632]	; (80022b8 <seven_nation_army+0x34c>)
 8002040:	f003 fc60 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002044:	489d      	ldr	r0, [pc, #628]	; (80022bc <seven_nation_army+0x350>)
 8002046:	f003 fc5d 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800204a:	489d      	ldr	r0, [pc, #628]	; (80022c0 <seven_nation_army+0x354>)
 800204c:	f003 fc5a 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002050:	489c      	ldr	r0, [pc, #624]	; (80022c4 <seven_nation_army+0x358>)
 8002052:	f003 fc57 	bl	8005904 <toggle>

	HAL_Delay(eighth);
 8002056:	4b9e      	ldr	r3, [pc, #632]	; (80022d0 <seven_nation_army+0x364>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002060:	ee17 0a90 	vmov	r0, s15
 8002064:	f006 fa76 	bl	8008554 <HAL_Delay>
	play(D,sixteenth);
 8002068:	4b9c      	ldr	r3, [pc, #624]	; (80022dc <seven_nation_army+0x370>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	4b9a      	ldr	r3, [pc, #616]	; (80022d8 <seven_nation_army+0x36c>)
 8002070:	ed93 7a00 	vldr	s14, [r3]
 8002074:	eef0 0a47 	vmov.f32	s1, s14
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	f7ff ff36 	bl	8001eec <play>
	HAL_Delay(sixteenth);
 8002080:	4b95      	ldr	r3, [pc, #596]	; (80022d8 <seven_nation_army+0x36c>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208a:	ee17 0a90 	vmov	r0, s15
 800208e:	f006 fa61 	bl	8008554 <HAL_Delay>

	toggle(&BPRGM);
 8002092:	4889      	ldr	r0, [pc, #548]	; (80022b8 <seven_nation_army+0x34c>)
 8002094:	f003 fc36 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002098:	4888      	ldr	r0, [pc, #544]	; (80022bc <seven_nation_army+0x350>)
 800209a:	f003 fc33 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800209e:	4888      	ldr	r0, [pc, #544]	; (80022c0 <seven_nation_army+0x354>)
 80020a0:	f003 fc30 	bl	8005904 <toggle>
	toggle(&BSTAT);
 80020a4:	4887      	ldr	r0, [pc, #540]	; (80022c4 <seven_nation_army+0x358>)
 80020a6:	f003 fc2d 	bl	8005904 <toggle>

	play(C,fourth);
 80020aa:	4b8d      	ldr	r3, [pc, #564]	; (80022e0 <seven_nation_army+0x374>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	4b86      	ldr	r3, [pc, #536]	; (80022cc <seven_nation_army+0x360>)
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	eef0 0a47 	vmov.f32	s1, s14
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	f7ff ff15 	bl	8001eec <play>

	toggle(&BPRGM);
 80020c2:	487d      	ldr	r0, [pc, #500]	; (80022b8 <seven_nation_army+0x34c>)
 80020c4:	f003 fc1e 	bl	8005904 <toggle>
	toggle(&BRDY);
 80020c8:	487c      	ldr	r0, [pc, #496]	; (80022bc <seven_nation_army+0x350>)
 80020ca:	f003 fc1b 	bl	8005904 <toggle>
	toggle(&BSAVE);
 80020ce:	487c      	ldr	r0, [pc, #496]	; (80022c0 <seven_nation_army+0x354>)
 80020d0:	f003 fc18 	bl	8005904 <toggle>
	toggle(&BSTAT);
 80020d4:	487b      	ldr	r0, [pc, #492]	; (80022c4 <seven_nation_army+0x358>)
 80020d6:	f003 fc15 	bl	8005904 <toggle>

	play(C,fourth);
 80020da:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <seven_nation_army+0x374>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <seven_nation_army+0x360>)
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	eef0 0a47 	vmov.f32	s1, s14
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	f7ff fefd 	bl	8001eec <play>

	toggle(&BPRGM);
 80020f2:	4871      	ldr	r0, [pc, #452]	; (80022b8 <seven_nation_army+0x34c>)
 80020f4:	f003 fc06 	bl	8005904 <toggle>
	toggle(&BRDY);
 80020f8:	4870      	ldr	r0, [pc, #448]	; (80022bc <seven_nation_army+0x350>)
 80020fa:	f003 fc03 	bl	8005904 <toggle>
	toggle(&BSAVE);
 80020fe:	4870      	ldr	r0, [pc, #448]	; (80022c0 <seven_nation_army+0x354>)
 8002100:	f003 fc00 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002104:	486f      	ldr	r0, [pc, #444]	; (80022c4 <seven_nation_army+0x358>)
 8002106:	f003 fbfd 	bl	8005904 <toggle>

	play(0.5*B,fourth);
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <seven_nation_army+0x378>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002118:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <seven_nation_army+0x360>)
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	eef0 0a47 	vmov.f32	s1, s14
 8002122:	eeb0 0a67 	vmov.f32	s0, s15
 8002126:	f7ff fee1 	bl	8001eec <play>

	toggle(&BPRGM);
 800212a:	4863      	ldr	r0, [pc, #396]	; (80022b8 <seven_nation_army+0x34c>)
 800212c:	f003 fbea 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002130:	4862      	ldr	r0, [pc, #392]	; (80022bc <seven_nation_army+0x350>)
 8002132:	f003 fbe7 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8002136:	4862      	ldr	r0, [pc, #392]	; (80022c0 <seven_nation_army+0x354>)
 8002138:	f003 fbe4 	bl	8005904 <toggle>
	toggle(&BSTAT);
 800213c:	4861      	ldr	r0, [pc, #388]	; (80022c4 <seven_nation_army+0x358>)
 800213e:	f003 fbe1 	bl	8005904 <toggle>

	play(0.5*B,fourth);
 8002142:	4b68      	ldr	r3, [pc, #416]	; (80022e4 <seven_nation_army+0x378>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800214c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <seven_nation_army+0x360>)
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	eef0 0a47 	vmov.f32	s1, s14
 800215a:	eeb0 0a67 	vmov.f32	s0, s15
 800215e:	f7ff fec5 	bl	8001eec <play>


	toggle(&BPRGM);
 8002162:	4855      	ldr	r0, [pc, #340]	; (80022b8 <seven_nation_army+0x34c>)
 8002164:	f003 fbce 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002168:	4854      	ldr	r0, [pc, #336]	; (80022bc <seven_nation_army+0x350>)
 800216a:	f003 fbcb 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800216e:	4854      	ldr	r0, [pc, #336]	; (80022c0 <seven_nation_army+0x354>)
 8002170:	f003 fbc8 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002174:	4853      	ldr	r0, [pc, #332]	; (80022c4 <seven_nation_army+0x358>)
 8002176:	f003 fbc5 	bl	8005904 <toggle>

	play(E,fourth);
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <seven_nation_army+0x35c>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <seven_nation_army+0x360>)
 8002182:	ed93 7a00 	vldr	s14, [r3]
 8002186:	eef0 0a47 	vmov.f32	s1, s14
 800218a:	eeb0 0a67 	vmov.f32	s0, s15
 800218e:	f7ff fead 	bl	8001eec <play>

	toggle(&BPRGM);
 8002192:	4849      	ldr	r0, [pc, #292]	; (80022b8 <seven_nation_army+0x34c>)
 8002194:	f003 fbb6 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002198:	4848      	ldr	r0, [pc, #288]	; (80022bc <seven_nation_army+0x350>)
 800219a:	f003 fbb3 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800219e:	4848      	ldr	r0, [pc, #288]	; (80022c0 <seven_nation_army+0x354>)
 80021a0:	f003 fbb0 	bl	8005904 <toggle>
	toggle(&BSTAT);
 80021a4:	4847      	ldr	r0, [pc, #284]	; (80022c4 <seven_nation_army+0x358>)
 80021a6:	f003 fbad 	bl	8005904 <toggle>

	HAL_Delay(eighth);
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <seven_nation_army+0x364>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b4:	ee17 0a90 	vmov	r0, s15
 80021b8:	f006 f9cc 	bl	8008554 <HAL_Delay>
	play(E,eighth);
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <seven_nation_army+0x35c>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <seven_nation_army+0x364>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	eef0 0a47 	vmov.f32	s1, s14
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	f7ff fe8c 	bl	8001eec <play>

	toggle(&BPRGM);
 80021d4:	4838      	ldr	r0, [pc, #224]	; (80022b8 <seven_nation_army+0x34c>)
 80021d6:	f003 fb95 	bl	8005904 <toggle>
	toggle(&BRDY);
 80021da:	4838      	ldr	r0, [pc, #224]	; (80022bc <seven_nation_army+0x350>)
 80021dc:	f003 fb92 	bl	8005904 <toggle>
	toggle(&BSAVE);
 80021e0:	4837      	ldr	r0, [pc, #220]	; (80022c0 <seven_nation_army+0x354>)
 80021e2:	f003 fb8f 	bl	8005904 <toggle>
	toggle(&BSTAT);
 80021e6:	4837      	ldr	r0, [pc, #220]	; (80022c4 <seven_nation_army+0x358>)
 80021e8:	f003 fb8c 	bl	8005904 <toggle>

	play(G,eighth);
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <seven_nation_army+0x368>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <seven_nation_army+0x364>)
 80021f4:	ed93 7a00 	vldr	s14, [r3]
 80021f8:	eef0 0a47 	vmov.f32	s1, s14
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	f7ff fe74 	bl	8001eec <play>
	HAL_Delay(sixteenth);
 8002204:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <seven_nation_army+0x36c>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220e:	ee17 0a90 	vmov	r0, s15
 8002212:	f006 f99f 	bl	8008554 <HAL_Delay>
	play(E,sixteenth);
 8002216:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <seven_nation_army+0x35c>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <seven_nation_army+0x36c>)
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	eef0 0a47 	vmov.f32	s1, s14
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
 800222a:	f7ff fe5f 	bl	8001eec <play>

	toggle(&BPRGM);
 800222e:	4822      	ldr	r0, [pc, #136]	; (80022b8 <seven_nation_army+0x34c>)
 8002230:	f003 fb68 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002234:	4821      	ldr	r0, [pc, #132]	; (80022bc <seven_nation_army+0x350>)
 8002236:	f003 fb65 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800223a:	4821      	ldr	r0, [pc, #132]	; (80022c0 <seven_nation_army+0x354>)
 800223c:	f003 fb62 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002240:	4820      	ldr	r0, [pc, #128]	; (80022c4 <seven_nation_army+0x358>)
 8002242:	f003 fb5f 	bl	8005904 <toggle>

	HAL_Delay(eighth);
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <seven_nation_army+0x364>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002250:	ee17 0a90 	vmov	r0, s15
 8002254:	f006 f97e 	bl	8008554 <HAL_Delay>
	play(D,sixteenth);
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <seven_nation_army+0x370>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <seven_nation_army+0x36c>)
 8002260:	ed93 7a00 	vldr	s14, [r3]
 8002264:	eef0 0a47 	vmov.f32	s1, s14
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	f7ff fe3e 	bl	8001eec <play>
	HAL_Delay(sixteenth);
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <seven_nation_army+0x36c>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800227a:	ee17 0a90 	vmov	r0, s15
 800227e:	f006 f969 	bl	8008554 <HAL_Delay>

	toggle(&BPRGM);
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <seven_nation_army+0x34c>)
 8002284:	f003 fb3e 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <seven_nation_army+0x350>)
 800228a:	f003 fb3b 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800228e:	480c      	ldr	r0, [pc, #48]	; (80022c0 <seven_nation_army+0x354>)
 8002290:	f003 fb38 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002294:	480b      	ldr	r0, [pc, #44]	; (80022c4 <seven_nation_army+0x358>)
 8002296:	f003 fb35 	bl	8005904 <toggle>

	play(C,eighth+sixteenth);
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <seven_nation_army+0x374>)
 800229c:	edd3 6a00 	vldr	s13, [r3]
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <seven_nation_army+0x364>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <seven_nation_army+0x36c>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b0:	eef0 0a67 	vmov.f32	s1, s15
 80022b4:	e018      	b.n	80022e8 <seven_nation_army+0x37c>
 80022b6:	bf00      	nop
 80022b8:	20000010 	.word	0x20000010
 80022bc:	20000018 	.word	0x20000018
 80022c0:	20000008 	.word	0x20000008
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000028 	.word	0x20000028
 80022cc:	20000044 	.word	0x20000044
 80022d0:	20000040 	.word	0x20000040
 80022d4:	20000030 	.word	0x20000030
 80022d8:	2000003c 	.word	0x2000003c
 80022dc:	20000024 	.word	0x20000024
 80022e0:	20000020 	.word	0x20000020
 80022e4:	20000038 	.word	0x20000038
 80022e8:	eeb0 0a66 	vmov.f32	s0, s13
 80022ec:	f7ff fdfe 	bl	8001eec <play>

	play(D,sixteenth);
 80022f0:	4bb1      	ldr	r3, [pc, #708]	; (80025b8 <seven_nation_army+0x64c>)
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	4bb1      	ldr	r3, [pc, #708]	; (80025bc <seven_nation_army+0x650>)
 80022f8:	ed93 7a00 	vldr	s14, [r3]
 80022fc:	eef0 0a47 	vmov.f32	s1, s14
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	f7ff fdf2 	bl	8001eec <play>

	toggle(&BPRGM);
 8002308:	48ad      	ldr	r0, [pc, #692]	; (80025c0 <seven_nation_army+0x654>)
 800230a:	f003 fafb 	bl	8005904 <toggle>
	toggle(&BRDY);
 800230e:	48ad      	ldr	r0, [pc, #692]	; (80025c4 <seven_nation_army+0x658>)
 8002310:	f003 faf8 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8002314:	48ac      	ldr	r0, [pc, #688]	; (80025c8 <seven_nation_army+0x65c>)
 8002316:	f003 faf5 	bl	8005904 <toggle>
	toggle(&BSTAT);
 800231a:	48ac      	ldr	r0, [pc, #688]	; (80025cc <seven_nation_army+0x660>)
 800231c:	f003 faf2 	bl	8005904 <toggle>

	play(D,eighth);
 8002320:	4ba5      	ldr	r3, [pc, #660]	; (80025b8 <seven_nation_army+0x64c>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	4baa      	ldr	r3, [pc, #680]	; (80025d0 <seven_nation_army+0x664>)
 8002328:	ed93 7a00 	vldr	s14, [r3]
 800232c:	eef0 0a47 	vmov.f32	s1, s14
 8002330:	eeb0 0a67 	vmov.f32	s0, s15
 8002334:	f7ff fdda 	bl	8001eec <play>
	play(C,eighth);
 8002338:	4ba6      	ldr	r3, [pc, #664]	; (80025d4 <seven_nation_army+0x668>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	4ba4      	ldr	r3, [pc, #656]	; (80025d0 <seven_nation_army+0x664>)
 8002340:	ed93 7a00 	vldr	s14, [r3]
 8002344:	eef0 0a47 	vmov.f32	s1, s14
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	f7ff fdce 	bl	8001eec <play>

	toggle(&BPRGM);
 8002350:	489b      	ldr	r0, [pc, #620]	; (80025c0 <seven_nation_army+0x654>)
 8002352:	f003 fad7 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002356:	489b      	ldr	r0, [pc, #620]	; (80025c4 <seven_nation_army+0x658>)
 8002358:	f003 fad4 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800235c:	489a      	ldr	r0, [pc, #616]	; (80025c8 <seven_nation_army+0x65c>)
 800235e:	f003 fad1 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002362:	489a      	ldr	r0, [pc, #616]	; (80025cc <seven_nation_army+0x660>)
 8002364:	f003 face 	bl	8005904 <toggle>

	play(0.5*B,fourth);
 8002368:	4b9b      	ldr	r3, [pc, #620]	; (80025d8 <seven_nation_army+0x66c>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002376:	4b99      	ldr	r3, [pc, #612]	; (80025dc <seven_nation_army+0x670>)
 8002378:	ed93 7a00 	vldr	s14, [r3]
 800237c:	eef0 0a47 	vmov.f32	s1, s14
 8002380:	eeb0 0a67 	vmov.f32	s0, s15
 8002384:	f7ff fdb2 	bl	8001eec <play>

	toggle(&BPRGM);
 8002388:	488d      	ldr	r0, [pc, #564]	; (80025c0 <seven_nation_army+0x654>)
 800238a:	f003 fabb 	bl	8005904 <toggle>
	toggle(&BRDY);
 800238e:	488d      	ldr	r0, [pc, #564]	; (80025c4 <seven_nation_army+0x658>)
 8002390:	f003 fab8 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8002394:	488c      	ldr	r0, [pc, #560]	; (80025c8 <seven_nation_army+0x65c>)
 8002396:	f003 fab5 	bl	8005904 <toggle>
	toggle(&BSTAT);
 800239a:	488c      	ldr	r0, [pc, #560]	; (80025cc <seven_nation_army+0x660>)
 800239c:	f003 fab2 	bl	8005904 <toggle>

	play(0.5*A,fourth);
 80023a0:	4b8f      	ldr	r3, [pc, #572]	; (80025e0 <seven_nation_army+0x674>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ae:	4b8b      	ldr	r3, [pc, #556]	; (80025dc <seven_nation_army+0x670>)
 80023b0:	ed93 7a00 	vldr	s14, [r3]
 80023b4:	eef0 0a47 	vmov.f32	s1, s14
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	f7ff fd96 	bl	8001eec <play>

	toggle(&BPRGM);
 80023c0:	487f      	ldr	r0, [pc, #508]	; (80025c0 <seven_nation_army+0x654>)
 80023c2:	f003 fa9f 	bl	8005904 <toggle>
	toggle(&BRDY);
 80023c6:	487f      	ldr	r0, [pc, #508]	; (80025c4 <seven_nation_army+0x658>)
 80023c8:	f003 fa9c 	bl	8005904 <toggle>
	toggle(&BSAVE);
 80023cc:	487e      	ldr	r0, [pc, #504]	; (80025c8 <seven_nation_army+0x65c>)
 80023ce:	f003 fa99 	bl	8005904 <toggle>
	toggle(&BSTAT);
 80023d2:	487e      	ldr	r0, [pc, #504]	; (80025cc <seven_nation_army+0x660>)
 80023d4:	f003 fa96 	bl	8005904 <toggle>

	play(2*E,fourth);
 80023d8:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <seven_nation_army+0x678>)
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e2:	4b7e      	ldr	r3, [pc, #504]	; (80025dc <seven_nation_army+0x670>)
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	eef0 0a47 	vmov.f32	s1, s14
 80023ec:	eeb0 0a67 	vmov.f32	s0, s15
 80023f0:	f7ff fd7c 	bl	8001eec <play>

	toggle(&BPRGM);
 80023f4:	4872      	ldr	r0, [pc, #456]	; (80025c0 <seven_nation_army+0x654>)
 80023f6:	f003 fa85 	bl	8005904 <toggle>
	toggle(&BRDY);
 80023fa:	4872      	ldr	r0, [pc, #456]	; (80025c4 <seven_nation_army+0x658>)
 80023fc:	f003 fa82 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8002400:	4871      	ldr	r0, [pc, #452]	; (80025c8 <seven_nation_army+0x65c>)
 8002402:	f003 fa7f 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002406:	4871      	ldr	r0, [pc, #452]	; (80025cc <seven_nation_army+0x660>)
 8002408:	f003 fa7c 	bl	8005904 <toggle>

	HAL_Delay(eighth);
 800240c:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <seven_nation_army+0x664>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002416:	ee17 0a90 	vmov	r0, s15
 800241a:	f006 f89b 	bl	8008554 <HAL_Delay>
	play(2*E,eighth);
 800241e:	4b71      	ldr	r3, [pc, #452]	; (80025e4 <seven_nation_army+0x678>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002428:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <seven_nation_army+0x664>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	eef0 0a47 	vmov.f32	s1, s14
 8002432:	eeb0 0a67 	vmov.f32	s0, s15
 8002436:	f7ff fd59 	bl	8001eec <play>

	toggle(&BPRGM);
 800243a:	4861      	ldr	r0, [pc, #388]	; (80025c0 <seven_nation_army+0x654>)
 800243c:	f003 fa62 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002440:	4860      	ldr	r0, [pc, #384]	; (80025c4 <seven_nation_army+0x658>)
 8002442:	f003 fa5f 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8002446:	4860      	ldr	r0, [pc, #384]	; (80025c8 <seven_nation_army+0x65c>)
 8002448:	f003 fa5c 	bl	8005904 <toggle>
	toggle(&BSTAT);
 800244c:	485f      	ldr	r0, [pc, #380]	; (80025cc <seven_nation_army+0x660>)
 800244e:	f003 fa59 	bl	8005904 <toggle>

	for (int i=2*E; i<2*G; i+= 2*(G - E)/20){
 8002452:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <seven_nation_army+0x678>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002460:	ee17 3a90 	vmov	r3, s15
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	e02b      	b.n	80024c0 <seven_nation_army+0x554>
		play(i,eighth/20);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <seven_nation_army+0x664>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800247c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002480:	eef0 0a46 	vmov.f32	s1, s12
 8002484:	eeb0 0a66 	vmov.f32	s0, s13
 8002488:	f7ff fd30 	bl	8001eec <play>
	for (int i=2*E; i<2*G; i+= 2*(G - E)/20){
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	4b54      	ldr	r3, [pc, #336]	; (80025e8 <seven_nation_army+0x67c>)
 8002498:	edd3 6a00 	vldr	s13, [r3]
 800249c:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <seven_nation_army+0x678>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024a6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80024aa:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80024ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ba:	ee17 3a90 	vmov	r3, s15
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <seven_nation_army+0x67c>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d4c4      	bmi.n	8002468 <seven_nation_army+0x4fc>
	}
	play(2*G,eighth/20);
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <seven_nation_army+0x67c>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <seven_nation_army+0x664>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80024f2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80024f6:	eef0 0a46 	vmov.f32	s1, s12
 80024fa:	eeb0 0a66 	vmov.f32	s0, s13
 80024fe:	f7ff fcf5 	bl	8001eec <play>

	HAL_Delay(sixteenth);
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <seven_nation_army+0x650>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250c:	ee17 0a90 	vmov	r0, s15
 8002510:	f006 f820 	bl	8008554 <HAL_Delay>
	play(2*E,sixteenth);
 8002514:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <seven_nation_army+0x678>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800251e:	4b27      	ldr	r3, [pc, #156]	; (80025bc <seven_nation_army+0x650>)
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	eef0 0a47 	vmov.f32	s1, s14
 8002528:	eeb0 0a67 	vmov.f32	s0, s15
 800252c:	f7ff fcde 	bl	8001eec <play>

	toggle(&BPRGM);
 8002530:	4823      	ldr	r0, [pc, #140]	; (80025c0 <seven_nation_army+0x654>)
 8002532:	f003 f9e7 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002536:	4823      	ldr	r0, [pc, #140]	; (80025c4 <seven_nation_army+0x658>)
 8002538:	f003 f9e4 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800253c:	4822      	ldr	r0, [pc, #136]	; (80025c8 <seven_nation_army+0x65c>)
 800253e:	f003 f9e1 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002542:	4822      	ldr	r0, [pc, #136]	; (80025cc <seven_nation_army+0x660>)
 8002544:	f003 f9de 	bl	8005904 <toggle>

	HAL_Delay(eighth);
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <seven_nation_army+0x664>)
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002552:	ee17 0a90 	vmov	r0, s15
 8002556:	f005 fffd 	bl	8008554 <HAL_Delay>
	play(2*D,sixteenth);
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <seven_nation_army+0x64c>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <seven_nation_army+0x650>)
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	eef0 0a47 	vmov.f32	s1, s14
 800256e:	eeb0 0a67 	vmov.f32	s0, s15
 8002572:	f7ff fcbb 	bl	8001eec <play>
	HAL_Delay(sixteenth);
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <seven_nation_army+0x650>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002580:	ee17 0a90 	vmov	r0, s15
 8002584:	f005 ffe6 	bl	8008554 <HAL_Delay>

	toggle(&BPRGM);
 8002588:	480d      	ldr	r0, [pc, #52]	; (80025c0 <seven_nation_army+0x654>)
 800258a:	f003 f9bb 	bl	8005904 <toggle>
	toggle(&BRDY);
 800258e:	480d      	ldr	r0, [pc, #52]	; (80025c4 <seven_nation_army+0x658>)
 8002590:	f003 f9b8 	bl	8005904 <toggle>
	toggle(&BSAVE);
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <seven_nation_army+0x65c>)
 8002596:	f003 f9b5 	bl	8005904 <toggle>
	toggle(&BSTAT);
 800259a:	480c      	ldr	r0, [pc, #48]	; (80025cc <seven_nation_army+0x660>)
 800259c:	f003 f9b2 	bl	8005904 <toggle>

	for (int i=2*D; i<=2*G; i+= (2*G - 2*D)/20){
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <seven_nation_army+0x64c>)
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ae:	ee17 3a90 	vmov	r3, s15
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	e048      	b.n	8002648 <seven_nation_army+0x6dc>
 80025b6:	bf00      	nop
 80025b8:	20000024 	.word	0x20000024
 80025bc:	2000003c 	.word	0x2000003c
 80025c0:	20000010 	.word	0x20000010
 80025c4:	20000018 	.word	0x20000018
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000040 	.word	0x20000040
 80025d4:	20000020 	.word	0x20000020
 80025d8:	20000038 	.word	0x20000038
 80025dc:	20000044 	.word	0x20000044
 80025e0:	20000034 	.word	0x20000034
 80025e4:	20000028 	.word	0x20000028
 80025e8:	20000030 	.word	0x20000030
		play(i,eighth/20);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025f6:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <seven_nation_army+0x7bc>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002600:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002604:	eef0 0a46 	vmov.f32	s1, s12
 8002608:	eeb0 0a66 	vmov.f32	s0, s13
 800260c:	f7ff fc6e 	bl	8001eec <play>
	for (int i=2*D; i<=2*G; i+= (2*G - 2*D)/20){
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800261a:	4b44      	ldr	r3, [pc, #272]	; (800272c <seven_nation_army+0x7c0>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002624:	4b42      	ldr	r3, [pc, #264]	; (8002730 <seven_nation_army+0x7c4>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800262e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002632:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8002636:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800263a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002642:	ee17 3a90 	vmov	r3, s15
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002652:	4b36      	ldr	r3, [pc, #216]	; (800272c <seven_nation_army+0x7c0>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800265c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	d9c2      	bls.n	80025ec <seven_nation_army+0x680>
	}
	play(2*G,eighth);
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <seven_nation_army+0x7c0>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <seven_nation_army+0x7bc>)
 8002672:	ed93 7a00 	vldr	s14, [r3]
 8002676:	eef0 0a47 	vmov.f32	s1, s14
 800267a:	eeb0 0a67 	vmov.f32	s0, s15
 800267e:	f7ff fc35 	bl	8001eec <play>

	toggle(&BPRGM);
 8002682:	482c      	ldr	r0, [pc, #176]	; (8002734 <seven_nation_army+0x7c8>)
 8002684:	f003 f93e 	bl	8005904 <toggle>
	toggle(&BRDY);
 8002688:	482b      	ldr	r0, [pc, #172]	; (8002738 <seven_nation_army+0x7cc>)
 800268a:	f003 f93b 	bl	8005904 <toggle>
	toggle(&BSAVE);
 800268e:	482b      	ldr	r0, [pc, #172]	; (800273c <seven_nation_army+0x7d0>)
 8002690:	f003 f938 	bl	8005904 <toggle>
	toggle(&BSTAT);
 8002694:	482a      	ldr	r0, [pc, #168]	; (8002740 <seven_nation_army+0x7d4>)
 8002696:	f003 f935 	bl	8005904 <toggle>

	play(2*G,fourth);
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <seven_nation_army+0x7c0>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <seven_nation_army+0x7d8>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	eef0 0a47 	vmov.f32	s1, s14
 80026ae:	eeb0 0a67 	vmov.f32	s0, s15
 80026b2:	f7ff fc1b 	bl	8001eec <play>

	toggle(&BPRGM);
 80026b6:	481f      	ldr	r0, [pc, #124]	; (8002734 <seven_nation_army+0x7c8>)
 80026b8:	f003 f924 	bl	8005904 <toggle>
	toggle(&BRDY);
 80026bc:	481e      	ldr	r0, [pc, #120]	; (8002738 <seven_nation_army+0x7cc>)
 80026be:	f003 f921 	bl	8005904 <toggle>
	toggle(&BSAVE);
 80026c2:	481e      	ldr	r0, [pc, #120]	; (800273c <seven_nation_army+0x7d0>)
 80026c4:	f003 f91e 	bl	8005904 <toggle>
	toggle(&BSTAT);
 80026c8:	481d      	ldr	r0, [pc, #116]	; (8002740 <seven_nation_army+0x7d4>)
 80026ca:	f003 f91b 	bl	8005904 <toggle>

	play(2*Fis,fourth);
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <seven_nation_army+0x7dc>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <seven_nation_army+0x7d8>)
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	eef0 0a47 	vmov.f32	s1, s14
 80026e2:	eeb0 0a67 	vmov.f32	s0, s15
 80026e6:	f7ff fc01 	bl	8001eec <play>

	toggle(&BPRGM);
 80026ea:	4812      	ldr	r0, [pc, #72]	; (8002734 <seven_nation_army+0x7c8>)
 80026ec:	f003 f90a 	bl	8005904 <toggle>
	toggle(&BRDY);
 80026f0:	4811      	ldr	r0, [pc, #68]	; (8002738 <seven_nation_army+0x7cc>)
 80026f2:	f003 f907 	bl	8005904 <toggle>
	toggle(&BSAVE);
 80026f6:	4811      	ldr	r0, [pc, #68]	; (800273c <seven_nation_army+0x7d0>)
 80026f8:	f003 f904 	bl	8005904 <toggle>
	toggle(&BSTAT);
 80026fc:	4810      	ldr	r0, [pc, #64]	; (8002740 <seven_nation_army+0x7d4>)
 80026fe:	f003 f901 	bl	8005904 <toggle>

	play(2*Fis,fourth);
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <seven_nation_army+0x7dc>)
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <seven_nation_army+0x7d8>)
 800270e:	ed93 7a00 	vldr	s14, [r3]
 8002712:	eef0 0a47 	vmov.f32	s1, s14
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
 800271a:	f7ff fbe7 	bl	8001eec <play>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000040 	.word	0x20000040
 800272c:	20000030 	.word	0x20000030
 8002730:	20000024 	.word	0x20000024
 8002734:	20000010 	.word	0x20000010
 8002738:	20000018 	.word	0x20000018
 800273c:	20000008 	.word	0x20000008
 8002740:	20000000 	.word	0x20000000
 8002744:	20000044 	.word	0x20000044
 8002748:	2000002c 	.word	0x2000002c

0800274c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_DMA_Init+0x5c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <MX_DMA_Init+0x5c>)
 800275c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_DMA_Init+0x5c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2038      	movs	r0, #56	; 0x38
 8002774:	f006 fc29 	bl	8008fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002778:	2038      	movs	r0, #56	; 0x38
 800277a:	f006 fc42 	bl	8009002 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	203b      	movs	r0, #59	; 0x3b
 8002784:	f006 fc21 	bl	8008fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002788:	203b      	movs	r0, #59	; 0x3b
 800278a:	f006 fc3a 	bl	8009002 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	2045      	movs	r0, #69	; 0x45
 8002794:	f006 fc19 	bl	8008fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002798:	2045      	movs	r0, #69	; 0x45
 800279a:	f006 fc32 	bl	8009002 <HAL_NVIC_EnableIRQ>

}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <DWT_Delay_Init+0x58>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <DWT_Delay_Init+0x58>)
 80027b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ba:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <DWT_Delay_Init+0x58>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a10      	ldr	r2, [pc, #64]	; (8002804 <DWT_Delay_Init+0x58>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <DWT_Delay_Init+0x5c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <DWT_Delay_Init+0x5c>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <DWT_Delay_Init+0x5c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <DWT_Delay_Init+0x5c>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <DWT_Delay_Init+0x5c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80027e6:	bf00      	nop
     __ASM volatile ("NOP");
 80027e8:	bf00      	nop
  __ASM volatile ("NOP");
 80027ea:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <DWT_Delay_Init+0x5c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80027f8:	2301      	movs	r3, #1
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000edf0 	.word	0xe000edf0
 8002808:	e0001000 	.word	0xe0001000

0800280c <start_timer>:
 *      Author: linus
 */

#include "fs_timer.h"

void start_timer(struct timer_t * t, uint32_t * tick){
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
	if (t->active == 0){
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7a1b      	ldrb	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <start_timer+0x26>
		t->end = *tick + t->value;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	441a      	add	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	605a      	str	r2, [r3, #4]
		t->active = 1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	721a      	strb	r2, [r3, #8]
	}
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <check_timer>:

uint8_t check_timer(struct timer_t * t, uint32_t * tick){
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
	if ((*tick > t->end) & (t->active == 1)) {
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	bf8c      	ite	hi
 8002854:	2301      	movhi	r3, #1
 8002856:	2300      	movls	r3, #0
 8002858:	b2da      	uxtb	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7a1b      	ldrb	r3, [r3, #8]
 800285e:	2b01      	cmp	r3, #1
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4013      	ands	r3, r2
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <check_timer+0x3c>
		t->active = 0;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	721a      	strb	r2, [r3, #8]
		return 1;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <check_timer+0x3e>
	}
	return 0;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028a8:	f043 0310 	orr.w	r3, r3, #16
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a5c      	ldr	r2, [pc, #368]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a55      	ldr	r2, [pc, #340]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a47      	ldr	r2, [pc, #284]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b45      	ldr	r3, [pc, #276]	; (8002a34 <MX_GPIO_Init+0x1ac>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800292a:	2200      	movs	r2, #0
 800292c:	2110      	movs	r1, #16
 800292e:	4842      	ldr	r0, [pc, #264]	; (8002a38 <MX_GPIO_Init+0x1b0>)
 8002930:	f007 f940 	bl	8009bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	2120      	movs	r1, #32
 8002938:	4840      	ldr	r0, [pc, #256]	; (8002a3c <MX_GPIO_Init+0x1b4>)
 800293a:	f007 f93b 	bl	8009bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 800293e:	2200      	movs	r2, #0
 8002940:	f64f 7180 	movw	r1, #65408	; 0xff80
 8002944:	483e      	ldr	r0, [pc, #248]	; (8002a40 <MX_GPIO_Init+0x1b8>)
 8002946:	f007 f935 	bl	8009bb4 <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002950:	483c      	ldr	r0, [pc, #240]	; (8002a44 <MX_GPIO_Init+0x1bc>)
 8002952:	f007 f92f 	bl	8009bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 8002956:	2308      	movs	r3, #8
 8002958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	4835      	ldr	r0, [pc, #212]	; (8002a40 <MX_GPIO_Init+0x1b8>)
 800296a:	f006 ff71 	bl	8009850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 800296e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	482e      	ldr	r0, [pc, #184]	; (8002a3c <MX_GPIO_Init+0x1b4>)
 8002984:	f006 ff64 	bl	8009850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002988:	2310      	movs	r3, #16
 800298a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4619      	mov	r1, r3
 800299e:	4826      	ldr	r0, [pc, #152]	; (8002a38 <MX_GPIO_Init+0x1b0>)
 80029a0:	f006 ff56 	bl	8009850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80029a4:	2320      	movs	r3, #32
 80029a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	2301      	movs	r3, #1
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4820      	ldr	r0, [pc, #128]	; (8002a3c <MX_GPIO_Init+0x1b4>)
 80029bc:	f006 ff48 	bl	8009850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 80029c0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80029c4:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	4819      	ldr	r0, [pc, #100]	; (8002a40 <MX_GPIO_Init+0x1b8>)
 80029da:	f006 ff39 	bl	8009850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 80029de:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80029e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4813      	ldr	r0, [pc, #76]	; (8002a44 <MX_GPIO_Init+0x1bc>)
 80029f8:	f006 ff2a 	bl	8009850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 80029fc:	2301      	movs	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480e      	ldr	r0, [pc, #56]	; (8002a48 <MX_GPIO_Init+0x1c0>)
 8002a10:	f006 ff1e 	bl	8009850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8002a14:	2310      	movs	r3, #16
 8002a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4807      	ldr	r0, [pc, #28]	; (8002a44 <MX_GPIO_Init+0x1bc>)
 8002a28:	f006 ff12 	bl	8009850 <HAL_GPIO_Init>

}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020c00 	.word	0x40020c00

08002a4c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <MX_I2C1_Init+0x54>)
 8002a54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <MX_I2C1_Init+0x58>)
 8002a5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <MX_I2C1_Init+0x50>)
 8002a8a:	f007 f8c7 	bl	8009c1c <HAL_I2C_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a94:	f000 f93e 	bl	8002d14 <Error_Handler>
  }

}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20004a80 	.word	0x20004a80
 8002aa0:	40005400 	.word	0x40005400
 8002aa4:	00061a80 	.word	0x00061a80

08002aa8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <MX_I2C2_Init+0x54>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <MX_I2C2_Init+0x58>)
 8002ab6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <MX_I2C2_Init+0x50>)
 8002ae6:	f007 f899 	bl	8009c1c <HAL_I2C_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002af0:	f000 f910 	bl	8002d14 <Error_Handler>
  }

}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20004ad4 	.word	0x20004ad4
 8002afc:	40005800 	.word	0x40005800
 8002b00:	000186a0 	.word	0x000186a0

08002b04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	; 0x30
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a32      	ldr	r2, [pc, #200]	; (8002bec <HAL_I2C_MspInit+0xe8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d12c      	bne.n	8002b80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b46:	2312      	movs	r3, #18
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b52:	2304      	movs	r3, #4
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4825      	ldr	r0, [pc, #148]	; (8002bf4 <HAL_I2C_MspInit+0xf0>)
 8002b5e:	f006 fe77 	bl	8009850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002b7e:	e031      	b.n	8002be4 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_I2C_MspInit+0xf4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12c      	bne.n	8002be4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ba6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bac:	2312      	movs	r3, #18
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bb8:	2304      	movs	r3, #4
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <HAL_I2C_MspInit+0xf0>)
 8002bc4:	f006 fe44 	bl	8009850 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_I2C_MspInit+0xec>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40005400 	.word	0x40005400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40005800 	.word	0x40005800

08002bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c00:	f005 fc36 	bl	8008470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c04:	f000 f81c 	bl	8002c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c08:	f7ff fe3e 	bl	8002888 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c0c:	f7ff fd9e 	bl	800274c <MX_DMA_Init>
  MX_I2C1_Init();
 8002c10:	f7ff ff1c 	bl	8002a4c <MX_I2C1_Init>
  MX_SPI2_Init();
 8002c14:	f001 ff2e 	bl	8004a74 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002c18:	f7fe fffe 	bl	8001c18 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002c1c:	f7ff ff44 	bl	8002aa8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002c20:	f001 f9f8 	bl	8004014 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8002c24:	f001 fef0 	bl	8004a08 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002c28:	f00b fa9a 	bl	800e160 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8002c2c:	f7fe f9d6 	bl	8000fdc <turn_off_HAWKs>
  turn_off_TDs();
 8002c30:	f7fe fa04 	bl	800103c <turn_off_TDs>

  schedulerinit();
 8002c34:	f000 f936 	bl	8002ea4 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8002c38:	f000 fad4 	bl	80031e4 <scheduler>
 8002c3c:	e7fc      	b.n	8002c38 <main+0x3c>
	...

08002c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b094      	sub	sp, #80	; 0x50
 8002c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c46:	f107 0320 	add.w	r3, r7, #32
 8002c4a:	2230      	movs	r2, #48	; 0x30
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f00e fe39 	bl	80118c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <SystemClock_Config+0xcc>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <SystemClock_Config+0xcc>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <SystemClock_Config+0xcc>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c80:	2300      	movs	r3, #0
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <SystemClock_Config+0xd0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <SystemClock_Config+0xd0>)
 8002c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <SystemClock_Config+0xd0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cac:	2300      	movs	r3, #0
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002cb4:	23a8      	movs	r3, #168	; 0xa8
 8002cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc0:	f107 0320 	add.w	r3, r7, #32
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f008 f86d 	bl	800ada4 <HAL_RCC_OscConfig>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cd0:	f000 f820 	bl	8002d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	2105      	movs	r1, #5
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f008 fac6 	bl	800b284 <HAL_RCC_ClockConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cfe:	f000 f809 	bl	8002d14 <Error_Handler>
  }
}
 8002d02:	bf00      	nop
 8002d04:	3750      	adds	r7, #80	; 0x50
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000

08002d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <launch_detect>:
float Ay2[FAKE_FILE_LEN];
float Az2[FAKE_FILE_LEN];

float launch_detect_buffer[5];

uint8_t launch_detect(float * a1, float * a2){
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < 5; i++){
 8002d2e:	2301      	movs	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e00d      	b.n	8002d50 <launch_detect+0x2c>
		launch_detect_buffer[i-1] = launch_detect_buffer[i];
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	4958      	ldr	r1, [pc, #352]	; (8002e9c <launch_detect+0x178>)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	440a      	add	r2, r1
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4956      	ldr	r1, [pc, #344]	; (8002e9c <launch_detect+0x178>)
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < 5; i++){
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	ddee      	ble.n	8002d34 <launch_detect+0x10>
	}
	launch_detect_buffer[4] = (sqrt(a1[1]*a1[1] + a1[2]*a1[2] + a1[3]*a1[3]) + sqrt(a2[1]*a2[1] + a2[2]*a2[2] + a2[3]*a2[3])) / 2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	ed93 7a00 	vldr	s14, [r3]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	edd3 6a00 	vldr	s13, [r3]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3308      	adds	r3, #8
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	330c      	adds	r3, #12
 8002d86:	edd3 6a00 	vldr	s13, [r3]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	ee17 0a90 	vmov	r0, s15
 8002d9e:	f7fd fbd3 	bl	8000548 <__aeabi_f2d>
 8002da2:	4603      	mov	r3, r0
 8002da4:	460c      	mov	r4, r1
 8002da6:	ec44 3b10 	vmov	d0, r3, r4
 8002daa:	f012 ff67 	bl	8015c7c <sqrt>
 8002dae:	ec55 4b10 	vmov	r4, r5, d0
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	3304      	adds	r3, #4
 8002db6:	ed93 7a00 	vldr	s14, [r3]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	edd3 6a00 	vldr	s13, [r3]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	edd3 6a00 	vldr	s13, [r3]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	ee17 0a90 	vmov	r0, s15
 8002dfa:	f7fd fba5 	bl	8000548 <__aeabi_f2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	ec43 2b10 	vmov	d0, r2, r3
 8002e06:	f012 ff39 	bl	8015c7c <sqrt>
 8002e0a:	ec53 2b10 	vmov	r2, r3, d0
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	f7fd fa3b 	bl	800028c <__adddf3>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e26:	f7fd fd11 	bl	800084c <__aeabi_ddiv>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	4621      	mov	r1, r4
 8002e32:	f7fd fed9 	bl	8000be8 <__aeabi_d2f>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <launch_detect+0x178>)
 8002e3a:	611a      	str	r2, [r3, #16]
	float sum_a = 0;
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 5; i++){
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e00e      	b.n	8002e66 <launch_detect+0x142>
		sum_a += launch_detect_buffer[i];
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <launch_detect+0x178>)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < 5; i++){
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	dded      	ble.n	8002e48 <launch_detect+0x124>
	}
	sum_a /= 5;
 8002e6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e70:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e78:	edc7 7a04 	vstr	s15, [r7, #16]

	// if average of acceleration over 5 measurements is higher than 4G, launch has been detected.
	if (sum_a >= 40) return 1;
 8002e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ea0 <launch_detect+0x17c>
 8002e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	db01      	blt.n	8002e92 <launch_detect+0x16e>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <launch_detect+0x170>
	return 0;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9c:	2000cf78 	.word	0x2000cf78
 8002ea0:	42200000 	.word	0x42200000

08002ea4 <schedulerinit>:

void schedulerinit () {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af06      	add	r7, sp, #24

	//initialize all devices
	ms5607_init(&BARO1);
 8002eaa:	48a0      	ldr	r0, [pc, #640]	; (800312c <schedulerinit+0x288>)
 8002eac:	f002 fd5a 	bl	8005964 <ms5607_init>
	ms5607_init(&BARO2);
 8002eb0:	489f      	ldr	r0, [pc, #636]	; (8003130 <schedulerinit+0x28c>)
 8002eb2:	f002 fd57 	bl	8005964 <ms5607_init>
	sht31_init(&TEMP);
 8002eb6:	489f      	ldr	r0, [pc, #636]	; (8003134 <schedulerinit+0x290>)
 8002eb8:	f003 f8fc 	bl	80060b4 <sht31_init>
	icm20601_init(&IMU1);
 8002ebc:	489e      	ldr	r0, [pc, #632]	; (8003138 <schedulerinit+0x294>)
 8002ebe:	f002 faa8 	bl	8005412 <icm20601_init>
	icm20601_init(&IMU2);
 8002ec2:	489e      	ldr	r0, [pc, #632]	; (800313c <schedulerinit+0x298>)
 8002ec4:	f002 faa5 	bl	8005412 <icm20601_init>
	h3l_init(&ACCEL);
 8002ec8:	489d      	ldr	r0, [pc, #628]	; (8003140 <schedulerinit+0x29c>)
 8002eca:	f001 ffdb 	bl	8004e84 <h3l_init>
	init_ADC();
 8002ece:	f7fe f8c7 	bl	8001060 <init_ADC>

	DWT_Delay_Init();
 8002ed2:	f7ff fc6b 	bl	80027ac <DWT_Delay_Init>


	// cycle through LEDs

	turn_on(&STAT);
 8002ed6:	489b      	ldr	r0, [pc, #620]	; (8003144 <schedulerinit+0x2a0>)
 8002ed8:	f002 fd24 	bl	8005924 <turn_on>
	HAL_Delay(300);
 8002edc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ee0:	f005 fb38 	bl	8008554 <HAL_Delay>
	turn_on(&SAVE);
 8002ee4:	4898      	ldr	r0, [pc, #608]	; (8003148 <schedulerinit+0x2a4>)
 8002ee6:	f002 fd1d 	bl	8005924 <turn_on>
	HAL_Delay(300);
 8002eea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002eee:	f005 fb31 	bl	8008554 <HAL_Delay>
	turn_on(&PRGM);
 8002ef2:	4896      	ldr	r0, [pc, #600]	; (800314c <schedulerinit+0x2a8>)
 8002ef4:	f002 fd16 	bl	8005924 <turn_on>
	HAL_Delay(300);
 8002ef8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002efc:	f005 fb2a 	bl	8008554 <HAL_Delay>
	turn_on(&RDY);
 8002f00:	4893      	ldr	r0, [pc, #588]	; (8003150 <schedulerinit+0x2ac>)
 8002f02:	f002 fd0f 	bl	8005924 <turn_on>
	HAL_Delay(300);
 8002f06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f0a:	f005 fb23 	bl	8008554 <HAL_Delay>

	stay_alive();
 8002f0e:	f7fe f83b 	bl	8000f88 <stay_alive>

	turn_off(&STAT);
 8002f12:	488c      	ldr	r0, [pc, #560]	; (8003144 <schedulerinit+0x2a0>)
 8002f14:	f002 fd16 	bl	8005944 <turn_off>
	turn_off(&SAVE);
 8002f18:	488b      	ldr	r0, [pc, #556]	; (8003148 <schedulerinit+0x2a4>)
 8002f1a:	f002 fd13 	bl	8005944 <turn_off>
	turn_off(&PRGM);
 8002f1e:	488b      	ldr	r0, [pc, #556]	; (800314c <schedulerinit+0x2a8>)
 8002f20:	f002 fd10 	bl	8005944 <turn_off>
	turn_off(&RDY);
 8002f24:	488a      	ldr	r0, [pc, #552]	; (8003150 <schedulerinit+0x2ac>)
 8002f26:	f002 fd0d 	bl	8005944 <turn_off>

	// initialize SD card
	turn_on(&SAVE);
 8002f2a:	4887      	ldr	r0, [pc, #540]	; (8003148 <schedulerinit+0x2a4>)
 8002f2c:	f002 fcfa 	bl	8005924 <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 8002f30:	4988      	ldr	r1, [pc, #544]	; (8003154 <schedulerinit+0x2b0>)
 8002f32:	4889      	ldr	r0, [pc, #548]	; (8003158 <schedulerinit+0x2b4>)
 8002f34:	f7fe f9e0 	bl	80012f8 <init_sd>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b87      	ldr	r3, [pc, #540]	; (800315c <schedulerinit+0x2b8>)
 8002f3e:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 8002f40:	4b86      	ldr	r3, [pc, #536]	; (800315c <schedulerinit+0x2b8>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <schedulerinit+0xac>
		turn_off(&SAVE);
 8002f48:	487f      	ldr	r0, [pc, #508]	; (8003148 <schedulerinit+0x2a4>)
 8002f4a:	f002 fcfb 	bl	8005944 <turn_off>
 8002f4e:	e00b      	b.n	8002f68 <schedulerinit+0xc4>
	} else {
		turn_on(&RDY);
 8002f50:	487f      	ldr	r0, [pc, #508]	; (8003150 <schedulerinit+0x2ac>)
 8002f52:	f002 fce7 	bl	8005924 <turn_on>
		HAL_Delay(100);
 8002f56:	2064      	movs	r0, #100	; 0x64
 8002f58:	f005 fafc 	bl	8008554 <HAL_Delay>
		turn_off(&RDY);
 8002f5c:	487c      	ldr	r0, [pc, #496]	; (8003150 <schedulerinit+0x2ac>)
 8002f5e:	f002 fcf1 	bl	8005944 <turn_off>
		HAL_Delay(100);
 8002f62:	2064      	movs	r0, #100	; 0x64
 8002f64:	f005 faf6 	bl	8008554 <HAL_Delay>
	}
	if (DEBUG_PRINT == 1) printf("num_dat_file: %hu \n",num_dat_file);
 8002f68:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <schedulerinit+0x2b4>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	487c      	ldr	r0, [pc, #496]	; (8003160 <schedulerinit+0x2bc>)
 8002f70:	f00f f90e 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("num_log_file: %hu \n",num_log_file);
 8002f74:	4b77      	ldr	r3, [pc, #476]	; (8003154 <schedulerinit+0x2b0>)
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	487a      	ldr	r0, [pc, #488]	; (8003164 <schedulerinit+0x2c0>)
 8002f7c:	f00f f908 	bl	8012190 <iprintf>

	num_log_file ++;
 8002f80:	4b74      	ldr	r3, [pc, #464]	; (8003154 <schedulerinit+0x2b0>)
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b72      	ldr	r3, [pc, #456]	; (8003154 <schedulerinit+0x2b0>)
 8002f8a:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 8002f8c:	4b72      	ldr	r3, [pc, #456]	; (8003158 <schedulerinit+0x2b4>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	4b70      	ldr	r3, [pc, #448]	; (8003158 <schedulerinit+0x2b4>)
 8002f96:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 8002f98:	4b6f      	ldr	r3, [pc, #444]	; (8003158 <schedulerinit+0x2b4>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4972      	ldr	r1, [pc, #456]	; (8003168 <schedulerinit+0x2c4>)
 8002fa0:	4872      	ldr	r0, [pc, #456]	; (800316c <schedulerinit+0x2c8>)
 8002fa2:	f00f f985 	bl	80122b0 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",FILE_NAME);
 8002fa6:	4971      	ldr	r1, [pc, #452]	; (800316c <schedulerinit+0x2c8>)
 8002fa8:	4871      	ldr	r0, [pc, #452]	; (8003170 <schedulerinit+0x2cc>)
 8002faa:	f00f f8f1 	bl	8012190 <iprintf>

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 8002fae:	4b69      	ldr	r3, [pc, #420]	; (8003154 <schedulerinit+0x2b0>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	496f      	ldr	r1, [pc, #444]	; (8003174 <schedulerinit+0x2d0>)
 8002fb6:	4870      	ldr	r0, [pc, #448]	; (8003178 <schedulerinit+0x2d4>)
 8002fb8:	f00f f97a 	bl	80122b0 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",LOG_NAME);
 8002fbc:	496e      	ldr	r1, [pc, #440]	; (8003178 <schedulerinit+0x2d4>)
 8002fbe:	486c      	ldr	r0, [pc, #432]	; (8003170 <schedulerinit+0x2cc>)
 8002fc0:	f00f f8e6 	bl	8012190 <iprintf>

	SD_state = init_file(FILE_NAME, LOG_NAME);
 8002fc4:	496c      	ldr	r1, [pc, #432]	; (8003178 <schedulerinit+0x2d4>)
 8002fc6:	4869      	ldr	r0, [pc, #420]	; (800316c <schedulerinit+0x2c8>)
 8002fc8:	f7fe fa90 	bl	80014ec <init_file>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b62      	ldr	r3, [pc, #392]	; (800315c <schedulerinit+0x2b8>)
 8002fd2:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <schedulerinit+0x2b8>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <schedulerinit+0x140>
		turn_off(&SAVE);
 8002fdc:	485a      	ldr	r0, [pc, #360]	; (8003148 <schedulerinit+0x2a4>)
 8002fde:	f002 fcb1 	bl	8005944 <turn_off>
 8002fe2:	e00b      	b.n	8002ffc <schedulerinit+0x158>
	} else {
		turn_on(&RDY);
 8002fe4:	485a      	ldr	r0, [pc, #360]	; (8003150 <schedulerinit+0x2ac>)
 8002fe6:	f002 fc9d 	bl	8005924 <turn_on>
		HAL_Delay(100);
 8002fea:	2064      	movs	r0, #100	; 0x64
 8002fec:	f005 fab2 	bl	8008554 <HAL_Delay>
		turn_off(&RDY);
 8002ff0:	4857      	ldr	r0, [pc, #348]	; (8003150 <schedulerinit+0x2ac>)
 8002ff2:	f002 fca7 	bl	8005944 <turn_off>
		HAL_Delay(100);
 8002ff6:	2064      	movs	r0, #100	; 0x64
 8002ff8:	f005 faac 	bl	8008554 <HAL_Delay>
	}
	turn_on(&RDY);
 8002ffc:	4854      	ldr	r0, [pc, #336]	; (8003150 <schedulerinit+0x2ac>)
 8002ffe:	f002 fc91 	bl	8005924 <turn_on>
	HAL_Delay(1000);
 8003002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003006:	f005 faa5 	bl	8008554 <HAL_Delay>

	bufclear(buffer);
 800300a:	485c      	ldr	r0, [pc, #368]	; (800317c <schedulerinit+0x2d8>)
 800300c:	f7fe f95a 	bl	80012c4 <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 8003010:	f005 fa94 	bl	800853c <HAL_GetTick>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4959      	ldr	r1, [pc, #356]	; (8003180 <schedulerinit+0x2dc>)
 800301a:	4858      	ldr	r0, [pc, #352]	; (800317c <schedulerinit+0x2d8>)
 800301c:	f00f f948 	bl	80122b0 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 8003020:	4956      	ldr	r1, [pc, #344]	; (800317c <schedulerinit+0x2d8>)
 8003022:	4855      	ldr	r0, [pc, #340]	; (8003178 <schedulerinit+0x2d4>)
 8003024:	f7fe fd82 	bl	8001b2c <log_to_SD>

	//coffin_dance(1);
	seven_nation_army();
 8003028:	f7fe ffa0 	bl	8001f6c <seven_nation_army>
	//take_on_me();
	//take_on_me();

	if (FAKE_DATA == 1)
 800302c:	4b55      	ldr	r3, [pc, #340]	; (8003184 <schedulerinit+0x2e0>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d111      	bne.n	8003058 <schedulerinit+0x1b4>
	{
		// read in fake data
		read_from_SD("FDATASS.CSV", TIME, P1, P2, Ax1, Ay1, Az1, Ax2, Ay2, Az2);
 8003034:	4b54      	ldr	r3, [pc, #336]	; (8003188 <schedulerinit+0x2e4>)
 8003036:	9305      	str	r3, [sp, #20]
 8003038:	4b54      	ldr	r3, [pc, #336]	; (800318c <schedulerinit+0x2e8>)
 800303a:	9304      	str	r3, [sp, #16]
 800303c:	4b54      	ldr	r3, [pc, #336]	; (8003190 <schedulerinit+0x2ec>)
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	4b54      	ldr	r3, [pc, #336]	; (8003194 <schedulerinit+0x2f0>)
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	4b54      	ldr	r3, [pc, #336]	; (8003198 <schedulerinit+0x2f4>)
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	4b54      	ldr	r3, [pc, #336]	; (800319c <schedulerinit+0x2f8>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <schedulerinit+0x2fc>)
 800304e:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <schedulerinit+0x300>)
 8003050:	4955      	ldr	r1, [pc, #340]	; (80031a8 <schedulerinit+0x304>)
 8003052:	4856      	ldr	r0, [pc, #344]	; (80031ac <schedulerinit+0x308>)
 8003054:	f7fe fb48 	bl	80016e8 <read_from_SD>
	}

	// selftest

	read_ADC(adc_dat);
 8003058:	4855      	ldr	r0, [pc, #340]	; (80031b0 <schedulerinit+0x30c>)
 800305a:	f7fe f811 	bl	8001080 <read_ADC>
	V_TD1 = adc_dat[0];
 800305e:	4b54      	ldr	r3, [pc, #336]	; (80031b0 <schedulerinit+0x30c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <schedulerinit+0x310>)
 8003064:	6013      	str	r3, [r2, #0]
	V_TD2 = adc_dat[1];
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <schedulerinit+0x30c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a53      	ldr	r2, [pc, #332]	; (80031b8 <schedulerinit+0x314>)
 800306c:	6013      	str	r3, [r2, #0]
	V_LDR = adc_dat[2];
 800306e:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <schedulerinit+0x30c>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4a52      	ldr	r2, [pc, #328]	; (80031bc <schedulerinit+0x318>)
 8003074:	6013      	str	r3, [r2, #0]
	I_BAT1 = adc_dat[3];
 8003076:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <schedulerinit+0x30c>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	4a51      	ldr	r2, [pc, #324]	; (80031c0 <schedulerinit+0x31c>)
 800307c:	6013      	str	r3, [r2, #0]
	I_BAT2 = adc_dat[4];
 800307e:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <schedulerinit+0x30c>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	4a50      	ldr	r2, [pc, #320]	; (80031c4 <schedulerinit+0x320>)
 8003084:	6013      	str	r3, [r2, #0]
	V_BAT1 = adc_dat[5];
 8003086:	4b4a      	ldr	r3, [pc, #296]	; (80031b0 <schedulerinit+0x30c>)
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4a4f      	ldr	r2, [pc, #316]	; (80031c8 <schedulerinit+0x324>)
 800308c:	6013      	str	r3, [r2, #0]
	V_BAT2 = adc_dat[6];
 800308e:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <schedulerinit+0x30c>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4a4e      	ldr	r2, [pc, #312]	; (80031cc <schedulerinit+0x328>)
 8003094:	6013      	str	r3, [r2, #0]
	t_cpu = adc_dat[7];
 8003096:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <schedulerinit+0x30c>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4a4d      	ldr	r2, [pc, #308]	; (80031d0 <schedulerinit+0x32c>)
 800309c:	6013      	str	r3, [r2, #0]

	selftest(V_TD1, V_TD2, V_BAT1, V_BAT2, V_LDR);
 800309e:	4b45      	ldr	r3, [pc, #276]	; (80031b4 <schedulerinit+0x310>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <schedulerinit+0x314>)
 80030a6:	ed93 7a00 	vldr	s14, [r3]
 80030aa:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <schedulerinit+0x324>)
 80030ac:	edd3 6a00 	vldr	s13, [r3]
 80030b0:	4b46      	ldr	r3, [pc, #280]	; (80031cc <schedulerinit+0x328>)
 80030b2:	ed93 6a00 	vldr	s12, [r3]
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <schedulerinit+0x318>)
 80030b8:	edd3 5a00 	vldr	s11, [r3]
 80030bc:	eeb0 2a65 	vmov.f32	s4, s11
 80030c0:	eef0 1a46 	vmov.f32	s3, s12
 80030c4:	eeb0 1a66 	vmov.f32	s2, s13
 80030c8:	eef0 0a47 	vmov.f32	s1, s14
 80030cc:	eeb0 0a67 	vmov.f32	s0, s15
 80030d0:	f001 fc04 	bl	80048dc <selftest>

	// initialize state estimation with environment values

	float ground_pressure = 0;
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
	float ground_temperature = 0;
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	603b      	str	r3, [r7, #0]

	config_baro(&TEMP, &BARO1, &BARO2, &ground_temperature, &ground_pressure);
 80030e0:	463a      	mov	r2, r7
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	4a11      	ldr	r2, [pc, #68]	; (8003130 <schedulerinit+0x28c>)
 80030ea:	4910      	ldr	r1, [pc, #64]	; (800312c <schedulerinit+0x288>)
 80030ec:	4811      	ldr	r0, [pc, #68]	; (8003134 <schedulerinit+0x290>)
 80030ee:	f001 f98f 	bl	8004410 <config_baro>
	config_imu(&IMU1, &IMU2);
 80030f2:	4912      	ldr	r1, [pc, #72]	; (800313c <schedulerinit+0x298>)
 80030f4:	4810      	ldr	r0, [pc, #64]	; (8003138 <schedulerinit+0x294>)
 80030f6:	f001 fafd 	bl	80046f4 <config_imu>

	if (FAKE_DATA == 1){
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <schedulerinit+0x2e0>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d105      	bne.n	800310e <schedulerinit+0x26a>
		ground_pressure = 84941.75;
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <schedulerinit+0x330>)
 8003104:	607b      	str	r3, [r7, #4]
		ground_pressure = 78874.20;
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <schedulerinit+0x334>)
 8003108:	607b      	str	r3, [r7, #4]
		ground_temperature = 20;
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <schedulerinit+0x338>)
 800310c:	603b      	str	r3, [r7, #0]
	}

	reset_state_est_state(ground_pressure, ground_temperature, &state_est_state);
 800310e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003112:	ed97 7a00 	vldr	s14, [r7]
 8003116:	4832      	ldr	r0, [pc, #200]	; (80031e0 <schedulerinit+0x33c>)
 8003118:	eef0 0a47 	vmov.f32	s1, s14
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	f004 fd0e 	bl	8007b40 <reset_state_est_state>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000010c 	.word	0x2000010c
 8003130:	2000012c 	.word	0x2000012c
 8003134:	2000016c 	.word	0x2000016c
 8003138:	2000014c 	.word	0x2000014c
 800313c:	2000015c 	.word	0x2000015c
 8003140:	2000017c 	.word	0x2000017c
 8003144:	200000ec 	.word	0x200000ec
 8003148:	200000f4 	.word	0x200000f4
 800314c:	200000fc 	.word	0x200000fc
 8003150:	20000104 	.word	0x20000104
 8003154:	200003da 	.word	0x200003da
 8003158:	200003d8 	.word	0x200003d8
 800315c:	200003dc 	.word	0x200003dc
 8003160:	08017970 	.word	0x08017970
 8003164:	08017984 	.word	0x08017984
 8003168:	08017998 	.word	0x08017998
 800316c:	2000e008 	.word	0x2000e008
 8003170:	080179a4 	.word	0x080179a4
 8003174:	080179b4 	.word	0x080179b4
 8003178:	20006b30 	.word	0x20006b30
 800317c:	2000cb70 	.word	0x2000cb70
 8003180:	080179c0 	.word	0x080179c0
 8003184:	20000190 	.word	0x20000190
 8003188:	20004b30 	.word	0x20004b30
 800318c:	2000d008 	.word	0x2000d008
 8003190:	20009b60 	.word	0x20009b60
 8003194:	2000bb70 	.word	0x2000bb70
 8003198:	20006b3c 	.word	0x20006b3c
 800319c:	2000ab70 	.word	0x2000ab70
 80031a0:	20008b60 	.word	0x20008b60
 80031a4:	20007b3c 	.word	0x20007b3c
 80031a8:	20005b30 	.word	0x20005b30
 80031ac:	080179dc 	.word	0x080179dc
 80031b0:	2000cfe4 	.word	0x2000cfe4
 80031b4:	20008b50 	.word	0x20008b50
 80031b8:	2000ab60 	.word	0x2000ab60
 80031bc:	2000cf74 	.word	0x2000cf74
 80031c0:	2000ab64 	.word	0x2000ab64
 80031c4:	2000cf90 	.word	0x2000cf90
 80031c8:	2000cfb0 	.word	0x2000cfb0
 80031cc:	2000ab6c 	.word	0x2000ab6c
 80031d0:	20004b28 	.word	0x20004b28
 80031d4:	47a5e6e0 	.word	0x47a5e6e0
 80031d8:	479a0d1a 	.word	0x479a0d1a
 80031dc:	41a00000 	.word	0x41a00000
 80031e0:	200003e8 	.word	0x200003e8

080031e4 <scheduler>:

void scheduler (){
 80031e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e8:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80031ec:	af44      	add	r7, sp, #272	; 0x110

	tick = HAL_GetTick();
 80031ee:	f005 f9a5 	bl	800853c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <scheduler+0xec>)
 80031f6:	601a      	str	r2, [r3, #0]

	// TASK LED
	if(tick >= getNextExecution(&RDY_TASK)){
 80031f8:	4836      	ldr	r0, [pc, #216]	; (80032d4 <scheduler+0xf0>)
 80031fa:	f000 fe67 	bl	8003ecc <getNextExecution>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b33      	ldr	r3, [pc, #204]	; (80032d0 <scheduler+0xec>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d806      	bhi.n	8003216 <scheduler+0x32>
		RDY_TASK.last_call = tick;
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <scheduler+0xec>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a31      	ldr	r2, [pc, #196]	; (80032d4 <scheduler+0xf0>)
 800320e:	6013      	str	r3, [r2, #0]
		toggle(&RDY);
 8003210:	4831      	ldr	r0, [pc, #196]	; (80032d8 <scheduler+0xf4>)
 8003212:	f002 fb77 	bl	8005904 <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 8003216:	4831      	ldr	r0, [pc, #196]	; (80032dc <scheduler+0xf8>)
 8003218:	f000 fe58 	bl	8003ecc <getNextExecution>
 800321c:	4602      	mov	r2, r0
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <scheduler+0xec>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d806      	bhi.n	8003234 <scheduler+0x50>
		SAVE_TASK.last_call = tick;
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <scheduler+0xec>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <scheduler+0xf8>)
 800322c:	6013      	str	r3, [r2, #0]
		toggle(&SAVE);
 800322e:	482c      	ldr	r0, [pc, #176]	; (80032e0 <scheduler+0xfc>)
 8003230:	f002 fb68 	bl	8005904 <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 8003234:	482b      	ldr	r0, [pc, #172]	; (80032e4 <scheduler+0x100>)
 8003236:	f000 fe49 	bl	8003ecc <getNextExecution>
 800323a:	4602      	mov	r2, r0
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <scheduler+0xec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d806      	bhi.n	8003252 <scheduler+0x6e>
		STAT_TASK.last_call = tick;
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <scheduler+0xec>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <scheduler+0x100>)
 800324a:	6013      	str	r3, [r2, #0]
		toggle(&STAT);
 800324c:	4826      	ldr	r0, [pc, #152]	; (80032e8 <scheduler+0x104>)
 800324e:	f002 fb59 	bl	8005904 <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 8003252:	4826      	ldr	r0, [pc, #152]	; (80032ec <scheduler+0x108>)
 8003254:	f000 fe3a 	bl	8003ecc <getNextExecution>
 8003258:	4602      	mov	r2, r0
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <scheduler+0xec>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d806      	bhi.n	8003270 <scheduler+0x8c>
		PRGM_TASK.last_call = tick;
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <scheduler+0xec>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <scheduler+0x108>)
 8003268:	6013      	str	r3, [r2, #0]
		toggle(&PRGM);
 800326a:	4821      	ldr	r0, [pc, #132]	; (80032f0 <scheduler+0x10c>)
 800326c:	f002 fb4a 	bl	8005904 <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 8003270:	4820      	ldr	r0, [pc, #128]	; (80032f4 <scheduler+0x110>)
 8003272:	f000 fe2b 	bl	8003ecc <getNextExecution>
 8003276:	4602      	mov	r2, r0
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <scheduler+0xec>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d808      	bhi.n	8003292 <scheduler+0xae>
		SHT_TASK.last_call = tick;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <scheduler+0xec>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <scheduler+0x110>)
 8003286:	6013      	str	r3, [r2, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <scheduler+0x114>)
 800328a:	491c      	ldr	r1, [pc, #112]	; (80032fc <scheduler+0x118>)
 800328c:	481c      	ldr	r0, [pc, #112]	; (8003300 <scheduler+0x11c>)
 800328e:	f002 ff67 	bl	8006160 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 8003292:	481c      	ldr	r0, [pc, #112]	; (8003304 <scheduler+0x120>)
 8003294:	f000 fe1a 	bl	8003ecc <getNextExecution>
 8003298:	4602      	mov	r2, r0
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <scheduler+0xec>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d854      	bhi.n	800334c <scheduler+0x168>

		switch(BARO_TASK.stage){
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <scheduler+0x120>)
 80032a4:	7a1b      	ldrb	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <scheduler+0xcc>
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d034      	beq.n	8003318 <scheduler+0x134>
 80032ae:	e04d      	b.n	800334c <scheduler+0x168>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 80032b0:	4915      	ldr	r1, [pc, #84]	; (8003308 <scheduler+0x124>)
 80032b2:	4816      	ldr	r0, [pc, #88]	; (800330c <scheduler+0x128>)
 80032b4:	f002 fc04 	bl	8005ac0 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 80032b8:	4915      	ldr	r1, [pc, #84]	; (8003310 <scheduler+0x12c>)
 80032ba:	4816      	ldr	r0, [pc, #88]	; (8003314 <scheduler+0x130>)
 80032bc:	f002 fc00 	bl	8005ac0 <ms5607_prep_pressure>
				BARO_TASK.last_call = tick;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <scheduler+0xec>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <scheduler+0x120>)
 80032c6:	6013      	str	r3, [r2, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <scheduler+0x120>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	721a      	strb	r2, [r3, #8]
				break;
 80032ce:	e03d      	b.n	800334c <scheduler+0x168>
 80032d0:	2000cf70 	.word	0x2000cf70
 80032d4:	20000088 	.word	0x20000088
 80032d8:	20000104 	.word	0x20000104
 80032dc:	200000a8 	.word	0x200000a8
 80032e0:	200000f4 	.word	0x200000f4
 80032e4:	20000098 	.word	0x20000098
 80032e8:	200000ec 	.word	0x200000ec
 80032ec:	200000b8 	.word	0x200000b8
 80032f0:	200000fc 	.word	0x200000fc
 80032f4:	20000058 	.word	0x20000058
 80032f8:	2000ab68 	.word	0x2000ab68
 80032fc:	2000cfc0 	.word	0x2000cfc0
 8003300:	2000016c 	.word	0x2000016c
 8003304:	20000048 	.word	0x20000048
 8003308:	2000cf8c 	.word	0x2000cf8c
 800330c:	2000010c 	.word	0x2000010c
 8003310:	20004b2c 	.word	0x20004b2c
 8003314:	2000012c 	.word	0x2000012c
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 8003318:	4998      	ldr	r1, [pc, #608]	; (800357c <scheduler+0x398>)
 800331a:	4899      	ldr	r0, [pc, #612]	; (8003580 <scheduler+0x39c>)
 800331c:	f002 fc19 	bl	8005b52 <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 8003320:	4998      	ldr	r1, [pc, #608]	; (8003584 <scheduler+0x3a0>)
 8003322:	4899      	ldr	r0, [pc, #612]	; (8003588 <scheduler+0x3a4>)
 8003324:	f002 fc15 	bl	8005b52 <ms5607_read_pressure>
				BARO_TASK.last_call = tick;
 8003328:	4b98      	ldr	r3, [pc, #608]	; (800358c <scheduler+0x3a8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a98      	ldr	r2, [pc, #608]	; (8003590 <scheduler+0x3ac>)
 800332e:	6013      	str	r3, [r2, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 8003330:	4a98      	ldr	r2, [pc, #608]	; (8003594 <scheduler+0x3b0>)
 8003332:	4999      	ldr	r1, [pc, #612]	; (8003598 <scheduler+0x3b4>)
 8003334:	4892      	ldr	r0, [pc, #584]	; (8003580 <scheduler+0x39c>)
 8003336:	f002 fc57 	bl	8005be8 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 800333a:	4a98      	ldr	r2, [pc, #608]	; (800359c <scheduler+0x3b8>)
 800333c:	4998      	ldr	r1, [pc, #608]	; (80035a0 <scheduler+0x3bc>)
 800333e:	4892      	ldr	r0, [pc, #584]	; (8003588 <scheduler+0x3a4>)
 8003340:	f002 fc52 	bl	8005be8 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 8003344:	4b92      	ldr	r3, [pc, #584]	; (8003590 <scheduler+0x3ac>)
 8003346:	2200      	movs	r2, #0
 8003348:	721a      	strb	r2, [r3, #8]
				break;
 800334a:	bf00      	nop
		}
	}

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 800334c:	4895      	ldr	r0, [pc, #596]	; (80035a4 <scheduler+0x3c0>)
 800334e:	f000 fdbd 	bl	8003ecc <getNextExecution>
 8003352:	4602      	mov	r2, r0
 8003354:	4b8d      	ldr	r3, [pc, #564]	; (800358c <scheduler+0x3a8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d80b      	bhi.n	8003374 <scheduler+0x190>
		IMU_TASK.last_call = tick;
 800335c:	4b8b      	ldr	r3, [pc, #556]	; (800358c <scheduler+0x3a8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a90      	ldr	r2, [pc, #576]	; (80035a4 <scheduler+0x3c0>)
 8003362:	6013      	str	r3, [r2, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 8003364:	4990      	ldr	r1, [pc, #576]	; (80035a8 <scheduler+0x3c4>)
 8003366:	4891      	ldr	r0, [pc, #580]	; (80035ac <scheduler+0x3c8>)
 8003368:	f002 f9f6 	bl	8005758 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 800336c:	4990      	ldr	r1, [pc, #576]	; (80035b0 <scheduler+0x3cc>)
 800336e:	4891      	ldr	r0, [pc, #580]	; (80035b4 <scheduler+0x3d0>)
 8003370:	f002 f9f2 	bl	8005758 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 8003374:	4890      	ldr	r0, [pc, #576]	; (80035b8 <scheduler+0x3d4>)
 8003376:	f000 fda9 	bl	8003ecc <getNextExecution>
 800337a:	4602      	mov	r2, r0
 800337c:	4b83      	ldr	r3, [pc, #524]	; (800358c <scheduler+0x3a8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d80b      	bhi.n	800339c <scheduler+0x1b8>
		ACCEL_TASK.last_call = tick;
 8003384:	4b81      	ldr	r3, [pc, #516]	; (800358c <scheduler+0x3a8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a8b      	ldr	r2, [pc, #556]	; (80035b8 <scheduler+0x3d4>)
 800338a:	6013      	str	r3, [r2, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 800338c:	498b      	ldr	r1, [pc, #556]	; (80035bc <scheduler+0x3d8>)
 800338e:	488c      	ldr	r0, [pc, #560]	; (80035c0 <scheduler+0x3dc>)
 8003390:	f001 fdc2 	bl	8004f18 <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 8003394:	498b      	ldr	r1, [pc, #556]	; (80035c4 <scheduler+0x3e0>)
 8003396:	488a      	ldr	r0, [pc, #552]	; (80035c0 <scheduler+0x3dc>)
 8003398:	f001 feba 	bl	8005110 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 800339c:	488a      	ldr	r0, [pc, #552]	; (80035c8 <scheduler+0x3e4>)
 800339e:	f000 fd95 	bl	8003ecc <getNextExecution>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b79      	ldr	r3, [pc, #484]	; (800358c <scheduler+0x3a8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d826      	bhi.n	80033fa <scheduler+0x216>
		ADC_TASK.last_call = tick;
 80033ac:	4b77      	ldr	r3, [pc, #476]	; (800358c <scheduler+0x3a8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a85      	ldr	r2, [pc, #532]	; (80035c8 <scheduler+0x3e4>)
 80033b2:	6013      	str	r3, [r2, #0]
		read_ADC(adc_dat);
 80033b4:	4885      	ldr	r0, [pc, #532]	; (80035cc <scheduler+0x3e8>)
 80033b6:	f7fd fe63 	bl	8001080 <read_ADC>
		if (DEBUG_PRINT == 1) printf("5 %4.2f V \n", adc_dat[4]);
		if (DEBUG_PRINT == 1) printf("6 %4.2f V \n", adc_dat[5]);
		if (DEBUG_PRINT == 1) printf("7 %4.2f V \n", adc_dat[6]);
		if (DEBUG_PRINT == 1) printf("8 %4.2f C \n", adc_dat[7]);
		*/
		V_TD1 = adc_dat[0];
 80033ba:	4b84      	ldr	r3, [pc, #528]	; (80035cc <scheduler+0x3e8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a84      	ldr	r2, [pc, #528]	; (80035d0 <scheduler+0x3ec>)
 80033c0:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 80033c2:	4b82      	ldr	r3, [pc, #520]	; (80035cc <scheduler+0x3e8>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4a83      	ldr	r2, [pc, #524]	; (80035d4 <scheduler+0x3f0>)
 80033c8:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 80033ca:	4b80      	ldr	r3, [pc, #512]	; (80035cc <scheduler+0x3e8>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4a82      	ldr	r2, [pc, #520]	; (80035d8 <scheduler+0x3f4>)
 80033d0:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 80033d2:	4b7e      	ldr	r3, [pc, #504]	; (80035cc <scheduler+0x3e8>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4a81      	ldr	r2, [pc, #516]	; (80035dc <scheduler+0x3f8>)
 80033d8:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <scheduler+0x3e8>)
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <scheduler+0x3fc>)
 80033e0:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 80033e2:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <scheduler+0x3e8>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4a7f      	ldr	r2, [pc, #508]	; (80035e4 <scheduler+0x400>)
 80033e8:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 80033ea:	4b78      	ldr	r3, [pc, #480]	; (80035cc <scheduler+0x3e8>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	4a7e      	ldr	r2, [pc, #504]	; (80035e8 <scheduler+0x404>)
 80033f0:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <scheduler+0x3e8>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4a7d      	ldr	r2, [pc, #500]	; (80035ec <scheduler+0x408>)
 80033f8:	6013      	str	r3, [r2, #0]
	}

	// TASK STATE ESTIMATION
	if(tick >= getNextExecution(&STATE_EST_TASK)){
 80033fa:	487d      	ldr	r0, [pc, #500]	; (80035f0 <scheduler+0x40c>)
 80033fc:	f000 fd66 	bl	8003ecc <getNextExecution>
 8003400:	4602      	mov	r2, r0
 8003402:	4b62      	ldr	r3, [pc, #392]	; (800358c <scheduler+0x3a8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	f200 8174 	bhi.w	80036f4 <scheduler+0x510>
		STATE_EST_TASK.last_call = tick;
 800340c:	4b5f      	ldr	r3, [pc, #380]	; (800358c <scheduler+0x3a8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a77      	ldr	r2, [pc, #476]	; (80035f0 <scheduler+0x40c>)
 8003412:	6013      	str	r3, [r2, #0]

		if (FAKE_DATA == 1){
 8003414:	4b77      	ldr	r3, [pc, #476]	; (80035f4 <scheduler+0x410>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d162      	bne.n	80034e2 <scheduler+0x2fe>


			// use fake/old data from SD card to overwrite current sensor data
			fake_tick = TIME[counter];
 800341c:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <scheduler+0x414>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a76      	ldr	r2, [pc, #472]	; (80035fc <scheduler+0x418>)
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342e:	ee17 2a90 	vmov	r2, s15
 8003432:	4b73      	ldr	r3, [pc, #460]	; (8003600 <scheduler+0x41c>)
 8003434:	601a      	str	r2, [r3, #0]
			p1 = P1[counter];
 8003436:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <scheduler+0x414>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <scheduler+0x420>)
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a55      	ldr	r2, [pc, #340]	; (8003598 <scheduler+0x3b4>)
 8003444:	6013      	str	r3, [r2, #0]
			p2 = P2[counter];
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <scheduler+0x414>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a6f      	ldr	r2, [pc, #444]	; (8003608 <scheduler+0x424>)
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a53      	ldr	r2, [pc, #332]	; (80035a0 <scheduler+0x3bc>)
 8003454:	6013      	str	r3, [r2, #0]
			accel1_val[1] = Ax1[counter];
 8003456:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <scheduler+0x414>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6c      	ldr	r2, [pc, #432]	; (800360c <scheduler+0x428>)
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <scheduler+0x3c4>)
 8003464:	6053      	str	r3, [r2, #4]
			accel1_val[2] = Ay1[counter];
 8003466:	4b64      	ldr	r3, [pc, #400]	; (80035f8 <scheduler+0x414>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a69      	ldr	r2, [pc, #420]	; (8003610 <scheduler+0x42c>)
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a4d      	ldr	r2, [pc, #308]	; (80035a8 <scheduler+0x3c4>)
 8003474:	6093      	str	r3, [r2, #8]
			accel1_val[3] = Az1[counter];
 8003476:	4b60      	ldr	r3, [pc, #384]	; (80035f8 <scheduler+0x414>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a66      	ldr	r2, [pc, #408]	; (8003614 <scheduler+0x430>)
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a49      	ldr	r2, [pc, #292]	; (80035a8 <scheduler+0x3c4>)
 8003484:	60d3      	str	r3, [r2, #12]
			accel2_val[1] = Ax2[counter];
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <scheduler+0x414>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a63      	ldr	r2, [pc, #396]	; (8003618 <scheduler+0x434>)
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <scheduler+0x3cc>)
 8003494:	6053      	str	r3, [r2, #4]
			accel2_val[2] = Ay2[counter];
 8003496:	4b58      	ldr	r3, [pc, #352]	; (80035f8 <scheduler+0x414>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a60      	ldr	r2, [pc, #384]	; (800361c <scheduler+0x438>)
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a43      	ldr	r2, [pc, #268]	; (80035b0 <scheduler+0x3cc>)
 80034a4:	6093      	str	r3, [r2, #8]
			accel2_val[3] = Az2[counter];
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <scheduler+0x414>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5d      	ldr	r2, [pc, #372]	; (8003620 <scheduler+0x43c>)
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3f      	ldr	r2, [pc, #252]	; (80035b0 <scheduler+0x3cc>)
 80034b4:	60d3      	str	r3, [r2, #12]
			printf("FAKE DATA LINE %ld \n",counter);
 80034b6:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <scheduler+0x414>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	4859      	ldr	r0, [pc, #356]	; (8003624 <scheduler+0x440>)
 80034be:	f00e fe67 	bl	8012190 <iprintf>
			counter ++;
 80034c2:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <scheduler+0x414>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4a4b      	ldr	r2, [pc, #300]	; (80035f8 <scheduler+0x414>)
 80034ca:	6013      	str	r3, [r2, #0]

			// if fake file ends, continue with nominal operation
			if (counter >= FAKE_FILE_LEN){
 80034cc:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <scheduler+0x414>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d4:	d305      	bcc.n	80034e2 <scheduler+0x2fe>
				FAKE_DATA = 0;
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <scheduler+0x410>)
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
				printf("FAKE FILE ENDED \n");
 80034dc:	4852      	ldr	r0, [pc, #328]	; (8003628 <scheduler+0x444>)
 80034de:	f00e fedf 	bl	80122a0 <puts>
			}
		}

		// call state estimation
		if (FAKE_DATA == 0){
 80034e2:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <scheduler+0x410>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <scheduler+0x30e>
			fake_tick = tick;
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <scheduler+0x3a8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a44      	ldr	r2, [pc, #272]	; (8003600 <scheduler+0x41c>)
 80034f0:	6013      	str	r3, [r2, #0]
		}

		// feed in sensor values
		state_est_state.state_est_meas.baro_data[0].pressure = p1;
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <scheduler+0x3b4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a4d      	ldr	r2, [pc, #308]	; (800362c <scheduler+0x448>)
 80034f8:	64d3      	str	r3, [r2, #76]	; 0x4c
		state_est_state.state_est_meas.baro_data[0].temperature = t_p1;
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <scheduler+0x3b0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4b      	ldr	r2, [pc, #300]	; (800362c <scheduler+0x448>)
 8003500:	6513      	str	r3, [r2, #80]	; 0x50
		state_est_state.state_est_meas.baro_data[0].ts = fake_tick;
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <scheduler+0x41c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a49      	ldr	r2, [pc, #292]	; (800362c <scheduler+0x448>)
 8003508:	6553      	str	r3, [r2, #84]	; 0x54

		state_est_state.state_est_meas.imu_data[0].acc_x = -accel1_val[2];
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <scheduler+0x3c4>)
 800350c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003510:	eef1 7a67 	vneg.f32	s15, s15
 8003514:	4b45      	ldr	r3, [pc, #276]	; (800362c <scheduler+0x448>)
 8003516:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		state_est_state.state_est_meas.imu_data[0].ts = fake_tick;
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <scheduler+0x41c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a43      	ldr	r2, [pc, #268]	; (800362c <scheduler+0x448>)
 8003520:	67d3      	str	r3, [r2, #124]	; 0x7c

		state_est_state.state_est_meas.baro_data[1].pressure = p2;
 8003522:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <scheduler+0x3bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a41      	ldr	r2, [pc, #260]	; (800362c <scheduler+0x448>)
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
		state_est_state.state_est_meas.baro_data[1].temperature = t_p2;
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <scheduler+0x3b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3f      	ldr	r2, [pc, #252]	; (800362c <scheduler+0x448>)
 8003530:	65d3      	str	r3, [r2, #92]	; 0x5c
		state_est_state.state_est_meas.baro_data[1].ts = fake_tick;
 8003532:	4b33      	ldr	r3, [pc, #204]	; (8003600 <scheduler+0x41c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a3d      	ldr	r2, [pc, #244]	; (800362c <scheduler+0x448>)
 8003538:	6613      	str	r3, [r2, #96]	; 0x60

		state_est_state.state_est_meas.imu_data[1].acc_x = -accel2_val[2];
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <scheduler+0x3cc>)
 800353c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003540:	eef1 7a67 	vneg.f32	s15, s15
 8003544:	4b39      	ldr	r3, [pc, #228]	; (800362c <scheduler+0x448>)
 8003546:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		state_est_state.state_est_meas.imu_data[1].ts = fake_tick;
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <scheduler+0x41c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a37      	ldr	r2, [pc, #220]	; (800362c <scheduler+0x448>)
 8003550:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		state_est_step(fake_tick, &state_est_state, true);
 8003554:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <scheduler+0x41c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	4934      	ldr	r1, [pc, #208]	; (800362c <scheduler+0x448>)
 800355c:	4618      	mov	r0, r3
 800355e:	f004 fb52 	bl	8007c06 <state_est_step>


		// timer start
		if ((state_est_state.flight_phase_detection.flight_phase == THRUSTING) || (launch_detect(accel1_val, accel2_val) == 1) ){
 8003562:	4b32      	ldr	r3, [pc, #200]	; (800362c <scheduler+0x448>)
 8003564:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003568:	2b03      	cmp	r3, #3
 800356a:	d062      	beq.n	8003632 <scheduler+0x44e>
 800356c:	4910      	ldr	r1, [pc, #64]	; (80035b0 <scheduler+0x3cc>)
 800356e:	480e      	ldr	r0, [pc, #56]	; (80035a8 <scheduler+0x3c4>)
 8003570:	f7ff fbd8 	bl	8002d24 <launch_detect>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	e05a      	b.n	8003630 <scheduler+0x44c>
 800357a:	bf00      	nop
 800357c:	2000cf8c 	.word	0x2000cf8c
 8003580:	2000010c 	.word	0x2000010c
 8003584:	20004b2c 	.word	0x20004b2c
 8003588:	2000012c 	.word	0x2000012c
 800358c:	2000cf70 	.word	0x2000cf70
 8003590:	20000048 	.word	0x20000048
 8003594:	200003d0 	.word	0x200003d0
 8003598:	200003c8 	.word	0x200003c8
 800359c:	200003d4 	.word	0x200003d4
 80035a0:	200003cc 	.word	0x200003cc
 80035a4:	20000394 	.word	0x20000394
 80035a8:	2000cfc8 	.word	0x2000cfc8
 80035ac:	2000014c 	.word	0x2000014c
 80035b0:	2000cf94 	.word	0x2000cf94
 80035b4:	2000015c 	.word	0x2000015c
 80035b8:	200003a4 	.word	0x200003a4
 80035bc:	20008b3c 	.word	0x20008b3c
 80035c0:	2000017c 	.word	0x2000017c
 80035c4:	20008b54 	.word	0x20008b54
 80035c8:	20000068 	.word	0x20000068
 80035cc:	2000cfe4 	.word	0x2000cfe4
 80035d0:	20008b50 	.word	0x20008b50
 80035d4:	2000ab60 	.word	0x2000ab60
 80035d8:	2000cf74 	.word	0x2000cf74
 80035dc:	2000ab64 	.word	0x2000ab64
 80035e0:	2000cf90 	.word	0x2000cf90
 80035e4:	2000cfb0 	.word	0x2000cfb0
 80035e8:	2000ab6c 	.word	0x2000ab6c
 80035ec:	20004b28 	.word	0x20004b28
 80035f0:	20000078 	.word	0x20000078
 80035f4:	20000190 	.word	0x20000190
 80035f8:	2000018c 	.word	0x2000018c
 80035fc:	20005b30 	.word	0x20005b30
 8003600:	2000d004 	.word	0x2000d004
 8003604:	20007b3c 	.word	0x20007b3c
 8003608:	20008b60 	.word	0x20008b60
 800360c:	2000ab70 	.word	0x2000ab70
 8003610:	20006b3c 	.word	0x20006b3c
 8003614:	2000bb70 	.word	0x2000bb70
 8003618:	20009b60 	.word	0x20009b60
 800361c:	2000d008 	.word	0x2000d008
 8003620:	20004b30 	.word	0x20004b30
 8003624:	080179e8 	.word	0x080179e8
 8003628:	08017a00 	.word	0x08017a00
 800362c:	200003e8 	.word	0x200003e8
 8003630:	d10b      	bne.n	800364a <scheduler+0x466>
			start_timer(&mach_timer, &fake_tick);
 8003632:	498d      	ldr	r1, [pc, #564]	; (8003868 <scheduler+0x684>)
 8003634:	488d      	ldr	r0, [pc, #564]	; (800386c <scheduler+0x688>)
 8003636:	f7ff f8e9 	bl	800280c <start_timer>
			start_timer(&fail_safe_timer, &fake_tick);
 800363a:	498b      	ldr	r1, [pc, #556]	; (8003868 <scheduler+0x684>)
 800363c:	488c      	ldr	r0, [pc, #560]	; (8003870 <scheduler+0x68c>)
 800363e:	f7ff f8e5 	bl	800280c <start_timer>
			start_timer(&fail_safe_timer_main, &fake_tick);
 8003642:	4989      	ldr	r1, [pc, #548]	; (8003868 <scheduler+0x684>)
 8003644:	488b      	ldr	r0, [pc, #556]	; (8003874 <scheduler+0x690>)
 8003646:	f7ff f8e1 	bl	800280c <start_timer>
		}

		if ((tick > 30000) && (CHECK_FLAG == 0)){
 800364a:	4b8b      	ldr	r3, [pc, #556]	; (8003878 <scheduler+0x694>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f247 5230 	movw	r2, #30000	; 0x7530
 8003652:	4293      	cmp	r3, r2
 8003654:	d94e      	bls.n	80036f4 <scheduler+0x510>
 8003656:	4b89      	ldr	r3, [pc, #548]	; (800387c <scheduler+0x698>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d14a      	bne.n	80036f4 <scheduler+0x510>

			// Perform sanity check of state estimation 30 seconds after bootup!
			// this is in steady state on the launchpad

			float check_a = -accel1_val[2];
 800365e:	4b88      	ldr	r3, [pc, #544]	; (8003880 <scheduler+0x69c>)
 8003660:	edd3 7a02 	vldr	s15, [r3, #8]
 8003664:	eef1 7a67 	vneg.f32	s15, s15
 8003668:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
			float check_h = state_est_state.state_est_data.position_world[2] / 1000;
 800366c:	4b85      	ldr	r3, [pc, #532]	; (8003884 <scheduler+0x6a0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a85      	ldr	r2, [pc, #532]	; (8003888 <scheduler+0x6a4>)
 8003672:	fb82 1203 	smull	r1, r2, r2, r3
 8003676:	1192      	asrs	r2, r2, #6
 8003678:	17db      	asrs	r3, r3, #31
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003684:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
			float check_v = state_est_state.state_est_data.velocity_rocket[0] / 1000;
 8003688:	4b7e      	ldr	r3, [pc, #504]	; (8003884 <scheduler+0x6a0>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a7e      	ldr	r2, [pc, #504]	; (8003888 <scheduler+0x6a4>)
 800368e:	fb82 1203 	smull	r1, r2, r2, r3
 8003692:	1192      	asrs	r2, r2, #6
 8003694:	17db      	asrs	r3, r3, #31
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a0:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 80036a4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80036a8:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80036ac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fe2b 	bl	800430c <state_est_sanity_check>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <scheduler+0x4de>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
 80036bc:	4873      	ldr	r0, [pc, #460]	; (800388c <scheduler+0x6a8>)
 80036be:	f00e fdef 	bl	80122a0 <puts>
			}

			check_a = -accel2_val[2];
 80036c2:	4b73      	ldr	r3, [pc, #460]	; (8003890 <scheduler+0x6ac>)
 80036c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 80036d0:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80036d4:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80036d8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fe15 	bl	800430c <state_est_sanity_check>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <scheduler+0x50a>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
 80036e8:	4868      	ldr	r0, [pc, #416]	; (800388c <scheduler+0x6a8>)
 80036ea:	f00e fdd9 	bl	80122a0 <puts>
			}
			CHECK_FLAG = 1;
 80036ee:	4b63      	ldr	r3, [pc, #396]	; (800387c <scheduler+0x698>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]

	}


	// if mach timer has passed, software arm the system
	if (check_timer(&mach_timer, &fake_tick) == 1) armed = 1;
 80036f4:	495c      	ldr	r1, [pc, #368]	; (8003868 <scheduler+0x684>)
 80036f6:	485d      	ldr	r0, [pc, #372]	; (800386c <scheduler+0x688>)
 80036f8:	f7ff f8a1 	bl	800283e <check_timer>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d102      	bne.n	8003708 <scheduler+0x524>
 8003702:	4b64      	ldr	r3, [pc, #400]	; (8003894 <scheduler+0x6b0>)
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer, &fake_tick) == 1) {
 8003708:	4957      	ldr	r1, [pc, #348]	; (8003868 <scheduler+0x684>)
 800370a:	4859      	ldr	r0, [pc, #356]	; (8003870 <scheduler+0x68c>)
 800370c:	f7ff f897 	bl	800283e <check_timer>
 8003710:	4603      	mov	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10b      	bne.n	800372e <scheduler+0x54a>
		if (state_est_state.flight_phase_detection.flight_phase < DROGUE_DESCENT){
 8003716:	4b5b      	ldr	r3, [pc, #364]	; (8003884 <scheduler+0x6a0>)
 8003718:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800371c:	2b07      	cmp	r3, #7
 800371e:	d806      	bhi.n	800372e <scheduler+0x54a>
			// TODO: ask maxi if is okay to override the flight phase
			// if the main fail_safe_timer for some reason ends before we're in DESCENT mode
			state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
 8003720:	4b58      	ldr	r3, [pc, #352]	; (8003884 <scheduler+0x6a0>)
 8003722:	2208      	movs	r2, #8
 8003724:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			printf("TIMER FS OVERWRITING WITH DROGUE\n");
 8003728:	485b      	ldr	r0, [pc, #364]	; (8003898 <scheduler+0x6b4>)
 800372a:	f00e fdb9 	bl	80122a0 <puts>
		}
	}

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer_main, &fake_tick) == 1) {
 800372e:	494e      	ldr	r1, [pc, #312]	; (8003868 <scheduler+0x684>)
 8003730:	4850      	ldr	r0, [pc, #320]	; (8003874 <scheduler+0x690>)
 8003732:	f7ff f884 	bl	800283e <check_timer>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d11b      	bne.n	8003774 <scheduler+0x590>
		if (state_est_state.flight_phase_detection.flight_phase < DROGUE_DESCENT){
 800373c:	4b51      	ldr	r3, [pc, #324]	; (8003884 <scheduler+0x6a0>)
 800373e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003742:	2b07      	cmp	r3, #7
 8003744:	d80a      	bhi.n	800375c <scheduler+0x578>
			// TODO: ask maxi if is okay to override the flight phase
			// if the main fail_safe_timer for some reason ends before we're in DESCENT mode
			state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
 8003746:	4b4f      	ldr	r3, [pc, #316]	; (8003884 <scheduler+0x6a0>)
 8003748:	2208      	movs	r2, #8
 800374a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			printf("TIMER OVERWRITING WITH DROGUE\n");
 800374e:	4853      	ldr	r0, [pc, #332]	; (800389c <scheduler+0x6b8>)
 8003750:	f00e fda6 	bl	80122a0 <puts>
			fail_safe_timer_main.active = 1;
 8003754:	4b47      	ldr	r3, [pc, #284]	; (8003874 <scheduler+0x690>)
 8003756:	2201      	movs	r2, #1
 8003758:	721a      	strb	r2, [r3, #8]
 800375a:	e00b      	b.n	8003774 <scheduler+0x590>
		} else if (state_est_state.flight_phase_detection.flight_phase >= DROGUE_DESCENT) {
 800375c:	4b49      	ldr	r3, [pc, #292]	; (8003884 <scheduler+0x6a0>)
 800375e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003762:	2b07      	cmp	r3, #7
 8003764:	d906      	bls.n	8003774 <scheduler+0x590>
			// after main fail safe timer ends, we jump into RECOVERY mode an initiate main deploy
			// this happens for example if the barometer values are invalid during descent
			state_est_state.flight_phase_detection.flight_phase = MAIN_DESCENT;
 8003766:	4b47      	ldr	r3, [pc, #284]	; (8003884 <scheduler+0x6a0>)
 8003768:	220a      	movs	r2, #10
 800376a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			printf("TIMER OVERWRITING WITH DROGUE\n");
 800376e:	484b      	ldr	r0, [pc, #300]	; (800389c <scheduler+0x6b8>)
 8003770:	f00e fd96 	bl	80122a0 <puts>
		}
	}


	// act according to flight phase
	switch(state_est_state.flight_phase_detection.flight_phase){
 8003774:	4b43      	ldr	r3, [pc, #268]	; (8003884 <scheduler+0x6a0>)
 8003776:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800377a:	3b01      	subs	r3, #1
 800377c:	2b0a      	cmp	r3, #10
 800377e:	f200 80a6 	bhi.w	80038ce <scheduler+0x6ea>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <scheduler+0x5a4>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080038cf 	.word	0x080038cf
 800378c:	080038cf 	.word	0x080038cf
 8003790:	080038cf 	.word	0x080038cf
 8003794:	080038cf 	.word	0x080038cf
 8003798:	080038cf 	.word	0x080038cf
 800379c:	080038cf 	.word	0x080038cf
 80037a0:	080038cf 	.word	0x080038cf
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037c3 	.word	0x080037c3
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	08003839 	.word	0x08003839
			break;
		case APOGEE_APPROACH:
			break;
		case DROGUE_DESCENT:
			// apogee
			fire_HAWKs(&armed);
 80037b4:	4837      	ldr	r0, [pc, #220]	; (8003894 <scheduler+0x6b0>)
 80037b6:	f7fd fbf3 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 80037ba:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <scheduler+0x6bc>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
			break;
 80037c0:	e085      	b.n	80038ce <scheduler+0x6ea>
		case BALLISTIC_DESCENT:
			// oh-oh...
			fire_HAWKs(&armed);
 80037c2:	4834      	ldr	r0, [pc, #208]	; (8003894 <scheduler+0x6b0>)
 80037c4:	f7fd fbec 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 80037c8:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <scheduler+0x6bc>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
			//state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
			break;
 80037ce:	e07e      	b.n	80038ce <scheduler+0x6ea>
		case MAIN_DESCENT:
			// second event
			if (TD_fired == 0){
 80037d0:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <scheduler+0x6c0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <scheduler+0x608>
				fire_TDs(&armed);
 80037d8:	482e      	ldr	r0, [pc, #184]	; (8003894 <scheduler+0x6b0>)
 80037da:	f7fd fc11 	bl	8001000 <fire_TDs>
				TD_fired = fake_tick;
 80037de:	4b22      	ldr	r3, [pc, #136]	; (8003868 <scheduler+0x684>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <scheduler+0x6c0>)
 80037e4:	6013      	str	r3, [r2, #0]
				event = TENDER;
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <scheduler+0x6bc>)
 80037e8:	2202      	movs	r2, #2
 80037ea:	701a      	strb	r2, [r3, #0]
			}

			// allow 100ms of high-current through igniters
			// if after 100ms the current is still peaking over 1 Amp, the igniters have fused
			// this might damage the electronics and drain the battery
			if(fake_tick >= TD_fired + 100){
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <scheduler+0x6c0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <scheduler+0x684>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d867      	bhi.n	80038cc <scheduler+0x6e8>
				if ((I_BAT1 >= 1000) || (I_BAT2 >= 1000)){
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <scheduler+0x6c4>)
 80037fe:	edd3 7a00 	vldr	s15, [r3]
 8003802:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80038ac <scheduler+0x6c8>
 8003806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	da0a      	bge.n	8003826 <scheduler+0x642>
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <scheduler+0x6cc>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80038ac <scheduler+0x6c8>
 800381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	da00      	bge.n	8003826 <scheduler+0x642>
					if (DEBUG_PRINT == 1) printf("fused igniters detected!! \n");
					turn_off_TDs();
					event = TENDER_DISABLE;
				}
			}
			break;
 8003824:	e052      	b.n	80038cc <scheduler+0x6e8>
					if (DEBUG_PRINT == 1) printf("fused igniters detected!! \n");
 8003826:	4823      	ldr	r0, [pc, #140]	; (80038b4 <scheduler+0x6d0>)
 8003828:	f00e fd3a 	bl	80122a0 <puts>
					turn_off_TDs();
 800382c:	f7fd fc06 	bl	800103c <turn_off_TDs>
					event = TENDER_DISABLE;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <scheduler+0x6bc>)
 8003832:	2203      	movs	r2, #3
 8003834:	701a      	strb	r2, [r3, #0]
			break;
 8003836:	e049      	b.n	80038cc <scheduler+0x6e8>
		case TOUCHDOWN:
			play(440,100);
 8003838:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80038b8 <scheduler+0x6d4>
 800383c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80038bc <scheduler+0x6d8>
 8003840:	f7fe fb54 	bl	8001eec <play>
			play(659.25,100);
 8003844:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80038b8 <scheduler+0x6d4>
 8003848:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80038c0 <scheduler+0x6dc>
 800384c:	f7fe fb4e 	bl	8001eec <play>
			play(880,200);
 8003850:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80038c4 <scheduler+0x6e0>
 8003854:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80038c8 <scheduler+0x6e4>
 8003858:	f7fe fb48 	bl	8001eec <play>
			HAL_Delay(600);
 800385c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003860:	f004 fe78 	bl	8008554 <HAL_Delay>
			break;
 8003864:	e033      	b.n	80038ce <scheduler+0x6ea>
 8003866:	bf00      	nop
 8003868:	2000d004 	.word	0x2000d004
 800386c:	200000c8 	.word	0x200000c8
 8003870:	200000d4 	.word	0x200000d4
 8003874:	200000e0 	.word	0x200000e0
 8003878:	2000cf70 	.word	0x2000cf70
 800387c:	20000898 	.word	0x20000898
 8003880:	2000cfc8 	.word	0x2000cfc8
 8003884:	200003e8 	.word	0x200003e8
 8003888:	10624dd3 	.word	0x10624dd3
 800388c:	08017a14 	.word	0x08017a14
 8003890:	2000cf94 	.word	0x2000cf94
 8003894:	200003dd 	.word	0x200003dd
 8003898:	08017a40 	.word	0x08017a40
 800389c:	08017a64 	.word	0x08017a64
 80038a0:	200003de 	.word	0x200003de
 80038a4:	2000089c 	.word	0x2000089c
 80038a8:	2000ab64 	.word	0x2000ab64
 80038ac:	447a0000 	.word	0x447a0000
 80038b0:	2000cf90 	.word	0x2000cf90
 80038b4:	08017a84 	.word	0x08017a84
 80038b8:	42c80000 	.word	0x42c80000
 80038bc:	43dc0000 	.word	0x43dc0000
 80038c0:	4424d000 	.word	0x4424d000
 80038c4:	43480000 	.word	0x43480000
 80038c8:	445c0000 	.word	0x445c0000
			break;
 80038cc:	bf00      	nop
	}


	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 80038ce:	489f      	ldr	r0, [pc, #636]	; (8003b4c <scheduler+0x968>)
 80038d0:	f000 fafc 	bl	8003ecc <getNextExecution>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b9e      	ldr	r3, [pc, #632]	; (8003b50 <scheduler+0x96c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	f200 81e2 	bhi.w	8003ca4 <scheduler+0xac0>
		LOG_TASK.last_call = tick;
 80038e0:	4b9b      	ldr	r3, [pc, #620]	; (8003b50 <scheduler+0x96c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a99      	ldr	r2, [pc, #612]	; (8003b4c <scheduler+0x968>)
 80038e6:	6013      	str	r3, [r2, #0]
		flight_phase = state_est_state.flight_phase_detection.flight_phase;
 80038e8:	4b9a      	ldr	r3, [pc, #616]	; (8003b54 <scheduler+0x970>)
 80038ea:	f893 23f4 	ldrb.w	r2, [r3, #1012]	; 0x3f4
 80038ee:	4b9a      	ldr	r3, [pc, #616]	; (8003b58 <scheduler+0x974>)
 80038f0:	701a      	strb	r2, [r3, #0]
		alt = state_est_state.state_est_data.position_world[2] / 1000;
 80038f2:	4b98      	ldr	r3, [pc, #608]	; (8003b54 <scheduler+0x970>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4a99      	ldr	r2, [pc, #612]	; (8003b5c <scheduler+0x978>)
 80038f8:	fb82 1203 	smull	r1, r2, r2, r3
 80038fc:	1192      	asrs	r2, r2, #6
 80038fe:	17db      	asrs	r3, r3, #31
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800390a:	4b95      	ldr	r3, [pc, #596]	; (8003b60 <scheduler+0x97c>)
 800390c:	edc3 7a00 	vstr	s15, [r3]
		velocity = state_est_state.state_est_data.velocity_rocket[0] / 1000;
 8003910:	4b90      	ldr	r3, [pc, #576]	; (8003b54 <scheduler+0x970>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a91      	ldr	r2, [pc, #580]	; (8003b5c <scheduler+0x978>)
 8003916:	fb82 1203 	smull	r1, r2, r2, r3
 800391a:	1192      	asrs	r2, r2, #6
 800391c:	17db      	asrs	r3, r3, #31
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	ee07 3a90 	vmov	s15, r3
 8003924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003928:	4b8e      	ldr	r3, [pc, #568]	; (8003b64 <scheduler+0x980>)
 800392a:	edc3 7a00 	vstr	s15, [r3]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800392e:	4b8e      	ldr	r3, [pc, #568]	; (8003b68 <scheduler+0x984>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003936:	4b8d      	ldr	r3, [pc, #564]	; (8003b6c <scheduler+0x988>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800393e:	4b8c      	ldr	r3, [pc, #560]	; (8003b70 <scheduler+0x98c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003946:	4b84      	ldr	r3, [pc, #528]	; (8003b58 <scheduler+0x974>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800394e:	4b84      	ldr	r3, [pc, #528]	; (8003b60 <scheduler+0x97c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fdf8 	bl	8000548 <__aeabi_f2d>
 8003958:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <scheduler+0x980>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fdf1 	bl	8000548 <__aeabi_f2d>
 8003966:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800396a:	4b82      	ldr	r3, [pc, #520]	; (8003b74 <scheduler+0x990>)
 800396c:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fdea 	bl	8000548 <__aeabi_f2d>
 8003974:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003978:	4b7e      	ldr	r3, [pc, #504]	; (8003b74 <scheduler+0x990>)
 800397a:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fde3 	bl	8000548 <__aeabi_f2d>
 8003982:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 8003986:	4b7c      	ldr	r3, [pc, #496]	; (8003b78 <scheduler+0x994>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fddc 	bl	8000548 <__aeabi_f2d>
 8003990:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8003994:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <scheduler+0x998>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fdd5 	bl	8000548 <__aeabi_f2d>
 800399e:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 80039a2:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <scheduler+0x99c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fdce 	bl	8000548 <__aeabi_f2d>
 80039ac:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80039b0:	4b74      	ldr	r3, [pc, #464]	; (8003b84 <scheduler+0x9a0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fdc7 	bl	8000548 <__aeabi_f2d>
 80039ba:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80039be:	4b72      	ldr	r3, [pc, #456]	; (8003b88 <scheduler+0x9a4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fdc0 	bl	8000548 <__aeabi_f2d>
 80039c8:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 80039cc:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <scheduler+0x9a8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fdb9 	bl	8000548 <__aeabi_f2d>
 80039d6:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 80039da:	4b6d      	ldr	r3, [pc, #436]	; (8003b90 <scheduler+0x9ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fdb2 	bl	8000548 <__aeabi_f2d>
 80039e4:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80039e8:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <scheduler+0x9a0>)
 80039ea:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fc fdab 	bl	8000548 <__aeabi_f2d>
 80039f2:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <scheduler+0x9a0>)
 80039f8:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fda4 	bl	8000548 <__aeabi_f2d>
 8003a00:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a04:	4b5f      	ldr	r3, [pc, #380]	; (8003b84 <scheduler+0x9a0>)
 8003a06:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fd9d 	bl	8000548 <__aeabi_f2d>
 8003a0e:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a12:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <scheduler+0x9a0>)
 8003a14:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fd96 	bl	8000548 <__aeabi_f2d>
 8003a1c:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a20:	4b58      	ldr	r3, [pc, #352]	; (8003b84 <scheduler+0x9a0>)
 8003a22:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fc fd8f 	bl	8000548 <__aeabi_f2d>
 8003a2a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a2e:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <scheduler+0x9a0>)
 8003a30:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fd88 	bl	8000548 <__aeabi_f2d>
 8003a38:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a3c:	4b52      	ldr	r3, [pc, #328]	; (8003b88 <scheduler+0x9a4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd81 	bl	8000548 <__aeabi_f2d>
 8003a46:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <scheduler+0x9a4>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fd7a 	bl	8000548 <__aeabi_f2d>
 8003a54:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a58:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <scheduler+0x9a4>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc fd73 	bl	8000548 <__aeabi_f2d>
 8003a62:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a66:	4b48      	ldr	r3, [pc, #288]	; (8003b88 <scheduler+0x9a4>)
 8003a68:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fd6c 	bl	8000548 <__aeabi_f2d>
 8003a70:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a74:	4b44      	ldr	r3, [pc, #272]	; (8003b88 <scheduler+0x9a4>)
 8003a76:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fc fd65 	bl	8000548 <__aeabi_f2d>
 8003a7e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <scheduler+0x9a4>)
 8003a84:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fc fd5e 	bl	8000548 <__aeabi_f2d>
 8003a8c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a90:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <scheduler+0x9b0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fc fd57 	bl	8000548 <__aeabi_f2d>
 8003a9a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <scheduler+0x9b0>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc fd50 	bl	8000548 <__aeabi_f2d>
 8003aa8:	e9c7 0108 	strd	r0, r1, [r7, #32]
				fake_tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003aac:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <scheduler+0x9b0>)
 8003aae:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fc fd49 	bl	8000548 <__aeabi_f2d>
 8003ab6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <scheduler+0x9b4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fd42 	bl	8000548 <__aeabi_f2d>
 8003ac4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003ac8:	4b34      	ldr	r3, [pc, #208]	; (8003b9c <scheduler+0x9b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fd3b 	bl	8000548 <__aeabi_f2d>
 8003ad2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003ad6:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <scheduler+0x9bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fd34 	bl	8000548 <__aeabi_f2d>
 8003ae0:	e9c7 0100 	strd	r0, r1, [r7]
 8003ae4:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <scheduler+0x9c0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fd2d 	bl	8000548 <__aeabi_f2d>
 8003aee:	4682      	mov	sl, r0
 8003af0:	468b      	mov	fp, r1
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <scheduler+0x9c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd26 	bl	8000548 <__aeabi_f2d>
 8003afc:	4680      	mov	r8, r0
 8003afe:	4689      	mov	r9, r1
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <scheduler+0x9c8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc fd1f 	bl	8000548 <__aeabi_f2d>
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	460e      	mov	r6, r1
 8003b0e:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <scheduler+0x9cc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fd18 	bl	8000548 <__aeabi_f2d>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	e9cd 3442 	strd	r3, r4, [sp, #264]	; 0x108
 8003b20:	e9cd 5640 	strd	r5, r6, [sp, #256]	; 0x100
 8003b24:	e9cd 893e 	strd	r8, r9, [sp, #248]	; 0xf8
 8003b28:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 8003b2c:	ed97 7b00 	vldr	d7, [r7]
 8003b30:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 8003b34:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b38:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8003b3c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003b40:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 8003b44:	ed97 7b06 	vldr	d7, [r7, #24]
 8003b48:	e034      	b.n	8003bb4 <scheduler+0x9d0>
 8003b4a:	bf00      	nop
 8003b4c:	200003b4 	.word	0x200003b4
 8003b50:	2000cf70 	.word	0x2000cf70
 8003b54:	200003e8 	.word	0x200003e8
 8003b58:	200003df 	.word	0x200003df
 8003b5c:	10624dd3 	.word	0x10624dd3
 8003b60:	200003e0 	.word	0x200003e0
 8003b64:	200003e4 	.word	0x200003e4
 8003b68:	2000d004 	.word	0x2000d004
 8003b6c:	200003dd 	.word	0x200003dd
 8003b70:	200003de 	.word	0x200003de
 8003b74:	2000cfc0 	.word	0x2000cfc0
 8003b78:	20004b28 	.word	0x20004b28
 8003b7c:	200003d0 	.word	0x200003d0
 8003b80:	200003d4 	.word	0x200003d4
 8003b84:	2000cfc8 	.word	0x2000cfc8
 8003b88:	2000cf94 	.word	0x2000cf94
 8003b8c:	200003c8 	.word	0x200003c8
 8003b90:	200003cc 	.word	0x200003cc
 8003b94:	20008b54 	.word	0x20008b54
 8003b98:	2000ab64 	.word	0x2000ab64
 8003b9c:	2000cf90 	.word	0x2000cf90
 8003ba0:	2000cfb0 	.word	0x2000cfb0
 8003ba4:	2000ab6c 	.word	0x2000ab6c
 8003ba8:	2000cf74 	.word	0x2000cf74
 8003bac:	20008b50 	.word	0x20008b50
 8003bb0:	2000ab60 	.word	0x2000ab60
 8003bb4:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8003bb8:	ed97 7b08 	vldr	d7, [r7, #32]
 8003bbc:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 8003bc0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003bc4:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8003bc8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003bcc:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 8003bd0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003bd4:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 8003bd8:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003bdc:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8003be0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003be4:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8003be8:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8003bec:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8003bf0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8003bf4:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8003bf8:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003bfc:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8003c00:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8003c04:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8003c08:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8003c0c:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8003c10:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8003c14:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003c18:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8003c1c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8003c20:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8003c24:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003c28:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8003c2c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003c30:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8003c34:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003c38:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8003c3c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003c40:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8003c44:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003c48:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8003c4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003c50:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8003c54:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003c58:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8003c5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003c60:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8003c64:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003c68:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8003c6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003c70:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8003c74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003c78:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c80:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003c84:	9101      	str	r1, [sp, #4]
 8003c86:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8003c8a:	9100      	str	r1, [sp, #0]
 8003c8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c90:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003c94:	496f      	ldr	r1, [pc, #444]	; (8003e54 <scheduler+0xc70>)
 8003c96:	4870      	ldr	r0, [pc, #448]	; (8003e58 <scheduler+0xc74>)
 8003c98:	f00e fb0a 	bl	80122b0 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 8003c9c:	496e      	ldr	r1, [pc, #440]	; (8003e58 <scheduler+0xc74>)
 8003c9e:	486f      	ldr	r0, [pc, #444]	; (8003e5c <scheduler+0xc78>)
 8003ca0:	f7fd fece 	bl	8001a40 <write_to_SD>
	}

	p_avg = update_mav(p1, p2);
 8003ca4:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <scheduler+0xc7c>)
 8003ca6:	edd3 7a00 	vldr	s15, [r3]
 8003caa:	4b6e      	ldr	r3, [pc, #440]	; (8003e64 <scheduler+0xc80>)
 8003cac:	ed93 7a00 	vldr	s14, [r3]
 8003cb0:	eef0 0a47 	vmov.f32	s1, s14
 8003cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb8:	f000 f918 	bl	8003eec <update_mav>
 8003cbc:	eef0 7a40 	vmov.f32	s15, s0
 8003cc0:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <scheduler+0xc84>)
 8003cc2:	edc3 7a00 	vstr	s15, [r3]
	if (state_est_state.flight_phase_detection.flight_phase >= DROGUE_DESCENT){
 8003cc6:	4b69      	ldr	r3, [pc, #420]	; (8003e6c <scheduler+0xc88>)
 8003cc8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ccc:	2b07      	cmp	r3, #7
 8003cce:	d939      	bls.n	8003d44 <scheduler+0xb60>
		float p_a[1];
		p_a[0] = p_avg;
 8003cd0:	4b65      	ldr	r3, [pc, #404]	; (8003e68 <scheduler+0xc84>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		bool p_ac[1] = {1};
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
		float h[1];

		printf("\n ------ p_a: %4.2f \n",p_a[0]);
 8003cde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc30 	bl	8000548 <__aeabi_f2d>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	460c      	mov	r4, r1
 8003cec:	461a      	mov	r2, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	485f      	ldr	r0, [pc, #380]	; (8003e70 <scheduler+0xc8c>)
 8003cf2:	f00e fa4d 	bl	8012190 <iprintf>

		pressure2altitudeAGL(&state_est_state.env, 1, p_a, p_ac, h);
 8003cf6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8003cfa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003cfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	460b      	mov	r3, r1
 8003d06:	2101      	movs	r1, #1
 8003d08:	485a      	ldr	r0, [pc, #360]	; (8003e74 <scheduler+0xc90>)
 8003d0a:	f003 f96d 	bl	8006fe8 <pressure2altitudeAGL>

		printf("\n ------ h: %4.2f \n",h[0]);
 8003d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc fc18 	bl	8000548 <__aeabi_f2d>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	4855      	ldr	r0, [pc, #340]	; (8003e78 <scheduler+0xc94>)
 8003d22:	f00e fa35 	bl	8012190 <iprintf>
		velocity = get_velocity(h[0]);
 8003d26:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	f000 f92f 	bl	8003f90 <get_velocity>
 8003d32:	eef0 7a40 	vmov.f32	s15, s0
 8003d36:	4b51      	ldr	r3, [pc, #324]	; (8003e7c <scheduler+0xc98>)
 8003d38:	edc3 7a00 	vstr	s15, [r3]
		alt = h[0];
 8003d3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d40:	4a4f      	ldr	r2, [pc, #316]	; (8003e80 <scheduler+0xc9c>)
 8003d42:	6013      	str	r3, [r2, #0]
	}

	if (DEBUG_PRINT == 1) printf("tick: %ld \n",tick);
 8003d44:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <scheduler+0xca0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	484f      	ldr	r0, [pc, #316]	; (8003e88 <scheduler+0xca4>)
 8003d4c:	f00e fa20 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("fake tick: %ld \n",fake_tick);
 8003d50:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <scheduler+0xca8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	484e      	ldr	r0, [pc, #312]	; (8003e90 <scheduler+0xcac>)
 8003d58:	f00e fa1a 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("flight phase : %d \n",flight_phase);
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <scheduler+0xcb0>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	484d      	ldr	r0, [pc, #308]	; (8003e98 <scheduler+0xcb4>)
 8003d64:	f00e fa14 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("armed : %d \n",armed);
 8003d68:	4b4c      	ldr	r3, [pc, #304]	; (8003e9c <scheduler+0xcb8>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	484c      	ldr	r0, [pc, #304]	; (8003ea0 <scheduler+0xcbc>)
 8003d70:	f00e fa0e 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("event : %d \n",event);
 8003d74:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <scheduler+0xcc0>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	484b      	ldr	r0, [pc, #300]	; (8003ea8 <scheduler+0xcc4>)
 8003d7c:	f00e fa08 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("alt: %4.2f \n",alt);
 8003d80:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <scheduler+0xc9c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fbdf 	bl	8000548 <__aeabi_f2d>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4623      	mov	r3, r4
 8003d92:	4846      	ldr	r0, [pc, #280]	; (8003eac <scheduler+0xcc8>)
 8003d94:	f00e f9fc 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("vel: %4.2f \n",velocity);
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <scheduler+0xc98>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fbd3 	bl	8000548 <__aeabi_f2d>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4623      	mov	r3, r4
 8003daa:	4841      	ldr	r0, [pc, #260]	; (8003eb0 <scheduler+0xccc>)
 8003dac:	f00e f9f0 	bl	8012190 <iprintf>
	//if (DEBUG_PRINT == 1) printf("x_est 0: %4.2f \n",state_est_state.kf_state.x_est[0]);
	//if (DEBUG_PRINT == 1) printf("x_est 1: %4.2f \n",state_est_state.kf_state.x_est[1]);
	if (DEBUG_PRINT == 1) printf("velocity world[2]: %4.2f \n",fabs(((float)(state_est_state.state_est_data.velocity_world[2])) / 1000));
 8003db0:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <scheduler+0xc88>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dbc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003eb4 <scheduler+0xcd0>
 8003dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dc4:	eef0 7ae7 	vabs.f32	s15, s15
 8003dc8:	ee17 0a90 	vmov	r0, s15
 8003dcc:	f7fc fbbc 	bl	8000548 <__aeabi_f2d>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	4837      	ldr	r0, [pc, #220]	; (8003eb8 <scheduler+0xcd4>)
 8003dda:	f00e f9d9 	bl	8012190 <iprintf>

	if (DEBUG_PRINT == 1) printf("ax1 = %4.2f \n",state_est_state.state_est_meas.imu_data[0].acc_x);
 8003dde:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <scheduler+0xc88>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fbb0 	bl	8000548 <__aeabi_f2d>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	461a      	mov	r2, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	4832      	ldr	r0, [pc, #200]	; (8003ebc <scheduler+0xcd8>)
 8003df2:	f00e f9cd 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("ax2 = %4.2f \n",state_est_state.state_est_meas.imu_data[1].acc_x);
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <scheduler+0xc88>)
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fba3 	bl	8000548 <__aeabi_f2d>
 8003e02:	4603      	mov	r3, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	461a      	mov	r2, r3
 8003e08:	4623      	mov	r3, r4
 8003e0a:	482d      	ldr	r0, [pc, #180]	; (8003ec0 <scheduler+0xcdc>)
 8003e0c:	f00e f9c0 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("p1 = %4.2f \n",state_est_state.state_est_meas.baro_data[0].pressure);
 8003e10:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <scheduler+0xc88>)
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc fb97 	bl	8000548 <__aeabi_f2d>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4623      	mov	r3, r4
 8003e22:	4828      	ldr	r0, [pc, #160]	; (8003ec4 <scheduler+0xce0>)
 8003e24:	f00e f9b4 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("p2 = %4.2f \n",state_est_state.state_est_meas.baro_data[1].pressure);
 8003e28:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <scheduler+0xc88>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc fb8b 	bl	8000548 <__aeabi_f2d>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	461a      	mov	r2, r3
 8003e38:	4623      	mov	r3, r4
 8003e3a:	4823      	ldr	r0, [pc, #140]	; (8003ec8 <scheduler+0xce4>)
 8003e3c:	f00e f9a8 	bl	8012190 <iprintf>
	//if (DEBUG_PRINT == 1) printf("IMU1 az: %4.2f m/s2 \n", accel1_val[3]);
	//if (DEBUG_PRINT == 1) printf("IMU2 T: %4.2f C \n", accel2_val[0]);
	//if (DEBUG_PRINT == 1) printf("IMU2 ax: %4.2f m/s2 \n", accel2_val[1]);
	//if (DEBUG_PRINT == 1) printf("IMU2 ay: %4.2f m/s2 \n", accel2_val[2]);
	//if (DEBUG_PRINT == 1) printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
	printf("\n");
 8003e40:	200a      	movs	r0, #10
 8003e42:	f00e f9bd 	bl	80121c0 <putchar>
	//if (DEBUG_PRINT == 1) printf("ACC ax: %4.2f m/s2 \n", accel[0]);
	//if (DEBUG_PRINT == 1) printf("ACC ay: %4.2f m/s2 \n", accel[1]);
	//if (DEBUG_PRINT == 1) printf("ACC az: %4.2f m/s2 \n", accel[2]);


}
 8003e46:	bf00      	nop
 8003e48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e52:	bf00      	nop
 8003e54:	08017aa0 	.word	0x08017aa0
 8003e58:	2000cb70 	.word	0x2000cb70
 8003e5c:	2000e008 	.word	0x2000e008
 8003e60:	200003c8 	.word	0x200003c8
 8003e64:	200003cc 	.word	0x200003cc
 8003e68:	200003c4 	.word	0x200003c4
 8003e6c:	200003e8 	.word	0x200003e8
 8003e70:	08017b98 	.word	0x08017b98
 8003e74:	200007c8 	.word	0x200007c8
 8003e78:	08017bb0 	.word	0x08017bb0
 8003e7c:	200003e4 	.word	0x200003e4
 8003e80:	200003e0 	.word	0x200003e0
 8003e84:	2000cf70 	.word	0x2000cf70
 8003e88:	08017bc4 	.word	0x08017bc4
 8003e8c:	2000d004 	.word	0x2000d004
 8003e90:	08017bd0 	.word	0x08017bd0
 8003e94:	200003df 	.word	0x200003df
 8003e98:	08017be4 	.word	0x08017be4
 8003e9c:	200003dd 	.word	0x200003dd
 8003ea0:	08017bf8 	.word	0x08017bf8
 8003ea4:	200003de 	.word	0x200003de
 8003ea8:	08017c08 	.word	0x08017c08
 8003eac:	08017c18 	.word	0x08017c18
 8003eb0:	08017c28 	.word	0x08017c28
 8003eb4:	447a0000 	.word	0x447a0000
 8003eb8:	08017c38 	.word	0x08017c38
 8003ebc:	08017c54 	.word	0x08017c54
 8003ec0:	08017c64 	.word	0x08017c64
 8003ec4:	08017c74 	.word	0x08017c74
 8003ec8:	08017c84 	.word	0x08017c84

08003ecc <getNextExecution>:

uint32_t getNextExecution(task_t * task){
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4413      	add	r3, r2
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <update_mav>:
#include "state_est_config.h"

float p_array[MAV_LEN];
float h_buffer[5];

float update_mav(float p1, float p2){
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ef6:	edc7 0a00 	vstr	s1, [r7]

	for (uint8_t i=0; i < MAV_LEN - 1; i++){
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
 8003efe:	e00d      	b.n	8003f1c <update_mav+0x30>
		p_array[i] = p_array[i+1];
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	4921      	ldr	r1, [pc, #132]	; (8003f8c <update_mav+0xa0>)
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	440a      	add	r2, r1
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	491f      	ldr	r1, [pc, #124]	; (8003f8c <update_mav+0xa0>)
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	601a      	str	r2, [r3, #0]
	for (uint8_t i=0; i < MAV_LEN - 1; i++){
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d9ee      	bls.n	8003f00 <update_mav+0x14>
	}
	p_array[MAV_LEN-1] = (p1 + p2) / 2;
 8003f22:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f26:	edd7 7a00 	vldr	s15, [r7]
 8003f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <update_mav+0xa0>)
 8003f38:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	float p_sum = 0;
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0; i < MAV_LEN; i++){
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	e00e      	b.n	8003f66 <update_mav+0x7a>
		p_sum += p_array[i];
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <update_mav+0xa0>)
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (uint8_t i=0; i < MAV_LEN; i++){
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	3301      	adds	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	d9ed      	bls.n	8003f48 <update_mav+0x5c>
	}

	return p_sum/MAV_LEN;
 8003f6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f78:	eef0 7a66 	vmov.f32	s15, s13
}
 8003f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	2000e014 	.word	0x2000e014

08003f90 <get_velocity>:

float get_velocity(float h){
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint8_t i = 0; i < 4; i++){
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	e00d      	b.n	8003fbc <get_velocity+0x2c>
		h_buffer[i] = h_buffer[i+1];
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	491a      	ldr	r1, [pc, #104]	; (8004010 <get_velocity+0x80>)
 8003fa8:	0092      	lsls	r2, r2, #2
 8003faa:	440a      	add	r2, r1
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	4918      	ldr	r1, [pc, #96]	; (8004010 <get_velocity+0x80>)
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++){
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d9ee      	bls.n	8003fa0 <get_velocity+0x10>
	}
	h_buffer[4] = h;
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <get_velocity+0x80>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6113      	str	r3, [r2, #16]
	return (h_buffer[4] - h_buffer[0]) / (4 / 1000. * STATE_ESTIMATION_FREQUENCY);
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <get_velocity+0x80>)
 8003fca:	ed93 7a04 	vldr	s14, [r3, #16]
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <get_velocity+0x80>)
 8003fd0:	edd3 7a00 	vldr	s15, [r3]
 8003fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fd8:	ee17 0a90 	vmov	r0, s15
 8003fdc:	f7fc fab4 	bl	8000548 <__aeabi_f2d>
 8003fe0:	a309      	add	r3, pc, #36	; (adr r3, 8004008 <get_velocity+0x78>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc fc31 	bl	800084c <__aeabi_ddiv>
 8003fea:	4603      	mov	r3, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	f7fc fdf9 	bl	8000be8 <__aeabi_d2f>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	ee07 3a90 	vmov	s15, r3
}
 8003ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bd90      	pop	{r4, r7, pc}
 8004006:	bf00      	nop
 8004008:	47ae147b 	.word	0x47ae147b
 800400c:	3fc47ae1 	.word	0x3fc47ae1
 8004010:	2000e03c 	.word	0x2000e03c

08004014 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <MX_SDIO_SD_Init+0x38>)
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <MX_SDIO_SD_Init+0x3c>)
 800401c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <MX_SDIO_SD_Init+0x38>)
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <MX_SDIO_SD_Init+0x38>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <MX_SDIO_SD_Init+0x38>)
 800402c:	2200      	movs	r2, #0
 800402e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <MX_SDIO_SD_Init+0x38>)
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <MX_SDIO_SD_Init+0x38>)
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <MX_SDIO_SD_Init+0x38>)
 800403e:	2203      	movs	r2, #3
 8004040:	619a      	str	r2, [r3, #24]

}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	2000e110 	.word	0x2000e110
 8004050:	40012c00 	.word	0x40012c00

08004054 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a68      	ldr	r2, [pc, #416]	; (8004214 <HAL_SD_MspInit+0x1c0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	f040 80c9 	bne.w	800420a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004078:	2300      	movs	r3, #0
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	4b66      	ldr	r3, [pc, #408]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	4a65      	ldr	r2, [pc, #404]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 8004082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004086:	6453      	str	r3, [r2, #68]	; 0x44
 8004088:	4b63      	ldr	r3, [pc, #396]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4a5e      	ldr	r2, [pc, #376]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6313      	str	r3, [r2, #48]	; 0x30
 80040a4:	4b5c      	ldr	r3, [pc, #368]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	4b58      	ldr	r3, [pc, #352]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	4a57      	ldr	r2, [pc, #348]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 80040ba:	f043 0308 	orr.w	r3, r3, #8
 80040be:	6313      	str	r3, [r2, #48]	; 0x30
 80040c0:	4b55      	ldr	r3, [pc, #340]	; (8004218 <HAL_SD_MspInit+0x1c4>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80040cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80040d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	2302      	movs	r3, #2
 80040d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040da:	2303      	movs	r3, #3
 80040dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80040de:	230c      	movs	r3, #12
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	4619      	mov	r1, r3
 80040e8:	484c      	ldr	r0, [pc, #304]	; (800421c <HAL_SD_MspInit+0x1c8>)
 80040ea:	f005 fbb1 	bl	8009850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040ee:	2304      	movs	r3, #4
 80040f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f2:	2302      	movs	r3, #2
 80040f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fa:	2303      	movs	r3, #3
 80040fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80040fe:	230c      	movs	r3, #12
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	4619      	mov	r1, r3
 8004108:	4845      	ldr	r0, [pc, #276]	; (8004220 <HAL_SD_MspInit+0x1cc>)
 800410a:	f005 fba1 	bl	8009850 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800410e:	4b45      	ldr	r3, [pc, #276]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004110:	4a45      	ldr	r2, [pc, #276]	; (8004228 <HAL_SD_MspInit+0x1d4>)
 8004112:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004114:	4b43      	ldr	r3, [pc, #268]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800411a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800411c:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004122:	4b40      	ldr	r3, [pc, #256]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004128:	4b3e      	ldr	r3, [pc, #248]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 800412a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800412e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004130:	4b3c      	ldr	r3, [pc, #240]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004132:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004136:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004138:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 800413a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800413e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004140:	4b38      	ldr	r3, [pc, #224]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004142:	2220      	movs	r2, #32
 8004144:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004148:	2200      	movs	r2, #0
 800414a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 800414e:	2204      	movs	r2, #4
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004152:	4b34      	ldr	r3, [pc, #208]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004154:	2203      	movs	r2, #3
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 800415a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004160:	4b30      	ldr	r3, [pc, #192]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004162:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004168:	482e      	ldr	r0, [pc, #184]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 800416a:	f004 ff65 	bl	8009038 <HAL_DMA_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8004174:	f7fe fdce 	bl	8002d14 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
 800417e:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_SD_MspInit+0x1d0>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004184:	4b29      	ldr	r3, [pc, #164]	; (800422c <HAL_SD_MspInit+0x1d8>)
 8004186:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <HAL_SD_MspInit+0x1dc>)
 8004188:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_SD_MspInit+0x1d8>)
 800418c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004190:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004192:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_SD_MspInit+0x1d8>)
 8004194:	2240      	movs	r2, #64	; 0x40
 8004196:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_SD_MspInit+0x1d8>)
 800419a:	2200      	movs	r2, #0
 800419c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041a4:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041ac:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041ae:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041b4:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041b8:	2220      	movs	r2, #32
 80041ba:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041be:	2200      	movs	r2, #0
 80041c0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80041c2:	4b1a      	ldr	r3, [pc, #104]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041c4:	2204      	movs	r2, #4
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041c8:	4b18      	ldr	r3, [pc, #96]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041ca:	2203      	movs	r2, #3
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80041de:	4813      	ldr	r0, [pc, #76]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041e0:	f004 ff2a 	bl	8009038 <HAL_DMA_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80041ea:	f7fe fd93 	bl	8002d14 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a0e      	ldr	r2, [pc, #56]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80041f4:	4a0d      	ldr	r2, [pc, #52]	; (800422c <HAL_SD_MspInit+0x1d8>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	2031      	movs	r0, #49	; 0x31
 8004200:	f004 fee3 	bl	8008fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004204:	2031      	movs	r0, #49	; 0x31
 8004206:	f004 fefc 	bl	8009002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800420a:	bf00      	nop
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40023800 	.word	0x40023800
 800421c:	40020800 	.word	0x40020800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	2000e050 	.word	0x2000e050
 8004228:	40026458 	.word	0x40026458
 800422c:	2000e0b0 	.word	0x2000e0b0
 8004230:	400264a0 	.word	0x400264a0

08004234 <p_sanity_check>:
#include <stdlib.h>


// these sanity checks are performed during steady state on the launch pad.

uint8_t p_sanity_check(float * p){
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	// sanity check of the pressure value on the launchpad
	if ((*p < 110000) && (*p > 80000)) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	edd3 7a00 	vldr	s15, [r3]
 8004242:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004278 <p_sanity_check+0x44>
 8004246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	d50b      	bpl.n	8004268 <p_sanity_check+0x34>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	edd3 7a00 	vldr	s15, [r3]
 8004256:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800427c <p_sanity_check+0x48>
 800425a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004262:	dd01      	ble.n	8004268 <p_sanity_check+0x34>
		return 1;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <p_sanity_check+0x36>
	} else {
		return 0;
 8004268:	2300      	movs	r3, #0
	}
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	47d6d800 	.word	0x47d6d800
 800427c:	479c4000 	.word	0x479c4000

08004280 <t_sanity_check>:

uint8_t t_sanity_check(float * t){
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	// sanity check of the temperature value on the launchpad
	if ((*t < 80) && (*t > 1)) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	edd3 7a00 	vldr	s15, [r3]
 800428e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80042c4 <t_sanity_check+0x44>
 8004292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429a:	d50b      	bpl.n	80042b4 <t_sanity_check+0x34>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	edd3 7a00 	vldr	s15, [r3]
 80042a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ae:	dd01      	ble.n	80042b4 <t_sanity_check+0x34>
		return 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <t_sanity_check+0x36>
	} else {
		return 0;
 80042b4:	2300      	movs	r3, #0
	}
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	42a00000 	.word	0x42a00000

080042c8 <a_sanity_check>:

uint8_t a_sanity_check(float * a){
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	// sanity check of the acceleration value on the launchpad
	if ((*a < 10) && (*a > 8)) {
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	edd3 7a00 	vldr	s15, [r3]
 80042d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	d50b      	bpl.n	80042fc <a_sanity_check+0x34>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	edd3 7a00 	vldr	s15, [r3]
 80042ea:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80042ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f6:	dd01      	ble.n	80042fc <a_sanity_check+0x34>
		return 1;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <a_sanity_check+0x36>
	} else {
		return 0;
 80042fc:	2300      	movs	r3, #0
	}
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <state_est_sanity_check>:

uint8_t state_est_sanity_check(float * h, float * a, float * v){
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
	// sanity check of the altitude, velocity and acceleration value on the launchpad
	if (a_sanity_check(a) == 0){
 8004318:	68b8      	ldr	r0, [r7, #8]
 800431a:	f7ff ffd5 	bl	80042c8 <a_sanity_check>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <state_est_sanity_check+0x34>
		if (DEBUG_PRINT == 1) printf("state est accel out of bounds. a = %4.2f \n",*a);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc f90d 	bl	8000548 <__aeabi_f2d>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	461a      	mov	r2, r3
 8004334:	4623      	mov	r3, r4
 8004336:	4831      	ldr	r0, [pc, #196]	; (80043fc <state_est_sanity_check+0xf0>)
 8004338:	f00d ff2a 	bl	8012190 <iprintf>
		return 0;
 800433c:	2300      	movs	r3, #0
 800433e:	e058      	b.n	80043f2 <state_est_sanity_check+0xe6>
	}

	if ((*h > 50) | (*h < -50)) {
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	edd3 7a00 	vldr	s15, [r3]
 8004346:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004400 <state_est_sanity_check+0xf4>
 800434a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	bfcc      	ite	gt
 8004354:	2301      	movgt	r3, #1
 8004356:	2300      	movle	r3, #0
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	edd3 7a00 	vldr	s15, [r3]
 8004360:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004404 <state_est_sanity_check+0xf8>
 8004364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436c:	bf4c      	ite	mi
 800436e:	2301      	movmi	r3, #1
 8004370:	2300      	movpl	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	4313      	orrs	r3, r2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <state_est_sanity_check+0x8c>
		if (DEBUG_PRINT == 1) printf("state est altitude out of bounds. h = %4.2f \n",*h);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc f8e1 	bl	8000548 <__aeabi_f2d>
 8004386:	4603      	mov	r3, r0
 8004388:	460c      	mov	r4, r1
 800438a:	461a      	mov	r2, r3
 800438c:	4623      	mov	r3, r4
 800438e:	481e      	ldr	r0, [pc, #120]	; (8004408 <state_est_sanity_check+0xfc>)
 8004390:	f00d fefe 	bl	8012190 <iprintf>
		return 0;
 8004394:	2300      	movs	r3, #0
 8004396:	e02c      	b.n	80043f2 <state_est_sanity_check+0xe6>
	}

	if ((*v > 10) | (*v < -10)) {
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043aa:	bfcc      	ite	gt
 80043ac:	2301      	movgt	r3, #1
 80043ae:	2300      	movle	r3, #0
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80043bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	bf4c      	ite	mi
 80043c6:	2301      	movmi	r3, #1
 80043c8:	2300      	movpl	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	4313      	orrs	r3, r2
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <state_est_sanity_check+0xe4>
		if (DEBUG_PRINT == 1) printf("state est velocity out of bounds. v = %4.2f \n",*v);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fc f8b5 	bl	8000548 <__aeabi_f2d>
 80043de:	4603      	mov	r3, r0
 80043e0:	460c      	mov	r4, r1
 80043e2:	461a      	mov	r2, r3
 80043e4:	4623      	mov	r3, r4
 80043e6:	4809      	ldr	r0, [pc, #36]	; (800440c <state_est_sanity_check+0x100>)
 80043e8:	f00d fed2 	bl	8012190 <iprintf>
		return 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <state_est_sanity_check+0xe6>
	}

	return 1;
 80043f0:	2301      	movs	r3, #1
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd90      	pop	{r4, r7, pc}
 80043fa:	bf00      	nop
 80043fc:	08017c94 	.word	0x08017c94
 8004400:	42480000 	.word	0x42480000
 8004404:	c2480000 	.word	0xc2480000
 8004408:	08017cc0 	.word	0x08017cc0
 800440c:	08017cf0 	.word	0x08017cf0

08004410 <config_baro>:

uint8_t config_baro(struct sht31_dev * t_dev, struct ms5607_dev * p1_dev, struct ms5607_dev * p2_dev, float * t, float * p){
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b093      	sub	sp, #76	; 0x4c
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]

	float t1_sum = 0;
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	63fb      	str	r3, [r7, #60]	; 0x3c
	float p1_sum = 0;
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	63bb      	str	r3, [r7, #56]	; 0x38
	float t2_sum = 0;
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
	float p2_sum = 0;
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	633b      	str	r3, [r7, #48]	; 0x30
	float p1;
	float p2;
	float t1;
	float t2;
	// sample pressure/temperture 100 times
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8004436:	2300      	movs	r3, #0
 8004438:	647b      	str	r3, [r7, #68]	; 0x44
 800443a:	e053      	b.n	80044e4 <config_baro+0xd4>
	{
		ms5607_prep_pressure(p1_dev, pbuf);
 800443c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004440:	4619      	mov	r1, r3
 8004442:	68b8      	ldr	r0, [r7, #8]
 8004444:	f001 fb3c 	bl	8005ac0 <ms5607_prep_pressure>
		ms5607_prep_pressure(p2_dev, pbuf);
 8004448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f001 fb36 	bl	8005ac0 <ms5607_prep_pressure>
		HAL_Delay(5);
 8004454:	2005      	movs	r0, #5
 8004456:	f004 f87d 	bl	8008554 <HAL_Delay>
		ms5607_read_pressure(p1_dev, pbuf);
 800445a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445e:	4619      	mov	r1, r3
 8004460:	68b8      	ldr	r0, [r7, #8]
 8004462:	f001 fb76 	bl	8005b52 <ms5607_read_pressure>
		ms5607_read_pressure(p2_dev, pbuf);
 8004466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 fb70 	bl	8005b52 <ms5607_read_pressure>
		ms5607_convert(p1_dev, &p1, &t1);
 8004472:	f107 0214 	add.w	r2, r7, #20
 8004476:	f107 031c 	add.w	r3, r7, #28
 800447a:	4619      	mov	r1, r3
 800447c:	68b8      	ldr	r0, [r7, #8]
 800447e:	f001 fbb3 	bl	8005be8 <ms5607_convert>
		ms5607_convert(p2_dev, &p2, &t2);
 8004482:	f107 0210 	add.w	r2, r7, #16
 8004486:	f107 0318 	add.w	r3, r7, #24
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 fbab 	bl	8005be8 <ms5607_convert>
		if (i >= 10) {
 8004492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004494:	2b09      	cmp	r3, #9
 8004496:	dd1f      	ble.n	80044d8 <config_baro+0xc8>
			// ignore the first 10 values to let the barometer "warm" up
			t1_sum += t1;
 8004498:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800449c:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			p1_sum += p1;
 80044a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80044ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80044b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			t2_sum += t2;
 80044b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80044bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80044c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			p2_sum += p2;
 80044c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80044cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80044d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL + 5);
 80044d8:	200f      	movs	r0, #15
 80044da:	f004 f83b 	bl	8008554 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 80044de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e0:	3301      	adds	r3, #1
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
 80044e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e6:	2b6d      	cmp	r3, #109	; 0x6d
 80044e8:	dda8      	ble.n	800443c <config_baro+0x2c>
	}
	p1_sum /= MAX_SETUP_SAMPLE;
 80044ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80044ee:	eddf 6a75 	vldr	s13, [pc, #468]	; 80046c4 <config_baro+0x2b4>
 80044f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	t1_sum /= MAX_SETUP_SAMPLE;
 80044fa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80044fe:	eddf 6a71 	vldr	s13, [pc, #452]	; 80046c4 <config_baro+0x2b4>
 8004502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004506:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	p2_sum /= MAX_SETUP_SAMPLE;
 800450a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800450e:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80046c4 <config_baro+0x2b4>
 8004512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004516:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	t2_sum /= MAX_SETUP_SAMPLE;
 800451a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800451e:	eddf 6a69 	vldr	s13, [pc, #420]	; 80046c4 <config_baro+0x2b4>
 8004522:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004526:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	printf("p1: %4.2f \n", p1_sum);
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc f80b 	bl	8000548 <__aeabi_f2d>
 8004532:	4603      	mov	r3, r0
 8004534:	460c      	mov	r4, r1
 8004536:	461a      	mov	r2, r3
 8004538:	4623      	mov	r3, r4
 800453a:	4863      	ldr	r0, [pc, #396]	; (80046c8 <config_baro+0x2b8>)
 800453c:	f00d fe28 	bl	8012190 <iprintf>
	printf("p2: %4.2f \n", p2_sum);
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc f800 	bl	8000548 <__aeabi_f2d>
 8004548:	4603      	mov	r3, r0
 800454a:	460c      	mov	r4, r1
 800454c:	461a      	mov	r2, r3
 800454e:	4623      	mov	r3, r4
 8004550:	485e      	ldr	r0, [pc, #376]	; (80046cc <config_baro+0x2bc>)
 8004552:	f00d fe1d 	bl	8012190 <iprintf>
	printf("t1: %4.2f \n", t1_sum);
 8004556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004558:	4618      	mov	r0, r3
 800455a:	f7fb fff5 	bl	8000548 <__aeabi_f2d>
 800455e:	4603      	mov	r3, r0
 8004560:	460c      	mov	r4, r1
 8004562:	461a      	mov	r2, r3
 8004564:	4623      	mov	r3, r4
 8004566:	485a      	ldr	r0, [pc, #360]	; (80046d0 <config_baro+0x2c0>)
 8004568:	f00d fe12 	bl	8012190 <iprintf>
	printf("t2: %4.2f \n", t2_sum);
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb ffea 	bl	8000548 <__aeabi_f2d>
 8004574:	4603      	mov	r3, r0
 8004576:	460c      	mov	r4, r1
 8004578:	461a      	mov	r2, r3
 800457a:	4623      	mov	r3, r4
 800457c:	4855      	ldr	r0, [pc, #340]	; (80046d4 <config_baro+0x2c4>)
 800457e:	f00d fe07 	bl	8012190 <iprintf>

	if (!t_sanity_check(&t1_sum)){
 8004582:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe7a 	bl	8004280 <t_sanity_check>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d104      	bne.n	800459c <config_baro+0x18c>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 1 out of bounds. abort. \n");
 8004592:	4851      	ldr	r0, [pc, #324]	; (80046d8 <config_baro+0x2c8>)
 8004594:	f00d fe84 	bl	80122a0 <puts>
		return 0;
 8004598:	2300      	movs	r3, #0
 800459a:	e08f      	b.n	80046bc <config_baro+0x2ac>
	}
	if (!t_sanity_check(&t2_sum)){
 800459c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fe6d 	bl	8004280 <t_sanity_check>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <config_baro+0x1a6>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 2 out of bounds. abort. \n");
 80045ac:	484b      	ldr	r0, [pc, #300]	; (80046dc <config_baro+0x2cc>)
 80045ae:	f00d fe77 	bl	80122a0 <puts>
		return 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e082      	b.n	80046bc <config_baro+0x2ac>
	}
	if (!p_sanity_check(&p1_sum)){
 80045b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fe3a 	bl	8004234 <p_sanity_check>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <config_baro+0x1c0>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 1 out of bounds. abort. \n");
 80045c6:	4846      	ldr	r0, [pc, #280]	; (80046e0 <config_baro+0x2d0>)
 80045c8:	f00d fe6a 	bl	80122a0 <puts>
		return 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e075      	b.n	80046bc <config_baro+0x2ac>
	}
	if (!p_sanity_check(&p2_sum)){
 80045d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fe2d 	bl	8004234 <p_sanity_check>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <config_baro+0x1da>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 2 out of bounds. abort. \n");
 80045e0:	4840      	ldr	r0, [pc, #256]	; (80046e4 <config_baro+0x2d4>)
 80045e2:	f00d fe5d 	bl	80122a0 <puts>
		return 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e068      	b.n	80046bc <config_baro+0x2ac>
	}

	// set as environement parameters
	*t = (t1_sum + t2_sum) / 2;
 80045ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80045ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80045f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80045fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	edc3 7a00 	vstr	s15, [r3]
	*p = (p1_sum + p2_sum) / 2;
 8004604:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004608:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800460c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004610:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461a:	edc3 7a00 	vstr	s15, [r3]


	// sample SHT temperature 100 times

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 800461e:	2300      	movs	r3, #0
 8004620:	643b      	str	r3, [r7, #64]	; 0x40
 8004622:	e018      	b.n	8004656 <config_baro+0x246>
	{
		sht31_read(t_dev, sht_val, buf);
 8004624:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004628:	f107 0320 	add.w	r3, r7, #32
 800462c:	4619      	mov	r1, r3
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f001 fd96 	bl	8006160 <sht31_read>
		// ignore the first 10 measurements to let the SHT "warm" up
		if (i >= 10) t1_sum += sht_val[0];
 8004634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004636:	2b09      	cmp	r3, #9
 8004638:	dd07      	ble.n	800464a <config_baro+0x23a>
 800463a:	ed97 7a08 	vldr	s14, [r7, #32]
 800463e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004646:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 800464a:	200a      	movs	r0, #10
 800464c:	f003 ff82 	bl	8008554 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8004650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004652:	3301      	adds	r3, #1
 8004654:	643b      	str	r3, [r7, #64]	; 0x40
 8004656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004658:	2b6d      	cmp	r3, #109	; 0x6d
 800465a:	dde3      	ble.n	8004624 <config_baro+0x214>
	}
	t1_sum /= MAX_SETUP_SAMPLE;
 800465c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004660:	eddf 6a18 	vldr	s13, [pc, #96]	; 80046c4 <config_baro+0x2b4>
 8004664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004668:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	if (!t_sanity_check(&t1_sum)){
 800466c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fe05 	bl	8004280 <t_sanity_check>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <config_baro+0x274>
		if (DEBUG_PRINT == 1) printf("Temperature of SHT out of bounds. continuing anyway. \n");
 800467c:	481a      	ldr	r0, [pc, #104]	; (80046e8 <config_baro+0x2d8>)
 800467e:	f00d fe0f 	bl	80122a0 <puts>
 8004682:	e002      	b.n	800468a <config_baro+0x27a>
		// if SHT unavailable, take BARO temperature
	} else {
		// if SHT is available, use SHT temperature value for environement
		*t = t1_sum;
 8004684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	601a      	str	r2, [r3, #0]
	}

	if (DEBUG_PRINT == 1) printf("Config pressure = %4.2f \n",*p);
 800468a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb ff5a 	bl	8000548 <__aeabi_f2d>
 8004694:	4603      	mov	r3, r0
 8004696:	460c      	mov	r4, r1
 8004698:	461a      	mov	r2, r3
 800469a:	4623      	mov	r3, r4
 800469c:	4813      	ldr	r0, [pc, #76]	; (80046ec <config_baro+0x2dc>)
 800469e:	f00d fd77 	bl	8012190 <iprintf>
	if (DEBUG_PRINT == 1) printf("Config temp = %4.2f \n",*t);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fb ff4e 	bl	8000548 <__aeabi_f2d>
 80046ac:	4603      	mov	r3, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	461a      	mov	r2, r3
 80046b2:	4623      	mov	r3, r4
 80046b4:	480e      	ldr	r0, [pc, #56]	; (80046f0 <config_baro+0x2e0>)
 80046b6:	f00d fd6b 	bl	8012190 <iprintf>

	return 1;
 80046ba:	2301      	movs	r3, #1
}
 80046bc:	4618      	mov	r0, r3
 80046be:	374c      	adds	r7, #76	; 0x4c
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}
 80046c4:	42c80000 	.word	0x42c80000
 80046c8:	08017d20 	.word	0x08017d20
 80046cc:	08017d2c 	.word	0x08017d2c
 80046d0:	08017d38 	.word	0x08017d38
 80046d4:	08017d44 	.word	0x08017d44
 80046d8:	08017d50 	.word	0x08017d50
 80046dc:	08017d80 	.word	0x08017d80
 80046e0:	08017db0 	.word	0x08017db0
 80046e4:	08017ddc 	.word	0x08017ddc
 80046e8:	08017e08 	.word	0x08017e08
 80046ec:	08017e40 	.word	0x08017e40
 80046f0:	08017e5c 	.word	0x08017e5c

080046f4 <config_imu>:

uint8_t config_imu(struct icm20601_dev * a1_dev, struct icm20601_dev * a2_dev){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b09a      	sub	sp, #104	; 0x68
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
	float a2_temp[7];

	float a1_sum[3];
	float a2_sum[3];

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 80046fe:	2300      	movs	r3, #0
 8004700:	667b      	str	r3, [r7, #100]	; 0x64
 8004702:	e06b      	b.n	80047dc <config_imu+0xe8>
	{
		icm20601_read_data(a1_dev, a1_temp);
 8004704:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f001 f824 	bl	8005758 <icm20601_read_data>
		icm20601_read_data(a2_dev, a2_temp);
 8004710:	f107 0320 	add.w	r3, r7, #32
 8004714:	4619      	mov	r1, r3
 8004716:	6838      	ldr	r0, [r7, #0]
 8004718:	f001 f81e 	bl	8005758 <icm20601_read_data>
		if (i >= 10) {
 800471c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471e:	2b09      	cmp	r3, #9
 8004720:	dd56      	ble.n	80047d0 <config_imu+0xdc>
			// ignore the first 10 measurements to let the accelerometer "warm" up
			for (int j = 1; j < 4; j++){
 8004722:	2301      	movs	r3, #1
 8004724:	663b      	str	r3, [r7, #96]	; 0x60
 8004726:	e050      	b.n	80047ca <config_imu+0xd6>
				a1_sum[j-1] += abs(a1_temp[j]);
 8004728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800472a:	3b01      	subs	r3, #1
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004732:	4413      	add	r3, r2
 8004734:	3b54      	subs	r3, #84	; 0x54
 8004736:	ed93 7a00 	vldr	s14, [r3]
 800473a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004742:	4413      	add	r3, r2
 8004744:	3b2c      	subs	r3, #44	; 0x2c
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800474e:	ee17 3a90 	vmov	r3, s15
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfb8      	it	lt
 8004756:	425b      	neglt	r3, r3
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004762:	3b01      	subs	r3, #1
 8004764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800476e:	4413      	add	r3, r2
 8004770:	3b54      	subs	r3, #84	; 0x54
 8004772:	edc3 7a00 	vstr	s15, [r3]
				a2_sum[j-1] += abs(a2_temp[j]);
 8004776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004778:	3b01      	subs	r3, #1
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004780:	4413      	add	r3, r2
 8004782:	3b60      	subs	r3, #96	; 0x60
 8004784:	ed93 7a00 	vldr	s14, [r3]
 8004788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004790:	4413      	add	r3, r2
 8004792:	3b48      	subs	r3, #72	; 0x48
 8004794:	edd3 7a00 	vldr	s15, [r3]
 8004798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800479c:	ee17 3a90 	vmov	r3, s15
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bfb8      	it	lt
 80047a4:	425b      	neglt	r3, r3
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b0:	3b01      	subs	r3, #1
 80047b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80047bc:	4413      	add	r3, r2
 80047be:	3b60      	subs	r3, #96	; 0x60
 80047c0:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 1; j < 4; j++){
 80047c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c6:	3301      	adds	r3, #1
 80047c8:	663b      	str	r3, [r7, #96]	; 0x60
 80047ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	ddab      	ble.n	8004728 <config_imu+0x34>
			}
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 80047d0:	200a      	movs	r0, #10
 80047d2:	f003 febf 	bl	8008554 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 80047d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d8:	3301      	adds	r3, #1
 80047da:	667b      	str	r3, [r7, #100]	; 0x64
 80047dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047de:	2b6d      	cmp	r3, #109	; 0x6d
 80047e0:	dd90      	ble.n	8004704 <config_imu+0x10>
	}

	// assume rocket is in upright position, config axes accordingly

	uint8_t imu1_state = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t imu2_state = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for (int j = 0; j < 3; j++){
 80047ee:	2300      	movs	r3, #0
 80047f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f2:	e04a      	b.n	800488a <config_imu+0x196>
		a1_sum[j] /= MAX_SETUP_SAMPLE;
 80047f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80047fc:	4413      	add	r3, r2
 80047fe:	3b54      	subs	r3, #84	; 0x54
 8004800:	ed93 7a00 	vldr	s14, [r3]
 8004804:	eddf 6a31 	vldr	s13, [pc, #196]	; 80048cc <config_imu+0x1d8>
 8004808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800480c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004814:	4413      	add	r3, r2
 8004816:	3b54      	subs	r3, #84	; 0x54
 8004818:	edc3 7a00 	vstr	s15, [r3]
		a2_sum[j] /= MAX_SETUP_SAMPLE;
 800481c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004824:	4413      	add	r3, r2
 8004826:	3b60      	subs	r3, #96	; 0x60
 8004828:	ed93 7a00 	vldr	s14, [r3]
 800482c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80048cc <config_imu+0x1d8>
 8004830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800483c:	4413      	add	r3, r2
 800483e:	3b60      	subs	r3, #96	; 0x60
 8004840:	edc3 7a00 	vstr	s15, [r3]
		if (a_sanity_check(&a1_sum[j]) == 1){
 8004844:	f107 0214 	add.w	r2, r7, #20
 8004848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fd3a 	bl	80042c8 <a_sanity_check>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d104      	bne.n	8004864 <config_imu+0x170>
			imu1_state ++;
 800485a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800485e:	3301      	adds	r3, #1
 8004860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (a_sanity_check(&a2_sum[j]) == 1){
 8004864:	f107 0208 	add.w	r2, r7, #8
 8004868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fd2a 	bl	80042c8 <a_sanity_check>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d104      	bne.n	8004884 <config_imu+0x190>
			imu2_state ++;
 800487a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800487e:	3301      	adds	r3, #1
 8004880:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for (int j = 0; j < 3; j++){
 8004884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004886:	3301      	adds	r3, #1
 8004888:	65bb      	str	r3, [r7, #88]	; 0x58
 800488a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800488c:	2b02      	cmp	r3, #2
 800488e:	ddb1      	ble.n	80047f4 <config_imu+0x100>
		}
	}

	if (imu1_state + imu2_state != 2){
 8004890:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004894:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004898:	4413      	add	r3, r2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d010      	beq.n	80048c0 <config_imu+0x1cc>
		if (DEBUG_PRINT == 1) printf("IMU axes out of bounds. abort. \n");
 800489e:	480c      	ldr	r0, [pc, #48]	; (80048d0 <config_imu+0x1dc>)
 80048a0:	f00d fcfe 	bl	80122a0 <puts>
		if (DEBUG_PRINT == 1) printf("IMU1: %d \n", imu1_state);
 80048a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048a8:	4619      	mov	r1, r3
 80048aa:	480a      	ldr	r0, [pc, #40]	; (80048d4 <config_imu+0x1e0>)
 80048ac:	f00d fc70 	bl	8012190 <iprintf>
		if (DEBUG_PRINT == 1) printf("IMU2: %d \n", imu2_state);
 80048b0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80048b4:	4619      	mov	r1, r3
 80048b6:	4808      	ldr	r0, [pc, #32]	; (80048d8 <config_imu+0x1e4>)
 80048b8:	f00d fc6a 	bl	8012190 <iprintf>
		return 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <config_imu+0x1ce>
	}
	return 1;
 80048c0:	2301      	movs	r3, #1
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3768      	adds	r7, #104	; 0x68
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	42c80000 	.word	0x42c80000
 80048d0:	08017e74 	.word	0x08017e74
 80048d4:	08017e94 	.word	0x08017e94
 80048d8:	08017ea0 	.word	0x08017ea0

080048dc <selftest>:

uint8_t selftest(float TD1, float TD2, float BAT1, float BAT2, float LDR){
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80048e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80048ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80048ee:	edc7 1a02 	vstr	s3, [r7, #8]
 80048f2:	ed87 2a01 	vstr	s4, [r7, #4]

	//check TD voltage
	play(440,250);
 80048f6:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80049f4 <selftest+0x118>
 80048fa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80049f8 <selftest+0x11c>
 80048fe:	f7fd faf5 	bl	8001eec <play>
	HAL_Delay(500);
 8004902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004906:	f003 fe25 	bl	8008554 <HAL_Delay>
	if (TD1 < 9) {
 800490a:	edd7 7a05 	vldr	s15, [r7, #20]
 800490e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	d510      	bpl.n	800493e <selftest+0x62>
		play(880,1000);
 800491c:	eddf 0a37 	vldr	s1, [pc, #220]	; 80049fc <selftest+0x120>
 8004920:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004a00 <selftest+0x124>
 8004924:	f7fd fae2 	bl	8001eec <play>
		HAL_Delay(500);
 8004928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800492c:	f003 fe12 	bl	8008554 <HAL_Delay>
		play(880,1000);
 8004930:	eddf 0a32 	vldr	s1, [pc, #200]	; 80049fc <selftest+0x120>
 8004934:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8004a00 <selftest+0x124>
 8004938:	f7fd fad8 	bl	8001eec <play>
 800493c:	e00f      	b.n	800495e <selftest+0x82>
	} else {
		play(440,500);
 800493e:	eddf 0a31 	vldr	s1, [pc, #196]	; 8004a04 <selftest+0x128>
 8004942:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80049f8 <selftest+0x11c>
 8004946:	f7fd fad1 	bl	8001eec <play>
		HAL_Delay(500);
 800494a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800494e:	f003 fe01 	bl	8008554 <HAL_Delay>
		play(880,500);
 8004952:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8004a04 <selftest+0x128>
 8004956:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8004a00 <selftest+0x124>
 800495a:	f7fd fac7 	bl	8001eec <play>
	}

	HAL_Delay(1000);
 800495e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004962:	f003 fdf7 	bl	8008554 <HAL_Delay>

	play(440,250);
 8004966:	eddf 0a23 	vldr	s1, [pc, #140]	; 80049f4 <selftest+0x118>
 800496a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80049f8 <selftest+0x11c>
 800496e:	f7fd fabd 	bl	8001eec <play>
	HAL_Delay(250);
 8004972:	20fa      	movs	r0, #250	; 0xfa
 8004974:	f003 fdee 	bl	8008554 <HAL_Delay>
	play(440,250);
 8004978:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80049f4 <selftest+0x118>
 800497c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80049f8 <selftest+0x11c>
 8004980:	f7fd fab4 	bl	8001eec <play>
	HAL_Delay(500);
 8004984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004988:	f003 fde4 	bl	8008554 <HAL_Delay>
	if (TD2 < 9) {
 800498c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004990:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	d510      	bpl.n	80049c0 <selftest+0xe4>
		play(880,1000);
 800499e:	eddf 0a17 	vldr	s1, [pc, #92]	; 80049fc <selftest+0x120>
 80049a2:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8004a00 <selftest+0x124>
 80049a6:	f7fd faa1 	bl	8001eec <play>
		HAL_Delay(500);
 80049aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049ae:	f003 fdd1 	bl	8008554 <HAL_Delay>
		play(880,1000);
 80049b2:	eddf 0a12 	vldr	s1, [pc, #72]	; 80049fc <selftest+0x120>
 80049b6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8004a00 <selftest+0x124>
 80049ba:	f7fd fa97 	bl	8001eec <play>
 80049be:	e00f      	b.n	80049e0 <selftest+0x104>
	} else {
		play(440,500);
 80049c0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8004a04 <selftest+0x128>
 80049c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80049f8 <selftest+0x11c>
 80049c8:	f7fd fa90 	bl	8001eec <play>
		HAL_Delay(500);
 80049cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049d0:	f003 fdc0 	bl	8008554 <HAL_Delay>
		play(880,500);
 80049d4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004a04 <selftest+0x128>
 80049d8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004a00 <selftest+0x124>
 80049dc:	f7fd fa86 	bl	8001eec <play>
	}

	HAL_Delay(1000);
 80049e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049e4:	f003 fdb6 	bl	8008554 <HAL_Delay>

	//check battery power,
	//check LDR sensor

	return 1;
 80049e8:	2301      	movs	r3, #1
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	437a0000 	.word	0x437a0000
 80049f8:	43dc0000 	.word	0x43dc0000
 80049fc:	447a0000 	.word	0x447a0000
 8004a00:	445c0000 	.word	0x445c0000
 8004a04:	43fa0000 	.word	0x43fa0000

08004a08 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a0e:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <MX_SPI1_Init+0x68>)
 8004a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a32:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a54:	220a      	movs	r2, #10
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a58:	4804      	ldr	r0, [pc, #16]	; (8004a6c <MX_SPI1_Init+0x64>)
 8004a5a:	f008 f8c9 	bl	800cbf0 <HAL_SPI_Init>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004a64:	f7fe f956 	bl	8002d14 <Error_Handler>
  }

}
 8004a68:	bf00      	nop
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2000e1ec 	.word	0x2000e1ec
 8004a70:	40013000 	.word	0x40013000

08004a74 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8004a78:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <MX_SPI2_Init+0x68>)
 8004a7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a8c:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004ac0:	220a      	movs	r2, #10
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004ac4:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <MX_SPI2_Init+0x64>)
 8004ac6:	f008 f893 	bl	800cbf0 <HAL_SPI_Init>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004ad0:	f7fe f920 	bl	8002d14 <Error_Handler>
  }

}
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2000e194 	.word	0x2000e194
 8004adc:	40003800 	.word	0x40003800

08004ae0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae8:	f107 031c 	add.w	r3, r7, #28
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a32      	ldr	r2, [pc, #200]	; (8004bc8 <HAL_SPI_MspInit+0xe8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d12c      	bne.n	8004b5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	4b31      	ldr	r3, [pc, #196]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	4a30      	ldr	r2, [pc, #192]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b10:	6453      	str	r3, [r2, #68]	; 0x44
 8004b12:	4b2e      	ldr	r3, [pc, #184]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2e:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004b3a:	23e0      	movs	r3, #224	; 0xe0
 8004b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b46:	2303      	movs	r3, #3
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b4a:	2305      	movs	r3, #5
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4e:	f107 031c 	add.w	r3, r7, #28
 8004b52:	4619      	mov	r1, r3
 8004b54:	481e      	ldr	r0, [pc, #120]	; (8004bd0 <HAL_SPI_MspInit+0xf0>)
 8004b56:	f004 fe7b 	bl	8009850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004b5a:	e031      	b.n	8004bc0 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_SPI_MspInit+0xf4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d12c      	bne.n	8004bc0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b74:	6413      	str	r3, [r2, #64]	; 0x40
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b8c:	f043 0302 	orr.w	r3, r3, #2
 8004b90:	6313      	str	r3, [r2, #48]	; 0x30
 8004b92:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <HAL_SPI_MspInit+0xec>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004b9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bac:	2303      	movs	r3, #3
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bb0:	2305      	movs	r3, #5
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb4:	f107 031c 	add.w	r3, r7, #28
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4807      	ldr	r0, [pc, #28]	; (8004bd8 <HAL_SPI_MspInit+0xf8>)
 8004bbc:	f004 fe48 	bl	8009850 <HAL_GPIO_Init>
}
 8004bc0:	bf00      	nop
 8004bc2:	3730      	adds	r7, #48	; 0x30
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40013000 	.word	0x40013000
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	40003800 	.word	0x40003800
 8004bd8:	40020400 	.word	0x40020400

08004bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_MspInit+0x4c>)
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	4a0f      	ldr	r2, [pc, #60]	; (8004c28 <HAL_MspInit+0x4c>)
 8004bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_MspInit+0x4c>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_MspInit+0x4c>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <HAL_MspInit+0x4c>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_MspInit+0x4c>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c3e:	e7fe      	b.n	8004c3e <HardFault_Handler+0x4>

08004c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c44:	e7fe      	b.n	8004c44 <MemManage_Handler+0x4>

08004c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c4a:	e7fe      	b.n	8004c4a <BusFault_Handler+0x4>

08004c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c50:	e7fe      	b.n	8004c50 <UsageFault_Handler+0x4>

08004c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c72:	bf00      	nop
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c80:	f003 fc48 	bl	8008514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004c8c:	4802      	ldr	r0, [pc, #8]	; (8004c98 <SDIO_IRQHandler+0x10>)
 8004c8e:	f006 ff1b 	bl	800bac8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2000e110 	.word	0x2000e110

08004c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ca0:	4802      	ldr	r0, [pc, #8]	; (8004cac <DMA2_Stream0_IRQHandler+0x10>)
 8004ca2:	f004 fb61 	bl	8009368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20004a20 	.word	0x20004a20

08004cb0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004cb4:	4802      	ldr	r0, [pc, #8]	; (8004cc0 <DMA2_Stream3_IRQHandler+0x10>)
 8004cb6:	f004 fb57 	bl	8009368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2000e050 	.word	0x2000e050

08004cc4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004cc8:	4802      	ldr	r0, [pc, #8]	; (8004cd4 <DMA2_Stream6_IRQHandler+0x10>)
 8004cca:	f004 fb4d 	bl	8009368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	2000e0b0 	.word	0x2000e0b0

08004cd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004ce0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ce4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004cf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004cf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004cf8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004d00:	e000      	b.n	8004d04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004d02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004d04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f9      	beq.n	8004d02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004d0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004d18:	687b      	ldr	r3, [r7, #4]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e00a      	b.n	8004d4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d38:	f3af 8000 	nop.w
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	60ba      	str	r2, [r7, #8]
 8004d44:	b2ca      	uxtb	r2, r1
 8004d46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	dbf0      	blt.n	8004d38 <_read+0x12>
	}

return len;
 8004d56:	687b      	ldr	r3, [r7, #4]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e009      	b.n	8004d86 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	60ba      	str	r2, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ffac 	bl	8004cd8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3301      	adds	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	dbf1      	blt.n	8004d72 <_write+0x12>
	}
	return len;
 8004d8e:	687b      	ldr	r3, [r7, #4]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <_close>:

int _close(int file)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	return -1;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dc0:	605a      	str	r2, [r3, #4]
	return 0;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <_isatty>:

int _isatty(int file)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	return 1;
 8004dd8:	2301      	movs	r3, #1
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
	return 0;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <_sbrk+0x50>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <_sbrk+0x16>
		heap_end = &end;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <_sbrk+0x50>)
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <_sbrk+0x54>)
 8004e14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <_sbrk+0x50>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <_sbrk+0x50>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4413      	add	r3, r2
 8004e24:	466a      	mov	r2, sp
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d907      	bls.n	8004e3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004e2a:	f00c fd17 	bl	801185c <__errno>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	230c      	movs	r3, #12
 8004e32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e38:	e006      	b.n	8004e48 <_sbrk+0x48>
	}

	heap_end += incr;
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <_sbrk+0x50>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	4a03      	ldr	r2, [pc, #12]	; (8004e50 <_sbrk+0x50>)
 8004e44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004e46:	68fb      	ldr	r3, [r7, #12]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200008a0 	.word	0x200008a0
 8004e54:	200102b8 	.word	0x200102b8

08004e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e5c:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <SystemInit+0x28>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <SystemInit+0x28>)
 8004e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <SystemInit+0x28>)
 8004e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e72:	609a      	str	r2, [r3, #8]
#endif
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f005 fc4d 	bl	800a730 <HAL_I2C_GetState>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d003      	beq.n	8004ea4 <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8004e9c:	481a      	ldr	r0, [pc, #104]	; (8004f08 <h3l_init+0x84>)
 8004e9e:	f00d f9ff 	bl	80122a0 <puts>
 8004ea2:	e002      	b.n	8004eaa <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8004ea4:	4819      	ldr	r0, [pc, #100]	; (8004f0c <h3l_init+0x88>)
 8004ea6:	f00d f9fb 	bl	80122a0 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6858      	ldr	r0, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b299      	uxth	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7a1b      	ldrb	r3, [r3, #8]
 8004eb8:	220a      	movs	r2, #10
 8004eba:	f005 fb0b 	bl	800a4d4 <HAL_I2C_IsDeviceReady>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 8004ec8:	4811      	ldr	r0, [pc, #68]	; (8004f10 <h3l_init+0x8c>)
 8004eca:	f00d f9e9 	bl	80122a0 <puts>
		printf("Errorcode: %d\n", _ret);
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4810      	ldr	r0, [pc, #64]	; (8004f14 <h3l_init+0x90>)
 8004ed4:	f00d f95c 	bl	8012190 <iprintf>
		return 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e010      	b.n	8004efe <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8004edc:	233f      	movs	r3, #63	; 0x3f
 8004ede:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 8004ee0:	7bbb      	ldrb	r3, [r7, #14]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f9ae 	bl	8005248 <h3l_write>


	PWR_CONF = 0b10000000;
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 8004ef0:	7bbb      	ldrb	r3, [r7, #14]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2123      	movs	r1, #35	; 0x23
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9a6 	bl	8005248 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8004efc:	2301      	movs	r3, #1
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	08017eac 	.word	0x08017eac
 8004f0c:	08017ebc 	.word	0x08017ebc
 8004f10:	08017ecc 	.word	0x08017ecc
 8004f14:	08017edc 	.word	0x08017edc

08004f18 <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 8004f22:	2328      	movs	r3, #40	; 0x28
 8004f24:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6858      	ldr	r0, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b299      	uxth	r1, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7a1b      	ldrb	r3, [r3, #8]
 8004f34:	f107 020f 	add.w	r2, r7, #15
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f004 ffa6 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6858      	ldr	r0, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b299      	uxth	r1, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7a1b      	ldrb	r3, [r3, #8]
 8004f4e:	f107 0208 	add.w	r2, r7, #8
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2301      	movs	r3, #1
 8004f56:	f005 f897 	bl	800a088 <HAL_I2C_Master_Receive>
	reg = 0x29;
 8004f5a:	2329      	movs	r3, #41	; 0x29
 8004f5c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6858      	ldr	r0, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	b299      	uxth	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7a1b      	ldrb	r3, [r3, #8]
 8004f6c:	f107 020f 	add.w	r2, r7, #15
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2301      	movs	r3, #1
 8004f74:	f004 ff8a 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6858      	ldr	r0, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	b299      	uxth	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7a1b      	ldrb	r3, [r3, #8]
 8004f86:	461c      	mov	r4, r3
 8004f88:	f107 0308 	add.w	r3, r7, #8
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	9400      	str	r4, [sp, #0]
 8004f90:	2301      	movs	r3, #1
 8004f92:	f005 f879 	bl	800a088 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 8004f96:	232a      	movs	r3, #42	; 0x2a
 8004f98:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6858      	ldr	r0, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b299      	uxth	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7a1b      	ldrb	r3, [r3, #8]
 8004fa8:	f107 020f 	add.w	r2, r7, #15
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f004 ff6c 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6858      	ldr	r0, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b299      	uxth	r1, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7a1b      	ldrb	r3, [r3, #8]
 8004fc2:	461c      	mov	r4, r3
 8004fc4:	f107 0308 	add.w	r3, r7, #8
 8004fc8:	1c9a      	adds	r2, r3, #2
 8004fca:	9400      	str	r4, [sp, #0]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f005 f85b 	bl	800a088 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 8004fd2:	232b      	movs	r3, #43	; 0x2b
 8004fd4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6858      	ldr	r0, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b299      	uxth	r1, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7a1b      	ldrb	r3, [r3, #8]
 8004fe4:	f107 020f 	add.w	r2, r7, #15
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2301      	movs	r3, #1
 8004fec:	f004 ff4e 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6858      	ldr	r0, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b299      	uxth	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7a1b      	ldrb	r3, [r3, #8]
 8004ffe:	461c      	mov	r4, r3
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	1cda      	adds	r2, r3, #3
 8005006:	9400      	str	r4, [sp, #0]
 8005008:	2301      	movs	r3, #1
 800500a:	f005 f83d 	bl	800a088 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 800500e:	232c      	movs	r3, #44	; 0x2c
 8005010:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6858      	ldr	r0, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	b299      	uxth	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7a1b      	ldrb	r3, [r3, #8]
 8005020:	f107 020f 	add.w	r2, r7, #15
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2301      	movs	r3, #1
 8005028:	f004 ff30 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6858      	ldr	r0, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b299      	uxth	r1, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7a1b      	ldrb	r3, [r3, #8]
 800503a:	461c      	mov	r4, r3
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	1d1a      	adds	r2, r3, #4
 8005042:	9400      	str	r4, [sp, #0]
 8005044:	2301      	movs	r3, #1
 8005046:	f005 f81f 	bl	800a088 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 800504a:	232d      	movs	r3, #45	; 0x2d
 800504c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6858      	ldr	r0, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b299      	uxth	r1, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7a1b      	ldrb	r3, [r3, #8]
 800505c:	f107 020f 	add.w	r2, r7, #15
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2301      	movs	r3, #1
 8005064:	f004 ff12 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6858      	ldr	r0, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b299      	uxth	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	7a1b      	ldrb	r3, [r3, #8]
 8005076:	461c      	mov	r4, r3
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	1d5a      	adds	r2, r3, #5
 800507e:	9400      	str	r4, [sp, #0]
 8005080:	2301      	movs	r3, #1
 8005082:	f005 f801 	bl	800a088 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 8005086:	7a3b      	ldrb	r3, [r7, #8]
 8005088:	b21a      	sxth	r2, r3
 800508a:	7a7b      	ldrb	r3, [r7, #9]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	b21b      	sxth	r3, r3
 8005090:	4313      	orrs	r3, r2
 8005092:	b21a      	sxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 8005098:	7abb      	ldrb	r3, [r7, #10]
 800509a:	b21a      	sxth	r2, r3
 800509c:	7afb      	ldrb	r3, [r7, #11]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	4313      	orrs	r3, r2
 80050a4:	b21a      	sxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 80050aa:	7b3b      	ldrb	r3, [r7, #12]
 80050ac:	b21a      	sxth	r2, r3
 80050ae:	7b7b      	ldrb	r3, [r7, #13]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	b21b      	sxth	r3, r3
 80050b4:	4313      	orrs	r3, r2
 80050b6:	b21a      	sxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80050c2:	111b      	asrs	r3, r3, #4
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80050d0:	111b      	asrs	r3, r3, #4
 80050d2:	b21a      	sxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80050de:	111b      	asrs	r3, r3, #4
 80050e0:	b21a      	sxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	3302      	adds	r3, #2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80050fa:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	3304      	adds	r3, #4
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8005106:	801a      	strh	r2, [r3, #0]

};
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}

08005110 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005128:	ee17 0a90 	vmov	r0, s15
 800512c:	f7fb fa0c 	bl	8000548 <__aeabi_f2d>
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	4b42      	ldr	r3, [pc, #264]	; (8005240 <h3l_convert+0x130>)
 8005136:	f7fb fa5f 	bl	80005f8 <__aeabi_dmul>
 800513a:	4603      	mov	r3, r0
 800513c:	460c      	mov	r4, r1
 800513e:	4618      	mov	r0, r3
 8005140:	4621      	mov	r1, r4
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <h3l_convert+0x134>)
 8005148:	f7fb fb80 	bl	800084c <__aeabi_ddiv>
 800514c:	4603      	mov	r3, r0
 800514e:	460c      	mov	r4, r1
 8005150:	4618      	mov	r0, r3
 8005152:	4621      	mov	r1, r4
 8005154:	a338      	add	r3, pc, #224	; (adr r3, 8005238 <h3l_convert+0x128>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb fa4d 	bl	80005f8 <__aeabi_dmul>
 800515e:	4603      	mov	r3, r0
 8005160:	460c      	mov	r4, r1
 8005162:	4618      	mov	r0, r3
 8005164:	4621      	mov	r1, r4
 8005166:	f7fb fd3f 	bl	8000be8 <__aeabi_d2f>
 800516a:	4602      	mov	r2, r0
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800517e:	ee17 0a90 	vmov	r0, s15
 8005182:	f7fb f9e1 	bl	8000548 <__aeabi_f2d>
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <h3l_convert+0x130>)
 800518c:	f7fb fa34 	bl	80005f8 <__aeabi_dmul>
 8005190:	4603      	mov	r3, r0
 8005192:	460c      	mov	r4, r1
 8005194:	4618      	mov	r0, r3
 8005196:	4621      	mov	r1, r4
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	4b29      	ldr	r3, [pc, #164]	; (8005244 <h3l_convert+0x134>)
 800519e:	f7fb fb55 	bl	800084c <__aeabi_ddiv>
 80051a2:	4603      	mov	r3, r0
 80051a4:	460c      	mov	r4, r1
 80051a6:	4618      	mov	r0, r3
 80051a8:	4621      	mov	r1, r4
 80051aa:	a323      	add	r3, pc, #140	; (adr r3, 8005238 <h3l_convert+0x128>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb fa22 	bl	80005f8 <__aeabi_dmul>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	4619      	mov	r1, r3
 80051ba:	4622      	mov	r2, r4
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	1d1c      	adds	r4, r3, #4
 80051c0:	4608      	mov	r0, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	f7fb fd10 	bl	8000be8 <__aeabi_d2f>
 80051c8:	4603      	mov	r3, r0
 80051ca:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051da:	ee17 0a90 	vmov	r0, s15
 80051de:	f7fb f9b3 	bl	8000548 <__aeabi_f2d>
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	4b16      	ldr	r3, [pc, #88]	; (8005240 <h3l_convert+0x130>)
 80051e8:	f7fb fa06 	bl	80005f8 <__aeabi_dmul>
 80051ec:	4603      	mov	r3, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	4618      	mov	r0, r3
 80051f2:	4621      	mov	r1, r4
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	4b12      	ldr	r3, [pc, #72]	; (8005244 <h3l_convert+0x134>)
 80051fa:	f7fb fb27 	bl	800084c <__aeabi_ddiv>
 80051fe:	4603      	mov	r3, r0
 8005200:	460c      	mov	r4, r1
 8005202:	4618      	mov	r0, r3
 8005204:	4621      	mov	r1, r4
 8005206:	a30c      	add	r3, pc, #48	; (adr r3, 8005238 <h3l_convert+0x128>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fb f9f4 	bl	80005f8 <__aeabi_dmul>
 8005210:	4603      	mov	r3, r0
 8005212:	460c      	mov	r4, r1
 8005214:	4619      	mov	r1, r3
 8005216:	4622      	mov	r2, r4
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f103 0408 	add.w	r4, r3, #8
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	f7fb fce1 	bl	8000be8 <__aeabi_d2f>
 8005226:	4603      	mov	r3, r0
 8005228:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bd90      	pop	{r4, r7, pc}
 8005232:	bf00      	nop
 8005234:	f3af 8000 	nop.w
 8005238:	51eb851f 	.word	0x51eb851f
 800523c:	40239eb8 	.word	0x40239eb8
 8005240:	40488000 	.word	0x40488000
 8005244:	408f4000 	.word	0x408f4000

08005248 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	70fb      	strb	r3, [r7, #3]
 8005254:	4613      	mov	r3, r2
 8005256:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 800525c:	78bb      	ldrb	r3, [r7, #2]
 800525e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6858      	ldr	r0, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b299      	uxth	r1, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7a1b      	ldrb	r3, [r3, #8]
 800526e:	f107 020c 	add.w	r2, r7, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2302      	movs	r3, #2
 8005276:	f004 fe09 	bl	8009e8c <HAL_I2C_Master_Transmit>

};
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d81a      	bhi.n	80052d0 <_get_accel_sensitivity+0x4c>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <_get_accel_sensitivity+0x1c>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052b9 	.word	0x080052b9
 80052a8:	080052c1 	.word	0x080052c1
 80052ac:	080052c9 	.word	0x080052c9
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 80052b0:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80052b4:	60fb      	str	r3, [r7, #12]
    break;
 80052b6:	e00b      	b.n	80052d0 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 80052b8:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80052bc:	60fb      	str	r3, [r7, #12]
    break;
 80052be:	e007      	b.n	80052d0 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 80052c0:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80052c4:	60fb      	str	r3, [r7, #12]
    break;
 80052c6:	e003      	b.n	80052d0 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 80052c8:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80052cc:	60fb      	str	r3, [r7, #12]
    break;
 80052ce:	bf00      	nop
  }
  return f;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	ee07 3a90 	vmov	s15, r3
}
 80052d6:	eeb0 0a67 	vmov.f32	s0, s15
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d816      	bhi.n	8005328 <_get_gyro_sensitivity+0x44>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <_get_gyro_sensitivity+0x1c>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005311 	.word	0x08005311
 8005304:	08005317 	.word	0x08005317
 8005308:	0800531d 	.word	0x0800531d
 800530c:	08005323 	.word	0x08005323
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <_get_gyro_sensitivity+0x58>)
 8005312:	60fb      	str	r3, [r7, #12]
	break;
 8005314:	e008      	b.n	8005328 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <_get_gyro_sensitivity+0x5c>)
 8005318:	60fb      	str	r3, [r7, #12]
    break;
 800531a:	e005      	b.n	8005328 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <_get_gyro_sensitivity+0x60>)
 800531e:	60fb      	str	r3, [r7, #12]
    break;
 8005320:	e002      	b.n	8005328 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <_get_gyro_sensitivity+0x64>)
 8005324:	60fb      	str	r3, [r7, #12]
    break;
 8005326:	bf00      	nop
  }
  return f;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	ee07 3a90 	vmov	s15, r3
}
 800532e:	eeb0 0a67 	vmov.f32	s0, s15
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	42830000 	.word	0x42830000
 8005340:	42033333 	.word	0x42033333
 8005344:	41833333 	.word	0x41833333
 8005348:	41033333 	.word	0x41033333

0800534c <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	461a      	mov	r2, r3
 8005358:	460b      	mov	r3, r1
 800535a:	72fb      	strb	r3, [r7, #11]
 800535c:	4613      	mov	r3, r2
 800535e:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8005360:	7afb      	ldrb	r3, [r7, #11]
 8005362:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005366:	b2db      	uxtb	r3, r3
 8005368:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	889b      	ldrh	r3, [r3, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	4619      	mov	r1, r3
 8005376:	f004 fc1d 	bl	8009bb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6898      	ldr	r0, [r3, #8]
 800537e:	f107 010b 	add.w	r1, r7, #11
 8005382:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005386:	2201      	movs	r2, #1
 8005388:	f007 fc96 	bl	800ccb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6898      	ldr	r0, [r3, #8]
 8005390:	893a      	ldrh	r2, [r7, #8]
 8005392:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	f007 fdc2 	bl	800cf20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	889b      	ldrh	r3, [r3, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	4619      	mov	r1, r3
 80053a8:	f004 fc04 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	461a      	mov	r2, r3
 80053c0:	460b      	mov	r3, r1
 80053c2:	72fb      	strb	r3, [r7, #11]
 80053c4:	4613      	mov	r3, r2
 80053c6:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	889b      	ldrh	r3, [r3, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	4619      	mov	r1, r3
 80053d4:	f004 fbee 	bl	8009bb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6898      	ldr	r0, [r3, #8]
 80053dc:	f107 010b 	add.w	r1, r7, #11
 80053e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80053e4:	2201      	movs	r2, #1
 80053e6:	f007 fc67 	bl	800ccb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6898      	ldr	r0, [r3, #8]
 80053ee:	893a      	ldrh	r2, [r7, #8]
 80053f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	f007 fc5f 	bl	800ccb8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	889b      	ldrh	r3, [r3, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	4619      	mov	r1, r3
 8005406:	f004 fbd5 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 800541e:	2300      	movs	r3, #0
 8005420:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8005422:	2381      	movs	r3, #129	; 0x81
 8005424:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8005426:	f107 020f 	add.w	r2, r7, #15
 800542a:	2301      	movs	r3, #1
 800542c:	216b      	movs	r1, #107	; 0x6b
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ffc0 	bl	80053b4 <_icm_write_bytes>
	HAL_Delay(1);
 8005434:	2001      	movs	r0, #1
 8005436:	f003 f88d 	bl	8008554 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 800543e:	f107 020f 	add.w	r2, r7, #15
 8005442:	2301      	movs	r3, #1
 8005444:	216b      	movs	r1, #107	; 0x6b
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff ffb4 	bl	80053b4 <_icm_write_bytes>
    HAL_Delay(1);
 800544c:	2001      	movs	r0, #1
 800544e:	f003 f881 	bl	8008554 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8005452:	f107 020c 	add.w	r2, r7, #12
 8005456:	2301      	movs	r3, #1
 8005458:	2175      	movs	r1, #117	; 0x75
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff ff76 	bl	800534c <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8005460:	7b3b      	ldrb	r3, [r7, #12]
 8005462:	2bac      	cmp	r3, #172	; 0xac
 8005464:	d001      	beq.n	800546a <icm20601_init+0x58>
 8005466:	2300      	movs	r3, #0
 8005468:	e093      	b.n	8005592 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 800546a:	233f      	movs	r3, #63	; 0x3f
 800546c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 800546e:	f107 020f 	add.w	r2, r7, #15
 8005472:	2301      	movs	r3, #1
 8005474:	216c      	movs	r1, #108	; 0x6c
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff9c 	bl	80053b4 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8005480:	f107 020f 	add.w	r2, r7, #15
 8005484:	2301      	movs	r3, #1
 8005486:	216a      	movs	r1, #106	; 0x6a
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ff93 	bl	80053b4 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 800548e:	2341      	movs	r3, #65	; 0x41
 8005490:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8005492:	f107 020f 	add.w	r2, r7, #15
 8005496:	2301      	movs	r3, #1
 8005498:	216a      	movs	r1, #106	; 0x6a
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff8a 	bl	80053b4 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7b1b      	ldrb	r3, [r3, #12]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d102      	bne.n	80054ae <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 80054a8:	2308      	movs	r3, #8
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e002      	b.n	80054b4 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7b1b      	ldrb	r3, [r3, #12]
 80054b2:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 80054b4:	f107 020f 	add.w	r2, r7, #15
 80054b8:	2301      	movs	r3, #1
 80054ba:	211d      	movs	r1, #29
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff79 	bl	80053b4 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	7b5b      	ldrb	r3, [r3, #13]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 80054cc:	f107 020f 	add.w	r2, r7, #15
 80054d0:	2301      	movs	r3, #1
 80054d2:	211c      	movs	r1, #28
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ff6d 	bl	80053b4 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	7b9b      	ldrb	r3, [r3, #14]
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d119      	bne.n	8005516 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80054e6:	f107 020f 	add.w	r2, r7, #15
 80054ea:	2301      	movs	r3, #1
 80054ec:	211a      	movs	r1, #26
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ff60 	bl	80053b4 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7bdb      	ldrb	r3, [r3, #15]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	b25b      	sxtb	r3, r3
 8005502:	b2db      	uxtb	r3, r3
 8005504:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8005506:	f107 020f 	add.w	r2, r7, #15
 800550a:	2301      	movs	r3, #1
 800550c:	211b      	movs	r1, #27
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff ff50 	bl	80053b4 <_icm_write_bytes>
 8005514:	e033      	b.n	800557e <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	7b9b      	ldrb	r3, [r3, #14]
 800551a:	2b09      	cmp	r3, #9
 800551c:	d119      	bne.n	8005552 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8005522:	f107 020f 	add.w	r2, r7, #15
 8005526:	2301      	movs	r3, #1
 8005528:	211a      	movs	r1, #26
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff ff42 	bl	80053b4 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	7bdb      	ldrb	r3, [r3, #15]
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	b25b      	sxtb	r3, r3
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	b25b      	sxtb	r3, r3
 800553e:	b2db      	uxtb	r3, r3
 8005540:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8005542:	f107 020f 	add.w	r2, r7, #15
 8005546:	2301      	movs	r3, #1
 8005548:	211b      	movs	r1, #27
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff ff32 	bl	80053b4 <_icm_write_bytes>
 8005550:	e015      	b.n	800557e <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7b9b      	ldrb	r3, [r3, #14]
 8005556:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8005558:	f107 020f 	add.w	r2, r7, #15
 800555c:	2301      	movs	r3, #1
 800555e:	211a      	movs	r1, #26
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ff27 	bl	80053b4 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7bdb      	ldrb	r3, [r3, #15]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8005570:	f107 020f 	add.w	r2, r7, #15
 8005574:	2301      	movs	r3, #1
 8005576:	211b      	movs	r1, #27
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff1b 	bl	80053b4 <_icm_write_bytes>
     }


    tmp = 0x00;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8005582:	f107 020f 	add.w	r2, r7, #15
 8005586:	2301      	movs	r3, #1
 8005588:	216c      	movs	r1, #108	; 0x6c
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff12 	bl	80053b4 <_icm_write_bytes>


    return 1;
 8005590:	2301      	movs	r3, #1
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 80055ae:	f107 0208 	add.w	r2, r7, #8
 80055b2:	2306      	movs	r3, #6
 80055b4:	213b      	movs	r1, #59	; 0x3b
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fec8 	bl	800534c <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 80055bc:	7a3b      	ldrb	r3, [r7, #8]
 80055be:	b21a      	sxth	r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	b21a      	sxth	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80055d8:	7a7b      	ldrb	r3, [r7, #9]
 80055da:	b21b      	sxth	r3, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	b21a      	sxth	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 80055e4:	7aba      	ldrb	r2, [r7, #10]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	3302      	adds	r3, #2
 80055ea:	b212      	sxth	r2, r2
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	3302      	adds	r3, #2
 80055f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	3302      	adds	r3, #2
 80055fc:	b212      	sxth	r2, r2
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	3302      	adds	r3, #2
 8005604:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005608:	7afb      	ldrb	r3, [r7, #11]
 800560a:	b21a      	sxth	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	3302      	adds	r3, #2
 8005610:	430a      	orrs	r2, r1
 8005612:	b212      	sxth	r2, r2
 8005614:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8005616:	7b3a      	ldrb	r2, [r7, #12]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	3304      	adds	r3, #4
 800561c:	b212      	sxth	r2, r2
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	3304      	adds	r3, #4
 8005624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005628:	021a      	lsls	r2, r3, #8
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	3304      	adds	r3, #4
 800562e:	b212      	sxth	r2, r2
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	3304      	adds	r3, #4
 8005636:	f9b3 1000 	ldrsh.w	r1, [r3]
 800563a:	7b7b      	ldrb	r3, [r7, #13]
 800563c:	b21a      	sxth	r2, r3
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	3304      	adds	r3, #4
 8005642:	430a      	orrs	r2, r1
 8005644:	b212      	sxth	r2, r2
 8005646:	801a      	strh	r2, [r3, #0]
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 800565a:	f107 0308 	add.w	r3, r7, #8
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8005664:	f107 0208 	add.w	r2, r7, #8
 8005668:	2306      	movs	r3, #6
 800566a:	2143      	movs	r1, #67	; 0x43
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff fe6d 	bl	800534c <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8005672:	7a3b      	ldrb	r3, [r7, #8]
 8005674:	b21a      	sxth	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	b21a      	sxth	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800568e:	7a7b      	ldrb	r3, [r7, #9]
 8005690:	b21b      	sxth	r3, r3
 8005692:	4313      	orrs	r3, r2
 8005694:	b21a      	sxth	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 800569a:	7aba      	ldrb	r2, [r7, #10]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	3302      	adds	r3, #2
 80056a0:	b212      	sxth	r2, r2
 80056a2:	801a      	strh	r2, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	3302      	adds	r3, #2
 80056a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ac:	021a      	lsls	r2, r3, #8
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	3302      	adds	r3, #2
 80056b2:	b212      	sxth	r2, r2
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	3302      	adds	r3, #2
 80056ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	b21a      	sxth	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	3302      	adds	r3, #2
 80056c6:	430a      	orrs	r2, r1
 80056c8:	b212      	sxth	r2, r2
 80056ca:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 80056cc:	7b3a      	ldrb	r2, [r7, #12]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	3304      	adds	r3, #4
 80056d2:	b212      	sxth	r2, r2
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	3304      	adds	r3, #4
 80056da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	3304      	adds	r3, #4
 80056e4:	b212      	sxth	r2, r2
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	3304      	adds	r3, #4
 80056ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 80056f0:	7b7b      	ldrb	r3, [r7, #13]
 80056f2:	b21a      	sxth	r2, r3
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	3304      	adds	r3, #4
 80056f8:	430a      	orrs	r2, r1
 80056fa:	b212      	sxth	r2, r2
 80056fc:	801a      	strh	r2, [r3, #0]
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8005710:	2300      	movs	r3, #0
 8005712:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8005714:	f107 020c 	add.w	r2, r7, #12
 8005718:	2302      	movs	r3, #2
 800571a:	2141      	movs	r1, #65	; 0x41
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fe15 	bl	800534c <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8005722:	7b3b      	ldrb	r3, [r7, #12]
 8005724:	b21a      	sxth	r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	b21a      	sxth	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800573e:	7b7b      	ldrb	r3, [r7, #13]
 8005740:	b21b      	sxth	r3, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	b21a      	sxth	r2, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	801a      	strh	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	0000      	movs	r0, r0
 8005754:	0000      	movs	r0, r0
	...

08005758 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 8005758:	b590      	push	{r4, r7, lr}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 8005762:	f107 0316 	add.w	r3, r7, #22
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ffcc 	bl	8005706 <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 800576e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800577a:	4b61      	ldr	r3, [pc, #388]	; (8005900 <icm20601_read_data+0x1a8>)
 800577c:	ed93 7a00 	vldr	s14, [r3]
 8005780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005784:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 8005792:	f107 0310 	add.w	r3, r7, #16
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7b5b      	ldrb	r3, [r3, #13]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fd6f 	bl	8005284 <_get_accel_sensitivity>
 80057a6:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 80057aa:	f107 0310 	add.w	r3, r7, #16
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fef2 	bl	800559a <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 80057b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80057c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057ca:	ee16 0a90 	vmov	r0, s13
 80057ce:	f7fa febb 	bl	8000548 <__aeabi_f2d>
 80057d2:	a349      	add	r3, pc, #292	; (adr r3, 80058f8 <icm20601_read_data+0x1a0>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f7fa ff0e 	bl	80005f8 <__aeabi_dmul>
 80057dc:	4603      	mov	r3, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	4619      	mov	r1, r3
 80057e2:	4622      	mov	r2, r4
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	1d1c      	adds	r4, r3, #4
 80057e8:	4608      	mov	r0, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	f7fb f9fc 	bl	8000be8 <__aeabi_d2f>
 80057f0:	4603      	mov	r3, r0
 80057f2:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 80057f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005800:	edd7 7a07 	vldr	s15, [r7, #28]
 8005804:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005808:	ee16 0a90 	vmov	r0, s13
 800580c:	f7fa fe9c 	bl	8000548 <__aeabi_f2d>
 8005810:	a339      	add	r3, pc, #228	; (adr r3, 80058f8 <icm20601_read_data+0x1a0>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f7fa feef 	bl	80005f8 <__aeabi_dmul>
 800581a:	4603      	mov	r3, r0
 800581c:	460c      	mov	r4, r1
 800581e:	4619      	mov	r1, r3
 8005820:	4622      	mov	r2, r4
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f103 0408 	add.w	r4, r3, #8
 8005828:	4608      	mov	r0, r1
 800582a:	4611      	mov	r1, r2
 800582c:	f7fb f9dc 	bl	8000be8 <__aeabi_d2f>
 8005830:	4603      	mov	r3, r0
 8005832:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 8005834:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005840:	edd7 7a07 	vldr	s15, [r7, #28]
 8005844:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005848:	ee16 0a90 	vmov	r0, s13
 800584c:	f7fa fe7c 	bl	8000548 <__aeabi_f2d>
 8005850:	a329      	add	r3, pc, #164	; (adr r3, 80058f8 <icm20601_read_data+0x1a0>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f7fa fecf 	bl	80005f8 <__aeabi_dmul>
 800585a:	4603      	mov	r3, r0
 800585c:	460c      	mov	r4, r1
 800585e:	4619      	mov	r1, r3
 8005860:	4622      	mov	r2, r4
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	f103 040c 	add.w	r4, r3, #12
 8005868:	4608      	mov	r0, r1
 800586a:	4611      	mov	r1, r2
 800586c:	f7fb f9bc 	bl	8000be8 <__aeabi_d2f>
 8005870:	4603      	mov	r3, r0
 8005872:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 8005874:	f107 0308 	add.w	r3, r7, #8
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->gyro_dps);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	7bdb      	ldrb	r3, [r3, #15]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fd2e 	bl	80052e4 <_get_gyro_sensitivity>
 8005888:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fedc 	bl	8005650 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 8005898:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	3310      	adds	r3, #16
 80058a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80058ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b0:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 80058b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80058c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058cc:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 80058d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80058d4:	ee07 3a90 	vmov	s15, r3
 80058d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	3318      	adds	r3, #24
 80058e0:	ed97 7a06 	vldr	s14, [r7, #24]
 80058e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e8:	edc3 7a00 	vstr	s15, [r3]
}
 80058ec:	bf00      	nop
 80058ee:	3724      	adds	r7, #36	; 0x24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd90      	pop	{r4, r7, pc}
 80058f4:	f3af 8000 	nop.w
 80058f8:	51eb851f 	.word	0x51eb851f
 80058fc:	40239eb8 	.word	0x40239eb8
 8005900:	20000198 	.word	0x20000198

08005904 <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	889b      	ldrh	r3, [r3, #4]
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f004 f965 	bl	8009be6 <HAL_GPIO_TogglePin>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <turn_on>:

void turn_on(struct LED_dev * ctrl){
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	889b      	ldrh	r3, [r3, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	4619      	mov	r1, r3
 8005938:	f004 f93c 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <turn_off>:

void turn_off(struct LED_dev * ctrl){
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	889b      	ldrh	r3, [r3, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	4619      	mov	r1, r3
 8005958:	f004 f92c 	bl	8009bb4 <HAL_GPIO_WritePin>
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <ms5607_init>:
#include <stdio.h>
#include <math.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af02      	add	r7, sp, #8
 800596a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4618      	mov	r0, r3
 8005972:	f004 fedd 	bl	800a730 <HAL_I2C_GetState>
 8005976:	4603      	mov	r3, r0
 8005978:	2b20      	cmp	r3, #32
 800597a:	d003      	beq.n	8005984 <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 800597c:	484a      	ldr	r0, [pc, #296]	; (8005aa8 <ms5607_init+0x144>)
 800597e:	f00c fc8f 	bl	80122a0 <puts>
 8005982:	e002      	b.n	800598a <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 8005984:	4849      	ldr	r0, [pc, #292]	; (8005aac <ms5607_init+0x148>)
 8005986:	f00c fc8b 	bl	80122a0 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6858      	ldr	r0, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b299      	uxth	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	220a      	movs	r2, #10
 800599a:	f004 fd9b 	bl	800a4d4 <HAL_I2C_IsDeviceReady>
 800599e:	4603      	mov	r3, r0
 80059a0:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 80059a2:	7cfb      	ldrb	r3, [r7, #19]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 80059a8:	4841      	ldr	r0, [pc, #260]	; (8005ab0 <ms5607_init+0x14c>)
 80059aa:	f00c fc79 	bl	80122a0 <puts>
		printf("Errorcode: %d\n", _ret);
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	4619      	mov	r1, r3
 80059b2:	4840      	ldr	r0, [pc, #256]	; (8005ab4 <ms5607_init+0x150>)
 80059b4:	f00c fbec 	bl	8012190 <iprintf>
		return 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e070      	b.n	8005a9e <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 80059bc:	231e      	movs	r3, #30
 80059be:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6858      	ldr	r0, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	b299      	uxth	r1, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7a1b      	ldrb	r3, [r3, #8]
 80059ce:	f107 0210 	add.w	r2, r7, #16
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	2301      	movs	r3, #1
 80059d6:	f004 fa59 	bl	8009e8c <HAL_I2C_Master_Transmit>
 80059da:	4603      	mov	r3, r0
 80059dc:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 80059de:	2064      	movs	r0, #100	; 0x64
 80059e0:	f002 fdb8 	bl	8008554 <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e043      	b.n	8005a72 <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 80059ea:	23a0      	movs	r3, #160	; 0xa0
 80059ec:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4413      	add	r3, r2
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6858      	ldr	r0, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b299      	uxth	r1, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	7a1b      	ldrb	r3, [r3, #8]
 8005a0c:	f107 020f 	add.w	r2, r7, #15
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	2301      	movs	r3, #1
 8005a14:	f004 fa3a 	bl	8009e8c <HAL_I2C_Master_Transmit>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 8005a1c:	200f      	movs	r0, #15
 8005a1e:	f002 fd99 	bl	8008554 <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6858      	ldr	r0, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b299      	uxth	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	7a1b      	ldrb	r3, [r3, #8]
 8005a30:	f107 020c 	add.w	r2, r7, #12
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	2302      	movs	r3, #2
 8005a38:	f004 fb26 	bl	800a088 <HAL_I2C_Master_Receive>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8005a40:	7b3b      	ldrb	r3, [r7, #12]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	b299      	uxth	r1, r3
 8005a48:	7b7b      	ldrb	r3, [r7, #13]
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	430a      	orrs	r2, r1
 8005a52:	b291      	uxth	r1, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8005a66:	4814      	ldr	r0, [pc, #80]	; (8005ab8 <ms5607_init+0x154>)
 8005a68:	f00c fc1a 	bl	80122a0 <puts>
	for(int i = 1; i < 7; i++){
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b06      	cmp	r3, #6
 8005a76:	ddb8      	ble.n	80059ea <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8005a78:	4810      	ldr	r0, [pc, #64]	; (8005abc <ms5607_init+0x158>)
 8005a7a:	f00c fc11 	bl	80122a0 <puts>

	buf[0] = 0x44;
 8005a7e:	2344      	movs	r3, #68	; 0x44
 8005a80:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6858      	ldr	r0, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7a1b      	ldrb	r3, [r3, #8]
 8005a90:	f107 020c 	add.w	r2, r7, #12
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2301      	movs	r3, #1
 8005a98:	f004 f9f8 	bl	8009e8c <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 8005a9c:	2301      	movs	r3, #1
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08017eec 	.word	0x08017eec
 8005aac:	08017efc 	.word	0x08017efc
 8005ab0:	08017f0c 	.word	0x08017f0c
 8005ab4:	08017f1c 	.word	0x08017f1c
 8005ab8:	08017f2c 	.word	0x08017f2c
 8005abc:	08017f44 	.word	0x08017f44

08005ac0 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8005aca:	2300      	movs	r3, #0
 8005acc:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6858      	ldr	r0, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	b299      	uxth	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7a1b      	ldrb	r3, [r3, #8]
 8005adc:	f107 020c 	add.w	r2, r7, #12
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f004 f9d2 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6858      	ldr	r0, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b299      	uxth	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7a1b      	ldrb	r3, [r3, #8]
 8005af6:	f107 020c 	add.w	r2, r7, #12
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	2303      	movs	r3, #3
 8005afe:	f004 fac3 	bl	800a088 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8005b02:	7b3b      	ldrb	r3, [r7, #12]
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	461a      	mov	r2, r3
 8005b08:	7b7b      	ldrb	r3, [r7, #13]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	7bba      	ldrb	r2, [r7, #14]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8005b16:	7b3a      	ldrb	r2, [r7, #12]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	7b7a      	ldrb	r2, [r7, #13]
 8005b22:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	3302      	adds	r3, #2
 8005b28:	7bba      	ldrb	r2, [r7, #14]
 8005b2a:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 8005b2c:	2354      	movs	r3, #84	; 0x54
 8005b2e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6858      	ldr	r0, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b299      	uxth	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	7a1b      	ldrb	r3, [r3, #8]
 8005b3e:	f107 020c 	add.w	r2, r7, #12
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2301      	movs	r3, #1
 8005b46:	f004 f9a1 	bl	8009e8c <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b086      	sub	sp, #24
 8005b56:	af02      	add	r7, sp, #8
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	b299      	uxth	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	7a1b      	ldrb	r3, [r3, #8]
 8005b6e:	f107 020c 	add.w	r2, r7, #12
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2301      	movs	r3, #1
 8005b76:	f004 f989 	bl	8009e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6858      	ldr	r0, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	b299      	uxth	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	7a1b      	ldrb	r3, [r3, #8]
 8005b88:	f107 020c 	add.w	r2, r7, #12
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	2303      	movs	r3, #3
 8005b90:	f004 fa7a 	bl	800a088 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8005b94:	7b3b      	ldrb	r3, [r7, #12]
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	461a      	mov	r2, r3
 8005b9a:	7b7b      	ldrb	r3, [r7, #13]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	7bba      	ldrb	r2, [r7, #14]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	3303      	adds	r3, #3
 8005bac:	7b3a      	ldrb	r2, [r7, #12]
 8005bae:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	7b7a      	ldrb	r2, [r7, #13]
 8005bb6:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	3305      	adds	r3, #5
 8005bbc:	7bba      	ldrb	r2, [r7, #14]
 8005bbe:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 8005bc0:	2344      	movs	r3, #68	; 0x44
 8005bc2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6858      	ldr	r0, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b299      	uxth	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	7a1b      	ldrb	r3, [r3, #8]
 8005bd2:	f107 020c 	add.w	r2, r7, #12
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f004 f957 	bl	8009e8c <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8005be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bec:	b092      	sub	sp, #72	; 0x48
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	895b      	ldrh	r3, [r3, #10]
 8005bfa:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	899b      	ldrh	r3, [r3, #12]
 8005c00:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	89db      	ldrh	r3, [r3, #14]
 8005c06:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8a1b      	ldrh	r3, [r3, #16]
 8005c0c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8a5b      	ldrh	r3, [r3, #18]
 8005c12:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8a9b      	ldrh	r3, [r3, #20]
 8005c18:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c30:	ee17 0a90 	vmov	r0, s15
 8005c34:	f7fa fc88 	bl	8000548 <__aeabi_f2d>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fa fc70 	bl	8000524 <__aeabi_i2d>
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	4bd9      	ldr	r3, [pc, #868]	; (8005fb0 <ms5607_convert+0x3c8>)
 8005c4a:	f7fa fcd5 	bl	80005f8 <__aeabi_dmul>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4620      	mov	r0, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	f7fa fb17 	bl	8000288 <__aeabi_dsub>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	4618      	mov	r0, r3
 8005c60:	4621      	mov	r1, r4
 8005c62:	f7fa ffc1 	bl	8000be8 <__aeabi_d2f>
 8005c66:	4603      	mov	r3, r0
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8005c6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fa fc59 	bl	8000524 <__aeabi_i2d>
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005c7a:	f7fa fcbd 	bl	80005f8 <__aeabi_dmul>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	460c      	mov	r4, r1
 8005c82:	4625      	mov	r5, r4
 8005c84:	461c      	mov	r4, r3
 8005c86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c98:	ee17 0a90 	vmov	r0, s15
 8005c9c:	f7fa fc54 	bl	8000548 <__aeabi_f2d>
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	4bc3      	ldr	r3, [pc, #780]	; (8005fb4 <ms5607_convert+0x3cc>)
 8005ca6:	f7fa fdd1 	bl	800084c <__aeabi_ddiv>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4620      	mov	r0, r4
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	f7fa faeb 	bl	800028c <__adddf3>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	4618      	mov	r0, r3
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	f7fa ff93 	bl	8000be8 <__aeabi_d2f>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 8005cc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fa fc2b 	bl	8000524 <__aeabi_i2d>
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	4bb9      	ldr	r3, [pc, #740]	; (8005fb8 <ms5607_convert+0x3d0>)
 8005cd4:	f7fa fc90 	bl	80005f8 <__aeabi_dmul>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4625      	mov	r5, r4
 8005cde:	461c      	mov	r4, r3
 8005ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	ee17 0a90 	vmov	r0, s15
 8005cf6:	f7fa fc27 	bl	8000548 <__aeabi_f2d>
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	4baf      	ldr	r3, [pc, #700]	; (8005fbc <ms5607_convert+0x3d4>)
 8005d00:	f7fa fda4 	bl	800084c <__aeabi_ddiv>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f7fa fabe 	bl	800028c <__adddf3>
 8005d10:	4603      	mov	r3, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	4618      	mov	r0, r3
 8005d16:	4621      	mov	r1, r4
 8005d18:	f7fa ff66 	bl	8000be8 <__aeabi_d2f>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8005d20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	ee17 0a90 	vmov	r0, s15
 8005d36:	f7fa fc07 	bl	8000548 <__aeabi_f2d>
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	4ba0      	ldr	r3, [pc, #640]	; (8005fc0 <ms5607_convert+0x3d8>)
 8005d40:	f7fa fd84 	bl	800084c <__aeabi_ddiv>
 8005d44:	4603      	mov	r3, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4618      	mov	r0, r3
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	4b9c      	ldr	r3, [pc, #624]	; (8005fc4 <ms5607_convert+0x3dc>)
 8005d52:	f7fa fa9b 	bl	800028c <__adddf3>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	f7fa ff43 	bl	8000be8 <__aeabi_d2f>
 8005d62:	4603      	mov	r3, r0
 8005d64:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d70:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d78:	ee17 0a90 	vmov	r0, s15
 8005d7c:	f7fa fbe4 	bl	8000548 <__aeabi_f2d>
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	4b90      	ldr	r3, [pc, #576]	; (8005fc8 <ms5607_convert+0x3e0>)
 8005d86:	f7fa fd61 	bl	800084c <__aeabi_ddiv>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	4625      	mov	r5, r4
 8005d90:	461c      	mov	r4, r3
 8005d92:	6a38      	ldr	r0, [r7, #32]
 8005d94:	f7fa fbd8 	bl	8000548 <__aeabi_f2d>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	4629      	mov	r1, r5
 8005da0:	f7fa fa72 	bl	8000288 <__aeabi_dsub>
 8005da4:	4603      	mov	r3, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	4618      	mov	r0, r3
 8005daa:	4621      	mov	r1, r4
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	4b86      	ldr	r3, [pc, #536]	; (8005fcc <ms5607_convert+0x3e4>)
 8005db2:	f7fa fd4b 	bl	800084c <__aeabi_ddiv>
 8005db6:	4603      	mov	r3, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7fa ff13 	bl	8000be8 <__aeabi_d2f>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8005dd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ddc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005fd0 <ms5607_convert+0x3e8>
 8005de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de8:	f140 8104 	bpl.w	8005ff4 <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 8005dec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005df0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005df8:	eddf 6a76 	vldr	s13, [pc, #472]	; 8005fd4 <ms5607_convert+0x3ec>
 8005dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e00:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 8005e04:	69b8      	ldr	r0, [r7, #24]
 8005e06:	f7fa fb9f 	bl	8000548 <__aeabi_f2d>
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	4b6d      	ldr	r3, [pc, #436]	; (8005fc4 <ms5607_convert+0x3dc>)
 8005e10:	f7fa fa3a 	bl	8000288 <__aeabi_dsub>
 8005e14:	4603      	mov	r3, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	4618      	mov	r0, r3
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	4b6d      	ldr	r3, [pc, #436]	; (8005fd8 <ms5607_convert+0x3f0>)
 8005e22:	f7fa fbe9 	bl	80005f8 <__aeabi_dmul>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	4625      	mov	r5, r4
 8005e2c:	461c      	mov	r4, r3
 8005e2e:	69b8      	ldr	r0, [r7, #24]
 8005e30:	f7fa fb8a 	bl	8000548 <__aeabi_f2d>
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	4b62      	ldr	r3, [pc, #392]	; (8005fc4 <ms5607_convert+0x3dc>)
 8005e3a:	f7fa fa25 	bl	8000288 <__aeabi_dsub>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4620      	mov	r0, r4
 8005e44:	4629      	mov	r1, r5
 8005e46:	f7fa fbd7 	bl	80005f8 <__aeabi_dmul>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	4618      	mov	r0, r3
 8005e50:	4621      	mov	r1, r4
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <ms5607_convert+0x3f4>)
 8005e58:	f7fa fcf8 	bl	800084c <__aeabi_ddiv>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	4618      	mov	r0, r3
 8005e62:	4621      	mov	r1, r4
 8005e64:	f7fa fec0 	bl	8000be8 <__aeabi_d2f>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8005e6c:	69b8      	ldr	r0, [r7, #24]
 8005e6e:	f7fa fb6b 	bl	8000548 <__aeabi_f2d>
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	4b53      	ldr	r3, [pc, #332]	; (8005fc4 <ms5607_convert+0x3dc>)
 8005e78:	f7fa fa06 	bl	8000288 <__aeabi_dsub>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	4618      	mov	r0, r3
 8005e82:	4621      	mov	r1, r4
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	f7fa fa00 	bl	800028c <__adddf3>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	4625      	mov	r5, r4
 8005e92:	461c      	mov	r4, r3
 8005e94:	69b8      	ldr	r0, [r7, #24]
 8005e96:	f7fa fb57 	bl	8000548 <__aeabi_f2d>
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	4b49      	ldr	r3, [pc, #292]	; (8005fc4 <ms5607_convert+0x3dc>)
 8005ea0:	f7fa f9f2 	bl	8000288 <__aeabi_dsub>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	f7fa fba4 	bl	80005f8 <__aeabi_dmul>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	f7fa fe96 	bl	8000be8 <__aeabi_d2f>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8005ec0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ec4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005fe0 <ms5607_convert+0x3f8>
 8005ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed0:	f140 8090 	bpl.w	8005ff4 <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8005ed4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005ed6:	f7fa fb37 	bl	8000548 <__aeabi_f2d>
 8005eda:	4604      	mov	r4, r0
 8005edc:	460d      	mov	r5, r1
 8005ede:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ee2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005fe4 <ms5607_convert+0x3fc>
 8005ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eea:	ee17 0a90 	vmov	r0, s15
 8005eee:	f7fa fb2b 	bl	8000548 <__aeabi_f2d>
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	4b3c      	ldr	r3, [pc, #240]	; (8005fe8 <ms5607_convert+0x400>)
 8005ef8:	f7fa fb7e 	bl	80005f8 <__aeabi_dmul>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4690      	mov	r8, r2
 8005f02:	4699      	mov	r9, r3
 8005f04:	69b8      	ldr	r0, [r7, #24]
 8005f06:	f7fa fb1f 	bl	8000548 <__aeabi_f2d>
 8005f0a:	a327      	add	r3, pc, #156	; (adr r3, 8005fa8 <ms5607_convert+0x3c0>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f7fa f9bc 	bl	800028c <__adddf3>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fb6c 	bl	80005f8 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4620      	mov	r0, r4
 8005f26:	4629      	mov	r1, r5
 8005f28:	f7fa f9b0 	bl	800028c <__adddf3>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4618      	mov	r0, r3
 8005f32:	4621      	mov	r1, r4
 8005f34:	f7fa fe58 	bl	8000be8 <__aeabi_d2f>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8005f3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f3e:	f7fa fb03 	bl	8000548 <__aeabi_f2d>
 8005f42:	4604      	mov	r4, r0
 8005f44:	460d      	mov	r5, r1
 8005f46:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f4a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005fe4 <ms5607_convert+0x3fc>
 8005f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f52:	ee17 0a90 	vmov	r0, s15
 8005f56:	f7fa faf7 	bl	8000548 <__aeabi_f2d>
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	4b23      	ldr	r3, [pc, #140]	; (8005fec <ms5607_convert+0x404>)
 8005f60:	f7fa fb4a 	bl	80005f8 <__aeabi_dmul>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4690      	mov	r8, r2
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	69b8      	ldr	r0, [r7, #24]
 8005f6e:	f7fa faeb 	bl	8000548 <__aeabi_f2d>
 8005f72:	a30d      	add	r3, pc, #52	; (adr r3, 8005fa8 <ms5607_convert+0x3c0>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa f988 	bl	800028c <__adddf3>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4640      	mov	r0, r8
 8005f82:	4649      	mov	r1, r9
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa f97c 	bl	800028c <__adddf3>
 8005f94:	4603      	mov	r3, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	f7fa fe24 	bl	8000be8 <__aeabi_d2f>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	e026      	b.n	8005ff4 <ms5607_convert+0x40c>
 8005fa6:	bf00      	nop
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	40977000 	.word	0x40977000
 8005fb0:	40700000 	.word	0x40700000
 8005fb4:	40500000 	.word	0x40500000
 8005fb8:	40f00000 	.word	0x40f00000
 8005fbc:	40600000 	.word	0x40600000
 8005fc0:	41600000 	.word	0x41600000
 8005fc4:	409f4000 	.word	0x409f4000
 8005fc8:	41400000 	.word	0x41400000
 8005fcc:	40e00000 	.word	0x40e00000
 8005fd0:	44fa0000 	.word	0x44fa0000
 8005fd4:	4f000000 	.word	0x4f000000
 8005fd8:	404e8000 	.word	0x404e8000
 8005fdc:	40300000 	.word	0x40300000
 8005fe0:	c4bb8000 	.word	0xc4bb8000
 8005fe4:	44bb8000 	.word	0x44bb8000
 8005fe8:	402e0000 	.word	0x402e0000
 8005fec:	40200000 	.word	0x40200000
 8005ff0:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8005ff4:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ff8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006000:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8006004:	ed97 7a08 	vldr	s14, [r7, #32]
 8006008:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800600c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006010:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8006014:	ed97 7a07 	vldr	s14, [r7, #28]
 8006018:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800601c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006020:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8006024:	ed97 7a06 	vldr	s14, [r7, #24]
 8006028:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8005ff0 <ms5607_convert+0x408>
 800602c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006030:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800603e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	ee17 0a90 	vmov	r0, s15
 800604a:	f7fa fa7d 	bl	8000548 <__aeabi_f2d>
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	4b16      	ldr	r3, [pc, #88]	; (80060ac <ms5607_convert+0x4c4>)
 8006054:	f7fa fbfa 	bl	800084c <__aeabi_ddiv>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	4625      	mov	r5, r4
 800605e:	461c      	mov	r4, r3
 8006060:	6a38      	ldr	r0, [r7, #32]
 8006062:	f7fa fa71 	bl	8000548 <__aeabi_f2d>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f7fa f90b 	bl	8000288 <__aeabi_dsub>
 8006072:	4603      	mov	r3, r0
 8006074:	460c      	mov	r4, r1
 8006076:	4618      	mov	r0, r3
 8006078:	4621      	mov	r1, r4
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <ms5607_convert+0x4c8>)
 8006080:	f7fa fbe4 	bl	800084c <__aeabi_ddiv>
 8006084:	4603      	mov	r3, r0
 8006086:	460c      	mov	r4, r1
 8006088:	4618      	mov	r0, r3
 800608a:	4621      	mov	r1, r4
 800608c:	f7fa fdac 	bl	8000be8 <__aeabi_d2f>
 8006090:	4603      	mov	r3, r0
 8006092:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	601a      	str	r2, [r3, #0]
	*p = pressure;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 80060a0:	bf00      	nop
 80060a2:	3748      	adds	r7, #72	; 0x48
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060aa:	bf00      	nop
 80060ac:	41400000 	.word	0x41400000
 80060b0:	40e00000 	.word	0x40e00000

080060b4 <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f004 fb35 	bl	800a730 <HAL_I2C_GetState>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d003      	beq.n	80060d4 <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 80060cc:	481f      	ldr	r0, [pc, #124]	; (800614c <sht31_init+0x98>)
 80060ce:	f00c f8e7 	bl	80122a0 <puts>
 80060d2:	e002      	b.n	80060da <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 80060d4:	481e      	ldr	r0, [pc, #120]	; (8006150 <sht31_init+0x9c>)
 80060d6:	f00c f8e3 	bl	80122a0 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6858      	ldr	r0, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b299      	uxth	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7a1b      	ldrb	r3, [r3, #8]
 80060e8:	220a      	movs	r2, #10
 80060ea:	f004 f9f3 	bl	800a4d4 <HAL_I2C_IsDeviceReady>
 80060ee:	4603      	mov	r3, r0
 80060f0:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 80060f8:	4816      	ldr	r0, [pc, #88]	; (8006154 <sht31_init+0xa0>)
 80060fa:	f00c f8d1 	bl	80122a0 <puts>
		printf("Errorcode: %d\n", _ret);
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	4619      	mov	r1, r3
 8006102:	4815      	ldr	r0, [pc, #84]	; (8006158 <sht31_init+0xa4>)
 8006104:	f00c f844 	bl	8012190 <iprintf>
		return 0;
 8006108:	2300      	movs	r3, #0
 800610a:	e01b      	b.n	8006144 <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 800610c:	4813      	ldr	r0, [pc, #76]	; (800615c <sht31_init+0xa8>)
 800610e:	f00c f8c7 	bl	80122a0 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8006112:	f242 4316 	movw	r3, #9238	; 0x2416
 8006116:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8006118:	89bb      	ldrh	r3, [r7, #12]
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	b29b      	uxth	r3, r3
 800611e:	b2db      	uxtb	r3, r3
 8006120:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8006122:	89bb      	ldrh	r3, [r7, #12]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6858      	ldr	r0, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b299      	uxth	r1, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7a1b      	ldrb	r3, [r3, #8]
 8006136:	f107 0208 	add.w	r2, r7, #8
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	2302      	movs	r3, #2
 800613e:	f003 fea5 	bl	8009e8c <HAL_I2C_Master_Transmit>
	return 1;
 8006142:	2301      	movs	r3, #1
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	08017f58 	.word	0x08017f58
 8006150:	08017f68 	.word	0x08017f68
 8006154:	08017f78 	.word	0x08017f78
 8006158:	08017f8c 	.word	0x08017f8c
 800615c:	08017f9c 	.word	0x08017f9c

08006160 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b08d      	sub	sp, #52	; 0x34
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6858      	ldr	r0, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b299      	uxth	r1, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	7a1b      	ldrb	r3, [r3, #8]
 800617a:	f107 0214 	add.w	r2, r7, #20
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2306      	movs	r3, #6
 8006182:	f003 ff81 	bl	800a088 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8006186:	7d3b      	ldrb	r3, [r7, #20]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	b21a      	sxth	r2, r3
 800618c:	7d7b      	ldrb	r3, [r7, #21]
 800618e:	b21b      	sxth	r3, r3
 8006190:	4313      	orrs	r3, r2
 8006192:	b21b      	sxth	r3, r3
 8006194:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	b21a      	sxth	r2, r3
 800619c:	7e3b      	ldrb	r3, [r7, #24]
 800619e:	b21b      	sxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b21b      	sxth	r3, r3
 80061a4:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 80061a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b0:	ee17 0a90 	vmov	r0, s15
 80061b4:	f7fa f9c8 	bl	8000548 <__aeabi_f2d>
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	4b32      	ldr	r3, [pc, #200]	; (8006288 <sht31_read+0x128>)
 80061be:	f7fa fa1b 	bl	80005f8 <__aeabi_dmul>
 80061c2:	4603      	mov	r3, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	4618      	mov	r0, r3
 80061c8:	4621      	mov	r1, r4
 80061ca:	a32d      	add	r3, pc, #180	; (adr r3, 8006280 <sht31_read+0x120>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa fb3c 	bl	800084c <__aeabi_ddiv>
 80061d4:	4603      	mov	r3, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	4618      	mov	r0, r3
 80061da:	4621      	mov	r1, r4
 80061dc:	f7fa fd04 	bl	8000be8 <__aeabi_d2f>
 80061e0:	4603      	mov	r3, r0
 80061e2:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 80061e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800628c <sht31_read+0x12c>
 80061f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061f6:	ee17 0a90 	vmov	r0, s15
 80061fa:	f7fa f9a5 	bl	8000548 <__aeabi_f2d>
 80061fe:	a320      	add	r3, pc, #128	; (adr r3, 8006280 <sht31_read+0x120>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f7fa fb22 	bl	800084c <__aeabi_ddiv>
 8006208:	4603      	mov	r3, r0
 800620a:	460c      	mov	r4, r1
 800620c:	4618      	mov	r0, r3
 800620e:	4621      	mov	r1, r4
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <sht31_read+0x130>)
 8006216:	f7fa f837 	bl	8000288 <__aeabi_dsub>
 800621a:	4603      	mov	r3, r0
 800621c:	460c      	mov	r4, r1
 800621e:	4618      	mov	r0, r3
 8006220:	4621      	mov	r1, r4
 8006222:	f7fa fce1 	bl	8000be8 <__aeabi_d2f>
 8006226:	4603      	mov	r3, r0
 8006228:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	3304      	adds	r3, #4
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800623c:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3302      	adds	r3, #2
 8006242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006244:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8006246:	f242 4316 	movw	r3, #9238	; 0x2416
 800624a:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 800624c:	8b7b      	ldrh	r3, [r7, #26]
 800624e:	0a1b      	lsrs	r3, r3, #8
 8006250:	b29b      	uxth	r3, r3
 8006252:	b2db      	uxtb	r3, r3
 8006254:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8006256:	8b7b      	ldrh	r3, [r7, #26]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6858      	ldr	r0, [r3, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b299      	uxth	r1, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	7a1b      	ldrb	r3, [r3, #8]
 800626a:	f107 0214 	add.w	r2, r7, #20
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2302      	movs	r3, #2
 8006272:	f003 fe0b 	bl	8009e8c <HAL_I2C_Master_Transmit>

};
 8006276:	bf00      	nop
 8006278:	372c      	adds	r7, #44	; 0x2c
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}
 800627e:	bf00      	nop
 8006280:	00000000 	.word	0x00000000
 8006284:	40efffe0 	.word	0x40efffe0
 8006288:	40590000 	.word	0x40590000
 800628c:	432f0000 	.word	0x432f0000
 8006290:	40468000 	.word	0x40468000

08006294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800629a:	e003      	b.n	80062a4 <LoopCopyDataInit>

0800629c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800629e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80062a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80062a2:	3104      	adds	r1, #4

080062a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80062a4:	480b      	ldr	r0, [pc, #44]	; (80062d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80062a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80062aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80062ac:	d3f6      	bcc.n	800629c <CopyDataInit>
  ldr  r2, =_sbss
 80062ae:	4a0b      	ldr	r2, [pc, #44]	; (80062dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80062b0:	e002      	b.n	80062b8 <LoopFillZerobss>

080062b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80062b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80062b4:	f842 3b04 	str.w	r3, [r2], #4

080062b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80062ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80062bc:	d3f9      	bcc.n	80062b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80062be:	f7fe fdcb 	bl	8004e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062c2:	f00b fad1 	bl	8011868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062c6:	f7fc fc99 	bl	8002bfc <main>
  bx  lr    
 80062ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80062cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80062d0:	080184a0 	.word	0x080184a0
  ldr  r0, =_sdata
 80062d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80062d8:	20000378 	.word	0x20000378
  ldr  r2, =_sbss
 80062dc:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 80062e0:	200102b8 	.word	0x200102b8

080062e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062e4:	e7fe      	b.n	80062e4 <ADC_IRQHandler>

080062e6 <eye>:
#include "../../Inc/Util/math_utils.h"


void eye(int dim, float A[dim][dim]) {
 80062e6:	b490      	push	{r4, r7}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	1e43      	subs	r3, r0, #1
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	4603      	mov	r3, r0
 80062f8:	4619      	mov	r1, r3
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	f04f 0400 	mov.w	r4, #0
 8006306:	0154      	lsls	r4, r2, #5
 8006308:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800630c:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	e02b      	b.n	800636c <eye+0x86>
        for(int j = 0; j < dim; j++){
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e021      	b.n	800635e <eye+0x78>
            if (i == j){
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	429a      	cmp	r2, r3
 8006320:	d10d      	bne.n	800633e <eye+0x58>
				A[i][j] = 1;
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	fb03 f302 	mul.w	r3, r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	441a      	add	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	e00c      	b.n	8006358 <eye+0x72>
			} else {
				A[i][j] = 0;
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	fb03 f302 	mul.w	r3, r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	441a      	add	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	3301      	adds	r3, #1
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	dbd9      	blt.n	800631a <eye+0x34>
	for(int i = 0; i < dim; i++){
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3301      	adds	r3, #1
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	dbcf      	blt.n	8006314 <eye+0x2e>
			}
        }
    }
}
 8006374:	bf00      	nop
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bc90      	pop	{r4, r7}
 800637c:	4770      	bx	lr

0800637e <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 800637e:	b4b0      	push	{r4, r5, r7}
 8006380:	b089      	sub	sp, #36	; 0x24
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	68b8      	ldr	r0, [r7, #8]
 800638e:	1e43      	subs	r3, r0, #1
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	4603      	mov	r3, r0
 8006394:	4619      	mov	r1, r3
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	f04f 0400 	mov.w	r4, #0
 80063a2:	0154      	lsls	r4, r2, #5
 80063a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063a8:	014b      	lsls	r3, r1, #5
 80063aa:	68fd      	ldr	r5, [r7, #12]
 80063ac:	1e6b      	subs	r3, r5, #1
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	462b      	mov	r3, r5
 80063b2:	4619      	mov	r1, r3
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	f04f 0400 	mov.w	r4, #0
 80063c0:	0154      	lsls	r4, r2, #5
 80063c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063c6:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	e022      	b.n	8006414 <transpose+0x96>
		for(int j = 0; j < n; j++){
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	e018      	b.n	8006406 <transpose+0x88>
			A_T[j][i] = A[i][j];
 80063d4:	4602      	mov	r2, r0
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	fb03 f302 	mul.w	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	441a      	add	r2, r3
 80063e2:	4629      	mov	r1, r5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	fb03 f301 	mul.w	r3, r3, r1
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	4419      	add	r1, r3
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	3301      	adds	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	dbe2      	blt.n	80063d4 <transpose+0x56>
	for(int i = 0; i < m; i++){
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	3301      	adds	r3, #1
 8006412:	61bb      	str	r3, [r7, #24]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	429a      	cmp	r2, r3
 800641a:	dbd8      	blt.n	80063ce <transpose+0x50>
		}
	}
}
 800641c:	bf00      	nop
 800641e:	3724      	adds	r7, #36	; 0x24
 8006420:	46bd      	mov	sp, r7
 8006422:	bcb0      	pop	{r4, r5, r7}
 8006424:	4770      	bx	lr

08006426 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e016      	b.n	8006468 <vecadd+0x42>
		c[i] = a[i] + b[i];
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4413      	add	r3, r2
 8006442:	ed93 7a00 	vldr	s14, [r3]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	edd3 7a00 	vldr	s15, [r3]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	4413      	add	r3, r2
 800645a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800645e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	3301      	adds	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	429a      	cmp	r2, r3
 800646e:	dbe4      	blt.n	800643a <vecadd+0x14>
	}
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e016      	b.n	80064be <vecsub+0x42>
		c[i] = a[i] - b[i];
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	4413      	add	r3, r2
 8006498:	ed93 7a00 	vldr	s14, [r3]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	edd3 7a00 	vldr	s15, [r3]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	4413      	add	r3, r2
 80064b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3301      	adds	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	dbe4      	blt.n	8006490 <vecsub+0x14>
	}
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <matadd>:
    for(int i = 0; i < n; i++){
        b[i] = scalar * a[i];
    }
}

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 80064d2:	b4f0      	push	{r4, r5, r6, r7}
 80064d4:	b08a      	sub	sp, #40	; 0x28
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	1e43      	subs	r3, r0, #1
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
 80064e6:	4603      	mov	r3, r0
 80064e8:	4619      	mov	r1, r3
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	f04f 0400 	mov.w	r4, #0
 80064f6:	0154      	lsls	r4, r2, #5
 80064f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064fc:	014b      	lsls	r3, r1, #5
 80064fe:	68bd      	ldr	r5, [r7, #8]
 8006500:	1e6b      	subs	r3, r5, #1
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	462b      	mov	r3, r5
 8006506:	4619      	mov	r1, r3
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	f04f 0400 	mov.w	r4, #0
 8006514:	0154      	lsls	r4, r2, #5
 8006516:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800651a:	014b      	lsls	r3, r1, #5
 800651c:	68be      	ldr	r6, [r7, #8]
 800651e:	1e73      	subs	r3, r6, #1
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	4633      	mov	r3, r6
 8006524:	4619      	mov	r1, r3
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	f04f 0400 	mov.w	r4, #0
 8006532:	0154      	lsls	r4, r2, #5
 8006534:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006538:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	e032      	b.n	80065a6 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8006540:	2300      	movs	r3, #0
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	e028      	b.n	8006598 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8006546:	4602      	mov	r2, r0
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	fb03 f302 	mul.w	r3, r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	441a      	add	r2, r3
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	ed93 7a00 	vldr	s14, [r3]
 800655e:	462a      	mov	r2, r5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	fb03 f302 	mul.w	r3, r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	441a      	add	r2, r3
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	edd3 7a00 	vldr	s15, [r3]
 8006576:	4632      	mov	r2, r6
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	fb03 f302 	mul.w	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006582:	441a      	add	r2, r3
 8006584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	3301      	adds	r3, #1
 8006596:	623b      	str	r3, [r7, #32]
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	429a      	cmp	r2, r3
 800659e:	dbd2      	blt.n	8006546 <matadd+0x74>
	for(int i = 0; i < m; i++){
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	3301      	adds	r3, #1
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	dbc8      	blt.n	8006540 <matadd+0x6e>
        }
    }
}
 80065ae:	bf00      	nop
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bcf0      	pop	{r4, r5, r6, r7}
 80065b6:	4770      	bx	lr

080065b8 <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 80065b8:	b4f0      	push	{r4, r5, r6, r7}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	1e43      	subs	r3, r0, #1
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
 80065cc:	4603      	mov	r3, r0
 80065ce:	4619      	mov	r1, r3
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	f04f 0400 	mov.w	r4, #0
 80065dc:	0154      	lsls	r4, r2, #5
 80065de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065e2:	014b      	lsls	r3, r1, #5
 80065e4:	68bd      	ldr	r5, [r7, #8]
 80065e6:	1e6b      	subs	r3, r5, #1
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	462b      	mov	r3, r5
 80065ec:	4619      	mov	r1, r3
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	f04f 0400 	mov.w	r4, #0
 80065fa:	0154      	lsls	r4, r2, #5
 80065fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006600:	014b      	lsls	r3, r1, #5
 8006602:	68be      	ldr	r6, [r7, #8]
 8006604:	1e73      	subs	r3, r6, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	4633      	mov	r3, r6
 800660a:	4619      	mov	r1, r3
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	f04f 0400 	mov.w	r4, #0
 8006618:	0154      	lsls	r4, r2, #5
 800661a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800661e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e032      	b.n	800668c <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8006626:	2300      	movs	r3, #0
 8006628:	623b      	str	r3, [r7, #32]
 800662a:	e028      	b.n	800667e <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 800662c:	4602      	mov	r2, r0
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	fb03 f302 	mul.w	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	441a      	add	r2, r3
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	ed93 7a00 	vldr	s14, [r3]
 8006644:	462a      	mov	r2, r5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	fb03 f302 	mul.w	r3, r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	441a      	add	r2, r3
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	edd3 7a00 	vldr	s15, [r3]
 800665c:	4632      	mov	r2, r6
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	fb03 f302 	mul.w	r3, r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006668:	441a      	add	r2, r3
 800666a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	3301      	adds	r3, #1
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	dbd2      	blt.n	800662c <matsub+0x74>
	for(int i = 0; i < m; i++){
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	3301      	adds	r3, #1
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	dbc8      	blt.n	8006626 <matsub+0x6e>
        }
    }
}
 8006694:	bf00      	nop
 8006696:	3728      	adds	r7, #40	; 0x28
 8006698:	46bd      	mov	sp, r7
 800669a:	bcf0      	pop	{r4, r5, r6, r7}
 800669c:	4770      	bx	lr

0800669e <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 800669e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a0:	b08d      	sub	sp, #52	; 0x34
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6178      	str	r0, [r7, #20]
 80066a6:	6139      	str	r1, [r7, #16]
 80066a8:	60fa      	str	r2, [r7, #12]
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	693e      	ldr	r6, [r7, #16]
 80066ae:	1e73      	subs	r3, r6, #1
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	4633      	mov	r3, r6
 80066b4:	4619      	mov	r1, r3
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	f04f 0400 	mov.w	r4, #0
 80066c2:	0154      	lsls	r4, r2, #5
 80066c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066c8:	014b      	lsls	r3, r1, #5
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	3b01      	subs	r3, #1
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	4613      	mov	r3, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	f04f 0400 	mov.w	r4, #0
 80066e4:	0154      	lsls	r4, r2, #5
 80066e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066ea:	014b      	lsls	r3, r1, #5
 80066ec:	68fd      	ldr	r5, [r7, #12]
 80066ee:	1e6b      	subs	r3, r5, #1
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	462b      	mov	r3, r5
 80066f4:	4619      	mov	r1, r3
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	f04f 0400 	mov.w	r4, #0
 8006702:	0154      	lsls	r4, r2, #5
 8006704:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006708:	014b      	lsls	r3, r1, #5
	if (reset) {
 800670a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	461a      	mov	r2, r3
 800671e:	2100      	movs	r1, #0
 8006720:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006722:	f00b f8d0 	bl	80118c6 <memset>
	}
	for(int i = 0; i < m; i++){
 8006726:	2300      	movs	r3, #0
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
 800672a:	e04a      	b.n	80067c2 <matmul+0x124>
        for(int j = 0; j < o; j++){
 800672c:	2300      	movs	r3, #0
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006730:	e040      	b.n	80067b4 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8006732:	2300      	movs	r3, #0
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006736:	e036      	b.n	80067a6 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8006738:	4632      	mov	r2, r6
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	fb03 f302 	mul.w	r3, r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	441a      	add	r2, r3
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	ed93 7a00 	vldr	s14, [r3]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	fb03 f302 	mul.w	r3, r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675c:	441a      	add	r2, r3
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	edd3 7a00 	vldr	s15, [r3]
 8006768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800676c:	462a      	mov	r2, r5
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	fb03 f302 	mul.w	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006778:	441a      	add	r2, r3
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	edd3 7a00 	vldr	s15, [r3]
 8006784:	462a      	mov	r2, r5
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	fb03 f302 	mul.w	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006790:	441a      	add	r2, r3
 8006792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	3301      	adds	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	dbc4      	blt.n	8006738 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	3301      	adds	r3, #1
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	dbba      	blt.n	8006732 <matmul+0x94>
	for(int i = 0; i < m; i++){
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	3301      	adds	r3, #1
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
 80067c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	dbb0      	blt.n	800672c <matmul+0x8e>
            }
        }
    }
}
 80067ca:	bf00      	nop
 80067cc:	3734      	adds	r7, #52	; 0x34
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067d2 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 80067d2:	b5b0      	push	{r4, r5, r7, lr}
 80067d4:	b088      	sub	sp, #32
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	68bd      	ldr	r5, [r7, #8]
 80067e2:	1e6b      	subs	r3, r5, #1
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	462b      	mov	r3, r5
 80067e8:	4619      	mov	r1, r3
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	f04f 0400 	mov.w	r4, #0
 80067f6:	0154      	lsls	r4, r2, #5
 80067f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067fc:	014b      	lsls	r3, r1, #5
	if (reset) {
 80067fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006802:	2b00      	cmp	r3, #0
 8006804:	d006      	beq.n	8006814 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	461a      	mov	r2, r3
 800680c:	2100      	movs	r1, #0
 800680e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006810:	f00b f859 	bl	80118c6 <memset>
	}
	for(int i = 0; i < m; i++){
 8006814:	2300      	movs	r3, #0
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	e02e      	b.n	8006878 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 800681a:	2300      	movs	r3, #0
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	e024      	b.n	800686a <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8006820:	462a      	mov	r2, r5
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	fb03 f302 	mul.w	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	441a      	add	r2, r3
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	ed93 7a00 	vldr	s14, [r3]
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	4413      	add	r3, r2
 8006840:	edd3 7a00 	vldr	s15, [r3]
 8006844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684e:	4413      	add	r3, r2
 8006850:	edd3 7a00 	vldr	s15, [r3]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685a:	4413      	add	r3, r2
 800685c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006860:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	3301      	adds	r3, #1
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	dbd6      	blt.n	8006820 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	3301      	adds	r3, #1
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	dbcc      	blt.n	800681a <matvecprod+0x48>
        }
    }
}
 8006880:	bf00      	nop
 8006882:	3720      	adds	r7, #32
 8006884:	46bd      	mov	sp, r7
 8006886:	bdb0      	pop	{r4, r5, r7, pc}

08006888 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int lower_triangular_inverse(int n, float *L) {
 8006888:	b480      	push	{r7}
 800688a:	b08b      	sub	sp, #44	; 0x2c
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
   int i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	e01d      	b.n	80068d8 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	edd3 7a00 	vldr	s15, [r3]
 80068a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80068a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068aa:	d102      	bne.n	80068b2 <lower_triangular_inverse+0x2a>
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b0:	e076      	b.n	80069a0 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	ed93 7a00 	vldr	s14, [r3]
 80068b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3301      	adds	r3, #1
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4413      	add	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3301      	adds	r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	dbdd      	blt.n	800689c <lower_triangular_inverse+0x14>
    }
    
    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80068e0:	2301      	movs	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	4413      	add	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	e052      	b.n	8006996 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80068f0:	2300      	movs	r3, #0
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	e041      	b.n	800697e <lower_triangular_inverse+0xf6>
            sum = 0.0;
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	e01b      	b.n	8006942 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4413      	add	r3, r2
 8006912:	ed93 7a00 	vldr	s14, [r3]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	edd3 7a00 	vldr	s15, [r3]
 8006922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006926:	ed97 7a03 	vldr	s14, [r7, #12]
 800692a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800692e:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	3301      	adds	r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4413      	add	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	429a      	cmp	r2, r3
 8006948:	dbdf      	blt.n	800690a <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4413      	add	r3, r2
 8006952:	edd3 7a00 	vldr	s15, [r3]
 8006956:	eeb1 7a67 	vneg.f32	s14, s15
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4413      	add	r3, r2
 8006962:	edd7 7a03 	vldr	s15, [r7, #12]
 8006966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696a:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	3301      	adds	r3, #1
 800697c:	623b      	str	r3, [r7, #32]
 800697e:	6a3a      	ldr	r2, [r7, #32]
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	429a      	cmp	r2, r3
 8006984:	dbb9      	blt.n	80068fa <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	3301      	adds	r3, #1
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4413      	add	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	dba8      	blt.n	80068f0 <lower_triangular_inverse+0x68>
        }
    }
    
    return 0;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	372c      	adds	r7, #44	; 0x2c
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int n, float A[n][n], float L[n][n]) {
 80069ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069b0:	b08b      	sub	sp, #44	; 0x2c
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	68fe      	ldr	r6, [r7, #12]
 80069bc:	1e73      	subs	r3, r6, #1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	4633      	mov	r3, r6
 80069c2:	4619      	mov	r1, r3
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	f04f 0400 	mov.w	r4, #0
 80069d0:	0154      	lsls	r4, r2, #5
 80069d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80069d6:	014b      	lsls	r3, r1, #5
 80069d8:	68fd      	ldr	r5, [r7, #12]
 80069da:	1e6b      	subs	r3, r5, #1
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	462b      	mov	r3, r5
 80069e0:	4619      	mov	r1, r3
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	f04f 0400 	mov.w	r4, #0
 80069ee:	0154      	lsls	r4, r2, #5
 80069f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80069f4:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	461a      	mov	r2, r3
 8006a02:	2100      	movs	r1, #0
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f00a ff5e 	bl	80118c6 <memset>
    for (int i = 0; i < n; i++)
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	e09f      	b.n	8006b50 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8006a10:	2300      	movs	r3, #0
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	e093      	b.n	8006b3e <cholesky+0x192>
            float s = 0;
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	e022      	b.n	8006a68 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8006a22:	462a      	mov	r2, r5
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	fb03 f302 	mul.w	r3, r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	441a      	add	r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	ed93 7a00 	vldr	s14, [r3]
 8006a3a:	462a      	mov	r2, r5
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	fb03 f302 	mul.w	r3, r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	441a      	add	r2, r3
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	edd3 7a00 	vldr	s15, [r3]
 8006a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a56:	ed97 7a08 	vldr	s14, [r7, #32]
 8006a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a5e:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	3301      	adds	r3, #1
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	dbd8      	blt.n	8006a22 <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d116      	bne.n	8006aa6 <cholesky+0xfa>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	fb03 f302 	mul.w	r3, r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	441a      	add	r2, r3
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	ed93 7a00 	vldr	s14, [r3]
 8006a90:	edd7 7a08 	vldr	s15, [r7, #32]
 8006a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a98:	eeb0 0a67 	vmov.f32	s0, s15
 8006a9c:	f00f faac 	bl	8015ff8 <sqrtf>
 8006aa0:	ee10 1a10 	vmov	r1, s0
 8006aa4:	e03d      	b.n	8006b22 <cholesky+0x176>
 8006aa6:	462a      	mov	r2, r5
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	fb03 f302 	mul.w	r3, r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	441a      	add	r2, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7f9 fd43 	bl	8000548 <__aeabi_f2d>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	4623      	mov	r3, r4
 8006aca:	f04f 0000 	mov.w	r0, #0
 8006ace:	4925      	ldr	r1, [pc, #148]	; (8006b64 <cholesky+0x1b8>)
 8006ad0:	f7f9 febc 	bl	800084c <__aeabi_ddiv>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	4698      	mov	r8, r3
 8006ada:	46a1      	mov	r9, r4
 8006adc:	4632      	mov	r2, r6
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	fb03 f302 	mul.w	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	441a      	add	r2, r3
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	ed93 7a00 	vldr	s14, [r3]
 8006af4:	edd7 7a08 	vldr	s15, [r7, #32]
 8006af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006afc:	ee17 0a90 	vmov	r0, s15
 8006b00:	f7f9 fd22 	bl	8000548 <__aeabi_f2d>
 8006b04:	4603      	mov	r3, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4623      	mov	r3, r4
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	4603      	mov	r3, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	f7fa f864 	bl	8000be8 <__aeabi_d2f>
 8006b20:	4601      	mov	r1, r0
 8006b22:	462a      	mov	r2, r5
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	fb03 f302 	mul.w	r3, r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	441a      	add	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	3301      	adds	r3, #1
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	f6ff af66 	blt.w	8006a16 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	f6ff af5b 	blt.w	8006a10 <cholesky+0x64>
        }
}
 8006b5a:	bf00      	nop
 8006b5c:	372c      	adds	r7, #44	; 0x2c
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b64:	3ff00000 	.word	0x3ff00000

08006b68 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int n, float A[n][n], float inverse[n][n], float lambda) {
 8006b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	b090      	sub	sp, #64	; 0x40
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	ed87 0a00 	vstr	s0, [r7]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b80:	4619      	mov	r1, r3
 8006b82:	f04f 0200 	mov.w	r2, #0
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	f04f 0400 	mov.w	r4, #0
 8006b8e:	0154      	lsls	r4, r2, #5
 8006b90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b94:	014b      	lsls	r3, r1, #5
 8006b96:	68fd      	ldr	r5, [r7, #12]
 8006b98:	1e6b      	subs	r3, r5, #1
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	f04f 0400 	mov.w	r4, #0
 8006bac:	0154      	lsls	r4, r2, #5
 8006bae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bb2:	014b      	lsls	r3, r1, #5
 8006bb4:	466b      	mov	r3, sp
 8006bb6:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	68fe      	ldr	r6, [r7, #12]
 8006bbc:	1e43      	subs	r3, r0, #1
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	f04f 0400 	mov.w	r4, #0
 8006bd0:	0154      	lsls	r4, r2, #5
 8006bd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bd6:	014b      	lsls	r3, r1, #5
 8006bd8:	4603      	mov	r3, r0
 8006bda:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8006bde:	1e73      	subs	r3, r6, #1
 8006be0:	623b      	str	r3, [r7, #32]
 8006be2:	4603      	mov	r3, r0
 8006be4:	4619      	mov	r1, r3
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	4633      	mov	r3, r6
 8006bec:	f04f 0400 	mov.w	r4, #0
 8006bf0:	fb03 fe02 	mul.w	lr, r3, r2
 8006bf4:	fb01 fc04 	mul.w	ip, r1, r4
 8006bf8:	44f4      	add	ip, lr
 8006bfa:	fba1 3403 	umull	r3, r4, r1, r3
 8006bfe:	eb0c 0204 	add.w	r2, ip, r4
 8006c02:	4614      	mov	r4, r2
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	0162      	lsls	r2, r4, #5
 8006c0e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006c12:	0159      	lsls	r1, r3, #5
 8006c14:	4603      	mov	r3, r0
 8006c16:	4619      	mov	r1, r3
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	4633      	mov	r3, r6
 8006c1e:	f04f 0400 	mov.w	r4, #0
 8006c22:	fb03 fe02 	mul.w	lr, r3, r2
 8006c26:	fb01 fc04 	mul.w	ip, r1, r4
 8006c2a:	44f4      	add	ip, lr
 8006c2c:	fba1 3403 	umull	r3, r4, r1, r3
 8006c30:	eb0c 0204 	add.w	r2, ip, r4
 8006c34:	4614      	mov	r4, r2
 8006c36:	f04f 0100 	mov.w	r1, #0
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	0162      	lsls	r2, r4, #5
 8006c40:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006c44:	0159      	lsls	r1, r3, #5
 8006c46:	4603      	mov	r3, r0
 8006c48:	4632      	mov	r2, r6
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	3303      	adds	r3, #3
 8006c52:	3307      	adds	r3, #7
 8006c54:	08db      	lsrs	r3, r3, #3
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	ebad 0d03 	sub.w	sp, sp, r3
 8006c5c:	466b      	mov	r3, sp
 8006c5e:	3303      	adds	r3, #3
 8006c60:	089b      	lsrs	r3, r3, #2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8006c66:	69f8      	ldr	r0, [r7, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	fb02 f303 	mul.w	r3, r2, r3
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	461a      	mov	r2, r3
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	f00a fe1b 	bl	80118b0 <memcpy>
    for (int i = 0; i < n; i++) {
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7e:	e022      	b.n	8006cc6 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda; 
 8006c80:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c88:	fb01 f103 	mul.w	r1, r1, r3
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	440b      	add	r3, r1
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	ed93 7a00 	vldr	s14, [r3]
 8006c98:	edd7 6a00 	vldr	s13, [r7]
 8006c9c:	edd7 7a00 	vldr	s15, [r7]
 8006ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ca4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cac:	69fa      	ldr	r2, [r7, #28]
 8006cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb0:	fb01 f103 	mul.w	r1, r1, r3
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	440b      	add	r3, r1
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	dbd8      	blt.n	8006c80 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	68fe      	ldr	r6, [r7, #12]
 8006cd2:	466b      	mov	r3, sp
 8006cd4:	469a      	mov	sl, r3
 8006cd6:	1e43      	subs	r3, r0, #1
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	f04f 0400 	mov.w	r4, #0
 8006cea:	0154      	lsls	r4, r2, #5
 8006cec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006cf0:	014b      	lsls	r3, r1, #5
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8006cf8:	1e73      	subs	r3, r6, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	4633      	mov	r3, r6
 8006d06:	f04f 0400 	mov.w	r4, #0
 8006d0a:	fb03 fe02 	mul.w	lr, r3, r2
 8006d0e:	fb01 fc04 	mul.w	ip, r1, r4
 8006d12:	44f4      	add	ip, lr
 8006d14:	fba1 3403 	umull	r3, r4, r1, r3
 8006d18:	eb0c 0204 	add.w	r2, ip, r4
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	f04f 0100 	mov.w	r1, #0
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	0162      	lsls	r2, r4, #5
 8006d28:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006d2c:	0159      	lsls	r1, r3, #5
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4619      	mov	r1, r3
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	4633      	mov	r3, r6
 8006d38:	f04f 0400 	mov.w	r4, #0
 8006d3c:	fb03 fe02 	mul.w	lr, r3, r2
 8006d40:	fb01 fc04 	mul.w	ip, r1, r4
 8006d44:	44f4      	add	ip, lr
 8006d46:	fba1 3403 	umull	r3, r4, r1, r3
 8006d4a:	eb0c 0204 	add.w	r2, ip, r4
 8006d4e:	4614      	mov	r4, r2
 8006d50:	f04f 0100 	mov.w	r1, #0
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	0162      	lsls	r2, r4, #5
 8006d5a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006d5e:	0159      	lsls	r1, r3, #5
 8006d60:	4603      	mov	r3, r0
 8006d62:	4632      	mov	r2, r6
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	3303      	adds	r3, #3
 8006d6c:	3307      	adds	r3, #7
 8006d6e:	08db      	lsrs	r3, r3, #3
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	ebad 0d03 	sub.w	sp, sp, r3
 8006d76:	466b      	mov	r3, sp
 8006d78:	3303      	adds	r3, #3
 8006d7a:	089b      	lsrs	r3, r3, #2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fe10 	bl	80069ac <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f7ff fd79 	bl	8006888 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	461a      	mov	r2, r3
 8006da2:	2100      	movs	r1, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f00a fd8e 	bl	80118c6 <memset>
    for(int i = 0; i < n; i++){
 8006daa:	2300      	movs	r3, #0
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dae:	e04e      	b.n	8006e4e <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8006db0:	2300      	movs	r3, #0
 8006db2:	633b      	str	r3, [r7, #48]	; 0x30
 8006db4:	e044      	b.n	8006e40 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8006db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bfb8      	it	lt
 8006dbe:	4613      	movlt	r3, r2
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc2:	e036      	b.n	8006e32 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8006dc4:	462a      	mov	r2, r5
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	fb03 f302 	mul.w	r3, r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	ed93 7a00 	vldr	s14, [r3]
 8006ddc:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006de4:	fb01 f103 	mul.w	r1, r1, r3
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	440b      	add	r3, r1
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	edd3 6a00 	vldr	s13, [r3]
 8006df4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dfc:	fb01 f103 	mul.w	r1, r1, r3
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	440b      	add	r3, r1
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	edd3 7a00 	vldr	s15, [r3]
 8006e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e10:	462a      	mov	r2, r5
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	fb03 f302 	mul.w	r3, r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	441a      	add	r2, r3
 8006e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	3301      	adds	r3, #1
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
 8006e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	dbc4      	blt.n	8006dc4 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	dbb6      	blt.n	8006db6 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	dbac      	blt.n	8006db0 <cholesky_inverse+0x248>
 8006e56:	46d5      	mov	sp, sl
 8006e58:	46cd      	mov	sp, r9
            }
        }
    }
}
 8006e5a:	bf00      	nop
 8006e5c:	3740      	adds	r7, #64	; 0x40
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e64 <init_env>:
#include "../Inc/env.h"

void init_env(env_t *env) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8006e6c:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8006e70:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006e8c <init_env+0x28>
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f80b 	bl	8006e90 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8006e7a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f856 	bl	8006f30 <update_env>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	47c5e680 	.word	0x47c5e680

08006e90 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8006e90:	b590      	push	{r4, r7, lr}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	ed87 0a02 	vstr	s0, [r7, #8]
 8006e9c:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7f9 fb51 	bl	8000548 <__aeabi_f2d>
 8006ea6:	a31f      	add	r3, pc, #124	; (adr r3, 8006f24 <calibrate_env+0x94>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 f9ee 	bl	800028c <__adddf3>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	f7f9 fe96 	bl	8000be8 <__aeabi_d2f>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	601a      	str	r2, [r3, #0]
	env->rho_g = RHO_REFERENCE * ((env->p_g / PRESSURE_REFERENCE) * (TEMPERATURE_REFERENCE / env->T_g));
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	edd3 7a00 	vldr	s15, [r3]
 8006ece:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006f20 <calibrate_env+0x90>
 8006ed2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	edd3 6a01 	vldr	s13, [r3, #4]
 8006edc:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
 8006ee0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee8:	ee17 0a90 	vmov	r0, s15
 8006eec:	f7f9 fb2c 	bl	8000548 <__aeabi_f2d>
 8006ef0:	a309      	add	r3, pc, #36	; (adr r3, 8006f18 <calibrate_env+0x88>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 fb7f 	bl	80005f8 <__aeabi_dmul>
 8006efa:	4603      	mov	r3, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	4618      	mov	r0, r3
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7f9 fe71 	bl	8000be8 <__aeabi_d2f>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	609a      	str	r2, [r3, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd90      	pop	{r4, r7, pc}
 8006f14:	f3af 8000 	nop.w
 8006f18:	9999999a 	.word	0x9999999a
 8006f1c:	3ff39999 	.word	0x3ff39999
 8006f20:	47c5e680 	.word	0x47c5e680
 8006f24:	66666666 	.word	0x66666666
 8006f28:	40711266 	.word	0x40711266
 8006f2c:	00000000 	.word	0x00000000

08006f30 <update_env>:

void update_env(env_t *env, float T) {
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8006f3c:	6838      	ldr	r0, [r7, #0]
 8006f3e:	f7f9 fb03 	bl	8000548 <__aeabi_f2d>
 8006f42:	a317      	add	r3, pc, #92	; (adr r3, 8006fa0 <update_env+0x70>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f7f9 f9a0 	bl	800028c <__adddf3>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4618      	mov	r0, r3
 8006f52:	4621      	mov	r1, r4
 8006f54:	f7f9 fe48 	bl	8000be8 <__aeabi_d2f>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60da      	str	r2, [r3, #12]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7f9 faf0 	bl	8000548 <__aeabi_f2d>
 8006f68:	a30f      	add	r3, pc, #60	; (adr r3, 8006fa8 <update_env+0x78>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 fb43 	bl	80005f8 <__aeabi_dmul>
 8006f72:	4603      	mov	r3, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	4618      	mov	r0, r3
 8006f78:	4621      	mov	r1, r4
 8006f7a:	f7f9 fe35 	bl	8000be8 <__aeabi_d2f>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8006f84:	ee00 3a10 	vmov	s0, r3
 8006f88:	f00e fed2 	bl	8015d30 <powf>
 8006f8c:	eef0 7a40 	vmov.f32	s15, s0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd90      	pop	{r4, r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	66666666 	.word	0x66666666
 8006fa4:	40711266 	.word	0x40711266
 8006fa8:	8c1557b7 	.word	0x8c1557b7
 8006fac:	40791e2f 	.word	0x40791e2f

08006fb0 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8006fbc:	edd7 7a00 	vldr	s15, [r7]
 8006fc0:	eef0 6ae7 	vabs.f32	s13, s15
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	ed93 7a04 	vldr	s14, [r3, #16]
 8006fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fce:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	ee07 3a90 	vmov	s15, r3
}
 8006fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8006fe8:	b5b0      	push	{r4, r5, r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e043      	b.n	8007084 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	4413      	add	r3, r2
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d03a      	beq.n	800707e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	4618      	mov	r0, r3
 800700e:	f7f9 fa9b 	bl	8000548 <__aeabi_f2d>
 8007012:	a322      	add	r3, pc, #136	; (adr r3, 800709c <pressure2altitudeAGL+0xb4>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 fc18 	bl	800084c <__aeabi_ddiv>
 800701c:	4603      	mov	r3, r0
 800701e:	460c      	mov	r4, r1
 8007020:	4625      	mov	r5, r4
 8007022:	461c      	mov	r4, r3
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	ed93 7a00 	vldr	s14, [r3]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	edd3 7a00 	vldr	s15, [r3]
 8007036:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800703a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007098 <pressure2altitudeAGL+0xb0>
 800703e:	eeb0 0a66 	vmov.f32	s0, s13
 8007042:	f00e fe75 	bl	8015d30 <powf>
 8007046:	eeb0 7a40 	vmov.f32	s14, s0
 800704a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800704e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007052:	ee17 0a90 	vmov	r0, s15
 8007056:	f7f9 fa77 	bl	8000548 <__aeabi_f2d>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4620      	mov	r0, r4
 8007060:	4629      	mov	r1, r5
 8007062:	f7f9 fac9 	bl	80005f8 <__aeabi_dmul>
 8007066:	4603      	mov	r3, r0
 8007068:	460c      	mov	r4, r1
 800706a:	4618      	mov	r0, r3
 800706c:	4621      	mov	r1, r4
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007074:	18d4      	adds	r4, r2, r3
 8007076:	f7f9 fdb7 	bl	8000be8 <__aeabi_d2f>
 800707a:	4603      	mov	r3, r0
 800707c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	3301      	adds	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	dbb7      	blt.n	8006ffc <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 800708c:	bf00      	nop
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bdb0      	pop	{r4, r5, r7, pc}
 8007094:	f3af 8000 	nop.w
 8007098:	3e42c4dc 	.word	0x3e42c4dc
 800709c:	76c8b439 	.word	0x76c8b439
 80070a0:	3f7a9fbe 	.word	0x3f7a9fbe
 80070a4:	00000000 	.word	0x00000000

080070a8 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 80070a8:	b5b0      	push	{r4, r5, r7, lr}
 80070aa:	ed2d 8b02 	vpush	{d8}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e047      	b.n	8007150 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	4413      	add	r3, r2
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d03e      	beq.n	800714a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	ed93 8a00 	vldr	s16, [r3]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	4413      	add	r3, r2
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7f9 fa33 	bl	8000548 <__aeabi_f2d>
 80070e2:	a323      	add	r3, pc, #140	; (adr r3, 8007170 <altitudeAGL2pressure+0xc8>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 fa86 	bl	80005f8 <__aeabi_dmul>
 80070ec:	4603      	mov	r3, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	4625      	mov	r5, r4
 80070f2:	461c      	mov	r4, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7f9 fa25 	bl	8000548 <__aeabi_f2d>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 fba1 	bl	800084c <__aeabi_ddiv>
 800710a:	4603      	mov	r3, r0
 800710c:	460c      	mov	r4, r1
 800710e:	461a      	mov	r2, r3
 8007110:	4623      	mov	r3, r4
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	4914      	ldr	r1, [pc, #80]	; (8007168 <altitudeAGL2pressure+0xc0>)
 8007118:	f7f9 f8b6 	bl	8000288 <__aeabi_dsub>
 800711c:	4603      	mov	r3, r0
 800711e:	460c      	mov	r4, r1
 8007120:	4618      	mov	r0, r3
 8007122:	4621      	mov	r1, r4
 8007124:	f7f9 fd60 	bl	8000be8 <__aeabi_d2f>
 8007128:	4603      	mov	r3, r0
 800712a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800716c <altitudeAGL2pressure+0xc4>
 800712e:	ee00 3a10 	vmov	s0, r3
 8007132:	f00e fdfd 	bl	8015d30 <powf>
 8007136:	eef0 7a40 	vmov.f32	s15, s0
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007140:	4413      	add	r3, r2
 8007142:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007146:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	3301      	adds	r3, #1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	429a      	cmp	r2, r3
 8007156:	dbb3      	blt.n	80070c0 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8007158:	bf00      	nop
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	ecbd 8b02 	vpop	{d8}
 8007162:	bdb0      	pop	{r4, r5, r7, pc}
 8007164:	f3af 8000 	nop.w
 8007168:	3ff00000 	.word	0x3ff00000
 800716c:	40a83d87 	.word	0x40a83d87
 8007170:	76c8b439 	.word	0x76c8b439
 8007174:	3f7a9fbe 	.word	0x3f7a9fbe

08007178 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8007178:	b5b0      	push	{r4, r5, r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	f7f9 f9dd 	bl	8000548 <__aeabi_f2d>
 800718e:	a323      	add	r3, pc, #140	; (adr r3, 800721c <altitude_gradient+0xa4>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f7f9 fa30 	bl	80005f8 <__aeabi_dmul>
 8007198:	4603      	mov	r3, r0
 800719a:	460c      	mov	r4, r1
 800719c:	4625      	mov	r5, r4
 800719e:	461c      	mov	r4, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7f9 f9cf 	bl	8000548 <__aeabi_f2d>
 80071aa:	a31e      	add	r3, pc, #120	; (adr r3, 8007224 <altitude_gradient+0xac>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 fa22 	bl	80005f8 <__aeabi_dmul>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4620      	mov	r0, r4
 80071ba:	4629      	mov	r1, r5
 80071bc:	f7f9 fb46 	bl	800084c <__aeabi_ddiv>
 80071c0:	4603      	mov	r3, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	4625      	mov	r5, r4
 80071c6:	461c      	mov	r4, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	edd3 7a00 	vldr	s15, [r3]
 80071ce:	ed97 7a00 	vldr	s14, [r7]
 80071d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80071d6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007218 <altitude_gradient+0xa0>
 80071da:	eeb0 0a66 	vmov.f32	s0, s13
 80071de:	f00e fda7 	bl	8015d30 <powf>
 80071e2:	ee10 3a10 	vmov	r3, s0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 f9ae 	bl	8000548 <__aeabi_f2d>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f9 fa00 	bl	80005f8 <__aeabi_dmul>
 80071f8:	4603      	mov	r3, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	4618      	mov	r0, r3
 80071fe:	4621      	mov	r1, r4
 8007200:	f7f9 fcf2 	bl	8000be8 <__aeabi_d2f>
 8007204:	4603      	mov	r3, r0
 8007206:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	ee07 3a90 	vmov	s15, r3
}
 800720e:	eeb0 0a67 	vmov.f32	s0, s15
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bdb0      	pop	{r4, r5, r7, pc}
 8007218:	bf4f4ec9 	.word	0xbf4f4ec9
 800721c:	640f3ea7 	.word	0x640f3ea7
 8007220:	c071f0fd 	.word	0xc071f0fd
 8007224:	51eb851f 	.word	0x51eb851f
 8007228:	40239eb8 	.word	0x40239eb8
 800722c:	00000000 	.word	0x00000000

08007230 <detect_flight_phase>:
#include "../Inc/flight_phase_detection.h"

void detect_flight_phase(timestamp_t t, flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data)
{   
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
    /* timestamp_t t needs to be the tick time in [ms] */

    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	3b01      	subs	r3, #1
 8007242:	2b09      	cmp	r3, #9
 8007244:	f200 81d1 	bhi.w	80075ea <detect_flight_phase+0x3ba>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <detect_flight_phase+0x20>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007279 	.word	0x08007279
 8007254:	080075eb 	.word	0x080075eb
 8007258:	08007323 	.word	0x08007323
 800725c:	08007375 	.word	0x08007375
 8007260:	080075eb 	.word	0x080075eb
 8007264:	080075eb 	.word	0x080075eb
 8007268:	080073c7 	.word	0x080073c7
 800726c:	08007419 	.word	0x08007419
 8007270:	080074fd 	.word	0x080074fd
 8007274:	0800747b 	.word	0x0800747b
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > FPD_LIFTOFF_ACC_THRESH) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007284:	eddf 6abf 	vldr	s13, [pc, #764]	; 8007584 <detect_flight_phase+0x354>
 8007288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800728c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007298:	dd18      	ble.n	80072cc <detect_flight_phase+0x9c>
                flight_phase_detection->safety_counter[0] += 1;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	3301      	adds	r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	b25a      	sxtb	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	f340 819b 	ble.w	80075ee <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2203      	movs	r2, #3
 80072bc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2200      	movs	r2, #0
 80072c2:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	725a      	strb	r2, [r3, #9]
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80072ca:	e190      	b.n	80075ee <detect_flight_phase+0x3be>
            else if (((float)(state_est_data->position_world[2])) / 1000 > FPD_LIFTOFF_ALT_THRESH) {
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072d8:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8007584 <detect_flight_phase+0x354>
 80072dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072e0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8007578 <detect_flight_phase+0x348>
 80072e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ec:	dc00      	bgt.n	80072f0 <detect_flight_phase+0xc0>
        break;
 80072ee:	e17e      	b.n	80075ee <detect_flight_phase+0x3be>
                flight_phase_detection->safety_counter[1] += 1;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	3301      	adds	r3, #1
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	b25a      	sxtb	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007308:	2b03      	cmp	r3, #3
 800730a:	f340 8170 	ble.w	80075ee <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2203      	movs	r2, #3
 8007312:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2200      	movs	r2, #0
 8007318:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2200      	movs	r2, #0
 800731e:	725a      	strb	r2, [r3, #9]
        break;
 8007320:	e165      	b.n	80075ee <detect_flight_phase+0x3be>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800732e:	eddf 6a95 	vldr	s13, [pc, #596]	; 8007584 <detect_flight_phase+0x354>
 8007332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	d400      	bmi.n	8007342 <detect_flight_phase+0x112>
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 8007340:	e157      	b.n	80075f2 <detect_flight_phase+0x3c2>
                flight_phase_detection->safety_counter[0] += 1;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	3301      	adds	r3, #1
 800734c:	b2db      	uxtb	r3, r3
 800734e:	b25a      	sxtb	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800735a:	2b03      	cmp	r3, #3
 800735c:	f340 8149 	ble.w	80075f2 <detect_flight_phase+0x3c2>
                    flight_phase_detection->flight_phase = COASTING;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2204      	movs	r2, #4
 8007364:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2200      	movs	r2, #0
 8007370:	725a      	strb	r2, [r3, #9]
        break;
 8007372:	e13e      	b.n	80075f2 <detect_flight_phase+0x3c2>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #else
                if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007380:	eddf 6a80 	vldr	s13, [pc, #512]	; 8007584 <detect_flight_phase+0x354>
 8007384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800738c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007390:	d400      	bmi.n	8007394 <detect_flight_phase+0x164>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #endif
        break;
 8007392:	e130      	b.n	80075f6 <detect_flight_phase+0x3c6>
                    flight_phase_detection->safety_counter[0] += 1;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	3301      	adds	r3, #1
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	b25a      	sxtb	r2, r3
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	721a      	strb	r2, [r3, #8]
                    if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	f340 8122 	ble.w	80075f6 <detect_flight_phase+0x3c6>
                        flight_phase_detection->flight_phase = DROGUE_DESCENT;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2208      	movs	r2, #8
 80073b6:	701a      	strb	r2, [r3, #0]
                        flight_phase_detection->safety_counter[0] = 0;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	721a      	strb	r2, [r3, #8]
                        flight_phase_detection->safety_counter[1] = 0;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2200      	movs	r2, #0
 80073c2:	725a      	strb	r2, [r3, #9]
        break;
 80073c4:	e117      	b.n	80075f6 <detect_flight_phase+0x3c6>
                }
            #endif
        break;

        case APOGEE_APPROACH:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073d2:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8007584 <detect_flight_phase+0x354>
 80073d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e2:	d400      	bmi.n	80073e6 <detect_flight_phase+0x1b6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80073e4:	e109      	b.n	80075fa <detect_flight_phase+0x3ca>
                flight_phase_detection->safety_counter[0] += 1;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	3301      	adds	r3, #1
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	b25a      	sxtb	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f340 80fb 	ble.w	80075fa <detect_flight_phase+0x3ca>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2208      	movs	r2, #8
 8007408:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2200      	movs	r2, #0
 800740e:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	725a      	strb	r2, [r3, #9]
        break;
 8007416:	e0f0      	b.n	80075fa <detect_flight_phase+0x3ca>

        case DROGUE_DESCENT:
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007424:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007584 <detect_flight_phase+0x354>
 8007428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800742c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800757c <detect_flight_phase+0x34c>
 8007430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007438:	d400      	bmi.n	800743c <detect_flight_phase+0x20c>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 800743a:	e0e0      	b.n	80075fe <detect_flight_phase+0x3ce>
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80db 	beq.w	80075fe <detect_flight_phase+0x3ce>
                flight_phase_detection->safety_counter[0] += 1;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	3301      	adds	r3, #1
 8007452:	b2db      	uxtb	r3, r3
 8007454:	b25a      	sxtb	r2, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007460:	2b03      	cmp	r3, #3
 8007462:	f340 80cc 	ble.w	80075fe <detect_flight_phase+0x3ce>
                    flight_phase_detection->flight_phase = MAIN_DESCENT;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	220a      	movs	r2, #10
 800746a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	725a      	strb	r2, [r3, #9]
        break;
 8007478:	e0c1      	b.n	80075fe <detect_flight_phase+0x3ce>
        
        case MAIN_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007486:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8007584 <detect_flight_phase+0x354>
 800748a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800748e:	eef0 7ae7 	vabs.f32	s15, s15
 8007492:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749e:	d400      	bmi.n	80074a2 <detect_flight_phase+0x272>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 80074a0:	e0af      	b.n	8007602 <detect_flight_phase+0x3d2>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ae:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007584 <detect_flight_phase+0x354>
 80074b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074b6:	eef0 7ae7 	vabs.f32	s15, s15
 80074ba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007580 <detect_flight_phase+0x350>
 80074be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c6:	d400      	bmi.n	80074ca <detect_flight_phase+0x29a>
        break;
 80074c8:	e09b      	b.n	8007602 <detect_flight_phase+0x3d2>
                flight_phase_detection->safety_counter[0] += 1;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3301      	adds	r3, #1
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	b25a      	sxtb	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80074e2:	2b13      	cmp	r3, #19
 80074e4:	f340 808d 	ble.w	8007602 <detect_flight_phase+0x3d2>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	220b      	movs	r2, #11
 80074ec:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2200      	movs	r2, #0
 80074f2:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	725a      	strb	r2, [r3, #9]
        break;
 80074fa:	e082      	b.n	8007602 <detect_flight_phase+0x3d2>

        case BALLISTIC_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007508:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007584 <detect_flight_phase+0x354>
 800750c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007510:	eef0 7ae7 	vabs.f32	s15, s15
 8007514:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	d536      	bpl.n	8007590 <detect_flight_phase+0x360>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800752e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8007584 <detect_flight_phase+0x354>
 8007532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007536:	eef0 7ae7 	vabs.f32	s15, s15
 800753a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007580 <detect_flight_phase+0x350>
 800753e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	d523      	bpl.n	8007590 <detect_flight_phase+0x360>
                flight_phase_detection->safety_counter[0] += 1;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	3301      	adds	r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	b25a      	sxtb	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007560:	2b13      	cmp	r3, #19
 8007562:	dd41      	ble.n	80075e8 <detect_flight_phase+0x3b8>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	220b      	movs	r2, #11
 8007568:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 8007576:	e037      	b.n	80075e8 <detect_flight_phase+0x3b8>
 8007578:	43160000 	.word	0x43160000
 800757c:	43c80000 	.word	0x43c80000
 8007580:	43480000 	.word	0x43480000
 8007584:	447a0000 	.word	0x447a0000
 8007588:	42700000 	.word	0x42700000
 800758c:	49742400 	.word	0x49742400
                }
            }
            /* we assume a normal descent with parachute when the absolute velocity of the rocket in vertical direction is smaller than 40 m/s */
            else if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) < FPD_BALLISTIC_VEL_THRESH_LOW) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800759c:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8007584 <detect_flight_phase+0x354>
 80075a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075a4:	eef0 7ae7 	vabs.f32	s15, s15
 80075a8:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8007588 <detect_flight_phase+0x358>
 80075ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d400      	bmi.n	80075b8 <detect_flight_phase+0x388>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80075b6:	e026      	b.n	8007606 <detect_flight_phase+0x3d6>
                flight_phase_detection->safety_counter[1] += 1;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	3301      	adds	r3, #1
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	b25a      	sxtb	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	dd18      	ble.n	8007606 <detect_flight_phase+0x3d6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2208      	movs	r2, #8
 80075d8:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2200      	movs	r2, #0
 80075de:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	725a      	strb	r2, [r3, #9]
        break;
 80075e6:	e00e      	b.n	8007606 <detect_flight_phase+0x3d6>
 80075e8:	e00d      	b.n	8007606 <detect_flight_phase+0x3d6>

        default:
        break;
 80075ea:	bf00      	nop
 80075ec:	e00c      	b.n	8007608 <detect_flight_phase+0x3d8>
        break;
 80075ee:	bf00      	nop
 80075f0:	e00a      	b.n	8007608 <detect_flight_phase+0x3d8>
        break;
 80075f2:	bf00      	nop
 80075f4:	e008      	b.n	8007608 <detect_flight_phase+0x3d8>
        break;
 80075f6:	bf00      	nop
 80075f8:	e006      	b.n	8007608 <detect_flight_phase+0x3d8>
        break;
 80075fa:	bf00      	nop
 80075fc:	e004      	b.n	8007608 <detect_flight_phase+0x3d8>
        break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <detect_flight_phase+0x3d8>
        break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <detect_flight_phase+0x3d8>
        break;
 8007606:	bf00      	nop
    }

    flight_phase_detection->mach_number = (float)(state_est_data->mach_number) / 1000000;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007614:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 800758c <detect_flight_phase+0x35c>
 8007618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	4618      	mov	r0, r3
 8007628:	f7f8 ff8e 	bl	8000548 <__aeabi_f2d>
 800762c:	a312      	add	r3, pc, #72	; (adr r3, 8007678 <detect_flight_phase+0x448>)
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f7f9 fa67 	bl	8000b04 <__aeabi_dcmpge>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <detect_flight_phase+0x414>
        flight_phase_detection->mach_regime = SUPERSONIC;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2203      	movs	r2, #3
 8007640:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8007642:	e013      	b.n	800766c <detect_flight_phase+0x43c>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4618      	mov	r0, r3
 800764a:	f7f8 ff7d 	bl	8000548 <__aeabi_f2d>
 800764e:	a30c      	add	r3, pc, #48	; (adr r3, 8007680 <detect_flight_phase+0x450>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f9 fa56 	bl	8000b04 <__aeabi_dcmpge>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <detect_flight_phase+0x436>
        flight_phase_detection->mach_regime = TRANSONIC;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2202      	movs	r2, #2
 8007662:	705a      	strb	r2, [r3, #1]
}
 8007664:	e002      	b.n	800766c <detect_flight_phase+0x43c>
        flight_phase_detection->mach_regime = SUBSONIC;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2201      	movs	r2, #1
 800766a:	705a      	strb	r2, [r3, #1]
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	f3af 8000 	nop.w
 8007678:	cccccccd 	.word	0xcccccccd
 800767c:	3ff4cccc 	.word	0x3ff4cccc
 8007680:	9999999a 	.word	0x9999999a
 8007684:	3fe99999 	.word	0x3fe99999

08007688 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	605a      	str	r2, [r3, #4]
    flight_phase_detection->safety_counter[0] = 0;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	721a      	strb	r2, [r3, #8]
    flight_phase_detection->safety_counter[1] = 0;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	725a      	strb	r2, [r3, #9]
    flight_phase_detection->t_bias_reset_start = -1;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	22ff      	movs	r2, #255	; 0xff
 80076b4:	729a      	strb	r2, [r3, #10]
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <reset_kf_state>:
#include "../Inc/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 80076c4:	b5b0      	push	{r4, r5, r7, lr}
 80076c6:	b0c2      	sub	sp, #264	; 0x108
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	1d3b      	adds	r3, r7, #4
 80076cc:	6018      	str	r0, [r3, #0]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{2.0E-4}, {2.0E-2}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 40) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 2.5E-2, 3.125E-4}, {0, 1.0E-0, 2.5E-2}, {0.0, 0.0, 1.0E-0}};
 80076ce:	4b4c      	ldr	r3, [pc, #304]	; (8007800 <reset_kf_state+0x13c>)
 80076d0:	f107 040c 	add.w	r4, r7, #12
 80076d4:	461d      	mov	r5, r3
 80076d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076de:	682b      	ldr	r3, [r5, #0]
 80076e0:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{3.125E-4}, {2.5E-2}, {0.0}};
 80076e2:	4a48      	ldr	r2, [pc, #288]	; (8007804 <reset_kf_state+0x140>)
 80076e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80076e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80076ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{3.125E-4}, {2.5E-2}, {0.0}};
 80076ee:	4a45      	ldr	r2, [pc, #276]	; (8007804 <reset_kf_state+0x140>)
 80076f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80076f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80076f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f107 010c 	add.w	r1, r7, #12
 8007702:	2224      	movs	r2, #36	; 0x24
 8007704:	4618      	mov	r0, r3
 8007706:	f00a f8d3 	bl	80118b0 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 800770a:	1d3b      	adds	r3, r7, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3348      	adds	r3, #72	; 0x48
 8007710:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007714:	220c      	movs	r2, #12
 8007716:	4618      	mov	r0, r3
 8007718:	f00a f8ca 	bl	80118b0 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3354      	adds	r3, #84	; 0x54
 8007722:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8007726:	220c      	movs	r2, #12
 8007728:	4618      	mov	r0, r3
 800772a:	f00a f8c1 	bl	80118b0 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8007746:	4b30      	ldr	r3, [pc, #192]	; (8007808 <reset_kf_state+0x144>)
 8007748:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800774c:	461d      	mov	r5, r3
 800774e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	33c4      	adds	r3, #196	; 0xc4
 8007760:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8007764:	220c      	movs	r2, #12
 8007766:	4618      	mov	r0, r3
 8007768:	f00a f8a2 	bl	80118b0 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	33d0      	adds	r3, #208	; 0xd0
 8007772:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8007776:	2224      	movs	r2, #36	; 0x24
 8007778:	4618      	mov	r0, r3
 800777a:	f00a f899 	bl	80118b0 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	339c      	adds	r3, #156	; 0x9c
 8007784:	2204      	movs	r2, #4
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f00a f89c 	bl	80118c6 <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 800778e:	1d3b      	adds	r3, r7, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	33a0      	adds	r3, #160	; 0xa0
 8007794:	2210      	movs	r2, #16
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f00a f894 	bl	80118c6 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 800779e:	1d3b      	adds	r3, r7, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80077a6:	2208      	movs	r2, #8
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f00a f88b 	bl	80118c6 <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80077b0:	1d3b      	adds	r3, r7, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80077b8:	2202      	movs	r2, #2
 80077ba:	2100      	movs	r1, #0
 80077bc:	4618      	mov	r0, r3
 80077be:	f00a f882 	bl	80118c6 <memset>
    kf_state->num_z_active = 0;
 80077c2:	1d3b      	adds	r3, r7, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80077cc:	1d3b      	adds	r3, r7, #4
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	1d3b      	adds	r3, r7, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3324      	adds	r3, #36	; 0x24
 80077d6:	2103      	movs	r1, #3
 80077d8:	2003      	movs	r0, #3
 80077da:	f7fe fdd0 	bl	800637e <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80077de:	1d3b      	adds	r3, r7, #4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80077e6:	1d3b      	adds	r3, r7, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3360      	adds	r3, #96	; 0x60
 80077ec:	2101      	movs	r1, #1
 80077ee:	2003      	movs	r0, #3
 80077f0:	f7fe fdc5 	bl	800637e <transpose>
}
 80077f4:	bf00      	nop
 80077f6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bdb0      	pop	{r4, r5, r7, pc}
 80077fe:	bf00      	nop
 8007800:	08017fb0 	.word	0x08017fb0
 8007804:	08017fd4 	.word	0x08017fd4
 8007808:	08017fe0 	.word	0x08017fe0

0800780c <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af04      	add	r7, sp, #16
 8007812:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	33f4      	adds	r3, #244	; 0xf4
 8007820:	2201      	movs	r2, #1
 8007822:	9201      	str	r2, [sp, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4603      	mov	r3, r0
 8007828:	460a      	mov	r2, r1
 800782a:	2103      	movs	r1, #3
 800782c:	2003      	movs	r0, #3
 800782e:	f7fe ffd0 	bl	80067d2 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	33f4      	adds	r3, #244	; 0xf4
 8007842:	2200      	movs	r2, #0
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4603      	mov	r3, r0
 800784a:	460a      	mov	r2, r1
 800784c:	2101      	movs	r1, #1
 800784e:	2003      	movs	r0, #3
 8007850:	f7fe ffbf 	bl	80067d2 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	33d0      	adds	r3, #208	; 0xd0
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8007860:	2101      	movs	r1, #1
 8007862:	9102      	str	r1, [sp, #8]
 8007864:	9201      	str	r2, [sp, #4]
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	4603      	mov	r3, r0
 800786a:	2203      	movs	r2, #3
 800786c:	2103      	movs	r1, #3
 800786e:	2003      	movs	r0, #3
 8007870:	f7fe ff15 	bl	800669e <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	339c      	adds	r3, #156	; 0x9c
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8007884:	2101      	movs	r1, #1
 8007886:	9102      	str	r1, [sp, #8]
 8007888:	9201      	str	r2, [sp, #4]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4603      	mov	r3, r0
 800788e:	2201      	movs	r2, #1
 8007890:	2101      	movs	r1, #1
 8007892:	2003      	movs	r0, #3
 8007894:	f7fe ff03 	bl	800669e <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80078a8:	2101      	movs	r1, #1
 80078aa:	9102      	str	r1, [sp, #8]
 80078ac:	9201      	str	r2, [sp, #4]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	4603      	mov	r3, r0
 80078b2:	2203      	movs	r2, #3
 80078b4:	2103      	movs	r1, #3
 80078b6:	2003      	movs	r0, #3
 80078b8:	f7fe fef1 	bl	800669e <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3360      	adds	r3, #96	; 0x60
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80078cc:	2100      	movs	r1, #0
 80078ce:	9102      	str	r1, [sp, #8]
 80078d0:	9201      	str	r2, [sp, #4]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	4603      	mov	r3, r0
 80078d6:	2203      	movs	r2, #3
 80078d8:	2101      	movs	r1, #1
 80078da:	2003      	movs	r0, #3
 80078dc:	f7fe fedf 	bl	800669e <matmul>
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	336c      	adds	r3, #108	; 0x6c
 80078f4:	2218      	movs	r2, #24
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f009 ffe4 	bl	80118c6 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	e021      	b.n	8007948 <select_kf_observation_matrices+0x60>
        if (kf_state->z_active[i]) {
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4613      	mov	r3, r2
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	336c      	adds	r3, #108	; 0x6c
 8007924:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	e00a      	b.n	8007942 <select_kf_observation_matrices+0x5a>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4613      	mov	r3, r2
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	440b      	add	r3, r1
 800793a:	33a0      	adds	r3, #160	; 0xa0
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b01      	cmp	r3, #1
 800794c:	ddda      	ble.n	8007904 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3384      	adds	r3, #132	; 0x84
 8007958:	2103      	movs	r1, #3
 800795a:	2002      	movs	r0, #2
 800795c:	f7fe fd0f 	bl	800637e <transpose>
}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af04      	add	r7, sp, #16
 800796e:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007982:	2201      	movs	r2, #1
 8007984:	9201      	str	r2, [sp, #4]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4603      	mov	r3, r0
 800798a:	460a      	mov	r2, r1
 800798c:	2103      	movs	r1, #3
 800798e:	2002      	movs	r0, #2
 8007990:	f7fe ff1f 	bl	80067d2 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079a6:	2002      	movs	r0, #2
 80079a8:	f7fe fd68 	bl	800647c <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 80079be:	2101      	movs	r1, #1
 80079c0:	9102      	str	r1, [sp, #8]
 80079c2:	9201      	str	r2, [sp, #4]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4603      	mov	r3, r0
 80079c8:	2203      	movs	r2, #3
 80079ca:	2103      	movs	r1, #3
 80079cc:	2002      	movs	r0, #2
 80079ce:	f7fe fe66 	bl	800669e <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3384      	adds	r3, #132	; 0x84
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 80079e2:	2101      	movs	r1, #1
 80079e4:	9102      	str	r1, [sp, #8]
 80079e6:	9201      	str	r2, [sp, #4]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4603      	mov	r3, r0
 80079ec:	2202      	movs	r2, #2
 80079ee:	2103      	movs	r1, #3
 80079f0:	2002      	movs	r0, #2
 80079f2:	f7fe fe54 	bl	800669e <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	2102      	movs	r1, #2
 8007a0e:	2002      	movs	r0, #2
 8007a10:	f7fe fd5f 	bl	80064d2 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f009 ff51 	bl	80118c6 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a30:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8007b3c <kf_update+0x1d4>
 8007a34:	461a      	mov	r2, r3
 8007a36:	2002      	movs	r0, #2
 8007a38:	f7ff f896 	bl	8006b68 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3384      	adds	r3, #132	; 0x84
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	9102      	str	r1, [sp, #8]
 8007a50:	9201      	str	r2, [sp, #4]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	4603      	mov	r3, r0
 8007a56:	2202      	movs	r2, #2
 8007a58:	2103      	movs	r1, #3
 8007a5a:	2003      	movs	r0, #3
 8007a5c:	f7fe fe1f 	bl	800669e <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8007a72:	2101      	movs	r1, #1
 8007a74:	9102      	str	r1, [sp, #8]
 8007a76:	9201      	str	r2, [sp, #4]
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	2102      	movs	r1, #2
 8007a80:	2003      	movs	r0, #3
 8007a82:	f7fe fe0c 	bl	800669e <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	33c4      	adds	r3, #196	; 0xc4
 8007a96:	2201      	movs	r2, #1
 8007a98:	9201      	str	r2, [sp, #4]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	460a      	mov	r2, r1
 8007aa0:	2102      	movs	r1, #2
 8007aa2:	2003      	movs	r0, #3
 8007aa4:	f7fe fe95 	bl	80067d2 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	33c4      	adds	r3, #196	; 0xc4
 8007ab8:	2003      	movs	r0, #3
 8007aba:	f7fe fcb4 	bl	8006426 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	2003      	movs	r0, #3
 8007ac8:	f7fe fc0d 	bl	80062e6 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	336c      	adds	r3, #108	; 0x6c
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8007adc:	2101      	movs	r1, #1
 8007ade:	9102      	str	r1, [sp, #8]
 8007ae0:	9201      	str	r2, [sp, #4]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	2102      	movs	r1, #2
 8007aea:	2003      	movs	r0, #3
 8007aec:	f7fe fdd7 	bl	800669e <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f503 710e 	add.w	r1, r3, #568	; 0x238
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	460b      	mov	r3, r1
 8007b06:	2103      	movs	r1, #3
 8007b08:	2003      	movs	r0, #3
 8007b0a:	f7fe fd55 	bl	80065b8 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	32d0      	adds	r2, #208	; 0xd0
 8007b1e:	2101      	movs	r1, #1
 8007b20:	9102      	str	r1, [sp, #8]
 8007b22:	9201      	str	r2, [sp, #4]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4603      	mov	r3, r0
 8007b28:	2203      	movs	r2, #3
 8007b2a:	2103      	movs	r1, #3
 8007b2c:	2003      	movs	r0, #3
 8007b2e:	f7fe fdb6 	bl	800669e <matmul>
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	38d1b717 	.word	0x38d1b717

08007b40 <reset_state_est_state>:
#include "../Inc/state_est.h"

void reset_state_est_state(float p_g, float T_g, state_est_state_t *state_est_state) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	ed87 0a03 	vstr	s0, [r7, #12]
 8007b4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8007b4e:	6078      	str	r0, [r7, #4]
    reset_flight_phase_detection(&state_est_state->flight_phase_detection);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fd96 	bl	8007688 <reset_flight_phase_detection>

    memset(&state_est_state->state_est_data, 0, sizeof(state_est_state->state_est_data));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	224c      	movs	r2, #76	; 0x4c
 8007b60:	2100      	movs	r1, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f009 feaf 	bl	80118c6 <memset>
    memset(&state_est_state->state_est_meas, 0, sizeof(state_est_state->state_est_meas));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	334c      	adds	r3, #76	; 0x4c
 8007b6c:	2254      	movs	r2, #84	; 0x54
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f009 fea8 	bl	80118c6 <memset>
    memset(&state_est_state->state_est_meas_prior, 0, sizeof(state_est_state->state_est_meas_prior));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	33a0      	adds	r3, #160	; 0xa0
 8007b7a:	2254      	movs	r2, #84	; 0x54
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f009 fea1 	bl	80118c6 <memset>

    init_env(&state_est_state->env);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff f96a 	bl	8006e64 <init_env>
    calibrate_env(&state_est_state->env, p_g, T_g);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007b96:	edd7 0a02 	vldr	s1, [r7, #8]
 8007b9a:	ed97 0a03 	vldr	s0, [r7, #12]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff f976 	bl	8006e90 <calibrate_env>
    update_env(&state_est_state->env, T_g);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007baa:	ed97 0a02 	vldr	s0, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff f9be 	bl	8006f30 <update_env>

	reset_kf_state(&state_est_state->kf_state);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	33f4      	adds	r3, #244	; 0xf4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7ff fd83 	bl	80076c4 <reset_kf_state>
    update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state, &state_est_state->env);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f000 f875 	bl	8007cbc <update_state_est_data>

    memset(&state_est_state->baro_roll_mem, 0, sizeof(state_est_state->baro_roll_mem));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bd8:	22b0      	movs	r2, #176	; 0xb0
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f009 fe72 	bl	80118c6 <memset>

	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection, 
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bfa:	f000 fa9d 	bl	8008138 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <state_est_step>:

void state_est_step(timestamp_t t, state_est_state_t *state_est_state, bool bool_detect_flight_phase) {
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	4613      	mov	r3, r2
 8007c12:	71fb      	strb	r3, [r7, #7]
    /* process measurements */
	process_measurements(t, state_est_state);
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f8b6 	bl	8007d88 <process_measurements>

	/* select noise models (dependent on detected flight phase and updated temperature in environment) */
	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection,
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c34:	f000 fa80 	bl	8008138 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
	
	kf_prediction(&state_est_state->kf_state);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	33f4      	adds	r3, #244	; 0xf4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fde5 	bl	800780c <kf_prediction>

	if (state_est_state->kf_state.num_z_active > 0) {
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dd0a      	ble.n	8007c62 <state_est_step+0x5c>
		select_kf_observation_matrices(&state_est_state->kf_state);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	33f4      	adds	r3, #244	; 0xf4
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7ff fe49 	bl	80078e8 <select_kf_observation_matrices>
		kf_update(&state_est_state->kf_state);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	33f4      	adds	r3, #244	; 0xf4
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fe84 	bl	8007968 <kf_update>
 8007c60:	e009      	b.n	8007c76 <state_est_step+0x70>
	} else {
		memcpy(&state_est_state->kf_state.x_est, &state_est_state->kf_state.x_priori, sizeof(state_est_state->kf_state.x_priori));
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007c6e:	220c      	movs	r2, #12
 8007c70:	4619      	mov	r1, r3
 8007c72:	f009 fe1d 	bl	80118b0 <memcpy>
	}

	update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state, &state_est_state->env);
 8007c76:	68b8      	ldr	r0, [r7, #8]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007c84:	461a      	mov	r2, r3
 8007c86:	f000 f819 	bl	8007cbc <update_state_est_data>

    if (bool_detect_flight_phase){
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <state_est_step+0x9a>
        detect_flight_phase(t, &state_est_state->flight_phase_detection, &state_est_state->state_est_data);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff fac8 	bl	8007230 <detect_flight_phase>
    }

	/* set measurement prior to measurements from completed state estimation step */
	memcpy(&state_est_state->state_est_meas_prior, &state_est_state->state_est_meas, sizeof(state_est_state->state_est_meas));
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	334c      	adds	r3, #76	; 0x4c
 8007caa:	2254      	movs	r2, #84	; 0x54
 8007cac:	4619      	mov	r1, r3
 8007cae:	f009 fdff 	bl	80118b0 <memcpy>
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <update_state_est_data>:

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state, env_t *env) {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8007cce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007d7c <update_state_est_data+0xc0>
 8007cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cda:	ee17 2a90 	vmov	r2, s15
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8007ce8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8007d7c <update_state_est_data+0xc0>
 8007cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cf4:	ee17 2a90 	vmov	r2, s15
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8007d02:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007d7c <update_state_est_data+0xc0>
 8007d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d0e:	ee17 2a90 	vmov	r2, s15
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8007d1c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007d7c <update_state_est_data+0xc0>
 8007d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d28:	ee17 2a90 	vmov	r2, s15
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8007d36:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007d7c <update_state_est_data+0xc0>
 8007d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d42:	ee17 2a90 	vmov	r2, s15
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
    state_est_data->mach_number = (int32_t)(mach_number(env, kf_state->x_est[1]) * 1000000);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8007d50:	eeb0 0a67 	vmov.f32	s0, s15
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff f92b 	bl	8006fb0 <mach_number>
 8007d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d5e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007d80 <update_state_est_data+0xc4>
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d6a:	ee17 2a90 	vmov	r2, s15
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	447a0000 	.word	0x447a0000
 8007d80:	49742400 	.word	0x49742400
 8007d84:	00000000 	.word	0x00000000

08007d88 <process_measurements>:

void process_measurements(timestamp_t t, state_est_state_t *state_est_state) {
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b095      	sub	sp, #84	; 0x54
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8007d92:	2300      	movs	r3, #0
 8007d94:	647b      	str	r3, [r7, #68]	; 0x44
 8007d96:	e0a9      	b.n	8007eec <process_measurements+0x164>
        /* barometer */
        if (state_est_state->state_est_meas.baro_data[i].ts > state_est_state->state_est_meas_prior.baro_data[i].ts) {
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	3354      	adds	r3, #84	; 0x54
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	6838      	ldr	r0, [r7, #0]
 8007dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dae:	4613      	mov	r3, r2
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4403      	add	r3, r0
 8007db8:	33a8      	adds	r3, #168	; 0xa8
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4299      	cmp	r1, r3
 8007dbe:	d939      	bls.n	8007e34 <process_measurements+0xac>
            state_est_state->kf_state.z[i] = state_est_state->state_est_meas.baro_data[i].pressure;
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	334c      	adds	r3, #76	; 0x4c
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd6:	338e      	adds	r3, #142	; 0x8e
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	3304      	adds	r3, #4
 8007dde:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = true;
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007dea:	2201      	movs	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_state->state_est_meas.baro_data[i].temperature;
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df2:	4613      	mov	r3, r2
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3350      	adds	r3, #80	; 0x50
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007e08:	440b      	add	r3, r1
 8007e0a:	3b2c      	subs	r3, #44	; 0x2c
 8007e0c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8007e0e:	f107 0218 	add.w	r2, r7, #24
 8007e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e14:	4413      	add	r3, r2
 8007e16:	2201      	movs	r2, #1
 8007e18:	701a      	strb	r2, [r3, #0]

            /* deactivate all barometer measurements if we are transsonic or supersonic */
            if (state_est_state->flight_phase_detection.mach_regime != SUBSONIC) {
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f893 33f5 	ldrb.w	r3, [r3, #1013]	; 0x3f5
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d026      	beq.n	8007e72 <process_measurements+0xea>
                state_est_state->kf_state.z_active[i] = false;
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007e2e:	2200      	movs	r2, #0
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e01e      	b.n	8007e72 <process_measurements+0xea>
                        state_est_state->kf_state.z_active[i] = false;
                    }
                }
            #endif
        } else {
            state_est_state->kf_state.z[i] = 0;
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e38:	338e      	adds	r3, #142	; 0x8e
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3304      	adds	r3, #4
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = false;
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8007e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3b2c      	subs	r3, #44	; 0x2c
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8007e66:	f107 0218 	add.w	r2, r7, #24
 8007e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6c:	4413      	add	r3, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_state->state_est_meas.imu_data[i].ts > state_est_state->state_est_meas_prior.imu_data[i].ts) {
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e76:	4613      	mov	r3, r2
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	337c      	adds	r3, #124	; 0x7c
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6838      	ldr	r0, [r7, #0]
 8007e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4403      	add	r3, r0
 8007e92:	33d0      	adds	r3, #208	; 0xd0
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4299      	cmp	r1, r3
 8007e98:	d916      	bls.n	8007ec8 <process_measurements+0x140>
            acc_x_meas[i] = state_est_state->state_est_meas.imu_data[i].acc_x;
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	3370      	adds	r3, #112	; 0x70
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007eb4:	440b      	add	r3, r1
 8007eb6:	3b38      	subs	r3, #56	; 0x38
 8007eb8:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8007eba:	f107 020c 	add.w	r2, r7, #12
 8007ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec0:	4413      	add	r3, r2
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e00e      	b.n	8007ee6 <process_measurements+0x15e>
        } else {
            acc_x_meas[i] = 0;
 8007ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007ed0:	4413      	add	r3, r2
 8007ed2:	3b38      	subs	r3, #56	; 0x38
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8007eda:	f107 020c 	add.w	r2, r7, #12
 8007ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee0:	4413      	add	r3, r2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8007ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee8:	3301      	adds	r3, #1
 8007eea:	647b      	str	r3, [r7, #68]	; 0x44
 8007eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	f77f af52 	ble.w	8007d98 <process_measurements+0x10>
        if (state_est_state->baro_roll_mem.memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, &state_est_state->baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007f00:	461a      	mov	r2, r3
 8007f02:	2002      	movs	r0, #2
 8007f04:	f000 f9e0 	bl	80082c8 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8007f08:	f107 0218 	add.w	r2, r7, #24
 8007f0c:	f107 031c 	add.w	r3, r7, #28
 8007f10:	4619      	mov	r1, r3
 8007f12:	2002      	movs	r0, #2
 8007f14:	f000 f9d8 	bl	80082c8 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8007f18:	f107 020c 	add.w	r2, r7, #12
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	4619      	mov	r1, r3
 8007f22:	2002      	movs	r0, #2
 8007f24:	f000 f9d0 	bl	80082c8 <sensor_elimination_by_stdev>

    /* update num_z_active */
    state_est_state->kf_state.num_z_active = 0;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	63bb      	str	r3, [r7, #56]	; 0x38
    int num_acc_x_meas_active = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	643b      	str	r3, [r7, #64]	; 0x40

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int num_temp_meas_active = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
    
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007f44:	2300      	movs	r3, #0
 8007f46:	633b      	str	r3, [r7, #48]	; 0x30
 8007f48:	e047      	b.n	8007fda <process_measurements+0x252>
        if (state_est_state->kf_state.z_active[i]){
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d006      	beq.n	8007f68 <process_measurements+0x1e0>
            state_est_state->kf_state.num_z_active += 1;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
        }
        if (acc_x_meas_active[i]) {
 8007f68:	f107 020c 	add.w	r2, r7, #12
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	4413      	add	r3, r2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d010      	beq.n	8007f98 <process_measurements+0x210>
            u += acc_x_meas[i];
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007f7e:	4413      	add	r3, r2
 8007f80:	3b38      	subs	r3, #56	; 0x38
 8007f82:	edd3 7a00 	vldr	s15, [r3]
 8007f86:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f8e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            num_acc_x_meas_active += 1;
 8007f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f94:	3301      	adds	r3, #1
 8007f96:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3b2c      	subs	r3, #44	; 0x2c
 8007fa4:	edd3 7a00 	vldr	s15, [r3]
 8007fa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb0:	d010      	beq.n	8007fd4 <process_measurements+0x24c>
            temp_meas_mean += temp_meas[i];
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007fba:	4413      	add	r3, r2
 8007fbc:	3b2c      	subs	r3, #44	; 0x2c
 8007fbe:	edd3 7a00 	vldr	s15, [r3]
 8007fc2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_temp_meas_active += 1;
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	ddb4      	ble.n	8007f4a <process_measurements+0x1c2>
        }
    }

    pressure2altitudeAGL(&state_est_state->env, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, state_est_state->kf_state.z);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	f503 7121 	add.w	r1, r3, #644	; 0x284
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	f7fe fff3 	bl	8006fe8 <pressure2altitudeAGL>

    /* compute the mean raw altitude from all barometer measurements */
    int num_alt_meas_active = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
    float alt_mean = 0;
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800800c:	2300      	movs	r3, #0
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
 8008010:	e01b      	b.n	800804a <process_measurements+0x2c2>
        if (state_est_state->kf_state.z_active[i]){
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	4413      	add	r3, r2
 8008018:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d010      	beq.n	8008044 <process_measurements+0x2bc>
            num_alt_meas_active += 1;
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	3301      	adds	r3, #1
 8008026:	62fb      	str	r3, [r7, #44]	; 0x2c
            alt_mean += state_est_state->kf_state.z[i];
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	338e      	adds	r3, #142	; 0x8e
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	3304      	adds	r3, #4
 8008034:	edd3 7a00 	vldr	s15, [r3]
 8008038:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800803c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008040:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	3301      	adds	r3, #1
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2b01      	cmp	r3, #1
 800804e:	dde0      	ble.n	8008012 <process_measurements+0x28a>
        }
    }
    if (num_alt_meas_active > 0) {
 8008050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008052:	2b00      	cmp	r3, #0
 8008054:	dd1b      	ble.n	800808e <process_measurements+0x306>
        alt_mean /= num_alt_meas_active;
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	ee07 3a90 	vmov	s15, r3
 800805c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008060:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008068:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        state_est_state->state_est_data.altitude_raw = (int32_t)(alt_mean * 1000);
 800806c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008070:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008130 <process_measurements+0x3a8>
 8008074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800807c:	ee17 2a90 	vmov	r2, s15
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	641a      	str	r2, [r3, #64]	; 0x40
        state_est_state->state_est_data.altitude_raw_active = true;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800808c:	e003      	b.n	8008096 <process_measurements+0x30e>
    } else {  
        state_est_state->state_est_data.altitude_raw_active = false;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8008096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	dd1c      	ble.n	80080d6 <process_measurements+0x34e>
        u /= num_acc_x_meas_active;
 800809c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080a6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80080aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ae:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        /* gravity compensation for accelerometer */
        state_est_state->kf_state.u[0] = u - GRAVITATION;
 80080b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080b4:	f7f8 fa48 	bl	8000548 <__aeabi_f2d>
 80080b8:	a31b      	add	r3, pc, #108	; (adr r3, 8008128 <process_measurements+0x3a0>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 f8e3 	bl	8000288 <__aeabi_dsub>
 80080c2:	4603      	mov	r3, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	4618      	mov	r0, r3
 80080c8:	4621      	mov	r1, r4
 80080ca:	f7f8 fd8d 	bl	8000be8 <__aeabi_d2f>
 80080ce:	4602      	mov	r2, r0
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }
    
    if (num_temp_meas_active > 0){
 80080d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dd12      	ble.n	8008102 <process_measurements+0x37a>
        temp_meas_mean /= num_temp_meas_active;
 80080dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080e6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80080ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        update_env(&state_est_state->env, temp_meas_mean);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80080f8:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe ff17 	bl	8006f30 <update_env>
    }

    /* airbrake extension tracking feedback */
    state_est_state->state_est_data.airbrake_extension = (int32_t)(state_est_state->state_est_meas.airbrake_extension * 1000000);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8008108:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008134 <process_measurements+0x3ac>
 800810c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008114:	ee17 2a90 	vmov	r2, s15
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	649a      	str	r2, [r3, #72]	; 0x48
} 
 800811c:	bf00      	nop
 800811e:	374c      	adds	r7, #76	; 0x4c
 8008120:	46bd      	mov	sp, r7
 8008122:	bd90      	pop	{r4, r7, pc}
 8008124:	f3af 8000 	nop.w
 8008128:	51eb851f 	.word	0x51eb851f
 800812c:	40239eb8 	.word	0x40239eb8
 8008130:	447a0000 	.word	0x447a0000
 8008134:	49742400 	.word	0x49742400

08008138 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8008138:	b590      	push	{r4, r7, lr}
 800813a:	b091      	sub	sp, #68	; 0x44
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	3b01      	subs	r3, #1
 800814c:	2b0a      	cmp	r3, #10
 800814e:	d832      	bhi.n	80081b6 <select_noise_models+0x7e>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <select_noise_models+0x20>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	08008185 	.word	0x08008185
 800815c:	08008185 	.word	0x08008185
 8008160:	0800818f 	.word	0x0800818f
 8008164:	08008199 	.word	0x08008199
 8008168:	08008199 	.word	0x08008199
 800816c:	08008199 	.word	0x08008199
 8008170:	08008199 	.word	0x08008199
 8008174:	080081a3 	.word	0x080081a3
 8008178:	080081ad 	.word	0x080081ad
 800817c:	080081a3 	.word	0x080081a3
 8008180:	08008185 	.word	0x08008185
        case AIRBRAKE_TEST:
        case TOUCHDOWN:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8008184:	4b48      	ldr	r3, [pc, #288]	; (80082a8 <select_noise_models+0x170>)
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8008188:	4b48      	ldr	r3, [pc, #288]	; (80082ac <select_noise_models+0x174>)
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800818c:	e013      	b.n	80081b6 <select_noise_models+0x7e>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 800818e:	4b48      	ldr	r3, [pc, #288]	; (80082b0 <select_noise_models+0x178>)
 8008190:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8008192:	4b48      	ldr	r3, [pc, #288]	; (80082b4 <select_noise_models+0x17c>)
 8008194:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8008196:	e00e      	b.n	80081b6 <select_noise_models+0x7e>
        case BIAS_RESET:
        case APOGEE_APPROACH:
        case CONTROL:
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8008198:	4b47      	ldr	r3, [pc, #284]	; (80082b8 <select_noise_models+0x180>)
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 800819c:	4b47      	ldr	r3, [pc, #284]	; (80082bc <select_noise_models+0x184>)
 800819e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80081a0:	e009      	b.n	80081b6 <select_noise_models+0x7e>
        case DROGUE_DESCENT:
        case MAIN_DESCENT:
            accelerometer_x_stdev = 1.955133;
 80081a2:	4b47      	ldr	r3, [pc, #284]	; (80082c0 <select_noise_models+0x188>)
 80081a4:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 80081a6:	4b47      	ldr	r3, [pc, #284]	; (80082c4 <select_noise_models+0x18c>)
 80081a8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80081aa:	e004      	b.n	80081b6 <select_noise_models+0x7e>
        case BALLISTIC_DESCENT:
            accelerometer_x_stdev = 0.61803;
 80081ac:	4b42      	ldr	r3, [pc, #264]	; (80082b8 <select_noise_models+0x180>)
 80081ae:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 80081b0:	4b42      	ldr	r3, [pc, #264]	; (80082bc <select_noise_models+0x184>)
 80081b2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80081b4:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80081b6:	2300      	movs	r3, #0
 80081b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ba:	e01b      	b.n	80081f4 <select_noise_models+0xbc>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80081bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081be:	f7f8 f9c3 	bl	8000548 <__aeabi_f2d>
 80081c2:	4603      	mov	r3, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	ed9f 1b36 	vldr	d1, [pc, #216]	; 80082a0 <select_noise_models+0x168>
 80081ca:	ec44 3b10 	vmov	d0, r3, r4
 80081ce:	f00d fbe5 	bl	801599c <pow>
 80081d2:	ec54 3b10 	vmov	r3, r4, d0
 80081d6:	4618      	mov	r0, r3
 80081d8:	4621      	mov	r1, r4
 80081da:	f7f8 fd05 	bl	8000be8 <__aeabi_d2f>
 80081de:	4601      	mov	r1, r0
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	3313      	adds	r3, #19
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	4413      	add	r3, r2
 80081ea:	3304      	adds	r3, #4
 80081ec:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	3301      	adds	r3, #1
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dde0      	ble.n	80081bc <select_noise_models+0x84>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008200:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8008202:	2301      	movs	r3, #1
 8008204:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8008206:	f107 0114 	add.w	r1, r7, #20
 800820a:	f107 0218 	add.w	r2, r7, #24
 800820e:	f107 031c 	add.w	r3, r7, #28
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	460b      	mov	r3, r1
 8008216:	2101      	movs	r1, #1
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe ff45 	bl	80070a8 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 800821e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008222:	eeb0 0a67 	vmov.f32	s0, s15
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fe ffa6 	bl	8007178 <altitude_gradient>
 800822c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8008230:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008234:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823c:	eef0 7ae7 	vabs.f32	s15, s15
 8008240:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8008244:	2300      	movs	r3, #0
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
 8008248:	e01c      	b.n	8008284 <select_noise_models+0x14c>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 800824a:	6a38      	ldr	r0, [r7, #32]
 800824c:	f7f8 f97c 	bl	8000548 <__aeabi_f2d>
 8008250:	4603      	mov	r3, r0
 8008252:	460c      	mov	r4, r1
 8008254:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80082a0 <select_noise_models+0x168>
 8008258:	ec44 3b10 	vmov	d0, r3, r4
 800825c:	f00d fb9e 	bl	801599c <pow>
 8008260:	ec54 3b10 	vmov	r3, r4, d0
 8008264:	4618      	mov	r0, r3
 8008266:	4621      	mov	r1, r4
 8008268:	f7f8 fcbe 	bl	8000be8 <__aeabi_d2f>
 800826c:	68f9      	ldr	r1, [r7, #12]
 800826e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008270:	4613      	mov	r3, r2
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	33a0      	adds	r3, #160	; 0xa0
 800827c:	6018      	str	r0, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	3301      	adds	r3, #1
 8008282:	62bb      	str	r3, [r7, #40]	; 0x28
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	2b01      	cmp	r3, #1
 8008288:	dddf      	ble.n	800824a <select_noise_models+0x112>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800828e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8008292:	bf00      	nop
 8008294:	373c      	adds	r7, #60	; 0x3c
 8008296:	46bd      	mov	sp, r7
 8008298:	bd90      	pop	{r4, r7, pc}
 800829a:	bf00      	nop
 800829c:	f3af 8000 	nop.w
 80082a0:	00000000 	.word	0x00000000
 80082a4:	40000000 	.word	0x40000000
 80082a8:	3c97e316 	.word	0x3c97e316
 80082ac:	3fef3b64 	.word	0x3fef3b64
 80082b0:	3fa01965 	.word	0x3fa01965
 80082b4:	41500000 	.word	0x41500000
 80082b8:	3f1e3737 	.word	0x3f1e3737
 80082bc:	40ec28f6 	.word	0x40ec28f6
 80082c0:	3ffa41cc 	.word	0x3ffa41cc
 80082c4:	40795810 	.word	0x40795810

080082c8 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int n, float measurements[n], bool measurement_active[n]) {
 80082c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ca:	b08b      	sub	sp, #44	; 0x2c
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	e017      	b.n	8008314 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00e      	beq.n	800830e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	3301      	adds	r3, #1
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	edd3 7a00 	vldr	s15, [r3]
 8008302:	ed97 7a08 	vldr	s14, [r7, #32]
 8008306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800830a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	3301      	adds	r3, #1
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	429a      	cmp	r2, r3
 800831a:	dbe3      	blt.n	80082e4 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd0a      	ble.n	8008338 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800832c:	edd7 6a08 	vldr	s13, [r7, #32]
 8008330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008334:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	e033      	b.n	80083ac <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d02a      	beq.n	80083a6 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	4413      	add	r3, r2
 8008358:	ed93 7a00 	vldr	s14, [r3]
 800835c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008364:	ee17 0a90 	vmov	r0, s15
 8008368:	f7f8 f8ee 	bl	8000548 <__aeabi_f2d>
 800836c:	4603      	mov	r3, r0
 800836e:	460c      	mov	r4, r1
 8008370:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8008468 <sensor_elimination_by_stdev+0x1a0>
 8008374:	ec44 3b10 	vmov	d0, r3, r4
 8008378:	f00d fb10 	bl	801599c <pow>
 800837c:	ec56 5b10 	vmov	r5, r6, d0
 8008380:	69b8      	ldr	r0, [r7, #24]
 8008382:	f7f8 f8e1 	bl	8000548 <__aeabi_f2d>
 8008386:	4603      	mov	r3, r0
 8008388:	460c      	mov	r4, r1
 800838a:	461a      	mov	r2, r3
 800838c:	4623      	mov	r3, r4
 800838e:	4628      	mov	r0, r5
 8008390:	4631      	mov	r1, r6
 8008392:	f7f7 ff7b 	bl	800028c <__adddf3>
 8008396:	4603      	mov	r3, r0
 8008398:	460c      	mov	r4, r1
 800839a:	4618      	mov	r0, r3
 800839c:	4621      	mov	r1, r4
 800839e:	f7f8 fc23 	bl	8000be8 <__aeabi_d2f>
 80083a2:	4603      	mov	r3, r0
 80083a4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3301      	adds	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	dbc7      	blt.n	8008344 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dd1a      	ble.n	80083f0 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	ee07 3a90 	vmov	s15, r3
 80083c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80083c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80083cc:	ee16 0a90 	vmov	r0, s13
 80083d0:	f7f8 f8ba 	bl	8000548 <__aeabi_f2d>
 80083d4:	4603      	mov	r3, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	ec44 3b10 	vmov	d0, r3, r4
 80083dc:	f00d fc4e 	bl	8015c7c <sqrt>
 80083e0:	ec54 3b10 	vmov	r3, r4, d0
 80083e4:	4618      	mov	r0, r3
 80083e6:	4621      	mov	r1, r4
 80083e8:	f7f8 fbfe 	bl	8000be8 <__aeabi_d2f>
 80083ec:	4603      	mov	r3, r0
 80083ee:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 80083f0:	2300      	movs	r3, #0
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	e02f      	b.n	8008456 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4413      	add	r3, r2
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d026      	beq.n	8008450 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	ed93 7a00 	vldr	s14, [r3]
 800840e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008416:	eef0 7ae7 	vabs.f32	s15, s15
 800841a:	ee17 0a90 	vmov	r0, s15
 800841e:	f7f8 f893 	bl	8000548 <__aeabi_f2d>
 8008422:	4604      	mov	r4, r0
 8008424:	460d      	mov	r5, r1
 8008426:	69b8      	ldr	r0, [r7, #24]
 8008428:	f7f8 f88e 	bl	8000548 <__aeabi_f2d>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	f7f7 ff2c 	bl	800028c <__adddf3>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4620      	mov	r0, r4
 800843a:	4629      	mov	r1, r5
 800843c:	f7f8 fb6c 	bl	8000b18 <__aeabi_dcmpgt>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4413      	add	r3, r2
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	3301      	adds	r3, #1
 8008454:	613b      	str	r3, [r7, #16]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	429a      	cmp	r2, r3
 800845c:	dbcb      	blt.n	80083f6 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 800845e:	bf00      	nop
 8008460:	372c      	adds	r7, #44	; 0x2c
 8008462:	46bd      	mov	sp, r7
 8008464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008466:	bf00      	nop
 8008468:	00000000 	.word	0x00000000
 800846c:	40000000 	.word	0x40000000

08008470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008474:	4b0e      	ldr	r3, [pc, #56]	; (80084b0 <HAL_Init+0x40>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a0d      	ldr	r2, [pc, #52]	; (80084b0 <HAL_Init+0x40>)
 800847a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800847e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <HAL_Init+0x40>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <HAL_Init+0x40>)
 8008486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800848a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800848c:	4b08      	ldr	r3, [pc, #32]	; (80084b0 <HAL_Init+0x40>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <HAL_Init+0x40>)
 8008492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008498:	2003      	movs	r0, #3
 800849a:	f000 fd8b 	bl	8008fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800849e:	2000      	movs	r0, #0
 80084a0:	f000 f808 	bl	80084b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084a4:	f7fc fb9a 	bl	8004bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	40023c00 	.word	0x40023c00

080084b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084bc:	4b12      	ldr	r3, [pc, #72]	; (8008508 <HAL_InitTick+0x54>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	4b12      	ldr	r3, [pc, #72]	; (800850c <HAL_InitTick+0x58>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fda3 	bl	800901e <HAL_SYSTICK_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e00e      	b.n	8008500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d80a      	bhi.n	80084fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084e8:	2200      	movs	r2, #0
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084f0:	f000 fd6b 	bl	8008fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084f4:	4a06      	ldr	r2, [pc, #24]	; (8008510 <HAL_InitTick+0x5c>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e000      	b.n	8008500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000194 	.word	0x20000194
 800850c:	200001a0 	.word	0x200001a0
 8008510:	2000019c 	.word	0x2000019c

08008514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <HAL_IncTick+0x20>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <HAL_IncTick+0x24>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4413      	add	r3, r2
 8008524:	4a04      	ldr	r2, [pc, #16]	; (8008538 <HAL_IncTick+0x24>)
 8008526:	6013      	str	r3, [r2, #0]
}
 8008528:	bf00      	nop
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	200001a0 	.word	0x200001a0
 8008538:	2000e244 	.word	0x2000e244

0800853c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  return uwTick;
 8008540:	4b03      	ldr	r3, [pc, #12]	; (8008550 <HAL_GetTick+0x14>)
 8008542:	681b      	ldr	r3, [r3, #0]
}
 8008544:	4618      	mov	r0, r3
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	2000e244 	.word	0x2000e244

08008554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800855c:	f7ff ffee 	bl	800853c <HAL_GetTick>
 8008560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800856c:	d005      	beq.n	800857a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <HAL_Delay+0x40>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800857a:	bf00      	nop
 800857c:	f7ff ffde 	bl	800853c <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	429a      	cmp	r2, r3
 800858a:	d8f7      	bhi.n	800857c <HAL_Delay+0x28>
  {
  }
}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	200001a0 	.word	0x200001a0

08008598 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e033      	b.n	8008616 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7f9 fbe2 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d118      	bne.n	8008608 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80085de:	f023 0302 	bic.w	r3, r3, #2
 80085e2:	f043 0202 	orr.w	r2, r3, #2
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa94 	bl	8008b18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	f023 0303 	bic.w	r3, r3, #3
 80085fe:	f043 0201 	orr.w	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	641a      	str	r2, [r3, #64]	; 0x40
 8008606:	e001      	b.n	800860c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_ADC_Start_DMA+0x1e>
 800863a:	2302      	movs	r3, #2
 800863c:	e0cc      	b.n	80087d8 <HAL_ADC_Start_DMA+0x1b8>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b01      	cmp	r3, #1
 8008652:	d018      	beq.n	8008686 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0201 	orr.w	r2, r2, #1
 8008662:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008664:	4b5e      	ldr	r3, [pc, #376]	; (80087e0 <HAL_ADC_Start_DMA+0x1c0>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a5e      	ldr	r2, [pc, #376]	; (80087e4 <HAL_ADC_Start_DMA+0x1c4>)
 800866a:	fba2 2303 	umull	r2, r3, r2, r3
 800866e:	0c9a      	lsrs	r2, r3, #18
 8008670:	4613      	mov	r3, r2
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	4413      	add	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008678:	e002      	b.n	8008680 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	3b01      	subs	r3, #1
 800867e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1f9      	bne.n	800867a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b01      	cmp	r3, #1
 8008692:	f040 80a0 	bne.w	80087d6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800869e:	f023 0301 	bic.w	r3, r3, #1
 80086a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80086c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d4:	d106      	bne.n	80086e4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086da:	f023 0206 	bic.w	r2, r3, #6
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	645a      	str	r2, [r3, #68]	; 0x44
 80086e2:	e002      	b.n	80086ea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80086f2:	4b3d      	ldr	r3, [pc, #244]	; (80087e8 <HAL_ADC_Start_DMA+0x1c8>)
 80086f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fa:	4a3c      	ldr	r2, [pc, #240]	; (80087ec <HAL_ADC_Start_DMA+0x1cc>)
 80086fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	4a3b      	ldr	r2, [pc, #236]	; (80087f0 <HAL_ADC_Start_DMA+0x1d0>)
 8008704:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	4a3a      	ldr	r2, [pc, #232]	; (80087f4 <HAL_ADC_Start_DMA+0x1d4>)
 800870c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008716:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008726:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008736:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	334c      	adds	r3, #76	; 0x4c
 8008742:	4619      	mov	r1, r3
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f000 fd24 	bl	8009194 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	2b00      	cmp	r3, #0
 8008756:	d12a      	bne.n	80087ae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a26      	ldr	r2, [pc, #152]	; (80087f8 <HAL_ADC_Start_DMA+0x1d8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d015      	beq.n	800878e <HAL_ADC_Start_DMA+0x16e>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a25      	ldr	r2, [pc, #148]	; (80087fc <HAL_ADC_Start_DMA+0x1dc>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d105      	bne.n	8008778 <HAL_ADC_Start_DMA+0x158>
 800876c:	4b1e      	ldr	r3, [pc, #120]	; (80087e8 <HAL_ADC_Start_DMA+0x1c8>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a20      	ldr	r2, [pc, #128]	; (8008800 <HAL_ADC_Start_DMA+0x1e0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d129      	bne.n	80087d6 <HAL_ADC_Start_DMA+0x1b6>
 8008782:	4b19      	ldr	r3, [pc, #100]	; (80087e8 <HAL_ADC_Start_DMA+0x1c8>)
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	2b0f      	cmp	r3, #15
 800878c:	d823      	bhi.n	80087d6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d11c      	bne.n	80087d6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80087aa:	609a      	str	r2, [r3, #8]
 80087ac:	e013      	b.n	80087d6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a11      	ldr	r2, [pc, #68]	; (80087f8 <HAL_ADC_Start_DMA+0x1d8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d10e      	bne.n	80087d6 <HAL_ADC_Start_DMA+0x1b6>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d107      	bne.n	80087d6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80087d4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000194 	.word	0x20000194
 80087e4:	431bde83 	.word	0x431bde83
 80087e8:	40012300 	.word	0x40012300
 80087ec:	08008d11 	.word	0x08008d11
 80087f0:	08008dcb 	.word	0x08008dcb
 80087f4:	08008de7 	.word	0x08008de7
 80087f8:	40012000 	.word	0x40012000
 80087fc:	40012100 	.word	0x40012100
 8008800:	40012200 	.word	0x40012200

08008804 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_ADC_Stop_DMA+0x1a>
 800881a:	2302      	movs	r3, #2
 800881c:	e038      	b.n	8008890 <HAL_ADC_Stop_DMA+0x8c>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0201 	bic.w	r2, r2, #1
 8008834:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d120      	bne.n	8008886 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008852:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fcf3 	bl	8009244 <HAL_DMA_Abort>
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8008870:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800887a:	f023 0301 	bic.w	r3, r3, #1
 800887e:	f043 0201 	orr.w	r2, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_ADC_ConfigChannel+0x1c>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e105      	b.n	8008afc <HAL_ADC_ConfigChannel+0x228>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b09      	cmp	r3, #9
 80088fe:	d925      	bls.n	800894c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68d9      	ldr	r1, [r3, #12]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	4613      	mov	r3, r2
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	4413      	add	r3, r2
 8008914:	3b1e      	subs	r3, #30
 8008916:	2207      	movs	r2, #7
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	43da      	mvns	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	400a      	ands	r2, r1
 8008924:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68d9      	ldr	r1, [r3, #12]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	4618      	mov	r0, r3
 8008938:	4603      	mov	r3, r0
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	4403      	add	r3, r0
 800893e:	3b1e      	subs	r3, #30
 8008940:	409a      	lsls	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	60da      	str	r2, [r3, #12]
 800894a:	e022      	b.n	8008992 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6919      	ldr	r1, [r3, #16]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	4613      	mov	r3, r2
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	4413      	add	r3, r2
 8008960:	2207      	movs	r2, #7
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	43da      	mvns	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	400a      	ands	r2, r1
 800896e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6919      	ldr	r1, [r3, #16]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	4618      	mov	r0, r3
 8008982:	4603      	mov	r3, r0
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	4403      	add	r3, r0
 8008988:	409a      	lsls	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b06      	cmp	r3, #6
 8008998:	d824      	bhi.n	80089e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	3b05      	subs	r3, #5
 80089ac:	221f      	movs	r2, #31
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	43da      	mvns	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	400a      	ands	r2, r1
 80089ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	4618      	mov	r0, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	3b05      	subs	r3, #5
 80089d6:	fa00 f203 	lsl.w	r2, r0, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	635a      	str	r2, [r3, #52]	; 0x34
 80089e2:	e04c      	b.n	8008a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b0c      	cmp	r3, #12
 80089ea:	d824      	bhi.n	8008a36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	3b23      	subs	r3, #35	; 0x23
 80089fe:	221f      	movs	r2, #31
 8008a00:	fa02 f303 	lsl.w	r3, r2, r3
 8008a04:	43da      	mvns	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	400a      	ands	r2, r1
 8008a0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	3b23      	subs	r3, #35	; 0x23
 8008a28:	fa00 f203 	lsl.w	r2, r0, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	631a      	str	r2, [r3, #48]	; 0x30
 8008a34:	e023      	b.n	8008a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	3b41      	subs	r3, #65	; 0x41
 8008a48:	221f      	movs	r2, #31
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43da      	mvns	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	400a      	ands	r2, r1
 8008a56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	4618      	mov	r0, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	3b41      	subs	r3, #65	; 0x41
 8008a72:	fa00 f203 	lsl.w	r2, r0, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008a7e:	4b22      	ldr	r3, [pc, #136]	; (8008b08 <HAL_ADC_ConfigChannel+0x234>)
 8008a80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <HAL_ADC_ConfigChannel+0x238>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d109      	bne.n	8008aa0 <HAL_ADC_ConfigChannel+0x1cc>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b12      	cmp	r3, #18
 8008a92:	d105      	bne.n	8008aa0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <HAL_ADC_ConfigChannel+0x238>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d123      	bne.n	8008af2 <HAL_ADC_ConfigChannel+0x21e>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b10      	cmp	r3, #16
 8008ab0:	d003      	beq.n	8008aba <HAL_ADC_ConfigChannel+0x1e6>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b11      	cmp	r3, #17
 8008ab8:	d11b      	bne.n	8008af2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	d111      	bne.n	8008af2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008ace:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <HAL_ADC_ConfigChannel+0x23c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a10      	ldr	r2, [pc, #64]	; (8008b14 <HAL_ADC_ConfigChannel+0x240>)
 8008ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad8:	0c9a      	lsrs	r2, r3, #18
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008ae4:	e002      	b.n	8008aec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f9      	bne.n	8008ae6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	40012300 	.word	0x40012300
 8008b0c:	40012000 	.word	0x40012000
 8008b10:	20000194 	.word	0x20000194
 8008b14:	431bde83 	.word	0x431bde83

08008b18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b20:	4b79      	ldr	r3, [pc, #484]	; (8008d08 <ADC_Init+0x1f0>)
 8008b22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6859      	ldr	r1, [r3, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	021a      	lsls	r2, r3, #8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6859      	ldr	r1, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6899      	ldr	r1, [r3, #8]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68da      	ldr	r2, [r3, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	4a58      	ldr	r2, [pc, #352]	; (8008d0c <ADC_Init+0x1f4>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d022      	beq.n	8008bf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6899      	ldr	r1, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6899      	ldr	r1, [r3, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	609a      	str	r2, [r3, #8]
 8008bf4:	e00f      	b.n	8008c16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008c14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0202 	bic.w	r2, r2, #2
 8008c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6899      	ldr	r1, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7e1b      	ldrb	r3, [r3, #24]
 8008c30:	005a      	lsls	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01b      	beq.n	8008c7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008c62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	035a      	lsls	r2, r3, #13
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	e007      	b.n	8008c8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	051a      	lsls	r2, r3, #20
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6899      	ldr	r1, [r3, #8]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cce:	025a      	lsls	r2, r3, #9
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ce6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6899      	ldr	r1, [r3, #8]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	029a      	lsls	r2, r3, #10
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	609a      	str	r2, [r3, #8]
}
 8008cfc:	bf00      	nop
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	40012300 	.word	0x40012300
 8008d0c:	0f000001 	.word	0x0f000001

08008d10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d13c      	bne.n	8008da4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d12b      	bne.n	8008d9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d127      	bne.n	8008d9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d006      	beq.n	8008d68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d119      	bne.n	8008d9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0220 	bic.w	r2, r2, #32
 8008d76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d105      	bne.n	8008d9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	f043 0201 	orr.w	r2, r3, #1
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f7ff fd7b 	bl	8008898 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008da2:	e00e      	b.n	8008dc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	f003 0310 	and.w	r3, r3, #16
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7ff fd85 	bl	80088c0 <HAL_ADC_ErrorCallback>
}
 8008db6:	e004      	b.n	8008dc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff fd67 	bl	80088ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008dde:	bf00      	nop
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2240      	movs	r2, #64	; 0x40
 8008df8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfe:	f043 0204 	orr.w	r2, r3, #4
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7ff fd5a 	bl	80088c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <__NVIC_SetPriorityGrouping>:
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e24:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <__NVIC_SetPriorityGrouping+0x44>)
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e30:	4013      	ands	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e46:	4a04      	ldr	r2, [pc, #16]	; (8008e58 <__NVIC_SetPriorityGrouping+0x44>)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	60d3      	str	r3, [r2, #12]
}
 8008e4c:	bf00      	nop
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	e000ed00 	.word	0xe000ed00

08008e5c <__NVIC_GetPriorityGrouping>:
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <__NVIC_GetPriorityGrouping+0x18>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	0a1b      	lsrs	r3, r3, #8
 8008e66:	f003 0307 	and.w	r3, r3, #7
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	e000ed00 	.word	0xe000ed00

08008e78 <__NVIC_EnableIRQ>:
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	db0b      	blt.n	8008ea2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	f003 021f 	and.w	r2, r3, #31
 8008e90:	4907      	ldr	r1, [pc, #28]	; (8008eb0 <__NVIC_EnableIRQ+0x38>)
 8008e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e96:	095b      	lsrs	r3, r3, #5
 8008e98:	2001      	movs	r0, #1
 8008e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8008e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	e000e100 	.word	0xe000e100

08008eb4 <__NVIC_SetPriority>:
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	db0a      	blt.n	8008ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	490c      	ldr	r1, [pc, #48]	; (8008f00 <__NVIC_SetPriority+0x4c>)
 8008ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ed2:	0112      	lsls	r2, r2, #4
 8008ed4:	b2d2      	uxtb	r2, r2
 8008ed6:	440b      	add	r3, r1
 8008ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008edc:	e00a      	b.n	8008ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	4908      	ldr	r1, [pc, #32]	; (8008f04 <__NVIC_SetPriority+0x50>)
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	3b04      	subs	r3, #4
 8008eec:	0112      	lsls	r2, r2, #4
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	761a      	strb	r2, [r3, #24]
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	e000e100 	.word	0xe000e100
 8008f04:	e000ed00 	.word	0xe000ed00

08008f08 <NVIC_EncodePriority>:
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b089      	sub	sp, #36	; 0x24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f1c3 0307 	rsb	r3, r3, #7
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	bf28      	it	cs
 8008f26:	2304      	movcs	r3, #4
 8008f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	2b06      	cmp	r3, #6
 8008f30:	d902      	bls.n	8008f38 <NVIC_EncodePriority+0x30>
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	3b03      	subs	r3, #3
 8008f36:	e000      	b.n	8008f3a <NVIC_EncodePriority+0x32>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	fa02 f303 	lsl.w	r3, r2, r3
 8008f46:	43da      	mvns	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	401a      	ands	r2, r3
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5a:	43d9      	mvns	r1, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f60:	4313      	orrs	r3, r2
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3724      	adds	r7, #36	; 0x24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
	...

08008f70 <SysTick_Config>:
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f80:	d301      	bcc.n	8008f86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8008f82:	2301      	movs	r3, #1
 8008f84:	e00f      	b.n	8008fa6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f86:	4a0a      	ldr	r2, [pc, #40]	; (8008fb0 <SysTick_Config+0x40>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f8e:	210f      	movs	r1, #15
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f94:	f7ff ff8e 	bl	8008eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <SysTick_Config+0x40>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f9e:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <SysTick_Config+0x40>)
 8008fa0:	2207      	movs	r2, #7
 8008fa2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	e000e010 	.word	0xe000e010

08008fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ff29 	bl	8008e14 <__NVIC_SetPriorityGrouping>
}
 8008fc2:	bf00      	nop
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b086      	sub	sp, #24
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	607a      	str	r2, [r7, #4]
 8008fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008fdc:	f7ff ff3e 	bl	8008e5c <__NVIC_GetPriorityGrouping>
 8008fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	68b9      	ldr	r1, [r7, #8]
 8008fe6:	6978      	ldr	r0, [r7, #20]
 8008fe8:	f7ff ff8e 	bl	8008f08 <NVIC_EncodePriority>
 8008fec:	4602      	mov	r2, r0
 8008fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff ff5d 	bl	8008eb4 <__NVIC_SetPriority>
}
 8008ffa:	bf00      	nop
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	4603      	mov	r3, r0
 800900a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800900c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff ff31 	bl	8008e78 <__NVIC_EnableIRQ>
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff ffa2 	bl	8008f70 <SysTick_Config>
 800902c:	4603      	mov	r3, r0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009044:	f7ff fa7a 	bl	800853c <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e099      	b.n	8009188 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0201 	bic.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009074:	e00f      	b.n	8009096 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009076:	f7ff fa61 	bl	800853c <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b05      	cmp	r3, #5
 8009082:	d908      	bls.n	8009096 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2203      	movs	r2, #3
 800908e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e078      	b.n	8009188 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e8      	bne.n	8009076 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	4b38      	ldr	r3, [pc, #224]	; (8009190 <HAL_DMA_Init+0x158>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d107      	bne.n	8009100 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	4313      	orrs	r3, r2
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	4313      	orrs	r3, r2
 8009120:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	2b04      	cmp	r3, #4
 8009128:	d117      	bne.n	800915a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	4313      	orrs	r3, r2
 8009132:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00e      	beq.n	800915a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fb0d 	bl	800975c <DMA_CheckFifoParam>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d008      	beq.n	800915a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2240      	movs	r2, #64	; 0x40
 800914c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009156:	2301      	movs	r3, #1
 8009158:	e016      	b.n	8009188 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fac4 	bl	80096f0 <DMA_CalcBaseAndBitshift>
 8009168:	4603      	mov	r3, r0
 800916a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009170:	223f      	movs	r2, #63	; 0x3f
 8009172:	409a      	lsls	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	f010803f 	.word	0xf010803f

08009194 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d101      	bne.n	80091ba <HAL_DMA_Start_IT+0x26>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e040      	b.n	800923c <HAL_DMA_Start_IT+0xa8>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d12f      	bne.n	800922e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2202      	movs	r2, #2
 80091d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 fa56 	bl	8009694 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ec:	223f      	movs	r2, #63	; 0x3f
 80091ee:	409a      	lsls	r2, r3
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0216 	orr.w	r2, r2, #22
 8009202:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d007      	beq.n	800921c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f042 0208 	orr.w	r2, r2, #8
 800921a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	e005      	b.n	800923a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009236:	2302      	movs	r3, #2
 8009238:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800923a:	7dfb      	ldrb	r3, [r7, #23]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009250:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009252:	f7ff f973 	bl	800853c <HAL_GetTick>
 8009256:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d008      	beq.n	8009276 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2280      	movs	r2, #128	; 0x80
 8009268:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e052      	b.n	800931c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0216 	bic.w	r2, r2, #22
 8009284:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	695a      	ldr	r2, [r3, #20]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009294:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	2b00      	cmp	r3, #0
 800929c:	d103      	bne.n	80092a6 <HAL_DMA_Abort+0x62>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d007      	beq.n	80092b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0208 	bic.w	r2, r2, #8
 80092b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092c6:	e013      	b.n	80092f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092c8:	f7ff f938 	bl	800853c <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d90c      	bls.n	80092f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2203      	movs	r2, #3
 80092e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e015      	b.n	800931c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e4      	bne.n	80092c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009302:	223f      	movs	r2, #63	; 0x3f
 8009304:	409a      	lsls	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d004      	beq.n	8009342 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2280      	movs	r2, #128	; 0x80
 800933c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e00c      	b.n	800935c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2205      	movs	r2, #5
 8009346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0201 	bic.w	r2, r2, #1
 8009358:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009374:	4b92      	ldr	r3, [pc, #584]	; (80095c0 <HAL_DMA_IRQHandler+0x258>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a92      	ldr	r2, [pc, #584]	; (80095c4 <HAL_DMA_IRQHandler+0x25c>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	0a9b      	lsrs	r3, r3, #10
 8009380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009392:	2208      	movs	r2, #8
 8009394:	409a      	lsls	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01a      	beq.n	80093d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d013      	beq.n	80093d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0204 	bic.w	r2, r2, #4
 80093ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c0:	2208      	movs	r2, #8
 80093c2:	409a      	lsls	r2, r3
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093cc:	f043 0201 	orr.w	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d8:	2201      	movs	r2, #1
 80093da:	409a      	lsls	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4013      	ands	r3, r2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d012      	beq.n	800940a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f6:	2201      	movs	r2, #1
 80093f8:	409a      	lsls	r2, r3
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009402:	f043 0202 	orr.w	r2, r3, #2
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800940e:	2204      	movs	r2, #4
 8009410:	409a      	lsls	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4013      	ands	r3, r2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d012      	beq.n	8009440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800942c:	2204      	movs	r2, #4
 800942e:	409a      	lsls	r2, r3
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009438:	f043 0204 	orr.w	r2, r3, #4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009444:	2210      	movs	r2, #16
 8009446:	409a      	lsls	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4013      	ands	r3, r2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d043      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d03c      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009462:	2210      	movs	r2, #16
 8009464:	409a      	lsls	r2, r3
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d018      	beq.n	80094aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d108      	bne.n	8009498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	2b00      	cmp	r3, #0
 800948c:	d024      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	4798      	blx	r3
 8009496:	e01f      	b.n	80094d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01b      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
 80094a8:	e016      	b.n	80094d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d107      	bne.n	80094c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0208 	bic.w	r2, r2, #8
 80094c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094dc:	2220      	movs	r2, #32
 80094de:	409a      	lsls	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4013      	ands	r3, r2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 808e 	beq.w	8009606 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 8086 	beq.w	8009606 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fe:	2220      	movs	r2, #32
 8009500:	409a      	lsls	r2, r3
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b05      	cmp	r3, #5
 8009510:	d136      	bne.n	8009580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 0216 	bic.w	r2, r2, #22
 8009520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695a      	ldr	r2, [r3, #20]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <HAL_DMA_IRQHandler+0x1da>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800953e:	2b00      	cmp	r3, #0
 8009540:	d007      	beq.n	8009552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0208 	bic.w	r2, r2, #8
 8009550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009556:	223f      	movs	r2, #63	; 0x3f
 8009558:	409a      	lsls	r2, r3
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009572:	2b00      	cmp	r3, #0
 8009574:	d07d      	beq.n	8009672 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	4798      	blx	r3
        }
        return;
 800957e:	e078      	b.n	8009672 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01c      	beq.n	80095c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d108      	bne.n	80095ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d030      	beq.n	8009606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
 80095ac:	e02b      	b.n	8009606 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d027      	beq.n	8009606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
 80095be:	e022      	b.n	8009606 <HAL_DMA_IRQHandler+0x29e>
 80095c0:	20000194 	.word	0x20000194
 80095c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10f      	bne.n	80095f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0210 	bic.w	r2, r2, #16
 80095e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960a:	2b00      	cmp	r3, #0
 800960c:	d032      	beq.n	8009674 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d022      	beq.n	8009660 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2205      	movs	r2, #5
 800961e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0201 	bic.w	r2, r2, #1
 8009630:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	3301      	adds	r3, #1
 8009636:	60bb      	str	r3, [r7, #8]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	429a      	cmp	r2, r3
 800963c:	d307      	bcc.n	800964e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f2      	bne.n	8009632 <HAL_DMA_IRQHandler+0x2ca>
 800964c:	e000      	b.n	8009650 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800964e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
 8009670:	e000      	b.n	8009674 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009672:	bf00      	nop
    }
  }
}
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop

0800967c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80096b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b40      	cmp	r3, #64	; 0x40
 80096c0:	d108      	bne.n	80096d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80096d2:	e007      	b.n	80096e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	60da      	str	r2, [r3, #12]
}
 80096e4:	bf00      	nop
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	3b10      	subs	r3, #16
 8009700:	4a14      	ldr	r2, [pc, #80]	; (8009754 <DMA_CalcBaseAndBitshift+0x64>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	091b      	lsrs	r3, r3, #4
 8009708:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800970a:	4a13      	ldr	r2, [pc, #76]	; (8009758 <DMA_CalcBaseAndBitshift+0x68>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b03      	cmp	r3, #3
 800971c:	d909      	bls.n	8009732 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	659a      	str	r2, [r3, #88]	; 0x58
 8009730:	e007      	b.n	8009742 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	aaaaaaab 	.word	0xaaaaaaab
 8009758:	08018060 	.word	0x08018060

0800975c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d11f      	bne.n	80097b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d855      	bhi.n	8009828 <DMA_CheckFifoParam+0xcc>
 800977c:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <DMA_CheckFifoParam+0x28>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	08009795 	.word	0x08009795
 8009788:	080097a7 	.word	0x080097a7
 800978c:	08009795 	.word	0x08009795
 8009790:	08009829 	.word	0x08009829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d045      	beq.n	800982c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097a4:	e042      	b.n	800982c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097ae:	d13f      	bne.n	8009830 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097b4:	e03c      	b.n	8009830 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097be:	d121      	bne.n	8009804 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d836      	bhi.n	8009834 <DMA_CheckFifoParam+0xd8>
 80097c6:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <DMA_CheckFifoParam+0x70>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	080097dd 	.word	0x080097dd
 80097d0:	080097e3 	.word	0x080097e3
 80097d4:	080097dd 	.word	0x080097dd
 80097d8:	080097f5 	.word	0x080097f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	73fb      	strb	r3, [r7, #15]
      break;
 80097e0:	e02f      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d024      	beq.n	8009838 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097f2:	e021      	b.n	8009838 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097fc:	d11e      	bne.n	800983c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009802:	e01b      	b.n	800983c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b02      	cmp	r3, #2
 8009808:	d902      	bls.n	8009810 <DMA_CheckFifoParam+0xb4>
 800980a:	2b03      	cmp	r3, #3
 800980c:	d003      	beq.n	8009816 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800980e:	e018      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	73fb      	strb	r3, [r7, #15]
      break;
 8009814:	e015      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
      break;
 8009826:	e00b      	b.n	8009840 <DMA_CheckFifoParam+0xe4>
      break;
 8009828:	bf00      	nop
 800982a:	e00a      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      break;
 800982c:	bf00      	nop
 800982e:	e008      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      break;
 8009830:	bf00      	nop
 8009832:	e006      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      break;
 8009834:	bf00      	nop
 8009836:	e004      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      break;
 8009838:	bf00      	nop
 800983a:	e002      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      break;   
 800983c:	bf00      	nop
 800983e:	e000      	b.n	8009842 <DMA_CheckFifoParam+0xe6>
      break;
 8009840:	bf00      	nop
    }
  } 
  
  return status; 
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009850:	b480      	push	{r7}
 8009852:	b089      	sub	sp, #36	; 0x24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800985e:	2300      	movs	r3, #0
 8009860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009862:	2300      	movs	r3, #0
 8009864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009866:	2300      	movs	r3, #0
 8009868:	61fb      	str	r3, [r7, #28]
 800986a:	e16b      	b.n	8009b44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800986c:	2201      	movs	r2, #1
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	4013      	ands	r3, r2
 800987e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	429a      	cmp	r2, r3
 8009886:	f040 815a 	bne.w	8009b3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d00b      	beq.n	80098aa <HAL_GPIO_Init+0x5a>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	2b02      	cmp	r3, #2
 8009898:	d007      	beq.n	80098aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800989e:	2b11      	cmp	r3, #17
 80098a0:	d003      	beq.n	80098aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b12      	cmp	r3, #18
 80098a8:	d130      	bne.n	800990c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	005b      	lsls	r3, r3, #1
 80098b4:	2203      	movs	r2, #3
 80098b6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ba:	43db      	mvns	r3, r3
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	4013      	ands	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	fa02 f303 	lsl.w	r3, r2, r3
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	69ba      	ldr	r2, [r7, #24]
 80098d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80098e0:	2201      	movs	r2, #1
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	fa02 f303 	lsl.w	r3, r2, r3
 80098e8:	43db      	mvns	r3, r3
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	4013      	ands	r3, r2
 80098ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	091b      	lsrs	r3, r3, #4
 80098f6:	f003 0201 	and.w	r2, r3, #1
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009900:	69ba      	ldr	r2, [r7, #24]
 8009902:	4313      	orrs	r3, r2
 8009904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	2203      	movs	r2, #3
 8009918:	fa02 f303 	lsl.w	r3, r2, r3
 800991c:	43db      	mvns	r3, r3
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	4013      	ands	r3, r2
 8009922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	fa02 f303 	lsl.w	r3, r2, r3
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	4313      	orrs	r3, r2
 8009934:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	2b02      	cmp	r3, #2
 8009942:	d003      	beq.n	800994c <HAL_GPIO_Init+0xfc>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	2b12      	cmp	r3, #18
 800994a:	d123      	bne.n	8009994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	08da      	lsrs	r2, r3, #3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3208      	adds	r2, #8
 8009954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	220f      	movs	r2, #15
 8009964:	fa02 f303 	lsl.w	r3, r2, r3
 8009968:	43db      	mvns	r3, r3
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	4013      	ands	r3, r2
 800996e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	691a      	ldr	r2, [r3, #16]
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	4313      	orrs	r3, r2
 8009984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	08da      	lsrs	r2, r3, #3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	3208      	adds	r2, #8
 800998e:	69b9      	ldr	r1, [r7, #24]
 8009990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	2203      	movs	r2, #3
 80099a0:	fa02 f303 	lsl.w	r3, r2, r3
 80099a4:	43db      	mvns	r3, r3
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	4013      	ands	r3, r2
 80099aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f003 0203 	and.w	r2, r3, #3
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	fa02 f303 	lsl.w	r3, r2, r3
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	4313      	orrs	r3, r2
 80099c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	69ba      	ldr	r2, [r7, #24]
 80099c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 80b4 	beq.w	8009b3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	4b5f      	ldr	r3, [pc, #380]	; (8009b58 <HAL_GPIO_Init+0x308>)
 80099dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099de:	4a5e      	ldr	r2, [pc, #376]	; (8009b58 <HAL_GPIO_Init+0x308>)
 80099e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099e4:	6453      	str	r3, [r2, #68]	; 0x44
 80099e6:	4b5c      	ldr	r3, [pc, #368]	; (8009b58 <HAL_GPIO_Init+0x308>)
 80099e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80099f2:	4a5a      	ldr	r2, [pc, #360]	; (8009b5c <HAL_GPIO_Init+0x30c>)
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	089b      	lsrs	r3, r3, #2
 80099f8:	3302      	adds	r3, #2
 80099fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	220f      	movs	r2, #15
 8009a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0e:	43db      	mvns	r3, r3
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	4013      	ands	r3, r2
 8009a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a51      	ldr	r2, [pc, #324]	; (8009b60 <HAL_GPIO_Init+0x310>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d02b      	beq.n	8009a76 <HAL_GPIO_Init+0x226>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a50      	ldr	r2, [pc, #320]	; (8009b64 <HAL_GPIO_Init+0x314>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d025      	beq.n	8009a72 <HAL_GPIO_Init+0x222>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a4f      	ldr	r2, [pc, #316]	; (8009b68 <HAL_GPIO_Init+0x318>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d01f      	beq.n	8009a6e <HAL_GPIO_Init+0x21e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a4e      	ldr	r2, [pc, #312]	; (8009b6c <HAL_GPIO_Init+0x31c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d019      	beq.n	8009a6a <HAL_GPIO_Init+0x21a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a4d      	ldr	r2, [pc, #308]	; (8009b70 <HAL_GPIO_Init+0x320>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d013      	beq.n	8009a66 <HAL_GPIO_Init+0x216>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a4c      	ldr	r2, [pc, #304]	; (8009b74 <HAL_GPIO_Init+0x324>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00d      	beq.n	8009a62 <HAL_GPIO_Init+0x212>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a4b      	ldr	r2, [pc, #300]	; (8009b78 <HAL_GPIO_Init+0x328>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d007      	beq.n	8009a5e <HAL_GPIO_Init+0x20e>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a4a      	ldr	r2, [pc, #296]	; (8009b7c <HAL_GPIO_Init+0x32c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d101      	bne.n	8009a5a <HAL_GPIO_Init+0x20a>
 8009a56:	2307      	movs	r3, #7
 8009a58:	e00e      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a5a:	2308      	movs	r3, #8
 8009a5c:	e00c      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a5e:	2306      	movs	r3, #6
 8009a60:	e00a      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a62:	2305      	movs	r3, #5
 8009a64:	e008      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a66:	2304      	movs	r3, #4
 8009a68:	e006      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e004      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e002      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <HAL_GPIO_Init+0x228>
 8009a76:	2300      	movs	r3, #0
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	f002 0203 	and.w	r2, r2, #3
 8009a7e:	0092      	lsls	r2, r2, #2
 8009a80:	4093      	lsls	r3, r2
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a88:	4934      	ldr	r1, [pc, #208]	; (8009b5c <HAL_GPIO_Init+0x30c>)
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	089b      	lsrs	r3, r3, #2
 8009a8e:	3302      	adds	r3, #2
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009a96:	4b3a      	ldr	r3, [pc, #232]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009aba:	4a31      	ldr	r2, [pc, #196]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009ac0:	4b2f      	ldr	r3, [pc, #188]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	4013      	ands	r3, r2
 8009ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ae4:	4a26      	ldr	r2, [pc, #152]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009aea:	4b25      	ldr	r3, [pc, #148]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	43db      	mvns	r3, r3
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	4013      	ands	r3, r2
 8009af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009b0e:	4a1c      	ldr	r2, [pc, #112]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009b14:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	43db      	mvns	r3, r3
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	4013      	ands	r3, r2
 8009b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009b38:	4a11      	ldr	r2, [pc, #68]	; (8009b80 <HAL_GPIO_Init+0x330>)
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	3301      	adds	r3, #1
 8009b42:	61fb      	str	r3, [r7, #28]
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2b0f      	cmp	r3, #15
 8009b48:	f67f ae90 	bls.w	800986c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	3724      	adds	r7, #36	; 0x24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	40013800 	.word	0x40013800
 8009b60:	40020000 	.word	0x40020000
 8009b64:	40020400 	.word	0x40020400
 8009b68:	40020800 	.word	0x40020800
 8009b6c:	40020c00 	.word	0x40020c00
 8009b70:	40021000 	.word	0x40021000
 8009b74:	40021400 	.word	0x40021400
 8009b78:	40021800 	.word	0x40021800
 8009b7c:	40021c00 	.word	0x40021c00
 8009b80:	40013c00 	.word	0x40013c00

08009b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	691a      	ldr	r2, [r3, #16]
 8009b94:	887b      	ldrh	r3, [r7, #2]
 8009b96:	4013      	ands	r3, r2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	73fb      	strb	r3, [r7, #15]
 8009ba0:	e001      	b.n	8009ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	807b      	strh	r3, [r7, #2]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009bc4:	787b      	ldrb	r3, [r7, #1]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009bca:	887a      	ldrh	r2, [r7, #2]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009bd0:	e003      	b.n	8009bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009bd2:	887b      	ldrh	r3, [r7, #2]
 8009bd4:	041a      	lsls	r2, r3, #16
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	619a      	str	r2, [r3, #24]
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	695a      	ldr	r2, [r3, #20]
 8009bf6:	887b      	ldrh	r3, [r7, #2]
 8009bf8:	401a      	ands	r2, r3
 8009bfa:	887b      	ldrh	r3, [r7, #2]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d104      	bne.n	8009c0a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009c00:	887b      	ldrh	r3, [r7, #2]
 8009c02:	041a      	lsls	r2, r3, #16
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009c08:	e002      	b.n	8009c10 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009c0a:	887a      	ldrh	r2, [r7, #2]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	619a      	str	r2, [r3, #24]
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e11f      	b.n	8009e6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7f8 ff5e 	bl	8002b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2224      	movs	r2, #36	; 0x24
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0201 	bic.w	r2, r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c80:	f001 fca4 	bl	800b5cc <HAL_RCC_GetPCLK1Freq>
 8009c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	4a7b      	ldr	r2, [pc, #492]	; (8009e78 <HAL_I2C_Init+0x25c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d807      	bhi.n	8009ca0 <HAL_I2C_Init+0x84>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4a7a      	ldr	r2, [pc, #488]	; (8009e7c <HAL_I2C_Init+0x260>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	bf94      	ite	ls
 8009c98:	2301      	movls	r3, #1
 8009c9a:	2300      	movhi	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	e006      	b.n	8009cae <HAL_I2C_Init+0x92>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4a77      	ldr	r2, [pc, #476]	; (8009e80 <HAL_I2C_Init+0x264>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bf94      	ite	ls
 8009ca8:	2301      	movls	r3, #1
 8009caa:	2300      	movhi	r3, #0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e0db      	b.n	8009e6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a72      	ldr	r2, [pc, #456]	; (8009e84 <HAL_I2C_Init+0x268>)
 8009cba:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbe:	0c9b      	lsrs	r3, r3, #18
 8009cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a64      	ldr	r2, [pc, #400]	; (8009e78 <HAL_I2C_Init+0x25c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d802      	bhi.n	8009cf0 <HAL_I2C_Init+0xd4>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3301      	adds	r3, #1
 8009cee:	e009      	b.n	8009d04 <HAL_I2C_Init+0xe8>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009cf6:	fb02 f303 	mul.w	r3, r2, r3
 8009cfa:	4a63      	ldr	r2, [pc, #396]	; (8009e88 <HAL_I2C_Init+0x26c>)
 8009cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009d00:	099b      	lsrs	r3, r3, #6
 8009d02:	3301      	adds	r3, #1
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	4956      	ldr	r1, [pc, #344]	; (8009e78 <HAL_I2C_Init+0x25c>)
 8009d20:	428b      	cmp	r3, r1
 8009d22:	d80d      	bhi.n	8009d40 <HAL_I2C_Init+0x124>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	1e59      	subs	r1, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d32:	3301      	adds	r3, #1
 8009d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	bf38      	it	cc
 8009d3c:	2304      	movcc	r3, #4
 8009d3e:	e04f      	b.n	8009de0 <HAL_I2C_Init+0x1c4>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d111      	bne.n	8009d6c <HAL_I2C_Init+0x150>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	1e58      	subs	r0, r3, #1
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6859      	ldr	r1, [r3, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	440b      	add	r3, r1
 8009d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bf0c      	ite	eq
 8009d64:	2301      	moveq	r3, #1
 8009d66:	2300      	movne	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	e012      	b.n	8009d92 <HAL_I2C_Init+0x176>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	1e58      	subs	r0, r3, #1
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6859      	ldr	r1, [r3, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	440b      	add	r3, r1
 8009d7a:	0099      	lsls	r1, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d82:	3301      	adds	r3, #1
 8009d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	bf0c      	ite	eq
 8009d8c:	2301      	moveq	r3, #1
 8009d8e:	2300      	movne	r3, #0
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <HAL_I2C_Init+0x17e>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e022      	b.n	8009de0 <HAL_I2C_Init+0x1c4>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10e      	bne.n	8009dc0 <HAL_I2C_Init+0x1a4>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1e58      	subs	r0, r3, #1
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6859      	ldr	r1, [r3, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	440b      	add	r3, r1
 8009db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8009db4:	3301      	adds	r3, #1
 8009db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dbe:	e00f      	b.n	8009de0 <HAL_I2C_Init+0x1c4>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	1e58      	subs	r0, r3, #1
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6859      	ldr	r1, [r3, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	440b      	add	r3, r1
 8009dce:	0099      	lsls	r1, r3, #2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	6809      	ldr	r1, [r1, #0]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	69da      	ldr	r2, [r3, #28]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	6911      	ldr	r1, [r2, #16]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68d2      	ldr	r2, [r2, #12]
 8009e1a:	4311      	orrs	r1, r2
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6812      	ldr	r2, [r2, #0]
 8009e20:	430b      	orrs	r3, r1
 8009e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	695a      	ldr	r2, [r3, #20]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0201 	orr.w	r2, r2, #1
 8009e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	000186a0 	.word	0x000186a0
 8009e7c:	001e847f 	.word	0x001e847f
 8009e80:	003d08ff 	.word	0x003d08ff
 8009e84:	431bde83 	.word	0x431bde83
 8009e88:	10624dd3 	.word	0x10624dd3

08009e8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	461a      	mov	r2, r3
 8009e98:	460b      	mov	r3, r1
 8009e9a:	817b      	strh	r3, [r7, #10]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ea0:	f7fe fb4c 	bl	800853c <HAL_GetTick>
 8009ea4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b20      	cmp	r3, #32
 8009eb0:	f040 80e0 	bne.w	800a074 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2319      	movs	r3, #25
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4970      	ldr	r1, [pc, #448]	; (800a080 <HAL_I2C_Master_Transmit+0x1f4>)
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 fd92 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e0d3      	b.n	800a076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d101      	bne.n	8009edc <HAL_I2C_Master_Transmit+0x50>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e0cc      	b.n	800a076 <HAL_I2C_Master_Transmit+0x1ea>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d007      	beq.n	8009f02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0201 	orr.w	r2, r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2221      	movs	r2, #33	; 0x21
 8009f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2210      	movs	r2, #16
 8009f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	893a      	ldrh	r2, [r7, #8]
 8009f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4a50      	ldr	r2, [pc, #320]	; (800a084 <HAL_I2C_Master_Transmit+0x1f8>)
 8009f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009f44:	8979      	ldrh	r1, [r7, #10]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	6a3a      	ldr	r2, [r7, #32]
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fbfe 	bl	800a74c <I2C_MasterRequestWrite>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e08d      	b.n	800a076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	613b      	str	r3, [r7, #16]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	613b      	str	r3, [r7, #16]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	613b      	str	r3, [r7, #16]
 8009f6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009f70:	e066      	b.n	800a040 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	6a39      	ldr	r1, [r7, #32]
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 fe0c 	bl	800ab94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00d      	beq.n	8009f9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d107      	bne.n	8009f9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e06b      	b.n	800a076 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	781a      	ldrb	r2, [r3, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	d11b      	bne.n	800a014 <HAL_I2C_Master_Transmit+0x188>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d017      	beq.n	800a014 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	781a      	ldrb	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	1c5a      	adds	r2, r3, #1
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	3b01      	subs	r3, #1
 800a002:	b29a      	uxth	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	6a39      	ldr	r1, [r7, #32]
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 fdfc 	bl	800ac16 <I2C_WaitOnBTFFlagUntilTimeout>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00d      	beq.n	800a040 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a028:	2b04      	cmp	r3, #4
 800a02a:	d107      	bne.n	800a03c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a03a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e01a      	b.n	800a076 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a044:	2b00      	cmp	r3, #0
 800a046:	d194      	bne.n	8009f72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	e000      	b.n	800a076 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a074:	2302      	movs	r3, #2
  }
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	00100002 	.word	0x00100002
 800a084:	ffff0000 	.word	0xffff0000

0800a088 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	; 0x30
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	607a      	str	r2, [r7, #4]
 800a092:	461a      	mov	r2, r3
 800a094:	460b      	mov	r3, r1
 800a096:	817b      	strh	r3, [r7, #10]
 800a098:	4613      	mov	r3, r2
 800a09a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a09c:	f7fe fa4e 	bl	800853c <HAL_GetTick>
 800a0a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b20      	cmp	r3, #32
 800a0ac:	f040 820b 	bne.w	800a4c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	2319      	movs	r3, #25
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	497c      	ldr	r1, [pc, #496]	; (800a2ac <HAL_I2C_Master_Receive+0x224>)
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 fc94 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e1fe      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_I2C_Master_Receive+0x50>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e1f7      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d007      	beq.n	800a0fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f042 0201 	orr.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a10c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2222      	movs	r2, #34	; 0x22
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2210      	movs	r2, #16
 800a11a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	893a      	ldrh	r2, [r7, #8]
 800a12e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a134:	b29a      	uxth	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4a5c      	ldr	r2, [pc, #368]	; (800a2b0 <HAL_I2C_Master_Receive+0x228>)
 800a13e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a140:	8979      	ldrh	r1, [r7, #10]
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 fb82 	bl	800a850 <I2C_MasterRequestRead>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e1b8      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d113      	bne.n	800a186 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a15e:	2300      	movs	r3, #0
 800a160:	623b      	str	r3, [r7, #32]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	623b      	str	r3, [r7, #32]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	623b      	str	r3, [r7, #32]
 800a172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	e18c      	b.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d11b      	bne.n	800a1c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a19c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a19e:	2300      	movs	r3, #0
 800a1a0:	61fb      	str	r3, [r7, #28]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	61fb      	str	r3, [r7, #28]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	61fb      	str	r3, [r7, #28]
 800a1b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e16c      	b.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d11b      	bne.n	800a206 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61bb      	str	r3, [r7, #24]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	61bb      	str	r3, [r7, #24]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	61bb      	str	r3, [r7, #24]
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	e14c      	b.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a214:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a22c:	e138      	b.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a232:	2b03      	cmp	r3, #3
 800a234:	f200 80f1 	bhi.w	800a41a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d123      	bne.n	800a288 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 fd27 	bl	800ac98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e139      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691a      	ldr	r2, [r3, #16]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a270:	3b01      	subs	r3, #1
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	3b01      	subs	r3, #1
 800a280:	b29a      	uxth	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a286:	e10b      	b.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d14e      	bne.n	800a32e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	2200      	movs	r2, #0
 800a298:	4906      	ldr	r1, [pc, #24]	; (800a2b4 <HAL_I2C_Master_Receive+0x22c>)
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 fba4 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d008      	beq.n	800a2b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e10e      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
 800a2aa:	bf00      	nop
 800a2ac:	00100002 	.word	0x00100002
 800a2b0:	ffff0000 	.word	0xffff0000
 800a2b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	691a      	ldr	r2, [r3, #16]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	b2d2      	uxtb	r2, r2
 800a2d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	691a      	ldr	r2, [r3, #16]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	b2d2      	uxtb	r2, r2
 800a306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a316:	3b01      	subs	r3, #1
 800a318:	b29a      	uxth	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a322:	b29b      	uxth	r3, r3
 800a324:	3b01      	subs	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a32c:	e0b8      	b.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	2200      	movs	r2, #0
 800a336:	4966      	ldr	r1, [pc, #408]	; (800a4d0 <HAL_I2C_Master_Receive+0x448>)
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 fb55 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e0bf      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	691a      	ldr	r2, [r3, #16]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a374:	3b01      	subs	r3, #1
 800a376:	b29a      	uxth	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a380:	b29b      	uxth	r3, r3
 800a382:	3b01      	subs	r3, #1
 800a384:	b29a      	uxth	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	2200      	movs	r2, #0
 800a392:	494f      	ldr	r1, [pc, #316]	; (800a4d0 <HAL_I2C_Master_Receive+0x448>)
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 fb27 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e091      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	b2d2      	uxtb	r2, r2
 800a3c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	b2d2      	uxtb	r2, r2
 800a3f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a402:	3b01      	subs	r3, #1
 800a404:	b29a      	uxth	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a40e:	b29b      	uxth	r3, r3
 800a410:	3b01      	subs	r3, #1
 800a412:	b29a      	uxth	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a418:	e042      	b.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 fc3a 	bl	800ac98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e04c      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	691a      	ldr	r2, [r3, #16]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	b2d2      	uxtb	r2, r2
 800a43a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	f003 0304 	and.w	r3, r3, #4
 800a46a:	2b04      	cmp	r3, #4
 800a46c:	d118      	bne.n	800a4a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	691a      	ldr	r2, [r3, #16]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	b2d2      	uxtb	r2, r2
 800a47a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48a:	3b01      	subs	r3, #1
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f47f aec2 	bne.w	800a22e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e000      	b.n	800a4c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a4c6:	2302      	movs	r3, #2
  }
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3728      	adds	r7, #40	; 0x28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	00010004 	.word	0x00010004

0800a4d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08a      	sub	sp, #40	; 0x28
 800a4d8:	af02      	add	r7, sp, #8
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	607a      	str	r2, [r7, #4]
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a4e4:	f7fe f82a 	bl	800853c <HAL_GetTick>
 800a4e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	f040 8110 	bne.w	800a71c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2319      	movs	r3, #25
 800a502:	2201      	movs	r2, #1
 800a504:	4988      	ldr	r1, [pc, #544]	; (800a728 <HAL_I2C_IsDeviceReady+0x254>)
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 fa6e 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a512:	2302      	movs	r3, #2
 800a514:	e103      	b.n	800a71e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d101      	bne.n	800a524 <HAL_I2C_IsDeviceReady+0x50>
 800a520:	2302      	movs	r3, #2
 800a522:	e0fc      	b.n	800a71e <HAL_I2C_IsDeviceReady+0x24a>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b01      	cmp	r3, #1
 800a538:	d007      	beq.n	800a54a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0201 	orr.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a558:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2224      	movs	r2, #36	; 0x24
 800a55e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4a70      	ldr	r2, [pc, #448]	; (800a72c <HAL_I2C_IsDeviceReady+0x258>)
 800a56c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a57c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2200      	movs	r2, #0
 800a586:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fa2c 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00c      	beq.n	800a5b0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e0b6      	b.n	800a71e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5b0:	897b      	ldrh	r3, [r7, #10]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a5be:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a5c0:	f7fd ffbc 	bl	800853c <HAL_GetTick>
 800a5c4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	f003 0302 	and.w	r3, r3, #2
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2301      	moveq	r3, #1
 800a5d6:	2300      	movne	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a5f4:	e025      	b.n	800a642 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a5f6:	f7fd ffa1 	bl	800853c <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d302      	bcc.n	800a60c <HAL_I2C_IsDeviceReady+0x138>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	22a0      	movs	r2, #160	; 0xa0
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b02      	cmp	r3, #2
 800a620:	bf0c      	ite	eq
 800a622:	2301      	moveq	r3, #1
 800a624:	2300      	movne	r3, #0
 800a626:	b2db      	uxtb	r3, r3
 800a628:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a638:	bf0c      	ite	eq
 800a63a:	2301      	moveq	r3, #1
 800a63c:	2300      	movne	r3, #0
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2ba0      	cmp	r3, #160	; 0xa0
 800a64c:	d005      	beq.n	800a65a <HAL_I2C_IsDeviceReady+0x186>
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <HAL_I2C_IsDeviceReady+0x186>
 800a654:	7dbb      	ldrb	r3, [r7, #22]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0cd      	beq.n	800a5f6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d129      	bne.n	800a6c4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a67e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a680:	2300      	movs	r3, #0
 800a682:	613b      	str	r3, [r7, #16]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	613b      	str	r3, [r7, #16]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	613b      	str	r3, [r7, #16]
 800a694:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	2319      	movs	r3, #25
 800a69c:	2201      	movs	r2, #1
 800a69e:	4922      	ldr	r1, [pc, #136]	; (800a728 <HAL_I2C_IsDeviceReady+0x254>)
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 f9a1 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e036      	b.n	800a71e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e02c      	b.n	800a71e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6d2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6dc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	2319      	movs	r3, #25
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	4910      	ldr	r1, [pc, #64]	; (800a728 <HAL_I2C_IsDeviceReady+0x254>)
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 f97d 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e012      	b.n	800a71e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	f4ff af33 	bcc.w	800a56e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e000      	b.n	800a71e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800a71c:	2302      	movs	r3, #2
  }
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	00100002 	.word	0x00100002
 800a72c:	ffff0000 	.word	0xffff0000

0800a730 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73e:	b2db      	uxtb	r3, r3
}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af02      	add	r7, sp, #8
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	607a      	str	r2, [r7, #4]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	460b      	mov	r3, r1
 800a75a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b08      	cmp	r3, #8
 800a766:	d006      	beq.n	800a776 <I2C_MasterRequestWrite+0x2a>
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d003      	beq.n	800a776 <I2C_MasterRequestWrite+0x2a>
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a774:	d108      	bne.n	800a788 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	e00b      	b.n	800a7a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	2b12      	cmp	r3, #18
 800a78e:	d107      	bne.n	800a7a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a79e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 f91b 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00c      	beq.n	800a7d2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e035      	b.n	800a83e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7da:	d108      	bne.n	800a7ee <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7dc:	897b      	ldrh	r3, [r7, #10]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7ea:	611a      	str	r2, [r3, #16]
 800a7ec:	e01b      	b.n	800a826 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a7ee:	897b      	ldrh	r3, [r7, #10]
 800a7f0:	11db      	asrs	r3, r3, #7
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0306 	and.w	r3, r3, #6
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f063 030f 	orn	r3, r3, #15
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	490f      	ldr	r1, [pc, #60]	; (800a848 <I2C_MasterRequestWrite+0xfc>)
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f942 	bl	800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e010      	b.n	800a83e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a81c:	897b      	ldrh	r3, [r7, #10]
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	4908      	ldr	r1, [pc, #32]	; (800a84c <I2C_MasterRequestWrite+0x100>)
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f000 f932 	bl	800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	00010008 	.word	0x00010008
 800a84c:	00010002 	.word	0x00010002

0800a850 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b088      	sub	sp, #32
 800a854:	af02      	add	r7, sp, #8
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	607a      	str	r2, [r7, #4]
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	460b      	mov	r3, r1
 800a85e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a874:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b08      	cmp	r3, #8
 800a87a:	d006      	beq.n	800a88a <I2C_MasterRequestRead+0x3a>
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d003      	beq.n	800a88a <I2C_MasterRequestRead+0x3a>
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a888:	d108      	bne.n	800a89c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e00b      	b.n	800a8b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a0:	2b11      	cmp	r3, #17
 800a8a2:	d107      	bne.n	800a8b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 f891 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00c      	beq.n	800a8e6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e078      	b.n	800a9d8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8ee:	d108      	bne.n	800a902 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a8f0:	897b      	ldrh	r3, [r7, #10]
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	f043 0301 	orr.w	r3, r3, #1
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	611a      	str	r2, [r3, #16]
 800a900:	e05e      	b.n	800a9c0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a902:	897b      	ldrh	r3, [r7, #10]
 800a904:	11db      	asrs	r3, r3, #7
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f003 0306 	and.w	r3, r3, #6
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f063 030f 	orn	r3, r3, #15
 800a912:	b2da      	uxtb	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4930      	ldr	r1, [pc, #192]	; (800a9e0 <I2C_MasterRequestRead+0x190>)
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 f8b8 	bl	800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e053      	b.n	800a9d8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a930:	897b      	ldrh	r3, [r7, #10]
 800a932:	b2da      	uxtb	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	4929      	ldr	r1, [pc, #164]	; (800a9e4 <I2C_MasterRequestRead+0x194>)
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f8a8 	bl	800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e043      	b.n	800a9d8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a950:	2300      	movs	r3, #0
 800a952:	613b      	str	r3, [r7, #16]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	613b      	str	r3, [r7, #16]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	613b      	str	r3, [r7, #16]
 800a964:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a974:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 f830 	bl	800a9e8 <I2C_WaitOnFlagUntilTimeout>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00c      	beq.n	800a9a8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e017      	b.n	800a9d8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a9a8:	897b      	ldrh	r3, [r7, #10]
 800a9aa:	11db      	asrs	r3, r3, #7
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0306 	and.w	r3, r3, #6
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f063 030e 	orn	r3, r3, #14
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	4907      	ldr	r1, [pc, #28]	; (800a9e4 <I2C_MasterRequestRead+0x194>)
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 f865 	bl	800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	00010008 	.word	0x00010008
 800a9e4:	00010002 	.word	0x00010002

0800a9e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9f8:	e025      	b.n	800aa46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa00:	d021      	beq.n	800aa46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa02:	f7fd fd9b 	bl	800853c <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d302      	bcc.n	800aa18 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d116      	bne.n	800aa46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	f043 0220 	orr.w	r2, r3, #32
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e023      	b.n	800aa8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	0c1b      	lsrs	r3, r3, #16
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d10d      	bne.n	800aa6c <I2C_WaitOnFlagUntilTimeout+0x84>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	43da      	mvns	r2, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bf0c      	ite	eq
 800aa62:	2301      	moveq	r3, #1
 800aa64:	2300      	movne	r3, #0
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	461a      	mov	r2, r3
 800aa6a:	e00c      	b.n	800aa86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	43da      	mvns	r2, r3
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4013      	ands	r3, r2
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bf0c      	ite	eq
 800aa7e:	2301      	moveq	r3, #1
 800aa80:	2300      	movne	r3, #0
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d0b6      	beq.n	800a9fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	607a      	str	r2, [r7, #4]
 800aaa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aaa4:	e051      	b.n	800ab4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aab4:	d123      	bne.n	800aafe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aac4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aace:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2220      	movs	r2, #32
 800aada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	f043 0204 	orr.w	r2, r3, #4
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e046      	b.n	800ab8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab04:	d021      	beq.n	800ab4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab06:	f7fd fd19 	bl	800853c <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d302      	bcc.n	800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d116      	bne.n	800ab4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2220      	movs	r2, #32
 800ab26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab36:	f043 0220 	orr.w	r2, r3, #32
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e020      	b.n	800ab8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	0c1b      	lsrs	r3, r3, #16
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d10c      	bne.n	800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	43da      	mvns	r2, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	4013      	ands	r3, r2
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	bf14      	ite	ne
 800ab66:	2301      	movne	r3, #1
 800ab68:	2300      	moveq	r3, #0
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	e00b      	b.n	800ab86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	43da      	mvns	r2, r3
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bf14      	ite	ne
 800ab80:	2301      	movne	r3, #1
 800ab82:	2300      	moveq	r3, #0
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d18d      	bne.n	800aaa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aba0:	e02d      	b.n	800abfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 f8ce 	bl	800ad44 <I2C_IsAcknowledgeFailed>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e02d      	b.n	800ac0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abb8:	d021      	beq.n	800abfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abba:	f7fd fcbf 	bl	800853c <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d302      	bcc.n	800abd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d116      	bne.n	800abfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2220      	movs	r2, #32
 800abda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	f043 0220 	orr.w	r2, r3, #32
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e007      	b.n	800ac0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac08:	2b80      	cmp	r3, #128	; 0x80
 800ac0a:	d1ca      	bne.n	800aba2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac22:	e02d      	b.n	800ac80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 f88d 	bl	800ad44 <I2C_IsAcknowledgeFailed>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d001      	beq.n	800ac34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e02d      	b.n	800ac90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac3a:	d021      	beq.n	800ac80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac3c:	f7fd fc7e 	bl	800853c <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d302      	bcc.n	800ac52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d116      	bne.n	800ac80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2220      	movs	r2, #32
 800ac5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	f043 0220 	orr.w	r2, r3, #32
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e007      	b.n	800ac90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	f003 0304 	and.w	r3, r3, #4
 800ac8a:	2b04      	cmp	r3, #4
 800ac8c:	d1ca      	bne.n	800ac24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aca4:	e042      	b.n	800ad2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	695b      	ldr	r3, [r3, #20]
 800acac:	f003 0310 	and.w	r3, r3, #16
 800acb0:	2b10      	cmp	r3, #16
 800acb2:	d119      	bne.n	800ace8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f06f 0210 	mvn.w	r2, #16
 800acbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2220      	movs	r2, #32
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e029      	b.n	800ad3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ace8:	f7fd fc28 	bl	800853c <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d302      	bcc.n	800acfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d116      	bne.n	800ad2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad18:	f043 0220 	orr.w	r2, r3, #32
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e007      	b.n	800ad3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d1b5      	bne.n	800aca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5a:	d11b      	bne.n	800ad94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad80:	f043 0204 	orr.w	r2, r3, #4
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e000      	b.n	800ad96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
	...

0800ada4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e25b      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d075      	beq.n	800aeae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800adc2:	4ba3      	ldr	r3, [pc, #652]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f003 030c 	and.w	r3, r3, #12
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d00c      	beq.n	800ade8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800adce:	4ba0      	ldr	r3, [pc, #640]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800add6:	2b08      	cmp	r3, #8
 800add8:	d112      	bne.n	800ae00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800adda:	4b9d      	ldr	r3, [pc, #628]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ade2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ade6:	d10b      	bne.n	800ae00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ade8:	4b99      	ldr	r3, [pc, #612]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d05b      	beq.n	800aeac <HAL_RCC_OscConfig+0x108>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d157      	bne.n	800aeac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e236      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae08:	d106      	bne.n	800ae18 <HAL_RCC_OscConfig+0x74>
 800ae0a:	4b91      	ldr	r3, [pc, #580]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a90      	ldr	r2, [pc, #576]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	e01d      	b.n	800ae54 <HAL_RCC_OscConfig+0xb0>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae20:	d10c      	bne.n	800ae3c <HAL_RCC_OscConfig+0x98>
 800ae22:	4b8b      	ldr	r3, [pc, #556]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a8a      	ldr	r2, [pc, #552]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	4b88      	ldr	r3, [pc, #544]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a87      	ldr	r2, [pc, #540]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	e00b      	b.n	800ae54 <HAL_RCC_OscConfig+0xb0>
 800ae3c:	4b84      	ldr	r3, [pc, #528]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a83      	ldr	r2, [pc, #524]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	4b81      	ldr	r3, [pc, #516]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a80      	ldr	r2, [pc, #512]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d013      	beq.n	800ae84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae5c:	f7fd fb6e 	bl	800853c <HAL_GetTick>
 800ae60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae62:	e008      	b.n	800ae76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae64:	f7fd fb6a 	bl	800853c <HAL_GetTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	2b64      	cmp	r3, #100	; 0x64
 800ae70:	d901      	bls.n	800ae76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e1fb      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae76:	4b76      	ldr	r3, [pc, #472]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0f0      	beq.n	800ae64 <HAL_RCC_OscConfig+0xc0>
 800ae82:	e014      	b.n	800aeae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae84:	f7fd fb5a 	bl	800853c <HAL_GetTick>
 800ae88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae8a:	e008      	b.n	800ae9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae8c:	f7fd fb56 	bl	800853c <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b64      	cmp	r3, #100	; 0x64
 800ae98:	d901      	bls.n	800ae9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e1e7      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae9e:	4b6c      	ldr	r3, [pc, #432]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1f0      	bne.n	800ae8c <HAL_RCC_OscConfig+0xe8>
 800aeaa:	e000      	b.n	800aeae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d063      	beq.n	800af82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aeba:	4b65      	ldr	r3, [pc, #404]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f003 030c 	and.w	r3, r3, #12
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00b      	beq.n	800aede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aec6:	4b62      	ldr	r3, [pc, #392]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aece:	2b08      	cmp	r3, #8
 800aed0:	d11c      	bne.n	800af0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aed2:	4b5f      	ldr	r3, [pc, #380]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d116      	bne.n	800af0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aede:	4b5c      	ldr	r3, [pc, #368]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d005      	beq.n	800aef6 <HAL_RCC_OscConfig+0x152>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d001      	beq.n	800aef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e1bb      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aef6:	4b56      	ldr	r3, [pc, #344]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	00db      	lsls	r3, r3, #3
 800af04:	4952      	ldr	r1, [pc, #328]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800af06:	4313      	orrs	r3, r2
 800af08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af0a:	e03a      	b.n	800af82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d020      	beq.n	800af56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af14:	4b4f      	ldr	r3, [pc, #316]	; (800b054 <HAL_RCC_OscConfig+0x2b0>)
 800af16:	2201      	movs	r2, #1
 800af18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af1a:	f7fd fb0f 	bl	800853c <HAL_GetTick>
 800af1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af20:	e008      	b.n	800af34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af22:	f7fd fb0b 	bl	800853c <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d901      	bls.n	800af34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e19c      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af34:	4b46      	ldr	r3, [pc, #280]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0302 	and.w	r3, r3, #2
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d0f0      	beq.n	800af22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af40:	4b43      	ldr	r3, [pc, #268]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	4940      	ldr	r1, [pc, #256]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800af50:	4313      	orrs	r3, r2
 800af52:	600b      	str	r3, [r1, #0]
 800af54:	e015      	b.n	800af82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af56:	4b3f      	ldr	r3, [pc, #252]	; (800b054 <HAL_RCC_OscConfig+0x2b0>)
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af5c:	f7fd faee 	bl	800853c <HAL_GetTick>
 800af60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af62:	e008      	b.n	800af76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af64:	f7fd faea 	bl	800853c <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d901      	bls.n	800af76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	e17b      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af76:	4b36      	ldr	r3, [pc, #216]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1f0      	bne.n	800af64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 0308 	and.w	r3, r3, #8
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d030      	beq.n	800aff0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d016      	beq.n	800afc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af96:	4b30      	ldr	r3, [pc, #192]	; (800b058 <HAL_RCC_OscConfig+0x2b4>)
 800af98:	2201      	movs	r2, #1
 800af9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af9c:	f7fd face 	bl	800853c <HAL_GetTick>
 800afa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800afa4:	f7fd faca 	bl	800853c <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e15b      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800afb6:	4b26      	ldr	r3, [pc, #152]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800afb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f0      	beq.n	800afa4 <HAL_RCC_OscConfig+0x200>
 800afc2:	e015      	b.n	800aff0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800afc4:	4b24      	ldr	r3, [pc, #144]	; (800b058 <HAL_RCC_OscConfig+0x2b4>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afca:	f7fd fab7 	bl	800853c <HAL_GetTick>
 800afce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afd0:	e008      	b.n	800afe4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800afd2:	f7fd fab3 	bl	800853c <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d901      	bls.n	800afe4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e144      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afe4:	4b1a      	ldr	r3, [pc, #104]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800afe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afe8:	f003 0302 	and.w	r3, r3, #2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1f0      	bne.n	800afd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 80a0 	beq.w	800b13e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800affe:	2300      	movs	r3, #0
 800b000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b002:	4b13      	ldr	r3, [pc, #76]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800b004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10f      	bne.n	800b02e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b00e:	2300      	movs	r3, #0
 800b010:	60bb      	str	r3, [r7, #8]
 800b012:	4b0f      	ldr	r3, [pc, #60]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800b014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b016:	4a0e      	ldr	r2, [pc, #56]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800b018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b01c:	6413      	str	r3, [r2, #64]	; 0x40
 800b01e:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <HAL_RCC_OscConfig+0x2ac>)
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b026:	60bb      	str	r3, [r7, #8]
 800b028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b02a:	2301      	movs	r3, #1
 800b02c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b02e:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <HAL_RCC_OscConfig+0x2b8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b036:	2b00      	cmp	r3, #0
 800b038:	d121      	bne.n	800b07e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b03a:	4b08      	ldr	r3, [pc, #32]	; (800b05c <HAL_RCC_OscConfig+0x2b8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a07      	ldr	r2, [pc, #28]	; (800b05c <HAL_RCC_OscConfig+0x2b8>)
 800b040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b046:	f7fd fa79 	bl	800853c <HAL_GetTick>
 800b04a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b04c:	e011      	b.n	800b072 <HAL_RCC_OscConfig+0x2ce>
 800b04e:	bf00      	nop
 800b050:	40023800 	.word	0x40023800
 800b054:	42470000 	.word	0x42470000
 800b058:	42470e80 	.word	0x42470e80
 800b05c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b060:	f7fd fa6c 	bl	800853c <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d901      	bls.n	800b072 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e0fd      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b072:	4b81      	ldr	r3, [pc, #516]	; (800b278 <HAL_RCC_OscConfig+0x4d4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0f0      	beq.n	800b060 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d106      	bne.n	800b094 <HAL_RCC_OscConfig+0x2f0>
 800b086:	4b7d      	ldr	r3, [pc, #500]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08a:	4a7c      	ldr	r2, [pc, #496]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b08c:	f043 0301 	orr.w	r3, r3, #1
 800b090:	6713      	str	r3, [r2, #112]	; 0x70
 800b092:	e01c      	b.n	800b0ce <HAL_RCC_OscConfig+0x32a>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2b05      	cmp	r3, #5
 800b09a:	d10c      	bne.n	800b0b6 <HAL_RCC_OscConfig+0x312>
 800b09c:	4b77      	ldr	r3, [pc, #476]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a0:	4a76      	ldr	r2, [pc, #472]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0a2:	f043 0304 	orr.w	r3, r3, #4
 800b0a6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0a8:	4b74      	ldr	r3, [pc, #464]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ac:	4a73      	ldr	r2, [pc, #460]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0ae:	f043 0301 	orr.w	r3, r3, #1
 800b0b2:	6713      	str	r3, [r2, #112]	; 0x70
 800b0b4:	e00b      	b.n	800b0ce <HAL_RCC_OscConfig+0x32a>
 800b0b6:	4b71      	ldr	r3, [pc, #452]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ba:	4a70      	ldr	r2, [pc, #448]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0bc:	f023 0301 	bic.w	r3, r3, #1
 800b0c0:	6713      	str	r3, [r2, #112]	; 0x70
 800b0c2:	4b6e      	ldr	r3, [pc, #440]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c6:	4a6d      	ldr	r2, [pc, #436]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0c8:	f023 0304 	bic.w	r3, r3, #4
 800b0cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d015      	beq.n	800b102 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0d6:	f7fd fa31 	bl	800853c <HAL_GetTick>
 800b0da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0dc:	e00a      	b.n	800b0f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0de:	f7fd fa2d 	bl	800853c <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d901      	bls.n	800b0f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e0bc      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0f4:	4b61      	ldr	r3, [pc, #388]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f8:	f003 0302 	and.w	r3, r3, #2
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0ee      	beq.n	800b0de <HAL_RCC_OscConfig+0x33a>
 800b100:	e014      	b.n	800b12c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b102:	f7fd fa1b 	bl	800853c <HAL_GetTick>
 800b106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b108:	e00a      	b.n	800b120 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b10a:	f7fd fa17 	bl	800853c <HAL_GetTick>
 800b10e:	4602      	mov	r2, r0
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	f241 3288 	movw	r2, #5000	; 0x1388
 800b118:	4293      	cmp	r3, r2
 800b11a:	d901      	bls.n	800b120 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e0a6      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b120:	4b56      	ldr	r3, [pc, #344]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1ee      	bne.n	800b10a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d105      	bne.n	800b13e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b132:	4b52      	ldr	r3, [pc, #328]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	4a51      	ldr	r2, [pc, #324]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b13c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 8092 	beq.w	800b26c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b148:	4b4c      	ldr	r3, [pc, #304]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f003 030c 	and.w	r3, r3, #12
 800b150:	2b08      	cmp	r3, #8
 800b152:	d05c      	beq.n	800b20e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d141      	bne.n	800b1e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b15c:	4b48      	ldr	r3, [pc, #288]	; (800b280 <HAL_RCC_OscConfig+0x4dc>)
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b162:	f7fd f9eb 	bl	800853c <HAL_GetTick>
 800b166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b168:	e008      	b.n	800b17c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b16a:	f7fd f9e7 	bl	800853c <HAL_GetTick>
 800b16e:	4602      	mov	r2, r0
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	2b02      	cmp	r3, #2
 800b176:	d901      	bls.n	800b17c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b178:	2303      	movs	r3, #3
 800b17a:	e078      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b17c:	4b3f      	ldr	r3, [pc, #252]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1f0      	bne.n	800b16a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	69da      	ldr	r2, [r3, #28]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	431a      	orrs	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b196:	019b      	lsls	r3, r3, #6
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	041b      	lsls	r3, r3, #16
 800b1a4:	431a      	orrs	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1aa:	061b      	lsls	r3, r3, #24
 800b1ac:	4933      	ldr	r1, [pc, #204]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1b2:	4b33      	ldr	r3, [pc, #204]	; (800b280 <HAL_RCC_OscConfig+0x4dc>)
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1b8:	f7fd f9c0 	bl	800853c <HAL_GetTick>
 800b1bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1be:	e008      	b.n	800b1d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1c0:	f7fd f9bc 	bl	800853c <HAL_GetTick>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d901      	bls.n	800b1d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e04d      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1d2:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0f0      	beq.n	800b1c0 <HAL_RCC_OscConfig+0x41c>
 800b1de:	e045      	b.n	800b26c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1e0:	4b27      	ldr	r3, [pc, #156]	; (800b280 <HAL_RCC_OscConfig+0x4dc>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1e6:	f7fd f9a9 	bl	800853c <HAL_GetTick>
 800b1ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1ec:	e008      	b.n	800b200 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1ee:	f7fd f9a5 	bl	800853c <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d901      	bls.n	800b200 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e036      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b200:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1f0      	bne.n	800b1ee <HAL_RCC_OscConfig+0x44a>
 800b20c:	e02e      	b.n	800b26c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d101      	bne.n	800b21a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e029      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b21a:	4b18      	ldr	r3, [pc, #96]	; (800b27c <HAL_RCC_OscConfig+0x4d8>)
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d11c      	bne.n	800b268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b238:	429a      	cmp	r2, r3
 800b23a:	d115      	bne.n	800b268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b242:	4013      	ands	r3, r2
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b248:	4293      	cmp	r3, r2
 800b24a:	d10d      	bne.n	800b268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b256:	429a      	cmp	r2, r3
 800b258:	d106      	bne.n	800b268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b264:	429a      	cmp	r2, r3
 800b266:	d001      	beq.n	800b26c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e000      	b.n	800b26e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	40007000 	.word	0x40007000
 800b27c:	40023800 	.word	0x40023800
 800b280:	42470060 	.word	0x42470060

0800b284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e0cc      	b.n	800b432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b298:	4b68      	ldr	r3, [pc, #416]	; (800b43c <HAL_RCC_ClockConfig+0x1b8>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 030f 	and.w	r3, r3, #15
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d90c      	bls.n	800b2c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2a6:	4b65      	ldr	r3, [pc, #404]	; (800b43c <HAL_RCC_ClockConfig+0x1b8>)
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	b2d2      	uxtb	r2, r2
 800b2ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ae:	4b63      	ldr	r3, [pc, #396]	; (800b43c <HAL_RCC_ClockConfig+0x1b8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 030f 	and.w	r3, r3, #15
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d001      	beq.n	800b2c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e0b8      	b.n	800b432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d020      	beq.n	800b30e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d005      	beq.n	800b2e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2d8:	4b59      	ldr	r3, [pc, #356]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	4a58      	ldr	r2, [pc, #352]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b2de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b2e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0308 	and.w	r3, r3, #8
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d005      	beq.n	800b2fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2f0:	4b53      	ldr	r3, [pc, #332]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4a52      	ldr	r2, [pc, #328]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b2fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2fc:	4b50      	ldr	r3, [pc, #320]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	494d      	ldr	r1, [pc, #308]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b30a:	4313      	orrs	r3, r2
 800b30c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d044      	beq.n	800b3a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d107      	bne.n	800b332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b322:	4b47      	ldr	r3, [pc, #284]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d119      	bne.n	800b362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e07f      	b.n	800b432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d003      	beq.n	800b342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d107      	bne.n	800b352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b342:	4b3f      	ldr	r3, [pc, #252]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d109      	bne.n	800b362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e06f      	b.n	800b432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b352:	4b3b      	ldr	r3, [pc, #236]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e067      	b.n	800b432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b362:	4b37      	ldr	r3, [pc, #220]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f023 0203 	bic.w	r2, r3, #3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	4934      	ldr	r1, [pc, #208]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b370:	4313      	orrs	r3, r2
 800b372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b374:	f7fd f8e2 	bl	800853c <HAL_GetTick>
 800b378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b37a:	e00a      	b.n	800b392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b37c:	f7fd f8de 	bl	800853c <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d901      	bls.n	800b392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e04f      	b.n	800b432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b392:	4b2b      	ldr	r3, [pc, #172]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 020c 	and.w	r2, r3, #12
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d1eb      	bne.n	800b37c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b3a4:	4b25      	ldr	r3, [pc, #148]	; (800b43c <HAL_RCC_ClockConfig+0x1b8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 030f 	and.w	r3, r3, #15
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d20c      	bcs.n	800b3cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3b2:	4b22      	ldr	r3, [pc, #136]	; (800b43c <HAL_RCC_ClockConfig+0x1b8>)
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	b2d2      	uxtb	r2, r2
 800b3b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3ba:	4b20      	ldr	r3, [pc, #128]	; (800b43c <HAL_RCC_ClockConfig+0x1b8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 030f 	and.w	r3, r3, #15
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d001      	beq.n	800b3cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e032      	b.n	800b432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d008      	beq.n	800b3ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3d8:	4b19      	ldr	r3, [pc, #100]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	4916      	ldr	r1, [pc, #88]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 0308 	and.w	r3, r3, #8
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d009      	beq.n	800b40a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3f6:	4b12      	ldr	r3, [pc, #72]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	490e      	ldr	r1, [pc, #56]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b406:	4313      	orrs	r3, r2
 800b408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b40a:	f000 f821 	bl	800b450 <HAL_RCC_GetSysClockFreq>
 800b40e:	4601      	mov	r1, r0
 800b410:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <HAL_RCC_ClockConfig+0x1bc>)
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	091b      	lsrs	r3, r3, #4
 800b416:	f003 030f 	and.w	r3, r3, #15
 800b41a:	4a0a      	ldr	r2, [pc, #40]	; (800b444 <HAL_RCC_ClockConfig+0x1c0>)
 800b41c:	5cd3      	ldrb	r3, [r2, r3]
 800b41e:	fa21 f303 	lsr.w	r3, r1, r3
 800b422:	4a09      	ldr	r2, [pc, #36]	; (800b448 <HAL_RCC_ClockConfig+0x1c4>)
 800b424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b426:	4b09      	ldr	r3, [pc, #36]	; (800b44c <HAL_RCC_ClockConfig+0x1c8>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fd f842 	bl	80084b4 <HAL_InitTick>

  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	40023c00 	.word	0x40023c00
 800b440:	40023800 	.word	0x40023800
 800b444:	08018048 	.word	0x08018048
 800b448:	20000194 	.word	0x20000194
 800b44c:	2000019c 	.word	0x2000019c

0800b450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	607b      	str	r3, [r7, #4]
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	2300      	movs	r3, #0
 800b460:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b462:	2300      	movs	r3, #0
 800b464:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b466:	4b50      	ldr	r3, [pc, #320]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f003 030c 	and.w	r3, r3, #12
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d007      	beq.n	800b482 <HAL_RCC_GetSysClockFreq+0x32>
 800b472:	2b08      	cmp	r3, #8
 800b474:	d008      	beq.n	800b488 <HAL_RCC_GetSysClockFreq+0x38>
 800b476:	2b00      	cmp	r3, #0
 800b478:	f040 808d 	bne.w	800b596 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b47c:	4b4b      	ldr	r3, [pc, #300]	; (800b5ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800b47e:	60bb      	str	r3, [r7, #8]
       break;
 800b480:	e08c      	b.n	800b59c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b482:	4b4b      	ldr	r3, [pc, #300]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b484:	60bb      	str	r3, [r7, #8]
      break;
 800b486:	e089      	b.n	800b59c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b488:	4b47      	ldr	r3, [pc, #284]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b490:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b492:	4b45      	ldr	r3, [pc, #276]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d023      	beq.n	800b4e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b49e:	4b42      	ldr	r3, [pc, #264]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	099b      	lsrs	r3, r3, #6
 800b4a4:	f04f 0400 	mov.w	r4, #0
 800b4a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b4ac:	f04f 0200 	mov.w	r2, #0
 800b4b0:	ea03 0501 	and.w	r5, r3, r1
 800b4b4:	ea04 0602 	and.w	r6, r4, r2
 800b4b8:	4a3d      	ldr	r2, [pc, #244]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b4ba:	fb02 f106 	mul.w	r1, r2, r6
 800b4be:	2200      	movs	r2, #0
 800b4c0:	fb02 f205 	mul.w	r2, r2, r5
 800b4c4:	440a      	add	r2, r1
 800b4c6:	493a      	ldr	r1, [pc, #232]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b4c8:	fba5 0101 	umull	r0, r1, r5, r1
 800b4cc:	1853      	adds	r3, r2, r1
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f04f 0400 	mov.w	r4, #0
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	4623      	mov	r3, r4
 800b4da:	f7f5 fbd5 	bl	8000c88 <__aeabi_uldivmod>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	e049      	b.n	800b57a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4e6:	4b30      	ldr	r3, [pc, #192]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	099b      	lsrs	r3, r3, #6
 800b4ec:	f04f 0400 	mov.w	r4, #0
 800b4f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b4f4:	f04f 0200 	mov.w	r2, #0
 800b4f8:	ea03 0501 	and.w	r5, r3, r1
 800b4fc:	ea04 0602 	and.w	r6, r4, r2
 800b500:	4629      	mov	r1, r5
 800b502:	4632      	mov	r2, r6
 800b504:	f04f 0300 	mov.w	r3, #0
 800b508:	f04f 0400 	mov.w	r4, #0
 800b50c:	0154      	lsls	r4, r2, #5
 800b50e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b512:	014b      	lsls	r3, r1, #5
 800b514:	4619      	mov	r1, r3
 800b516:	4622      	mov	r2, r4
 800b518:	1b49      	subs	r1, r1, r5
 800b51a:	eb62 0206 	sbc.w	r2, r2, r6
 800b51e:	f04f 0300 	mov.w	r3, #0
 800b522:	f04f 0400 	mov.w	r4, #0
 800b526:	0194      	lsls	r4, r2, #6
 800b528:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b52c:	018b      	lsls	r3, r1, #6
 800b52e:	1a5b      	subs	r3, r3, r1
 800b530:	eb64 0402 	sbc.w	r4, r4, r2
 800b534:	f04f 0100 	mov.w	r1, #0
 800b538:	f04f 0200 	mov.w	r2, #0
 800b53c:	00e2      	lsls	r2, r4, #3
 800b53e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b542:	00d9      	lsls	r1, r3, #3
 800b544:	460b      	mov	r3, r1
 800b546:	4614      	mov	r4, r2
 800b548:	195b      	adds	r3, r3, r5
 800b54a:	eb44 0406 	adc.w	r4, r4, r6
 800b54e:	f04f 0100 	mov.w	r1, #0
 800b552:	f04f 0200 	mov.w	r2, #0
 800b556:	02a2      	lsls	r2, r4, #10
 800b558:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b55c:	0299      	lsls	r1, r3, #10
 800b55e:	460b      	mov	r3, r1
 800b560:	4614      	mov	r4, r2
 800b562:	4618      	mov	r0, r3
 800b564:	4621      	mov	r1, r4
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f04f 0400 	mov.w	r4, #0
 800b56c:	461a      	mov	r2, r3
 800b56e:	4623      	mov	r3, r4
 800b570:	f7f5 fb8a 	bl	8000c88 <__aeabi_uldivmod>
 800b574:	4603      	mov	r3, r0
 800b576:	460c      	mov	r4, r1
 800b578:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b57a:	4b0b      	ldr	r3, [pc, #44]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	3301      	adds	r3, #1
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b592:	60bb      	str	r3, [r7, #8]
      break;
 800b594:	e002      	b.n	800b59c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b596:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800b598:	60bb      	str	r3, [r7, #8]
      break;
 800b59a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b59c:	68bb      	ldr	r3, [r7, #8]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	40023800 	.word	0x40023800
 800b5ac:	00f42400 	.word	0x00f42400
 800b5b0:	017d7840 	.word	0x017d7840

0800b5b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5b8:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	20000194 	.word	0x20000194

0800b5cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b5d0:	f7ff fff0 	bl	800b5b4 <HAL_RCC_GetHCLKFreq>
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	0a9b      	lsrs	r3, r3, #10
 800b5dc:	f003 0307 	and.w	r3, r3, #7
 800b5e0:	4a03      	ldr	r2, [pc, #12]	; (800b5f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5e2:	5cd3      	ldrb	r3, [r2, r3]
 800b5e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	40023800 	.word	0x40023800
 800b5f0:	08018058 	.word	0x08018058

0800b5f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e022      	b.n	800b64c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7f8 fd1b 	bl	8004054 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2203      	movs	r2, #3
 800b622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f814 	bl	800b654 <HAL_SD_InitCard>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e00a      	b.n	800b64c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b654:	b5b0      	push	{r4, r5, r7, lr}
 800b656:	b08e      	sub	sp, #56	; 0x38
 800b658:	af04      	add	r7, sp, #16
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b664:	2300      	movs	r3, #0
 800b666:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b668:	2300      	movs	r3, #0
 800b66a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b670:	2376      	movs	r3, #118	; 0x76
 800b672:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681d      	ldr	r5, [r3, #0]
 800b678:	466c      	mov	r4, sp
 800b67a:	f107 0314 	add.w	r3, r7, #20
 800b67e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b686:	f107 0308 	add.w	r3, r7, #8
 800b68a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b68c:	4628      	mov	r0, r5
 800b68e:	f002 f803 	bl	800d698 <SDIO_Init>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e031      	b.n	800b708 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <HAL_SD_InitCard+0xbc>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f002 f83b 	bl	800d72a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b6b4:	4b16      	ldr	r3, [pc, #88]	; (800b710 <HAL_SD_InitCard+0xbc>)
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 ffdc 	bl	800c678 <SD_PowerON>
 800b6c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00b      	beq.n	800b6e0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	431a      	orrs	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e013      	b.n	800b708 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fefb 	bl	800c4dc <SD_InitCard>
 800b6e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00b      	beq.n	800b706 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3728      	adds	r7, #40	; 0x28
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bdb0      	pop	{r4, r5, r7, pc}
 800b710:	422580a0 	.word	0x422580a0

0800b714 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08c      	sub	sp, #48	; 0x30
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d107      	bne.n	800b73c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b730:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	e0c9      	b.n	800b8d0 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b01      	cmp	r3, #1
 800b746:	f040 80c2 	bne.w	800b8ce <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	441a      	add	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d907      	bls.n	800b76e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b762:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e0b0      	b.n	800b8d0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2203      	movs	r2, #3
 800b772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2200      	movs	r2, #0
 800b77c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	6812      	ldr	r2, [r2, #0]
 800b788:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800b78c:	f043 0302 	orr.w	r3, r3, #2
 800b790:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b796:	4a50      	ldr	r2, [pc, #320]	; (800b8d8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800b798:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	4a4f      	ldr	r2, [pc, #316]	; (800b8dc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b7a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3380      	adds	r3, #128	; 0x80
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	025b      	lsls	r3, r3, #9
 800b7bc:	089b      	lsrs	r3, r3, #2
 800b7be:	f7fd fce9 	bl	8009194 <HAL_DMA_Start_IT>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d017      	beq.n	800b7f8 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b7d6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a40      	ldr	r2, [pc, #256]	; (800b8e0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b7de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e06b      	b.n	800b8d0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b7f8:	4b3a      	ldr	r3, [pc, #232]	; (800b8e4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b802:	2b01      	cmp	r3, #1
 800b804:	d002      	beq.n	800b80c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	025b      	lsls	r3, r3, #9
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b814:	4618      	mov	r0, r3
 800b816:	f002 f81b 	bl	800d850 <SDMMC_CmdBlockLength>
 800b81a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00f      	beq.n	800b842 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a2e      	ldr	r2, [pc, #184]	; (800b8e0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b828:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	431a      	orrs	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e046      	b.n	800b8d0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b846:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	025b      	lsls	r3, r3, #9
 800b84c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b84e:	2390      	movs	r3, #144	; 0x90
 800b850:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b852:	2302      	movs	r3, #2
 800b854:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b856:	2300      	movs	r3, #0
 800b858:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b85a:	2301      	movs	r3, #1
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f107 0210 	add.w	r2, r7, #16
 800b866:	4611      	mov	r1, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f001 ffc5 	bl	800d7f8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d90a      	bls.n	800b88a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2282      	movs	r2, #130	; 0x82
 800b878:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b880:	4618      	mov	r0, r3
 800b882:	f002 f829 	bl	800d8d8 <SDMMC_CmdReadMultiBlock>
 800b886:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b888:	e009      	b.n	800b89e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2281      	movs	r2, #129	; 0x81
 800b88e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b896:	4618      	mov	r0, r3
 800b898:	f001 fffc 	bl	800d894 <SDMMC_CmdReadSingleBlock>
 800b89c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d012      	beq.n	800b8ca <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a0d      	ldr	r2, [pc, #52]	; (800b8e0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b8aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e002      	b.n	800b8d0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	e000      	b.n	800b8d0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800b8ce:	2302      	movs	r3, #2
  }
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3730      	adds	r7, #48	; 0x30
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	0800c2eb 	.word	0x0800c2eb
 800b8dc:	0800c35d 	.word	0x0800c35d
 800b8e0:	004005ff 	.word	0x004005ff
 800b8e4:	4225858c 	.word	0x4225858c

0800b8e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08c      	sub	sp, #48	; 0x30
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d107      	bne.n	800b910 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b904:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e0ce      	b.n	800baae <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b916:	b2db      	uxtb	r3, r3
 800b918:	2b01      	cmp	r3, #1
 800b91a:	f040 80c7 	bne.w	800baac <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	441a      	add	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b92e:	429a      	cmp	r2, r3
 800b930:	d907      	bls.n	800b942 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b936:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e0b5      	b.n	800baae <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2203      	movs	r2, #3
 800b946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2200      	movs	r2, #0
 800b950:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	6812      	ldr	r2, [r2, #0]
 800b95c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800b960:	f043 0302 	orr.w	r3, r3, #2
 800b964:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96a:	4a53      	ldr	r2, [pc, #332]	; (800bab8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b96c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b972:	4a52      	ldr	r2, [pc, #328]	; (800babc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b974:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97a:	2200      	movs	r2, #0
 800b97c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b982:	2b01      	cmp	r3, #1
 800b984:	d002      	beq.n	800b98c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	025b      	lsls	r3, r3, #9
 800b98a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b994:	4618      	mov	r0, r3
 800b996:	f001 ff5b 	bl	800d850 <SDMMC_CmdBlockLength>
 800b99a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00f      	beq.n	800b9c2 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a46      	ldr	r2, [pc, #280]	; (800bac0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b9a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	431a      	orrs	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e075      	b.n	800baae <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d90a      	bls.n	800b9de <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	22a0      	movs	r2, #160	; 0xa0
 800b9cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f001 ffc3 	bl	800d960 <SDMMC_CmdWriteMultiBlock>
 800b9da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b9dc:	e009      	b.n	800b9f2 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2290      	movs	r2, #144	; 0x90
 800b9e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f001 ff96 	bl	800d91c <SDMMC_CmdWriteSingleBlock>
 800b9f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d012      	beq.n	800ba1e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a30      	ldr	r2, [pc, #192]	; (800bac0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b9fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba06:	431a      	orrs	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e047      	b.n	800baae <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ba1e:	4b29      	ldr	r3, [pc, #164]	; (800bac4 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ba28:	68b9      	ldr	r1, [r7, #8]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3380      	adds	r3, #128	; 0x80
 800ba30:	461a      	mov	r2, r3
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	025b      	lsls	r3, r3, #9
 800ba36:	089b      	lsrs	r3, r3, #2
 800ba38:	f7fd fbac 	bl	8009194 <HAL_DMA_Start_IT>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d01c      	beq.n	800ba7c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	6812      	ldr	r2, [r2, #0]
 800ba4c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800ba50:	f023 0302 	bic.w	r3, r3, #2
 800ba54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a19      	ldr	r2, [pc, #100]	; (800bac0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800ba5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e018      	b.n	800baae <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba80:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	025b      	lsls	r3, r3, #9
 800ba86:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ba88:	2390      	movs	r3, #144	; 0x90
 800ba8a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ba94:	2301      	movs	r3, #1
 800ba96:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f107 0210 	add.w	r2, r7, #16
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 fea8 	bl	800d7f8 <SDIO_ConfigData>

      return HAL_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	e000      	b.n	800baae <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800baac:	2302      	movs	r3, #2
  }
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3730      	adds	r7, #48	; 0x30
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	0800c2c1 	.word	0x0800c2c1
 800babc:	0800c35d 	.word	0x0800c35d
 800bac0:	004005ff 	.word	0x004005ff
 800bac4:	4225858c 	.word	0x4225858c

0800bac8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800badc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d008      	beq.n	800baf6 <HAL_SD_IRQHandler+0x2e>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f003 0308 	and.w	r3, r3, #8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 ffd8 	bl	800caa4 <SD_Read_IT>
 800baf4:	e165      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 808f 	beq.w	800bc24 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb0e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	6812      	ldr	r2, [r2, #0]
 800bb1a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800bb1e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800bb22:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f022 0201 	bic.w	r2, r2, #1
 800bb32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f003 0308 	and.w	r3, r3, #8
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d039      	beq.n	800bbb2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f003 0302 	and.w	r3, r3, #2
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d104      	bne.n	800bb52 <HAL_SD_IRQHandler+0x8a>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f003 0320 	and.w	r3, r3, #32
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d011      	beq.n	800bb76 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 ff24 	bl	800d9a4 <SDMMC_CmdStopTransfer>
 800bb5c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d008      	beq.n	800bb76 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f92f 	bl	800bdd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f240 523a 	movw	r2, #1338	; 0x53a
 800bb7e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d104      	bne.n	800bba2 <HAL_SD_IRQHandler+0xda>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f003 0302 	and.w	r3, r3, #2
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f002 fb82 	bl	800e2ac <HAL_SD_RxCpltCallback>
 800bba8:	e10b      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f002 fb74 	bl	800e298 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bbb0:	e107      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 8102 	beq.w	800bdc2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f003 0320 	and.w	r3, r3, #32
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d011      	beq.n	800bbec <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f001 fee9 	bl	800d9a4 <SDMMC_CmdStopTransfer>
 800bbd2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d008      	beq.n	800bbec <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f8f4 	bl	800bdd4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f040 80e5 	bne.w	800bdc2 <HAL_SD_IRQHandler+0x2fa>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f040 80df 	bne.w	800bdc2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0208 	bic.w	r2, r2, #8
 800bc12:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f002 fb3b 	bl	800e298 <HAL_SD_TxCpltCallback>
}
 800bc22:	e0ce      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d008      	beq.n	800bc44 <HAL_SD_IRQHandler+0x17c>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f003 0308 	and.w	r3, r3, #8
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 ff82 	bl	800cb46 <SD_Write_IT>
 800bc42:	e0be      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc4a:	f240 233a 	movw	r3, #570	; 0x23a
 800bc4e:	4013      	ands	r3, r2
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 80b6 	beq.w	800bdc2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc5c:	f003 0302 	and.w	r3, r3, #2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d005      	beq.n	800bc70 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc68:	f043 0202 	orr.w	r2, r3, #2
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc76:	f003 0308 	and.w	r3, r3, #8
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d005      	beq.n	800bc8a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc82:	f043 0208 	orr.w	r2, r3, #8
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc90:	f003 0320 	and.w	r3, r3, #32
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d005      	beq.n	800bca4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9c:	f043 0220 	orr.w	r2, r3, #32
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcaa:	f003 0310 	and.w	r3, r3, #16
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d005      	beq.n	800bcbe <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb6:	f043 0210 	orr.w	r2, r3, #16
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd0:	f043 0208 	orr.w	r2, r3, #8
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f240 723a 	movw	r2, #1850	; 0x73a
 800bce0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	6812      	ldr	r2, [r2, #0]
 800bcec:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800bcf0:	f023 0302 	bic.w	r3, r3, #2
 800bcf4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 fe52 	bl	800d9a4 <SDMMC_CmdStopTransfer>
 800bd00:	4602      	mov	r2, r0
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd06:	431a      	orrs	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f003 0308 	and.w	r3, r3, #8
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00a      	beq.n	800bd2c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f855 	bl	800bdd4 <HAL_SD_ErrorCallback>
}
 800bd2a:	e04a      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d045      	beq.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f003 0310 	and.w	r3, r3, #16
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d104      	bne.n	800bd4a <HAL_SD_IRQHandler+0x282>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d011      	beq.n	800bd6e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4e:	4a1f      	ldr	r2, [pc, #124]	; (800bdcc <HAL_SD_IRQHandler+0x304>)
 800bd50:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fd fae4 	bl	8009324 <HAL_DMA_Abort_IT>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d02f      	beq.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 fb4a 	bl	800c400 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bd6c:	e029      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d104      	bne.n	800bd82 <HAL_SD_IRQHandler+0x2ba>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f003 0302 	and.w	r3, r3, #2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d011      	beq.n	800bda6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	4a12      	ldr	r2, [pc, #72]	; (800bdd0 <HAL_SD_IRQHandler+0x308>)
 800bd88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd fac8 	bl	8009324 <HAL_DMA_Abort_IT>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d013      	beq.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 fb65 	bl	800c46e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bda4:	e00d      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f002 fa62 	bl	800e284 <HAL_SD_AbortCallback>
}
 800bdc0:	e7ff      	b.n	800bdc2 <HAL_SD_IRQHandler+0x2fa>
 800bdc2:	bf00      	nop
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	0800c401 	.word	0x0800c401
 800bdd0:	0800c46f 	.word	0x0800c46f

0800bdd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdf6:	0f9b      	lsrs	r3, r3, #30
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be02:	0e9b      	lsrs	r3, r3, #26
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 030f 	and.w	r3, r3, #15
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be14:	0e1b      	lsrs	r3, r3, #24
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f003 0303 	and.w	r3, r3, #3
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be26:	0c1b      	lsrs	r3, r3, #16
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be32:	0a1b      	lsrs	r3, r3, #8
 800be34:	b2da      	uxtb	r2, r3
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be48:	0d1b      	lsrs	r3, r3, #20
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be54:	0c1b      	lsrs	r3, r3, #16
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 030f 	and.w	r3, r3, #15
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be66:	0bdb      	lsrs	r3, r3, #15
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be78:	0b9b      	lsrs	r3, r3, #14
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	b2da      	uxtb	r2, r3
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be8a:	0b5b      	lsrs	r3, r3, #13
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	b2da      	uxtb	r2, r3
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be9c:	0b1b      	lsrs	r3, r3, #12
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2200      	movs	r2, #0
 800beae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d163      	bne.n	800bf80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bebc:	009a      	lsls	r2, r3, #2
 800bebe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bec2:	4013      	ands	r3, r2
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bec8:	0f92      	lsrs	r2, r2, #30
 800beca:	431a      	orrs	r2, r3
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bed4:	0edb      	lsrs	r3, r3, #27
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	f003 0307 	and.w	r3, r3, #7
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee6:	0e1b      	lsrs	r3, r3, #24
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	f003 0307 	and.w	r3, r3, #7
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef8:	0d5b      	lsrs	r3, r3, #21
 800befa:	b2db      	uxtb	r3, r3
 800befc:	f003 0307 	and.w	r3, r3, #7
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf0a:	0c9b      	lsrs	r3, r3, #18
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	f003 0307 	and.w	r3, r3, #7
 800bf12:	b2da      	uxtb	r2, r3
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf1c:	0bdb      	lsrs	r3, r3, #15
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	f003 0307 	and.w	r3, r3, #7
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	7e1b      	ldrb	r3, [r3, #24]
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	f003 0307 	and.w	r3, r3, #7
 800bf3e:	3302      	adds	r3, #2
 800bf40:	2201      	movs	r2, #1
 800bf42:	fa02 f303 	lsl.w	r3, r2, r3
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bf4a:	fb02 f203 	mul.w	r2, r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	7a1b      	ldrb	r3, [r3, #8]
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	409a      	lsls	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bf6c:	0a52      	lsrs	r2, r2, #9
 800bf6e:	fb02 f203 	mul.w	r2, r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf7c:	661a      	str	r2, [r3, #96]	; 0x60
 800bf7e:	e031      	b.n	800bfe4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d11d      	bne.n	800bfc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf8c:	041b      	lsls	r3, r3, #16
 800bf8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf96:	0c1b      	lsrs	r3, r3, #16
 800bf98:	431a      	orrs	r2, r3
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	029a      	lsls	r2, r3, #10
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	661a      	str	r2, [r3, #96]	; 0x60
 800bfc2:	e00f      	b.n	800bfe4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a58      	ldr	r2, [pc, #352]	; (800c12c <HAL_SD_GetCardCSD+0x344>)
 800bfca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e09d      	b.n	800c120 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfe8:	0b9b      	lsrs	r3, r3, #14
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bffa:	09db      	lsrs	r3, r3, #7
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c002:	b2da      	uxtb	r2, r3
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c012:	b2da      	uxtb	r2, r3
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c01c:	0fdb      	lsrs	r3, r3, #31
 800c01e:	b2da      	uxtb	r2, r3
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c028:	0f5b      	lsrs	r3, r3, #29
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	f003 0303 	and.w	r3, r3, #3
 800c030:	b2da      	uxtb	r2, r3
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03a:	0e9b      	lsrs	r3, r3, #26
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	b2da      	uxtb	r2, r3
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04c:	0d9b      	lsrs	r3, r3, #22
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	f003 030f 	and.w	r3, r3, #15
 800c054:	b2da      	uxtb	r2, r3
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c05e:	0d5b      	lsrs	r3, r3, #21
 800c060:	b2db      	uxtb	r3, r3
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	b2da      	uxtb	r2, r3
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c07a:	0c1b      	lsrs	r3, r3, #16
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	f003 0301 	and.w	r3, r3, #1
 800c082:	b2da      	uxtb	r2, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c08e:	0bdb      	lsrs	r3, r3, #15
 800c090:	b2db      	uxtb	r3, r3
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	b2da      	uxtb	r2, r3
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a2:	0b9b      	lsrs	r3, r3, #14
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b6:	0b5b      	lsrs	r3, r3, #13
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ca:	0b1b      	lsrs	r3, r3, #12
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0de:	0a9b      	lsrs	r3, r3, #10
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0f2:	0a1b      	lsrs	r3, r3, #8
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	f003 0303 	and.w	r3, r3, #3
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c106:	085b      	lsrs	r3, r3, #1
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	004005ff 	.word	0x004005ff

0800c130 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c188:	b5b0      	push	{r4, r5, r7, lr}
 800c18a:	b08e      	sub	sp, #56	; 0x38
 800c18c:	af04      	add	r7, sp, #16
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2203      	movs	r2, #3
 800c196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d02e      	beq.n	800c200 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a8:	d106      	bne.n	800c1b8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	639a      	str	r2, [r3, #56]	; 0x38
 800c1b6:	e029      	b.n	800c20c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1be:	d10a      	bne.n	800c1d6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fb0f 	bl	800c7e4 <SD_WideBus_Enable>
 800c1c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	639a      	str	r2, [r3, #56]	; 0x38
 800c1d4:	e01a      	b.n	800c20c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fb4c 	bl	800c87a <SD_WideBus_Disable>
 800c1e2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	431a      	orrs	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	639a      	str	r2, [r3, #56]	; 0x38
 800c1f0:	e00c      	b.n	800c20c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	639a      	str	r2, [r3, #56]	; 0x38
 800c1fe:	e005      	b.n	800c20c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c210:	2b00      	cmp	r3, #0
 800c212:	d009      	beq.n	800c228 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a18      	ldr	r2, [pc, #96]	; (800c27c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800c21a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	e024      	b.n	800c272 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681d      	ldr	r5, [r3, #0]
 800c24e:	466c      	mov	r4, sp
 800c250:	f107 0318 	add.w	r3, r7, #24
 800c254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c25c:	f107 030c 	add.w	r3, r7, #12
 800c260:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c262:	4628      	mov	r0, r5
 800c264:	f001 fa18 	bl	800d698 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3728      	adds	r7, #40	; 0x28
 800c276:	46bd      	mov	sp, r7
 800c278:	bdb0      	pop	{r4, r5, r7, pc}
 800c27a:	bf00      	nop
 800c27c:	004005ff 	.word	0x004005ff

0800c280 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b086      	sub	sp, #24
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c288:	2300      	movs	r3, #0
 800c28a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c28c:	f107 030c 	add.w	r3, r7, #12
 800c290:	4619      	mov	r1, r3
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fa7e 	bl	800c794 <SD_SendStatus>
 800c298:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	431a      	orrs	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	0a5b      	lsrs	r3, r3, #9
 800c2b0:	f003 030f 	and.w	r3, r3, #15
 800c2b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c2b6:	693b      	ldr	r3, [r7, #16]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c2de:	bf00      	nop
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fc:	2b82      	cmp	r3, #130	; 0x82
 800c2fe:	d111      	bne.n	800c324 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4618      	mov	r0, r3
 800c306:	f001 fb4d 	bl	800d9a4 <SDMMC_CmdStopTransfer>
 800c30a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d008      	beq.n	800c324 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	431a      	orrs	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f7ff fd58 	bl	800bdd4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f022 0208 	bic.w	r2, r2, #8
 800c332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f240 523a 	movw	r2, #1338	; 0x53a
 800c33c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2200      	movs	r2, #0
 800c34a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f001 ffad 	bl	800e2ac <HAL_SD_RxCpltCallback>
#endif
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7fd f986 	bl	800967c <HAL_DMA_GetError>
 800c370:	4603      	mov	r3, r0
 800c372:	2b02      	cmp	r3, #2
 800c374:	d03e      	beq.n	800c3f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c37c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c384:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d002      	beq.n	800c392 <SD_DMAError+0x36>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d12d      	bne.n	800c3ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a19      	ldr	r2, [pc, #100]	; (800c3fc <SD_DMAError+0xa0>)
 800c398:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c3a8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c3b6:	6978      	ldr	r0, [r7, #20]
 800c3b8:	f7ff ff62 	bl	800c280 <HAL_SD_GetCardState>
 800c3bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b06      	cmp	r3, #6
 800c3c2:	d002      	beq.n	800c3ca <SD_DMAError+0x6e>
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2b05      	cmp	r3, #5
 800c3c8:	d10a      	bne.n	800c3e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f001 fae8 	bl	800d9a4 <SDMMC_CmdStopTransfer>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c3ee:	6978      	ldr	r0, [r7, #20]
 800c3f0:	f7ff fcf0 	bl	800bdd4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c3f4:	bf00      	nop
 800c3f6:	3718      	adds	r7, #24
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	004005ff 	.word	0x004005ff

0800c400 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f240 523a 	movw	r2, #1338	; 0x53a
 800c416:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f7ff ff31 	bl	800c280 <HAL_SD_GetCardState>
 800c41e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b06      	cmp	r3, #6
 800c432:	d002      	beq.n	800c43a <SD_DMATxAbort+0x3a>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b05      	cmp	r3, #5
 800c438:	d10a      	bne.n	800c450 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fab0 	bl	800d9a4 <SDMMC_CmdStopTransfer>
 800c444:	4602      	mov	r2, r0
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44a:	431a      	orrs	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f001 ff13 	bl	800e284 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c45e:	e002      	b.n	800c466 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f7ff fcb7 	bl	800bdd4 <HAL_SD_ErrorCallback>
}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f240 523a 	movw	r2, #1338	; 0x53a
 800c484:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f7ff fefa 	bl	800c280 <HAL_SD_GetCardState>
 800c48c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2b06      	cmp	r3, #6
 800c4a0:	d002      	beq.n	800c4a8 <SD_DMARxAbort+0x3a>
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b05      	cmp	r3, #5
 800c4a6:	d10a      	bne.n	800c4be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f001 fa79 	bl	800d9a4 <SDMMC_CmdStopTransfer>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d103      	bne.n	800c4ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f001 fedc 	bl	800e284 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c4cc:	e002      	b.n	800c4d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7ff fc80 	bl	800bdd4 <HAL_SD_ErrorCallback>
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c4dc:	b5b0      	push	{r4, r5, r7, lr}
 800c4de:	b094      	sub	sp, #80	; 0x50
 800c4e0:	af04      	add	r7, sp, #16
 800c4e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f001 f92b 	bl	800d748 <SDIO_GetPowerState>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d102      	bne.n	800c4fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c4f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c4fc:	e0b7      	b.n	800c66e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c502:	2b03      	cmp	r3, #3
 800c504:	d02f      	beq.n	800c566 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f001 fb54 	bl	800dbb8 <SDMMC_CmdSendCID>
 800c510:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <SD_InitCard+0x40>
    {
      return errorstate;
 800c518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51a:	e0a8      	b.n	800c66e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2100      	movs	r1, #0
 800c522:	4618      	mov	r0, r3
 800c524:	f001 f955 	bl	800d7d2 <SDIO_GetResponse>
 800c528:	4602      	mov	r2, r0
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2104      	movs	r1, #4
 800c534:	4618      	mov	r0, r3
 800c536:	f001 f94c 	bl	800d7d2 <SDIO_GetResponse>
 800c53a:	4602      	mov	r2, r0
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2108      	movs	r1, #8
 800c546:	4618      	mov	r0, r3
 800c548:	f001 f943 	bl	800d7d2 <SDIO_GetResponse>
 800c54c:	4602      	mov	r2, r0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	210c      	movs	r1, #12
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 f93a 	bl	800d7d2 <SDIO_GetResponse>
 800c55e:	4602      	mov	r2, r0
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56a:	2b03      	cmp	r3, #3
 800c56c:	d00d      	beq.n	800c58a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f107 020e 	add.w	r2, r7, #14
 800c576:	4611      	mov	r1, r2
 800c578:	4618      	mov	r0, r3
 800c57a:	f001 fb5a 	bl	800dc32 <SDMMC_CmdSetRelAdd>
 800c57e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <SD_InitCard+0xae>
    {
      return errorstate;
 800c586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c588:	e071      	b.n	800c66e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c58e:	2b03      	cmp	r3, #3
 800c590:	d036      	beq.n	800c600 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c592:	89fb      	ldrh	r3, [r7, #14]
 800c594:	461a      	mov	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a2:	041b      	lsls	r3, r3, #16
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	f001 fb24 	bl	800dbf4 <SDMMC_CmdSendCSD>
 800c5ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b6:	e05a      	b.n	800c66e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2100      	movs	r1, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f001 f907 	bl	800d7d2 <SDIO_GetResponse>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2104      	movs	r1, #4
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f001 f8fe 	bl	800d7d2 <SDIO_GetResponse>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2108      	movs	r1, #8
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f001 f8f5 	bl	800d7d2 <SDIO_GetResponse>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	210c      	movs	r1, #12
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f001 f8ec 	bl	800d7d2 <SDIO_GetResponse>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2104      	movs	r1, #4
 800c606:	4618      	mov	r0, r3
 800c608:	f001 f8e3 	bl	800d7d2 <SDIO_GetResponse>
 800c60c:	4603      	mov	r3, r0
 800c60e:	0d1a      	lsrs	r2, r3, #20
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c614:	f107 0310 	add.w	r3, r7, #16
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff fbe4 	bl	800bde8 <HAL_SD_GetCardCSD>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c62a:	e020      	b.n	800c66e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6819      	ldr	r1, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c634:	041b      	lsls	r3, r3, #16
 800c636:	f04f 0400 	mov.w	r4, #0
 800c63a:	461a      	mov	r2, r3
 800c63c:	4623      	mov	r3, r4
 800c63e:	4608      	mov	r0, r1
 800c640:	f001 f9d2 	bl	800d9e8 <SDMMC_CmdSelDesel>
 800c644:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <SD_InitCard+0x174>
  {
    return errorstate;
 800c64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64e:	e00e      	b.n	800c66e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681d      	ldr	r5, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	466c      	mov	r4, sp
 800c658:	f103 0210 	add.w	r2, r3, #16
 800c65c:	ca07      	ldmia	r2, {r0, r1, r2}
 800c65e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c662:	3304      	adds	r3, #4
 800c664:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c666:	4628      	mov	r0, r5
 800c668:	f001 f816 	bl	800d698 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3740      	adds	r7, #64	; 0x40
 800c672:	46bd      	mov	sp, r7
 800c674:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c678 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c680:	2300      	movs	r3, #0
 800c682:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	2300      	movs	r3, #0
 800c68a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4618      	mov	r0, r3
 800c692:	f001 f9cc 	bl	800da2e <SDMMC_CmdGoIdleState>
 800c696:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	e072      	b.n	800c788 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f001 f9df 	bl	800da6a <SDMMC_CmdOperCond>
 800c6ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00d      	beq.n	800c6d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f001 f9b5 	bl	800da2e <SDMMC_CmdGoIdleState>
 800c6c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d004      	beq.n	800c6d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	e05b      	b.n	800c788 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d137      	bne.n	800c74e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f001 f9df 	bl	800daa8 <SDMMC_CmdAppCommand>
 800c6ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d02d      	beq.n	800c74e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c6f6:	e047      	b.n	800c788 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f001 f9d2 	bl	800daa8 <SDMMC_CmdAppCommand>
 800c704:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <SD_PowerON+0x98>
    {
      return errorstate;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	e03b      	b.n	800c788 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	491e      	ldr	r1, [pc, #120]	; (800c790 <SD_PowerON+0x118>)
 800c716:	4618      	mov	r0, r3
 800c718:	f001 f9e8 	bl	800daec <SDMMC_CmdAppOperCommand>
 800c71c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c724:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c728:	e02e      	b.n	800c788 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2100      	movs	r1, #0
 800c730:	4618      	mov	r0, r3
 800c732:	f001 f84e 	bl	800d7d2 <SDIO_GetResponse>
 800c736:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	0fdb      	lsrs	r3, r3, #31
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d101      	bne.n	800c744 <SD_PowerON+0xcc>
 800c740:	2301      	movs	r3, #1
 800c742:	e000      	b.n	800c746 <SD_PowerON+0xce>
 800c744:	2300      	movs	r3, #0
 800c746:	613b      	str	r3, [r7, #16]

    count++;
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	3301      	adds	r3, #1
 800c74c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c754:	4293      	cmp	r3, r2
 800c756:	d802      	bhi.n	800c75e <SD_PowerON+0xe6>
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0cc      	beq.n	800c6f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c764:	4293      	cmp	r3, r2
 800c766:	d902      	bls.n	800c76e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c76c:	e00c      	b.n	800c788 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d003      	beq.n	800c780 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	645a      	str	r2, [r3, #68]	; 0x44
 800c77e:	e002      	b.n	800c786 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	c1100000 	.word	0xc1100000

0800c794 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d102      	bne.n	800c7aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c7a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7a8:	e018      	b.n	800c7dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b2:	041b      	lsls	r3, r3, #16
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	f001 fa5c 	bl	800dc74 <SDMMC_CmdSendStatus>
 800c7bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	e009      	b.n	800c7dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 ffff 	bl	800d7d2 <SDIO_GetResponse>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 ffe9 	bl	800d7d2 <SDIO_GetResponse>
 800c800:	4603      	mov	r3, r0
 800c802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c80a:	d102      	bne.n	800c812 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c80c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c810:	e02f      	b.n	800c872 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c812:	f107 030c 	add.w	r3, r7, #12
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f879 	bl	800c910 <SD_FindSCR>
 800c81e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	e023      	b.n	800c872 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d01c      	beq.n	800c86e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c83c:	041b      	lsls	r3, r3, #16
 800c83e:	4619      	mov	r1, r3
 800c840:	4610      	mov	r0, r2
 800c842:	f001 f931 	bl	800daa8 <SDMMC_CmdAppCommand>
 800c846:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	e00f      	b.n	800c872 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2102      	movs	r1, #2
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f96a 	bl	800db32 <SDMMC_CmdBusWidth>
 800c85e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	e003      	b.n	800c872 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c86a:	2300      	movs	r3, #0
 800c86c:	e001      	b.n	800c872 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c86e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c872:	4618      	mov	r0, r3
 800c874:	3718      	adds	r7, #24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b086      	sub	sp, #24
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c882:	2300      	movs	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
 800c886:	2300      	movs	r3, #0
 800c888:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2100      	movs	r1, #0
 800c890:	4618      	mov	r0, r3
 800c892:	f000 ff9e 	bl	800d7d2 <SDIO_GetResponse>
 800c896:	4603      	mov	r3, r0
 800c898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c89c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8a0:	d102      	bne.n	800c8a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c8a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8a6:	e02f      	b.n	800c908 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c8a8:	f107 030c 	add.w	r3, r7, #12
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f82e 	bl	800c910 <SD_FindSCR>
 800c8b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	e023      	b.n	800c908 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d01c      	beq.n	800c904 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d2:	041b      	lsls	r3, r3, #16
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f001 f8e6 	bl	800daa8 <SDMMC_CmdAppCommand>
 800c8dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	e00f      	b.n	800c908 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f001 f91f 	bl	800db32 <SDMMC_CmdBusWidth>
 800c8f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	e003      	b.n	800c908 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c900:	2300      	movs	r3, #0
 800c902:	e001      	b.n	800c908 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c904:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c910:	b590      	push	{r4, r7, lr}
 800c912:	b08f      	sub	sp, #60	; 0x3c
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c91a:	f7fb fe0f 	bl	800853c <HAL_GetTick>
 800c91e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c920:	2300      	movs	r3, #0
 800c922:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c924:	2300      	movs	r3, #0
 800c926:	60bb      	str	r3, [r7, #8]
 800c928:	2300      	movs	r3, #0
 800c92a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2108      	movs	r1, #8
 800c936:	4618      	mov	r0, r3
 800c938:	f000 ff8a 	bl	800d850 <SDMMC_CmdBlockLength>
 800c93c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c946:	e0a9      	b.n	800ca9c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c950:	041b      	lsls	r3, r3, #16
 800c952:	4619      	mov	r1, r3
 800c954:	4610      	mov	r0, r2
 800c956:	f001 f8a7 	bl	800daa8 <SDMMC_CmdAppCommand>
 800c95a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	e09a      	b.n	800ca9c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c96a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c96c:	2308      	movs	r3, #8
 800c96e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c970:	2330      	movs	r3, #48	; 0x30
 800c972:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c974:	2302      	movs	r3, #2
 800c976:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c978:	2300      	movs	r3, #0
 800c97a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c97c:	2301      	movs	r3, #1
 800c97e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f107 0210 	add.w	r2, r7, #16
 800c988:	4611      	mov	r1, r2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 ff34 	bl	800d7f8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4618      	mov	r0, r3
 800c996:	f001 f8ee 	bl	800db76 <SDMMC_CmdSendSCR>
 800c99a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d022      	beq.n	800c9e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	e07a      	b.n	800ca9c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00e      	beq.n	800c9d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6819      	ldr	r1, [r3, #0]
 800c9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	f107 0208 	add.w	r2, r7, #8
 800c9c0:	18d4      	adds	r4, r2, r3
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	f000 fe93 	bl	800d6ee <SDIO_ReadFIFO>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	6023      	str	r3, [r4, #0]
      index++;
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c9d2:	f7fb fdb3 	bl	800853c <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e0:	d102      	bne.n	800c9e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c9e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9e6:	e059      	b.n	800ca9c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9ee:	f240 432a 	movw	r3, #1066	; 0x42a
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d0d6      	beq.n	800c9a6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9fe:	f003 0308 	and.w	r3, r3, #8
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ca0e:	2308      	movs	r3, #8
 800ca10:	e044      	b.n	800ca9c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca18:	f003 0302 	and.w	r3, r3, #2
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d005      	beq.n	800ca2c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2202      	movs	r2, #2
 800ca26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e037      	b.n	800ca9c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca32:	f003 0320 	and.w	r3, r3, #32
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d005      	beq.n	800ca46 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2220      	movs	r2, #32
 800ca40:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ca42:	2320      	movs	r3, #32
 800ca44:	e02a      	b.n	800ca9c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ca4e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	061a      	lsls	r2, r3, #24
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	021b      	lsls	r3, r3, #8
 800ca58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	0a1b      	lsrs	r3, r3, #8
 800ca62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ca66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	0e1b      	lsrs	r3, r3, #24
 800ca6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	601a      	str	r2, [r3, #0]
    scr++;
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	3304      	adds	r3, #4
 800ca76:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	061a      	lsls	r2, r3, #24
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	021b      	lsls	r3, r3, #8
 800ca80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ca8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	0e1b      	lsrs	r3, r3, #24
 800ca94:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	373c      	adds	r7, #60	; 0x3c
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd90      	pop	{r4, r7, pc}

0800caa4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d03f      	beq.n	800cb3e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800cabe:	2300      	movs	r3, #0
 800cac0:	617b      	str	r3, [r7, #20]
 800cac2:	e033      	b.n	800cb2c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 fe10 	bl	800d6ee <SDIO_ReadFIFO>
 800cace:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3301      	adds	r3, #1
 800cadc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	0a1b      	lsrs	r3, r3, #8
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	701a      	strb	r2, [r3, #0]
      tmp++;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3301      	adds	r3, #1
 800caf2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	0c1b      	lsrs	r3, r3, #16
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3301      	adds	r3, #1
 800cb08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	0e1b      	lsrs	r3, r3, #24
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	3b01      	subs	r3, #1
 800cb24:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	617b      	str	r3, [r7, #20]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	2b07      	cmp	r3, #7
 800cb30:	d9c8      	bls.n	800cac4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800cb3e:	bf00      	nop
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b086      	sub	sp, #24
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d043      	beq.n	800cbe8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800cb60:	2300      	movs	r3, #0
 800cb62:	617b      	str	r3, [r7, #20]
 800cb64:	e037      	b.n	800cbd6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	021a      	lsls	r2, r3, #8
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	3301      	adds	r3, #1
 800cb88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	041a      	lsls	r2, r3, #16
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	061a      	lsls	r2, r3, #24
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f107 0208 	add.w	r2, r7, #8
 800cbc8:	4611      	mov	r1, r2
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 fd9c 	bl	800d708 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	617b      	str	r3, [r7, #20]
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2b07      	cmp	r3, #7
 800cbda:	d9c4      	bls.n	800cb66 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800cbe8:	bf00      	nop
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e056      	b.n	800ccb0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d106      	bne.n	800cc22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f7f7 ff5f 	bl	8004ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2202      	movs	r2, #2
 800cc26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	431a      	orrs	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	431a      	orrs	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	431a      	orrs	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	431a      	orrs	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	69db      	ldr	r3, [r3, #28]
 800cc64:	431a      	orrs	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	ea42 0103 	orr.w	r1, r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	699b      	ldr	r3, [r3, #24]
 800cc7e:	0c1b      	lsrs	r3, r3, #16
 800cc80:	f003 0104 	and.w	r1, r3, #4
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	430a      	orrs	r2, r1
 800cc8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	69da      	ldr	r2, [r3, #28]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	603b      	str	r3, [r7, #0]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d101      	bne.n	800ccda <HAL_SPI_Transmit+0x22>
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	e11e      	b.n	800cf18 <HAL_SPI_Transmit+0x260>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cce2:	f7fb fc2b 	bl	800853c <HAL_GetTick>
 800cce6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cce8:	88fb      	ldrh	r3, [r7, #6]
 800ccea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d002      	beq.n	800ccfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ccfc:	e103      	b.n	800cf06 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <HAL_SPI_Transmit+0x52>
 800cd04:	88fb      	ldrh	r3, [r7, #6]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cd0e:	e0fa      	b.n	800cf06 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2203      	movs	r2, #3
 800cd14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	88fa      	ldrh	r2, [r7, #6]
 800cd28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	88fa      	ldrh	r2, [r7, #6]
 800cd2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2200      	movs	r2, #0
 800cd34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd56:	d107      	bne.n	800cd68 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd72:	2b40      	cmp	r3, #64	; 0x40
 800cd74:	d007      	beq.n	800cd86 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd8e:	d14b      	bne.n	800ce28 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <HAL_SPI_Transmit+0xe6>
 800cd98:	8afb      	ldrh	r3, [r7, #22]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d13e      	bne.n	800ce1c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda2:	881a      	ldrh	r2, [r3, #0]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdae:	1c9a      	adds	r2, r3, #2
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cdc2:	e02b      	b.n	800ce1c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f003 0302 	and.w	r3, r3, #2
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d112      	bne.n	800cdf8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd6:	881a      	ldrh	r2, [r3, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde2:	1c9a      	adds	r2, r3, #2
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	86da      	strh	r2, [r3, #54]	; 0x36
 800cdf6:	e011      	b.n	800ce1c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdf8:	f7fb fba0 	bl	800853c <HAL_GetTick>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d803      	bhi.n	800ce10 <HAL_SPI_Transmit+0x158>
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce0e:	d102      	bne.n	800ce16 <HAL_SPI_Transmit+0x15e>
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d102      	bne.n	800ce1c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ce1a:	e074      	b.n	800cf06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1ce      	bne.n	800cdc4 <HAL_SPI_Transmit+0x10c>
 800ce26:	e04c      	b.n	800cec2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <HAL_SPI_Transmit+0x17e>
 800ce30:	8afb      	ldrh	r3, [r7, #22]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d140      	bne.n	800ceb8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	330c      	adds	r3, #12
 800ce40:	7812      	ldrb	r2, [r2, #0]
 800ce42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	3b01      	subs	r3, #1
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ce5c:	e02c      	b.n	800ceb8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d113      	bne.n	800ce94 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	330c      	adds	r3, #12
 800ce76:	7812      	ldrb	r2, [r2, #0]
 800ce78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	86da      	strh	r2, [r3, #54]	; 0x36
 800ce92:	e011      	b.n	800ceb8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce94:	f7fb fb52 	bl	800853c <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d803      	bhi.n	800ceac <HAL_SPI_Transmit+0x1f4>
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceaa:	d102      	bne.n	800ceb2 <HAL_SPI_Transmit+0x1fa>
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d102      	bne.n	800ceb8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ceb6:	e026      	b.n	800cf06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1cd      	bne.n	800ce5e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cec2:	69ba      	ldr	r2, [r7, #24]
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f000 fba4 	bl	800d614 <SPI_EndRxTxTransaction>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d002      	beq.n	800ced8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2220      	movs	r2, #32
 800ced6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10a      	bne.n	800cef6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cee0:	2300      	movs	r3, #0
 800cee2:	613b      	str	r3, [r7, #16]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	613b      	str	r3, [r7, #16]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	613b      	str	r3, [r7, #16]
 800cef4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d002      	beq.n	800cf04 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	77fb      	strb	r3, [r7, #31]
 800cf02:	e000      	b.n	800cf06 <HAL_SPI_Transmit+0x24e>
  }

error:
 800cf04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cf16:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3720      	adds	r7, #32
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b088      	sub	sp, #32
 800cf24:	af02      	add	r7, sp, #8
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	603b      	str	r3, [r7, #0]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf3c:	d112      	bne.n	800cf64 <HAL_SPI_Receive+0x44>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10e      	bne.n	800cf64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2204      	movs	r2, #4
 800cf4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cf4e:	88fa      	ldrh	r2, [r7, #6]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	4613      	mov	r3, r2
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	68b9      	ldr	r1, [r7, #8]
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f000 f8e9 	bl	800d132 <HAL_SPI_TransmitReceive>
 800cf60:	4603      	mov	r3, r0
 800cf62:	e0e2      	b.n	800d12a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d101      	bne.n	800cf72 <HAL_SPI_Receive+0x52>
 800cf6e:	2302      	movs	r3, #2
 800cf70:	e0db      	b.n	800d12a <HAL_SPI_Receive+0x20a>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf7a:	f7fb fadf 	bl	800853c <HAL_GetTick>
 800cf7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d002      	beq.n	800cf92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf90:	e0c2      	b.n	800d118 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <HAL_SPI_Receive+0x7e>
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d102      	bne.n	800cfa4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cfa2:	e0b9      	b.n	800d118 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2204      	movs	r2, #4
 800cfa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	88fa      	ldrh	r2, [r7, #6]
 800cfbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	88fa      	ldrh	r2, [r7, #6]
 800cfc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfea:	d107      	bne.n	800cffc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cffa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d006:	2b40      	cmp	r3, #64	; 0x40
 800d008:	d007      	beq.n	800d01a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d018:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d162      	bne.n	800d0e8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d022:	e02e      	b.n	800d082 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d115      	bne.n	800d05e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f103 020c 	add.w	r2, r3, #12
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03e:	7812      	ldrb	r2, [r2, #0]
 800d040:	b2d2      	uxtb	r2, r2
 800d042:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d052:	b29b      	uxth	r3, r3
 800d054:	3b01      	subs	r3, #1
 800d056:	b29a      	uxth	r2, r3
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d05c:	e011      	b.n	800d082 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d05e:	f7fb fa6d 	bl	800853c <HAL_GetTick>
 800d062:	4602      	mov	r2, r0
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d803      	bhi.n	800d076 <HAL_SPI_Receive+0x156>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d074:	d102      	bne.n	800d07c <HAL_SPI_Receive+0x15c>
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d080:	e04a      	b.n	800d118 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d086:	b29b      	uxth	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1cb      	bne.n	800d024 <HAL_SPI_Receive+0x104>
 800d08c:	e031      	b.n	800d0f2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	f003 0301 	and.w	r3, r3, #1
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d113      	bne.n	800d0c4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	68da      	ldr	r2, [r3, #12]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a6:	b292      	uxth	r2, r2
 800d0a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ae:	1c9a      	adds	r2, r3, #2
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d0c2:	e011      	b.n	800d0e8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0c4:	f7fb fa3a 	bl	800853c <HAL_GetTick>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d803      	bhi.n	800d0dc <HAL_SPI_Receive+0x1bc>
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0da:	d102      	bne.n	800d0e2 <HAL_SPI_Receive+0x1c2>
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800d0e2:	2303      	movs	r3, #3
 800d0e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d0e6:	e017      	b.n	800d118 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1cd      	bne.n	800d08e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 fa27 	bl	800d54a <SPI_EndRxTransaction>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2220      	movs	r2, #32
 800d106:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	75fb      	strb	r3, [r7, #23]
 800d114:	e000      	b.n	800d118 <HAL_SPI_Receive+0x1f8>
  }

error :
 800d116:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d128:	7dfb      	ldrb	r3, [r7, #23]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b08c      	sub	sp, #48	; 0x30
 800d136:	af00      	add	r7, sp, #0
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	607a      	str	r2, [r7, #4]
 800d13e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d140:	2301      	movs	r3, #1
 800d142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d150:	2b01      	cmp	r3, #1
 800d152:	d101      	bne.n	800d158 <HAL_SPI_TransmitReceive+0x26>
 800d154:	2302      	movs	r3, #2
 800d156:	e18a      	b.n	800d46e <HAL_SPI_TransmitReceive+0x33c>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d160:	f7fb f9ec 	bl	800853c <HAL_GetTick>
 800d164:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d16c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d176:	887b      	ldrh	r3, [r7, #2]
 800d178:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d17a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d00f      	beq.n	800d1a2 <HAL_SPI_TransmitReceive+0x70>
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d188:	d107      	bne.n	800d19a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d103      	bne.n	800d19a <HAL_SPI_TransmitReceive+0x68>
 800d192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d196:	2b04      	cmp	r3, #4
 800d198:	d003      	beq.n	800d1a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d19a:	2302      	movs	r3, #2
 800d19c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d1a0:	e15b      	b.n	800d45a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d005      	beq.n	800d1b4 <HAL_SPI_TransmitReceive+0x82>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d002      	beq.n	800d1b4 <HAL_SPI_TransmitReceive+0x82>
 800d1ae:	887b      	ldrh	r3, [r7, #2]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d103      	bne.n	800d1bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d1ba:	e14e      	b.n	800d45a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	2b04      	cmp	r3, #4
 800d1c6:	d003      	beq.n	800d1d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2205      	movs	r2, #5
 800d1cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	887a      	ldrh	r2, [r7, #2]
 800d1e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	887a      	ldrh	r2, [r7, #2]
 800d1e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	887a      	ldrh	r2, [r7, #2]
 800d1f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	887a      	ldrh	r2, [r7, #2]
 800d1f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d210:	2b40      	cmp	r3, #64	; 0x40
 800d212:	d007      	beq.n	800d224 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d222:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d22c:	d178      	bne.n	800d320 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <HAL_SPI_TransmitReceive+0x10a>
 800d236:	8b7b      	ldrh	r3, [r7, #26]
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d166      	bne.n	800d30a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d240:	881a      	ldrh	r2, [r3, #0]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24c:	1c9a      	adds	r2, r3, #2
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d256:	b29b      	uxth	r3, r3
 800d258:	3b01      	subs	r3, #1
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d260:	e053      	b.n	800d30a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	f003 0302 	and.w	r3, r3, #2
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	d11b      	bne.n	800d2a8 <HAL_SPI_TransmitReceive+0x176>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d274:	b29b      	uxth	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d016      	beq.n	800d2a8 <HAL_SPI_TransmitReceive+0x176>
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d113      	bne.n	800d2a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d284:	881a      	ldrh	r2, [r3, #0]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d290:	1c9a      	adds	r2, r3, #2
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	3b01      	subs	r3, #1
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d119      	bne.n	800d2ea <HAL_SPI_TransmitReceive+0x1b8>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d014      	beq.n	800d2ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ca:	b292      	uxth	r2, r2
 800d2cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d2:	1c9a      	adds	r2, r3, #2
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d2ea:	f7fb f927 	bl	800853c <HAL_GetTick>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d807      	bhi.n	800d30a <HAL_SPI_TransmitReceive+0x1d8>
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d300:	d003      	beq.n	800d30a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d302:	2303      	movs	r3, #3
 800d304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d308:	e0a7      	b.n	800d45a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d30e:	b29b      	uxth	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1a6      	bne.n	800d262 <HAL_SPI_TransmitReceive+0x130>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d318:	b29b      	uxth	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1a1      	bne.n	800d262 <HAL_SPI_TransmitReceive+0x130>
 800d31e:	e07c      	b.n	800d41a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <HAL_SPI_TransmitReceive+0x1fc>
 800d328:	8b7b      	ldrh	r3, [r7, #26]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d16b      	bne.n	800d406 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	330c      	adds	r3, #12
 800d338:	7812      	ldrb	r2, [r2, #0]
 800d33a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	3b01      	subs	r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d354:	e057      	b.n	800d406 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	f003 0302 	and.w	r3, r3, #2
 800d360:	2b02      	cmp	r3, #2
 800d362:	d11c      	bne.n	800d39e <HAL_SPI_TransmitReceive+0x26c>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d368:	b29b      	uxth	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d017      	beq.n	800d39e <HAL_SPI_TransmitReceive+0x26c>
 800d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d370:	2b01      	cmp	r3, #1
 800d372:	d114      	bne.n	800d39e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	330c      	adds	r3, #12
 800d37e:	7812      	ldrb	r2, [r2, #0]
 800d380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d390:	b29b      	uxth	r3, r3
 800d392:	3b01      	subs	r3, #1
 800d394:	b29a      	uxth	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d39a:	2300      	movs	r3, #0
 800d39c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d119      	bne.n	800d3e0 <HAL_SPI_TransmitReceive+0x2ae>
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d014      	beq.n	800d3e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68da      	ldr	r2, [r3, #12]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c0:	b2d2      	uxtb	r2, r2
 800d3c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d3e0:	f7fb f8ac 	bl	800853c <HAL_GetTick>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d803      	bhi.n	800d3f8 <HAL_SPI_TransmitReceive+0x2c6>
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3f6:	d102      	bne.n	800d3fe <HAL_SPI_TransmitReceive+0x2cc>
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d103      	bne.n	800d406 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d3fe:	2303      	movs	r3, #3
 800d400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d404:	e029      	b.n	800d45a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1a2      	bne.n	800d356 <HAL_SPI_TransmitReceive+0x224>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d414:	b29b      	uxth	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d19d      	bne.n	800d356 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 f8f8 	bl	800d614 <SPI_EndRxTxTransaction>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d006      	beq.n	800d438 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2220      	movs	r2, #32
 800d434:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d436:	e010      	b.n	800d45a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10b      	bne.n	800d458 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d440:	2300      	movs	r3, #0
 800d442:	617b      	str	r3, [r7, #20]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	617b      	str	r3, [r7, #20]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	e000      	b.n	800d45a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d458:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2201      	movs	r2, #1
 800d45e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d46a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3730      	adds	r7, #48	; 0x30
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	60f8      	str	r0, [r7, #12]
 800d47e:	60b9      	str	r1, [r7, #8]
 800d480:	603b      	str	r3, [r7, #0]
 800d482:	4613      	mov	r3, r2
 800d484:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d486:	e04c      	b.n	800d522 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d48e:	d048      	beq.n	800d522 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d490:	f7fb f854 	bl	800853c <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d902      	bls.n	800d4a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d13d      	bne.n	800d522 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d4b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4be:	d111      	bne.n	800d4e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4c8:	d004      	beq.n	800d4d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4d2:	d107      	bne.n	800d4e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4ec:	d10f      	bne.n	800d50e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d50c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2201      	movs	r2, #1
 800d512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d51e:	2303      	movs	r3, #3
 800d520:	e00f      	b.n	800d542 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	689a      	ldr	r2, [r3, #8]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	4013      	ands	r3, r2
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	429a      	cmp	r2, r3
 800d530:	bf0c      	ite	eq
 800d532:	2301      	moveq	r3, #1
 800d534:	2300      	movne	r3, #0
 800d536:	b2db      	uxtb	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	79fb      	ldrb	r3, [r7, #7]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d1a3      	bne.n	800d488 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b086      	sub	sp, #24
 800d54e:	af02      	add	r7, sp, #8
 800d550:	60f8      	str	r0, [r7, #12]
 800d552:	60b9      	str	r1, [r7, #8]
 800d554:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d55e:	d111      	bne.n	800d584 <SPI_EndRxTransaction+0x3a>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d568:	d004      	beq.n	800d574 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d572:	d107      	bne.n	800d584 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d582:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d58c:	d12a      	bne.n	800d5e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d596:	d012      	beq.n	800d5be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2180      	movs	r1, #128	; 0x80
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f7ff ff67 	bl	800d476 <SPI_WaitFlagStateUntilTimeout>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d02d      	beq.n	800d60a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b2:	f043 0220 	orr.w	r2, r3, #32
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e026      	b.n	800d60c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7ff ff54 	bl	800d476 <SPI_WaitFlagStateUntilTimeout>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d01a      	beq.n	800d60a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5d8:	f043 0220 	orr.w	r2, r3, #32
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	e013      	b.n	800d60c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7ff ff41 	bl	800d476 <SPI_WaitFlagStateUntilTimeout>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d007      	beq.n	800d60a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5fe:	f043 0220 	orr.w	r2, r3, #32
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d606:	2303      	movs	r3, #3
 800d608:	e000      	b.n	800d60c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af02      	add	r7, sp, #8
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d620:	4b1b      	ldr	r3, [pc, #108]	; (800d690 <SPI_EndRxTxTransaction+0x7c>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a1b      	ldr	r2, [pc, #108]	; (800d694 <SPI_EndRxTxTransaction+0x80>)
 800d626:	fba2 2303 	umull	r2, r3, r2, r3
 800d62a:	0d5b      	lsrs	r3, r3, #21
 800d62c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d630:	fb02 f303 	mul.w	r3, r2, r3
 800d634:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d63e:	d112      	bne.n	800d666 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2200      	movs	r2, #0
 800d648:	2180      	movs	r1, #128	; 0x80
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f7ff ff13 	bl	800d476 <SPI_WaitFlagStateUntilTimeout>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d016      	beq.n	800d684 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d65a:	f043 0220 	orr.w	r2, r3, #32
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d662:	2303      	movs	r3, #3
 800d664:	e00f      	b.n	800d686 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00a      	beq.n	800d682 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	3b01      	subs	r3, #1
 800d670:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d67c:	2b80      	cmp	r3, #128	; 0x80
 800d67e:	d0f2      	beq.n	800d666 <SPI_EndRxTxTransaction+0x52>
 800d680:	e000      	b.n	800d684 <SPI_EndRxTxTransaction+0x70>
        break;
 800d682:	bf00      	nop
  }

  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3718      	adds	r7, #24
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20000194 	.word	0x20000194
 800d694:	165e9f81 	.word	0x165e9f81

0800d698 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d698:	b084      	sub	sp, #16
 800d69a:	b480      	push	{r7}
 800d69c:	b085      	sub	sp, #20
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	f107 001c 	add.w	r0, r7, #28
 800d6a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d6ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d6b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d6b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d6ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d6be:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d6c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d6d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d6d6:	68fa      	ldr	r2, [r7, #12]
 800d6d8:	431a      	orrs	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	b004      	add	sp, #16
 800d6ec:	4770      	bx	lr

0800d6ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2203      	movs	r2, #3
 800d736:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d738:	2002      	movs	r0, #2
 800d73a:	f7fa ff0b 	bl	8008554 <HAL_Delay>
  
  return HAL_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f003 0303 	and.w	r3, r3, #3
}
 800d758:	4618      	mov	r0, r3
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d782:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d788:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d78e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	4313      	orrs	r3, r2
 800d794:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d79e:	f023 030f 	bic.w	r3, r3, #15
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	431a      	orrs	r2, r3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	b2db      	uxtb	r3, r3
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d7d2:	b480      	push	{r7}
 800d7d4:	b085      	sub	sp, #20
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	3314      	adds	r3, #20
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
}  
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3714      	adds	r7, #20
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d802:	2300      	movs	r3, #0
 800d804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d81e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d824:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d82a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d836:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	431a      	orrs	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d842:	2300      	movs	r3, #0

}
 800d844:	4618      	mov	r0, r3
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b088      	sub	sp, #32
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d85e:	2310      	movs	r3, #16
 800d860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d862:	2340      	movs	r3, #64	; 0x40
 800d864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d866:	2300      	movs	r3, #0
 800d868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d86a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d86e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d870:	f107 0308 	add.w	r3, r7, #8
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff ff74 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d87c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d880:	2110      	movs	r1, #16
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fa40 	bl	800dd08 <SDMMC_GetCmdResp1>
 800d888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d88a:	69fb      	ldr	r3, [r7, #28]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3720      	adds	r7, #32
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d8a2:	2311      	movs	r3, #17
 800d8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8a6:	2340      	movs	r3, #64	; 0x40
 800d8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8b4:	f107 0308 	add.w	r3, r7, #8
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7ff ff52 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8c4:	2111      	movs	r1, #17
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fa1e 	bl	800dd08 <SDMMC_GetCmdResp1>
 800d8cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8ce:	69fb      	ldr	r3, [r7, #28]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3720      	adds	r7, #32
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d8e6:	2312      	movs	r3, #18
 800d8e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8ea:	2340      	movs	r3, #64	; 0x40
 800d8ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8f8:	f107 0308 	add.w	r3, r7, #8
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff ff30 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d904:	f241 3288 	movw	r2, #5000	; 0x1388
 800d908:	2112      	movs	r1, #18
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f9fc 	bl	800dd08 <SDMMC_GetCmdResp1>
 800d910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d912:	69fb      	ldr	r3, [r7, #28]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3720      	adds	r7, #32
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b088      	sub	sp, #32
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d92a:	2318      	movs	r3, #24
 800d92c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d92e:	2340      	movs	r3, #64	; 0x40
 800d930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d932:	2300      	movs	r3, #0
 800d934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d93a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d93c:	f107 0308 	add.w	r3, r7, #8
 800d940:	4619      	mov	r1, r3
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7ff ff0e 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d948:	f241 3288 	movw	r2, #5000	; 0x1388
 800d94c:	2118      	movs	r1, #24
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f9da 	bl	800dd08 <SDMMC_GetCmdResp1>
 800d954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d956:	69fb      	ldr	r3, [r7, #28]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3720      	adds	r7, #32
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b088      	sub	sp, #32
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d96e:	2319      	movs	r3, #25
 800d970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d972:	2340      	movs	r3, #64	; 0x40
 800d974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d976:	2300      	movs	r3, #0
 800d978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d97a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d97e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d980:	f107 0308 	add.w	r3, r7, #8
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7ff feec 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d990:	2119      	movs	r1, #25
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 f9b8 	bl	800dd08 <SDMMC_GetCmdResp1>
 800d998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d99a:	69fb      	ldr	r3, [r7, #28]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3720      	adds	r7, #32
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d9b0:	230c      	movs	r3, #12
 800d9b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9b4:	2340      	movs	r3, #64	; 0x40
 800d9b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9c2:	f107 0308 	add.w	r3, r7, #8
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff fecb 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d9ce:	4a05      	ldr	r2, [pc, #20]	; (800d9e4 <SDMMC_CmdStopTransfer+0x40>)
 800d9d0:	210c      	movs	r1, #12
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f998 	bl	800dd08 <SDMMC_GetCmdResp1>
 800d9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9da:	69fb      	ldr	r3, [r7, #28]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3720      	adds	r7, #32
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	05f5e100 	.word	0x05f5e100

0800d9e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	; 0x28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d9f8:	2307      	movs	r3, #7
 800d9fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9fc:	2340      	movs	r3, #64	; 0x40
 800d9fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da00:	2300      	movs	r3, #0
 800da02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da08:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da0a:	f107 0310 	add.w	r3, r7, #16
 800da0e:	4619      	mov	r1, r3
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f7ff fea7 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800da16:	f241 3288 	movw	r2, #5000	; 0x1388
 800da1a:	2107      	movs	r1, #7
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 f973 	bl	800dd08 <SDMMC_GetCmdResp1>
 800da22:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da26:	4618      	mov	r0, r3
 800da28:	3728      	adds	r7, #40	; 0x28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b088      	sub	sp, #32
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800da36:	2300      	movs	r3, #0
 800da38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800da3e:	2300      	movs	r3, #0
 800da40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da42:	2300      	movs	r3, #0
 800da44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da4c:	f107 0308 	add.w	r3, r7, #8
 800da50:	4619      	mov	r1, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fe86 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 f92d 	bl	800dcb8 <SDMMC_GetCmdError>
 800da5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da60:	69fb      	ldr	r3, [r7, #28]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3720      	adds	r7, #32
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b088      	sub	sp, #32
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800da72:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800da76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800da78:	2308      	movs	r3, #8
 800da7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da7c:	2340      	movs	r3, #64	; 0x40
 800da7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da80:	2300      	movs	r3, #0
 800da82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da8a:	f107 0308 	add.w	r3, r7, #8
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7ff fe67 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fb16 	bl	800e0c8 <SDMMC_GetCmdResp7>
 800da9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da9e:	69fb      	ldr	r3, [r7, #28]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3720      	adds	r7, #32
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dab6:	2337      	movs	r3, #55	; 0x37
 800dab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800daba:	2340      	movs	r3, #64	; 0x40
 800dabc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dabe:	2300      	movs	r3, #0
 800dac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dac6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dac8:	f107 0308 	add.w	r3, r7, #8
 800dacc:	4619      	mov	r1, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff fe48 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dad4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dad8:	2137      	movs	r1, #55	; 0x37
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f914 	bl	800dd08 <SDMMC_GetCmdResp1>
 800dae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dae2:	69fb      	ldr	r3, [r7, #28]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3720      	adds	r7, #32
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b088      	sub	sp, #32
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dafc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800db02:	2329      	movs	r3, #41	; 0x29
 800db04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db06:	2340      	movs	r3, #64	; 0x40
 800db08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db0a:	2300      	movs	r3, #0
 800db0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db14:	f107 0308 	add.w	r3, r7, #8
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fe22 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fa23 	bl	800df6c <SDMMC_GetCmdResp3>
 800db26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db28:	69fb      	ldr	r3, [r7, #28]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3720      	adds	r7, #32
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b088      	sub	sp, #32
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800db40:	2306      	movs	r3, #6
 800db42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db44:	2340      	movs	r3, #64	; 0x40
 800db46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db48:	2300      	movs	r3, #0
 800db4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db52:	f107 0308 	add.w	r3, r7, #8
 800db56:	4619      	mov	r1, r3
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff fe03 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800db5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800db62:	2106      	movs	r1, #6
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f8cf 	bl	800dd08 <SDMMC_GetCmdResp1>
 800db6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db6c:	69fb      	ldr	r3, [r7, #28]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b088      	sub	sp, #32
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800db82:	2333      	movs	r3, #51	; 0x33
 800db84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db86:	2340      	movs	r3, #64	; 0x40
 800db88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db8a:	2300      	movs	r3, #0
 800db8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db94:	f107 0308 	add.w	r3, r7, #8
 800db98:	4619      	mov	r1, r3
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7ff fde2 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800dba0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba4:	2133      	movs	r1, #51	; 0x33
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f8ae 	bl	800dd08 <SDMMC_GetCmdResp1>
 800dbac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbae:	69fb      	ldr	r3, [r7, #28]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3720      	adds	r7, #32
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dbc4:	2302      	movs	r3, #2
 800dbc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dbc8:	23c0      	movs	r3, #192	; 0xc0
 800dbca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	4619      	mov	r1, r3
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff fdc1 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f97c 	bl	800dee0 <SDMMC_GetCmdResp2>
 800dbe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbea:	69fb      	ldr	r3, [r7, #28]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3720      	adds	r7, #32
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b088      	sub	sp, #32
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dc02:	2309      	movs	r3, #9
 800dc04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dc06:	23c0      	movs	r3, #192	; 0xc0
 800dc08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc14:	f107 0308 	add.w	r3, r7, #8
 800dc18:	4619      	mov	r1, r3
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fda2 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f95d 	bl	800dee0 <SDMMC_GetCmdResp2>
 800dc26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc28:	69fb      	ldr	r3, [r7, #28]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3720      	adds	r7, #32
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b088      	sub	sp, #32
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
 800dc3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dc40:	2303      	movs	r3, #3
 800dc42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc44:	2340      	movs	r3, #64	; 0x40
 800dc46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc52:	f107 0308 	add.w	r3, r7, #8
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7ff fd83 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	2103      	movs	r1, #3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f9bc 	bl	800dfe0 <SDMMC_GetCmdResp6>
 800dc68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3720      	adds	r7, #32
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dc82:	230d      	movs	r3, #13
 800dc84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc86:	2340      	movs	r3, #64	; 0x40
 800dc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc94:	f107 0308 	add.w	r3, r7, #8
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff fd62 	bl	800d764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dca4:	210d      	movs	r1, #13
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f82e 	bl	800dd08 <SDMMC_GetCmdResp1>
 800dcac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcae:	69fb      	ldr	r3, [r7, #28]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3720      	adds	r7, #32
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dcb8:	b490      	push	{r4, r7}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcc0:	4b0f      	ldr	r3, [pc, #60]	; (800dd00 <SDMMC_GetCmdError+0x48>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a0f      	ldr	r2, [pc, #60]	; (800dd04 <SDMMC_GetCmdError+0x4c>)
 800dcc6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcca:	0a5b      	lsrs	r3, r3, #9
 800dccc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dcd4:	4623      	mov	r3, r4
 800dcd6:	1e5c      	subs	r4, r3, #1
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d102      	bne.n	800dce2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dce0:	e009      	b.n	800dcf6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d0f2      	beq.n	800dcd4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	22c5      	movs	r2, #197	; 0xc5
 800dcf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bc90      	pop	{r4, r7}
 800dcfe:	4770      	bx	lr
 800dd00:	20000194 	.word	0x20000194
 800dd04:	10624dd3 	.word	0x10624dd3

0800dd08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dd08:	b590      	push	{r4, r7, lr}
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	460b      	mov	r3, r1
 800dd12:	607a      	str	r2, [r7, #4]
 800dd14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd16:	4b6f      	ldr	r3, [pc, #444]	; (800ded4 <SDMMC_GetCmdResp1+0x1cc>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a6f      	ldr	r2, [pc, #444]	; (800ded8 <SDMMC_GetCmdResp1+0x1d0>)
 800dd1c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd20:	0a5b      	lsrs	r3, r3, #9
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd28:	4623      	mov	r3, r4
 800dd2a:	1e5c      	subs	r4, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd34:	e0c9      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd3a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d0f0      	beq.n	800dd28 <SDMMC_GetCmdResp1+0x20>
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1eb      	bne.n	800dd28 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd54:	f003 0304 	and.w	r3, r3, #4
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d004      	beq.n	800dd66 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2204      	movs	r2, #4
 800dd60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd62:	2304      	movs	r3, #4
 800dd64:	e0b1      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6a:	f003 0301 	and.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d004      	beq.n	800dd7c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2201      	movs	r2, #1
 800dd76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e0a6      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	22c5      	movs	r2, #197	; 0xc5
 800dd80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f7ff fd18 	bl	800d7b8 <SDIO_GetCommandResponse>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	7afb      	ldrb	r3, [r7, #11]
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d001      	beq.n	800dd96 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd92:	2301      	movs	r3, #1
 800dd94:	e099      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dd96:	2100      	movs	r1, #0
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f7ff fd1a 	bl	800d7d2 <SDIO_GetResponse>
 800dd9e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dda0:	693a      	ldr	r2, [r7, #16]
 800dda2:	4b4e      	ldr	r3, [pc, #312]	; (800dedc <SDMMC_GetCmdResp1+0x1d4>)
 800dda4:	4013      	ands	r3, r2
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d101      	bne.n	800ddae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	e08d      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	da02      	bge.n	800ddba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ddb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ddb8:	e087      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ddc4:	2340      	movs	r3, #64	; 0x40
 800ddc6:	e080      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ddd2:	2380      	movs	r3, #128	; 0x80
 800ddd4:	e079      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dde0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dde4:	e071      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ddf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddf4:	e069      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800de00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de04:	e061      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de14:	e059      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d002      	beq.n	800de26 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de24:	e051      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de34:	e049      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800de40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de44:	e041      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800de50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de54:	e039      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800de60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de64:	e031      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800de70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de74:	e029      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800de80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800de84:	e021      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d002      	beq.n	800de96 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de94:	e019      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dea0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dea4:	e011      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800deb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800deb4:	e009      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	f003 0308 	and.w	r3, r3, #8
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dec0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dec4:	e001      	b.n	800deca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800deca:	4618      	mov	r0, r3
 800decc:	371c      	adds	r7, #28
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd90      	pop	{r4, r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20000194 	.word	0x20000194
 800ded8:	10624dd3 	.word	0x10624dd3
 800dedc:	fdffe008 	.word	0xfdffe008

0800dee0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dee0:	b490      	push	{r4, r7}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dee8:	4b1e      	ldr	r3, [pc, #120]	; (800df64 <SDMMC_GetCmdResp2+0x84>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a1e      	ldr	r2, [pc, #120]	; (800df68 <SDMMC_GetCmdResp2+0x88>)
 800deee:	fba2 2303 	umull	r2, r3, r2, r3
 800def2:	0a5b      	lsrs	r3, r3, #9
 800def4:	f241 3288 	movw	r2, #5000	; 0x1388
 800def8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800defc:	4623      	mov	r3, r4
 800defe:	1e5c      	subs	r4, r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	d102      	bne.n	800df0a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df08:	e026      	b.n	800df58 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0f0      	beq.n	800defc <SDMMC_GetCmdResp2+0x1c>
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1eb      	bne.n	800defc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df28:	f003 0304 	and.w	r3, r3, #4
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2204      	movs	r2, #4
 800df34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df36:	2304      	movs	r3, #4
 800df38:	e00e      	b.n	800df58 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d004      	beq.n	800df50 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e003      	b.n	800df58 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	22c5      	movs	r2, #197	; 0xc5
 800df54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bc90      	pop	{r4, r7}
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	20000194 	.word	0x20000194
 800df68:	10624dd3 	.word	0x10624dd3

0800df6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800df6c:	b490      	push	{r4, r7}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df74:	4b18      	ldr	r3, [pc, #96]	; (800dfd8 <SDMMC_GetCmdResp3+0x6c>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a18      	ldr	r2, [pc, #96]	; (800dfdc <SDMMC_GetCmdResp3+0x70>)
 800df7a:	fba2 2303 	umull	r2, r3, r2, r3
 800df7e:	0a5b      	lsrs	r3, r3, #9
 800df80:	f241 3288 	movw	r2, #5000	; 0x1388
 800df84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df88:	4623      	mov	r3, r4
 800df8a:	1e5c      	subs	r4, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d102      	bne.n	800df96 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df94:	e01b      	b.n	800dfce <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d0f0      	beq.n	800df88 <SDMMC_GetCmdResp3+0x1c>
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1eb      	bne.n	800df88 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb4:	f003 0304 	and.w	r3, r3, #4
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2204      	movs	r2, #4
 800dfc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfc2:	2304      	movs	r3, #4
 800dfc4:	e003      	b.n	800dfce <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	22c5      	movs	r2, #197	; 0xc5
 800dfca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bc90      	pop	{r4, r7}
 800dfd6:	4770      	bx	lr
 800dfd8:	20000194 	.word	0x20000194
 800dfdc:	10624dd3 	.word	0x10624dd3

0800dfe0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dfe0:	b590      	push	{r4, r7, lr}
 800dfe2:	b087      	sub	sp, #28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfee:	4b34      	ldr	r3, [pc, #208]	; (800e0c0 <SDMMC_GetCmdResp6+0xe0>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a34      	ldr	r2, [pc, #208]	; (800e0c4 <SDMMC_GetCmdResp6+0xe4>)
 800dff4:	fba2 2303 	umull	r2, r3, r2, r3
 800dff8:	0a5b      	lsrs	r3, r3, #9
 800dffa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dffe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e002:	4623      	mov	r3, r4
 800e004:	1e5c      	subs	r4, r3, #1
 800e006:	2b00      	cmp	r3, #0
 800e008:	d102      	bne.n	800e010 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e00a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e00e:	e052      	b.n	800e0b6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e014:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d0f0      	beq.n	800e002 <SDMMC_GetCmdResp6+0x22>
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1eb      	bne.n	800e002 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e02e:	f003 0304 	and.w	r3, r3, #4
 800e032:	2b00      	cmp	r3, #0
 800e034:	d004      	beq.n	800e040 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2204      	movs	r2, #4
 800e03a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e03c:	2304      	movs	r3, #4
 800e03e:	e03a      	b.n	800e0b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d004      	beq.n	800e056 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2201      	movs	r2, #1
 800e050:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e052:	2301      	movs	r3, #1
 800e054:	e02f      	b.n	800e0b6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7ff fbae 	bl	800d7b8 <SDIO_GetCommandResponse>
 800e05c:	4603      	mov	r3, r0
 800e05e:	461a      	mov	r2, r3
 800e060:	7afb      	ldrb	r3, [r7, #11]
 800e062:	4293      	cmp	r3, r2
 800e064:	d001      	beq.n	800e06a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e066:	2301      	movs	r3, #1
 800e068:	e025      	b.n	800e0b6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	22c5      	movs	r2, #197	; 0xc5
 800e06e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e070:	2100      	movs	r1, #0
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f7ff fbad 	bl	800d7d2 <SDIO_GetResponse>
 800e078:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	0c1b      	lsrs	r3, r3, #16
 800e088:	b29a      	uxth	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e08e:	2300      	movs	r3, #0
 800e090:	e011      	b.n	800e0b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e09c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0a0:	e009      	b.n	800e0b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0b0:	e001      	b.n	800e0b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	371c      	adds	r7, #28
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd90      	pop	{r4, r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	20000194 	.word	0x20000194
 800e0c4:	10624dd3 	.word	0x10624dd3

0800e0c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e0c8:	b490      	push	{r4, r7}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0d0:	4b21      	ldr	r3, [pc, #132]	; (800e158 <SDMMC_GetCmdResp7+0x90>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a21      	ldr	r2, [pc, #132]	; (800e15c <SDMMC_GetCmdResp7+0x94>)
 800e0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e0da:	0a5b      	lsrs	r3, r3, #9
 800e0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e0e4:	4623      	mov	r3, r4
 800e0e6:	1e5c      	subs	r4, r3, #1
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d102      	bne.n	800e0f2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0f0:	e02c      	b.n	800e14c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d0f0      	beq.n	800e0e4 <SDMMC_GetCmdResp7+0x1c>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1eb      	bne.n	800e0e4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e110:	f003 0304 	and.w	r3, r3, #4
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2204      	movs	r2, #4
 800e11c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e11e:	2304      	movs	r3, #4
 800e120:	e014      	b.n	800e14c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d004      	beq.n	800e138 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2201      	movs	r2, #1
 800e132:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e134:	2301      	movs	r3, #1
 800e136:	e009      	b.n	800e14c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2240      	movs	r2, #64	; 0x40
 800e148:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e14a:	2300      	movs	r3, #0
  
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bc90      	pop	{r4, r7}
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	20000194 	.word	0x20000194
 800e15c:	10624dd3 	.word	0x10624dd3

0800e160 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e164:	4904      	ldr	r1, [pc, #16]	; (800e178 <MX_FATFS_Init+0x18>)
 800e166:	4805      	ldr	r0, [pc, #20]	; (800e17c <MX_FATFS_Init+0x1c>)
 800e168:	f003 fb68 	bl	801183c <FATFS_LinkDriver>
 800e16c:	4603      	mov	r3, r0
 800e16e:	461a      	mov	r2, r3
 800e170:	4b03      	ldr	r3, [pc, #12]	; (800e180 <MX_FATFS_Init+0x20>)
 800e172:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e174:	bf00      	nop
 800e176:	bd80      	pop	{r7, pc}
 800e178:	2000e24c 	.word	0x2000e24c
 800e17c:	08018068 	.word	0x08018068
 800e180:	2000e248 	.word	0x2000e248

0800e184 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e188:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e19a:	2300      	movs	r3, #0
 800e19c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e19e:	f000 f896 	bl	800e2ce <BSP_SD_IsDetected>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d001      	beq.n	800e1ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e012      	b.n	800e1d2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e1ac:	480b      	ldr	r0, [pc, #44]	; (800e1dc <BSP_SD_Init+0x48>)
 800e1ae:	f7fd fa21 	bl	800b5f4 <HAL_SD_Init>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e1b6:	79fb      	ldrb	r3, [r7, #7]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d109      	bne.n	800e1d0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e1bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e1c0:	4806      	ldr	r0, [pc, #24]	; (800e1dc <BSP_SD_Init+0x48>)
 800e1c2:	f7fd ffe1 	bl	800c188 <HAL_SD_ConfigWideBusOperation>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3708      	adds	r7, #8
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	2000e110 	.word	0x2000e110

0800e1e0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	68f9      	ldr	r1, [r7, #12]
 800e1f6:	4806      	ldr	r0, [pc, #24]	; (800e210 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e1f8:	f7fd fa8c 	bl	800b714 <HAL_SD_ReadBlocks_DMA>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e206:	7dfb      	ldrb	r3, [r7, #23]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	2000e110 	.word	0x2000e110

0800e214 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e220:	2300      	movs	r3, #0
 800e222:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	68ba      	ldr	r2, [r7, #8]
 800e228:	68f9      	ldr	r1, [r7, #12]
 800e22a:	4806      	ldr	r0, [pc, #24]	; (800e244 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e22c:	f7fd fb5c 	bl	800b8e8 <HAL_SD_WriteBlocks_DMA>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d001      	beq.n	800e23a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e236:	2301      	movs	r3, #1
 800e238:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	2000e110 	.word	0x2000e110

0800e248 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e24c:	4805      	ldr	r0, [pc, #20]	; (800e264 <BSP_SD_GetCardState+0x1c>)
 800e24e:	f7fe f817 	bl	800c280 <HAL_SD_GetCardState>
 800e252:	4603      	mov	r3, r0
 800e254:	2b04      	cmp	r3, #4
 800e256:	bf14      	ite	ne
 800e258:	2301      	movne	r3, #1
 800e25a:	2300      	moveq	r3, #0
 800e25c:	b2db      	uxtb	r3, r3
}
 800e25e:	4618      	mov	r0, r3
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	2000e110 	.word	0x2000e110

0800e268 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e270:	6879      	ldr	r1, [r7, #4]
 800e272:	4803      	ldr	r0, [pc, #12]	; (800e280 <BSP_SD_GetCardInfo+0x18>)
 800e274:	f7fd ff5c 	bl	800c130 <HAL_SD_GetCardInfo>
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	2000e110 	.word	0x2000e110

0800e284 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e28c:	f000 f818 	bl	800e2c0 <BSP_SD_AbortCallback>
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e2a0:	f000 f9aa 	bl	800e5f8 <BSP_SD_WriteCpltCallback>
}
 800e2a4:	bf00      	nop
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e2b4:	f000 f9ac 	bl	800e610 <BSP_SD_ReadCpltCallback>
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	af00      	add	r7, sp, #0

}
 800e2c4:	bf00      	nop
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b082      	sub	sp, #8
 800e2d2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e2d8:	f000 f80c 	bl	800e2f4 <BSP_PlatformIsDetected>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
 800e2e8:	b2db      	uxtb	r3, r3
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
	...

0800e2f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e2fe:	2101      	movs	r1, #1
 800e300:	4807      	ldr	r0, [pc, #28]	; (800e320 <BSP_PlatformIsDetected+0x2c>)
 800e302:	f7fb fc3f 	bl	8009b84 <HAL_GPIO_ReadPin>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d001      	beq.n	800e310 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e30c:	2300      	movs	r3, #0
 800e30e:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 800e310:	2301      	movs	r3, #1
 800e312:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 800e314:	79fb      	ldrb	r3, [r7, #7]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	40020c00 	.word	0x40020c00

0800e324 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e32c:	f7fa f906 	bl	800853c <HAL_GetTick>
 800e330:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e332:	e006      	b.n	800e342 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e334:	f7ff ff88 	bl	800e248 <BSP_SD_GetCardState>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d101      	bne.n	800e342 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	e009      	b.n	800e356 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e342:	f7fa f8fb 	bl	800853c <HAL_GetTick>
 800e346:	4602      	mov	r2, r0
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	1ad3      	subs	r3, r2, r3
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d8f0      	bhi.n	800e334 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
	...

0800e360 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	4603      	mov	r3, r0
 800e368:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e36a:	4b0b      	ldr	r3, [pc, #44]	; (800e398 <SD_CheckStatus+0x38>)
 800e36c:	2201      	movs	r2, #1
 800e36e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e370:	f7ff ff6a 	bl	800e248 <BSP_SD_GetCardState>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d107      	bne.n	800e38a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e37a:	4b07      	ldr	r3, [pc, #28]	; (800e398 <SD_CheckStatus+0x38>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	f023 0301 	bic.w	r3, r3, #1
 800e384:	b2da      	uxtb	r2, r3
 800e386:	4b04      	ldr	r3, [pc, #16]	; (800e398 <SD_CheckStatus+0x38>)
 800e388:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e38a:	4b03      	ldr	r3, [pc, #12]	; (800e398 <SD_CheckStatus+0x38>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	b2db      	uxtb	r3, r3
}
 800e390:	4618      	mov	r0, r3
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	200001a1 	.word	0x200001a1

0800e39c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e3a6:	f7ff fef5 	bl	800e194 <BSP_SD_Init>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d107      	bne.n	800e3c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7ff ffd4 	bl	800e360 <SD_CheckStatus>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4b04      	ldr	r3, [pc, #16]	; (800e3d0 <SD_initialize+0x34>)
 800e3be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e3c0:	4b03      	ldr	r3, [pc, #12]	; (800e3d0 <SD_initialize+0x34>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	b2db      	uxtb	r3, r3
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	200001a1 	.word	0x200001a1

0800e3d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e3de:	79fb      	ldrb	r3, [r7, #7]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7ff ffbd 	bl	800e360 <SD_CheckStatus>
 800e3e6:	4603      	mov	r3, r0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60b9      	str	r1, [r7, #8]
 800e3f8:	607a      	str	r2, [r7, #4]
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e404:	f247 5030 	movw	r0, #30000	; 0x7530
 800e408:	f7ff ff8c 	bl	800e324 <SD_CheckStatusWithTimeout>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	da01      	bge.n	800e416 <SD_read+0x26>
  {
    return res;
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	e03b      	b.n	800e48e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e416:	683a      	ldr	r2, [r7, #0]
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	68b8      	ldr	r0, [r7, #8]
 800e41c:	f7ff fee0 	bl	800e1e0 <BSP_SD_ReadBlocks_DMA>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d132      	bne.n	800e48c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e426:	4b1c      	ldr	r3, [pc, #112]	; (800e498 <SD_read+0xa8>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e42c:	f7fa f886 	bl	800853c <HAL_GetTick>
 800e430:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e432:	bf00      	nop
 800e434:	4b18      	ldr	r3, [pc, #96]	; (800e498 <SD_read+0xa8>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d108      	bne.n	800e44e <SD_read+0x5e>
 800e43c:	f7fa f87e 	bl	800853c <HAL_GetTick>
 800e440:	4602      	mov	r2, r0
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	f247 522f 	movw	r2, #29999	; 0x752f
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d9f2      	bls.n	800e434 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e44e:	4b12      	ldr	r3, [pc, #72]	; (800e498 <SD_read+0xa8>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	75fb      	strb	r3, [r7, #23]
 800e45a:	e017      	b.n	800e48c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e45c:	4b0e      	ldr	r3, [pc, #56]	; (800e498 <SD_read+0xa8>)
 800e45e:	2200      	movs	r2, #0
 800e460:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e462:	f7fa f86b 	bl	800853c <HAL_GetTick>
 800e466:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e468:	e007      	b.n	800e47a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e46a:	f7ff feed 	bl	800e248 <BSP_SD_GetCardState>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d102      	bne.n	800e47a <SD_read+0x8a>
          {
            res = RES_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e478:	e008      	b.n	800e48c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e47a:	f7fa f85f 	bl	800853c <HAL_GetTick>
 800e47e:	4602      	mov	r2, r0
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	1ad3      	subs	r3, r2, r3
 800e484:	f247 522f 	movw	r2, #29999	; 0x752f
 800e488:	4293      	cmp	r3, r2
 800e48a:	d9ee      	bls.n	800e46a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3718      	adds	r7, #24
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	200008a8 	.word	0x200008a8

0800e49c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b086      	sub	sp, #24
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60b9      	str	r1, [r7, #8]
 800e4a4:	607a      	str	r2, [r7, #4]
 800e4a6:	603b      	str	r3, [r7, #0]
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e4b0:	4b24      	ldr	r3, [pc, #144]	; (800e544 <SD_write+0xa8>)
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4b6:	f247 5030 	movw	r0, #30000	; 0x7530
 800e4ba:	f7ff ff33 	bl	800e324 <SD_CheckStatusWithTimeout>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	da01      	bge.n	800e4c8 <SD_write+0x2c>
  {
    return res;
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
 800e4c6:	e038      	b.n	800e53a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e4c8:	683a      	ldr	r2, [r7, #0]
 800e4ca:	6879      	ldr	r1, [r7, #4]
 800e4cc:	68b8      	ldr	r0, [r7, #8]
 800e4ce:	f7ff fea1 	bl	800e214 <BSP_SD_WriteBlocks_DMA>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d12f      	bne.n	800e538 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e4d8:	f7fa f830 	bl	800853c <HAL_GetTick>
 800e4dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e4de:	bf00      	nop
 800e4e0:	4b18      	ldr	r3, [pc, #96]	; (800e544 <SD_write+0xa8>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d108      	bne.n	800e4fa <SD_write+0x5e>
 800e4e8:	f7fa f828 	bl	800853c <HAL_GetTick>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	f247 522f 	movw	r2, #29999	; 0x752f
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d9f2      	bls.n	800e4e0 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e4fa:	4b12      	ldr	r3, [pc, #72]	; (800e544 <SD_write+0xa8>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d102      	bne.n	800e508 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	75fb      	strb	r3, [r7, #23]
 800e506:	e017      	b.n	800e538 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e508:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <SD_write+0xa8>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e50e:	f7fa f815 	bl	800853c <HAL_GetTick>
 800e512:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e514:	e007      	b.n	800e526 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e516:	f7ff fe97 	bl	800e248 <BSP_SD_GetCardState>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <SD_write+0x8a>
          {
            res = RES_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	75fb      	strb	r3, [r7, #23]
            break;
 800e524:	e008      	b.n	800e538 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e526:	f7fa f809 	bl	800853c <HAL_GetTick>
 800e52a:	4602      	mov	r2, r0
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	1ad3      	subs	r3, r2, r3
 800e530:	f247 522f 	movw	r2, #29999	; 0x752f
 800e534:	4293      	cmp	r3, r2
 800e536:	d9ee      	bls.n	800e516 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e538:	7dfb      	ldrb	r3, [r7, #23]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	200008a4 	.word	0x200008a4

0800e548 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08c      	sub	sp, #48	; 0x30
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	4603      	mov	r3, r0
 800e550:	603a      	str	r2, [r7, #0]
 800e552:	71fb      	strb	r3, [r7, #7]
 800e554:	460b      	mov	r3, r1
 800e556:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e558:	2301      	movs	r3, #1
 800e55a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e55e:	4b25      	ldr	r3, [pc, #148]	; (800e5f4 <SD_ioctl+0xac>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	f003 0301 	and.w	r3, r3, #1
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d001      	beq.n	800e570 <SD_ioctl+0x28>
 800e56c:	2303      	movs	r3, #3
 800e56e:	e03c      	b.n	800e5ea <SD_ioctl+0xa2>

  switch (cmd)
 800e570:	79bb      	ldrb	r3, [r7, #6]
 800e572:	2b03      	cmp	r3, #3
 800e574:	d834      	bhi.n	800e5e0 <SD_ioctl+0x98>
 800e576:	a201      	add	r2, pc, #4	; (adr r2, 800e57c <SD_ioctl+0x34>)
 800e578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57c:	0800e58d 	.word	0x0800e58d
 800e580:	0800e595 	.word	0x0800e595
 800e584:	0800e5ad 	.word	0x0800e5ad
 800e588:	0800e5c7 	.word	0x0800e5c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e592:	e028      	b.n	800e5e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e594:	f107 030c 	add.w	r3, r7, #12
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff fe65 	bl	800e268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5aa:	e01c      	b.n	800e5e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5ac:	f107 030c 	add.w	r3, r7, #12
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff fe59 	bl	800e268 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5c4:	e00f      	b.n	800e5e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5c6:	f107 030c 	add.w	r3, r7, #12
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff fe4c 	bl	800e268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d2:	0a5a      	lsrs	r2, r3, #9
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5de:	e002      	b.n	800e5e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e5e0:	2304      	movs	r3, #4
 800e5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3730      	adds	r7, #48	; 0x30
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	200001a1 	.word	0x200001a1

0800e5f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e5fc:	4b03      	ldr	r3, [pc, #12]	; (800e60c <BSP_SD_WriteCpltCallback+0x14>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	601a      	str	r2, [r3, #0]
}
 800e602:	bf00      	nop
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	200008a4 	.word	0x200008a4

0800e610 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e610:	b480      	push	{r7}
 800e612:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e614:	4b03      	ldr	r3, [pc, #12]	; (800e624 <BSP_SD_ReadCpltCallback+0x14>)
 800e616:	2201      	movs	r2, #1
 800e618:	601a      	str	r2, [r3, #0]
}
 800e61a:	bf00      	nop
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr
 800e624:	200008a8 	.word	0x200008a8

0800e628 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	4603      	mov	r3, r0
 800e630:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e632:	79fb      	ldrb	r3, [r7, #7]
 800e634:	4a08      	ldr	r2, [pc, #32]	; (800e658 <disk_status+0x30>)
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	4413      	add	r3, r2
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	79fa      	ldrb	r2, [r7, #7]
 800e640:	4905      	ldr	r1, [pc, #20]	; (800e658 <disk_status+0x30>)
 800e642:	440a      	add	r2, r1
 800e644:	7a12      	ldrb	r2, [r2, #8]
 800e646:	4610      	mov	r0, r2
 800e648:	4798      	blx	r3
 800e64a:	4603      	mov	r3, r0
 800e64c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	200008d4 	.word	0x200008d4

0800e65c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	4603      	mov	r3, r0
 800e664:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e666:	2300      	movs	r3, #0
 800e668:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	4a0d      	ldr	r2, [pc, #52]	; (800e6a4 <disk_initialize+0x48>)
 800e66e:	5cd3      	ldrb	r3, [r2, r3]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d111      	bne.n	800e698 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	4a0b      	ldr	r2, [pc, #44]	; (800e6a4 <disk_initialize+0x48>)
 800e678:	2101      	movs	r1, #1
 800e67a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	4a09      	ldr	r2, [pc, #36]	; (800e6a4 <disk_initialize+0x48>)
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4413      	add	r3, r2
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	79fa      	ldrb	r2, [r7, #7]
 800e68a:	4906      	ldr	r1, [pc, #24]	; (800e6a4 <disk_initialize+0x48>)
 800e68c:	440a      	add	r2, r1
 800e68e:	7a12      	ldrb	r2, [r2, #8]
 800e690:	4610      	mov	r0, r2
 800e692:	4798      	blx	r3
 800e694:	4603      	mov	r3, r0
 800e696:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e698:	7bfb      	ldrb	r3, [r7, #15]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200008d4 	.word	0x200008d4

0800e6a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e6a8:	b590      	push	{r4, r7, lr}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60b9      	str	r1, [r7, #8]
 800e6b0:	607a      	str	r2, [r7, #4]
 800e6b2:	603b      	str	r3, [r7, #0]
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e6b8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ba:	4a0a      	ldr	r2, [pc, #40]	; (800e6e4 <disk_read+0x3c>)
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	4413      	add	r3, r2
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	689c      	ldr	r4, [r3, #8]
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
 800e6c6:	4a07      	ldr	r2, [pc, #28]	; (800e6e4 <disk_read+0x3c>)
 800e6c8:	4413      	add	r3, r2
 800e6ca:	7a18      	ldrb	r0, [r3, #8]
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	47a0      	blx	r4
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	371c      	adds	r7, #28
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd90      	pop	{r4, r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	200008d4 	.word	0x200008d4

0800e6e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e6e8:	b590      	push	{r4, r7, lr}
 800e6ea:	b087      	sub	sp, #28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60b9      	str	r1, [r7, #8]
 800e6f0:	607a      	str	r2, [r7, #4]
 800e6f2:	603b      	str	r3, [r7, #0]
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
 800e6fa:	4a0a      	ldr	r2, [pc, #40]	; (800e724 <disk_write+0x3c>)
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	68dc      	ldr	r4, [r3, #12]
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	4a07      	ldr	r2, [pc, #28]	; (800e724 <disk_write+0x3c>)
 800e708:	4413      	add	r3, r2
 800e70a:	7a18      	ldrb	r0, [r3, #8]
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	68b9      	ldr	r1, [r7, #8]
 800e712:	47a0      	blx	r4
 800e714:	4603      	mov	r3, r0
 800e716:	75fb      	strb	r3, [r7, #23]
  return res;
 800e718:	7dfb      	ldrb	r3, [r7, #23]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd90      	pop	{r4, r7, pc}
 800e722:	bf00      	nop
 800e724:	200008d4 	.word	0x200008d4

0800e728 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	603a      	str	r2, [r7, #0]
 800e732:	71fb      	strb	r3, [r7, #7]
 800e734:	460b      	mov	r3, r1
 800e736:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e738:	79fb      	ldrb	r3, [r7, #7]
 800e73a:	4a09      	ldr	r2, [pc, #36]	; (800e760 <disk_ioctl+0x38>)
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	79fa      	ldrb	r2, [r7, #7]
 800e746:	4906      	ldr	r1, [pc, #24]	; (800e760 <disk_ioctl+0x38>)
 800e748:	440a      	add	r2, r1
 800e74a:	7a10      	ldrb	r0, [r2, #8]
 800e74c:	79b9      	ldrb	r1, [r7, #6]
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	4798      	blx	r3
 800e752:	4603      	mov	r3, r0
 800e754:	73fb      	strb	r3, [r7, #15]
  return res;
 800e756:	7bfb      	ldrb	r3, [r7, #15]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	200008d4 	.word	0x200008d4

0800e764 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e764:	b480      	push	{r7}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	3301      	adds	r3, #1
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e774:	89fb      	ldrh	r3, [r7, #14]
 800e776:	021b      	lsls	r3, r3, #8
 800e778:	b21a      	sxth	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	b21b      	sxth	r3, r3
 800e780:	4313      	orrs	r3, r2
 800e782:	b21b      	sxth	r3, r3
 800e784:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e786:	89fb      	ldrh	r3, [r7, #14]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	3303      	adds	r3, #3
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	021b      	lsls	r3, r3, #8
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	3202      	adds	r2, #2
 800e7ac:	7812      	ldrb	r2, [r2, #0]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	021b      	lsls	r3, r3, #8
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	3201      	adds	r2, #1
 800e7ba:	7812      	ldrb	r2, [r2, #0]
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	021b      	lsls	r3, r3, #8
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	7812      	ldrb	r2, [r2, #0]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	60fb      	str	r3, [r7, #12]
	return rv;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3714      	adds	r7, #20
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr

0800e7da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e7da:	b480      	push	{r7}
 800e7dc:	b083      	sub	sp, #12
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	1c5a      	adds	r2, r3, #1
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	887a      	ldrh	r2, [r7, #2]
 800e7ee:	b2d2      	uxtb	r2, r2
 800e7f0:	701a      	strb	r2, [r3, #0]
 800e7f2:	887b      	ldrh	r3, [r7, #2]
 800e7f4:	0a1b      	lsrs	r3, r3, #8
 800e7f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	607a      	str	r2, [r7, #4]
 800e7fe:	887a      	ldrh	r2, [r7, #2]
 800e800:	b2d2      	uxtb	r2, r2
 800e802:	701a      	strb	r2, [r3, #0]
}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	683a      	ldr	r2, [r7, #0]
 800e822:	b2d2      	uxtb	r2, r2
 800e824:	701a      	strb	r2, [r3, #0]
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	0a1b      	lsrs	r3, r3, #8
 800e82a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	1c5a      	adds	r2, r3, #1
 800e830:	607a      	str	r2, [r7, #4]
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	b2d2      	uxtb	r2, r2
 800e836:	701a      	strb	r2, [r3, #0]
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	0a1b      	lsrs	r3, r3, #8
 800e83c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	1c5a      	adds	r2, r3, #1
 800e842:	607a      	str	r2, [r7, #4]
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	b2d2      	uxtb	r2, r2
 800e848:	701a      	strb	r2, [r3, #0]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	0a1b      	lsrs	r3, r3, #8
 800e84e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	1c5a      	adds	r2, r3, #1
 800e854:	607a      	str	r2, [r7, #4]
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	b2d2      	uxtb	r2, r2
 800e85a:	701a      	strb	r2, [r3, #0]
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e868:	b480      	push	{r7}
 800e86a:	b087      	sub	sp, #28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00d      	beq.n	800e89e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e882:	693a      	ldr	r2, [r7, #16]
 800e884:	1c53      	adds	r3, r2, #1
 800e886:	613b      	str	r3, [r7, #16]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	1c59      	adds	r1, r3, #1
 800e88c:	6179      	str	r1, [r7, #20]
 800e88e:	7812      	ldrb	r2, [r2, #0]
 800e890:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	3b01      	subs	r3, #1
 800e896:	607b      	str	r3, [r7, #4]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1f1      	bne.n	800e882 <mem_cpy+0x1a>
	}
}
 800e89e:	bf00      	nop
 800e8a0:	371c      	adds	r7, #28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e8aa:	b480      	push	{r7}
 800e8ac:	b087      	sub	sp, #28
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	617a      	str	r2, [r7, #20]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	b2d2      	uxtb	r2, r2
 800e8c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	607b      	str	r3, [r7, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1f3      	bne.n	800e8ba <mem_set+0x10>
}
 800e8d2:	bf00      	nop
 800e8d4:	371c      	adds	r7, #28
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr

0800e8de <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e8de:	b480      	push	{r7}
 800e8e0:	b089      	sub	sp, #36	; 0x24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	60b9      	str	r1, [r7, #8]
 800e8e8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	61fb      	str	r3, [r7, #28]
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	61fa      	str	r2, [r7, #28]
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	4619      	mov	r1, r3
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	61ba      	str	r2, [r7, #24]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	1acb      	subs	r3, r1, r3
 800e90a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	3b01      	subs	r3, #1
 800e910:	607b      	str	r3, [r7, #4]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d002      	beq.n	800e91e <mem_cmp+0x40>
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d0eb      	beq.n	800e8f6 <mem_cmp+0x18>

	return r;
 800e91e:	697b      	ldr	r3, [r7, #20]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3724      	adds	r7, #36	; 0x24
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e936:	e002      	b.n	800e93e <chk_chr+0x12>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	3301      	adds	r3, #1
 800e93c:	607b      	str	r3, [r7, #4]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d005      	beq.n	800e952 <chk_chr+0x26>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	461a      	mov	r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	4293      	cmp	r3, r2
 800e950:	d1f2      	bne.n	800e938 <chk_chr+0xc>
	return *str;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	781b      	ldrb	r3, [r3, #0]
}
 800e956:	4618      	mov	r0, r3
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
	...

0800e964 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e96e:	2300      	movs	r3, #0
 800e970:	60bb      	str	r3, [r7, #8]
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	60fb      	str	r3, [r7, #12]
 800e976:	e029      	b.n	800e9cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e978:	4a27      	ldr	r2, [pc, #156]	; (800ea18 <chk_lock+0xb4>)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	011b      	lsls	r3, r3, #4
 800e97e:	4413      	add	r3, r2
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d01d      	beq.n	800e9c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e986:	4a24      	ldr	r2, [pc, #144]	; (800ea18 <chk_lock+0xb4>)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	011b      	lsls	r3, r3, #4
 800e98c:	4413      	add	r3, r2
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	429a      	cmp	r2, r3
 800e996:	d116      	bne.n	800e9c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e998:	4a1f      	ldr	r2, [pc, #124]	; (800ea18 <chk_lock+0xb4>)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	011b      	lsls	r3, r3, #4
 800e99e:	4413      	add	r3, r2
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d10c      	bne.n	800e9c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e9ac:	4a1a      	ldr	r2, [pc, #104]	; (800ea18 <chk_lock+0xb4>)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	011b      	lsls	r3, r3, #4
 800e9b2:	4413      	add	r3, r2
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d102      	bne.n	800e9c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e9c0:	e007      	b.n	800e9d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	60fb      	str	r3, [r7, #12]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d9d2      	bls.n	800e978 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	d109      	bne.n	800e9ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <chk_lock+0x80>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d101      	bne.n	800e9e8 <chk_lock+0x84>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e010      	b.n	800ea0a <chk_lock+0xa6>
 800e9e8:	2312      	movs	r3, #18
 800e9ea:	e00e      	b.n	800ea0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d108      	bne.n	800ea04 <chk_lock+0xa0>
 800e9f2:	4a09      	ldr	r2, [pc, #36]	; (800ea18 <chk_lock+0xb4>)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	011b      	lsls	r3, r3, #4
 800e9f8:	4413      	add	r3, r2
 800e9fa:	330c      	adds	r3, #12
 800e9fc:	881b      	ldrh	r3, [r3, #0]
 800e9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea02:	d101      	bne.n	800ea08 <chk_lock+0xa4>
 800ea04:	2310      	movs	r3, #16
 800ea06:	e000      	b.n	800ea0a <chk_lock+0xa6>
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3714      	adds	r7, #20
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	200008b4 	.word	0x200008b4

0800ea1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea22:	2300      	movs	r3, #0
 800ea24:	607b      	str	r3, [r7, #4]
 800ea26:	e002      	b.n	800ea2e <enq_lock+0x12>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	607b      	str	r3, [r7, #4]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d806      	bhi.n	800ea42 <enq_lock+0x26>
 800ea34:	4a09      	ldr	r2, [pc, #36]	; (800ea5c <enq_lock+0x40>)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	011b      	lsls	r3, r3, #4
 800ea3a:	4413      	add	r3, r2
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1f2      	bne.n	800ea28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	bf14      	ite	ne
 800ea48:	2301      	movne	r3, #1
 800ea4a:	2300      	moveq	r3, #0
 800ea4c:	b2db      	uxtb	r3, r3
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	370c      	adds	r7, #12
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop
 800ea5c:	200008b4 	.word	0x200008b4

0800ea60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	60fb      	str	r3, [r7, #12]
 800ea6e:	e01f      	b.n	800eab0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ea70:	4a41      	ldr	r2, [pc, #260]	; (800eb78 <inc_lock+0x118>)
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	011b      	lsls	r3, r3, #4
 800ea76:	4413      	add	r3, r2
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d113      	bne.n	800eaaa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ea82:	4a3d      	ldr	r2, [pc, #244]	; (800eb78 <inc_lock+0x118>)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	011b      	lsls	r3, r3, #4
 800ea88:	4413      	add	r3, r2
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d109      	bne.n	800eaaa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ea96:	4a38      	ldr	r2, [pc, #224]	; (800eb78 <inc_lock+0x118>)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	011b      	lsls	r3, r3, #4
 800ea9c:	4413      	add	r3, r2
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d006      	beq.n	800eab8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	3301      	adds	r3, #1
 800eaae:	60fb      	str	r3, [r7, #12]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d9dc      	bls.n	800ea70 <inc_lock+0x10>
 800eab6:	e000      	b.n	800eaba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eab8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d132      	bne.n	800eb26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eac0:	2300      	movs	r3, #0
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	e002      	b.n	800eacc <inc_lock+0x6c>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	3301      	adds	r3, #1
 800eaca:	60fb      	str	r3, [r7, #12]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d806      	bhi.n	800eae0 <inc_lock+0x80>
 800ead2:	4a29      	ldr	r2, [pc, #164]	; (800eb78 <inc_lock+0x118>)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	011b      	lsls	r3, r3, #4
 800ead8:	4413      	add	r3, r2
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1f2      	bne.n	800eac6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2b02      	cmp	r3, #2
 800eae4:	d101      	bne.n	800eaea <inc_lock+0x8a>
 800eae6:	2300      	movs	r3, #0
 800eae8:	e040      	b.n	800eb6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	4922      	ldr	r1, [pc, #136]	; (800eb78 <inc_lock+0x118>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	011b      	lsls	r3, r3, #4
 800eaf4:	440b      	add	r3, r1
 800eaf6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	689a      	ldr	r2, [r3, #8]
 800eafc:	491e      	ldr	r1, [pc, #120]	; (800eb78 <inc_lock+0x118>)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	011b      	lsls	r3, r3, #4
 800eb02:	440b      	add	r3, r1
 800eb04:	3304      	adds	r3, #4
 800eb06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	695a      	ldr	r2, [r3, #20]
 800eb0c:	491a      	ldr	r1, [pc, #104]	; (800eb78 <inc_lock+0x118>)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	011b      	lsls	r3, r3, #4
 800eb12:	440b      	add	r3, r1
 800eb14:	3308      	adds	r3, #8
 800eb16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eb18:	4a17      	ldr	r2, [pc, #92]	; (800eb78 <inc_lock+0x118>)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	011b      	lsls	r3, r3, #4
 800eb1e:	4413      	add	r3, r2
 800eb20:	330c      	adds	r3, #12
 800eb22:	2200      	movs	r2, #0
 800eb24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d009      	beq.n	800eb40 <inc_lock+0xe0>
 800eb2c:	4a12      	ldr	r2, [pc, #72]	; (800eb78 <inc_lock+0x118>)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	011b      	lsls	r3, r3, #4
 800eb32:	4413      	add	r3, r2
 800eb34:	330c      	adds	r3, #12
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <inc_lock+0xe0>
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e015      	b.n	800eb6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d108      	bne.n	800eb58 <inc_lock+0xf8>
 800eb46:	4a0c      	ldr	r2, [pc, #48]	; (800eb78 <inc_lock+0x118>)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	011b      	lsls	r3, r3, #4
 800eb4c:	4413      	add	r3, r2
 800eb4e:	330c      	adds	r3, #12
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	3301      	adds	r3, #1
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	e001      	b.n	800eb5c <inc_lock+0xfc>
 800eb58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb5c:	4906      	ldr	r1, [pc, #24]	; (800eb78 <inc_lock+0x118>)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	011b      	lsls	r3, r3, #4
 800eb62:	440b      	add	r3, r1
 800eb64:	330c      	adds	r3, #12
 800eb66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	3301      	adds	r3, #1
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3714      	adds	r7, #20
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	200008b4 	.word	0x200008b4

0800eb7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3b01      	subs	r3, #1
 800eb88:	607b      	str	r3, [r7, #4]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d825      	bhi.n	800ebdc <dec_lock+0x60>
		n = Files[i].ctr;
 800eb90:	4a17      	ldr	r2, [pc, #92]	; (800ebf0 <dec_lock+0x74>)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	4413      	add	r3, r2
 800eb98:	330c      	adds	r3, #12
 800eb9a:	881b      	ldrh	r3, [r3, #0]
 800eb9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800eb9e:	89fb      	ldrh	r3, [r7, #14]
 800eba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eba4:	d101      	bne.n	800ebaa <dec_lock+0x2e>
 800eba6:	2300      	movs	r3, #0
 800eba8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ebaa:	89fb      	ldrh	r3, [r7, #14]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d002      	beq.n	800ebb6 <dec_lock+0x3a>
 800ebb0:	89fb      	ldrh	r3, [r7, #14]
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ebb6:	4a0e      	ldr	r2, [pc, #56]	; (800ebf0 <dec_lock+0x74>)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	011b      	lsls	r3, r3, #4
 800ebbc:	4413      	add	r3, r2
 800ebbe:	330c      	adds	r3, #12
 800ebc0:	89fa      	ldrh	r2, [r7, #14]
 800ebc2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ebc4:	89fb      	ldrh	r3, [r7, #14]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d105      	bne.n	800ebd6 <dec_lock+0x5a>
 800ebca:	4a09      	ldr	r2, [pc, #36]	; (800ebf0 <dec_lock+0x74>)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	011b      	lsls	r3, r3, #4
 800ebd0:	4413      	add	r3, r2
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	737b      	strb	r3, [r7, #13]
 800ebda:	e001      	b.n	800ebe0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ebdc:	2302      	movs	r3, #2
 800ebde:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ebe0:	7b7b      	ldrb	r3, [r7, #13]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	200008b4 	.word	0x200008b4

0800ebf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	e010      	b.n	800ec24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ec02:	4a0d      	ldr	r2, [pc, #52]	; (800ec38 <clear_lock+0x44>)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	011b      	lsls	r3, r3, #4
 800ec08:	4413      	add	r3, r2
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d105      	bne.n	800ec1e <clear_lock+0x2a>
 800ec12:	4a09      	ldr	r2, [pc, #36]	; (800ec38 <clear_lock+0x44>)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	011b      	lsls	r3, r3, #4
 800ec18:	4413      	add	r3, r2
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3301      	adds	r3, #1
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d9eb      	bls.n	800ec02 <clear_lock+0xe>
	}
}
 800ec2a:	bf00      	nop
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	200008b4 	.word	0x200008b4

0800ec3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	78db      	ldrb	r3, [r3, #3]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d034      	beq.n	800ecba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	7858      	ldrb	r0, [r3, #1]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ec60:	2301      	movs	r3, #1
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	f7ff fd40 	bl	800e6e8 <disk_write>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d002      	beq.n	800ec74 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	73fb      	strb	r3, [r7, #15]
 800ec72:	e022      	b.n	800ecba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	697a      	ldr	r2, [r7, #20]
 800ec80:	1ad2      	subs	r2, r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	69db      	ldr	r3, [r3, #28]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d217      	bcs.n	800ecba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	789b      	ldrb	r3, [r3, #2]
 800ec8e:	613b      	str	r3, [r7, #16]
 800ec90:	e010      	b.n	800ecb4 <sync_window+0x78>
					wsect += fs->fsize;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	69db      	ldr	r3, [r3, #28]
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	4413      	add	r3, r2
 800ec9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	7858      	ldrb	r0, [r3, #1]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800eca6:	2301      	movs	r3, #1
 800eca8:	697a      	ldr	r2, [r7, #20]
 800ecaa:	f7ff fd1d 	bl	800e6e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	613b      	str	r3, [r7, #16]
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d8eb      	bhi.n	800ec92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3718      	adds	r7, #24
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d01b      	beq.n	800ed14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff ffad 	bl	800ec3c <sync_window>
 800ece2:	4603      	mov	r3, r0
 800ece4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d113      	bne.n	800ed14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	7858      	ldrb	r0, [r3, #1]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	f7ff fcd5 	bl	800e6a8 <disk_read>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d004      	beq.n	800ed0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ed04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ed14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
	...

0800ed20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7ff ff87 	bl	800ec3c <sync_window>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ed32:	7bfb      	ldrb	r3, [r7, #15]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d159      	bne.n	800edec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b03      	cmp	r3, #3
 800ed3e:	d149      	bne.n	800edd4 <sync_fs+0xb4>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	791b      	ldrb	r3, [r3, #4]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d145      	bne.n	800edd4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	899b      	ldrh	r3, [r3, #12]
 800ed52:	461a      	mov	r2, r3
 800ed54:	2100      	movs	r1, #0
 800ed56:	f7ff fda8 	bl	800e8aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	3334      	adds	r3, #52	; 0x34
 800ed5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed62:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7ff fd37 	bl	800e7da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3334      	adds	r3, #52	; 0x34
 800ed70:	4921      	ldr	r1, [pc, #132]	; (800edf8 <sync_fs+0xd8>)
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7ff fd4c 	bl	800e810 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3334      	adds	r3, #52	; 0x34
 800ed7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ed80:	491e      	ldr	r1, [pc, #120]	; (800edfc <sync_fs+0xdc>)
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7ff fd44 	bl	800e810 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3334      	adds	r3, #52	; 0x34
 800ed8c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	4619      	mov	r1, r3
 800ed96:	4610      	mov	r0, r2
 800ed98:	f7ff fd3a 	bl	800e810 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	3334      	adds	r3, #52	; 0x34
 800eda0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	4619      	mov	r1, r3
 800edaa:	4610      	mov	r0, r2
 800edac:	f7ff fd30 	bl	800e810 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a1b      	ldr	r3, [r3, #32]
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	7858      	ldrb	r0, [r3, #1]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edc8:	2301      	movs	r3, #1
 800edca:	f7ff fc8d 	bl	800e6e8 <disk_write>
			fs->fsi_flag = 0;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	785b      	ldrb	r3, [r3, #1]
 800edd8:	2200      	movs	r2, #0
 800edda:	2100      	movs	r1, #0
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff fca3 	bl	800e728 <disk_ioctl>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <sync_fs+0xcc>
 800ede8:	2301      	movs	r3, #1
 800edea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800edec:	7bfb      	ldrb	r3, [r7, #15]
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	41615252 	.word	0x41615252
 800edfc:	61417272 	.word	0x61417272

0800ee00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	3b02      	subs	r3, #2
 800ee0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	699b      	ldr	r3, [r3, #24]
 800ee14:	3b02      	subs	r3, #2
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d301      	bcc.n	800ee20 <clust2sect+0x20>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	e008      	b.n	800ee32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	895b      	ldrh	r3, [r3, #10]
 800ee24:	461a      	mov	r2, r3
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	fb03 f202 	mul.w	r2, r3, r2
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee30:	4413      	add	r3, r2
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b086      	sub	sp, #24
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d904      	bls.n	800ee5e <get_fat+0x20>
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d302      	bcc.n	800ee64 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ee5e:	2301      	movs	r3, #1
 800ee60:	617b      	str	r3, [r7, #20]
 800ee62:	e0b7      	b.n	800efd4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ee64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d05a      	beq.n	800ef28 <get_fat+0xea>
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d07d      	beq.n	800ef72 <get_fat+0x134>
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	f040 80a2 	bne.w	800efc0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	085b      	lsrs	r3, r3, #1
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	4413      	add	r3, r2
 800ee88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	899b      	ldrh	r3, [r3, #12]
 800ee92:	4619      	mov	r1, r3
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee9a:	4413      	add	r3, r2
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6938      	ldr	r0, [r7, #16]
 800eea0:	f7ff ff10 	bl	800ecc4 <move_window>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f040 808d 	bne.w	800efc6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	1c5a      	adds	r2, r3, #1
 800eeb0:	60fa      	str	r2, [r7, #12]
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	8992      	ldrh	r2, [r2, #12]
 800eeb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800eeba:	fb02 f201 	mul.w	r2, r2, r1
 800eebe:	1a9b      	subs	r3, r3, r2
 800eec0:	693a      	ldr	r2, [r7, #16]
 800eec2:	4413      	add	r3, r2
 800eec4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eec8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	899b      	ldrh	r3, [r3, #12]
 800eed2:	4619      	mov	r1, r3
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	fbb3 f3f1 	udiv	r3, r3, r1
 800eeda:	4413      	add	r3, r2
 800eedc:	4619      	mov	r1, r3
 800eede:	6938      	ldr	r0, [r7, #16]
 800eee0:	f7ff fef0 	bl	800ecc4 <move_window>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d16f      	bne.n	800efca <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	899b      	ldrh	r3, [r3, #12]
 800eeee:	461a      	mov	r2, r3
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	fbb3 f1f2 	udiv	r1, r3, r2
 800eef6:	fb02 f201 	mul.w	r2, r2, r1
 800eefa:	1a9b      	subs	r3, r3, r2
 800eefc:	693a      	ldr	r2, [r7, #16]
 800eefe:	4413      	add	r3, r2
 800ef00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef04:	021b      	lsls	r3, r3, #8
 800ef06:	461a      	mov	r2, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <get_fat+0xe0>
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	091b      	lsrs	r3, r3, #4
 800ef1c:	e002      	b.n	800ef24 <get_fat+0xe6>
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef24:	617b      	str	r3, [r7, #20]
			break;
 800ef26:	e055      	b.n	800efd4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	899b      	ldrh	r3, [r3, #12]
 800ef30:	085b      	lsrs	r3, r3, #1
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	4619      	mov	r1, r3
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef3c:	4413      	add	r3, r2
 800ef3e:	4619      	mov	r1, r3
 800ef40:	6938      	ldr	r0, [r7, #16]
 800ef42:	f7ff febf 	bl	800ecc4 <move_window>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d140      	bne.n	800efce <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	8992      	ldrh	r2, [r2, #12]
 800ef5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef5e:	fb02 f200 	mul.w	r2, r2, r0
 800ef62:	1a9b      	subs	r3, r3, r2
 800ef64:	440b      	add	r3, r1
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff fbfc 	bl	800e764 <ld_word>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	617b      	str	r3, [r7, #20]
			break;
 800ef70:	e030      	b.n	800efd4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	899b      	ldrh	r3, [r3, #12]
 800ef7a:	089b      	lsrs	r3, r3, #2
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	4619      	mov	r1, r3
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef86:	4413      	add	r3, r2
 800ef88:	4619      	mov	r1, r3
 800ef8a:	6938      	ldr	r0, [r7, #16]
 800ef8c:	f7ff fe9a 	bl	800ecc4 <move_window>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d11d      	bne.n	800efd2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	8992      	ldrh	r2, [r2, #12]
 800efa4:	fbb3 f0f2 	udiv	r0, r3, r2
 800efa8:	fb02 f200 	mul.w	r2, r2, r0
 800efac:	1a9b      	subs	r3, r3, r2
 800efae:	440b      	add	r3, r1
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff fbef 	bl	800e794 <ld_dword>
 800efb6:	4603      	mov	r3, r0
 800efb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800efbc:	617b      	str	r3, [r7, #20]
			break;
 800efbe:	e009      	b.n	800efd4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800efc0:	2301      	movs	r3, #1
 800efc2:	617b      	str	r3, [r7, #20]
 800efc4:	e006      	b.n	800efd4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efc6:	bf00      	nop
 800efc8:	e004      	b.n	800efd4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efca:	bf00      	nop
 800efcc:	e002      	b.n	800efd4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800efce:	bf00      	nop
 800efd0:	e000      	b.n	800efd4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efd2:	bf00      	nop
		}
	}

	return val;
 800efd4:	697b      	ldr	r3, [r7, #20]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3718      	adds	r7, #24
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800efde:	b590      	push	{r4, r7, lr}
 800efe0:	b089      	sub	sp, #36	; 0x24
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	60f8      	str	r0, [r7, #12]
 800efe6:	60b9      	str	r1, [r7, #8]
 800efe8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800efea:	2302      	movs	r3, #2
 800efec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	f240 8106 	bls.w	800f202 <put_fat+0x224>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	429a      	cmp	r2, r3
 800effe:	f080 8100 	bcs.w	800f202 <put_fat+0x224>
		switch (fs->fs_type) {
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	2b02      	cmp	r3, #2
 800f008:	f000 8088 	beq.w	800f11c <put_fat+0x13e>
 800f00c:	2b03      	cmp	r3, #3
 800f00e:	f000 80b0 	beq.w	800f172 <put_fat+0x194>
 800f012:	2b01      	cmp	r3, #1
 800f014:	f040 80f5 	bne.w	800f202 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	61bb      	str	r3, [r7, #24]
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	085b      	lsrs	r3, r3, #1
 800f020:	69ba      	ldr	r2, [r7, #24]
 800f022:	4413      	add	r3, r2
 800f024:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	899b      	ldrh	r3, [r3, #12]
 800f02e:	4619      	mov	r1, r3
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	fbb3 f3f1 	udiv	r3, r3, r1
 800f036:	4413      	add	r3, r2
 800f038:	4619      	mov	r1, r3
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f7ff fe42 	bl	800ecc4 <move_window>
 800f040:	4603      	mov	r3, r0
 800f042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f044:	7ffb      	ldrb	r3, [r7, #31]
 800f046:	2b00      	cmp	r3, #0
 800f048:	f040 80d4 	bne.w	800f1f4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	61ba      	str	r2, [r7, #24]
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	8992      	ldrh	r2, [r2, #12]
 800f05c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f060:	fb02 f200 	mul.w	r2, r2, r0
 800f064:	1a9b      	subs	r3, r3, r2
 800f066:	440b      	add	r3, r1
 800f068:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	2b00      	cmp	r3, #0
 800f072:	d00d      	beq.n	800f090 <put_fat+0xb2>
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	b25b      	sxtb	r3, r3
 800f07a:	f003 030f 	and.w	r3, r3, #15
 800f07e:	b25a      	sxtb	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	011b      	lsls	r3, r3, #4
 800f086:	b25b      	sxtb	r3, r3
 800f088:	4313      	orrs	r3, r2
 800f08a:	b25b      	sxtb	r3, r3
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	e001      	b.n	800f094 <put_fat+0xb6>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	b2db      	uxtb	r3, r3
 800f094:	697a      	ldr	r2, [r7, #20]
 800f096:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2201      	movs	r2, #1
 800f09c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	899b      	ldrh	r3, [r3, #12]
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0ae:	4413      	add	r3, r2
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f7ff fe06 	bl	800ecc4 <move_window>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0bc:	7ffb      	ldrb	r3, [r7, #31]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	f040 809a 	bne.w	800f1f8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	899b      	ldrh	r3, [r3, #12]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0d6:	fb02 f200 	mul.w	r2, r2, r0
 800f0da:	1a9b      	subs	r3, r3, r2
 800f0dc:	440b      	add	r3, r1
 800f0de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	f003 0301 	and.w	r3, r3, #1
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <put_fat+0x114>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	091b      	lsrs	r3, r3, #4
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	e00e      	b.n	800f110 <put_fat+0x132>
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	b25b      	sxtb	r3, r3
 800f0f8:	f023 030f 	bic.w	r3, r3, #15
 800f0fc:	b25a      	sxtb	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	0a1b      	lsrs	r3, r3, #8
 800f102:	b25b      	sxtb	r3, r3
 800f104:	f003 030f 	and.w	r3, r3, #15
 800f108:	b25b      	sxtb	r3, r3
 800f10a:	4313      	orrs	r3, r2
 800f10c:	b25b      	sxtb	r3, r3
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	697a      	ldr	r2, [r7, #20]
 800f112:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2201      	movs	r2, #1
 800f118:	70da      	strb	r2, [r3, #3]
			break;
 800f11a:	e072      	b.n	800f202 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	899b      	ldrh	r3, [r3, #12]
 800f124:	085b      	lsrs	r3, r3, #1
 800f126:	b29b      	uxth	r3, r3
 800f128:	4619      	mov	r1, r3
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f130:	4413      	add	r3, r2
 800f132:	4619      	mov	r1, r3
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f7ff fdc5 	bl	800ecc4 <move_window>
 800f13a:	4603      	mov	r3, r0
 800f13c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f13e:	7ffb      	ldrb	r3, [r7, #31]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d15b      	bne.n	800f1fc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	005b      	lsls	r3, r3, #1
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	8992      	ldrh	r2, [r2, #12]
 800f152:	fbb3 f0f2 	udiv	r0, r3, r2
 800f156:	fb02 f200 	mul.w	r2, r2, r0
 800f15a:	1a9b      	subs	r3, r3, r2
 800f15c:	440b      	add	r3, r1
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	b292      	uxth	r2, r2
 800f162:	4611      	mov	r1, r2
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff fb38 	bl	800e7da <st_word>
			fs->wflag = 1;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2201      	movs	r2, #1
 800f16e:	70da      	strb	r2, [r3, #3]
			break;
 800f170:	e047      	b.n	800f202 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	899b      	ldrh	r3, [r3, #12]
 800f17a:	089b      	lsrs	r3, r3, #2
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	4619      	mov	r1, r3
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	fbb3 f3f1 	udiv	r3, r3, r1
 800f186:	4413      	add	r3, r2
 800f188:	4619      	mov	r1, r3
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f7ff fd9a 	bl	800ecc4 <move_window>
 800f190:	4603      	mov	r3, r0
 800f192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f194:	7ffb      	ldrb	r3, [r7, #31]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d132      	bne.n	800f200 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	68fa      	ldr	r2, [r7, #12]
 800f1ac:	8992      	ldrh	r2, [r2, #12]
 800f1ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1b2:	fb02 f200 	mul.w	r2, r2, r0
 800f1b6:	1a9b      	subs	r3, r3, r2
 800f1b8:	440b      	add	r3, r1
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff faea 	bl	800e794 <ld_dword>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f1c6:	4323      	orrs	r3, r4
 800f1c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	8992      	ldrh	r2, [r2, #12]
 800f1d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1dc:	fb02 f200 	mul.w	r2, r2, r0
 800f1e0:	1a9b      	subs	r3, r3, r2
 800f1e2:	440b      	add	r3, r1
 800f1e4:	6879      	ldr	r1, [r7, #4]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7ff fb12 	bl	800e810 <st_dword>
			fs->wflag = 1;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	70da      	strb	r2, [r3, #3]
			break;
 800f1f2:	e006      	b.n	800f202 <put_fat+0x224>
			if (res != FR_OK) break;
 800f1f4:	bf00      	nop
 800f1f6:	e004      	b.n	800f202 <put_fat+0x224>
			if (res != FR_OK) break;
 800f1f8:	bf00      	nop
 800f1fa:	e002      	b.n	800f202 <put_fat+0x224>
			if (res != FR_OK) break;
 800f1fc:	bf00      	nop
 800f1fe:	e000      	b.n	800f202 <put_fat+0x224>
			if (res != FR_OK) break;
 800f200:	bf00      	nop
		}
	}
	return res;
 800f202:	7ffb      	ldrb	r3, [r7, #31]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3724      	adds	r7, #36	; 0x24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd90      	pop	{r4, r7, pc}

0800f20c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d904      	bls.n	800f232 <remove_chain+0x26>
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	699b      	ldr	r3, [r3, #24]
 800f22c:	68ba      	ldr	r2, [r7, #8]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d301      	bcc.n	800f236 <remove_chain+0x2a>
 800f232:	2302      	movs	r3, #2
 800f234:	e04b      	b.n	800f2ce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00c      	beq.n	800f256 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f23c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f240:	6879      	ldr	r1, [r7, #4]
 800f242:	69b8      	ldr	r0, [r7, #24]
 800f244:	f7ff fecb 	bl	800efde <put_fat>
 800f248:	4603      	mov	r3, r0
 800f24a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f24c:	7ffb      	ldrb	r3, [r7, #31]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <remove_chain+0x4a>
 800f252:	7ffb      	ldrb	r3, [r7, #31]
 800f254:	e03b      	b.n	800f2ce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f256:	68b9      	ldr	r1, [r7, #8]
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f7ff fdf0 	bl	800ee3e <get_fat>
 800f25e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d031      	beq.n	800f2ca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d101      	bne.n	800f270 <remove_chain+0x64>
 800f26c:	2302      	movs	r3, #2
 800f26e:	e02e      	b.n	800f2ce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f276:	d101      	bne.n	800f27c <remove_chain+0x70>
 800f278:	2301      	movs	r3, #1
 800f27a:	e028      	b.n	800f2ce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f27c:	2200      	movs	r2, #0
 800f27e:	68b9      	ldr	r1, [r7, #8]
 800f280:	69b8      	ldr	r0, [r7, #24]
 800f282:	f7ff feac 	bl	800efde <put_fat>
 800f286:	4603      	mov	r3, r0
 800f288:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f28a:	7ffb      	ldrb	r3, [r7, #31]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <remove_chain+0x88>
 800f290:	7ffb      	ldrb	r3, [r7, #31]
 800f292:	e01c      	b.n	800f2ce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	695a      	ldr	r2, [r3, #20]
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	3b02      	subs	r3, #2
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d20b      	bcs.n	800f2ba <remove_chain+0xae>
			fs->free_clst++;
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	695b      	ldr	r3, [r3, #20]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	791b      	ldrb	r3, [r3, #4]
 800f2b0:	f043 0301 	orr.w	r3, r3, #1
 800f2b4:	b2da      	uxtb	r2, r3
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	699b      	ldr	r3, [r3, #24]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d3c6      	bcc.n	800f256 <remove_chain+0x4a>
 800f2c8:	e000      	b.n	800f2cc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f2ca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3720      	adds	r7, #32
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b088      	sub	sp, #32
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10d      	bne.n	800f308 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d004      	beq.n	800f302 <create_chain+0x2c>
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	699b      	ldr	r3, [r3, #24]
 800f2fc:	69ba      	ldr	r2, [r7, #24]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d31b      	bcc.n	800f33a <create_chain+0x64>
 800f302:	2301      	movs	r3, #1
 800f304:	61bb      	str	r3, [r7, #24]
 800f306:	e018      	b.n	800f33a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff fd97 	bl	800ee3e <get_fat>
 800f310:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d801      	bhi.n	800f31c <create_chain+0x46>
 800f318:	2301      	movs	r3, #1
 800f31a:	e070      	b.n	800f3fe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f322:	d101      	bne.n	800f328 <create_chain+0x52>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	e06a      	b.n	800f3fe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d201      	bcs.n	800f336 <create_chain+0x60>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	e063      	b.n	800f3fe <create_chain+0x128>
		scl = clst;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	3301      	adds	r3, #1
 800f342:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	699b      	ldr	r3, [r3, #24]
 800f348:	69fa      	ldr	r2, [r7, #28]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d307      	bcc.n	800f35e <create_chain+0x88>
				ncl = 2;
 800f34e:	2302      	movs	r3, #2
 800f350:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f352:	69fa      	ldr	r2, [r7, #28]
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	429a      	cmp	r2, r3
 800f358:	d901      	bls.n	800f35e <create_chain+0x88>
 800f35a:	2300      	movs	r3, #0
 800f35c:	e04f      	b.n	800f3fe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f35e:	69f9      	ldr	r1, [r7, #28]
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff fd6c 	bl	800ee3e <get_fat>
 800f366:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00e      	beq.n	800f38c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d003      	beq.n	800f37c <create_chain+0xa6>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f37a:	d101      	bne.n	800f380 <create_chain+0xaa>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	e03e      	b.n	800f3fe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f380:	69fa      	ldr	r2, [r7, #28]
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	429a      	cmp	r2, r3
 800f386:	d1da      	bne.n	800f33e <create_chain+0x68>
 800f388:	2300      	movs	r3, #0
 800f38a:	e038      	b.n	800f3fe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f38c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f38e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f392:	69f9      	ldr	r1, [r7, #28]
 800f394:	6938      	ldr	r0, [r7, #16]
 800f396:	f7ff fe22 	bl	800efde <put_fat>
 800f39a:	4603      	mov	r3, r0
 800f39c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f39e:	7dfb      	ldrb	r3, [r7, #23]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d109      	bne.n	800f3b8 <create_chain+0xe2>
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d006      	beq.n	800f3b8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f3aa:	69fa      	ldr	r2, [r7, #28]
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	6938      	ldr	r0, [r7, #16]
 800f3b0:	f7ff fe15 	bl	800efde <put_fat>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d116      	bne.n	800f3ec <create_chain+0x116>
		fs->last_clst = ncl;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	69fa      	ldr	r2, [r7, #28]
 800f3c2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	695a      	ldr	r2, [r3, #20]
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	699b      	ldr	r3, [r3, #24]
 800f3cc:	3b02      	subs	r3, #2
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d804      	bhi.n	800f3dc <create_chain+0x106>
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	1e5a      	subs	r2, r3, #1
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	791b      	ldrb	r3, [r3, #4]
 800f3e0:	f043 0301 	orr.w	r3, r3, #1
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	711a      	strb	r2, [r3, #4]
 800f3ea:	e007      	b.n	800f3fc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d102      	bne.n	800f3f8 <create_chain+0x122>
 800f3f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3f6:	e000      	b.n	800f3fa <create_chain+0x124>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f3fc:	69fb      	ldr	r3, [r7, #28]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3720      	adds	r7, #32
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f406:	b480      	push	{r7}
 800f408:	b087      	sub	sp, #28
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f41a:	3304      	adds	r3, #4
 800f41c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	899b      	ldrh	r3, [r3, #12]
 800f422:	461a      	mov	r2, r3
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	fbb3 f3f2 	udiv	r3, r3, r2
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	8952      	ldrh	r2, [r2, #10]
 800f42e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f432:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	1d1a      	adds	r2, r3, #4
 800f438:	613a      	str	r2, [r7, #16]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <clmt_clust+0x42>
 800f444:	2300      	movs	r3, #0
 800f446:	e010      	b.n	800f46a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d307      	bcc.n	800f460 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	617b      	str	r3, [r7, #20]
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	3304      	adds	r3, #4
 800f45c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f45e:	e7e9      	b.n	800f434 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f460:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	4413      	add	r3, r2
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	371c      	adds	r7, #28
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr

0800f476 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b086      	sub	sp, #24
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f48c:	d204      	bcs.n	800f498 <dir_sdi+0x22>
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	f003 031f 	and.w	r3, r3, #31
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <dir_sdi+0x26>
		return FR_INT_ERR;
 800f498:	2302      	movs	r3, #2
 800f49a:	e071      	b.n	800f580 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	683a      	ldr	r2, [r7, #0]
 800f4a0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d106      	bne.n	800f4bc <dir_sdi+0x46>
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	2b02      	cmp	r3, #2
 800f4b4:	d902      	bls.n	800f4bc <dir_sdi+0x46>
		clst = fs->dirbase;
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4ba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d10c      	bne.n	800f4dc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	095b      	lsrs	r3, r3, #5
 800f4c6:	693a      	ldr	r2, [r7, #16]
 800f4c8:	8912      	ldrh	r2, [r2, #8]
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d301      	bcc.n	800f4d2 <dir_sdi+0x5c>
 800f4ce:	2302      	movs	r3, #2
 800f4d0:	e056      	b.n	800f580 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	61da      	str	r2, [r3, #28]
 800f4da:	e02d      	b.n	800f538 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	895b      	ldrh	r3, [r3, #10]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	899b      	ldrh	r3, [r3, #12]
 800f4e6:	fb03 f302 	mul.w	r3, r3, r2
 800f4ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f4ec:	e019      	b.n	800f522 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6979      	ldr	r1, [r7, #20]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff fca3 	bl	800ee3e <get_fat>
 800f4f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f500:	d101      	bne.n	800f506 <dir_sdi+0x90>
 800f502:	2301      	movs	r3, #1
 800f504:	e03c      	b.n	800f580 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d904      	bls.n	800f516 <dir_sdi+0xa0>
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	429a      	cmp	r2, r3
 800f514:	d301      	bcc.n	800f51a <dir_sdi+0xa4>
 800f516:	2302      	movs	r3, #2
 800f518:	e032      	b.n	800f580 <dir_sdi+0x10a>
			ofs -= csz;
 800f51a:	683a      	ldr	r2, [r7, #0]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f522:	683a      	ldr	r2, [r7, #0]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	429a      	cmp	r2, r3
 800f528:	d2e1      	bcs.n	800f4ee <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f52a:	6979      	ldr	r1, [r7, #20]
 800f52c:	6938      	ldr	r0, [r7, #16]
 800f52e:	f7ff fc67 	bl	800ee00 <clust2sect>
 800f532:	4602      	mov	r2, r0
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	697a      	ldr	r2, [r7, #20]
 800f53c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	69db      	ldr	r3, [r3, #28]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d101      	bne.n	800f54a <dir_sdi+0xd4>
 800f546:	2302      	movs	r3, #2
 800f548:	e01a      	b.n	800f580 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	69da      	ldr	r2, [r3, #28]
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	899b      	ldrh	r3, [r3, #12]
 800f552:	4619      	mov	r1, r3
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	fbb3 f3f1 	udiv	r3, r3, r1
 800f55a:	441a      	add	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	899b      	ldrh	r3, [r3, #12]
 800f56a:	461a      	mov	r2, r3
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f572:	fb02 f200 	mul.w	r2, r2, r0
 800f576:	1a9b      	subs	r3, r3, r2
 800f578:	18ca      	adds	r2, r1, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f57e:	2300      	movs	r3, #0
}
 800f580:	4618      	mov	r0, r3
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	695b      	ldr	r3, [r3, #20]
 800f59c:	3320      	adds	r3, #32
 800f59e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	69db      	ldr	r3, [r3, #28]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d003      	beq.n	800f5b0 <dir_next+0x28>
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f5ae:	d301      	bcc.n	800f5b4 <dir_next+0x2c>
 800f5b0:	2304      	movs	r3, #4
 800f5b2:	e0bb      	b.n	800f72c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	899b      	ldrh	r3, [r3, #12]
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5c0:	fb02 f201 	mul.w	r2, r2, r1
 800f5c4:	1a9b      	subs	r3, r3, r2
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f040 809d 	bne.w	800f706 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	69db      	ldr	r3, [r3, #28]
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10b      	bne.n	800f5f6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	095b      	lsrs	r3, r3, #5
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	8912      	ldrh	r2, [r2, #8]
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	f0c0 808d 	bcc.w	800f706 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	61da      	str	r2, [r3, #28]
 800f5f2:	2304      	movs	r3, #4
 800f5f4:	e09a      	b.n	800f72c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	899b      	ldrh	r3, [r3, #12]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800f602:	68fa      	ldr	r2, [r7, #12]
 800f604:	8952      	ldrh	r2, [r2, #10]
 800f606:	3a01      	subs	r2, #1
 800f608:	4013      	ands	r3, r2
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d17b      	bne.n	800f706 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	699b      	ldr	r3, [r3, #24]
 800f614:	4619      	mov	r1, r3
 800f616:	4610      	mov	r0, r2
 800f618:	f7ff fc11 	bl	800ee3e <get_fat>
 800f61c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d801      	bhi.n	800f628 <dir_next+0xa0>
 800f624:	2302      	movs	r3, #2
 800f626:	e081      	b.n	800f72c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f62e:	d101      	bne.n	800f634 <dir_next+0xac>
 800f630:	2301      	movs	r3, #1
 800f632:	e07b      	b.n	800f72c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	699b      	ldr	r3, [r3, #24]
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d359      	bcc.n	800f6f2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d104      	bne.n	800f64e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	61da      	str	r2, [r3, #28]
 800f64a:	2304      	movs	r3, #4
 800f64c:	e06e      	b.n	800f72c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	699b      	ldr	r3, [r3, #24]
 800f654:	4619      	mov	r1, r3
 800f656:	4610      	mov	r0, r2
 800f658:	f7ff fe3d 	bl	800f2d6 <create_chain>
 800f65c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d101      	bne.n	800f668 <dir_next+0xe0>
 800f664:	2307      	movs	r3, #7
 800f666:	e061      	b.n	800f72c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d101      	bne.n	800f672 <dir_next+0xea>
 800f66e:	2302      	movs	r3, #2
 800f670:	e05c      	b.n	800f72c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f678:	d101      	bne.n	800f67e <dir_next+0xf6>
 800f67a:	2301      	movs	r3, #1
 800f67c:	e056      	b.n	800f72c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7ff fadc 	bl	800ec3c <sync_window>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <dir_next+0x106>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e04e      	b.n	800f72c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	899b      	ldrh	r3, [r3, #12]
 800f698:	461a      	mov	r2, r3
 800f69a:	2100      	movs	r1, #0
 800f69c:	f7ff f905 	bl	800e8aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	613b      	str	r3, [r7, #16]
 800f6a4:	6979      	ldr	r1, [r7, #20]
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f7ff fbaa 	bl	800ee00 <clust2sect>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	631a      	str	r2, [r3, #48]	; 0x30
 800f6b2:	e012      	b.n	800f6da <dir_next+0x152>
						fs->wflag = 1;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f7ff fabe 	bl	800ec3c <sync_window>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <dir_next+0x142>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e030      	b.n	800f72c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	613b      	str	r3, [r7, #16]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6d4:	1c5a      	adds	r2, r3, #1
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	631a      	str	r2, [r3, #48]	; 0x30
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	895b      	ldrh	r3, [r3, #10]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d3e6      	bcc.n	800f6b4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	1ad2      	subs	r2, r2, r3
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f6f8:	6979      	ldr	r1, [r7, #20]
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f7ff fb80 	bl	800ee00 <clust2sect>
 800f700:	4602      	mov	r2, r0
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	899b      	ldrh	r3, [r3, #12]
 800f716:	461a      	mov	r2, r3
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f71e:	fb02 f200 	mul.w	r2, r2, r0
 800f722:	1a9b      	subs	r3, r3, r2
 800f724:	18ca      	adds	r2, r1, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f744:	2100      	movs	r1, #0
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7ff fe95 	bl	800f476 <dir_sdi>
 800f74c:	4603      	mov	r3, r0
 800f74e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f750:	7dfb      	ldrb	r3, [r7, #23]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d12b      	bne.n	800f7ae <dir_alloc+0x7a>
		n = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	69db      	ldr	r3, [r3, #28]
 800f75e:	4619      	mov	r1, r3
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7ff faaf 	bl	800ecc4 <move_window>
 800f766:	4603      	mov	r3, r0
 800f768:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d11d      	bne.n	800f7ac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6a1b      	ldr	r3, [r3, #32]
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	2be5      	cmp	r3, #229	; 0xe5
 800f778:	d004      	beq.n	800f784 <dir_alloc+0x50>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a1b      	ldr	r3, [r3, #32]
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d107      	bne.n	800f794 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	3301      	adds	r3, #1
 800f788:	613b      	str	r3, [r7, #16]
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d102      	bne.n	800f798 <dir_alloc+0x64>
 800f792:	e00c      	b.n	800f7ae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f794:	2300      	movs	r3, #0
 800f796:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f798:	2101      	movs	r1, #1
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7ff fef4 	bl	800f588 <dir_next>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d0d7      	beq.n	800f75a <dir_alloc+0x26>
 800f7aa:	e000      	b.n	800f7ae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f7ac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f7ae:	7dfb      	ldrb	r3, [r7, #23]
 800f7b0:	2b04      	cmp	r3, #4
 800f7b2:	d101      	bne.n	800f7b8 <dir_alloc+0x84>
 800f7b4:	2307      	movs	r3, #7
 800f7b6:	75fb      	strb	r3, [r7, #23]
	return res;
 800f7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b084      	sub	sp, #16
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	331a      	adds	r3, #26
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fe ffc7 	bl	800e764 <ld_word>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	2b03      	cmp	r3, #3
 800f7e0:	d109      	bne.n	800f7f6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	3314      	adds	r3, #20
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fe ffbc 	bl	800e764 <ld_word>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	041b      	lsls	r3, r3, #16
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	331a      	adds	r3, #26
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	b292      	uxth	r2, r2
 800f814:	4611      	mov	r1, r2
 800f816:	4618      	mov	r0, r3
 800f818:	f7fe ffdf 	bl	800e7da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	2b03      	cmp	r3, #3
 800f822:	d109      	bne.n	800f838 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	f103 0214 	add.w	r2, r3, #20
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	0c1b      	lsrs	r3, r3, #16
 800f82e:	b29b      	uxth	r3, r3
 800f830:	4619      	mov	r1, r3
 800f832:	4610      	mov	r0, r2
 800f834:	f7fe ffd1 	bl	800e7da <st_word>
	}
}
 800f838:	bf00      	nop
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b086      	sub	sp, #24
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f84a:	2304      	movs	r3, #4
 800f84c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f854:	e03c      	b.n	800f8d0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	69db      	ldr	r3, [r3, #28]
 800f85a:	4619      	mov	r1, r3
 800f85c:	6938      	ldr	r0, [r7, #16]
 800f85e:	f7ff fa31 	bl	800ecc4 <move_window>
 800f862:	4603      	mov	r3, r0
 800f864:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d136      	bne.n	800f8da <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6a1b      	ldr	r3, [r3, #32]
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f874:	7bfb      	ldrb	r3, [r7, #15]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d102      	bne.n	800f880 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f87a:	2304      	movs	r3, #4
 800f87c:	75fb      	strb	r3, [r7, #23]
 800f87e:	e031      	b.n	800f8e4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	330b      	adds	r3, #11
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f88c:	73bb      	strb	r3, [r7, #14]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	7bba      	ldrb	r2, [r7, #14]
 800f892:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	2be5      	cmp	r3, #229	; 0xe5
 800f898:	d011      	beq.n	800f8be <dir_read+0x7e>
 800f89a:	7bfb      	ldrb	r3, [r7, #15]
 800f89c:	2b2e      	cmp	r3, #46	; 0x2e
 800f89e:	d00e      	beq.n	800f8be <dir_read+0x7e>
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
 800f8a2:	2b0f      	cmp	r3, #15
 800f8a4:	d00b      	beq.n	800f8be <dir_read+0x7e>
 800f8a6:	7bbb      	ldrb	r3, [r7, #14]
 800f8a8:	f023 0320 	bic.w	r3, r3, #32
 800f8ac:	2b08      	cmp	r3, #8
 800f8ae:	bf0c      	ite	eq
 800f8b0:	2301      	moveq	r3, #1
 800f8b2:	2300      	movne	r3, #0
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d00f      	beq.n	800f8de <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f8be:	2100      	movs	r1, #0
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f7ff fe61 	bl	800f588 <dir_next>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f8ca:	7dfb      	ldrb	r3, [r7, #23]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d108      	bne.n	800f8e2 <dir_read+0xa2>
	while (dp->sect) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	69db      	ldr	r3, [r3, #28]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d1be      	bne.n	800f856 <dir_read+0x16>
 800f8d8:	e004      	b.n	800f8e4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f8da:	bf00      	nop
 800f8dc:	e002      	b.n	800f8e4 <dir_read+0xa4>
				break;
 800f8de:	bf00      	nop
 800f8e0:	e000      	b.n	800f8e4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f8e2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d002      	beq.n	800f8f0 <dir_read+0xb0>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	61da      	str	r2, [r3, #28]
	return res;
 800f8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3718      	adds	r7, #24
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b086      	sub	sp, #24
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f908:	2100      	movs	r1, #0
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7ff fdb3 	bl	800f476 <dir_sdi>
 800f910:	4603      	mov	r3, r0
 800f912:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f914:	7dfb      	ldrb	r3, [r7, #23]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <dir_find+0x24>
 800f91a:	7dfb      	ldrb	r3, [r7, #23]
 800f91c:	e03e      	b.n	800f99c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	69db      	ldr	r3, [r3, #28]
 800f922:	4619      	mov	r1, r3
 800f924:	6938      	ldr	r0, [r7, #16]
 800f926:	f7ff f9cd 	bl	800ecc4 <move_window>
 800f92a:	4603      	mov	r3, r0
 800f92c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f92e:	7dfb      	ldrb	r3, [r7, #23]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d12f      	bne.n	800f994 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6a1b      	ldr	r3, [r3, #32]
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d102      	bne.n	800f948 <dir_find+0x4e>
 800f942:	2304      	movs	r3, #4
 800f944:	75fb      	strb	r3, [r7, #23]
 800f946:	e028      	b.n	800f99a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6a1b      	ldr	r3, [r3, #32]
 800f94c:	330b      	adds	r3, #11
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f954:	b2da      	uxtb	r2, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6a1b      	ldr	r3, [r3, #32]
 800f95e:	330b      	adds	r3, #11
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	f003 0308 	and.w	r3, r3, #8
 800f966:	2b00      	cmp	r3, #0
 800f968:	d10a      	bne.n	800f980 <dir_find+0x86>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a18      	ldr	r0, [r3, #32]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	3324      	adds	r3, #36	; 0x24
 800f972:	220b      	movs	r2, #11
 800f974:	4619      	mov	r1, r3
 800f976:	f7fe ffb2 	bl	800e8de <mem_cmp>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00b      	beq.n	800f998 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f980:	2100      	movs	r1, #0
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff fe00 	bl	800f588 <dir_next>
 800f988:	4603      	mov	r3, r0
 800f98a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f98c:	7dfb      	ldrb	r3, [r7, #23]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d0c5      	beq.n	800f91e <dir_find+0x24>
 800f992:	e002      	b.n	800f99a <dir_find+0xa0>
		if (res != FR_OK) break;
 800f994:	bf00      	nop
 800f996:	e000      	b.n	800f99a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f998:	bf00      	nop

	return res;
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3718      	adds	r7, #24
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f9b2:	2101      	movs	r1, #1
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff febd 	bl	800f734 <dir_alloc>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d11c      	bne.n	800f9fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	69db      	ldr	r3, [r3, #28]
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	68b8      	ldr	r0, [r7, #8]
 800f9cc:	f7ff f97a 	bl	800ecc4 <move_window>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d111      	bne.n	800f9fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6a1b      	ldr	r3, [r3, #32]
 800f9de:	2220      	movs	r2, #32
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fe ff61 	bl	800e8aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6a18      	ldr	r0, [r3, #32]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	3324      	adds	r3, #36	; 0x24
 800f9f0:	220b      	movs	r2, #11
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	f7fe ff38 	bl	800e868 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b086      	sub	sp, #24
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	2200      	movs	r2, #0
 800fa16:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	69db      	ldr	r3, [r3, #28]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d04e      	beq.n	800fabe <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800fa20:	2300      	movs	r3, #0
 800fa22:	613b      	str	r3, [r7, #16]
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800fa28:	e021      	b.n	800fa6e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1a      	ldr	r2, [r3, #32]
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	1c59      	adds	r1, r3, #1
 800fa32:	6179      	str	r1, [r7, #20]
 800fa34:	4413      	add	r3, r2
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fa3a:	7bfb      	ldrb	r3, [r7, #15]
 800fa3c:	2b20      	cmp	r3, #32
 800fa3e:	d100      	bne.n	800fa42 <get_fileinfo+0x3a>
 800fa40:	e015      	b.n	800fa6e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fa42:	7bfb      	ldrb	r3, [r7, #15]
 800fa44:	2b05      	cmp	r3, #5
 800fa46:	d101      	bne.n	800fa4c <get_fileinfo+0x44>
 800fa48:	23e5      	movs	r3, #229	; 0xe5
 800fa4a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	2b09      	cmp	r3, #9
 800fa50:	d106      	bne.n	800fa60 <get_fileinfo+0x58>
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	1c5a      	adds	r2, r3, #1
 800fa56:	613a      	str	r2, [r7, #16]
 800fa58:	683a      	ldr	r2, [r7, #0]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	222e      	movs	r2, #46	; 0x2e
 800fa5e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	613a      	str	r2, [r7, #16]
 800fa66:	683a      	ldr	r2, [r7, #0]
 800fa68:	4413      	add	r3, r2
 800fa6a:	7bfa      	ldrb	r2, [r7, #15]
 800fa6c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2b0a      	cmp	r3, #10
 800fa72:	d9da      	bls.n	800fa2a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800fa74:	683a      	ldr	r2, [r7, #0]
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	4413      	add	r3, r2
 800fa7a:	3309      	adds	r3, #9
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a1b      	ldr	r3, [r3, #32]
 800fa84:	7ada      	ldrb	r2, [r3, #11]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	331c      	adds	r3, #28
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fe fe7f 	bl	800e794 <ld_dword>
 800fa96:	4602      	mov	r2, r0
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a1b      	ldr	r3, [r3, #32]
 800faa0:	3316      	adds	r3, #22
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fe fe76 	bl	800e794 <ld_dword>
 800faa8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	b29a      	uxth	r2, r3
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	80da      	strh	r2, [r3, #6]
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	0c1b      	lsrs	r3, r3, #16
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	809a      	strh	r2, [r3, #4]
 800fabc:	e000      	b.n	800fac0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fabe:	bf00      	nop
}
 800fac0:	3718      	adds	r7, #24
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
	...

0800fac8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	60fb      	str	r3, [r7, #12]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	3324      	adds	r3, #36	; 0x24
 800fadc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fade:	220b      	movs	r2, #11
 800fae0:	2120      	movs	r1, #32
 800fae2:	68b8      	ldr	r0, [r7, #8]
 800fae4:	f7fe fee1 	bl	800e8aa <mem_set>
	si = i = 0; ni = 8;
 800fae8:	2300      	movs	r3, #0
 800faea:	613b      	str	r3, [r7, #16]
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	617b      	str	r3, [r7, #20]
 800faf0:	2308      	movs	r3, #8
 800faf2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	1c5a      	adds	r2, r3, #1
 800faf8:	617a      	str	r2, [r7, #20]
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	4413      	add	r3, r2
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fb02:	7ffb      	ldrb	r3, [r7, #31]
 800fb04:	2b20      	cmp	r3, #32
 800fb06:	d94e      	bls.n	800fba6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fb08:	7ffb      	ldrb	r3, [r7, #31]
 800fb0a:	2b2f      	cmp	r3, #47	; 0x2f
 800fb0c:	d006      	beq.n	800fb1c <create_name+0x54>
 800fb0e:	7ffb      	ldrb	r3, [r7, #31]
 800fb10:	2b5c      	cmp	r3, #92	; 0x5c
 800fb12:	d110      	bne.n	800fb36 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fb14:	e002      	b.n	800fb1c <create_name+0x54>
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	617b      	str	r3, [r7, #20]
 800fb1c:	68fa      	ldr	r2, [r7, #12]
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	4413      	add	r3, r2
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	2b2f      	cmp	r3, #47	; 0x2f
 800fb26:	d0f6      	beq.n	800fb16 <create_name+0x4e>
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b5c      	cmp	r3, #92	; 0x5c
 800fb32:	d0f0      	beq.n	800fb16 <create_name+0x4e>
			break;
 800fb34:	e038      	b.n	800fba8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fb36:	7ffb      	ldrb	r3, [r7, #31]
 800fb38:	2b2e      	cmp	r3, #46	; 0x2e
 800fb3a:	d003      	beq.n	800fb44 <create_name+0x7c>
 800fb3c:	693a      	ldr	r2, [r7, #16]
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d30c      	bcc.n	800fb5e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	2b0b      	cmp	r3, #11
 800fb48:	d002      	beq.n	800fb50 <create_name+0x88>
 800fb4a:	7ffb      	ldrb	r3, [r7, #31]
 800fb4c:	2b2e      	cmp	r3, #46	; 0x2e
 800fb4e:	d001      	beq.n	800fb54 <create_name+0x8c>
 800fb50:	2306      	movs	r3, #6
 800fb52:	e044      	b.n	800fbde <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fb54:	2308      	movs	r3, #8
 800fb56:	613b      	str	r3, [r7, #16]
 800fb58:	230b      	movs	r3, #11
 800fb5a:	61bb      	str	r3, [r7, #24]
			continue;
 800fb5c:	e022      	b.n	800fba4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fb5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	da04      	bge.n	800fb70 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fb66:	7ffb      	ldrb	r3, [r7, #31]
 800fb68:	3b80      	subs	r3, #128	; 0x80
 800fb6a:	4a1f      	ldr	r2, [pc, #124]	; (800fbe8 <create_name+0x120>)
 800fb6c:	5cd3      	ldrb	r3, [r2, r3]
 800fb6e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fb70:	7ffb      	ldrb	r3, [r7, #31]
 800fb72:	4619      	mov	r1, r3
 800fb74:	481d      	ldr	r0, [pc, #116]	; (800fbec <create_name+0x124>)
 800fb76:	f7fe fed9 	bl	800e92c <chk_chr>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <create_name+0xbc>
 800fb80:	2306      	movs	r3, #6
 800fb82:	e02c      	b.n	800fbde <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fb84:	7ffb      	ldrb	r3, [r7, #31]
 800fb86:	2b60      	cmp	r3, #96	; 0x60
 800fb88:	d905      	bls.n	800fb96 <create_name+0xce>
 800fb8a:	7ffb      	ldrb	r3, [r7, #31]
 800fb8c:	2b7a      	cmp	r3, #122	; 0x7a
 800fb8e:	d802      	bhi.n	800fb96 <create_name+0xce>
 800fb90:	7ffb      	ldrb	r3, [r7, #31]
 800fb92:	3b20      	subs	r3, #32
 800fb94:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	1c5a      	adds	r2, r3, #1
 800fb9a:	613a      	str	r2, [r7, #16]
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	4413      	add	r3, r2
 800fba0:	7ffa      	ldrb	r2, [r7, #31]
 800fba2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fba4:	e7a6      	b.n	800faf4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fba6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	441a      	add	r2, r3
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <create_name+0xf4>
 800fbb8:	2306      	movs	r3, #6
 800fbba:	e010      	b.n	800fbde <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	2be5      	cmp	r3, #229	; 0xe5
 800fbc2:	d102      	bne.n	800fbca <create_name+0x102>
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	2205      	movs	r2, #5
 800fbc8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fbca:	7ffb      	ldrb	r3, [r7, #31]
 800fbcc:	2b20      	cmp	r3, #32
 800fbce:	d801      	bhi.n	800fbd4 <create_name+0x10c>
 800fbd0:	2204      	movs	r2, #4
 800fbd2:	e000      	b.n	800fbd6 <create_name+0x10e>
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	330b      	adds	r3, #11
 800fbda:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fbdc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3720      	adds	r7, #32
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	0801807c 	.word	0x0801807c
 800fbec:	08018004 	.word	0x08018004

0800fbf0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fc04:	e002      	b.n	800fc0c <follow_path+0x1c>
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	2b2f      	cmp	r3, #47	; 0x2f
 800fc12:	d0f8      	beq.n	800fc06 <follow_path+0x16>
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b5c      	cmp	r3, #92	; 0x5c
 800fc1a:	d0f4      	beq.n	800fc06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	2b1f      	cmp	r3, #31
 800fc28:	d80a      	bhi.n	800fc40 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2280      	movs	r2, #128	; 0x80
 800fc2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fc32:	2100      	movs	r1, #0
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7ff fc1e 	bl	800f476 <dir_sdi>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	75fb      	strb	r3, [r7, #23]
 800fc3e:	e048      	b.n	800fcd2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc40:	463b      	mov	r3, r7
 800fc42:	4619      	mov	r1, r3
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff ff3f 	bl	800fac8 <create_name>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d139      	bne.n	800fcc8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f7ff fe50 	bl	800f8fa <dir_find>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fc64:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d00a      	beq.n	800fc82 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fc6c:	7dfb      	ldrb	r3, [r7, #23]
 800fc6e:	2b04      	cmp	r3, #4
 800fc70:	d12c      	bne.n	800fccc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fc72:	7afb      	ldrb	r3, [r7, #11]
 800fc74:	f003 0304 	and.w	r3, r3, #4
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d127      	bne.n	800fccc <follow_path+0xdc>
 800fc7c:	2305      	movs	r3, #5
 800fc7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fc80:	e024      	b.n	800fccc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fc82:	7afb      	ldrb	r3, [r7, #11]
 800fc84:	f003 0304 	and.w	r3, r3, #4
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d121      	bne.n	800fcd0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	799b      	ldrb	r3, [r3, #6]
 800fc90:	f003 0310 	and.w	r3, r3, #16
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d102      	bne.n	800fc9e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fc98:	2305      	movs	r3, #5
 800fc9a:	75fb      	strb	r3, [r7, #23]
 800fc9c:	e019      	b.n	800fcd2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	8992      	ldrh	r2, [r2, #12]
 800fcac:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcb0:	fb02 f200 	mul.w	r2, r2, r0
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	440b      	add	r3, r1
 800fcb8:	4619      	mov	r1, r3
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f7ff fd81 	bl	800f7c2 <ld_clust>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fcc6:	e7bb      	b.n	800fc40 <follow_path+0x50>
			if (res != FR_OK) break;
 800fcc8:	bf00      	nop
 800fcca:	e002      	b.n	800fcd2 <follow_path+0xe2>
				break;
 800fccc:	bf00      	nop
 800fcce:	e000      	b.n	800fcd2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fcd0:	bf00      	nop
			}
		}
	}

	return res;
 800fcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3718      	adds	r7, #24
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b087      	sub	sp, #28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fce8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d031      	beq.n	800fd56 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	617b      	str	r3, [r7, #20]
 800fcf8:	e002      	b.n	800fd00 <get_ldnumber+0x24>
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	617b      	str	r3, [r7, #20]
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2b20      	cmp	r3, #32
 800fd06:	d903      	bls.n	800fd10 <get_ldnumber+0x34>
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	2b3a      	cmp	r3, #58	; 0x3a
 800fd0e:	d1f4      	bne.n	800fcfa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2b3a      	cmp	r3, #58	; 0x3a
 800fd16:	d11c      	bne.n	800fd52 <get_ldnumber+0x76>
			tp = *path;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	1c5a      	adds	r2, r3, #1
 800fd22:	60fa      	str	r2, [r7, #12]
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	3b30      	subs	r3, #48	; 0x30
 800fd28:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2b09      	cmp	r3, #9
 800fd2e:	d80e      	bhi.n	800fd4e <get_ldnumber+0x72>
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d10a      	bne.n	800fd4e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d107      	bne.n	800fd4e <get_ldnumber+0x72>
					vol = (int)i;
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	3301      	adds	r3, #1
 800fd46:	617b      	str	r3, [r7, #20]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	697a      	ldr	r2, [r7, #20]
 800fd4c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	e002      	b.n	800fd58 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fd52:	2300      	movs	r3, #0
 800fd54:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fd56:	693b      	ldr	r3, [r7, #16]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	371c      	adds	r7, #28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2200      	movs	r2, #0
 800fd72:	70da      	strb	r2, [r3, #3]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd7a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fd7c:	6839      	ldr	r1, [r7, #0]
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7fe ffa0 	bl	800ecc4 <move_window>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <check_fs+0x2a>
 800fd8a:	2304      	movs	r3, #4
 800fd8c:	e038      	b.n	800fe00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	3334      	adds	r3, #52	; 0x34
 800fd92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fe fce4 	bl	800e764 <ld_word>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	461a      	mov	r2, r3
 800fda0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d001      	beq.n	800fdac <check_fs+0x48>
 800fda8:	2303      	movs	r3, #3
 800fdaa:	e029      	b.n	800fe00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fdb2:	2be9      	cmp	r3, #233	; 0xe9
 800fdb4:	d009      	beq.n	800fdca <check_fs+0x66>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fdbc:	2beb      	cmp	r3, #235	; 0xeb
 800fdbe:	d11e      	bne.n	800fdfe <check_fs+0x9a>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fdc6:	2b90      	cmp	r3, #144	; 0x90
 800fdc8:	d119      	bne.n	800fdfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	3334      	adds	r3, #52	; 0x34
 800fdce:	3336      	adds	r3, #54	; 0x36
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe fcdf 	bl	800e794 <ld_dword>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fddc:	4a0a      	ldr	r2, [pc, #40]	; (800fe08 <check_fs+0xa4>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d101      	bne.n	800fde6 <check_fs+0x82>
 800fde2:	2300      	movs	r3, #0
 800fde4:	e00c      	b.n	800fe00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3334      	adds	r3, #52	; 0x34
 800fdea:	3352      	adds	r3, #82	; 0x52
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fe fcd1 	bl	800e794 <ld_dword>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	4b05      	ldr	r3, [pc, #20]	; (800fe0c <check_fs+0xa8>)
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d101      	bne.n	800fdfe <check_fs+0x9a>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	e000      	b.n	800fe00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fdfe:	2302      	movs	r3, #2
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	00544146 	.word	0x00544146
 800fe0c:	33544146 	.word	0x33544146

0800fe10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b096      	sub	sp, #88	; 0x58
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2200      	movs	r2, #0
 800fe22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe24:	68f8      	ldr	r0, [r7, #12]
 800fe26:	f7ff ff59 	bl	800fcdc <get_ldnumber>
 800fe2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	da01      	bge.n	800fe36 <find_volume+0x26>
 800fe32:	230b      	movs	r3, #11
 800fe34:	e265      	b.n	8010302 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe36:	4ab0      	ldr	r2, [pc, #704]	; (80100f8 <find_volume+0x2e8>)
 800fe38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d101      	bne.n	800fe4a <find_volume+0x3a>
 800fe46:	230c      	movs	r3, #12
 800fe48:	e25b      	b.n	8010302 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fe50:	79fb      	ldrb	r3, [r7, #7]
 800fe52:	f023 0301 	bic.w	r3, r3, #1
 800fe56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fe58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d01a      	beq.n	800fe96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	785b      	ldrb	r3, [r3, #1]
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fe fbdf 	bl	800e628 <disk_status>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fe70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe74:	f003 0301 	and.w	r3, r3, #1
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d10c      	bne.n	800fe96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fe7c:	79fb      	ldrb	r3, [r7, #7]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d007      	beq.n	800fe92 <find_volume+0x82>
 800fe82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe86:	f003 0304 	and.w	r3, r3, #4
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d001      	beq.n	800fe92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fe8e:	230a      	movs	r3, #10
 800fe90:	e237      	b.n	8010302 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800fe92:	2300      	movs	r3, #0
 800fe94:	e235      	b.n	8010302 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fe96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe98:	2200      	movs	r2, #0
 800fe9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fe9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea6:	785b      	ldrb	r3, [r3, #1]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7fe fbd7 	bl	800e65c <disk_initialize>
 800feae:	4603      	mov	r3, r0
 800feb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800feb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	2b00      	cmp	r3, #0
 800febe:	d001      	beq.n	800fec4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fec0:	2303      	movs	r3, #3
 800fec2:	e21e      	b.n	8010302 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fec4:	79fb      	ldrb	r3, [r7, #7]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d007      	beq.n	800feda <find_volume+0xca>
 800feca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fece:	f003 0304 	and.w	r3, r3, #4
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fed6:	230a      	movs	r3, #10
 800fed8:	e213      	b.n	8010302 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	7858      	ldrb	r0, [r3, #1]
 800fede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee0:	330c      	adds	r3, #12
 800fee2:	461a      	mov	r2, r3
 800fee4:	2102      	movs	r1, #2
 800fee6:	f7fe fc1f 	bl	800e728 <disk_ioctl>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <find_volume+0xe4>
 800fef0:	2301      	movs	r3, #1
 800fef2:	e206      	b.n	8010302 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	899b      	ldrh	r3, [r3, #12]
 800fef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fefc:	d80d      	bhi.n	800ff1a <find_volume+0x10a>
 800fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff00:	899b      	ldrh	r3, [r3, #12]
 800ff02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff06:	d308      	bcc.n	800ff1a <find_volume+0x10a>
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	899b      	ldrh	r3, [r3, #12]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff10:	899b      	ldrh	r3, [r3, #12]
 800ff12:	3b01      	subs	r3, #1
 800ff14:	4013      	ands	r3, r2
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <find_volume+0x10e>
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e1f1      	b.n	8010302 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ff22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff26:	f7ff ff1d 	bl	800fd64 <check_fs>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d14b      	bne.n	800ffd0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff38:	2300      	movs	r3, #0
 800ff3a:	643b      	str	r3, [r7, #64]	; 0x40
 800ff3c:	e01f      	b.n	800ff7e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ff44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff46:	011b      	lsls	r3, r3, #4
 800ff48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ff4c:	4413      	add	r3, r2
 800ff4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ff50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff52:	3304      	adds	r3, #4
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d006      	beq.n	800ff68 <find_volume+0x158>
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	3308      	adds	r3, #8
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe fc18 	bl	800e794 <ld_dword>
 800ff64:	4602      	mov	r2, r0
 800ff66:	e000      	b.n	800ff6a <find_volume+0x15a>
 800ff68:	2200      	movs	r2, #0
 800ff6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ff72:	440b      	add	r3, r1
 800ff74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ff7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff80:	2b03      	cmp	r3, #3
 800ff82:	d9dc      	bls.n	800ff3e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ff84:	2300      	movs	r3, #0
 800ff86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ff88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d002      	beq.n	800ff94 <find_volume+0x184>
 800ff8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff90:	3b01      	subs	r3, #1
 800ff92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ff94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ff9c:	4413      	add	r3, r2
 800ff9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ffa2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ffa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d005      	beq.n	800ffb6 <find_volume+0x1a6>
 800ffaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffae:	f7ff fed9 	bl	800fd64 <check_fs>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	e000      	b.n	800ffb8 <find_volume+0x1a8>
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ffbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d905      	bls.n	800ffd0 <find_volume+0x1c0>
 800ffc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	643b      	str	r3, [r7, #64]	; 0x40
 800ffca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffcc:	2b03      	cmp	r3, #3
 800ffce:	d9e1      	bls.n	800ff94 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ffd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffd4:	2b04      	cmp	r3, #4
 800ffd6:	d101      	bne.n	800ffdc <find_volume+0x1cc>
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e192      	b.n	8010302 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ffdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d901      	bls.n	800ffe8 <find_volume+0x1d8>
 800ffe4:	230d      	movs	r3, #13
 800ffe6:	e18c      	b.n	8010302 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffea:	3334      	adds	r3, #52	; 0x34
 800ffec:	330b      	adds	r3, #11
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fe fbb8 	bl	800e764 <ld_word>
 800fff4:	4603      	mov	r3, r0
 800fff6:	461a      	mov	r2, r3
 800fff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffa:	899b      	ldrh	r3, [r3, #12]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d001      	beq.n	8010004 <find_volume+0x1f4>
 8010000:	230d      	movs	r3, #13
 8010002:	e17e      	b.n	8010302 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010006:	3334      	adds	r3, #52	; 0x34
 8010008:	3316      	adds	r3, #22
 801000a:	4618      	mov	r0, r3
 801000c:	f7fe fbaa 	bl	800e764 <ld_word>
 8010010:	4603      	mov	r3, r0
 8010012:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010016:	2b00      	cmp	r3, #0
 8010018:	d106      	bne.n	8010028 <find_volume+0x218>
 801001a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001c:	3334      	adds	r3, #52	; 0x34
 801001e:	3324      	adds	r3, #36	; 0x24
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe fbb7 	bl	800e794 <ld_dword>
 8010026:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801002c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801002e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010030:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003a:	789b      	ldrb	r3, [r3, #2]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d005      	beq.n	801004c <find_volume+0x23c>
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	789b      	ldrb	r3, [r3, #2]
 8010044:	2b02      	cmp	r3, #2
 8010046:	d001      	beq.n	801004c <find_volume+0x23c>
 8010048:	230d      	movs	r3, #13
 801004a:	e15a      	b.n	8010302 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	789b      	ldrb	r3, [r3, #2]
 8010050:	461a      	mov	r2, r3
 8010052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010054:	fb02 f303 	mul.w	r3, r2, r3
 8010058:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010060:	b29a      	uxth	r2, r3
 8010062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010064:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	895b      	ldrh	r3, [r3, #10]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d008      	beq.n	8010080 <find_volume+0x270>
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	895b      	ldrh	r3, [r3, #10]
 8010072:	461a      	mov	r2, r3
 8010074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010076:	895b      	ldrh	r3, [r3, #10]
 8010078:	3b01      	subs	r3, #1
 801007a:	4013      	ands	r3, r2
 801007c:	2b00      	cmp	r3, #0
 801007e:	d001      	beq.n	8010084 <find_volume+0x274>
 8010080:	230d      	movs	r3, #13
 8010082:	e13e      	b.n	8010302 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010086:	3334      	adds	r3, #52	; 0x34
 8010088:	3311      	adds	r3, #17
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fb6a 	bl	800e764 <ld_word>
 8010090:	4603      	mov	r3, r0
 8010092:	461a      	mov	r2, r3
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	891b      	ldrh	r3, [r3, #8]
 801009c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801009e:	8992      	ldrh	r2, [r2, #12]
 80100a0:	0952      	lsrs	r2, r2, #5
 80100a2:	b292      	uxth	r2, r2
 80100a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80100a8:	fb02 f201 	mul.w	r2, r2, r1
 80100ac:	1a9b      	subs	r3, r3, r2
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d001      	beq.n	80100b8 <find_volume+0x2a8>
 80100b4:	230d      	movs	r3, #13
 80100b6:	e124      	b.n	8010302 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80100b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ba:	3334      	adds	r3, #52	; 0x34
 80100bc:	3313      	adds	r3, #19
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fe fb50 	bl	800e764 <ld_word>
 80100c4:	4603      	mov	r3, r0
 80100c6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80100c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d106      	bne.n	80100dc <find_volume+0x2cc>
 80100ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d0:	3334      	adds	r3, #52	; 0x34
 80100d2:	3320      	adds	r3, #32
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fe fb5d 	bl	800e794 <ld_dword>
 80100da:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100de:	3334      	adds	r3, #52	; 0x34
 80100e0:	330e      	adds	r3, #14
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fe fb3e 	bl	800e764 <ld_word>
 80100e8:	4603      	mov	r3, r0
 80100ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80100ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d104      	bne.n	80100fc <find_volume+0x2ec>
 80100f2:	230d      	movs	r3, #13
 80100f4:	e105      	b.n	8010302 <find_volume+0x4f2>
 80100f6:	bf00      	nop
 80100f8:	200008ac 	.word	0x200008ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80100fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80100fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010100:	4413      	add	r3, r2
 8010102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010104:	8911      	ldrh	r1, [r2, #8]
 8010106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010108:	8992      	ldrh	r2, [r2, #12]
 801010a:	0952      	lsrs	r2, r2, #5
 801010c:	b292      	uxth	r2, r2
 801010e:	fbb1 f2f2 	udiv	r2, r1, r2
 8010112:	b292      	uxth	r2, r2
 8010114:	4413      	add	r3, r2
 8010116:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801011a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011c:	429a      	cmp	r2, r3
 801011e:	d201      	bcs.n	8010124 <find_volume+0x314>
 8010120:	230d      	movs	r3, #13
 8010122:	e0ee      	b.n	8010302 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801012c:	8952      	ldrh	r2, [r2, #10]
 801012e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010132:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010136:	2b00      	cmp	r3, #0
 8010138:	d101      	bne.n	801013e <find_volume+0x32e>
 801013a:	230d      	movs	r3, #13
 801013c:	e0e1      	b.n	8010302 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801013e:	2303      	movs	r3, #3
 8010140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010146:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801014a:	4293      	cmp	r3, r2
 801014c:	d802      	bhi.n	8010154 <find_volume+0x344>
 801014e:	2302      	movs	r3, #2
 8010150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010156:	f640 72f5 	movw	r2, #4085	; 0xff5
 801015a:	4293      	cmp	r3, r2
 801015c:	d802      	bhi.n	8010164 <find_volume+0x354>
 801015e:	2301      	movs	r3, #1
 8010160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	1c9a      	adds	r2, r3, #2
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801016c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010170:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010172:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010176:	441a      	add	r2, r3
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801017c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801017e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010180:	441a      	add	r2, r3
 8010182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010184:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010186:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801018a:	2b03      	cmp	r3, #3
 801018c:	d11e      	bne.n	80101cc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801018e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010190:	3334      	adds	r3, #52	; 0x34
 8010192:	332a      	adds	r3, #42	; 0x2a
 8010194:	4618      	mov	r0, r3
 8010196:	f7fe fae5 	bl	800e764 <ld_word>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d001      	beq.n	80101a4 <find_volume+0x394>
 80101a0:	230d      	movs	r3, #13
 80101a2:	e0ae      	b.n	8010302 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80101a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a6:	891b      	ldrh	r3, [r3, #8]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d001      	beq.n	80101b0 <find_volume+0x3a0>
 80101ac:	230d      	movs	r3, #13
 80101ae:	e0a8      	b.n	8010302 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80101b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b2:	3334      	adds	r3, #52	; 0x34
 80101b4:	332c      	adds	r3, #44	; 0x2c
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fe faec 	bl	800e794 <ld_dword>
 80101bc:	4602      	mov	r2, r0
 80101be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80101c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c4:	699b      	ldr	r3, [r3, #24]
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	647b      	str	r3, [r7, #68]	; 0x44
 80101ca:	e01f      	b.n	801020c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80101cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ce:	891b      	ldrh	r3, [r3, #8]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d101      	bne.n	80101d8 <find_volume+0x3c8>
 80101d4:	230d      	movs	r3, #13
 80101d6:	e094      	b.n	8010302 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101de:	441a      	add	r2, r3
 80101e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80101e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101e8:	2b02      	cmp	r3, #2
 80101ea:	d103      	bne.n	80101f4 <find_volume+0x3e4>
 80101ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ee:	699b      	ldr	r3, [r3, #24]
 80101f0:	005b      	lsls	r3, r3, #1
 80101f2:	e00a      	b.n	801020a <find_volume+0x3fa>
 80101f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f6:	699a      	ldr	r2, [r3, #24]
 80101f8:	4613      	mov	r3, r2
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	4413      	add	r3, r2
 80101fe:	085a      	lsrs	r2, r3, #1
 8010200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010202:	699b      	ldr	r3, [r3, #24]
 8010204:	f003 0301 	and.w	r3, r3, #1
 8010208:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801020a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801020c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020e:	69da      	ldr	r2, [r3, #28]
 8010210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010212:	899b      	ldrh	r3, [r3, #12]
 8010214:	4619      	mov	r1, r3
 8010216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010218:	440b      	add	r3, r1
 801021a:	3b01      	subs	r3, #1
 801021c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801021e:	8989      	ldrh	r1, [r1, #12]
 8010220:	fbb3 f3f1 	udiv	r3, r3, r1
 8010224:	429a      	cmp	r2, r3
 8010226:	d201      	bcs.n	801022c <find_volume+0x41c>
 8010228:	230d      	movs	r3, #13
 801022a:	e06a      	b.n	8010302 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010232:	615a      	str	r2, [r3, #20]
 8010234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010236:	695a      	ldr	r2, [r3, #20]
 8010238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801023c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023e:	2280      	movs	r2, #128	; 0x80
 8010240:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010242:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010246:	2b03      	cmp	r3, #3
 8010248:	d149      	bne.n	80102de <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801024a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024c:	3334      	adds	r3, #52	; 0x34
 801024e:	3330      	adds	r3, #48	; 0x30
 8010250:	4618      	mov	r0, r3
 8010252:	f7fe fa87 	bl	800e764 <ld_word>
 8010256:	4603      	mov	r3, r0
 8010258:	2b01      	cmp	r3, #1
 801025a:	d140      	bne.n	80102de <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801025c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801025e:	3301      	adds	r3, #1
 8010260:	4619      	mov	r1, r3
 8010262:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010264:	f7fe fd2e 	bl	800ecc4 <move_window>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d137      	bne.n	80102de <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801026e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010270:	2200      	movs	r2, #0
 8010272:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010276:	3334      	adds	r3, #52	; 0x34
 8010278:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801027c:	4618      	mov	r0, r3
 801027e:	f7fe fa71 	bl	800e764 <ld_word>
 8010282:	4603      	mov	r3, r0
 8010284:	461a      	mov	r2, r3
 8010286:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801028a:	429a      	cmp	r2, r3
 801028c:	d127      	bne.n	80102de <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010290:	3334      	adds	r3, #52	; 0x34
 8010292:	4618      	mov	r0, r3
 8010294:	f7fe fa7e 	bl	800e794 <ld_dword>
 8010298:	4602      	mov	r2, r0
 801029a:	4b1c      	ldr	r3, [pc, #112]	; (801030c <find_volume+0x4fc>)
 801029c:	429a      	cmp	r2, r3
 801029e:	d11e      	bne.n	80102de <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80102a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a2:	3334      	adds	r3, #52	; 0x34
 80102a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fe fa73 	bl	800e794 <ld_dword>
 80102ae:	4602      	mov	r2, r0
 80102b0:	4b17      	ldr	r3, [pc, #92]	; (8010310 <find_volume+0x500>)
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d113      	bne.n	80102de <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80102b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b8:	3334      	adds	r3, #52	; 0x34
 80102ba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fe fa68 	bl	800e794 <ld_dword>
 80102c4:	4602      	mov	r2, r0
 80102c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80102ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102cc:	3334      	adds	r3, #52	; 0x34
 80102ce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fa5e 	bl	800e794 <ld_dword>
 80102d8:	4602      	mov	r2, r0
 80102da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102dc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80102de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80102e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80102e6:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <find_volume+0x504>)
 80102e8:	881b      	ldrh	r3, [r3, #0]
 80102ea:	3301      	adds	r3, #1
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	4b09      	ldr	r3, [pc, #36]	; (8010314 <find_volume+0x504>)
 80102f0:	801a      	strh	r2, [r3, #0]
 80102f2:	4b08      	ldr	r3, [pc, #32]	; (8010314 <find_volume+0x504>)
 80102f4:	881a      	ldrh	r2, [r3, #0]
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80102fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102fc:	f7fe fc7a 	bl	800ebf4 <clear_lock>
#endif
	return FR_OK;
 8010300:	2300      	movs	r3, #0
}
 8010302:	4618      	mov	r0, r3
 8010304:	3758      	adds	r7, #88	; 0x58
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	41615252 	.word	0x41615252
 8010310:	61417272 	.word	0x61417272
 8010314:	200008b0 	.word	0x200008b0

08010318 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010322:	2309      	movs	r3, #9
 8010324:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d01c      	beq.n	8010366 <validate+0x4e>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d018      	beq.n	8010366 <validate+0x4e>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d013      	beq.n	8010366 <validate+0x4e>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	889a      	ldrh	r2, [r3, #4]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	88db      	ldrh	r3, [r3, #6]
 8010348:	429a      	cmp	r2, r3
 801034a:	d10c      	bne.n	8010366 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	785b      	ldrb	r3, [r3, #1]
 8010352:	4618      	mov	r0, r3
 8010354:	f7fe f968 	bl	800e628 <disk_status>
 8010358:	4603      	mov	r3, r0
 801035a:	f003 0301 	and.w	r3, r3, #1
 801035e:	2b00      	cmp	r3, #0
 8010360:	d101      	bne.n	8010366 <validate+0x4e>
			res = FR_OK;
 8010362:	2300      	movs	r3, #0
 8010364:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010366:	7bfb      	ldrb	r3, [r7, #15]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d102      	bne.n	8010372 <validate+0x5a>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	e000      	b.n	8010374 <validate+0x5c>
 8010372:	2300      	movs	r3, #0
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	6013      	str	r3, [r2, #0]
	return res;
 8010378:	7bfb      	ldrb	r3, [r7, #15]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
	...

08010384 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b088      	sub	sp, #32
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	60b9      	str	r1, [r7, #8]
 801038e:	4613      	mov	r3, r2
 8010390:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010396:	f107 0310 	add.w	r3, r7, #16
 801039a:	4618      	mov	r0, r3
 801039c:	f7ff fc9e 	bl	800fcdc <get_ldnumber>
 80103a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	da01      	bge.n	80103ac <f_mount+0x28>
 80103a8:	230b      	movs	r3, #11
 80103aa:	e02b      	b.n	8010404 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80103ac:	4a17      	ldr	r2, [pc, #92]	; (801040c <f_mount+0x88>)
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d005      	beq.n	80103c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80103bc:	69b8      	ldr	r0, [r7, #24]
 80103be:	f7fe fc19 	bl	800ebf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	2200      	movs	r2, #0
 80103c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d002      	beq.n	80103d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2200      	movs	r2, #0
 80103d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80103d4:	68fa      	ldr	r2, [r7, #12]
 80103d6:	490d      	ldr	r1, [pc, #52]	; (801040c <f_mount+0x88>)
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <f_mount+0x66>
 80103e4:	79fb      	ldrb	r3, [r7, #7]
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d001      	beq.n	80103ee <f_mount+0x6a>
 80103ea:	2300      	movs	r3, #0
 80103ec:	e00a      	b.n	8010404 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80103ee:	f107 010c 	add.w	r1, r7, #12
 80103f2:	f107 0308 	add.w	r3, r7, #8
 80103f6:	2200      	movs	r2, #0
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff fd09 	bl	800fe10 <find_volume>
 80103fe:	4603      	mov	r3, r0
 8010400:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010402:	7dfb      	ldrb	r3, [r7, #23]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3720      	adds	r7, #32
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	200008ac 	.word	0x200008ac

08010410 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b098      	sub	sp, #96	; 0x60
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	4613      	mov	r3, r2
 801041c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d101      	bne.n	8010428 <f_open+0x18>
 8010424:	2309      	movs	r3, #9
 8010426:	e1bb      	b.n	80107a0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010428:	79fb      	ldrb	r3, [r7, #7]
 801042a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801042e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010430:	79fa      	ldrb	r2, [r7, #7]
 8010432:	f107 0110 	add.w	r1, r7, #16
 8010436:	f107 0308 	add.w	r3, r7, #8
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff fce8 	bl	800fe10 <find_volume>
 8010440:	4603      	mov	r3, r0
 8010442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801044a:	2b00      	cmp	r3, #0
 801044c:	f040 819f 	bne.w	801078e <f_open+0x37e>
		dj.obj.fs = fs;
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010454:	68ba      	ldr	r2, [r7, #8]
 8010456:	f107 0314 	add.w	r3, r7, #20
 801045a:	4611      	mov	r1, r2
 801045c:	4618      	mov	r0, r3
 801045e:	f7ff fbc7 	bl	800fbf0 <follow_path>
 8010462:	4603      	mov	r3, r0
 8010464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801046c:	2b00      	cmp	r3, #0
 801046e:	d11a      	bne.n	80104a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010470:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010474:	b25b      	sxtb	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	da03      	bge.n	8010482 <f_open+0x72>
				res = FR_INVALID_NAME;
 801047a:	2306      	movs	r3, #6
 801047c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010480:	e011      	b.n	80104a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010482:	79fb      	ldrb	r3, [r7, #7]
 8010484:	f023 0301 	bic.w	r3, r3, #1
 8010488:	2b00      	cmp	r3, #0
 801048a:	bf14      	ite	ne
 801048c:	2301      	movne	r3, #1
 801048e:	2300      	moveq	r3, #0
 8010490:	b2db      	uxtb	r3, r3
 8010492:	461a      	mov	r2, r3
 8010494:	f107 0314 	add.w	r3, r7, #20
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f7fe fa62 	bl	800e964 <chk_lock>
 80104a0:	4603      	mov	r3, r0
 80104a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	f003 031c 	and.w	r3, r3, #28
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d07f      	beq.n	80105b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80104b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d017      	beq.n	80104e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80104b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104bc:	2b04      	cmp	r3, #4
 80104be:	d10e      	bne.n	80104de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80104c0:	f7fe faac 	bl	800ea1c <enq_lock>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d006      	beq.n	80104d8 <f_open+0xc8>
 80104ca:	f107 0314 	add.w	r3, r7, #20
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7ff fa68 	bl	800f9a4 <dir_register>
 80104d4:	4603      	mov	r3, r0
 80104d6:	e000      	b.n	80104da <f_open+0xca>
 80104d8:	2312      	movs	r3, #18
 80104da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80104de:	79fb      	ldrb	r3, [r7, #7]
 80104e0:	f043 0308 	orr.w	r3, r3, #8
 80104e4:	71fb      	strb	r3, [r7, #7]
 80104e6:	e010      	b.n	801050a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80104e8:	7ebb      	ldrb	r3, [r7, #26]
 80104ea:	f003 0311 	and.w	r3, r3, #17
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d003      	beq.n	80104fa <f_open+0xea>
					res = FR_DENIED;
 80104f2:	2307      	movs	r3, #7
 80104f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104f8:	e007      	b.n	801050a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80104fa:	79fb      	ldrb	r3, [r7, #7]
 80104fc:	f003 0304 	and.w	r3, r3, #4
 8010500:	2b00      	cmp	r3, #0
 8010502:	d002      	beq.n	801050a <f_open+0xfa>
 8010504:	2308      	movs	r3, #8
 8010506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801050a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801050e:	2b00      	cmp	r3, #0
 8010510:	d168      	bne.n	80105e4 <f_open+0x1d4>
 8010512:	79fb      	ldrb	r3, [r7, #7]
 8010514:	f003 0308 	and.w	r3, r3, #8
 8010518:	2b00      	cmp	r3, #0
 801051a:	d063      	beq.n	80105e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801051c:	f7fd fe32 	bl	800e184 <get_fattime>
 8010520:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010524:	330e      	adds	r3, #14
 8010526:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010528:	4618      	mov	r0, r3
 801052a:	f7fe f971 	bl	800e810 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010530:	3316      	adds	r3, #22
 8010532:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010534:	4618      	mov	r0, r3
 8010536:	f7fe f96b 	bl	800e810 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801053a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053c:	330b      	adds	r3, #11
 801053e:	2220      	movs	r2, #32
 8010540:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010546:	4611      	mov	r1, r2
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff f93a 	bl	800f7c2 <ld_clust>
 801054e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010554:	2200      	movs	r2, #0
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff f952 	bl	800f800 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801055c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055e:	331c      	adds	r3, #28
 8010560:	2100      	movs	r1, #0
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe f954 	bl	800e810 <st_dword>
					fs->wflag = 1;
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	2201      	movs	r2, #1
 801056c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801056e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010570:	2b00      	cmp	r3, #0
 8010572:	d037      	beq.n	80105e4 <f_open+0x1d4>
						dw = fs->winsect;
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010578:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801057a:	f107 0314 	add.w	r3, r7, #20
 801057e:	2200      	movs	r2, #0
 8010580:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010582:	4618      	mov	r0, r3
 8010584:	f7fe fe42 	bl	800f20c <remove_chain>
 8010588:	4603      	mov	r3, r0
 801058a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801058e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010592:	2b00      	cmp	r3, #0
 8010594:	d126      	bne.n	80105e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fb92 	bl	800ecc4 <move_window>
 80105a0:	4603      	mov	r3, r0
 80105a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105aa:	3a01      	subs	r2, #1
 80105ac:	611a      	str	r2, [r3, #16]
 80105ae:	e019      	b.n	80105e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80105b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d115      	bne.n	80105e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80105b8:	7ebb      	ldrb	r3, [r7, #26]
 80105ba:	f003 0310 	and.w	r3, r3, #16
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d003      	beq.n	80105ca <f_open+0x1ba>
					res = FR_NO_FILE;
 80105c2:	2304      	movs	r3, #4
 80105c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105c8:	e00c      	b.n	80105e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80105ca:	79fb      	ldrb	r3, [r7, #7]
 80105cc:	f003 0302 	and.w	r3, r3, #2
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d007      	beq.n	80105e4 <f_open+0x1d4>
 80105d4:	7ebb      	ldrb	r3, [r7, #26]
 80105d6:	f003 0301 	and.w	r3, r3, #1
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d002      	beq.n	80105e4 <f_open+0x1d4>
						res = FR_DENIED;
 80105de:	2307      	movs	r3, #7
 80105e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80105e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d128      	bne.n	801063e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80105ec:	79fb      	ldrb	r3, [r7, #7]
 80105ee:	f003 0308 	and.w	r3, r3, #8
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d003      	beq.n	80105fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80105f6:	79fb      	ldrb	r3, [r7, #7]
 80105f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801060c:	79fb      	ldrb	r3, [r7, #7]
 801060e:	f023 0301 	bic.w	r3, r3, #1
 8010612:	2b00      	cmp	r3, #0
 8010614:	bf14      	ite	ne
 8010616:	2301      	movne	r3, #1
 8010618:	2300      	moveq	r3, #0
 801061a:	b2db      	uxtb	r3, r3
 801061c:	461a      	mov	r2, r3
 801061e:	f107 0314 	add.w	r3, r7, #20
 8010622:	4611      	mov	r1, r2
 8010624:	4618      	mov	r0, r3
 8010626:	f7fe fa1b 	bl	800ea60 <inc_lock>
 801062a:	4602      	mov	r2, r0
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d102      	bne.n	801063e <f_open+0x22e>
 8010638:	2302      	movs	r3, #2
 801063a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801063e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010642:	2b00      	cmp	r3, #0
 8010644:	f040 80a3 	bne.w	801078e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801064c:	4611      	mov	r1, r2
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff f8b7 	bl	800f7c2 <ld_clust>
 8010654:	4602      	mov	r2, r0
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065c:	331c      	adds	r3, #28
 801065e:	4618      	mov	r0, r3
 8010660:	f7fe f898 	bl	800e794 <ld_dword>
 8010664:	4602      	mov	r2, r0
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010670:	693a      	ldr	r2, [r7, #16]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	88da      	ldrh	r2, [r3, #6]
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	79fa      	ldrb	r2, [r7, #7]
 8010682:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2200      	movs	r2, #0
 8010688:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2200      	movs	r2, #0
 8010694:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	3330      	adds	r3, #48	; 0x30
 801069a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801069e:	2100      	movs	r1, #0
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7fe f902 	bl	800e8aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80106a6:	79fb      	ldrb	r3, [r7, #7]
 80106a8:	f003 0320 	and.w	r3, r3, #32
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d06e      	beq.n	801078e <f_open+0x37e>
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d06a      	beq.n	801078e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	68da      	ldr	r2, [r3, #12]
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	895b      	ldrh	r3, [r3, #10]
 80106c4:	461a      	mov	r2, r3
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	899b      	ldrh	r3, [r3, #12]
 80106ca:	fb03 f302 	mul.w	r3, r3, r2
 80106ce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	657b      	str	r3, [r7, #84]	; 0x54
 80106dc:	e016      	b.n	801070c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7fe fbab 	bl	800ee3e <get_fat>
 80106e8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80106ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d802      	bhi.n	80106f6 <f_open+0x2e6>
 80106f0:	2302      	movs	r3, #2
 80106f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80106f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106fc:	d102      	bne.n	8010704 <f_open+0x2f4>
 80106fe:	2301      	movs	r3, #1
 8010700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010704:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010708:	1ad3      	subs	r3, r2, r3
 801070a:	657b      	str	r3, [r7, #84]	; 0x54
 801070c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010710:	2b00      	cmp	r3, #0
 8010712:	d103      	bne.n	801071c <f_open+0x30c>
 8010714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010718:	429a      	cmp	r2, r3
 801071a:	d8e0      	bhi.n	80106de <f_open+0x2ce>
				}
				fp->clust = clst;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010720:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010726:	2b00      	cmp	r3, #0
 8010728:	d131      	bne.n	801078e <f_open+0x37e>
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	899b      	ldrh	r3, [r3, #12]
 801072e:	461a      	mov	r2, r3
 8010730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010732:	fbb3 f1f2 	udiv	r1, r3, r2
 8010736:	fb02 f201 	mul.w	r2, r2, r1
 801073a:	1a9b      	subs	r3, r3, r2
 801073c:	2b00      	cmp	r3, #0
 801073e:	d026      	beq.n	801078e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010744:	4618      	mov	r0, r3
 8010746:	f7fe fb5b 	bl	800ee00 <clust2sect>
 801074a:	6478      	str	r0, [r7, #68]	; 0x44
 801074c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801074e:	2b00      	cmp	r3, #0
 8010750:	d103      	bne.n	801075a <f_open+0x34a>
						res = FR_INT_ERR;
 8010752:	2302      	movs	r3, #2
 8010754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010758:	e019      	b.n	801078e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	899b      	ldrh	r3, [r3, #12]
 801075e:	461a      	mov	r2, r3
 8010760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010762:	fbb3 f2f2 	udiv	r2, r3, r2
 8010766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010768:	441a      	add	r2, r3
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	7858      	ldrb	r0, [r3, #1]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6a1a      	ldr	r2, [r3, #32]
 801077c:	2301      	movs	r3, #1
 801077e:	f7fd ff93 	bl	800e6a8 <disk_read>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <f_open+0x37e>
 8010788:	2301      	movs	r3, #1
 801078a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801078e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010792:	2b00      	cmp	r3, #0
 8010794:	d002      	beq.n	801079c <f_open+0x38c>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2200      	movs	r2, #0
 801079a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801079c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3760      	adds	r7, #96	; 0x60
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b08e      	sub	sp, #56	; 0x38
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f107 0214 	add.w	r2, r7, #20
 80107c6:	4611      	mov	r1, r2
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fda5 	bl	8010318 <validate>
 80107ce:	4603      	mov	r3, r0
 80107d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80107d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d107      	bne.n	80107ec <f_read+0x44>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	7d5b      	ldrb	r3, [r3, #21]
 80107e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <f_read+0x4a>
 80107ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107f0:	e135      	b.n	8010a5e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	7d1b      	ldrb	r3, [r3, #20]
 80107f6:	f003 0301 	and.w	r3, r3, #1
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d101      	bne.n	8010802 <f_read+0x5a>
 80107fe:	2307      	movs	r3, #7
 8010800:	e12d      	b.n	8010a5e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	68da      	ldr	r2, [r3, #12]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	1ad3      	subs	r3, r2, r3
 801080c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	429a      	cmp	r2, r3
 8010814:	f240 811e 	bls.w	8010a54 <f_read+0x2ac>
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801081c:	e11a      	b.n	8010a54 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	699b      	ldr	r3, [r3, #24]
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	8992      	ldrh	r2, [r2, #12]
 8010826:	fbb3 f1f2 	udiv	r1, r3, r2
 801082a:	fb02 f201 	mul.w	r2, r2, r1
 801082e:	1a9b      	subs	r3, r3, r2
 8010830:	2b00      	cmp	r3, #0
 8010832:	f040 80d5 	bne.w	80109e0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	697a      	ldr	r2, [r7, #20]
 801083c:	8992      	ldrh	r2, [r2, #12]
 801083e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010842:	697a      	ldr	r2, [r7, #20]
 8010844:	8952      	ldrh	r2, [r2, #10]
 8010846:	3a01      	subs	r2, #1
 8010848:	4013      	ands	r3, r2
 801084a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d12f      	bne.n	80108b2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	699b      	ldr	r3, [r3, #24]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d103      	bne.n	8010862 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	689b      	ldr	r3, [r3, #8]
 801085e:	633b      	str	r3, [r7, #48]	; 0x30
 8010860:	e013      	b.n	801088a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010866:	2b00      	cmp	r3, #0
 8010868:	d007      	beq.n	801087a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	699b      	ldr	r3, [r3, #24]
 801086e:	4619      	mov	r1, r3
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f7fe fdc8 	bl	800f406 <clmt_clust>
 8010876:	6338      	str	r0, [r7, #48]	; 0x30
 8010878:	e007      	b.n	801088a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	69db      	ldr	r3, [r3, #28]
 8010880:	4619      	mov	r1, r3
 8010882:	4610      	mov	r0, r2
 8010884:	f7fe fadb 	bl	800ee3e <get_fat>
 8010888:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	2b01      	cmp	r3, #1
 801088e:	d804      	bhi.n	801089a <f_read+0xf2>
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2202      	movs	r2, #2
 8010894:	755a      	strb	r2, [r3, #21]
 8010896:	2302      	movs	r3, #2
 8010898:	e0e1      	b.n	8010a5e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108a0:	d104      	bne.n	80108ac <f_read+0x104>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	755a      	strb	r2, [r3, #21]
 80108a8:	2301      	movs	r3, #1
 80108aa:	e0d8      	b.n	8010a5e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	69db      	ldr	r3, [r3, #28]
 80108b8:	4619      	mov	r1, r3
 80108ba:	4610      	mov	r0, r2
 80108bc:	f7fe faa0 	bl	800ee00 <clust2sect>
 80108c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d104      	bne.n	80108d2 <f_read+0x12a>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2202      	movs	r2, #2
 80108cc:	755a      	strb	r2, [r3, #21]
 80108ce:	2302      	movs	r3, #2
 80108d0:	e0c5      	b.n	8010a5e <f_read+0x2b6>
			sect += csect;
 80108d2:	69ba      	ldr	r2, [r7, #24]
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	4413      	add	r3, r2
 80108d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	899b      	ldrh	r3, [r3, #12]
 80108de:	461a      	mov	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80108e6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80108e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d041      	beq.n	8010972 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80108ee:	69fa      	ldr	r2, [r7, #28]
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	4413      	add	r3, r2
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	8952      	ldrh	r2, [r2, #10]
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d905      	bls.n	8010908 <f_read+0x160>
					cc = fs->csize - csect;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	895b      	ldrh	r3, [r3, #10]
 8010900:	461a      	mov	r2, r3
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	7858      	ldrb	r0, [r3, #1]
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	69ba      	ldr	r2, [r7, #24]
 8010910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010912:	f7fd fec9 	bl	800e6a8 <disk_read>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d004      	beq.n	8010926 <f_read+0x17e>
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2201      	movs	r2, #1
 8010920:	755a      	strb	r2, [r3, #21]
 8010922:	2301      	movs	r3, #1
 8010924:	e09b      	b.n	8010a5e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	7d1b      	ldrb	r3, [r3, #20]
 801092a:	b25b      	sxtb	r3, r3
 801092c:	2b00      	cmp	r3, #0
 801092e:	da18      	bge.n	8010962 <f_read+0x1ba>
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6a1a      	ldr	r2, [r3, #32]
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801093a:	429a      	cmp	r2, r3
 801093c:	d911      	bls.n	8010962 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	6a1a      	ldr	r2, [r3, #32]
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	1ad3      	subs	r3, r2, r3
 8010946:	697a      	ldr	r2, [r7, #20]
 8010948:	8992      	ldrh	r2, [r2, #12]
 801094a:	fb02 f303 	mul.w	r3, r2, r3
 801094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010950:	18d0      	adds	r0, r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	899b      	ldrh	r3, [r3, #12]
 801095c:	461a      	mov	r2, r3
 801095e:	f7fd ff83 	bl	800e868 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	899b      	ldrh	r3, [r3, #12]
 8010966:	461a      	mov	r2, r3
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	fb02 f303 	mul.w	r3, r2, r3
 801096e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010970:	e05c      	b.n	8010a2c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6a1b      	ldr	r3, [r3, #32]
 8010976:	69ba      	ldr	r2, [r7, #24]
 8010978:	429a      	cmp	r2, r3
 801097a:	d02e      	beq.n	80109da <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	7d1b      	ldrb	r3, [r3, #20]
 8010980:	b25b      	sxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	da18      	bge.n	80109b8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	7858      	ldrb	r0, [r3, #1]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	6a1a      	ldr	r2, [r3, #32]
 8010994:	2301      	movs	r3, #1
 8010996:	f7fd fea7 	bl	800e6e8 <disk_write>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d004      	beq.n	80109aa <f_read+0x202>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2201      	movs	r2, #1
 80109a4:	755a      	strb	r2, [r3, #21]
 80109a6:	2301      	movs	r3, #1
 80109a8:	e059      	b.n	8010a5e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	7d1b      	ldrb	r3, [r3, #20]
 80109ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109b2:	b2da      	uxtb	r2, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	7858      	ldrb	r0, [r3, #1]
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109c2:	2301      	movs	r3, #1
 80109c4:	69ba      	ldr	r2, [r7, #24]
 80109c6:	f7fd fe6f 	bl	800e6a8 <disk_read>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d004      	beq.n	80109da <f_read+0x232>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2201      	movs	r2, #1
 80109d4:	755a      	strb	r2, [r3, #21]
 80109d6:	2301      	movs	r3, #1
 80109d8:	e041      	b.n	8010a5e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	899b      	ldrh	r3, [r3, #12]
 80109e4:	4618      	mov	r0, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	697a      	ldr	r2, [r7, #20]
 80109ec:	8992      	ldrh	r2, [r2, #12]
 80109ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80109f2:	fb02 f201 	mul.w	r2, r2, r1
 80109f6:	1a9b      	subs	r3, r3, r2
 80109f8:	1ac3      	subs	r3, r0, r3
 80109fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80109fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d901      	bls.n	8010a08 <f_read+0x260>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	699b      	ldr	r3, [r3, #24]
 8010a12:	697a      	ldr	r2, [r7, #20]
 8010a14:	8992      	ldrh	r2, [r2, #12]
 8010a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a1a:	fb02 f200 	mul.w	r2, r2, r0
 8010a1e:	1a9b      	subs	r3, r3, r2
 8010a20:	440b      	add	r3, r1
 8010a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a24:	4619      	mov	r1, r3
 8010a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a28:	f7fd ff1e 	bl	800e868 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a30:	4413      	add	r3, r2
 8010a32:	627b      	str	r3, [r7, #36]	; 0x24
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	699a      	ldr	r2, [r3, #24]
 8010a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3a:	441a      	add	r2, r3
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	619a      	str	r2, [r3, #24]
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a46:	441a      	add	r2, r3
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	601a      	str	r2, [r3, #0]
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a50:	1ad3      	subs	r3, r2, r3
 8010a52:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f47f aee1 	bne.w	801081e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3738      	adds	r7, #56	; 0x38
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b08c      	sub	sp, #48	; 0x30
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	60f8      	str	r0, [r7, #12]
 8010a6e:	60b9      	str	r1, [r7, #8]
 8010a70:	607a      	str	r2, [r7, #4]
 8010a72:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f107 0210 	add.w	r2, r7, #16
 8010a84:	4611      	mov	r1, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff fc46 	bl	8010318 <validate>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d107      	bne.n	8010aaa <f_write+0x44>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	7d5b      	ldrb	r3, [r3, #21]
 8010a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d002      	beq.n	8010ab0 <f_write+0x4a>
 8010aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010aae:	e16a      	b.n	8010d86 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	7d1b      	ldrb	r3, [r3, #20]
 8010ab4:	f003 0302 	and.w	r3, r3, #2
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d101      	bne.n	8010ac0 <f_write+0x5a>
 8010abc:	2307      	movs	r3, #7
 8010abe:	e162      	b.n	8010d86 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	699a      	ldr	r2, [r3, #24]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	441a      	add	r2, r3
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	699b      	ldr	r3, [r3, #24]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	f080 814c 	bcs.w	8010d6a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	699b      	ldr	r3, [r3, #24]
 8010ad6:	43db      	mvns	r3, r3
 8010ad8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010ada:	e146      	b.n	8010d6a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	699b      	ldr	r3, [r3, #24]
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	8992      	ldrh	r2, [r2, #12]
 8010ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ae8:	fb02 f201 	mul.w	r2, r2, r1
 8010aec:	1a9b      	subs	r3, r3, r2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f040 80f1 	bne.w	8010cd6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	699b      	ldr	r3, [r3, #24]
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	8992      	ldrh	r2, [r2, #12]
 8010afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b00:	693a      	ldr	r2, [r7, #16]
 8010b02:	8952      	ldrh	r2, [r2, #10]
 8010b04:	3a01      	subs	r2, #1
 8010b06:	4013      	ands	r3, r2
 8010b08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d143      	bne.n	8010b98 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10c      	bne.n	8010b32 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d11a      	bne.n	8010b5a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2100      	movs	r1, #0
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fe fbd4 	bl	800f2d6 <create_chain>
 8010b2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b30:	e013      	b.n	8010b5a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d007      	beq.n	8010b4a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	699b      	ldr	r3, [r3, #24]
 8010b3e:	4619      	mov	r1, r3
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	f7fe fc60 	bl	800f406 <clmt_clust>
 8010b46:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b48:	e007      	b.n	8010b5a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	69db      	ldr	r3, [r3, #28]
 8010b50:	4619      	mov	r1, r3
 8010b52:	4610      	mov	r0, r2
 8010b54:	f7fe fbbf 	bl	800f2d6 <create_chain>
 8010b58:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f000 8109 	beq.w	8010d74 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d104      	bne.n	8010b72 <f_write+0x10c>
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2202      	movs	r2, #2
 8010b6c:	755a      	strb	r2, [r3, #21]
 8010b6e:	2302      	movs	r3, #2
 8010b70:	e109      	b.n	8010d86 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b78:	d104      	bne.n	8010b84 <f_write+0x11e>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	755a      	strb	r2, [r3, #21]
 8010b80:	2301      	movs	r3, #1
 8010b82:	e100      	b.n	8010d86 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	689b      	ldr	r3, [r3, #8]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d102      	bne.n	8010b98 <f_write+0x132>
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	7d1b      	ldrb	r3, [r3, #20]
 8010b9c:	b25b      	sxtb	r3, r3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da18      	bge.n	8010bd4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	7858      	ldrb	r0, [r3, #1]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6a1a      	ldr	r2, [r3, #32]
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	f7fd fd99 	bl	800e6e8 <disk_write>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d004      	beq.n	8010bc6 <f_write+0x160>
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	755a      	strb	r2, [r3, #21]
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e0df      	b.n	8010d86 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	7d1b      	ldrb	r3, [r3, #20]
 8010bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	69db      	ldr	r3, [r3, #28]
 8010bda:	4619      	mov	r1, r3
 8010bdc:	4610      	mov	r0, r2
 8010bde:	f7fe f90f 	bl	800ee00 <clust2sect>
 8010be2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d104      	bne.n	8010bf4 <f_write+0x18e>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2202      	movs	r2, #2
 8010bee:	755a      	strb	r2, [r3, #21]
 8010bf0:	2302      	movs	r3, #2
 8010bf2:	e0c8      	b.n	8010d86 <f_write+0x320>
			sect += csect;
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	899b      	ldrh	r3, [r3, #12]
 8010c00:	461a      	mov	r2, r3
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c08:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c0a:	6a3b      	ldr	r3, [r7, #32]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d043      	beq.n	8010c98 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c10:	69ba      	ldr	r2, [r7, #24]
 8010c12:	6a3b      	ldr	r3, [r7, #32]
 8010c14:	4413      	add	r3, r2
 8010c16:	693a      	ldr	r2, [r7, #16]
 8010c18:	8952      	ldrh	r2, [r2, #10]
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d905      	bls.n	8010c2a <f_write+0x1c4>
					cc = fs->csize - csect;
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	895b      	ldrh	r3, [r3, #10]
 8010c22:	461a      	mov	r2, r3
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	7858      	ldrb	r0, [r3, #1]
 8010c2e:	6a3b      	ldr	r3, [r7, #32]
 8010c30:	697a      	ldr	r2, [r7, #20]
 8010c32:	69f9      	ldr	r1, [r7, #28]
 8010c34:	f7fd fd58 	bl	800e6e8 <disk_write>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d004      	beq.n	8010c48 <f_write+0x1e2>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2201      	movs	r2, #1
 8010c42:	755a      	strb	r2, [r3, #21]
 8010c44:	2301      	movs	r3, #1
 8010c46:	e09e      	b.n	8010d86 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	6a1a      	ldr	r2, [r3, #32]
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	6a3a      	ldr	r2, [r7, #32]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d918      	bls.n	8010c88 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	6a1a      	ldr	r2, [r3, #32]
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	693a      	ldr	r2, [r7, #16]
 8010c66:	8992      	ldrh	r2, [r2, #12]
 8010c68:	fb02 f303 	mul.w	r3, r2, r3
 8010c6c:	69fa      	ldr	r2, [r7, #28]
 8010c6e:	18d1      	adds	r1, r2, r3
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	899b      	ldrh	r3, [r3, #12]
 8010c74:	461a      	mov	r2, r3
 8010c76:	f7fd fdf7 	bl	800e868 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	7d1b      	ldrb	r3, [r3, #20]
 8010c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	899b      	ldrh	r3, [r3, #12]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6a3b      	ldr	r3, [r7, #32]
 8010c90:	fb02 f303 	mul.w	r3, r2, r3
 8010c94:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010c96:	e04b      	b.n	8010d30 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	6a1b      	ldr	r3, [r3, #32]
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d016      	beq.n	8010cd0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	699a      	ldr	r2, [r3, #24]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d210      	bcs.n	8010cd0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	7858      	ldrb	r0, [r3, #1]
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010cb8:	2301      	movs	r3, #1
 8010cba:	697a      	ldr	r2, [r7, #20]
 8010cbc:	f7fd fcf4 	bl	800e6a8 <disk_read>
 8010cc0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d004      	beq.n	8010cd0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	755a      	strb	r2, [r3, #21]
 8010ccc:	2301      	movs	r3, #1
 8010cce:	e05a      	b.n	8010d86 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	697a      	ldr	r2, [r7, #20]
 8010cd4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	899b      	ldrh	r3, [r3, #12]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	8992      	ldrh	r2, [r2, #12]
 8010ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ce8:	fb02 f201 	mul.w	r2, r2, r1
 8010cec:	1a9b      	subs	r3, r3, r2
 8010cee:	1ac3      	subs	r3, r0, r3
 8010cf0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d901      	bls.n	8010cfe <f_write+0x298>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	699b      	ldr	r3, [r3, #24]
 8010d08:	693a      	ldr	r2, [r7, #16]
 8010d0a:	8992      	ldrh	r2, [r2, #12]
 8010d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d10:	fb02 f200 	mul.w	r2, r2, r0
 8010d14:	1a9b      	subs	r3, r3, r2
 8010d16:	440b      	add	r3, r1
 8010d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d1a:	69f9      	ldr	r1, [r7, #28]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fd fda3 	bl	800e868 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	7d1b      	ldrb	r3, [r3, #20]
 8010d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010d30:	69fa      	ldr	r2, [r7, #28]
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d34:	4413      	add	r3, r2
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	699a      	ldr	r2, [r3, #24]
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	441a      	add	r2, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	619a      	str	r2, [r3, #24]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	68da      	ldr	r2, [r3, #12]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	699b      	ldr	r3, [r3, #24]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	bf38      	it	cc
 8010d50:	461a      	movcc	r2, r3
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	60da      	str	r2, [r3, #12]
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	441a      	add	r2, r3
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f47f aeb5 	bne.w	8010adc <f_write+0x76>
 8010d72:	e000      	b.n	8010d76 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d74:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	7d1b      	ldrb	r3, [r3, #20]
 8010d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010d84:	2300      	movs	r3, #0
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3730      	adds	r7, #48	; 0x30
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b086      	sub	sp, #24
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f107 0208 	add.w	r2, r7, #8
 8010d9c:	4611      	mov	r1, r2
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7ff faba 	bl	8010318 <validate>
 8010da4:	4603      	mov	r3, r0
 8010da6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d168      	bne.n	8010e80 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	7d1b      	ldrb	r3, [r3, #20]
 8010db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d062      	beq.n	8010e80 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	7d1b      	ldrb	r3, [r3, #20]
 8010dbe:	b25b      	sxtb	r3, r3
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	da15      	bge.n	8010df0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	7858      	ldrb	r0, [r3, #1]
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6a1a      	ldr	r2, [r3, #32]
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	f7fd fc88 	bl	800e6e8 <disk_write>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <f_sync+0x54>
 8010dde:	2301      	movs	r3, #1
 8010de0:	e04f      	b.n	8010e82 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	7d1b      	ldrb	r3, [r3, #20]
 8010de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dea:	b2da      	uxtb	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010df0:	f7fd f9c8 	bl	800e184 <get_fattime>
 8010df4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	4610      	mov	r0, r2
 8010e00:	f7fd ff60 	bl	800ecc4 <move_window>
 8010e04:	4603      	mov	r3, r0
 8010e06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010e08:	7dfb      	ldrb	r3, [r7, #23]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d138      	bne.n	8010e80 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	330b      	adds	r3, #11
 8010e18:	781a      	ldrb	r2, [r3, #0]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	330b      	adds	r3, #11
 8010e1e:	f042 0220 	orr.w	r2, r2, #32
 8010e22:	b2d2      	uxtb	r2, r2
 8010e24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6818      	ldr	r0, [r3, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	689b      	ldr	r3, [r3, #8]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	68f9      	ldr	r1, [r7, #12]
 8010e32:	f7fe fce5 	bl	800f800 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f103 021c 	add.w	r2, r3, #28
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	4619      	mov	r1, r3
 8010e42:	4610      	mov	r0, r2
 8010e44:	f7fd fce4 	bl	800e810 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	3316      	adds	r3, #22
 8010e4c:	6939      	ldr	r1, [r7, #16]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7fd fcde 	bl	800e810 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	3312      	adds	r3, #18
 8010e58:	2100      	movs	r1, #0
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fd fcbd 	bl	800e7da <st_word>
					fs->wflag = 1;
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	2201      	movs	r2, #1
 8010e64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fd ff59 	bl	800ed20 <sync_fs>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	7d1b      	ldrb	r3, [r3, #20]
 8010e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3718      	adds	r7, #24
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b084      	sub	sp, #16
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f7ff ff7b 	bl	8010d8e <f_sync>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010e9c:	7bfb      	ldrb	r3, [r7, #15]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d118      	bne.n	8010ed4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f107 0208 	add.w	r2, r7, #8
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff fa34 	bl	8010318 <validate>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010eb4:	7bfb      	ldrb	r3, [r7, #15]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d10c      	bne.n	8010ed4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fd fe5c 	bl	800eb7c <dec_lock>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010ec8:	7bfb      	ldrb	r3, [r7, #15]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d102      	bne.n	8010ed4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b090      	sub	sp, #64	; 0x40
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f107 0208 	add.w	r2, r7, #8
 8010eee:	4611      	mov	r1, r2
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7ff fa11 	bl	8010318 <validate>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010efc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d103      	bne.n	8010f0c <f_lseek+0x2e>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7d5b      	ldrb	r3, [r3, #21]
 8010f08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010f0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <f_lseek+0x3c>
 8010f14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f18:	e201      	b.n	801131e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	f000 80d9 	beq.w	80110d6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f2a:	d15a      	bne.n	8010fe2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f30:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	1d1a      	adds	r2, r3, #4
 8010f36:	627a      	str	r2, [r7, #36]	; 0x24
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	617b      	str	r3, [r7, #20]
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d03a      	beq.n	8010fc2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4e:	613b      	str	r3, [r7, #16]
 8010f50:	2300      	movs	r3, #0
 8010f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f56:	3302      	adds	r3, #2
 8010f58:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	60fb      	str	r3, [r7, #12]
 8010f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f60:	3301      	adds	r3, #1
 8010f62:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fd ff68 	bl	800ee3e <get_fat>
 8010f6e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d804      	bhi.n	8010f80 <f_lseek+0xa2>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2202      	movs	r2, #2
 8010f7a:	755a      	strb	r2, [r3, #21]
 8010f7c:	2302      	movs	r3, #2
 8010f7e:	e1ce      	b.n	801131e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f86:	d104      	bne.n	8010f92 <f_lseek+0xb4>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	755a      	strb	r2, [r3, #21]
 8010f8e:	2301      	movs	r3, #1
 8010f90:	e1c5      	b.n	801131e <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	3301      	adds	r3, #1
 8010f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d0de      	beq.n	8010f5a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d809      	bhi.n	8010fb8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa6:	1d1a      	adds	r2, r3, #4
 8010fa8:	627a      	str	r2, [r7, #36]	; 0x24
 8010faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	1d1a      	adds	r2, r3, #4
 8010fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8010fb4:	693a      	ldr	r2, [r7, #16]
 8010fb6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d3c4      	bcc.n	8010f4c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fc8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d803      	bhi.n	8010fda <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	601a      	str	r2, [r3, #0]
 8010fd8:	e19f      	b.n	801131a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010fda:	2311      	movs	r3, #17
 8010fdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010fe0:	e19b      	b.n	801131a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d902      	bls.n	8010ff2 <f_lseek+0x114>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	683a      	ldr	r2, [r7, #0]
 8010ff6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f000 818d 	beq.w	801131a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	3b01      	subs	r3, #1
 8011004:	4619      	mov	r1, r3
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7fe f9fd 	bl	800f406 <clmt_clust>
 801100c:	4602      	mov	r2, r0
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011012:	68ba      	ldr	r2, [r7, #8]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	69db      	ldr	r3, [r3, #28]
 8011018:	4619      	mov	r1, r3
 801101a:	4610      	mov	r0, r2
 801101c:	f7fd fef0 	bl	800ee00 <clust2sect>
 8011020:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011022:	69bb      	ldr	r3, [r7, #24]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d104      	bne.n	8011032 <f_lseek+0x154>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2202      	movs	r2, #2
 801102c:	755a      	strb	r2, [r3, #21]
 801102e:	2302      	movs	r3, #2
 8011030:	e175      	b.n	801131e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	3b01      	subs	r3, #1
 8011036:	68ba      	ldr	r2, [r7, #8]
 8011038:	8992      	ldrh	r2, [r2, #12]
 801103a:	fbb3 f3f2 	udiv	r3, r3, r2
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	8952      	ldrh	r2, [r2, #10]
 8011042:	3a01      	subs	r2, #1
 8011044:	4013      	ands	r3, r2
 8011046:	69ba      	ldr	r2, [r7, #24]
 8011048:	4413      	add	r3, r2
 801104a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	699b      	ldr	r3, [r3, #24]
 8011050:	68ba      	ldr	r2, [r7, #8]
 8011052:	8992      	ldrh	r2, [r2, #12]
 8011054:	fbb3 f1f2 	udiv	r1, r3, r2
 8011058:	fb02 f201 	mul.w	r2, r2, r1
 801105c:	1a9b      	subs	r3, r3, r2
 801105e:	2b00      	cmp	r3, #0
 8011060:	f000 815b 	beq.w	801131a <f_lseek+0x43c>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6a1b      	ldr	r3, [r3, #32]
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	429a      	cmp	r2, r3
 801106c:	f000 8155 	beq.w	801131a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	7d1b      	ldrb	r3, [r3, #20]
 8011074:	b25b      	sxtb	r3, r3
 8011076:	2b00      	cmp	r3, #0
 8011078:	da18      	bge.n	80110ac <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	7858      	ldrb	r0, [r3, #1]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6a1a      	ldr	r2, [r3, #32]
 8011088:	2301      	movs	r3, #1
 801108a:	f7fd fb2d 	bl	800e6e8 <disk_write>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d004      	beq.n	801109e <f_lseek+0x1c0>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2201      	movs	r2, #1
 8011098:	755a      	strb	r2, [r3, #21]
 801109a:	2301      	movs	r3, #1
 801109c:	e13f      	b.n	801131e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	7d1b      	ldrb	r3, [r3, #20]
 80110a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110a6:	b2da      	uxtb	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	7858      	ldrb	r0, [r3, #1]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110b6:	2301      	movs	r3, #1
 80110b8:	69ba      	ldr	r2, [r7, #24]
 80110ba:	f7fd faf5 	bl	800e6a8 <disk_read>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d004      	beq.n	80110ce <f_lseek+0x1f0>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2201      	movs	r2, #1
 80110c8:	755a      	strb	r2, [r3, #21]
 80110ca:	2301      	movs	r3, #1
 80110cc:	e127      	b.n	801131e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	69ba      	ldr	r2, [r7, #24]
 80110d2:	621a      	str	r2, [r3, #32]
 80110d4:	e121      	b.n	801131a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	68db      	ldr	r3, [r3, #12]
 80110da:	683a      	ldr	r2, [r7, #0]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d908      	bls.n	80110f2 <f_lseek+0x214>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	7d1b      	ldrb	r3, [r3, #20]
 80110e4:	f003 0302 	and.w	r3, r3, #2
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d102      	bne.n	80110f2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	699b      	ldr	r3, [r3, #24]
 80110f6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80110f8:	2300      	movs	r3, #0
 80110fa:	637b      	str	r3, [r7, #52]	; 0x34
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011100:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	f000 80b5 	beq.w	8011274 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	895b      	ldrh	r3, [r3, #10]
 801110e:	461a      	mov	r2, r3
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	899b      	ldrh	r3, [r3, #12]
 8011114:	fb03 f302 	mul.w	r3, r3, r2
 8011118:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801111a:	6a3b      	ldr	r3, [r7, #32]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d01b      	beq.n	8011158 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	1e5a      	subs	r2, r3, #1
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	fbb2 f2f3 	udiv	r2, r2, r3
 801112a:	6a3b      	ldr	r3, [r7, #32]
 801112c:	1e59      	subs	r1, r3, #1
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011134:	429a      	cmp	r2, r3
 8011136:	d30f      	bcc.n	8011158 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011138:	6a3b      	ldr	r3, [r7, #32]
 801113a:	1e5a      	subs	r2, r3, #1
 801113c:	69fb      	ldr	r3, [r7, #28]
 801113e:	425b      	negs	r3, r3
 8011140:	401a      	ands	r2, r3
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	699b      	ldr	r3, [r3, #24]
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	69db      	ldr	r3, [r3, #28]
 8011154:	63bb      	str	r3, [r7, #56]	; 0x38
 8011156:	e022      	b.n	801119e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	689b      	ldr	r3, [r3, #8]
 801115c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011160:	2b00      	cmp	r3, #0
 8011162:	d119      	bne.n	8011198 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2100      	movs	r1, #0
 8011168:	4618      	mov	r0, r3
 801116a:	f7fe f8b4 	bl	800f2d6 <create_chain>
 801116e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	2b01      	cmp	r3, #1
 8011174:	d104      	bne.n	8011180 <f_lseek+0x2a2>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2202      	movs	r2, #2
 801117a:	755a      	strb	r2, [r3, #21]
 801117c:	2302      	movs	r3, #2
 801117e:	e0ce      	b.n	801131e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011186:	d104      	bne.n	8011192 <f_lseek+0x2b4>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2201      	movs	r2, #1
 801118c:	755a      	strb	r2, [r3, #21]
 801118e:	2301      	movs	r3, #1
 8011190:	e0c5      	b.n	801131e <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011196:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801119c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d067      	beq.n	8011274 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80111a4:	e03a      	b.n	801121c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80111a6:	683a      	ldr	r2, [r7, #0]
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	603b      	str	r3, [r7, #0]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	699a      	ldr	r2, [r3, #24]
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	441a      	add	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	7d1b      	ldrb	r3, [r3, #20]
 80111be:	f003 0302 	and.w	r3, r3, #2
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d00b      	beq.n	80111de <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fe f883 	bl	800f2d6 <create_chain>
 80111d0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80111d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d108      	bne.n	80111ea <f_lseek+0x30c>
							ofs = 0; break;
 80111d8:	2300      	movs	r3, #0
 80111da:	603b      	str	r3, [r7, #0]
 80111dc:	e022      	b.n	8011224 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fd fe2b 	bl	800ee3e <get_fat>
 80111e8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111f0:	d104      	bne.n	80111fc <f_lseek+0x31e>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2201      	movs	r2, #1
 80111f6:	755a      	strb	r2, [r3, #21]
 80111f8:	2301      	movs	r3, #1
 80111fa:	e090      	b.n	801131e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80111fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fe:	2b01      	cmp	r3, #1
 8011200:	d904      	bls.n	801120c <f_lseek+0x32e>
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	699b      	ldr	r3, [r3, #24]
 8011206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011208:	429a      	cmp	r2, r3
 801120a:	d304      	bcc.n	8011216 <f_lseek+0x338>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2202      	movs	r2, #2
 8011210:	755a      	strb	r2, [r3, #21]
 8011212:	2302      	movs	r3, #2
 8011214:	e083      	b.n	801131e <f_lseek+0x440>
					fp->clust = clst;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801121a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801121c:	683a      	ldr	r2, [r7, #0]
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	429a      	cmp	r2, r3
 8011222:	d8c0      	bhi.n	80111a6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	699a      	ldr	r2, [r3, #24]
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	441a      	add	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	899b      	ldrh	r3, [r3, #12]
 8011234:	461a      	mov	r2, r3
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	fbb3 f1f2 	udiv	r1, r3, r2
 801123c:	fb02 f201 	mul.w	r2, r2, r1
 8011240:	1a9b      	subs	r3, r3, r2
 8011242:	2b00      	cmp	r3, #0
 8011244:	d016      	beq.n	8011274 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801124a:	4618      	mov	r0, r3
 801124c:	f7fd fdd8 	bl	800ee00 <clust2sect>
 8011250:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011254:	2b00      	cmp	r3, #0
 8011256:	d104      	bne.n	8011262 <f_lseek+0x384>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2202      	movs	r2, #2
 801125c:	755a      	strb	r2, [r3, #21]
 801125e:	2302      	movs	r3, #2
 8011260:	e05d      	b.n	801131e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	899b      	ldrh	r3, [r3, #12]
 8011266:	461a      	mov	r2, r3
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	fbb3 f3f2 	udiv	r3, r3, r2
 801126e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011270:	4413      	add	r3, r2
 8011272:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	699a      	ldr	r2, [r3, #24]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	429a      	cmp	r2, r3
 801127e:	d90a      	bls.n	8011296 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	699a      	ldr	r2, [r3, #24]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7d1b      	ldrb	r3, [r3, #20]
 801128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011290:	b2da      	uxtb	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	699b      	ldr	r3, [r3, #24]
 801129a:	68ba      	ldr	r2, [r7, #8]
 801129c:	8992      	ldrh	r2, [r2, #12]
 801129e:	fbb3 f1f2 	udiv	r1, r3, r2
 80112a2:	fb02 f201 	mul.w	r2, r2, r1
 80112a6:	1a9b      	subs	r3, r3, r2
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d036      	beq.n	801131a <f_lseek+0x43c>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a1b      	ldr	r3, [r3, #32]
 80112b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d031      	beq.n	801131a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1b      	ldrb	r3, [r3, #20]
 80112ba:	b25b      	sxtb	r3, r3
 80112bc:	2b00      	cmp	r3, #0
 80112be:	da18      	bge.n	80112f2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	7858      	ldrb	r0, [r3, #1]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6a1a      	ldr	r2, [r3, #32]
 80112ce:	2301      	movs	r3, #1
 80112d0:	f7fd fa0a 	bl	800e6e8 <disk_write>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d004      	beq.n	80112e4 <f_lseek+0x406>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2201      	movs	r2, #1
 80112de:	755a      	strb	r2, [r3, #21]
 80112e0:	2301      	movs	r3, #1
 80112e2:	e01c      	b.n	801131e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	7d1b      	ldrb	r3, [r3, #20]
 80112e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	7858      	ldrb	r0, [r3, #1]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112fc:	2301      	movs	r3, #1
 80112fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011300:	f7fd f9d2 	bl	800e6a8 <disk_read>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	d004      	beq.n	8011314 <f_lseek+0x436>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2201      	movs	r2, #1
 801130e:	755a      	strb	r2, [r3, #21]
 8011310:	2301      	movs	r3, #1
 8011312:	e004      	b.n	801131e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011318:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801131a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801131e:	4618      	mov	r0, r3
 8011320:	3740      	adds	r7, #64	; 0x40
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b086      	sub	sp, #24
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
 801132e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d101      	bne.n	801133a <f_opendir+0x14>
 8011336:	2309      	movs	r3, #9
 8011338:	e064      	b.n	8011404 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801133e:	f107 010c 	add.w	r1, r7, #12
 8011342:	463b      	mov	r3, r7
 8011344:	2200      	movs	r2, #0
 8011346:	4618      	mov	r0, r3
 8011348:	f7fe fd62 	bl	800fe10 <find_volume>
 801134c:	4603      	mov	r3, r0
 801134e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011350:	7dfb      	ldrb	r3, [r7, #23]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d14f      	bne.n	80113f6 <f_opendir+0xd0>
		obj->fs = fs;
 8011356:	68fa      	ldr	r2, [r7, #12]
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	4619      	mov	r1, r3
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7fe fc45 	bl	800fbf0 <follow_path>
 8011366:	4603      	mov	r3, r0
 8011368:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801136a:	7dfb      	ldrb	r3, [r7, #23]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d13d      	bne.n	80113ec <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011376:	b25b      	sxtb	r3, r3
 8011378:	2b00      	cmp	r3, #0
 801137a:	db12      	blt.n	80113a2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	799b      	ldrb	r3, [r3, #6]
 8011380:	f003 0310 	and.w	r3, r3, #16
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00a      	beq.n	801139e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011388:	68fa      	ldr	r2, [r7, #12]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6a1b      	ldr	r3, [r3, #32]
 801138e:	4619      	mov	r1, r3
 8011390:	4610      	mov	r0, r2
 8011392:	f7fe fa16 	bl	800f7c2 <ld_clust>
 8011396:	4602      	mov	r2, r0
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	609a      	str	r2, [r3, #8]
 801139c:	e001      	b.n	80113a2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801139e:	2305      	movs	r3, #5
 80113a0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80113a2:	7dfb      	ldrb	r3, [r7, #23]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d121      	bne.n	80113ec <f_opendir+0xc6>
				obj->id = fs->id;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	88da      	ldrh	r2, [r3, #6]
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80113b0:	2100      	movs	r1, #0
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f7fe f85f 	bl	800f476 <dir_sdi>
 80113b8:	4603      	mov	r3, r0
 80113ba:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80113bc:	7dfb      	ldrb	r3, [r7, #23]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d114      	bne.n	80113ec <f_opendir+0xc6>
					if (obj->sclust) {
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00d      	beq.n	80113e6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80113ca:	2100      	movs	r1, #0
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f7fd fb47 	bl	800ea60 <inc_lock>
 80113d2:	4602      	mov	r2, r0
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	691b      	ldr	r3, [r3, #16]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d105      	bne.n	80113ec <f_opendir+0xc6>
 80113e0:	2312      	movs	r3, #18
 80113e2:	75fb      	strb	r3, [r7, #23]
 80113e4:	e002      	b.n	80113ec <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	2200      	movs	r2, #0
 80113ea:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80113ec:	7dfb      	ldrb	r3, [r7, #23]
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	d101      	bne.n	80113f6 <f_opendir+0xd0>
 80113f2:	2305      	movs	r3, #5
 80113f4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80113f6:	7dfb      	ldrb	r3, [r7, #23]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d002      	beq.n	8011402 <f_opendir+0xdc>
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	2200      	movs	r2, #0
 8011400:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011402:	7dfb      	ldrb	r3, [r7, #23]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3718      	adds	r7, #24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f107 0208 	add.w	r2, r7, #8
 801141c:	4611      	mov	r1, r2
 801141e:	4618      	mov	r0, r3
 8011420:	f7fe ff7a 	bl	8010318 <validate>
 8011424:	4603      	mov	r3, r0
 8011426:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011428:	7bfb      	ldrb	r3, [r7, #15]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d126      	bne.n	801147c <f_readdir+0x70>
		if (!fno) {
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d106      	bne.n	8011442 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011434:	2100      	movs	r1, #0
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7fe f81d 	bl	800f476 <dir_sdi>
 801143c:	4603      	mov	r3, r0
 801143e:	73fb      	strb	r3, [r7, #15]
 8011440:	e01c      	b.n	801147c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011442:	2100      	movs	r1, #0
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7fe f9fb 	bl	800f840 <dir_read>
 801144a:	4603      	mov	r3, r0
 801144c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801144e:	7bfb      	ldrb	r3, [r7, #15]
 8011450:	2b04      	cmp	r3, #4
 8011452:	d101      	bne.n	8011458 <f_readdir+0x4c>
 8011454:	2300      	movs	r3, #0
 8011456:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011458:	7bfb      	ldrb	r3, [r7, #15]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d10e      	bne.n	801147c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801145e:	6839      	ldr	r1, [r7, #0]
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7fe fad1 	bl	800fa08 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011466:	2100      	movs	r1, #0
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7fe f88d 	bl	800f588 <dir_next>
 801146e:	4603      	mov	r3, r0
 8011470:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011472:	7bfb      	ldrb	r3, [r7, #15]
 8011474:	2b04      	cmp	r3, #4
 8011476:	d101      	bne.n	801147c <f_readdir+0x70>
 8011478:	2300      	movs	r3, #0
 801147a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801147c:	7bfb      	ldrb	r3, [r7, #15]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b092      	sub	sp, #72	; 0x48
 801148a:	af00      	add	r7, sp, #0
 801148c:	60f8      	str	r0, [r7, #12]
 801148e:	60b9      	str	r1, [r7, #8]
 8011490:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011492:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011496:	f107 030c 	add.w	r3, r7, #12
 801149a:	2200      	movs	r2, #0
 801149c:	4618      	mov	r0, r3
 801149e:	f7fe fcb7 	bl	800fe10 <find_volume>
 80114a2:	4603      	mov	r3, r0
 80114a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80114a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	f040 8099 	bne.w	80115e4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80114b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80114b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ba:	695a      	ldr	r2, [r3, #20]
 80114bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114be:	699b      	ldr	r3, [r3, #24]
 80114c0:	3b02      	subs	r3, #2
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d804      	bhi.n	80114d0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80114c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c8:	695a      	ldr	r2, [r3, #20]
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	601a      	str	r2, [r3, #0]
 80114ce:	e089      	b.n	80115e4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80114d0:	2300      	movs	r3, #0
 80114d2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d128      	bne.n	801152e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80114dc:	2302      	movs	r3, #2
 80114de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80114e4:	f107 0314 	add.w	r3, r7, #20
 80114e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fd fca7 	bl	800ee3e <get_fat>
 80114f0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80114f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114f8:	d103      	bne.n	8011502 <f_getfree+0x7c>
 80114fa:	2301      	movs	r3, #1
 80114fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011500:	e063      	b.n	80115ca <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011504:	2b01      	cmp	r3, #1
 8011506:	d103      	bne.n	8011510 <f_getfree+0x8a>
 8011508:	2302      	movs	r3, #2
 801150a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801150e:	e05c      	b.n	80115ca <f_getfree+0x144>
					if (stat == 0) nfree++;
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	2b00      	cmp	r3, #0
 8011514:	d102      	bne.n	801151c <f_getfree+0x96>
 8011516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011518:	3301      	adds	r3, #1
 801151a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801151c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801151e:	3301      	adds	r3, #1
 8011520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011524:	699b      	ldr	r3, [r3, #24]
 8011526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011528:	429a      	cmp	r2, r3
 801152a:	d3db      	bcc.n	80114e4 <f_getfree+0x5e>
 801152c:	e04d      	b.n	80115ca <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011530:	699b      	ldr	r3, [r3, #24]
 8011532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011538:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	637b      	str	r3, [r7, #52]	; 0x34
 801153e:	2300      	movs	r3, #0
 8011540:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8011542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011544:	2b00      	cmp	r3, #0
 8011546:	d113      	bne.n	8011570 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8011548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154c:	1c5a      	adds	r2, r3, #1
 801154e:	63ba      	str	r2, [r7, #56]	; 0x38
 8011550:	4619      	mov	r1, r3
 8011552:	f7fd fbb7 	bl	800ecc4 <move_window>
 8011556:	4603      	mov	r3, r0
 8011558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801155c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011560:	2b00      	cmp	r3, #0
 8011562:	d131      	bne.n	80115c8 <f_getfree+0x142>
							p = fs->win;
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	3334      	adds	r3, #52	; 0x34
 8011568:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156c:	899b      	ldrh	r3, [r3, #12]
 801156e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2b02      	cmp	r3, #2
 8011576:	d10f      	bne.n	8011598 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801157a:	f7fd f8f3 	bl	800e764 <ld_word>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d102      	bne.n	801158a <f_getfree+0x104>
 8011584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011586:	3301      	adds	r3, #1
 8011588:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158c:	3302      	adds	r3, #2
 801158e:	633b      	str	r3, [r7, #48]	; 0x30
 8011590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011592:	3b02      	subs	r3, #2
 8011594:	637b      	str	r3, [r7, #52]	; 0x34
 8011596:	e010      	b.n	80115ba <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801159a:	f7fd f8fb 	bl	800e794 <ld_dword>
 801159e:	4603      	mov	r3, r0
 80115a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d102      	bne.n	80115ae <f_getfree+0x128>
 80115a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115aa:	3301      	adds	r3, #1
 80115ac:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80115ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b0:	3304      	adds	r3, #4
 80115b2:	633b      	str	r3, [r7, #48]	; 0x30
 80115b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b6:	3b04      	subs	r3, #4
 80115b8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80115ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115bc:	3b01      	subs	r3, #1
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80115c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d1bd      	bne.n	8011542 <f_getfree+0xbc>
 80115c6:	e000      	b.n	80115ca <f_getfree+0x144>
							if (res != FR_OK) break;
 80115c8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115ce:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80115d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80115d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d8:	791a      	ldrb	r2, [r3, #4]
 80115da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115dc:	f042 0201 	orr.w	r2, r2, #1
 80115e0:	b2d2      	uxtb	r2, r2
 80115e2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80115e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3748      	adds	r7, #72	; 0x48
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b088      	sub	sp, #32
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	607a      	str	r2, [r7, #4]
	int n = 0;
 80115fc:	2300      	movs	r3, #0
 80115fe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011604:	e01b      	b.n	801163e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011606:	f107 0310 	add.w	r3, r7, #16
 801160a:	f107 0114 	add.w	r1, r7, #20
 801160e:	2201      	movs	r2, #1
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f7ff f8c9 	bl	80107a8 <f_read>
		if (rc != 1) break;
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	2b01      	cmp	r3, #1
 801161a:	d116      	bne.n	801164a <f_gets+0x5a>
		c = s[0];
 801161c:	7d3b      	ldrb	r3, [r7, #20]
 801161e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011620:	7dfb      	ldrb	r3, [r7, #23]
 8011622:	2b0d      	cmp	r3, #13
 8011624:	d100      	bne.n	8011628 <f_gets+0x38>
 8011626:	e00a      	b.n	801163e <f_gets+0x4e>
		*p++ = c;
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	61ba      	str	r2, [r7, #24]
 801162e:	7dfa      	ldrb	r2, [r7, #23]
 8011630:	701a      	strb	r2, [r3, #0]
		n++;
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	3301      	adds	r3, #1
 8011636:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011638:	7dfb      	ldrb	r3, [r7, #23]
 801163a:	2b0a      	cmp	r3, #10
 801163c:	d007      	beq.n	801164e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	3b01      	subs	r3, #1
 8011642:	69fa      	ldr	r2, [r7, #28]
 8011644:	429a      	cmp	r2, r3
 8011646:	dbde      	blt.n	8011606 <f_gets+0x16>
 8011648:	e002      	b.n	8011650 <f_gets+0x60>
		if (rc != 1) break;
 801164a:	bf00      	nop
 801164c:	e000      	b.n	8011650 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801164e:	bf00      	nop
	}
	*p = 0;
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	2200      	movs	r2, #0
 8011654:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d001      	beq.n	8011660 <f_gets+0x70>
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	e000      	b.n	8011662 <f_gets+0x72>
 8011660:	2300      	movs	r3, #0
}
 8011662:	4618      	mov	r0, r3
 8011664:	3720      	adds	r7, #32
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}

0801166a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801166a:	b580      	push	{r7, lr}
 801166c:	b084      	sub	sp, #16
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
 8011672:	460b      	mov	r3, r1
 8011674:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011676:	78fb      	ldrb	r3, [r7, #3]
 8011678:	2b0a      	cmp	r3, #10
 801167a:	d103      	bne.n	8011684 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801167c:	210d      	movs	r1, #13
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7ff fff3 	bl	801166a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2b00      	cmp	r3, #0
 801168e:	db25      	blt.n	80116dc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	1c5a      	adds	r2, r3, #1
 8011694:	60fa      	str	r2, [r7, #12]
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	4413      	add	r3, r2
 801169a:	78fa      	ldrb	r2, [r7, #3]
 801169c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b3c      	cmp	r3, #60	; 0x3c
 80116a2:	dd12      	ble.n	80116ca <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6818      	ldr	r0, [r3, #0]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f103 010c 	add.w	r1, r3, #12
 80116ae:	68fa      	ldr	r2, [r7, #12]
 80116b0:	f107 0308 	add.w	r3, r7, #8
 80116b4:	f7ff f9d7 	bl	8010a66 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d101      	bne.n	80116c4 <putc_bfd+0x5a>
 80116c0:	2300      	movs	r3, #0
 80116c2:	e001      	b.n	80116c8 <putc_bfd+0x5e>
 80116c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116c8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	68fa      	ldr	r2, [r7, #12]
 80116ce:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	689b      	ldr	r3, [r3, #8]
 80116d4:	1c5a      	adds	r2, r3, #1
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	609a      	str	r2, [r3, #8]
 80116da:	e000      	b.n	80116de <putc_bfd+0x74>
	if (i < 0) return;
 80116dc:	bf00      	nop
}
 80116de:	3710      	adds	r7, #16
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	db17      	blt.n	8011724 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6818      	ldr	r0, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f103 010c 	add.w	r1, r3, #12
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	461a      	mov	r2, r3
 8011704:	f107 030c 	add.w	r3, r7, #12
 8011708:	f7ff f9ad 	bl	8010a66 <f_write>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d108      	bne.n	8011724 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	461a      	mov	r2, r3
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	429a      	cmp	r2, r3
 801171c:	d102      	bne.n	8011724 <putc_flush+0x40>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	e001      	b.n	8011728 <putc_flush+0x44>
	return EOF;
 8011724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011728:	4618      	mov	r0, r3
 801172a:	3710      	adds	r7, #16
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	683a      	ldr	r2, [r7, #0]
 801173e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	605a      	str	r2, [r3, #4]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	685a      	ldr	r2, [r3, #4]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	609a      	str	r2, [r3, #8]
}
 801174e:	bf00      	nop
 8011750:	370c      	adds	r7, #12
 8011752:	46bd      	mov	sp, r7
 8011754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011758:	4770      	bx	lr

0801175a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b096      	sub	sp, #88	; 0x58
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8011764:	f107 030c 	add.w	r3, r7, #12
 8011768:	6839      	ldr	r1, [r7, #0]
 801176a:	4618      	mov	r0, r3
 801176c:	f7ff ffe0 	bl	8011730 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8011770:	e009      	b.n	8011786 <f_puts+0x2c>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	1c5a      	adds	r2, r3, #1
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	781a      	ldrb	r2, [r3, #0]
 801177a:	f107 030c 	add.w	r3, r7, #12
 801177e:	4611      	mov	r1, r2
 8011780:	4618      	mov	r0, r3
 8011782:	f7ff ff72 	bl	801166a <putc_bfd>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1f1      	bne.n	8011772 <f_puts+0x18>
	return putc_flush(&pb);
 801178e:	f107 030c 	add.w	r3, r7, #12
 8011792:	4618      	mov	r0, r3
 8011794:	f7ff ffa6 	bl	80116e4 <putc_flush>
 8011798:	4603      	mov	r3, r0
}
 801179a:	4618      	mov	r0, r3
 801179c:	3758      	adds	r7, #88	; 0x58
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
	...

080117a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b087      	sub	sp, #28
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	4613      	mov	r3, r2
 80117b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80117b2:	2301      	movs	r3, #1
 80117b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80117ba:	4b1f      	ldr	r3, [pc, #124]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117bc:	7a5b      	ldrb	r3, [r3, #9]
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d131      	bne.n	8011828 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80117c4:	4b1c      	ldr	r3, [pc, #112]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117c6:	7a5b      	ldrb	r3, [r3, #9]
 80117c8:	b2db      	uxtb	r3, r3
 80117ca:	461a      	mov	r2, r3
 80117cc:	4b1a      	ldr	r3, [pc, #104]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117ce:	2100      	movs	r1, #0
 80117d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80117d2:	4b19      	ldr	r3, [pc, #100]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117d4:	7a5b      	ldrb	r3, [r3, #9]
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	4a17      	ldr	r2, [pc, #92]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80117e2:	4b15      	ldr	r3, [pc, #84]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117e4:	7a5b      	ldrb	r3, [r3, #9]
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	461a      	mov	r2, r3
 80117ea:	4b13      	ldr	r3, [pc, #76]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117ec:	4413      	add	r3, r2
 80117ee:	79fa      	ldrb	r2, [r7, #7]
 80117f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80117f2:	4b11      	ldr	r3, [pc, #68]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117f4:	7a5b      	ldrb	r3, [r3, #9]
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	1c5a      	adds	r2, r3, #1
 80117fa:	b2d1      	uxtb	r1, r2
 80117fc:	4a0e      	ldr	r2, [pc, #56]	; (8011838 <FATFS_LinkDriverEx+0x94>)
 80117fe:	7251      	strb	r1, [r2, #9]
 8011800:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011802:	7dbb      	ldrb	r3, [r7, #22]
 8011804:	3330      	adds	r3, #48	; 0x30
 8011806:	b2da      	uxtb	r2, r3
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	3301      	adds	r3, #1
 8011810:	223a      	movs	r2, #58	; 0x3a
 8011812:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	3302      	adds	r3, #2
 8011818:	222f      	movs	r2, #47	; 0x2f
 801181a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	3303      	adds	r3, #3
 8011820:	2200      	movs	r2, #0
 8011822:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011824:	2300      	movs	r3, #0
 8011826:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011828:	7dfb      	ldrb	r3, [r7, #23]
}
 801182a:	4618      	mov	r0, r3
 801182c:	371c      	adds	r7, #28
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop
 8011838:	200008d4 	.word	0x200008d4

0801183c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011846:	2200      	movs	r2, #0
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f7ff ffaa 	bl	80117a4 <FATFS_LinkDriverEx>
 8011850:	4603      	mov	r3, r0
}
 8011852:	4618      	mov	r0, r3
 8011854:	3708      	adds	r7, #8
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
	...

0801185c <__errno>:
 801185c:	4b01      	ldr	r3, [pc, #4]	; (8011864 <__errno+0x8>)
 801185e:	6818      	ldr	r0, [r3, #0]
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	200001a4 	.word	0x200001a4

08011868 <__libc_init_array>:
 8011868:	b570      	push	{r4, r5, r6, lr}
 801186a:	4e0d      	ldr	r6, [pc, #52]	; (80118a0 <__libc_init_array+0x38>)
 801186c:	4c0d      	ldr	r4, [pc, #52]	; (80118a4 <__libc_init_array+0x3c>)
 801186e:	1ba4      	subs	r4, r4, r6
 8011870:	10a4      	asrs	r4, r4, #2
 8011872:	2500      	movs	r5, #0
 8011874:	42a5      	cmp	r5, r4
 8011876:	d109      	bne.n	801188c <__libc_init_array+0x24>
 8011878:	4e0b      	ldr	r6, [pc, #44]	; (80118a8 <__libc_init_array+0x40>)
 801187a:	4c0c      	ldr	r4, [pc, #48]	; (80118ac <__libc_init_array+0x44>)
 801187c:	f005 fe8a 	bl	8017594 <_init>
 8011880:	1ba4      	subs	r4, r4, r6
 8011882:	10a4      	asrs	r4, r4, #2
 8011884:	2500      	movs	r5, #0
 8011886:	42a5      	cmp	r5, r4
 8011888:	d105      	bne.n	8011896 <__libc_init_array+0x2e>
 801188a:	bd70      	pop	{r4, r5, r6, pc}
 801188c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011890:	4798      	blx	r3
 8011892:	3501      	adds	r5, #1
 8011894:	e7ee      	b.n	8011874 <__libc_init_array+0xc>
 8011896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801189a:	4798      	blx	r3
 801189c:	3501      	adds	r5, #1
 801189e:	e7f2      	b.n	8011886 <__libc_init_array+0x1e>
 80118a0:	08018498 	.word	0x08018498
 80118a4:	08018498 	.word	0x08018498
 80118a8:	08018498 	.word	0x08018498
 80118ac:	0801849c 	.word	0x0801849c

080118b0 <memcpy>:
 80118b0:	b510      	push	{r4, lr}
 80118b2:	1e43      	subs	r3, r0, #1
 80118b4:	440a      	add	r2, r1
 80118b6:	4291      	cmp	r1, r2
 80118b8:	d100      	bne.n	80118bc <memcpy+0xc>
 80118ba:	bd10      	pop	{r4, pc}
 80118bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118c4:	e7f7      	b.n	80118b6 <memcpy+0x6>

080118c6 <memset>:
 80118c6:	4402      	add	r2, r0
 80118c8:	4603      	mov	r3, r0
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d100      	bne.n	80118d0 <memset+0xa>
 80118ce:	4770      	bx	lr
 80118d0:	f803 1b01 	strb.w	r1, [r3], #1
 80118d4:	e7f9      	b.n	80118ca <memset+0x4>

080118d6 <__cvt>:
 80118d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118da:	ec55 4b10 	vmov	r4, r5, d0
 80118de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80118e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80118e4:	2d00      	cmp	r5, #0
 80118e6:	460e      	mov	r6, r1
 80118e8:	4691      	mov	r9, r2
 80118ea:	4619      	mov	r1, r3
 80118ec:	bfb8      	it	lt
 80118ee:	4622      	movlt	r2, r4
 80118f0:	462b      	mov	r3, r5
 80118f2:	f027 0720 	bic.w	r7, r7, #32
 80118f6:	bfbb      	ittet	lt
 80118f8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80118fc:	461d      	movlt	r5, r3
 80118fe:	2300      	movge	r3, #0
 8011900:	232d      	movlt	r3, #45	; 0x2d
 8011902:	bfb8      	it	lt
 8011904:	4614      	movlt	r4, r2
 8011906:	2f46      	cmp	r7, #70	; 0x46
 8011908:	700b      	strb	r3, [r1, #0]
 801190a:	d004      	beq.n	8011916 <__cvt+0x40>
 801190c:	2f45      	cmp	r7, #69	; 0x45
 801190e:	d100      	bne.n	8011912 <__cvt+0x3c>
 8011910:	3601      	adds	r6, #1
 8011912:	2102      	movs	r1, #2
 8011914:	e000      	b.n	8011918 <__cvt+0x42>
 8011916:	2103      	movs	r1, #3
 8011918:	ab03      	add	r3, sp, #12
 801191a:	9301      	str	r3, [sp, #4]
 801191c:	ab02      	add	r3, sp, #8
 801191e:	9300      	str	r3, [sp, #0]
 8011920:	4632      	mov	r2, r6
 8011922:	4653      	mov	r3, sl
 8011924:	ec45 4b10 	vmov	d0, r4, r5
 8011928:	f001 fcaa 	bl	8013280 <_dtoa_r>
 801192c:	2f47      	cmp	r7, #71	; 0x47
 801192e:	4680      	mov	r8, r0
 8011930:	d102      	bne.n	8011938 <__cvt+0x62>
 8011932:	f019 0f01 	tst.w	r9, #1
 8011936:	d026      	beq.n	8011986 <__cvt+0xb0>
 8011938:	2f46      	cmp	r7, #70	; 0x46
 801193a:	eb08 0906 	add.w	r9, r8, r6
 801193e:	d111      	bne.n	8011964 <__cvt+0x8e>
 8011940:	f898 3000 	ldrb.w	r3, [r8]
 8011944:	2b30      	cmp	r3, #48	; 0x30
 8011946:	d10a      	bne.n	801195e <__cvt+0x88>
 8011948:	2200      	movs	r2, #0
 801194a:	2300      	movs	r3, #0
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7ef f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8011954:	b918      	cbnz	r0, 801195e <__cvt+0x88>
 8011956:	f1c6 0601 	rsb	r6, r6, #1
 801195a:	f8ca 6000 	str.w	r6, [sl]
 801195e:	f8da 3000 	ldr.w	r3, [sl]
 8011962:	4499      	add	r9, r3
 8011964:	2200      	movs	r2, #0
 8011966:	2300      	movs	r3, #0
 8011968:	4620      	mov	r0, r4
 801196a:	4629      	mov	r1, r5
 801196c:	f7ef f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8011970:	b938      	cbnz	r0, 8011982 <__cvt+0xac>
 8011972:	2230      	movs	r2, #48	; 0x30
 8011974:	9b03      	ldr	r3, [sp, #12]
 8011976:	454b      	cmp	r3, r9
 8011978:	d205      	bcs.n	8011986 <__cvt+0xb0>
 801197a:	1c59      	adds	r1, r3, #1
 801197c:	9103      	str	r1, [sp, #12]
 801197e:	701a      	strb	r2, [r3, #0]
 8011980:	e7f8      	b.n	8011974 <__cvt+0x9e>
 8011982:	f8cd 900c 	str.w	r9, [sp, #12]
 8011986:	9b03      	ldr	r3, [sp, #12]
 8011988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801198a:	eba3 0308 	sub.w	r3, r3, r8
 801198e:	4640      	mov	r0, r8
 8011990:	6013      	str	r3, [r2, #0]
 8011992:	b004      	add	sp, #16
 8011994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011998 <__exponent>:
 8011998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801199a:	2900      	cmp	r1, #0
 801199c:	4604      	mov	r4, r0
 801199e:	bfba      	itte	lt
 80119a0:	4249      	neglt	r1, r1
 80119a2:	232d      	movlt	r3, #45	; 0x2d
 80119a4:	232b      	movge	r3, #43	; 0x2b
 80119a6:	2909      	cmp	r1, #9
 80119a8:	f804 2b02 	strb.w	r2, [r4], #2
 80119ac:	7043      	strb	r3, [r0, #1]
 80119ae:	dd20      	ble.n	80119f2 <__exponent+0x5a>
 80119b0:	f10d 0307 	add.w	r3, sp, #7
 80119b4:	461f      	mov	r7, r3
 80119b6:	260a      	movs	r6, #10
 80119b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80119bc:	fb06 1115 	mls	r1, r6, r5, r1
 80119c0:	3130      	adds	r1, #48	; 0x30
 80119c2:	2d09      	cmp	r5, #9
 80119c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80119c8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80119cc:	4629      	mov	r1, r5
 80119ce:	dc09      	bgt.n	80119e4 <__exponent+0x4c>
 80119d0:	3130      	adds	r1, #48	; 0x30
 80119d2:	3b02      	subs	r3, #2
 80119d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80119d8:	42bb      	cmp	r3, r7
 80119da:	4622      	mov	r2, r4
 80119dc:	d304      	bcc.n	80119e8 <__exponent+0x50>
 80119de:	1a10      	subs	r0, r2, r0
 80119e0:	b003      	add	sp, #12
 80119e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119e4:	4613      	mov	r3, r2
 80119e6:	e7e7      	b.n	80119b8 <__exponent+0x20>
 80119e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119ec:	f804 2b01 	strb.w	r2, [r4], #1
 80119f0:	e7f2      	b.n	80119d8 <__exponent+0x40>
 80119f2:	2330      	movs	r3, #48	; 0x30
 80119f4:	4419      	add	r1, r3
 80119f6:	7083      	strb	r3, [r0, #2]
 80119f8:	1d02      	adds	r2, r0, #4
 80119fa:	70c1      	strb	r1, [r0, #3]
 80119fc:	e7ef      	b.n	80119de <__exponent+0x46>
	...

08011a00 <_printf_float>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	b08d      	sub	sp, #52	; 0x34
 8011a06:	460c      	mov	r4, r1
 8011a08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011a0c:	4616      	mov	r6, r2
 8011a0e:	461f      	mov	r7, r3
 8011a10:	4605      	mov	r5, r0
 8011a12:	f002 fe8f 	bl	8014734 <_localeconv_r>
 8011a16:	6803      	ldr	r3, [r0, #0]
 8011a18:	9304      	str	r3, [sp, #16]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7ee fbd8 	bl	80001d0 <strlen>
 8011a20:	2300      	movs	r3, #0
 8011a22:	930a      	str	r3, [sp, #40]	; 0x28
 8011a24:	f8d8 3000 	ldr.w	r3, [r8]
 8011a28:	9005      	str	r0, [sp, #20]
 8011a2a:	3307      	adds	r3, #7
 8011a2c:	f023 0307 	bic.w	r3, r3, #7
 8011a30:	f103 0208 	add.w	r2, r3, #8
 8011a34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011a38:	f8d4 b000 	ldr.w	fp, [r4]
 8011a3c:	f8c8 2000 	str.w	r2, [r8]
 8011a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011a48:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011a4c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a50:	9307      	str	r3, [sp, #28]
 8011a52:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a5a:	4ba7      	ldr	r3, [pc, #668]	; (8011cf8 <_printf_float+0x2f8>)
 8011a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a60:	f7ef f864 	bl	8000b2c <__aeabi_dcmpun>
 8011a64:	bb70      	cbnz	r0, 8011ac4 <_printf_float+0xc4>
 8011a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a6a:	4ba3      	ldr	r3, [pc, #652]	; (8011cf8 <_printf_float+0x2f8>)
 8011a6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a70:	f7ef f83e 	bl	8000af0 <__aeabi_dcmple>
 8011a74:	bb30      	cbnz	r0, 8011ac4 <_printf_float+0xc4>
 8011a76:	2200      	movs	r2, #0
 8011a78:	2300      	movs	r3, #0
 8011a7a:	4640      	mov	r0, r8
 8011a7c:	4649      	mov	r1, r9
 8011a7e:	f7ef f82d 	bl	8000adc <__aeabi_dcmplt>
 8011a82:	b110      	cbz	r0, 8011a8a <_printf_float+0x8a>
 8011a84:	232d      	movs	r3, #45	; 0x2d
 8011a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a8a:	4a9c      	ldr	r2, [pc, #624]	; (8011cfc <_printf_float+0x2fc>)
 8011a8c:	4b9c      	ldr	r3, [pc, #624]	; (8011d00 <_printf_float+0x300>)
 8011a8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011a92:	bf8c      	ite	hi
 8011a94:	4690      	movhi	r8, r2
 8011a96:	4698      	movls	r8, r3
 8011a98:	2303      	movs	r3, #3
 8011a9a:	f02b 0204 	bic.w	r2, fp, #4
 8011a9e:	6123      	str	r3, [r4, #16]
 8011aa0:	6022      	str	r2, [r4, #0]
 8011aa2:	f04f 0900 	mov.w	r9, #0
 8011aa6:	9700      	str	r7, [sp, #0]
 8011aa8:	4633      	mov	r3, r6
 8011aaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8011aac:	4621      	mov	r1, r4
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f000 f9e6 	bl	8011e80 <_printf_common>
 8011ab4:	3001      	adds	r0, #1
 8011ab6:	f040 808d 	bne.w	8011bd4 <_printf_float+0x1d4>
 8011aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011abe:	b00d      	add	sp, #52	; 0x34
 8011ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac4:	4642      	mov	r2, r8
 8011ac6:	464b      	mov	r3, r9
 8011ac8:	4640      	mov	r0, r8
 8011aca:	4649      	mov	r1, r9
 8011acc:	f7ef f82e 	bl	8000b2c <__aeabi_dcmpun>
 8011ad0:	b110      	cbz	r0, 8011ad8 <_printf_float+0xd8>
 8011ad2:	4a8c      	ldr	r2, [pc, #560]	; (8011d04 <_printf_float+0x304>)
 8011ad4:	4b8c      	ldr	r3, [pc, #560]	; (8011d08 <_printf_float+0x308>)
 8011ad6:	e7da      	b.n	8011a8e <_printf_float+0x8e>
 8011ad8:	6861      	ldr	r1, [r4, #4]
 8011ada:	1c4b      	adds	r3, r1, #1
 8011adc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011ae0:	a80a      	add	r0, sp, #40	; 0x28
 8011ae2:	d13e      	bne.n	8011b62 <_printf_float+0x162>
 8011ae4:	2306      	movs	r3, #6
 8011ae6:	6063      	str	r3, [r4, #4]
 8011ae8:	2300      	movs	r3, #0
 8011aea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011aee:	ab09      	add	r3, sp, #36	; 0x24
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	ec49 8b10 	vmov	d0, r8, r9
 8011af6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011afa:	6022      	str	r2, [r4, #0]
 8011afc:	f8cd a004 	str.w	sl, [sp, #4]
 8011b00:	6861      	ldr	r1, [r4, #4]
 8011b02:	4628      	mov	r0, r5
 8011b04:	f7ff fee7 	bl	80118d6 <__cvt>
 8011b08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011b0c:	2b47      	cmp	r3, #71	; 0x47
 8011b0e:	4680      	mov	r8, r0
 8011b10:	d109      	bne.n	8011b26 <_printf_float+0x126>
 8011b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b14:	1cd8      	adds	r0, r3, #3
 8011b16:	db02      	blt.n	8011b1e <_printf_float+0x11e>
 8011b18:	6862      	ldr	r2, [r4, #4]
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	dd47      	ble.n	8011bae <_printf_float+0x1ae>
 8011b1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8011b22:	fa5f fa8a 	uxtb.w	sl, sl
 8011b26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b2c:	d824      	bhi.n	8011b78 <_printf_float+0x178>
 8011b2e:	3901      	subs	r1, #1
 8011b30:	4652      	mov	r2, sl
 8011b32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b36:	9109      	str	r1, [sp, #36]	; 0x24
 8011b38:	f7ff ff2e 	bl	8011998 <__exponent>
 8011b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b3e:	1813      	adds	r3, r2, r0
 8011b40:	2a01      	cmp	r2, #1
 8011b42:	4681      	mov	r9, r0
 8011b44:	6123      	str	r3, [r4, #16]
 8011b46:	dc02      	bgt.n	8011b4e <_printf_float+0x14e>
 8011b48:	6822      	ldr	r2, [r4, #0]
 8011b4a:	07d1      	lsls	r1, r2, #31
 8011b4c:	d501      	bpl.n	8011b52 <_printf_float+0x152>
 8011b4e:	3301      	adds	r3, #1
 8011b50:	6123      	str	r3, [r4, #16]
 8011b52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d0a5      	beq.n	8011aa6 <_printf_float+0xa6>
 8011b5a:	232d      	movs	r3, #45	; 0x2d
 8011b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b60:	e7a1      	b.n	8011aa6 <_printf_float+0xa6>
 8011b62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011b66:	f000 8177 	beq.w	8011e58 <_printf_float+0x458>
 8011b6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011b6e:	d1bb      	bne.n	8011ae8 <_printf_float+0xe8>
 8011b70:	2900      	cmp	r1, #0
 8011b72:	d1b9      	bne.n	8011ae8 <_printf_float+0xe8>
 8011b74:	2301      	movs	r3, #1
 8011b76:	e7b6      	b.n	8011ae6 <_printf_float+0xe6>
 8011b78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011b7c:	d119      	bne.n	8011bb2 <_printf_float+0x1b2>
 8011b7e:	2900      	cmp	r1, #0
 8011b80:	6863      	ldr	r3, [r4, #4]
 8011b82:	dd0c      	ble.n	8011b9e <_printf_float+0x19e>
 8011b84:	6121      	str	r1, [r4, #16]
 8011b86:	b913      	cbnz	r3, 8011b8e <_printf_float+0x18e>
 8011b88:	6822      	ldr	r2, [r4, #0]
 8011b8a:	07d2      	lsls	r2, r2, #31
 8011b8c:	d502      	bpl.n	8011b94 <_printf_float+0x194>
 8011b8e:	3301      	adds	r3, #1
 8011b90:	440b      	add	r3, r1
 8011b92:	6123      	str	r3, [r4, #16]
 8011b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b96:	65a3      	str	r3, [r4, #88]	; 0x58
 8011b98:	f04f 0900 	mov.w	r9, #0
 8011b9c:	e7d9      	b.n	8011b52 <_printf_float+0x152>
 8011b9e:	b913      	cbnz	r3, 8011ba6 <_printf_float+0x1a6>
 8011ba0:	6822      	ldr	r2, [r4, #0]
 8011ba2:	07d0      	lsls	r0, r2, #31
 8011ba4:	d501      	bpl.n	8011baa <_printf_float+0x1aa>
 8011ba6:	3302      	adds	r3, #2
 8011ba8:	e7f3      	b.n	8011b92 <_printf_float+0x192>
 8011baa:	2301      	movs	r3, #1
 8011bac:	e7f1      	b.n	8011b92 <_printf_float+0x192>
 8011bae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011bb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	db05      	blt.n	8011bc6 <_printf_float+0x1c6>
 8011bba:	6822      	ldr	r2, [r4, #0]
 8011bbc:	6123      	str	r3, [r4, #16]
 8011bbe:	07d1      	lsls	r1, r2, #31
 8011bc0:	d5e8      	bpl.n	8011b94 <_printf_float+0x194>
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	e7e5      	b.n	8011b92 <_printf_float+0x192>
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	bfd4      	ite	le
 8011bca:	f1c3 0302 	rsble	r3, r3, #2
 8011bce:	2301      	movgt	r3, #1
 8011bd0:	4413      	add	r3, r2
 8011bd2:	e7de      	b.n	8011b92 <_printf_float+0x192>
 8011bd4:	6823      	ldr	r3, [r4, #0]
 8011bd6:	055a      	lsls	r2, r3, #21
 8011bd8:	d407      	bmi.n	8011bea <_printf_float+0x1ea>
 8011bda:	6923      	ldr	r3, [r4, #16]
 8011bdc:	4642      	mov	r2, r8
 8011bde:	4631      	mov	r1, r6
 8011be0:	4628      	mov	r0, r5
 8011be2:	47b8      	blx	r7
 8011be4:	3001      	adds	r0, #1
 8011be6:	d12b      	bne.n	8011c40 <_printf_float+0x240>
 8011be8:	e767      	b.n	8011aba <_printf_float+0xba>
 8011bea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011bee:	f240 80dc 	bls.w	8011daa <_printf_float+0x3aa>
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bfa:	f7ee ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bfe:	2800      	cmp	r0, #0
 8011c00:	d033      	beq.n	8011c6a <_printf_float+0x26a>
 8011c02:	2301      	movs	r3, #1
 8011c04:	4a41      	ldr	r2, [pc, #260]	; (8011d0c <_printf_float+0x30c>)
 8011c06:	4631      	mov	r1, r6
 8011c08:	4628      	mov	r0, r5
 8011c0a:	47b8      	blx	r7
 8011c0c:	3001      	adds	r0, #1
 8011c0e:	f43f af54 	beq.w	8011aba <_printf_float+0xba>
 8011c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c16:	429a      	cmp	r2, r3
 8011c18:	db02      	blt.n	8011c20 <_printf_float+0x220>
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	07d8      	lsls	r0, r3, #31
 8011c1e:	d50f      	bpl.n	8011c40 <_printf_float+0x240>
 8011c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c24:	4631      	mov	r1, r6
 8011c26:	4628      	mov	r0, r5
 8011c28:	47b8      	blx	r7
 8011c2a:	3001      	adds	r0, #1
 8011c2c:	f43f af45 	beq.w	8011aba <_printf_float+0xba>
 8011c30:	f04f 0800 	mov.w	r8, #0
 8011c34:	f104 091a 	add.w	r9, r4, #26
 8011c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	4543      	cmp	r3, r8
 8011c3e:	dc09      	bgt.n	8011c54 <_printf_float+0x254>
 8011c40:	6823      	ldr	r3, [r4, #0]
 8011c42:	079b      	lsls	r3, r3, #30
 8011c44:	f100 8103 	bmi.w	8011e4e <_printf_float+0x44e>
 8011c48:	68e0      	ldr	r0, [r4, #12]
 8011c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c4c:	4298      	cmp	r0, r3
 8011c4e:	bfb8      	it	lt
 8011c50:	4618      	movlt	r0, r3
 8011c52:	e734      	b.n	8011abe <_printf_float+0xbe>
 8011c54:	2301      	movs	r3, #1
 8011c56:	464a      	mov	r2, r9
 8011c58:	4631      	mov	r1, r6
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	47b8      	blx	r7
 8011c5e:	3001      	adds	r0, #1
 8011c60:	f43f af2b 	beq.w	8011aba <_printf_float+0xba>
 8011c64:	f108 0801 	add.w	r8, r8, #1
 8011c68:	e7e6      	b.n	8011c38 <_printf_float+0x238>
 8011c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	dc2b      	bgt.n	8011cc8 <_printf_float+0x2c8>
 8011c70:	2301      	movs	r3, #1
 8011c72:	4a26      	ldr	r2, [pc, #152]	; (8011d0c <_printf_float+0x30c>)
 8011c74:	4631      	mov	r1, r6
 8011c76:	4628      	mov	r0, r5
 8011c78:	47b8      	blx	r7
 8011c7a:	3001      	adds	r0, #1
 8011c7c:	f43f af1d 	beq.w	8011aba <_printf_float+0xba>
 8011c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c82:	b923      	cbnz	r3, 8011c8e <_printf_float+0x28e>
 8011c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c86:	b913      	cbnz	r3, 8011c8e <_printf_float+0x28e>
 8011c88:	6823      	ldr	r3, [r4, #0]
 8011c8a:	07d9      	lsls	r1, r3, #31
 8011c8c:	d5d8      	bpl.n	8011c40 <_printf_float+0x240>
 8011c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c92:	4631      	mov	r1, r6
 8011c94:	4628      	mov	r0, r5
 8011c96:	47b8      	blx	r7
 8011c98:	3001      	adds	r0, #1
 8011c9a:	f43f af0e 	beq.w	8011aba <_printf_float+0xba>
 8011c9e:	f04f 0900 	mov.w	r9, #0
 8011ca2:	f104 0a1a 	add.w	sl, r4, #26
 8011ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca8:	425b      	negs	r3, r3
 8011caa:	454b      	cmp	r3, r9
 8011cac:	dc01      	bgt.n	8011cb2 <_printf_float+0x2b2>
 8011cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cb0:	e794      	b.n	8011bdc <_printf_float+0x1dc>
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	4652      	mov	r2, sl
 8011cb6:	4631      	mov	r1, r6
 8011cb8:	4628      	mov	r0, r5
 8011cba:	47b8      	blx	r7
 8011cbc:	3001      	adds	r0, #1
 8011cbe:	f43f aefc 	beq.w	8011aba <_printf_float+0xba>
 8011cc2:	f109 0901 	add.w	r9, r9, #1
 8011cc6:	e7ee      	b.n	8011ca6 <_printf_float+0x2a6>
 8011cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	bfa8      	it	ge
 8011cd0:	461a      	movge	r2, r3
 8011cd2:	2a00      	cmp	r2, #0
 8011cd4:	4691      	mov	r9, r2
 8011cd6:	dd07      	ble.n	8011ce8 <_printf_float+0x2e8>
 8011cd8:	4613      	mov	r3, r2
 8011cda:	4631      	mov	r1, r6
 8011cdc:	4642      	mov	r2, r8
 8011cde:	4628      	mov	r0, r5
 8011ce0:	47b8      	blx	r7
 8011ce2:	3001      	adds	r0, #1
 8011ce4:	f43f aee9 	beq.w	8011aba <_printf_float+0xba>
 8011ce8:	f104 031a 	add.w	r3, r4, #26
 8011cec:	f04f 0b00 	mov.w	fp, #0
 8011cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cf4:	9306      	str	r3, [sp, #24]
 8011cf6:	e015      	b.n	8011d24 <_printf_float+0x324>
 8011cf8:	7fefffff 	.word	0x7fefffff
 8011cfc:	08018104 	.word	0x08018104
 8011d00:	08018100 	.word	0x08018100
 8011d04:	0801810c 	.word	0x0801810c
 8011d08:	08018108 	.word	0x08018108
 8011d0c:	08018110 	.word	0x08018110
 8011d10:	2301      	movs	r3, #1
 8011d12:	9a06      	ldr	r2, [sp, #24]
 8011d14:	4631      	mov	r1, r6
 8011d16:	4628      	mov	r0, r5
 8011d18:	47b8      	blx	r7
 8011d1a:	3001      	adds	r0, #1
 8011d1c:	f43f aecd 	beq.w	8011aba <_printf_float+0xba>
 8011d20:	f10b 0b01 	add.w	fp, fp, #1
 8011d24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011d28:	ebaa 0309 	sub.w	r3, sl, r9
 8011d2c:	455b      	cmp	r3, fp
 8011d2e:	dcef      	bgt.n	8011d10 <_printf_float+0x310>
 8011d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d34:	429a      	cmp	r2, r3
 8011d36:	44d0      	add	r8, sl
 8011d38:	db15      	blt.n	8011d66 <_printf_float+0x366>
 8011d3a:	6823      	ldr	r3, [r4, #0]
 8011d3c:	07da      	lsls	r2, r3, #31
 8011d3e:	d412      	bmi.n	8011d66 <_printf_float+0x366>
 8011d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d44:	eba3 020a 	sub.w	r2, r3, sl
 8011d48:	eba3 0a01 	sub.w	sl, r3, r1
 8011d4c:	4592      	cmp	sl, r2
 8011d4e:	bfa8      	it	ge
 8011d50:	4692      	movge	sl, r2
 8011d52:	f1ba 0f00 	cmp.w	sl, #0
 8011d56:	dc0e      	bgt.n	8011d76 <_printf_float+0x376>
 8011d58:	f04f 0800 	mov.w	r8, #0
 8011d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d60:	f104 091a 	add.w	r9, r4, #26
 8011d64:	e019      	b.n	8011d9a <_printf_float+0x39a>
 8011d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	47b8      	blx	r7
 8011d70:	3001      	adds	r0, #1
 8011d72:	d1e5      	bne.n	8011d40 <_printf_float+0x340>
 8011d74:	e6a1      	b.n	8011aba <_printf_float+0xba>
 8011d76:	4653      	mov	r3, sl
 8011d78:	4642      	mov	r2, r8
 8011d7a:	4631      	mov	r1, r6
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	47b8      	blx	r7
 8011d80:	3001      	adds	r0, #1
 8011d82:	d1e9      	bne.n	8011d58 <_printf_float+0x358>
 8011d84:	e699      	b.n	8011aba <_printf_float+0xba>
 8011d86:	2301      	movs	r3, #1
 8011d88:	464a      	mov	r2, r9
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	47b8      	blx	r7
 8011d90:	3001      	adds	r0, #1
 8011d92:	f43f ae92 	beq.w	8011aba <_printf_float+0xba>
 8011d96:	f108 0801 	add.w	r8, r8, #1
 8011d9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d9e:	1a9b      	subs	r3, r3, r2
 8011da0:	eba3 030a 	sub.w	r3, r3, sl
 8011da4:	4543      	cmp	r3, r8
 8011da6:	dcee      	bgt.n	8011d86 <_printf_float+0x386>
 8011da8:	e74a      	b.n	8011c40 <_printf_float+0x240>
 8011daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011dac:	2a01      	cmp	r2, #1
 8011dae:	dc01      	bgt.n	8011db4 <_printf_float+0x3b4>
 8011db0:	07db      	lsls	r3, r3, #31
 8011db2:	d53a      	bpl.n	8011e2a <_printf_float+0x42a>
 8011db4:	2301      	movs	r3, #1
 8011db6:	4642      	mov	r2, r8
 8011db8:	4631      	mov	r1, r6
 8011dba:	4628      	mov	r0, r5
 8011dbc:	47b8      	blx	r7
 8011dbe:	3001      	adds	r0, #1
 8011dc0:	f43f ae7b 	beq.w	8011aba <_printf_float+0xba>
 8011dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dc8:	4631      	mov	r1, r6
 8011dca:	4628      	mov	r0, r5
 8011dcc:	47b8      	blx	r7
 8011dce:	3001      	adds	r0, #1
 8011dd0:	f108 0801 	add.w	r8, r8, #1
 8011dd4:	f43f ae71 	beq.w	8011aba <_printf_float+0xba>
 8011dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011de4:	2300      	movs	r3, #0
 8011de6:	f7ee fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8011dea:	b9c8      	cbnz	r0, 8011e20 <_printf_float+0x420>
 8011dec:	4653      	mov	r3, sl
 8011dee:	4642      	mov	r2, r8
 8011df0:	4631      	mov	r1, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	47b8      	blx	r7
 8011df6:	3001      	adds	r0, #1
 8011df8:	d10e      	bne.n	8011e18 <_printf_float+0x418>
 8011dfa:	e65e      	b.n	8011aba <_printf_float+0xba>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	4652      	mov	r2, sl
 8011e00:	4631      	mov	r1, r6
 8011e02:	4628      	mov	r0, r5
 8011e04:	47b8      	blx	r7
 8011e06:	3001      	adds	r0, #1
 8011e08:	f43f ae57 	beq.w	8011aba <_printf_float+0xba>
 8011e0c:	f108 0801 	add.w	r8, r8, #1
 8011e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e12:	3b01      	subs	r3, #1
 8011e14:	4543      	cmp	r3, r8
 8011e16:	dcf1      	bgt.n	8011dfc <_printf_float+0x3fc>
 8011e18:	464b      	mov	r3, r9
 8011e1a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e1e:	e6de      	b.n	8011bde <_printf_float+0x1de>
 8011e20:	f04f 0800 	mov.w	r8, #0
 8011e24:	f104 0a1a 	add.w	sl, r4, #26
 8011e28:	e7f2      	b.n	8011e10 <_printf_float+0x410>
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e7df      	b.n	8011dee <_printf_float+0x3ee>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	464a      	mov	r2, r9
 8011e32:	4631      	mov	r1, r6
 8011e34:	4628      	mov	r0, r5
 8011e36:	47b8      	blx	r7
 8011e38:	3001      	adds	r0, #1
 8011e3a:	f43f ae3e 	beq.w	8011aba <_printf_float+0xba>
 8011e3e:	f108 0801 	add.w	r8, r8, #1
 8011e42:	68e3      	ldr	r3, [r4, #12]
 8011e44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e46:	1a9b      	subs	r3, r3, r2
 8011e48:	4543      	cmp	r3, r8
 8011e4a:	dcf0      	bgt.n	8011e2e <_printf_float+0x42e>
 8011e4c:	e6fc      	b.n	8011c48 <_printf_float+0x248>
 8011e4e:	f04f 0800 	mov.w	r8, #0
 8011e52:	f104 0919 	add.w	r9, r4, #25
 8011e56:	e7f4      	b.n	8011e42 <_printf_float+0x442>
 8011e58:	2900      	cmp	r1, #0
 8011e5a:	f43f ae8b 	beq.w	8011b74 <_printf_float+0x174>
 8011e5e:	2300      	movs	r3, #0
 8011e60:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011e64:	ab09      	add	r3, sp, #36	; 0x24
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	ec49 8b10 	vmov	d0, r8, r9
 8011e6c:	6022      	str	r2, [r4, #0]
 8011e6e:	f8cd a004 	str.w	sl, [sp, #4]
 8011e72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011e76:	4628      	mov	r0, r5
 8011e78:	f7ff fd2d 	bl	80118d6 <__cvt>
 8011e7c:	4680      	mov	r8, r0
 8011e7e:	e648      	b.n	8011b12 <_printf_float+0x112>

08011e80 <_printf_common>:
 8011e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e84:	4691      	mov	r9, r2
 8011e86:	461f      	mov	r7, r3
 8011e88:	688a      	ldr	r2, [r1, #8]
 8011e8a:	690b      	ldr	r3, [r1, #16]
 8011e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e90:	4293      	cmp	r3, r2
 8011e92:	bfb8      	it	lt
 8011e94:	4613      	movlt	r3, r2
 8011e96:	f8c9 3000 	str.w	r3, [r9]
 8011e9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e9e:	4606      	mov	r6, r0
 8011ea0:	460c      	mov	r4, r1
 8011ea2:	b112      	cbz	r2, 8011eaa <_printf_common+0x2a>
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	f8c9 3000 	str.w	r3, [r9]
 8011eaa:	6823      	ldr	r3, [r4, #0]
 8011eac:	0699      	lsls	r1, r3, #26
 8011eae:	bf42      	ittt	mi
 8011eb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011eb4:	3302      	addmi	r3, #2
 8011eb6:	f8c9 3000 	strmi.w	r3, [r9]
 8011eba:	6825      	ldr	r5, [r4, #0]
 8011ebc:	f015 0506 	ands.w	r5, r5, #6
 8011ec0:	d107      	bne.n	8011ed2 <_printf_common+0x52>
 8011ec2:	f104 0a19 	add.w	sl, r4, #25
 8011ec6:	68e3      	ldr	r3, [r4, #12]
 8011ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8011ecc:	1a9b      	subs	r3, r3, r2
 8011ece:	42ab      	cmp	r3, r5
 8011ed0:	dc28      	bgt.n	8011f24 <_printf_common+0xa4>
 8011ed2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ed6:	6822      	ldr	r2, [r4, #0]
 8011ed8:	3300      	adds	r3, #0
 8011eda:	bf18      	it	ne
 8011edc:	2301      	movne	r3, #1
 8011ede:	0692      	lsls	r2, r2, #26
 8011ee0:	d42d      	bmi.n	8011f3e <_printf_common+0xbe>
 8011ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ee6:	4639      	mov	r1, r7
 8011ee8:	4630      	mov	r0, r6
 8011eea:	47c0      	blx	r8
 8011eec:	3001      	adds	r0, #1
 8011eee:	d020      	beq.n	8011f32 <_printf_common+0xb2>
 8011ef0:	6823      	ldr	r3, [r4, #0]
 8011ef2:	68e5      	ldr	r5, [r4, #12]
 8011ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8011ef8:	f003 0306 	and.w	r3, r3, #6
 8011efc:	2b04      	cmp	r3, #4
 8011efe:	bf08      	it	eq
 8011f00:	1aad      	subeq	r5, r5, r2
 8011f02:	68a3      	ldr	r3, [r4, #8]
 8011f04:	6922      	ldr	r2, [r4, #16]
 8011f06:	bf0c      	ite	eq
 8011f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f0c:	2500      	movne	r5, #0
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	bfc4      	itt	gt
 8011f12:	1a9b      	subgt	r3, r3, r2
 8011f14:	18ed      	addgt	r5, r5, r3
 8011f16:	f04f 0900 	mov.w	r9, #0
 8011f1a:	341a      	adds	r4, #26
 8011f1c:	454d      	cmp	r5, r9
 8011f1e:	d11a      	bne.n	8011f56 <_printf_common+0xd6>
 8011f20:	2000      	movs	r0, #0
 8011f22:	e008      	b.n	8011f36 <_printf_common+0xb6>
 8011f24:	2301      	movs	r3, #1
 8011f26:	4652      	mov	r2, sl
 8011f28:	4639      	mov	r1, r7
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	47c0      	blx	r8
 8011f2e:	3001      	adds	r0, #1
 8011f30:	d103      	bne.n	8011f3a <_printf_common+0xba>
 8011f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f3a:	3501      	adds	r5, #1
 8011f3c:	e7c3      	b.n	8011ec6 <_printf_common+0x46>
 8011f3e:	18e1      	adds	r1, r4, r3
 8011f40:	1c5a      	adds	r2, r3, #1
 8011f42:	2030      	movs	r0, #48	; 0x30
 8011f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f48:	4422      	add	r2, r4
 8011f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f52:	3302      	adds	r3, #2
 8011f54:	e7c5      	b.n	8011ee2 <_printf_common+0x62>
 8011f56:	2301      	movs	r3, #1
 8011f58:	4622      	mov	r2, r4
 8011f5a:	4639      	mov	r1, r7
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	47c0      	blx	r8
 8011f60:	3001      	adds	r0, #1
 8011f62:	d0e6      	beq.n	8011f32 <_printf_common+0xb2>
 8011f64:	f109 0901 	add.w	r9, r9, #1
 8011f68:	e7d8      	b.n	8011f1c <_printf_common+0x9c>
	...

08011f6c <_printf_i>:
 8011f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011f74:	460c      	mov	r4, r1
 8011f76:	7e09      	ldrb	r1, [r1, #24]
 8011f78:	b085      	sub	sp, #20
 8011f7a:	296e      	cmp	r1, #110	; 0x6e
 8011f7c:	4617      	mov	r7, r2
 8011f7e:	4606      	mov	r6, r0
 8011f80:	4698      	mov	r8, r3
 8011f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f84:	f000 80b3 	beq.w	80120ee <_printf_i+0x182>
 8011f88:	d822      	bhi.n	8011fd0 <_printf_i+0x64>
 8011f8a:	2963      	cmp	r1, #99	; 0x63
 8011f8c:	d036      	beq.n	8011ffc <_printf_i+0x90>
 8011f8e:	d80a      	bhi.n	8011fa6 <_printf_i+0x3a>
 8011f90:	2900      	cmp	r1, #0
 8011f92:	f000 80b9 	beq.w	8012108 <_printf_i+0x19c>
 8011f96:	2958      	cmp	r1, #88	; 0x58
 8011f98:	f000 8083 	beq.w	80120a2 <_printf_i+0x136>
 8011f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011fa4:	e032      	b.n	801200c <_printf_i+0xa0>
 8011fa6:	2964      	cmp	r1, #100	; 0x64
 8011fa8:	d001      	beq.n	8011fae <_printf_i+0x42>
 8011faa:	2969      	cmp	r1, #105	; 0x69
 8011fac:	d1f6      	bne.n	8011f9c <_printf_i+0x30>
 8011fae:	6820      	ldr	r0, [r4, #0]
 8011fb0:	6813      	ldr	r3, [r2, #0]
 8011fb2:	0605      	lsls	r5, r0, #24
 8011fb4:	f103 0104 	add.w	r1, r3, #4
 8011fb8:	d52a      	bpl.n	8012010 <_printf_i+0xa4>
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	6011      	str	r1, [r2, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	da03      	bge.n	8011fca <_printf_i+0x5e>
 8011fc2:	222d      	movs	r2, #45	; 0x2d
 8011fc4:	425b      	negs	r3, r3
 8011fc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011fca:	486f      	ldr	r0, [pc, #444]	; (8012188 <_printf_i+0x21c>)
 8011fcc:	220a      	movs	r2, #10
 8011fce:	e039      	b.n	8012044 <_printf_i+0xd8>
 8011fd0:	2973      	cmp	r1, #115	; 0x73
 8011fd2:	f000 809d 	beq.w	8012110 <_printf_i+0x1a4>
 8011fd6:	d808      	bhi.n	8011fea <_printf_i+0x7e>
 8011fd8:	296f      	cmp	r1, #111	; 0x6f
 8011fda:	d020      	beq.n	801201e <_printf_i+0xb2>
 8011fdc:	2970      	cmp	r1, #112	; 0x70
 8011fde:	d1dd      	bne.n	8011f9c <_printf_i+0x30>
 8011fe0:	6823      	ldr	r3, [r4, #0]
 8011fe2:	f043 0320 	orr.w	r3, r3, #32
 8011fe6:	6023      	str	r3, [r4, #0]
 8011fe8:	e003      	b.n	8011ff2 <_printf_i+0x86>
 8011fea:	2975      	cmp	r1, #117	; 0x75
 8011fec:	d017      	beq.n	801201e <_printf_i+0xb2>
 8011fee:	2978      	cmp	r1, #120	; 0x78
 8011ff0:	d1d4      	bne.n	8011f9c <_printf_i+0x30>
 8011ff2:	2378      	movs	r3, #120	; 0x78
 8011ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ff8:	4864      	ldr	r0, [pc, #400]	; (801218c <_printf_i+0x220>)
 8011ffa:	e055      	b.n	80120a8 <_printf_i+0x13c>
 8011ffc:	6813      	ldr	r3, [r2, #0]
 8011ffe:	1d19      	adds	r1, r3, #4
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	6011      	str	r1, [r2, #0]
 8012004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801200c:	2301      	movs	r3, #1
 801200e:	e08c      	b.n	801212a <_printf_i+0x1be>
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	6011      	str	r1, [r2, #0]
 8012014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012018:	bf18      	it	ne
 801201a:	b21b      	sxthne	r3, r3
 801201c:	e7cf      	b.n	8011fbe <_printf_i+0x52>
 801201e:	6813      	ldr	r3, [r2, #0]
 8012020:	6825      	ldr	r5, [r4, #0]
 8012022:	1d18      	adds	r0, r3, #4
 8012024:	6010      	str	r0, [r2, #0]
 8012026:	0628      	lsls	r0, r5, #24
 8012028:	d501      	bpl.n	801202e <_printf_i+0xc2>
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	e002      	b.n	8012034 <_printf_i+0xc8>
 801202e:	0668      	lsls	r0, r5, #25
 8012030:	d5fb      	bpl.n	801202a <_printf_i+0xbe>
 8012032:	881b      	ldrh	r3, [r3, #0]
 8012034:	4854      	ldr	r0, [pc, #336]	; (8012188 <_printf_i+0x21c>)
 8012036:	296f      	cmp	r1, #111	; 0x6f
 8012038:	bf14      	ite	ne
 801203a:	220a      	movne	r2, #10
 801203c:	2208      	moveq	r2, #8
 801203e:	2100      	movs	r1, #0
 8012040:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012044:	6865      	ldr	r5, [r4, #4]
 8012046:	60a5      	str	r5, [r4, #8]
 8012048:	2d00      	cmp	r5, #0
 801204a:	f2c0 8095 	blt.w	8012178 <_printf_i+0x20c>
 801204e:	6821      	ldr	r1, [r4, #0]
 8012050:	f021 0104 	bic.w	r1, r1, #4
 8012054:	6021      	str	r1, [r4, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d13d      	bne.n	80120d6 <_printf_i+0x16a>
 801205a:	2d00      	cmp	r5, #0
 801205c:	f040 808e 	bne.w	801217c <_printf_i+0x210>
 8012060:	4665      	mov	r5, ip
 8012062:	2a08      	cmp	r2, #8
 8012064:	d10b      	bne.n	801207e <_printf_i+0x112>
 8012066:	6823      	ldr	r3, [r4, #0]
 8012068:	07db      	lsls	r3, r3, #31
 801206a:	d508      	bpl.n	801207e <_printf_i+0x112>
 801206c:	6923      	ldr	r3, [r4, #16]
 801206e:	6862      	ldr	r2, [r4, #4]
 8012070:	429a      	cmp	r2, r3
 8012072:	bfde      	ittt	le
 8012074:	2330      	movle	r3, #48	; 0x30
 8012076:	f805 3c01 	strble.w	r3, [r5, #-1]
 801207a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801207e:	ebac 0305 	sub.w	r3, ip, r5
 8012082:	6123      	str	r3, [r4, #16]
 8012084:	f8cd 8000 	str.w	r8, [sp]
 8012088:	463b      	mov	r3, r7
 801208a:	aa03      	add	r2, sp, #12
 801208c:	4621      	mov	r1, r4
 801208e:	4630      	mov	r0, r6
 8012090:	f7ff fef6 	bl	8011e80 <_printf_common>
 8012094:	3001      	adds	r0, #1
 8012096:	d14d      	bne.n	8012134 <_printf_i+0x1c8>
 8012098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801209c:	b005      	add	sp, #20
 801209e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120a2:	4839      	ldr	r0, [pc, #228]	; (8012188 <_printf_i+0x21c>)
 80120a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80120a8:	6813      	ldr	r3, [r2, #0]
 80120aa:	6821      	ldr	r1, [r4, #0]
 80120ac:	1d1d      	adds	r5, r3, #4
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	6015      	str	r5, [r2, #0]
 80120b2:	060a      	lsls	r2, r1, #24
 80120b4:	d50b      	bpl.n	80120ce <_printf_i+0x162>
 80120b6:	07ca      	lsls	r2, r1, #31
 80120b8:	bf44      	itt	mi
 80120ba:	f041 0120 	orrmi.w	r1, r1, #32
 80120be:	6021      	strmi	r1, [r4, #0]
 80120c0:	b91b      	cbnz	r3, 80120ca <_printf_i+0x15e>
 80120c2:	6822      	ldr	r2, [r4, #0]
 80120c4:	f022 0220 	bic.w	r2, r2, #32
 80120c8:	6022      	str	r2, [r4, #0]
 80120ca:	2210      	movs	r2, #16
 80120cc:	e7b7      	b.n	801203e <_printf_i+0xd2>
 80120ce:	064d      	lsls	r5, r1, #25
 80120d0:	bf48      	it	mi
 80120d2:	b29b      	uxthmi	r3, r3
 80120d4:	e7ef      	b.n	80120b6 <_printf_i+0x14a>
 80120d6:	4665      	mov	r5, ip
 80120d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80120dc:	fb02 3311 	mls	r3, r2, r1, r3
 80120e0:	5cc3      	ldrb	r3, [r0, r3]
 80120e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80120e6:	460b      	mov	r3, r1
 80120e8:	2900      	cmp	r1, #0
 80120ea:	d1f5      	bne.n	80120d8 <_printf_i+0x16c>
 80120ec:	e7b9      	b.n	8012062 <_printf_i+0xf6>
 80120ee:	6813      	ldr	r3, [r2, #0]
 80120f0:	6825      	ldr	r5, [r4, #0]
 80120f2:	6961      	ldr	r1, [r4, #20]
 80120f4:	1d18      	adds	r0, r3, #4
 80120f6:	6010      	str	r0, [r2, #0]
 80120f8:	0628      	lsls	r0, r5, #24
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	d501      	bpl.n	8012102 <_printf_i+0x196>
 80120fe:	6019      	str	r1, [r3, #0]
 8012100:	e002      	b.n	8012108 <_printf_i+0x19c>
 8012102:	066a      	lsls	r2, r5, #25
 8012104:	d5fb      	bpl.n	80120fe <_printf_i+0x192>
 8012106:	8019      	strh	r1, [r3, #0]
 8012108:	2300      	movs	r3, #0
 801210a:	6123      	str	r3, [r4, #16]
 801210c:	4665      	mov	r5, ip
 801210e:	e7b9      	b.n	8012084 <_printf_i+0x118>
 8012110:	6813      	ldr	r3, [r2, #0]
 8012112:	1d19      	adds	r1, r3, #4
 8012114:	6011      	str	r1, [r2, #0]
 8012116:	681d      	ldr	r5, [r3, #0]
 8012118:	6862      	ldr	r2, [r4, #4]
 801211a:	2100      	movs	r1, #0
 801211c:	4628      	mov	r0, r5
 801211e:	f7ee f85f 	bl	80001e0 <memchr>
 8012122:	b108      	cbz	r0, 8012128 <_printf_i+0x1bc>
 8012124:	1b40      	subs	r0, r0, r5
 8012126:	6060      	str	r0, [r4, #4]
 8012128:	6863      	ldr	r3, [r4, #4]
 801212a:	6123      	str	r3, [r4, #16]
 801212c:	2300      	movs	r3, #0
 801212e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012132:	e7a7      	b.n	8012084 <_printf_i+0x118>
 8012134:	6923      	ldr	r3, [r4, #16]
 8012136:	462a      	mov	r2, r5
 8012138:	4639      	mov	r1, r7
 801213a:	4630      	mov	r0, r6
 801213c:	47c0      	blx	r8
 801213e:	3001      	adds	r0, #1
 8012140:	d0aa      	beq.n	8012098 <_printf_i+0x12c>
 8012142:	6823      	ldr	r3, [r4, #0]
 8012144:	079b      	lsls	r3, r3, #30
 8012146:	d413      	bmi.n	8012170 <_printf_i+0x204>
 8012148:	68e0      	ldr	r0, [r4, #12]
 801214a:	9b03      	ldr	r3, [sp, #12]
 801214c:	4298      	cmp	r0, r3
 801214e:	bfb8      	it	lt
 8012150:	4618      	movlt	r0, r3
 8012152:	e7a3      	b.n	801209c <_printf_i+0x130>
 8012154:	2301      	movs	r3, #1
 8012156:	464a      	mov	r2, r9
 8012158:	4639      	mov	r1, r7
 801215a:	4630      	mov	r0, r6
 801215c:	47c0      	blx	r8
 801215e:	3001      	adds	r0, #1
 8012160:	d09a      	beq.n	8012098 <_printf_i+0x12c>
 8012162:	3501      	adds	r5, #1
 8012164:	68e3      	ldr	r3, [r4, #12]
 8012166:	9a03      	ldr	r2, [sp, #12]
 8012168:	1a9b      	subs	r3, r3, r2
 801216a:	42ab      	cmp	r3, r5
 801216c:	dcf2      	bgt.n	8012154 <_printf_i+0x1e8>
 801216e:	e7eb      	b.n	8012148 <_printf_i+0x1dc>
 8012170:	2500      	movs	r5, #0
 8012172:	f104 0919 	add.w	r9, r4, #25
 8012176:	e7f5      	b.n	8012164 <_printf_i+0x1f8>
 8012178:	2b00      	cmp	r3, #0
 801217a:	d1ac      	bne.n	80120d6 <_printf_i+0x16a>
 801217c:	7803      	ldrb	r3, [r0, #0]
 801217e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012182:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012186:	e76c      	b.n	8012062 <_printf_i+0xf6>
 8012188:	08018112 	.word	0x08018112
 801218c:	08018123 	.word	0x08018123

08012190 <iprintf>:
 8012190:	b40f      	push	{r0, r1, r2, r3}
 8012192:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <iprintf+0x2c>)
 8012194:	b513      	push	{r0, r1, r4, lr}
 8012196:	681c      	ldr	r4, [r3, #0]
 8012198:	b124      	cbz	r4, 80121a4 <iprintf+0x14>
 801219a:	69a3      	ldr	r3, [r4, #24]
 801219c:	b913      	cbnz	r3, 80121a4 <iprintf+0x14>
 801219e:	4620      	mov	r0, r4
 80121a0:	f001 ff16 	bl	8013fd0 <__sinit>
 80121a4:	ab05      	add	r3, sp, #20
 80121a6:	9a04      	ldr	r2, [sp, #16]
 80121a8:	68a1      	ldr	r1, [r4, #8]
 80121aa:	9301      	str	r3, [sp, #4]
 80121ac:	4620      	mov	r0, r4
 80121ae:	f003 f97f 	bl	80154b0 <_vfiprintf_r>
 80121b2:	b002      	add	sp, #8
 80121b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121b8:	b004      	add	sp, #16
 80121ba:	4770      	bx	lr
 80121bc:	200001a4 	.word	0x200001a4

080121c0 <putchar>:
 80121c0:	b538      	push	{r3, r4, r5, lr}
 80121c2:	4b08      	ldr	r3, [pc, #32]	; (80121e4 <putchar+0x24>)
 80121c4:	681c      	ldr	r4, [r3, #0]
 80121c6:	4605      	mov	r5, r0
 80121c8:	b124      	cbz	r4, 80121d4 <putchar+0x14>
 80121ca:	69a3      	ldr	r3, [r4, #24]
 80121cc:	b913      	cbnz	r3, 80121d4 <putchar+0x14>
 80121ce:	4620      	mov	r0, r4
 80121d0:	f001 fefe 	bl	8013fd0 <__sinit>
 80121d4:	68a2      	ldr	r2, [r4, #8]
 80121d6:	4629      	mov	r1, r5
 80121d8:	4620      	mov	r0, r4
 80121da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121de:	f003 ba7d 	b.w	80156dc <_putc_r>
 80121e2:	bf00      	nop
 80121e4:	200001a4 	.word	0x200001a4

080121e8 <_puts_r>:
 80121e8:	b570      	push	{r4, r5, r6, lr}
 80121ea:	460e      	mov	r6, r1
 80121ec:	4605      	mov	r5, r0
 80121ee:	b118      	cbz	r0, 80121f8 <_puts_r+0x10>
 80121f0:	6983      	ldr	r3, [r0, #24]
 80121f2:	b90b      	cbnz	r3, 80121f8 <_puts_r+0x10>
 80121f4:	f001 feec 	bl	8013fd0 <__sinit>
 80121f8:	69ab      	ldr	r3, [r5, #24]
 80121fa:	68ac      	ldr	r4, [r5, #8]
 80121fc:	b913      	cbnz	r3, 8012204 <_puts_r+0x1c>
 80121fe:	4628      	mov	r0, r5
 8012200:	f001 fee6 	bl	8013fd0 <__sinit>
 8012204:	4b23      	ldr	r3, [pc, #140]	; (8012294 <_puts_r+0xac>)
 8012206:	429c      	cmp	r4, r3
 8012208:	d117      	bne.n	801223a <_puts_r+0x52>
 801220a:	686c      	ldr	r4, [r5, #4]
 801220c:	89a3      	ldrh	r3, [r4, #12]
 801220e:	071b      	lsls	r3, r3, #28
 8012210:	d51d      	bpl.n	801224e <_puts_r+0x66>
 8012212:	6923      	ldr	r3, [r4, #16]
 8012214:	b1db      	cbz	r3, 801224e <_puts_r+0x66>
 8012216:	3e01      	subs	r6, #1
 8012218:	68a3      	ldr	r3, [r4, #8]
 801221a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801221e:	3b01      	subs	r3, #1
 8012220:	60a3      	str	r3, [r4, #8]
 8012222:	b9e9      	cbnz	r1, 8012260 <_puts_r+0x78>
 8012224:	2b00      	cmp	r3, #0
 8012226:	da2e      	bge.n	8012286 <_puts_r+0x9e>
 8012228:	4622      	mov	r2, r4
 801222a:	210a      	movs	r1, #10
 801222c:	4628      	mov	r0, r5
 801222e:	f000 fedb 	bl	8012fe8 <__swbuf_r>
 8012232:	3001      	adds	r0, #1
 8012234:	d011      	beq.n	801225a <_puts_r+0x72>
 8012236:	200a      	movs	r0, #10
 8012238:	e011      	b.n	801225e <_puts_r+0x76>
 801223a:	4b17      	ldr	r3, [pc, #92]	; (8012298 <_puts_r+0xb0>)
 801223c:	429c      	cmp	r4, r3
 801223e:	d101      	bne.n	8012244 <_puts_r+0x5c>
 8012240:	68ac      	ldr	r4, [r5, #8]
 8012242:	e7e3      	b.n	801220c <_puts_r+0x24>
 8012244:	4b15      	ldr	r3, [pc, #84]	; (801229c <_puts_r+0xb4>)
 8012246:	429c      	cmp	r4, r3
 8012248:	bf08      	it	eq
 801224a:	68ec      	ldreq	r4, [r5, #12]
 801224c:	e7de      	b.n	801220c <_puts_r+0x24>
 801224e:	4621      	mov	r1, r4
 8012250:	4628      	mov	r0, r5
 8012252:	f000 ff1b 	bl	801308c <__swsetup_r>
 8012256:	2800      	cmp	r0, #0
 8012258:	d0dd      	beq.n	8012216 <_puts_r+0x2e>
 801225a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801225e:	bd70      	pop	{r4, r5, r6, pc}
 8012260:	2b00      	cmp	r3, #0
 8012262:	da04      	bge.n	801226e <_puts_r+0x86>
 8012264:	69a2      	ldr	r2, [r4, #24]
 8012266:	429a      	cmp	r2, r3
 8012268:	dc06      	bgt.n	8012278 <_puts_r+0x90>
 801226a:	290a      	cmp	r1, #10
 801226c:	d004      	beq.n	8012278 <_puts_r+0x90>
 801226e:	6823      	ldr	r3, [r4, #0]
 8012270:	1c5a      	adds	r2, r3, #1
 8012272:	6022      	str	r2, [r4, #0]
 8012274:	7019      	strb	r1, [r3, #0]
 8012276:	e7cf      	b.n	8012218 <_puts_r+0x30>
 8012278:	4622      	mov	r2, r4
 801227a:	4628      	mov	r0, r5
 801227c:	f000 feb4 	bl	8012fe8 <__swbuf_r>
 8012280:	3001      	adds	r0, #1
 8012282:	d1c9      	bne.n	8012218 <_puts_r+0x30>
 8012284:	e7e9      	b.n	801225a <_puts_r+0x72>
 8012286:	6823      	ldr	r3, [r4, #0]
 8012288:	200a      	movs	r0, #10
 801228a:	1c5a      	adds	r2, r3, #1
 801228c:	6022      	str	r2, [r4, #0]
 801228e:	7018      	strb	r0, [r3, #0]
 8012290:	e7e5      	b.n	801225e <_puts_r+0x76>
 8012292:	bf00      	nop
 8012294:	080181b8 	.word	0x080181b8
 8012298:	080181d8 	.word	0x080181d8
 801229c:	08018198 	.word	0x08018198

080122a0 <puts>:
 80122a0:	4b02      	ldr	r3, [pc, #8]	; (80122ac <puts+0xc>)
 80122a2:	4601      	mov	r1, r0
 80122a4:	6818      	ldr	r0, [r3, #0]
 80122a6:	f7ff bf9f 	b.w	80121e8 <_puts_r>
 80122aa:	bf00      	nop
 80122ac:	200001a4 	.word	0x200001a4

080122b0 <siprintf>:
 80122b0:	b40e      	push	{r1, r2, r3}
 80122b2:	b500      	push	{lr}
 80122b4:	b09c      	sub	sp, #112	; 0x70
 80122b6:	ab1d      	add	r3, sp, #116	; 0x74
 80122b8:	9002      	str	r0, [sp, #8]
 80122ba:	9006      	str	r0, [sp, #24]
 80122bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80122c0:	4809      	ldr	r0, [pc, #36]	; (80122e8 <siprintf+0x38>)
 80122c2:	9107      	str	r1, [sp, #28]
 80122c4:	9104      	str	r1, [sp, #16]
 80122c6:	4909      	ldr	r1, [pc, #36]	; (80122ec <siprintf+0x3c>)
 80122c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80122cc:	9105      	str	r1, [sp, #20]
 80122ce:	6800      	ldr	r0, [r0, #0]
 80122d0:	9301      	str	r3, [sp, #4]
 80122d2:	a902      	add	r1, sp, #8
 80122d4:	f002 ffca 	bl	801526c <_svfiprintf_r>
 80122d8:	9b02      	ldr	r3, [sp, #8]
 80122da:	2200      	movs	r2, #0
 80122dc:	701a      	strb	r2, [r3, #0]
 80122de:	b01c      	add	sp, #112	; 0x70
 80122e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80122e4:	b003      	add	sp, #12
 80122e6:	4770      	bx	lr
 80122e8:	200001a4 	.word	0x200001a4
 80122ec:	ffff0208 	.word	0xffff0208

080122f0 <strncpy>:
 80122f0:	b570      	push	{r4, r5, r6, lr}
 80122f2:	3901      	subs	r1, #1
 80122f4:	4604      	mov	r4, r0
 80122f6:	b902      	cbnz	r2, 80122fa <strncpy+0xa>
 80122f8:	bd70      	pop	{r4, r5, r6, pc}
 80122fa:	4623      	mov	r3, r4
 80122fc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8012300:	f803 5b01 	strb.w	r5, [r3], #1
 8012304:	1e56      	subs	r6, r2, #1
 8012306:	b92d      	cbnz	r5, 8012314 <strncpy+0x24>
 8012308:	4414      	add	r4, r2
 801230a:	42a3      	cmp	r3, r4
 801230c:	d0f4      	beq.n	80122f8 <strncpy+0x8>
 801230e:	f803 5b01 	strb.w	r5, [r3], #1
 8012312:	e7fa      	b.n	801230a <strncpy+0x1a>
 8012314:	461c      	mov	r4, r3
 8012316:	4632      	mov	r2, r6
 8012318:	e7ed      	b.n	80122f6 <strncpy+0x6>

0801231a <sulp>:
 801231a:	b570      	push	{r4, r5, r6, lr}
 801231c:	4604      	mov	r4, r0
 801231e:	460d      	mov	r5, r1
 8012320:	ec45 4b10 	vmov	d0, r4, r5
 8012324:	4616      	mov	r6, r2
 8012326:	f002 fd5d 	bl	8014de4 <__ulp>
 801232a:	ec51 0b10 	vmov	r0, r1, d0
 801232e:	b17e      	cbz	r6, 8012350 <sulp+0x36>
 8012330:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012334:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012338:	2b00      	cmp	r3, #0
 801233a:	dd09      	ble.n	8012350 <sulp+0x36>
 801233c:	051b      	lsls	r3, r3, #20
 801233e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012342:	2400      	movs	r4, #0
 8012344:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012348:	4622      	mov	r2, r4
 801234a:	462b      	mov	r3, r5
 801234c:	f7ee f954 	bl	80005f8 <__aeabi_dmul>
 8012350:	bd70      	pop	{r4, r5, r6, pc}
 8012352:	0000      	movs	r0, r0
 8012354:	0000      	movs	r0, r0
	...

08012358 <_strtod_l>:
 8012358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801235c:	461f      	mov	r7, r3
 801235e:	b0a1      	sub	sp, #132	; 0x84
 8012360:	2300      	movs	r3, #0
 8012362:	4681      	mov	r9, r0
 8012364:	4638      	mov	r0, r7
 8012366:	460e      	mov	r6, r1
 8012368:	9217      	str	r2, [sp, #92]	; 0x5c
 801236a:	931c      	str	r3, [sp, #112]	; 0x70
 801236c:	f002 f9e0 	bl	8014730 <__localeconv_l>
 8012370:	4680      	mov	r8, r0
 8012372:	6800      	ldr	r0, [r0, #0]
 8012374:	f7ed ff2c 	bl	80001d0 <strlen>
 8012378:	f04f 0a00 	mov.w	sl, #0
 801237c:	4604      	mov	r4, r0
 801237e:	f04f 0b00 	mov.w	fp, #0
 8012382:	961b      	str	r6, [sp, #108]	; 0x6c
 8012384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012386:	781a      	ldrb	r2, [r3, #0]
 8012388:	2a0d      	cmp	r2, #13
 801238a:	d832      	bhi.n	80123f2 <_strtod_l+0x9a>
 801238c:	2a09      	cmp	r2, #9
 801238e:	d236      	bcs.n	80123fe <_strtod_l+0xa6>
 8012390:	2a00      	cmp	r2, #0
 8012392:	d03e      	beq.n	8012412 <_strtod_l+0xba>
 8012394:	2300      	movs	r3, #0
 8012396:	930d      	str	r3, [sp, #52]	; 0x34
 8012398:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801239a:	782b      	ldrb	r3, [r5, #0]
 801239c:	2b30      	cmp	r3, #48	; 0x30
 801239e:	f040 80ac 	bne.w	80124fa <_strtod_l+0x1a2>
 80123a2:	786b      	ldrb	r3, [r5, #1]
 80123a4:	2b58      	cmp	r3, #88	; 0x58
 80123a6:	d001      	beq.n	80123ac <_strtod_l+0x54>
 80123a8:	2b78      	cmp	r3, #120	; 0x78
 80123aa:	d167      	bne.n	801247c <_strtod_l+0x124>
 80123ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123ae:	9301      	str	r3, [sp, #4]
 80123b0:	ab1c      	add	r3, sp, #112	; 0x70
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	9702      	str	r7, [sp, #8]
 80123b6:	ab1d      	add	r3, sp, #116	; 0x74
 80123b8:	4a88      	ldr	r2, [pc, #544]	; (80125dc <_strtod_l+0x284>)
 80123ba:	a91b      	add	r1, sp, #108	; 0x6c
 80123bc:	4648      	mov	r0, r9
 80123be:	f001 fee0 	bl	8014182 <__gethex>
 80123c2:	f010 0407 	ands.w	r4, r0, #7
 80123c6:	4606      	mov	r6, r0
 80123c8:	d005      	beq.n	80123d6 <_strtod_l+0x7e>
 80123ca:	2c06      	cmp	r4, #6
 80123cc:	d12b      	bne.n	8012426 <_strtod_l+0xce>
 80123ce:	3501      	adds	r5, #1
 80123d0:	2300      	movs	r3, #0
 80123d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80123d4:	930d      	str	r3, [sp, #52]	; 0x34
 80123d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80123d8:	2b00      	cmp	r3, #0
 80123da:	f040 859a 	bne.w	8012f12 <_strtod_l+0xbba>
 80123de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123e0:	b1e3      	cbz	r3, 801241c <_strtod_l+0xc4>
 80123e2:	4652      	mov	r2, sl
 80123e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80123e8:	ec43 2b10 	vmov	d0, r2, r3
 80123ec:	b021      	add	sp, #132	; 0x84
 80123ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f2:	2a2b      	cmp	r2, #43	; 0x2b
 80123f4:	d015      	beq.n	8012422 <_strtod_l+0xca>
 80123f6:	2a2d      	cmp	r2, #45	; 0x2d
 80123f8:	d004      	beq.n	8012404 <_strtod_l+0xac>
 80123fa:	2a20      	cmp	r2, #32
 80123fc:	d1ca      	bne.n	8012394 <_strtod_l+0x3c>
 80123fe:	3301      	adds	r3, #1
 8012400:	931b      	str	r3, [sp, #108]	; 0x6c
 8012402:	e7bf      	b.n	8012384 <_strtod_l+0x2c>
 8012404:	2201      	movs	r2, #1
 8012406:	920d      	str	r2, [sp, #52]	; 0x34
 8012408:	1c5a      	adds	r2, r3, #1
 801240a:	921b      	str	r2, [sp, #108]	; 0x6c
 801240c:	785b      	ldrb	r3, [r3, #1]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d1c2      	bne.n	8012398 <_strtod_l+0x40>
 8012412:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012414:	961b      	str	r6, [sp, #108]	; 0x6c
 8012416:	2b00      	cmp	r3, #0
 8012418:	f040 8579 	bne.w	8012f0e <_strtod_l+0xbb6>
 801241c:	4652      	mov	r2, sl
 801241e:	465b      	mov	r3, fp
 8012420:	e7e2      	b.n	80123e8 <_strtod_l+0x90>
 8012422:	2200      	movs	r2, #0
 8012424:	e7ef      	b.n	8012406 <_strtod_l+0xae>
 8012426:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012428:	b13a      	cbz	r2, 801243a <_strtod_l+0xe2>
 801242a:	2135      	movs	r1, #53	; 0x35
 801242c:	a81e      	add	r0, sp, #120	; 0x78
 801242e:	f002 fdd1 	bl	8014fd4 <__copybits>
 8012432:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012434:	4648      	mov	r0, r9
 8012436:	f002 fa3d 	bl	80148b4 <_Bfree>
 801243a:	3c01      	subs	r4, #1
 801243c:	2c04      	cmp	r4, #4
 801243e:	d806      	bhi.n	801244e <_strtod_l+0xf6>
 8012440:	e8df f004 	tbb	[pc, r4]
 8012444:	1714030a 	.word	0x1714030a
 8012448:	0a          	.byte	0x0a
 8012449:	00          	.byte	0x00
 801244a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801244e:	0730      	lsls	r0, r6, #28
 8012450:	d5c1      	bpl.n	80123d6 <_strtod_l+0x7e>
 8012452:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012456:	e7be      	b.n	80123d6 <_strtod_l+0x7e>
 8012458:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801245c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801245e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012462:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012466:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801246a:	e7f0      	b.n	801244e <_strtod_l+0xf6>
 801246c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80125e0 <_strtod_l+0x288>
 8012470:	e7ed      	b.n	801244e <_strtod_l+0xf6>
 8012472:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012476:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801247a:	e7e8      	b.n	801244e <_strtod_l+0xf6>
 801247c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801247e:	1c5a      	adds	r2, r3, #1
 8012480:	921b      	str	r2, [sp, #108]	; 0x6c
 8012482:	785b      	ldrb	r3, [r3, #1]
 8012484:	2b30      	cmp	r3, #48	; 0x30
 8012486:	d0f9      	beq.n	801247c <_strtod_l+0x124>
 8012488:	2b00      	cmp	r3, #0
 801248a:	d0a4      	beq.n	80123d6 <_strtod_l+0x7e>
 801248c:	2301      	movs	r3, #1
 801248e:	2500      	movs	r5, #0
 8012490:	9306      	str	r3, [sp, #24]
 8012492:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012494:	9308      	str	r3, [sp, #32]
 8012496:	9507      	str	r5, [sp, #28]
 8012498:	9505      	str	r5, [sp, #20]
 801249a:	220a      	movs	r2, #10
 801249c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801249e:	7807      	ldrb	r7, [r0, #0]
 80124a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80124a4:	b2d9      	uxtb	r1, r3
 80124a6:	2909      	cmp	r1, #9
 80124a8:	d929      	bls.n	80124fe <_strtod_l+0x1a6>
 80124aa:	4622      	mov	r2, r4
 80124ac:	f8d8 1000 	ldr.w	r1, [r8]
 80124b0:	f003 f9a3 	bl	80157fa <strncmp>
 80124b4:	2800      	cmp	r0, #0
 80124b6:	d031      	beq.n	801251c <_strtod_l+0x1c4>
 80124b8:	2000      	movs	r0, #0
 80124ba:	9c05      	ldr	r4, [sp, #20]
 80124bc:	9004      	str	r0, [sp, #16]
 80124be:	463b      	mov	r3, r7
 80124c0:	4602      	mov	r2, r0
 80124c2:	2b65      	cmp	r3, #101	; 0x65
 80124c4:	d001      	beq.n	80124ca <_strtod_l+0x172>
 80124c6:	2b45      	cmp	r3, #69	; 0x45
 80124c8:	d114      	bne.n	80124f4 <_strtod_l+0x19c>
 80124ca:	b924      	cbnz	r4, 80124d6 <_strtod_l+0x17e>
 80124cc:	b910      	cbnz	r0, 80124d4 <_strtod_l+0x17c>
 80124ce:	9b06      	ldr	r3, [sp, #24]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d09e      	beq.n	8012412 <_strtod_l+0xba>
 80124d4:	2400      	movs	r4, #0
 80124d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80124d8:	1c73      	adds	r3, r6, #1
 80124da:	931b      	str	r3, [sp, #108]	; 0x6c
 80124dc:	7873      	ldrb	r3, [r6, #1]
 80124de:	2b2b      	cmp	r3, #43	; 0x2b
 80124e0:	d078      	beq.n	80125d4 <_strtod_l+0x27c>
 80124e2:	2b2d      	cmp	r3, #45	; 0x2d
 80124e4:	d070      	beq.n	80125c8 <_strtod_l+0x270>
 80124e6:	f04f 0c00 	mov.w	ip, #0
 80124ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80124ee:	2f09      	cmp	r7, #9
 80124f0:	d97c      	bls.n	80125ec <_strtod_l+0x294>
 80124f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80124f4:	f04f 0e00 	mov.w	lr, #0
 80124f8:	e09a      	b.n	8012630 <_strtod_l+0x2d8>
 80124fa:	2300      	movs	r3, #0
 80124fc:	e7c7      	b.n	801248e <_strtod_l+0x136>
 80124fe:	9905      	ldr	r1, [sp, #20]
 8012500:	2908      	cmp	r1, #8
 8012502:	bfdd      	ittte	le
 8012504:	9907      	ldrle	r1, [sp, #28]
 8012506:	fb02 3301 	mlale	r3, r2, r1, r3
 801250a:	9307      	strle	r3, [sp, #28]
 801250c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012510:	9b05      	ldr	r3, [sp, #20]
 8012512:	3001      	adds	r0, #1
 8012514:	3301      	adds	r3, #1
 8012516:	9305      	str	r3, [sp, #20]
 8012518:	901b      	str	r0, [sp, #108]	; 0x6c
 801251a:	e7bf      	b.n	801249c <_strtod_l+0x144>
 801251c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801251e:	191a      	adds	r2, r3, r4
 8012520:	921b      	str	r2, [sp, #108]	; 0x6c
 8012522:	9a05      	ldr	r2, [sp, #20]
 8012524:	5d1b      	ldrb	r3, [r3, r4]
 8012526:	2a00      	cmp	r2, #0
 8012528:	d037      	beq.n	801259a <_strtod_l+0x242>
 801252a:	9c05      	ldr	r4, [sp, #20]
 801252c:	4602      	mov	r2, r0
 801252e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012532:	2909      	cmp	r1, #9
 8012534:	d913      	bls.n	801255e <_strtod_l+0x206>
 8012536:	2101      	movs	r1, #1
 8012538:	9104      	str	r1, [sp, #16]
 801253a:	e7c2      	b.n	80124c2 <_strtod_l+0x16a>
 801253c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801253e:	1c5a      	adds	r2, r3, #1
 8012540:	921b      	str	r2, [sp, #108]	; 0x6c
 8012542:	785b      	ldrb	r3, [r3, #1]
 8012544:	3001      	adds	r0, #1
 8012546:	2b30      	cmp	r3, #48	; 0x30
 8012548:	d0f8      	beq.n	801253c <_strtod_l+0x1e4>
 801254a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801254e:	2a08      	cmp	r2, #8
 8012550:	f200 84e4 	bhi.w	8012f1c <_strtod_l+0xbc4>
 8012554:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012556:	9208      	str	r2, [sp, #32]
 8012558:	4602      	mov	r2, r0
 801255a:	2000      	movs	r0, #0
 801255c:	4604      	mov	r4, r0
 801255e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012562:	f100 0101 	add.w	r1, r0, #1
 8012566:	d012      	beq.n	801258e <_strtod_l+0x236>
 8012568:	440a      	add	r2, r1
 801256a:	eb00 0c04 	add.w	ip, r0, r4
 801256e:	4621      	mov	r1, r4
 8012570:	270a      	movs	r7, #10
 8012572:	458c      	cmp	ip, r1
 8012574:	d113      	bne.n	801259e <_strtod_l+0x246>
 8012576:	1821      	adds	r1, r4, r0
 8012578:	2908      	cmp	r1, #8
 801257a:	f104 0401 	add.w	r4, r4, #1
 801257e:	4404      	add	r4, r0
 8012580:	dc19      	bgt.n	80125b6 <_strtod_l+0x25e>
 8012582:	9b07      	ldr	r3, [sp, #28]
 8012584:	210a      	movs	r1, #10
 8012586:	fb01 e303 	mla	r3, r1, r3, lr
 801258a:	9307      	str	r3, [sp, #28]
 801258c:	2100      	movs	r1, #0
 801258e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012590:	1c58      	adds	r0, r3, #1
 8012592:	901b      	str	r0, [sp, #108]	; 0x6c
 8012594:	785b      	ldrb	r3, [r3, #1]
 8012596:	4608      	mov	r0, r1
 8012598:	e7c9      	b.n	801252e <_strtod_l+0x1d6>
 801259a:	9805      	ldr	r0, [sp, #20]
 801259c:	e7d3      	b.n	8012546 <_strtod_l+0x1ee>
 801259e:	2908      	cmp	r1, #8
 80125a0:	f101 0101 	add.w	r1, r1, #1
 80125a4:	dc03      	bgt.n	80125ae <_strtod_l+0x256>
 80125a6:	9b07      	ldr	r3, [sp, #28]
 80125a8:	437b      	muls	r3, r7
 80125aa:	9307      	str	r3, [sp, #28]
 80125ac:	e7e1      	b.n	8012572 <_strtod_l+0x21a>
 80125ae:	2910      	cmp	r1, #16
 80125b0:	bfd8      	it	le
 80125b2:	437d      	mulle	r5, r7
 80125b4:	e7dd      	b.n	8012572 <_strtod_l+0x21a>
 80125b6:	2c10      	cmp	r4, #16
 80125b8:	bfdc      	itt	le
 80125ba:	210a      	movle	r1, #10
 80125bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80125c0:	e7e4      	b.n	801258c <_strtod_l+0x234>
 80125c2:	2301      	movs	r3, #1
 80125c4:	9304      	str	r3, [sp, #16]
 80125c6:	e781      	b.n	80124cc <_strtod_l+0x174>
 80125c8:	f04f 0c01 	mov.w	ip, #1
 80125cc:	1cb3      	adds	r3, r6, #2
 80125ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80125d0:	78b3      	ldrb	r3, [r6, #2]
 80125d2:	e78a      	b.n	80124ea <_strtod_l+0x192>
 80125d4:	f04f 0c00 	mov.w	ip, #0
 80125d8:	e7f8      	b.n	80125cc <_strtod_l+0x274>
 80125da:	bf00      	nop
 80125dc:	08018134 	.word	0x08018134
 80125e0:	7ff00000 	.word	0x7ff00000
 80125e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80125e6:	1c5f      	adds	r7, r3, #1
 80125e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80125ea:	785b      	ldrb	r3, [r3, #1]
 80125ec:	2b30      	cmp	r3, #48	; 0x30
 80125ee:	d0f9      	beq.n	80125e4 <_strtod_l+0x28c>
 80125f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80125f4:	2f08      	cmp	r7, #8
 80125f6:	f63f af7d 	bhi.w	80124f4 <_strtod_l+0x19c>
 80125fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80125fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012600:	930a      	str	r3, [sp, #40]	; 0x28
 8012602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012604:	1c5f      	adds	r7, r3, #1
 8012606:	971b      	str	r7, [sp, #108]	; 0x6c
 8012608:	785b      	ldrb	r3, [r3, #1]
 801260a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801260e:	f1b8 0f09 	cmp.w	r8, #9
 8012612:	d937      	bls.n	8012684 <_strtod_l+0x32c>
 8012614:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012616:	1a7f      	subs	r7, r7, r1
 8012618:	2f08      	cmp	r7, #8
 801261a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801261e:	dc37      	bgt.n	8012690 <_strtod_l+0x338>
 8012620:	45be      	cmp	lr, r7
 8012622:	bfa8      	it	ge
 8012624:	46be      	movge	lr, r7
 8012626:	f1bc 0f00 	cmp.w	ip, #0
 801262a:	d001      	beq.n	8012630 <_strtod_l+0x2d8>
 801262c:	f1ce 0e00 	rsb	lr, lr, #0
 8012630:	2c00      	cmp	r4, #0
 8012632:	d151      	bne.n	80126d8 <_strtod_l+0x380>
 8012634:	2800      	cmp	r0, #0
 8012636:	f47f aece 	bne.w	80123d6 <_strtod_l+0x7e>
 801263a:	9a06      	ldr	r2, [sp, #24]
 801263c:	2a00      	cmp	r2, #0
 801263e:	f47f aeca 	bne.w	80123d6 <_strtod_l+0x7e>
 8012642:	9a04      	ldr	r2, [sp, #16]
 8012644:	2a00      	cmp	r2, #0
 8012646:	f47f aee4 	bne.w	8012412 <_strtod_l+0xba>
 801264a:	2b4e      	cmp	r3, #78	; 0x4e
 801264c:	d027      	beq.n	801269e <_strtod_l+0x346>
 801264e:	dc21      	bgt.n	8012694 <_strtod_l+0x33c>
 8012650:	2b49      	cmp	r3, #73	; 0x49
 8012652:	f47f aede 	bne.w	8012412 <_strtod_l+0xba>
 8012656:	49a0      	ldr	r1, [pc, #640]	; (80128d8 <_strtod_l+0x580>)
 8012658:	a81b      	add	r0, sp, #108	; 0x6c
 801265a:	f001 ffc5 	bl	80145e8 <__match>
 801265e:	2800      	cmp	r0, #0
 8012660:	f43f aed7 	beq.w	8012412 <_strtod_l+0xba>
 8012664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012666:	499d      	ldr	r1, [pc, #628]	; (80128dc <_strtod_l+0x584>)
 8012668:	3b01      	subs	r3, #1
 801266a:	a81b      	add	r0, sp, #108	; 0x6c
 801266c:	931b      	str	r3, [sp, #108]	; 0x6c
 801266e:	f001 ffbb 	bl	80145e8 <__match>
 8012672:	b910      	cbnz	r0, 801267a <_strtod_l+0x322>
 8012674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012676:	3301      	adds	r3, #1
 8012678:	931b      	str	r3, [sp, #108]	; 0x6c
 801267a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80128f0 <_strtod_l+0x598>
 801267e:	f04f 0a00 	mov.w	sl, #0
 8012682:	e6a8      	b.n	80123d6 <_strtod_l+0x7e>
 8012684:	210a      	movs	r1, #10
 8012686:	fb01 3e0e 	mla	lr, r1, lr, r3
 801268a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801268e:	e7b8      	b.n	8012602 <_strtod_l+0x2aa>
 8012690:	46be      	mov	lr, r7
 8012692:	e7c8      	b.n	8012626 <_strtod_l+0x2ce>
 8012694:	2b69      	cmp	r3, #105	; 0x69
 8012696:	d0de      	beq.n	8012656 <_strtod_l+0x2fe>
 8012698:	2b6e      	cmp	r3, #110	; 0x6e
 801269a:	f47f aeba 	bne.w	8012412 <_strtod_l+0xba>
 801269e:	4990      	ldr	r1, [pc, #576]	; (80128e0 <_strtod_l+0x588>)
 80126a0:	a81b      	add	r0, sp, #108	; 0x6c
 80126a2:	f001 ffa1 	bl	80145e8 <__match>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	f43f aeb3 	beq.w	8012412 <_strtod_l+0xba>
 80126ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	2b28      	cmp	r3, #40	; 0x28
 80126b2:	d10e      	bne.n	80126d2 <_strtod_l+0x37a>
 80126b4:	aa1e      	add	r2, sp, #120	; 0x78
 80126b6:	498b      	ldr	r1, [pc, #556]	; (80128e4 <_strtod_l+0x58c>)
 80126b8:	a81b      	add	r0, sp, #108	; 0x6c
 80126ba:	f001 ffa9 	bl	8014610 <__hexnan>
 80126be:	2805      	cmp	r0, #5
 80126c0:	d107      	bne.n	80126d2 <_strtod_l+0x37a>
 80126c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80126c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80126c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80126cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80126d0:	e681      	b.n	80123d6 <_strtod_l+0x7e>
 80126d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80128f8 <_strtod_l+0x5a0>
 80126d6:	e7d2      	b.n	801267e <_strtod_l+0x326>
 80126d8:	ebae 0302 	sub.w	r3, lr, r2
 80126dc:	9306      	str	r3, [sp, #24]
 80126de:	9b05      	ldr	r3, [sp, #20]
 80126e0:	9807      	ldr	r0, [sp, #28]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	bf08      	it	eq
 80126e6:	4623      	moveq	r3, r4
 80126e8:	2c10      	cmp	r4, #16
 80126ea:	9305      	str	r3, [sp, #20]
 80126ec:	46a0      	mov	r8, r4
 80126ee:	bfa8      	it	ge
 80126f0:	f04f 0810 	movge.w	r8, #16
 80126f4:	f7ed ff06 	bl	8000504 <__aeabi_ui2d>
 80126f8:	2c09      	cmp	r4, #9
 80126fa:	4682      	mov	sl, r0
 80126fc:	468b      	mov	fp, r1
 80126fe:	dc13      	bgt.n	8012728 <_strtod_l+0x3d0>
 8012700:	9b06      	ldr	r3, [sp, #24]
 8012702:	2b00      	cmp	r3, #0
 8012704:	f43f ae67 	beq.w	80123d6 <_strtod_l+0x7e>
 8012708:	9b06      	ldr	r3, [sp, #24]
 801270a:	dd7a      	ble.n	8012802 <_strtod_l+0x4aa>
 801270c:	2b16      	cmp	r3, #22
 801270e:	dc61      	bgt.n	80127d4 <_strtod_l+0x47c>
 8012710:	4a75      	ldr	r2, [pc, #468]	; (80128e8 <_strtod_l+0x590>)
 8012712:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012716:	e9de 0100 	ldrd	r0, r1, [lr]
 801271a:	4652      	mov	r2, sl
 801271c:	465b      	mov	r3, fp
 801271e:	f7ed ff6b 	bl	80005f8 <__aeabi_dmul>
 8012722:	4682      	mov	sl, r0
 8012724:	468b      	mov	fp, r1
 8012726:	e656      	b.n	80123d6 <_strtod_l+0x7e>
 8012728:	4b6f      	ldr	r3, [pc, #444]	; (80128e8 <_strtod_l+0x590>)
 801272a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801272e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012732:	f7ed ff61 	bl	80005f8 <__aeabi_dmul>
 8012736:	4606      	mov	r6, r0
 8012738:	4628      	mov	r0, r5
 801273a:	460f      	mov	r7, r1
 801273c:	f7ed fee2 	bl	8000504 <__aeabi_ui2d>
 8012740:	4602      	mov	r2, r0
 8012742:	460b      	mov	r3, r1
 8012744:	4630      	mov	r0, r6
 8012746:	4639      	mov	r1, r7
 8012748:	f7ed fda0 	bl	800028c <__adddf3>
 801274c:	2c0f      	cmp	r4, #15
 801274e:	4682      	mov	sl, r0
 8012750:	468b      	mov	fp, r1
 8012752:	ddd5      	ble.n	8012700 <_strtod_l+0x3a8>
 8012754:	9b06      	ldr	r3, [sp, #24]
 8012756:	eba4 0808 	sub.w	r8, r4, r8
 801275a:	4498      	add	r8, r3
 801275c:	f1b8 0f00 	cmp.w	r8, #0
 8012760:	f340 8096 	ble.w	8012890 <_strtod_l+0x538>
 8012764:	f018 030f 	ands.w	r3, r8, #15
 8012768:	d00a      	beq.n	8012780 <_strtod_l+0x428>
 801276a:	495f      	ldr	r1, [pc, #380]	; (80128e8 <_strtod_l+0x590>)
 801276c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012770:	4652      	mov	r2, sl
 8012772:	465b      	mov	r3, fp
 8012774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012778:	f7ed ff3e 	bl	80005f8 <__aeabi_dmul>
 801277c:	4682      	mov	sl, r0
 801277e:	468b      	mov	fp, r1
 8012780:	f038 080f 	bics.w	r8, r8, #15
 8012784:	d073      	beq.n	801286e <_strtod_l+0x516>
 8012786:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801278a:	dd47      	ble.n	801281c <_strtod_l+0x4c4>
 801278c:	2400      	movs	r4, #0
 801278e:	46a0      	mov	r8, r4
 8012790:	9407      	str	r4, [sp, #28]
 8012792:	9405      	str	r4, [sp, #20]
 8012794:	2322      	movs	r3, #34	; 0x22
 8012796:	f8df b158 	ldr.w	fp, [pc, #344]	; 80128f0 <_strtod_l+0x598>
 801279a:	f8c9 3000 	str.w	r3, [r9]
 801279e:	f04f 0a00 	mov.w	sl, #0
 80127a2:	9b07      	ldr	r3, [sp, #28]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	f43f ae16 	beq.w	80123d6 <_strtod_l+0x7e>
 80127aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80127ac:	4648      	mov	r0, r9
 80127ae:	f002 f881 	bl	80148b4 <_Bfree>
 80127b2:	9905      	ldr	r1, [sp, #20]
 80127b4:	4648      	mov	r0, r9
 80127b6:	f002 f87d 	bl	80148b4 <_Bfree>
 80127ba:	4641      	mov	r1, r8
 80127bc:	4648      	mov	r0, r9
 80127be:	f002 f879 	bl	80148b4 <_Bfree>
 80127c2:	9907      	ldr	r1, [sp, #28]
 80127c4:	4648      	mov	r0, r9
 80127c6:	f002 f875 	bl	80148b4 <_Bfree>
 80127ca:	4621      	mov	r1, r4
 80127cc:	4648      	mov	r0, r9
 80127ce:	f002 f871 	bl	80148b4 <_Bfree>
 80127d2:	e600      	b.n	80123d6 <_strtod_l+0x7e>
 80127d4:	9a06      	ldr	r2, [sp, #24]
 80127d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80127da:	4293      	cmp	r3, r2
 80127dc:	dbba      	blt.n	8012754 <_strtod_l+0x3fc>
 80127de:	4d42      	ldr	r5, [pc, #264]	; (80128e8 <_strtod_l+0x590>)
 80127e0:	f1c4 040f 	rsb	r4, r4, #15
 80127e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80127e8:	4652      	mov	r2, sl
 80127ea:	465b      	mov	r3, fp
 80127ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127f0:	f7ed ff02 	bl	80005f8 <__aeabi_dmul>
 80127f4:	9b06      	ldr	r3, [sp, #24]
 80127f6:	1b1c      	subs	r4, r3, r4
 80127f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80127fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012800:	e78d      	b.n	801271e <_strtod_l+0x3c6>
 8012802:	f113 0f16 	cmn.w	r3, #22
 8012806:	dba5      	blt.n	8012754 <_strtod_l+0x3fc>
 8012808:	4a37      	ldr	r2, [pc, #220]	; (80128e8 <_strtod_l+0x590>)
 801280a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801280e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012812:	4650      	mov	r0, sl
 8012814:	4659      	mov	r1, fp
 8012816:	f7ee f819 	bl	800084c <__aeabi_ddiv>
 801281a:	e782      	b.n	8012722 <_strtod_l+0x3ca>
 801281c:	2300      	movs	r3, #0
 801281e:	4e33      	ldr	r6, [pc, #204]	; (80128ec <_strtod_l+0x594>)
 8012820:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012824:	4650      	mov	r0, sl
 8012826:	4659      	mov	r1, fp
 8012828:	461d      	mov	r5, r3
 801282a:	f1b8 0f01 	cmp.w	r8, #1
 801282e:	dc21      	bgt.n	8012874 <_strtod_l+0x51c>
 8012830:	b10b      	cbz	r3, 8012836 <_strtod_l+0x4de>
 8012832:	4682      	mov	sl, r0
 8012834:	468b      	mov	fp, r1
 8012836:	4b2d      	ldr	r3, [pc, #180]	; (80128ec <_strtod_l+0x594>)
 8012838:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801283c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012840:	4652      	mov	r2, sl
 8012842:	465b      	mov	r3, fp
 8012844:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012848:	f7ed fed6 	bl	80005f8 <__aeabi_dmul>
 801284c:	4b28      	ldr	r3, [pc, #160]	; (80128f0 <_strtod_l+0x598>)
 801284e:	460a      	mov	r2, r1
 8012850:	400b      	ands	r3, r1
 8012852:	4928      	ldr	r1, [pc, #160]	; (80128f4 <_strtod_l+0x59c>)
 8012854:	428b      	cmp	r3, r1
 8012856:	4682      	mov	sl, r0
 8012858:	d898      	bhi.n	801278c <_strtod_l+0x434>
 801285a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801285e:	428b      	cmp	r3, r1
 8012860:	bf86      	itte	hi
 8012862:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80128fc <_strtod_l+0x5a4>
 8012866:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801286a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801286e:	2300      	movs	r3, #0
 8012870:	9304      	str	r3, [sp, #16]
 8012872:	e077      	b.n	8012964 <_strtod_l+0x60c>
 8012874:	f018 0f01 	tst.w	r8, #1
 8012878:	d006      	beq.n	8012888 <_strtod_l+0x530>
 801287a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	f7ed feb9 	bl	80005f8 <__aeabi_dmul>
 8012886:	2301      	movs	r3, #1
 8012888:	3501      	adds	r5, #1
 801288a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801288e:	e7cc      	b.n	801282a <_strtod_l+0x4d2>
 8012890:	d0ed      	beq.n	801286e <_strtod_l+0x516>
 8012892:	f1c8 0800 	rsb	r8, r8, #0
 8012896:	f018 020f 	ands.w	r2, r8, #15
 801289a:	d00a      	beq.n	80128b2 <_strtod_l+0x55a>
 801289c:	4b12      	ldr	r3, [pc, #72]	; (80128e8 <_strtod_l+0x590>)
 801289e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128a2:	4650      	mov	r0, sl
 80128a4:	4659      	mov	r1, fp
 80128a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128aa:	f7ed ffcf 	bl	800084c <__aeabi_ddiv>
 80128ae:	4682      	mov	sl, r0
 80128b0:	468b      	mov	fp, r1
 80128b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80128b6:	d0da      	beq.n	801286e <_strtod_l+0x516>
 80128b8:	f1b8 0f1f 	cmp.w	r8, #31
 80128bc:	dd20      	ble.n	8012900 <_strtod_l+0x5a8>
 80128be:	2400      	movs	r4, #0
 80128c0:	46a0      	mov	r8, r4
 80128c2:	9407      	str	r4, [sp, #28]
 80128c4:	9405      	str	r4, [sp, #20]
 80128c6:	2322      	movs	r3, #34	; 0x22
 80128c8:	f04f 0a00 	mov.w	sl, #0
 80128cc:	f04f 0b00 	mov.w	fp, #0
 80128d0:	f8c9 3000 	str.w	r3, [r9]
 80128d4:	e765      	b.n	80127a2 <_strtod_l+0x44a>
 80128d6:	bf00      	nop
 80128d8:	08018105 	.word	0x08018105
 80128dc:	0801818b 	.word	0x0801818b
 80128e0:	0801810d 	.word	0x0801810d
 80128e4:	08018148 	.word	0x08018148
 80128e8:	08018230 	.word	0x08018230
 80128ec:	08018208 	.word	0x08018208
 80128f0:	7ff00000 	.word	0x7ff00000
 80128f4:	7ca00000 	.word	0x7ca00000
 80128f8:	fff80000 	.word	0xfff80000
 80128fc:	7fefffff 	.word	0x7fefffff
 8012900:	f018 0310 	ands.w	r3, r8, #16
 8012904:	bf18      	it	ne
 8012906:	236a      	movne	r3, #106	; 0x6a
 8012908:	4da0      	ldr	r5, [pc, #640]	; (8012b8c <_strtod_l+0x834>)
 801290a:	9304      	str	r3, [sp, #16]
 801290c:	4650      	mov	r0, sl
 801290e:	4659      	mov	r1, fp
 8012910:	2300      	movs	r3, #0
 8012912:	f1b8 0f00 	cmp.w	r8, #0
 8012916:	f300 810a 	bgt.w	8012b2e <_strtod_l+0x7d6>
 801291a:	b10b      	cbz	r3, 8012920 <_strtod_l+0x5c8>
 801291c:	4682      	mov	sl, r0
 801291e:	468b      	mov	fp, r1
 8012920:	9b04      	ldr	r3, [sp, #16]
 8012922:	b1bb      	cbz	r3, 8012954 <_strtod_l+0x5fc>
 8012924:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012928:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801292c:	2b00      	cmp	r3, #0
 801292e:	4659      	mov	r1, fp
 8012930:	dd10      	ble.n	8012954 <_strtod_l+0x5fc>
 8012932:	2b1f      	cmp	r3, #31
 8012934:	f340 8107 	ble.w	8012b46 <_strtod_l+0x7ee>
 8012938:	2b34      	cmp	r3, #52	; 0x34
 801293a:	bfde      	ittt	le
 801293c:	3b20      	suble	r3, #32
 801293e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8012942:	fa02 f303 	lslle.w	r3, r2, r3
 8012946:	f04f 0a00 	mov.w	sl, #0
 801294a:	bfcc      	ite	gt
 801294c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012950:	ea03 0b01 	andle.w	fp, r3, r1
 8012954:	2200      	movs	r2, #0
 8012956:	2300      	movs	r3, #0
 8012958:	4650      	mov	r0, sl
 801295a:	4659      	mov	r1, fp
 801295c:	f7ee f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8012960:	2800      	cmp	r0, #0
 8012962:	d1ac      	bne.n	80128be <_strtod_l+0x566>
 8012964:	9b07      	ldr	r3, [sp, #28]
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	9a05      	ldr	r2, [sp, #20]
 801296a:	9908      	ldr	r1, [sp, #32]
 801296c:	4623      	mov	r3, r4
 801296e:	4648      	mov	r0, r9
 8012970:	f001 fff2 	bl	8014958 <__s2b>
 8012974:	9007      	str	r0, [sp, #28]
 8012976:	2800      	cmp	r0, #0
 8012978:	f43f af08 	beq.w	801278c <_strtod_l+0x434>
 801297c:	9a06      	ldr	r2, [sp, #24]
 801297e:	9b06      	ldr	r3, [sp, #24]
 8012980:	2a00      	cmp	r2, #0
 8012982:	f1c3 0300 	rsb	r3, r3, #0
 8012986:	bfa8      	it	ge
 8012988:	2300      	movge	r3, #0
 801298a:	930e      	str	r3, [sp, #56]	; 0x38
 801298c:	2400      	movs	r4, #0
 801298e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012992:	9316      	str	r3, [sp, #88]	; 0x58
 8012994:	46a0      	mov	r8, r4
 8012996:	9b07      	ldr	r3, [sp, #28]
 8012998:	4648      	mov	r0, r9
 801299a:	6859      	ldr	r1, [r3, #4]
 801299c:	f001 ff56 	bl	801484c <_Balloc>
 80129a0:	9005      	str	r0, [sp, #20]
 80129a2:	2800      	cmp	r0, #0
 80129a4:	f43f aef6 	beq.w	8012794 <_strtod_l+0x43c>
 80129a8:	9b07      	ldr	r3, [sp, #28]
 80129aa:	691a      	ldr	r2, [r3, #16]
 80129ac:	3202      	adds	r2, #2
 80129ae:	f103 010c 	add.w	r1, r3, #12
 80129b2:	0092      	lsls	r2, r2, #2
 80129b4:	300c      	adds	r0, #12
 80129b6:	f7fe ff7b 	bl	80118b0 <memcpy>
 80129ba:	aa1e      	add	r2, sp, #120	; 0x78
 80129bc:	a91d      	add	r1, sp, #116	; 0x74
 80129be:	ec4b ab10 	vmov	d0, sl, fp
 80129c2:	4648      	mov	r0, r9
 80129c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80129c8:	f002 fa82 	bl	8014ed0 <__d2b>
 80129cc:	901c      	str	r0, [sp, #112]	; 0x70
 80129ce:	2800      	cmp	r0, #0
 80129d0:	f43f aee0 	beq.w	8012794 <_strtod_l+0x43c>
 80129d4:	2101      	movs	r1, #1
 80129d6:	4648      	mov	r0, r9
 80129d8:	f002 f84a 	bl	8014a70 <__i2b>
 80129dc:	4680      	mov	r8, r0
 80129de:	2800      	cmp	r0, #0
 80129e0:	f43f aed8 	beq.w	8012794 <_strtod_l+0x43c>
 80129e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80129e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80129e8:	2e00      	cmp	r6, #0
 80129ea:	bfab      	itete	ge
 80129ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80129ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80129f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80129f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80129f4:	bfac      	ite	ge
 80129f6:	18f7      	addge	r7, r6, r3
 80129f8:	1b9d      	sublt	r5, r3, r6
 80129fa:	9b04      	ldr	r3, [sp, #16]
 80129fc:	1af6      	subs	r6, r6, r3
 80129fe:	4416      	add	r6, r2
 8012a00:	4b63      	ldr	r3, [pc, #396]	; (8012b90 <_strtod_l+0x838>)
 8012a02:	3e01      	subs	r6, #1
 8012a04:	429e      	cmp	r6, r3
 8012a06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012a0a:	f280 80af 	bge.w	8012b6c <_strtod_l+0x814>
 8012a0e:	1b9b      	subs	r3, r3, r6
 8012a10:	2b1f      	cmp	r3, #31
 8012a12:	eba2 0203 	sub.w	r2, r2, r3
 8012a16:	f04f 0101 	mov.w	r1, #1
 8012a1a:	f300 809b 	bgt.w	8012b54 <_strtod_l+0x7fc>
 8012a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8012a22:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a24:	2300      	movs	r3, #0
 8012a26:	930a      	str	r3, [sp, #40]	; 0x28
 8012a28:	18be      	adds	r6, r7, r2
 8012a2a:	9b04      	ldr	r3, [sp, #16]
 8012a2c:	42b7      	cmp	r7, r6
 8012a2e:	4415      	add	r5, r2
 8012a30:	441d      	add	r5, r3
 8012a32:	463b      	mov	r3, r7
 8012a34:	bfa8      	it	ge
 8012a36:	4633      	movge	r3, r6
 8012a38:	42ab      	cmp	r3, r5
 8012a3a:	bfa8      	it	ge
 8012a3c:	462b      	movge	r3, r5
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	bfc2      	ittt	gt
 8012a42:	1af6      	subgt	r6, r6, r3
 8012a44:	1aed      	subgt	r5, r5, r3
 8012a46:	1aff      	subgt	r7, r7, r3
 8012a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a4a:	b1bb      	cbz	r3, 8012a7c <_strtod_l+0x724>
 8012a4c:	4641      	mov	r1, r8
 8012a4e:	461a      	mov	r2, r3
 8012a50:	4648      	mov	r0, r9
 8012a52:	f002 f8ad 	bl	8014bb0 <__pow5mult>
 8012a56:	4680      	mov	r8, r0
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	f43f ae9b 	beq.w	8012794 <_strtod_l+0x43c>
 8012a5e:	4601      	mov	r1, r0
 8012a60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012a62:	4648      	mov	r0, r9
 8012a64:	f002 f80d 	bl	8014a82 <__multiply>
 8012a68:	900c      	str	r0, [sp, #48]	; 0x30
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	f43f ae92 	beq.w	8012794 <_strtod_l+0x43c>
 8012a70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012a72:	4648      	mov	r0, r9
 8012a74:	f001 ff1e 	bl	80148b4 <_Bfree>
 8012a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a7a:	931c      	str	r3, [sp, #112]	; 0x70
 8012a7c:	2e00      	cmp	r6, #0
 8012a7e:	dc7a      	bgt.n	8012b76 <_strtod_l+0x81e>
 8012a80:	9b06      	ldr	r3, [sp, #24]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	dd08      	ble.n	8012a98 <_strtod_l+0x740>
 8012a86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012a88:	9905      	ldr	r1, [sp, #20]
 8012a8a:	4648      	mov	r0, r9
 8012a8c:	f002 f890 	bl	8014bb0 <__pow5mult>
 8012a90:	9005      	str	r0, [sp, #20]
 8012a92:	2800      	cmp	r0, #0
 8012a94:	f43f ae7e 	beq.w	8012794 <_strtod_l+0x43c>
 8012a98:	2d00      	cmp	r5, #0
 8012a9a:	dd08      	ble.n	8012aae <_strtod_l+0x756>
 8012a9c:	462a      	mov	r2, r5
 8012a9e:	9905      	ldr	r1, [sp, #20]
 8012aa0:	4648      	mov	r0, r9
 8012aa2:	f002 f8d3 	bl	8014c4c <__lshift>
 8012aa6:	9005      	str	r0, [sp, #20]
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	f43f ae73 	beq.w	8012794 <_strtod_l+0x43c>
 8012aae:	2f00      	cmp	r7, #0
 8012ab0:	dd08      	ble.n	8012ac4 <_strtod_l+0x76c>
 8012ab2:	4641      	mov	r1, r8
 8012ab4:	463a      	mov	r2, r7
 8012ab6:	4648      	mov	r0, r9
 8012ab8:	f002 f8c8 	bl	8014c4c <__lshift>
 8012abc:	4680      	mov	r8, r0
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	f43f ae68 	beq.w	8012794 <_strtod_l+0x43c>
 8012ac4:	9a05      	ldr	r2, [sp, #20]
 8012ac6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012ac8:	4648      	mov	r0, r9
 8012aca:	f002 f92d 	bl	8014d28 <__mdiff>
 8012ace:	4604      	mov	r4, r0
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	f43f ae5f 	beq.w	8012794 <_strtod_l+0x43c>
 8012ad6:	68c3      	ldr	r3, [r0, #12]
 8012ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8012ada:	2300      	movs	r3, #0
 8012adc:	60c3      	str	r3, [r0, #12]
 8012ade:	4641      	mov	r1, r8
 8012ae0:	f002 f908 	bl	8014cf4 <__mcmp>
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	da55      	bge.n	8012b94 <_strtod_l+0x83c>
 8012ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012aea:	b9e3      	cbnz	r3, 8012b26 <_strtod_l+0x7ce>
 8012aec:	f1ba 0f00 	cmp.w	sl, #0
 8012af0:	d119      	bne.n	8012b26 <_strtod_l+0x7ce>
 8012af2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012af6:	b9b3      	cbnz	r3, 8012b26 <_strtod_l+0x7ce>
 8012af8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012afc:	0d1b      	lsrs	r3, r3, #20
 8012afe:	051b      	lsls	r3, r3, #20
 8012b00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012b04:	d90f      	bls.n	8012b26 <_strtod_l+0x7ce>
 8012b06:	6963      	ldr	r3, [r4, #20]
 8012b08:	b913      	cbnz	r3, 8012b10 <_strtod_l+0x7b8>
 8012b0a:	6923      	ldr	r3, [r4, #16]
 8012b0c:	2b01      	cmp	r3, #1
 8012b0e:	dd0a      	ble.n	8012b26 <_strtod_l+0x7ce>
 8012b10:	4621      	mov	r1, r4
 8012b12:	2201      	movs	r2, #1
 8012b14:	4648      	mov	r0, r9
 8012b16:	f002 f899 	bl	8014c4c <__lshift>
 8012b1a:	4641      	mov	r1, r8
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	f002 f8e9 	bl	8014cf4 <__mcmp>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	dc67      	bgt.n	8012bf6 <_strtod_l+0x89e>
 8012b26:	9b04      	ldr	r3, [sp, #16]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d171      	bne.n	8012c10 <_strtod_l+0x8b8>
 8012b2c:	e63d      	b.n	80127aa <_strtod_l+0x452>
 8012b2e:	f018 0f01 	tst.w	r8, #1
 8012b32:	d004      	beq.n	8012b3e <_strtod_l+0x7e6>
 8012b34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012b38:	f7ed fd5e 	bl	80005f8 <__aeabi_dmul>
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012b42:	3508      	adds	r5, #8
 8012b44:	e6e5      	b.n	8012912 <_strtod_l+0x5ba>
 8012b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b4e:	ea03 0a0a 	and.w	sl, r3, sl
 8012b52:	e6ff      	b.n	8012954 <_strtod_l+0x5fc>
 8012b54:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012b58:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012b5c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012b60:	36e2      	adds	r6, #226	; 0xe2
 8012b62:	fa01 f306 	lsl.w	r3, r1, r6
 8012b66:	930a      	str	r3, [sp, #40]	; 0x28
 8012b68:	910f      	str	r1, [sp, #60]	; 0x3c
 8012b6a:	e75d      	b.n	8012a28 <_strtod_l+0x6d0>
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8012b70:	2301      	movs	r3, #1
 8012b72:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b74:	e758      	b.n	8012a28 <_strtod_l+0x6d0>
 8012b76:	4632      	mov	r2, r6
 8012b78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012b7a:	4648      	mov	r0, r9
 8012b7c:	f002 f866 	bl	8014c4c <__lshift>
 8012b80:	901c      	str	r0, [sp, #112]	; 0x70
 8012b82:	2800      	cmp	r0, #0
 8012b84:	f47f af7c 	bne.w	8012a80 <_strtod_l+0x728>
 8012b88:	e604      	b.n	8012794 <_strtod_l+0x43c>
 8012b8a:	bf00      	nop
 8012b8c:	08018160 	.word	0x08018160
 8012b90:	fffffc02 	.word	0xfffffc02
 8012b94:	465d      	mov	r5, fp
 8012b96:	f040 8086 	bne.w	8012ca6 <_strtod_l+0x94e>
 8012b9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ba0:	b32a      	cbz	r2, 8012bee <_strtod_l+0x896>
 8012ba2:	4aaf      	ldr	r2, [pc, #700]	; (8012e60 <_strtod_l+0xb08>)
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d153      	bne.n	8012c50 <_strtod_l+0x8f8>
 8012ba8:	9b04      	ldr	r3, [sp, #16]
 8012baa:	4650      	mov	r0, sl
 8012bac:	b1d3      	cbz	r3, 8012be4 <_strtod_l+0x88c>
 8012bae:	4aad      	ldr	r2, [pc, #692]	; (8012e64 <_strtod_l+0xb0c>)
 8012bb0:	402a      	ands	r2, r5
 8012bb2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012bb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012bba:	d816      	bhi.n	8012bea <_strtod_l+0x892>
 8012bbc:	0d12      	lsrs	r2, r2, #20
 8012bbe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8012bc6:	4298      	cmp	r0, r3
 8012bc8:	d142      	bne.n	8012c50 <_strtod_l+0x8f8>
 8012bca:	4ba7      	ldr	r3, [pc, #668]	; (8012e68 <_strtod_l+0xb10>)
 8012bcc:	429d      	cmp	r5, r3
 8012bce:	d102      	bne.n	8012bd6 <_strtod_l+0x87e>
 8012bd0:	3001      	adds	r0, #1
 8012bd2:	f43f addf 	beq.w	8012794 <_strtod_l+0x43c>
 8012bd6:	4ba3      	ldr	r3, [pc, #652]	; (8012e64 <_strtod_l+0xb0c>)
 8012bd8:	402b      	ands	r3, r5
 8012bda:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012bde:	f04f 0a00 	mov.w	sl, #0
 8012be2:	e7a0      	b.n	8012b26 <_strtod_l+0x7ce>
 8012be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012be8:	e7ed      	b.n	8012bc6 <_strtod_l+0x86e>
 8012bea:	460b      	mov	r3, r1
 8012bec:	e7eb      	b.n	8012bc6 <_strtod_l+0x86e>
 8012bee:	bb7b      	cbnz	r3, 8012c50 <_strtod_l+0x8f8>
 8012bf0:	f1ba 0f00 	cmp.w	sl, #0
 8012bf4:	d12c      	bne.n	8012c50 <_strtod_l+0x8f8>
 8012bf6:	9904      	ldr	r1, [sp, #16]
 8012bf8:	4a9a      	ldr	r2, [pc, #616]	; (8012e64 <_strtod_l+0xb0c>)
 8012bfa:	465b      	mov	r3, fp
 8012bfc:	b1f1      	cbz	r1, 8012c3c <_strtod_l+0x8e4>
 8012bfe:	ea02 010b 	and.w	r1, r2, fp
 8012c02:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012c06:	dc19      	bgt.n	8012c3c <_strtod_l+0x8e4>
 8012c08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012c0c:	f77f ae5b 	ble.w	80128c6 <_strtod_l+0x56e>
 8012c10:	4a96      	ldr	r2, [pc, #600]	; (8012e6c <_strtod_l+0xb14>)
 8012c12:	2300      	movs	r3, #0
 8012c14:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012c18:	4650      	mov	r0, sl
 8012c1a:	4659      	mov	r1, fp
 8012c1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012c20:	f7ed fcea 	bl	80005f8 <__aeabi_dmul>
 8012c24:	4682      	mov	sl, r0
 8012c26:	468b      	mov	fp, r1
 8012c28:	2900      	cmp	r1, #0
 8012c2a:	f47f adbe 	bne.w	80127aa <_strtod_l+0x452>
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	f47f adbb 	bne.w	80127aa <_strtod_l+0x452>
 8012c34:	2322      	movs	r3, #34	; 0x22
 8012c36:	f8c9 3000 	str.w	r3, [r9]
 8012c3a:	e5b6      	b.n	80127aa <_strtod_l+0x452>
 8012c3c:	4013      	ands	r3, r2
 8012c3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012c42:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012c46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012c4a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012c4e:	e76a      	b.n	8012b26 <_strtod_l+0x7ce>
 8012c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c52:	b193      	cbz	r3, 8012c7a <_strtod_l+0x922>
 8012c54:	422b      	tst	r3, r5
 8012c56:	f43f af66 	beq.w	8012b26 <_strtod_l+0x7ce>
 8012c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c5c:	9a04      	ldr	r2, [sp, #16]
 8012c5e:	4650      	mov	r0, sl
 8012c60:	4659      	mov	r1, fp
 8012c62:	b173      	cbz	r3, 8012c82 <_strtod_l+0x92a>
 8012c64:	f7ff fb59 	bl	801231a <sulp>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012c70:	f7ed fb0c 	bl	800028c <__adddf3>
 8012c74:	4682      	mov	sl, r0
 8012c76:	468b      	mov	fp, r1
 8012c78:	e755      	b.n	8012b26 <_strtod_l+0x7ce>
 8012c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c7c:	ea13 0f0a 	tst.w	r3, sl
 8012c80:	e7e9      	b.n	8012c56 <_strtod_l+0x8fe>
 8012c82:	f7ff fb4a 	bl	801231a <sulp>
 8012c86:	4602      	mov	r2, r0
 8012c88:	460b      	mov	r3, r1
 8012c8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012c8e:	f7ed fafb 	bl	8000288 <__aeabi_dsub>
 8012c92:	2200      	movs	r2, #0
 8012c94:	2300      	movs	r3, #0
 8012c96:	4682      	mov	sl, r0
 8012c98:	468b      	mov	fp, r1
 8012c9a:	f7ed ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	f47f ae11 	bne.w	80128c6 <_strtod_l+0x56e>
 8012ca4:	e73f      	b.n	8012b26 <_strtod_l+0x7ce>
 8012ca6:	4641      	mov	r1, r8
 8012ca8:	4620      	mov	r0, r4
 8012caa:	f002 f960 	bl	8014f6e <__ratio>
 8012cae:	ec57 6b10 	vmov	r6, r7, d0
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cb8:	ee10 0a10 	vmov	r0, s0
 8012cbc:	4639      	mov	r1, r7
 8012cbe:	f7ed ff17 	bl	8000af0 <__aeabi_dcmple>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d077      	beq.n	8012db6 <_strtod_l+0xa5e>
 8012cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d04a      	beq.n	8012d62 <_strtod_l+0xa0a>
 8012ccc:	4b68      	ldr	r3, [pc, #416]	; (8012e70 <_strtod_l+0xb18>)
 8012cce:	2200      	movs	r2, #0
 8012cd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012cd4:	4f66      	ldr	r7, [pc, #408]	; (8012e70 <_strtod_l+0xb18>)
 8012cd6:	2600      	movs	r6, #0
 8012cd8:	4b62      	ldr	r3, [pc, #392]	; (8012e64 <_strtod_l+0xb0c>)
 8012cda:	402b      	ands	r3, r5
 8012cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ce0:	4b64      	ldr	r3, [pc, #400]	; (8012e74 <_strtod_l+0xb1c>)
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	f040 80ce 	bne.w	8012e84 <_strtod_l+0xb2c>
 8012ce8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012cec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012cf0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8012cf4:	ec4b ab10 	vmov	d0, sl, fp
 8012cf8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012cfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012d00:	f002 f870 	bl	8014de4 <__ulp>
 8012d04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d08:	ec53 2b10 	vmov	r2, r3, d0
 8012d0c:	f7ed fc74 	bl	80005f8 <__aeabi_dmul>
 8012d10:	4652      	mov	r2, sl
 8012d12:	465b      	mov	r3, fp
 8012d14:	f7ed faba 	bl	800028c <__adddf3>
 8012d18:	460b      	mov	r3, r1
 8012d1a:	4952      	ldr	r1, [pc, #328]	; (8012e64 <_strtod_l+0xb0c>)
 8012d1c:	4a56      	ldr	r2, [pc, #344]	; (8012e78 <_strtod_l+0xb20>)
 8012d1e:	4019      	ands	r1, r3
 8012d20:	4291      	cmp	r1, r2
 8012d22:	4682      	mov	sl, r0
 8012d24:	d95b      	bls.n	8012dde <_strtod_l+0xa86>
 8012d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d103      	bne.n	8012d38 <_strtod_l+0x9e0>
 8012d30:	9b08      	ldr	r3, [sp, #32]
 8012d32:	3301      	adds	r3, #1
 8012d34:	f43f ad2e 	beq.w	8012794 <_strtod_l+0x43c>
 8012d38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012e68 <_strtod_l+0xb10>
 8012d3c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012d40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012d42:	4648      	mov	r0, r9
 8012d44:	f001 fdb6 	bl	80148b4 <_Bfree>
 8012d48:	9905      	ldr	r1, [sp, #20]
 8012d4a:	4648      	mov	r0, r9
 8012d4c:	f001 fdb2 	bl	80148b4 <_Bfree>
 8012d50:	4641      	mov	r1, r8
 8012d52:	4648      	mov	r0, r9
 8012d54:	f001 fdae 	bl	80148b4 <_Bfree>
 8012d58:	4621      	mov	r1, r4
 8012d5a:	4648      	mov	r0, r9
 8012d5c:	f001 fdaa 	bl	80148b4 <_Bfree>
 8012d60:	e619      	b.n	8012996 <_strtod_l+0x63e>
 8012d62:	f1ba 0f00 	cmp.w	sl, #0
 8012d66:	d11a      	bne.n	8012d9e <_strtod_l+0xa46>
 8012d68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d6c:	b9eb      	cbnz	r3, 8012daa <_strtod_l+0xa52>
 8012d6e:	2200      	movs	r2, #0
 8012d70:	4b3f      	ldr	r3, [pc, #252]	; (8012e70 <_strtod_l+0xb18>)
 8012d72:	4630      	mov	r0, r6
 8012d74:	4639      	mov	r1, r7
 8012d76:	f7ed feb1 	bl	8000adc <__aeabi_dcmplt>
 8012d7a:	b9c8      	cbnz	r0, 8012db0 <_strtod_l+0xa58>
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	4639      	mov	r1, r7
 8012d80:	2200      	movs	r2, #0
 8012d82:	4b3e      	ldr	r3, [pc, #248]	; (8012e7c <_strtod_l+0xb24>)
 8012d84:	f7ed fc38 	bl	80005f8 <__aeabi_dmul>
 8012d88:	4606      	mov	r6, r0
 8012d8a:	460f      	mov	r7, r1
 8012d8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012d90:	9618      	str	r6, [sp, #96]	; 0x60
 8012d92:	9319      	str	r3, [sp, #100]	; 0x64
 8012d94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012d98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012d9c:	e79c      	b.n	8012cd8 <_strtod_l+0x980>
 8012d9e:	f1ba 0f01 	cmp.w	sl, #1
 8012da2:	d102      	bne.n	8012daa <_strtod_l+0xa52>
 8012da4:	2d00      	cmp	r5, #0
 8012da6:	f43f ad8e 	beq.w	80128c6 <_strtod_l+0x56e>
 8012daa:	2200      	movs	r2, #0
 8012dac:	4b34      	ldr	r3, [pc, #208]	; (8012e80 <_strtod_l+0xb28>)
 8012dae:	e78f      	b.n	8012cd0 <_strtod_l+0x978>
 8012db0:	2600      	movs	r6, #0
 8012db2:	4f32      	ldr	r7, [pc, #200]	; (8012e7c <_strtod_l+0xb24>)
 8012db4:	e7ea      	b.n	8012d8c <_strtod_l+0xa34>
 8012db6:	4b31      	ldr	r3, [pc, #196]	; (8012e7c <_strtod_l+0xb24>)
 8012db8:	4630      	mov	r0, r6
 8012dba:	4639      	mov	r1, r7
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f7ed fc1b 	bl	80005f8 <__aeabi_dmul>
 8012dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dc4:	4606      	mov	r6, r0
 8012dc6:	460f      	mov	r7, r1
 8012dc8:	b933      	cbnz	r3, 8012dd8 <_strtod_l+0xa80>
 8012dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012dce:	9010      	str	r0, [sp, #64]	; 0x40
 8012dd0:	9311      	str	r3, [sp, #68]	; 0x44
 8012dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012dd6:	e7df      	b.n	8012d98 <_strtod_l+0xa40>
 8012dd8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012ddc:	e7f9      	b.n	8012dd2 <_strtod_l+0xa7a>
 8012dde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012de2:	9b04      	ldr	r3, [sp, #16]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1ab      	bne.n	8012d40 <_strtod_l+0x9e8>
 8012de8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012dec:	0d1b      	lsrs	r3, r3, #20
 8012dee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012df0:	051b      	lsls	r3, r3, #20
 8012df2:	429a      	cmp	r2, r3
 8012df4:	465d      	mov	r5, fp
 8012df6:	d1a3      	bne.n	8012d40 <_strtod_l+0x9e8>
 8012df8:	4639      	mov	r1, r7
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f7ed feac 	bl	8000b58 <__aeabi_d2iz>
 8012e00:	f7ed fb90 	bl	8000524 <__aeabi_i2d>
 8012e04:	460b      	mov	r3, r1
 8012e06:	4602      	mov	r2, r0
 8012e08:	4639      	mov	r1, r7
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	f7ed fa3c 	bl	8000288 <__aeabi_dsub>
 8012e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e12:	4606      	mov	r6, r0
 8012e14:	460f      	mov	r7, r1
 8012e16:	b933      	cbnz	r3, 8012e26 <_strtod_l+0xace>
 8012e18:	f1ba 0f00 	cmp.w	sl, #0
 8012e1c:	d103      	bne.n	8012e26 <_strtod_l+0xace>
 8012e1e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8012e22:	2d00      	cmp	r5, #0
 8012e24:	d06d      	beq.n	8012f02 <_strtod_l+0xbaa>
 8012e26:	a30a      	add	r3, pc, #40	; (adr r3, 8012e50 <_strtod_l+0xaf8>)
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	4630      	mov	r0, r6
 8012e2e:	4639      	mov	r1, r7
 8012e30:	f7ed fe54 	bl	8000adc <__aeabi_dcmplt>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	f47f acb8 	bne.w	80127aa <_strtod_l+0x452>
 8012e3a:	a307      	add	r3, pc, #28	; (adr r3, 8012e58 <_strtod_l+0xb00>)
 8012e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e40:	4630      	mov	r0, r6
 8012e42:	4639      	mov	r1, r7
 8012e44:	f7ed fe68 	bl	8000b18 <__aeabi_dcmpgt>
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	f43f af79 	beq.w	8012d40 <_strtod_l+0x9e8>
 8012e4e:	e4ac      	b.n	80127aa <_strtod_l+0x452>
 8012e50:	94a03595 	.word	0x94a03595
 8012e54:	3fdfffff 	.word	0x3fdfffff
 8012e58:	35afe535 	.word	0x35afe535
 8012e5c:	3fe00000 	.word	0x3fe00000
 8012e60:	000fffff 	.word	0x000fffff
 8012e64:	7ff00000 	.word	0x7ff00000
 8012e68:	7fefffff 	.word	0x7fefffff
 8012e6c:	39500000 	.word	0x39500000
 8012e70:	3ff00000 	.word	0x3ff00000
 8012e74:	7fe00000 	.word	0x7fe00000
 8012e78:	7c9fffff 	.word	0x7c9fffff
 8012e7c:	3fe00000 	.word	0x3fe00000
 8012e80:	bff00000 	.word	0xbff00000
 8012e84:	9b04      	ldr	r3, [sp, #16]
 8012e86:	b333      	cbz	r3, 8012ed6 <_strtod_l+0xb7e>
 8012e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012e8e:	d822      	bhi.n	8012ed6 <_strtod_l+0xb7e>
 8012e90:	a327      	add	r3, pc, #156	; (adr r3, 8012f30 <_strtod_l+0xbd8>)
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	4630      	mov	r0, r6
 8012e98:	4639      	mov	r1, r7
 8012e9a:	f7ed fe29 	bl	8000af0 <__aeabi_dcmple>
 8012e9e:	b1a0      	cbz	r0, 8012eca <_strtod_l+0xb72>
 8012ea0:	4639      	mov	r1, r7
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	f7ed fe80 	bl	8000ba8 <__aeabi_d2uiz>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	bf08      	it	eq
 8012eac:	2001      	moveq	r0, #1
 8012eae:	f7ed fb29 	bl	8000504 <__aeabi_ui2d>
 8012eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012eb4:	4606      	mov	r6, r0
 8012eb6:	460f      	mov	r7, r1
 8012eb8:	bb03      	cbnz	r3, 8012efc <_strtod_l+0xba4>
 8012eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ebe:	9012      	str	r0, [sp, #72]	; 0x48
 8012ec0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012ec2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012ec6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ece:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012ed2:	1a9b      	subs	r3, r3, r2
 8012ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ed6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012eda:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8012ede:	f001 ff81 	bl	8014de4 <__ulp>
 8012ee2:	4650      	mov	r0, sl
 8012ee4:	ec53 2b10 	vmov	r2, r3, d0
 8012ee8:	4659      	mov	r1, fp
 8012eea:	f7ed fb85 	bl	80005f8 <__aeabi_dmul>
 8012eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012ef2:	f7ed f9cb 	bl	800028c <__adddf3>
 8012ef6:	4682      	mov	sl, r0
 8012ef8:	468b      	mov	fp, r1
 8012efa:	e772      	b.n	8012de2 <_strtod_l+0xa8a>
 8012efc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012f00:	e7df      	b.n	8012ec2 <_strtod_l+0xb6a>
 8012f02:	a30d      	add	r3, pc, #52	; (adr r3, 8012f38 <_strtod_l+0xbe0>)
 8012f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f08:	f7ed fde8 	bl	8000adc <__aeabi_dcmplt>
 8012f0c:	e79c      	b.n	8012e48 <_strtod_l+0xaf0>
 8012f0e:	2300      	movs	r3, #0
 8012f10:	930d      	str	r3, [sp, #52]	; 0x34
 8012f12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012f14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f16:	6013      	str	r3, [r2, #0]
 8012f18:	f7ff ba61 	b.w	80123de <_strtod_l+0x86>
 8012f1c:	2b65      	cmp	r3, #101	; 0x65
 8012f1e:	f04f 0200 	mov.w	r2, #0
 8012f22:	f43f ab4e 	beq.w	80125c2 <_strtod_l+0x26a>
 8012f26:	2101      	movs	r1, #1
 8012f28:	4614      	mov	r4, r2
 8012f2a:	9104      	str	r1, [sp, #16]
 8012f2c:	f7ff bacb 	b.w	80124c6 <_strtod_l+0x16e>
 8012f30:	ffc00000 	.word	0xffc00000
 8012f34:	41dfffff 	.word	0x41dfffff
 8012f38:	94a03595 	.word	0x94a03595
 8012f3c:	3fcfffff 	.word	0x3fcfffff

08012f40 <strtof>:
 8012f40:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012f44:	4e24      	ldr	r6, [pc, #144]	; (8012fd8 <strtof+0x98>)
 8012f46:	4a25      	ldr	r2, [pc, #148]	; (8012fdc <strtof+0x9c>)
 8012f48:	6834      	ldr	r4, [r6, #0]
 8012f4a:	6a23      	ldr	r3, [r4, #32]
 8012f4c:	ed2d 8b02 	vpush	{d8}
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	bf08      	it	eq
 8012f54:	4613      	moveq	r3, r2
 8012f56:	460a      	mov	r2, r1
 8012f58:	4601      	mov	r1, r0
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f7ff f9fc 	bl	8012358 <_strtod_l>
 8012f60:	ec55 4b10 	vmov	r4, r5, d0
 8012f64:	ee10 2a10 	vmov	r2, s0
 8012f68:	462b      	mov	r3, r5
 8012f6a:	ee10 0a10 	vmov	r0, s0
 8012f6e:	4629      	mov	r1, r5
 8012f70:	f7ed fddc 	bl	8000b2c <__aeabi_dcmpun>
 8012f74:	b130      	cbz	r0, 8012f84 <strtof+0x44>
 8012f76:	ecbd 8b02 	vpop	{d8}
 8012f7a:	2000      	movs	r0, #0
 8012f7c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8012f80:	f002 bbf2 	b.w	8015768 <nanf>
 8012f84:	4620      	mov	r0, r4
 8012f86:	4629      	mov	r1, r5
 8012f88:	f7ed fe2e 	bl	8000be8 <__aeabi_d2f>
 8012f8c:	ee08 0a10 	vmov	s16, r0
 8012f90:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012fe0 <strtof+0xa0>
 8012f94:	eeb0 7ac8 	vabs.f32	s14, s16
 8012f98:	eeb4 7a67 	vcmp.f32	s14, s15
 8012f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa0:	dd14      	ble.n	8012fcc <strtof+0x8c>
 8012fa2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8012fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012faa:	4b0e      	ldr	r3, [pc, #56]	; (8012fe4 <strtof+0xa4>)
 8012fac:	4620      	mov	r0, r4
 8012fae:	4649      	mov	r1, r9
 8012fb0:	f7ed fdbc 	bl	8000b2c <__aeabi_dcmpun>
 8012fb4:	b938      	cbnz	r0, 8012fc6 <strtof+0x86>
 8012fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fba:	4b0a      	ldr	r3, [pc, #40]	; (8012fe4 <strtof+0xa4>)
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	4649      	mov	r1, r9
 8012fc0:	f7ed fd96 	bl	8000af0 <__aeabi_dcmple>
 8012fc4:	b110      	cbz	r0, 8012fcc <strtof+0x8c>
 8012fc6:	6833      	ldr	r3, [r6, #0]
 8012fc8:	2222      	movs	r2, #34	; 0x22
 8012fca:	601a      	str	r2, [r3, #0]
 8012fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8012fd0:	ecbd 8b02 	vpop	{d8}
 8012fd4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8012fd8:	200001a4 	.word	0x200001a4
 8012fdc:	20000208 	.word	0x20000208
 8012fe0:	7f7fffff 	.word	0x7f7fffff
 8012fe4:	7fefffff 	.word	0x7fefffff

08012fe8 <__swbuf_r>:
 8012fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fea:	460e      	mov	r6, r1
 8012fec:	4614      	mov	r4, r2
 8012fee:	4605      	mov	r5, r0
 8012ff0:	b118      	cbz	r0, 8012ffa <__swbuf_r+0x12>
 8012ff2:	6983      	ldr	r3, [r0, #24]
 8012ff4:	b90b      	cbnz	r3, 8012ffa <__swbuf_r+0x12>
 8012ff6:	f000 ffeb 	bl	8013fd0 <__sinit>
 8012ffa:	4b21      	ldr	r3, [pc, #132]	; (8013080 <__swbuf_r+0x98>)
 8012ffc:	429c      	cmp	r4, r3
 8012ffe:	d12a      	bne.n	8013056 <__swbuf_r+0x6e>
 8013000:	686c      	ldr	r4, [r5, #4]
 8013002:	69a3      	ldr	r3, [r4, #24]
 8013004:	60a3      	str	r3, [r4, #8]
 8013006:	89a3      	ldrh	r3, [r4, #12]
 8013008:	071a      	lsls	r2, r3, #28
 801300a:	d52e      	bpl.n	801306a <__swbuf_r+0x82>
 801300c:	6923      	ldr	r3, [r4, #16]
 801300e:	b363      	cbz	r3, 801306a <__swbuf_r+0x82>
 8013010:	6923      	ldr	r3, [r4, #16]
 8013012:	6820      	ldr	r0, [r4, #0]
 8013014:	1ac0      	subs	r0, r0, r3
 8013016:	6963      	ldr	r3, [r4, #20]
 8013018:	b2f6      	uxtb	r6, r6
 801301a:	4283      	cmp	r3, r0
 801301c:	4637      	mov	r7, r6
 801301e:	dc04      	bgt.n	801302a <__swbuf_r+0x42>
 8013020:	4621      	mov	r1, r4
 8013022:	4628      	mov	r0, r5
 8013024:	f000 ff6a 	bl	8013efc <_fflush_r>
 8013028:	bb28      	cbnz	r0, 8013076 <__swbuf_r+0x8e>
 801302a:	68a3      	ldr	r3, [r4, #8]
 801302c:	3b01      	subs	r3, #1
 801302e:	60a3      	str	r3, [r4, #8]
 8013030:	6823      	ldr	r3, [r4, #0]
 8013032:	1c5a      	adds	r2, r3, #1
 8013034:	6022      	str	r2, [r4, #0]
 8013036:	701e      	strb	r6, [r3, #0]
 8013038:	6963      	ldr	r3, [r4, #20]
 801303a:	3001      	adds	r0, #1
 801303c:	4283      	cmp	r3, r0
 801303e:	d004      	beq.n	801304a <__swbuf_r+0x62>
 8013040:	89a3      	ldrh	r3, [r4, #12]
 8013042:	07db      	lsls	r3, r3, #31
 8013044:	d519      	bpl.n	801307a <__swbuf_r+0x92>
 8013046:	2e0a      	cmp	r6, #10
 8013048:	d117      	bne.n	801307a <__swbuf_r+0x92>
 801304a:	4621      	mov	r1, r4
 801304c:	4628      	mov	r0, r5
 801304e:	f000 ff55 	bl	8013efc <_fflush_r>
 8013052:	b190      	cbz	r0, 801307a <__swbuf_r+0x92>
 8013054:	e00f      	b.n	8013076 <__swbuf_r+0x8e>
 8013056:	4b0b      	ldr	r3, [pc, #44]	; (8013084 <__swbuf_r+0x9c>)
 8013058:	429c      	cmp	r4, r3
 801305a:	d101      	bne.n	8013060 <__swbuf_r+0x78>
 801305c:	68ac      	ldr	r4, [r5, #8]
 801305e:	e7d0      	b.n	8013002 <__swbuf_r+0x1a>
 8013060:	4b09      	ldr	r3, [pc, #36]	; (8013088 <__swbuf_r+0xa0>)
 8013062:	429c      	cmp	r4, r3
 8013064:	bf08      	it	eq
 8013066:	68ec      	ldreq	r4, [r5, #12]
 8013068:	e7cb      	b.n	8013002 <__swbuf_r+0x1a>
 801306a:	4621      	mov	r1, r4
 801306c:	4628      	mov	r0, r5
 801306e:	f000 f80d 	bl	801308c <__swsetup_r>
 8013072:	2800      	cmp	r0, #0
 8013074:	d0cc      	beq.n	8013010 <__swbuf_r+0x28>
 8013076:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801307a:	4638      	mov	r0, r7
 801307c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801307e:	bf00      	nop
 8013080:	080181b8 	.word	0x080181b8
 8013084:	080181d8 	.word	0x080181d8
 8013088:	08018198 	.word	0x08018198

0801308c <__swsetup_r>:
 801308c:	4b32      	ldr	r3, [pc, #200]	; (8013158 <__swsetup_r+0xcc>)
 801308e:	b570      	push	{r4, r5, r6, lr}
 8013090:	681d      	ldr	r5, [r3, #0]
 8013092:	4606      	mov	r6, r0
 8013094:	460c      	mov	r4, r1
 8013096:	b125      	cbz	r5, 80130a2 <__swsetup_r+0x16>
 8013098:	69ab      	ldr	r3, [r5, #24]
 801309a:	b913      	cbnz	r3, 80130a2 <__swsetup_r+0x16>
 801309c:	4628      	mov	r0, r5
 801309e:	f000 ff97 	bl	8013fd0 <__sinit>
 80130a2:	4b2e      	ldr	r3, [pc, #184]	; (801315c <__swsetup_r+0xd0>)
 80130a4:	429c      	cmp	r4, r3
 80130a6:	d10f      	bne.n	80130c8 <__swsetup_r+0x3c>
 80130a8:	686c      	ldr	r4, [r5, #4]
 80130aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	0715      	lsls	r5, r2, #28
 80130b2:	d42c      	bmi.n	801310e <__swsetup_r+0x82>
 80130b4:	06d0      	lsls	r0, r2, #27
 80130b6:	d411      	bmi.n	80130dc <__swsetup_r+0x50>
 80130b8:	2209      	movs	r2, #9
 80130ba:	6032      	str	r2, [r6, #0]
 80130bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130c0:	81a3      	strh	r3, [r4, #12]
 80130c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130c6:	e03e      	b.n	8013146 <__swsetup_r+0xba>
 80130c8:	4b25      	ldr	r3, [pc, #148]	; (8013160 <__swsetup_r+0xd4>)
 80130ca:	429c      	cmp	r4, r3
 80130cc:	d101      	bne.n	80130d2 <__swsetup_r+0x46>
 80130ce:	68ac      	ldr	r4, [r5, #8]
 80130d0:	e7eb      	b.n	80130aa <__swsetup_r+0x1e>
 80130d2:	4b24      	ldr	r3, [pc, #144]	; (8013164 <__swsetup_r+0xd8>)
 80130d4:	429c      	cmp	r4, r3
 80130d6:	bf08      	it	eq
 80130d8:	68ec      	ldreq	r4, [r5, #12]
 80130da:	e7e6      	b.n	80130aa <__swsetup_r+0x1e>
 80130dc:	0751      	lsls	r1, r2, #29
 80130de:	d512      	bpl.n	8013106 <__swsetup_r+0x7a>
 80130e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130e2:	b141      	cbz	r1, 80130f6 <__swsetup_r+0x6a>
 80130e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130e8:	4299      	cmp	r1, r3
 80130ea:	d002      	beq.n	80130f2 <__swsetup_r+0x66>
 80130ec:	4630      	mov	r0, r6
 80130ee:	f001 ffbb 	bl	8015068 <_free_r>
 80130f2:	2300      	movs	r3, #0
 80130f4:	6363      	str	r3, [r4, #52]	; 0x34
 80130f6:	89a3      	ldrh	r3, [r4, #12]
 80130f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80130fc:	81a3      	strh	r3, [r4, #12]
 80130fe:	2300      	movs	r3, #0
 8013100:	6063      	str	r3, [r4, #4]
 8013102:	6923      	ldr	r3, [r4, #16]
 8013104:	6023      	str	r3, [r4, #0]
 8013106:	89a3      	ldrh	r3, [r4, #12]
 8013108:	f043 0308 	orr.w	r3, r3, #8
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	b94b      	cbnz	r3, 8013126 <__swsetup_r+0x9a>
 8013112:	89a3      	ldrh	r3, [r4, #12]
 8013114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801311c:	d003      	beq.n	8013126 <__swsetup_r+0x9a>
 801311e:	4621      	mov	r1, r4
 8013120:	4630      	mov	r0, r6
 8013122:	f001 fb39 	bl	8014798 <__smakebuf_r>
 8013126:	89a2      	ldrh	r2, [r4, #12]
 8013128:	f012 0301 	ands.w	r3, r2, #1
 801312c:	d00c      	beq.n	8013148 <__swsetup_r+0xbc>
 801312e:	2300      	movs	r3, #0
 8013130:	60a3      	str	r3, [r4, #8]
 8013132:	6963      	ldr	r3, [r4, #20]
 8013134:	425b      	negs	r3, r3
 8013136:	61a3      	str	r3, [r4, #24]
 8013138:	6923      	ldr	r3, [r4, #16]
 801313a:	b953      	cbnz	r3, 8013152 <__swsetup_r+0xc6>
 801313c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013140:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013144:	d1ba      	bne.n	80130bc <__swsetup_r+0x30>
 8013146:	bd70      	pop	{r4, r5, r6, pc}
 8013148:	0792      	lsls	r2, r2, #30
 801314a:	bf58      	it	pl
 801314c:	6963      	ldrpl	r3, [r4, #20]
 801314e:	60a3      	str	r3, [r4, #8]
 8013150:	e7f2      	b.n	8013138 <__swsetup_r+0xac>
 8013152:	2000      	movs	r0, #0
 8013154:	e7f7      	b.n	8013146 <__swsetup_r+0xba>
 8013156:	bf00      	nop
 8013158:	200001a4 	.word	0x200001a4
 801315c:	080181b8 	.word	0x080181b8
 8013160:	080181d8 	.word	0x080181d8
 8013164:	08018198 	.word	0x08018198

08013168 <quorem>:
 8013168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316c:	6903      	ldr	r3, [r0, #16]
 801316e:	690c      	ldr	r4, [r1, #16]
 8013170:	42a3      	cmp	r3, r4
 8013172:	4680      	mov	r8, r0
 8013174:	f2c0 8082 	blt.w	801327c <quorem+0x114>
 8013178:	3c01      	subs	r4, #1
 801317a:	f101 0714 	add.w	r7, r1, #20
 801317e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013182:	f100 0614 	add.w	r6, r0, #20
 8013186:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801318a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801318e:	eb06 030c 	add.w	r3, r6, ip
 8013192:	3501      	adds	r5, #1
 8013194:	eb07 090c 	add.w	r9, r7, ip
 8013198:	9301      	str	r3, [sp, #4]
 801319a:	fbb0 f5f5 	udiv	r5, r0, r5
 801319e:	b395      	cbz	r5, 8013206 <quorem+0x9e>
 80131a0:	f04f 0a00 	mov.w	sl, #0
 80131a4:	4638      	mov	r0, r7
 80131a6:	46b6      	mov	lr, r6
 80131a8:	46d3      	mov	fp, sl
 80131aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80131ae:	b293      	uxth	r3, r2
 80131b0:	fb05 a303 	mla	r3, r5, r3, sl
 80131b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	ebab 0303 	sub.w	r3, fp, r3
 80131be:	0c12      	lsrs	r2, r2, #16
 80131c0:	f8de b000 	ldr.w	fp, [lr]
 80131c4:	fb05 a202 	mla	r2, r5, r2, sl
 80131c8:	fa13 f38b 	uxtah	r3, r3, fp
 80131cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80131d0:	fa1f fb82 	uxth.w	fp, r2
 80131d4:	f8de 2000 	ldr.w	r2, [lr]
 80131d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80131dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131e6:	4581      	cmp	r9, r0
 80131e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80131ec:	f84e 3b04 	str.w	r3, [lr], #4
 80131f0:	d2db      	bcs.n	80131aa <quorem+0x42>
 80131f2:	f856 300c 	ldr.w	r3, [r6, ip]
 80131f6:	b933      	cbnz	r3, 8013206 <quorem+0x9e>
 80131f8:	9b01      	ldr	r3, [sp, #4]
 80131fa:	3b04      	subs	r3, #4
 80131fc:	429e      	cmp	r6, r3
 80131fe:	461a      	mov	r2, r3
 8013200:	d330      	bcc.n	8013264 <quorem+0xfc>
 8013202:	f8c8 4010 	str.w	r4, [r8, #16]
 8013206:	4640      	mov	r0, r8
 8013208:	f001 fd74 	bl	8014cf4 <__mcmp>
 801320c:	2800      	cmp	r0, #0
 801320e:	db25      	blt.n	801325c <quorem+0xf4>
 8013210:	3501      	adds	r5, #1
 8013212:	4630      	mov	r0, r6
 8013214:	f04f 0c00 	mov.w	ip, #0
 8013218:	f857 2b04 	ldr.w	r2, [r7], #4
 801321c:	f8d0 e000 	ldr.w	lr, [r0]
 8013220:	b293      	uxth	r3, r2
 8013222:	ebac 0303 	sub.w	r3, ip, r3
 8013226:	0c12      	lsrs	r2, r2, #16
 8013228:	fa13 f38e 	uxtah	r3, r3, lr
 801322c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013234:	b29b      	uxth	r3, r3
 8013236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801323a:	45b9      	cmp	r9, r7
 801323c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013240:	f840 3b04 	str.w	r3, [r0], #4
 8013244:	d2e8      	bcs.n	8013218 <quorem+0xb0>
 8013246:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801324a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801324e:	b92a      	cbnz	r2, 801325c <quorem+0xf4>
 8013250:	3b04      	subs	r3, #4
 8013252:	429e      	cmp	r6, r3
 8013254:	461a      	mov	r2, r3
 8013256:	d30b      	bcc.n	8013270 <quorem+0x108>
 8013258:	f8c8 4010 	str.w	r4, [r8, #16]
 801325c:	4628      	mov	r0, r5
 801325e:	b003      	add	sp, #12
 8013260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013264:	6812      	ldr	r2, [r2, #0]
 8013266:	3b04      	subs	r3, #4
 8013268:	2a00      	cmp	r2, #0
 801326a:	d1ca      	bne.n	8013202 <quorem+0x9a>
 801326c:	3c01      	subs	r4, #1
 801326e:	e7c5      	b.n	80131fc <quorem+0x94>
 8013270:	6812      	ldr	r2, [r2, #0]
 8013272:	3b04      	subs	r3, #4
 8013274:	2a00      	cmp	r2, #0
 8013276:	d1ef      	bne.n	8013258 <quorem+0xf0>
 8013278:	3c01      	subs	r4, #1
 801327a:	e7ea      	b.n	8013252 <quorem+0xea>
 801327c:	2000      	movs	r0, #0
 801327e:	e7ee      	b.n	801325e <quorem+0xf6>

08013280 <_dtoa_r>:
 8013280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013284:	ec57 6b10 	vmov	r6, r7, d0
 8013288:	b097      	sub	sp, #92	; 0x5c
 801328a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801328c:	9106      	str	r1, [sp, #24]
 801328e:	4604      	mov	r4, r0
 8013290:	920b      	str	r2, [sp, #44]	; 0x2c
 8013292:	9312      	str	r3, [sp, #72]	; 0x48
 8013294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013298:	e9cd 6700 	strd	r6, r7, [sp]
 801329c:	b93d      	cbnz	r5, 80132ae <_dtoa_r+0x2e>
 801329e:	2010      	movs	r0, #16
 80132a0:	f001 faba 	bl	8014818 <malloc>
 80132a4:	6260      	str	r0, [r4, #36]	; 0x24
 80132a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80132aa:	6005      	str	r5, [r0, #0]
 80132ac:	60c5      	str	r5, [r0, #12]
 80132ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132b0:	6819      	ldr	r1, [r3, #0]
 80132b2:	b151      	cbz	r1, 80132ca <_dtoa_r+0x4a>
 80132b4:	685a      	ldr	r2, [r3, #4]
 80132b6:	604a      	str	r2, [r1, #4]
 80132b8:	2301      	movs	r3, #1
 80132ba:	4093      	lsls	r3, r2
 80132bc:	608b      	str	r3, [r1, #8]
 80132be:	4620      	mov	r0, r4
 80132c0:	f001 faf8 	bl	80148b4 <_Bfree>
 80132c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132c6:	2200      	movs	r2, #0
 80132c8:	601a      	str	r2, [r3, #0]
 80132ca:	1e3b      	subs	r3, r7, #0
 80132cc:	bfbb      	ittet	lt
 80132ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80132d2:	9301      	strlt	r3, [sp, #4]
 80132d4:	2300      	movge	r3, #0
 80132d6:	2201      	movlt	r2, #1
 80132d8:	bfac      	ite	ge
 80132da:	f8c8 3000 	strge.w	r3, [r8]
 80132de:	f8c8 2000 	strlt.w	r2, [r8]
 80132e2:	4baf      	ldr	r3, [pc, #700]	; (80135a0 <_dtoa_r+0x320>)
 80132e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80132e8:	ea33 0308 	bics.w	r3, r3, r8
 80132ec:	d114      	bne.n	8013318 <_dtoa_r+0x98>
 80132ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80132f4:	6013      	str	r3, [r2, #0]
 80132f6:	9b00      	ldr	r3, [sp, #0]
 80132f8:	b923      	cbnz	r3, 8013304 <_dtoa_r+0x84>
 80132fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80132fe:	2800      	cmp	r0, #0
 8013300:	f000 8542 	beq.w	8013d88 <_dtoa_r+0xb08>
 8013304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013306:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80135b4 <_dtoa_r+0x334>
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 8544 	beq.w	8013d98 <_dtoa_r+0xb18>
 8013310:	f10b 0303 	add.w	r3, fp, #3
 8013314:	f000 bd3e 	b.w	8013d94 <_dtoa_r+0xb14>
 8013318:	e9dd 6700 	ldrd	r6, r7, [sp]
 801331c:	2200      	movs	r2, #0
 801331e:	2300      	movs	r3, #0
 8013320:	4630      	mov	r0, r6
 8013322:	4639      	mov	r1, r7
 8013324:	f7ed fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8013328:	4681      	mov	r9, r0
 801332a:	b168      	cbz	r0, 8013348 <_dtoa_r+0xc8>
 801332c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801332e:	2301      	movs	r3, #1
 8013330:	6013      	str	r3, [r2, #0]
 8013332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013334:	2b00      	cmp	r3, #0
 8013336:	f000 8524 	beq.w	8013d82 <_dtoa_r+0xb02>
 801333a:	4b9a      	ldr	r3, [pc, #616]	; (80135a4 <_dtoa_r+0x324>)
 801333c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801333e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8013342:	6013      	str	r3, [r2, #0]
 8013344:	f000 bd28 	b.w	8013d98 <_dtoa_r+0xb18>
 8013348:	aa14      	add	r2, sp, #80	; 0x50
 801334a:	a915      	add	r1, sp, #84	; 0x54
 801334c:	ec47 6b10 	vmov	d0, r6, r7
 8013350:	4620      	mov	r0, r4
 8013352:	f001 fdbd 	bl	8014ed0 <__d2b>
 8013356:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801335a:	9004      	str	r0, [sp, #16]
 801335c:	2d00      	cmp	r5, #0
 801335e:	d07c      	beq.n	801345a <_dtoa_r+0x1da>
 8013360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013364:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013368:	46b2      	mov	sl, r6
 801336a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801336e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013372:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013376:	2200      	movs	r2, #0
 8013378:	4b8b      	ldr	r3, [pc, #556]	; (80135a8 <_dtoa_r+0x328>)
 801337a:	4650      	mov	r0, sl
 801337c:	4659      	mov	r1, fp
 801337e:	f7ec ff83 	bl	8000288 <__aeabi_dsub>
 8013382:	a381      	add	r3, pc, #516	; (adr r3, 8013588 <_dtoa_r+0x308>)
 8013384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013388:	f7ed f936 	bl	80005f8 <__aeabi_dmul>
 801338c:	a380      	add	r3, pc, #512	; (adr r3, 8013590 <_dtoa_r+0x310>)
 801338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013392:	f7ec ff7b 	bl	800028c <__adddf3>
 8013396:	4606      	mov	r6, r0
 8013398:	4628      	mov	r0, r5
 801339a:	460f      	mov	r7, r1
 801339c:	f7ed f8c2 	bl	8000524 <__aeabi_i2d>
 80133a0:	a37d      	add	r3, pc, #500	; (adr r3, 8013598 <_dtoa_r+0x318>)
 80133a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a6:	f7ed f927 	bl	80005f8 <__aeabi_dmul>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	4630      	mov	r0, r6
 80133b0:	4639      	mov	r1, r7
 80133b2:	f7ec ff6b 	bl	800028c <__adddf3>
 80133b6:	4606      	mov	r6, r0
 80133b8:	460f      	mov	r7, r1
 80133ba:	f7ed fbcd 	bl	8000b58 <__aeabi_d2iz>
 80133be:	2200      	movs	r2, #0
 80133c0:	4682      	mov	sl, r0
 80133c2:	2300      	movs	r3, #0
 80133c4:	4630      	mov	r0, r6
 80133c6:	4639      	mov	r1, r7
 80133c8:	f7ed fb88 	bl	8000adc <__aeabi_dcmplt>
 80133cc:	b148      	cbz	r0, 80133e2 <_dtoa_r+0x162>
 80133ce:	4650      	mov	r0, sl
 80133d0:	f7ed f8a8 	bl	8000524 <__aeabi_i2d>
 80133d4:	4632      	mov	r2, r6
 80133d6:	463b      	mov	r3, r7
 80133d8:	f7ed fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80133dc:	b908      	cbnz	r0, 80133e2 <_dtoa_r+0x162>
 80133de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80133e2:	f1ba 0f16 	cmp.w	sl, #22
 80133e6:	d859      	bhi.n	801349c <_dtoa_r+0x21c>
 80133e8:	4970      	ldr	r1, [pc, #448]	; (80135ac <_dtoa_r+0x32c>)
 80133ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80133ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133f6:	f7ed fb8f 	bl	8000b18 <__aeabi_dcmpgt>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d050      	beq.n	80134a0 <_dtoa_r+0x220>
 80133fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013402:	2300      	movs	r3, #0
 8013404:	930f      	str	r3, [sp, #60]	; 0x3c
 8013406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013408:	1b5d      	subs	r5, r3, r5
 801340a:	f1b5 0801 	subs.w	r8, r5, #1
 801340e:	bf49      	itett	mi
 8013410:	f1c5 0301 	rsbmi	r3, r5, #1
 8013414:	2300      	movpl	r3, #0
 8013416:	9305      	strmi	r3, [sp, #20]
 8013418:	f04f 0800 	movmi.w	r8, #0
 801341c:	bf58      	it	pl
 801341e:	9305      	strpl	r3, [sp, #20]
 8013420:	f1ba 0f00 	cmp.w	sl, #0
 8013424:	db3e      	blt.n	80134a4 <_dtoa_r+0x224>
 8013426:	2300      	movs	r3, #0
 8013428:	44d0      	add	r8, sl
 801342a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801342e:	9307      	str	r3, [sp, #28]
 8013430:	9b06      	ldr	r3, [sp, #24]
 8013432:	2b09      	cmp	r3, #9
 8013434:	f200 8090 	bhi.w	8013558 <_dtoa_r+0x2d8>
 8013438:	2b05      	cmp	r3, #5
 801343a:	bfc4      	itt	gt
 801343c:	3b04      	subgt	r3, #4
 801343e:	9306      	strgt	r3, [sp, #24]
 8013440:	9b06      	ldr	r3, [sp, #24]
 8013442:	f1a3 0302 	sub.w	r3, r3, #2
 8013446:	bfcc      	ite	gt
 8013448:	2500      	movgt	r5, #0
 801344a:	2501      	movle	r5, #1
 801344c:	2b03      	cmp	r3, #3
 801344e:	f200 808f 	bhi.w	8013570 <_dtoa_r+0x2f0>
 8013452:	e8df f003 	tbb	[pc, r3]
 8013456:	7f7d      	.short	0x7f7d
 8013458:	7131      	.short	0x7131
 801345a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801345e:	441d      	add	r5, r3
 8013460:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013464:	2820      	cmp	r0, #32
 8013466:	dd13      	ble.n	8013490 <_dtoa_r+0x210>
 8013468:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801346c:	9b00      	ldr	r3, [sp, #0]
 801346e:	fa08 f800 	lsl.w	r8, r8, r0
 8013472:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013476:	fa23 f000 	lsr.w	r0, r3, r0
 801347a:	ea48 0000 	orr.w	r0, r8, r0
 801347e:	f7ed f841 	bl	8000504 <__aeabi_ui2d>
 8013482:	2301      	movs	r3, #1
 8013484:	4682      	mov	sl, r0
 8013486:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801348a:	3d01      	subs	r5, #1
 801348c:	9313      	str	r3, [sp, #76]	; 0x4c
 801348e:	e772      	b.n	8013376 <_dtoa_r+0xf6>
 8013490:	9b00      	ldr	r3, [sp, #0]
 8013492:	f1c0 0020 	rsb	r0, r0, #32
 8013496:	fa03 f000 	lsl.w	r0, r3, r0
 801349a:	e7f0      	b.n	801347e <_dtoa_r+0x1fe>
 801349c:	2301      	movs	r3, #1
 801349e:	e7b1      	b.n	8013404 <_dtoa_r+0x184>
 80134a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80134a2:	e7b0      	b.n	8013406 <_dtoa_r+0x186>
 80134a4:	9b05      	ldr	r3, [sp, #20]
 80134a6:	eba3 030a 	sub.w	r3, r3, sl
 80134aa:	9305      	str	r3, [sp, #20]
 80134ac:	f1ca 0300 	rsb	r3, sl, #0
 80134b0:	9307      	str	r3, [sp, #28]
 80134b2:	2300      	movs	r3, #0
 80134b4:	930e      	str	r3, [sp, #56]	; 0x38
 80134b6:	e7bb      	b.n	8013430 <_dtoa_r+0x1b0>
 80134b8:	2301      	movs	r3, #1
 80134ba:	930a      	str	r3, [sp, #40]	; 0x28
 80134bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134be:	2b00      	cmp	r3, #0
 80134c0:	dd59      	ble.n	8013576 <_dtoa_r+0x2f6>
 80134c2:	9302      	str	r3, [sp, #8]
 80134c4:	4699      	mov	r9, r3
 80134c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80134c8:	2200      	movs	r2, #0
 80134ca:	6072      	str	r2, [r6, #4]
 80134cc:	2204      	movs	r2, #4
 80134ce:	f102 0014 	add.w	r0, r2, #20
 80134d2:	4298      	cmp	r0, r3
 80134d4:	6871      	ldr	r1, [r6, #4]
 80134d6:	d953      	bls.n	8013580 <_dtoa_r+0x300>
 80134d8:	4620      	mov	r0, r4
 80134da:	f001 f9b7 	bl	801484c <_Balloc>
 80134de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134e0:	6030      	str	r0, [r6, #0]
 80134e2:	f1b9 0f0e 	cmp.w	r9, #14
 80134e6:	f8d3 b000 	ldr.w	fp, [r3]
 80134ea:	f200 80e6 	bhi.w	80136ba <_dtoa_r+0x43a>
 80134ee:	2d00      	cmp	r5, #0
 80134f0:	f000 80e3 	beq.w	80136ba <_dtoa_r+0x43a>
 80134f4:	ed9d 7b00 	vldr	d7, [sp]
 80134f8:	f1ba 0f00 	cmp.w	sl, #0
 80134fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013500:	dd74      	ble.n	80135ec <_dtoa_r+0x36c>
 8013502:	4a2a      	ldr	r2, [pc, #168]	; (80135ac <_dtoa_r+0x32c>)
 8013504:	f00a 030f 	and.w	r3, sl, #15
 8013508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801350c:	ed93 7b00 	vldr	d7, [r3]
 8013510:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013514:	06f0      	lsls	r0, r6, #27
 8013516:	ed8d 7b08 	vstr	d7, [sp, #32]
 801351a:	d565      	bpl.n	80135e8 <_dtoa_r+0x368>
 801351c:	4b24      	ldr	r3, [pc, #144]	; (80135b0 <_dtoa_r+0x330>)
 801351e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013522:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013526:	f7ed f991 	bl	800084c <__aeabi_ddiv>
 801352a:	e9cd 0100 	strd	r0, r1, [sp]
 801352e:	f006 060f 	and.w	r6, r6, #15
 8013532:	2503      	movs	r5, #3
 8013534:	4f1e      	ldr	r7, [pc, #120]	; (80135b0 <_dtoa_r+0x330>)
 8013536:	e04c      	b.n	80135d2 <_dtoa_r+0x352>
 8013538:	2301      	movs	r3, #1
 801353a:	930a      	str	r3, [sp, #40]	; 0x28
 801353c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801353e:	4453      	add	r3, sl
 8013540:	f103 0901 	add.w	r9, r3, #1
 8013544:	9302      	str	r3, [sp, #8]
 8013546:	464b      	mov	r3, r9
 8013548:	2b01      	cmp	r3, #1
 801354a:	bfb8      	it	lt
 801354c:	2301      	movlt	r3, #1
 801354e:	e7ba      	b.n	80134c6 <_dtoa_r+0x246>
 8013550:	2300      	movs	r3, #0
 8013552:	e7b2      	b.n	80134ba <_dtoa_r+0x23a>
 8013554:	2300      	movs	r3, #0
 8013556:	e7f0      	b.n	801353a <_dtoa_r+0x2ba>
 8013558:	2501      	movs	r5, #1
 801355a:	2300      	movs	r3, #0
 801355c:	9306      	str	r3, [sp, #24]
 801355e:	950a      	str	r5, [sp, #40]	; 0x28
 8013560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013564:	9302      	str	r3, [sp, #8]
 8013566:	4699      	mov	r9, r3
 8013568:	2200      	movs	r2, #0
 801356a:	2312      	movs	r3, #18
 801356c:	920b      	str	r2, [sp, #44]	; 0x2c
 801356e:	e7aa      	b.n	80134c6 <_dtoa_r+0x246>
 8013570:	2301      	movs	r3, #1
 8013572:	930a      	str	r3, [sp, #40]	; 0x28
 8013574:	e7f4      	b.n	8013560 <_dtoa_r+0x2e0>
 8013576:	2301      	movs	r3, #1
 8013578:	9302      	str	r3, [sp, #8]
 801357a:	4699      	mov	r9, r3
 801357c:	461a      	mov	r2, r3
 801357e:	e7f5      	b.n	801356c <_dtoa_r+0x2ec>
 8013580:	3101      	adds	r1, #1
 8013582:	6071      	str	r1, [r6, #4]
 8013584:	0052      	lsls	r2, r2, #1
 8013586:	e7a2      	b.n	80134ce <_dtoa_r+0x24e>
 8013588:	636f4361 	.word	0x636f4361
 801358c:	3fd287a7 	.word	0x3fd287a7
 8013590:	8b60c8b3 	.word	0x8b60c8b3
 8013594:	3fc68a28 	.word	0x3fc68a28
 8013598:	509f79fb 	.word	0x509f79fb
 801359c:	3fd34413 	.word	0x3fd34413
 80135a0:	7ff00000 	.word	0x7ff00000
 80135a4:	08018111 	.word	0x08018111
 80135a8:	3ff80000 	.word	0x3ff80000
 80135ac:	08018230 	.word	0x08018230
 80135b0:	08018208 	.word	0x08018208
 80135b4:	08018191 	.word	0x08018191
 80135b8:	07f1      	lsls	r1, r6, #31
 80135ba:	d508      	bpl.n	80135ce <_dtoa_r+0x34e>
 80135bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80135c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135c4:	f7ed f818 	bl	80005f8 <__aeabi_dmul>
 80135c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80135cc:	3501      	adds	r5, #1
 80135ce:	1076      	asrs	r6, r6, #1
 80135d0:	3708      	adds	r7, #8
 80135d2:	2e00      	cmp	r6, #0
 80135d4:	d1f0      	bne.n	80135b8 <_dtoa_r+0x338>
 80135d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80135da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135de:	f7ed f935 	bl	800084c <__aeabi_ddiv>
 80135e2:	e9cd 0100 	strd	r0, r1, [sp]
 80135e6:	e01a      	b.n	801361e <_dtoa_r+0x39e>
 80135e8:	2502      	movs	r5, #2
 80135ea:	e7a3      	b.n	8013534 <_dtoa_r+0x2b4>
 80135ec:	f000 80a0 	beq.w	8013730 <_dtoa_r+0x4b0>
 80135f0:	f1ca 0600 	rsb	r6, sl, #0
 80135f4:	4b9f      	ldr	r3, [pc, #636]	; (8013874 <_dtoa_r+0x5f4>)
 80135f6:	4fa0      	ldr	r7, [pc, #640]	; (8013878 <_dtoa_r+0x5f8>)
 80135f8:	f006 020f 	and.w	r2, r6, #15
 80135fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013608:	f7ec fff6 	bl	80005f8 <__aeabi_dmul>
 801360c:	e9cd 0100 	strd	r0, r1, [sp]
 8013610:	1136      	asrs	r6, r6, #4
 8013612:	2300      	movs	r3, #0
 8013614:	2502      	movs	r5, #2
 8013616:	2e00      	cmp	r6, #0
 8013618:	d17f      	bne.n	801371a <_dtoa_r+0x49a>
 801361a:	2b00      	cmp	r3, #0
 801361c:	d1e1      	bne.n	80135e2 <_dtoa_r+0x362>
 801361e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013620:	2b00      	cmp	r3, #0
 8013622:	f000 8087 	beq.w	8013734 <_dtoa_r+0x4b4>
 8013626:	e9dd 6700 	ldrd	r6, r7, [sp]
 801362a:	2200      	movs	r2, #0
 801362c:	4b93      	ldr	r3, [pc, #588]	; (801387c <_dtoa_r+0x5fc>)
 801362e:	4630      	mov	r0, r6
 8013630:	4639      	mov	r1, r7
 8013632:	f7ed fa53 	bl	8000adc <__aeabi_dcmplt>
 8013636:	2800      	cmp	r0, #0
 8013638:	d07c      	beq.n	8013734 <_dtoa_r+0x4b4>
 801363a:	f1b9 0f00 	cmp.w	r9, #0
 801363e:	d079      	beq.n	8013734 <_dtoa_r+0x4b4>
 8013640:	9b02      	ldr	r3, [sp, #8]
 8013642:	2b00      	cmp	r3, #0
 8013644:	dd35      	ble.n	80136b2 <_dtoa_r+0x432>
 8013646:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801364a:	9308      	str	r3, [sp, #32]
 801364c:	4639      	mov	r1, r7
 801364e:	2200      	movs	r2, #0
 8013650:	4b8b      	ldr	r3, [pc, #556]	; (8013880 <_dtoa_r+0x600>)
 8013652:	4630      	mov	r0, r6
 8013654:	f7ec ffd0 	bl	80005f8 <__aeabi_dmul>
 8013658:	e9cd 0100 	strd	r0, r1, [sp]
 801365c:	9f02      	ldr	r7, [sp, #8]
 801365e:	3501      	adds	r5, #1
 8013660:	4628      	mov	r0, r5
 8013662:	f7ec ff5f 	bl	8000524 <__aeabi_i2d>
 8013666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801366a:	f7ec ffc5 	bl	80005f8 <__aeabi_dmul>
 801366e:	2200      	movs	r2, #0
 8013670:	4b84      	ldr	r3, [pc, #528]	; (8013884 <_dtoa_r+0x604>)
 8013672:	f7ec fe0b 	bl	800028c <__adddf3>
 8013676:	4605      	mov	r5, r0
 8013678:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801367c:	2f00      	cmp	r7, #0
 801367e:	d15d      	bne.n	801373c <_dtoa_r+0x4bc>
 8013680:	2200      	movs	r2, #0
 8013682:	4b81      	ldr	r3, [pc, #516]	; (8013888 <_dtoa_r+0x608>)
 8013684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013688:	f7ec fdfe 	bl	8000288 <__aeabi_dsub>
 801368c:	462a      	mov	r2, r5
 801368e:	4633      	mov	r3, r6
 8013690:	e9cd 0100 	strd	r0, r1, [sp]
 8013694:	f7ed fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8013698:	2800      	cmp	r0, #0
 801369a:	f040 8288 	bne.w	8013bae <_dtoa_r+0x92e>
 801369e:	462a      	mov	r2, r5
 80136a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80136a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136a8:	f7ed fa18 	bl	8000adc <__aeabi_dcmplt>
 80136ac:	2800      	cmp	r0, #0
 80136ae:	f040 827c 	bne.w	8013baa <_dtoa_r+0x92a>
 80136b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80136b6:	e9cd 2300 	strd	r2, r3, [sp]
 80136ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f2c0 8150 	blt.w	8013962 <_dtoa_r+0x6e2>
 80136c2:	f1ba 0f0e 	cmp.w	sl, #14
 80136c6:	f300 814c 	bgt.w	8013962 <_dtoa_r+0x6e2>
 80136ca:	4b6a      	ldr	r3, [pc, #424]	; (8013874 <_dtoa_r+0x5f4>)
 80136cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80136d0:	ed93 7b00 	vldr	d7, [r3]
 80136d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136dc:	f280 80d8 	bge.w	8013890 <_dtoa_r+0x610>
 80136e0:	f1b9 0f00 	cmp.w	r9, #0
 80136e4:	f300 80d4 	bgt.w	8013890 <_dtoa_r+0x610>
 80136e8:	f040 825e 	bne.w	8013ba8 <_dtoa_r+0x928>
 80136ec:	2200      	movs	r2, #0
 80136ee:	4b66      	ldr	r3, [pc, #408]	; (8013888 <_dtoa_r+0x608>)
 80136f0:	ec51 0b17 	vmov	r0, r1, d7
 80136f4:	f7ec ff80 	bl	80005f8 <__aeabi_dmul>
 80136f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136fc:	f7ed fa02 	bl	8000b04 <__aeabi_dcmpge>
 8013700:	464f      	mov	r7, r9
 8013702:	464e      	mov	r6, r9
 8013704:	2800      	cmp	r0, #0
 8013706:	f040 8234 	bne.w	8013b72 <_dtoa_r+0x8f2>
 801370a:	2331      	movs	r3, #49	; 0x31
 801370c:	f10b 0501 	add.w	r5, fp, #1
 8013710:	f88b 3000 	strb.w	r3, [fp]
 8013714:	f10a 0a01 	add.w	sl, sl, #1
 8013718:	e22f      	b.n	8013b7a <_dtoa_r+0x8fa>
 801371a:	07f2      	lsls	r2, r6, #31
 801371c:	d505      	bpl.n	801372a <_dtoa_r+0x4aa>
 801371e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013722:	f7ec ff69 	bl	80005f8 <__aeabi_dmul>
 8013726:	3501      	adds	r5, #1
 8013728:	2301      	movs	r3, #1
 801372a:	1076      	asrs	r6, r6, #1
 801372c:	3708      	adds	r7, #8
 801372e:	e772      	b.n	8013616 <_dtoa_r+0x396>
 8013730:	2502      	movs	r5, #2
 8013732:	e774      	b.n	801361e <_dtoa_r+0x39e>
 8013734:	f8cd a020 	str.w	sl, [sp, #32]
 8013738:	464f      	mov	r7, r9
 801373a:	e791      	b.n	8013660 <_dtoa_r+0x3e0>
 801373c:	4b4d      	ldr	r3, [pc, #308]	; (8013874 <_dtoa_r+0x5f4>)
 801373e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013742:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013748:	2b00      	cmp	r3, #0
 801374a:	d047      	beq.n	80137dc <_dtoa_r+0x55c>
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	2000      	movs	r0, #0
 8013752:	494e      	ldr	r1, [pc, #312]	; (801388c <_dtoa_r+0x60c>)
 8013754:	f7ed f87a 	bl	800084c <__aeabi_ddiv>
 8013758:	462a      	mov	r2, r5
 801375a:	4633      	mov	r3, r6
 801375c:	f7ec fd94 	bl	8000288 <__aeabi_dsub>
 8013760:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013764:	465d      	mov	r5, fp
 8013766:	e9dd 0100 	ldrd	r0, r1, [sp]
 801376a:	f7ed f9f5 	bl	8000b58 <__aeabi_d2iz>
 801376e:	4606      	mov	r6, r0
 8013770:	f7ec fed8 	bl	8000524 <__aeabi_i2d>
 8013774:	4602      	mov	r2, r0
 8013776:	460b      	mov	r3, r1
 8013778:	e9dd 0100 	ldrd	r0, r1, [sp]
 801377c:	f7ec fd84 	bl	8000288 <__aeabi_dsub>
 8013780:	3630      	adds	r6, #48	; 0x30
 8013782:	f805 6b01 	strb.w	r6, [r5], #1
 8013786:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801378a:	e9cd 0100 	strd	r0, r1, [sp]
 801378e:	f7ed f9a5 	bl	8000adc <__aeabi_dcmplt>
 8013792:	2800      	cmp	r0, #0
 8013794:	d163      	bne.n	801385e <_dtoa_r+0x5de>
 8013796:	e9dd 2300 	ldrd	r2, r3, [sp]
 801379a:	2000      	movs	r0, #0
 801379c:	4937      	ldr	r1, [pc, #220]	; (801387c <_dtoa_r+0x5fc>)
 801379e:	f7ec fd73 	bl	8000288 <__aeabi_dsub>
 80137a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80137a6:	f7ed f999 	bl	8000adc <__aeabi_dcmplt>
 80137aa:	2800      	cmp	r0, #0
 80137ac:	f040 80b7 	bne.w	801391e <_dtoa_r+0x69e>
 80137b0:	eba5 030b 	sub.w	r3, r5, fp
 80137b4:	429f      	cmp	r7, r3
 80137b6:	f77f af7c 	ble.w	80136b2 <_dtoa_r+0x432>
 80137ba:	2200      	movs	r2, #0
 80137bc:	4b30      	ldr	r3, [pc, #192]	; (8013880 <_dtoa_r+0x600>)
 80137be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80137c2:	f7ec ff19 	bl	80005f8 <__aeabi_dmul>
 80137c6:	2200      	movs	r2, #0
 80137c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80137cc:	4b2c      	ldr	r3, [pc, #176]	; (8013880 <_dtoa_r+0x600>)
 80137ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80137d2:	f7ec ff11 	bl	80005f8 <__aeabi_dmul>
 80137d6:	e9cd 0100 	strd	r0, r1, [sp]
 80137da:	e7c4      	b.n	8013766 <_dtoa_r+0x4e6>
 80137dc:	462a      	mov	r2, r5
 80137de:	4633      	mov	r3, r6
 80137e0:	f7ec ff0a 	bl	80005f8 <__aeabi_dmul>
 80137e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80137e8:	eb0b 0507 	add.w	r5, fp, r7
 80137ec:	465e      	mov	r6, fp
 80137ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80137f2:	f7ed f9b1 	bl	8000b58 <__aeabi_d2iz>
 80137f6:	4607      	mov	r7, r0
 80137f8:	f7ec fe94 	bl	8000524 <__aeabi_i2d>
 80137fc:	3730      	adds	r7, #48	; 0x30
 80137fe:	4602      	mov	r2, r0
 8013800:	460b      	mov	r3, r1
 8013802:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013806:	f7ec fd3f 	bl	8000288 <__aeabi_dsub>
 801380a:	f806 7b01 	strb.w	r7, [r6], #1
 801380e:	42ae      	cmp	r6, r5
 8013810:	e9cd 0100 	strd	r0, r1, [sp]
 8013814:	f04f 0200 	mov.w	r2, #0
 8013818:	d126      	bne.n	8013868 <_dtoa_r+0x5e8>
 801381a:	4b1c      	ldr	r3, [pc, #112]	; (801388c <_dtoa_r+0x60c>)
 801381c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013820:	f7ec fd34 	bl	800028c <__adddf3>
 8013824:	4602      	mov	r2, r0
 8013826:	460b      	mov	r3, r1
 8013828:	e9dd 0100 	ldrd	r0, r1, [sp]
 801382c:	f7ed f974 	bl	8000b18 <__aeabi_dcmpgt>
 8013830:	2800      	cmp	r0, #0
 8013832:	d174      	bne.n	801391e <_dtoa_r+0x69e>
 8013834:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013838:	2000      	movs	r0, #0
 801383a:	4914      	ldr	r1, [pc, #80]	; (801388c <_dtoa_r+0x60c>)
 801383c:	f7ec fd24 	bl	8000288 <__aeabi_dsub>
 8013840:	4602      	mov	r2, r0
 8013842:	460b      	mov	r3, r1
 8013844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013848:	f7ed f948 	bl	8000adc <__aeabi_dcmplt>
 801384c:	2800      	cmp	r0, #0
 801384e:	f43f af30 	beq.w	80136b2 <_dtoa_r+0x432>
 8013852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013856:	2b30      	cmp	r3, #48	; 0x30
 8013858:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801385c:	d002      	beq.n	8013864 <_dtoa_r+0x5e4>
 801385e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013862:	e04a      	b.n	80138fa <_dtoa_r+0x67a>
 8013864:	4615      	mov	r5, r2
 8013866:	e7f4      	b.n	8013852 <_dtoa_r+0x5d2>
 8013868:	4b05      	ldr	r3, [pc, #20]	; (8013880 <_dtoa_r+0x600>)
 801386a:	f7ec fec5 	bl	80005f8 <__aeabi_dmul>
 801386e:	e9cd 0100 	strd	r0, r1, [sp]
 8013872:	e7bc      	b.n	80137ee <_dtoa_r+0x56e>
 8013874:	08018230 	.word	0x08018230
 8013878:	08018208 	.word	0x08018208
 801387c:	3ff00000 	.word	0x3ff00000
 8013880:	40240000 	.word	0x40240000
 8013884:	401c0000 	.word	0x401c0000
 8013888:	40140000 	.word	0x40140000
 801388c:	3fe00000 	.word	0x3fe00000
 8013890:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013894:	465d      	mov	r5, fp
 8013896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801389a:	4630      	mov	r0, r6
 801389c:	4639      	mov	r1, r7
 801389e:	f7ec ffd5 	bl	800084c <__aeabi_ddiv>
 80138a2:	f7ed f959 	bl	8000b58 <__aeabi_d2iz>
 80138a6:	4680      	mov	r8, r0
 80138a8:	f7ec fe3c 	bl	8000524 <__aeabi_i2d>
 80138ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80138b0:	f7ec fea2 	bl	80005f8 <__aeabi_dmul>
 80138b4:	4602      	mov	r2, r0
 80138b6:	460b      	mov	r3, r1
 80138b8:	4630      	mov	r0, r6
 80138ba:	4639      	mov	r1, r7
 80138bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80138c0:	f7ec fce2 	bl	8000288 <__aeabi_dsub>
 80138c4:	f805 6b01 	strb.w	r6, [r5], #1
 80138c8:	eba5 060b 	sub.w	r6, r5, fp
 80138cc:	45b1      	cmp	r9, r6
 80138ce:	4602      	mov	r2, r0
 80138d0:	460b      	mov	r3, r1
 80138d2:	d139      	bne.n	8013948 <_dtoa_r+0x6c8>
 80138d4:	f7ec fcda 	bl	800028c <__adddf3>
 80138d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80138dc:	4606      	mov	r6, r0
 80138de:	460f      	mov	r7, r1
 80138e0:	f7ed f91a 	bl	8000b18 <__aeabi_dcmpgt>
 80138e4:	b9c8      	cbnz	r0, 801391a <_dtoa_r+0x69a>
 80138e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80138ea:	4630      	mov	r0, r6
 80138ec:	4639      	mov	r1, r7
 80138ee:	f7ed f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80138f2:	b110      	cbz	r0, 80138fa <_dtoa_r+0x67a>
 80138f4:	f018 0f01 	tst.w	r8, #1
 80138f8:	d10f      	bne.n	801391a <_dtoa_r+0x69a>
 80138fa:	9904      	ldr	r1, [sp, #16]
 80138fc:	4620      	mov	r0, r4
 80138fe:	f000 ffd9 	bl	80148b4 <_Bfree>
 8013902:	2300      	movs	r3, #0
 8013904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013906:	702b      	strb	r3, [r5, #0]
 8013908:	f10a 0301 	add.w	r3, sl, #1
 801390c:	6013      	str	r3, [r2, #0]
 801390e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013910:	2b00      	cmp	r3, #0
 8013912:	f000 8241 	beq.w	8013d98 <_dtoa_r+0xb18>
 8013916:	601d      	str	r5, [r3, #0]
 8013918:	e23e      	b.n	8013d98 <_dtoa_r+0xb18>
 801391a:	f8cd a020 	str.w	sl, [sp, #32]
 801391e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013922:	2a39      	cmp	r2, #57	; 0x39
 8013924:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8013928:	d108      	bne.n	801393c <_dtoa_r+0x6bc>
 801392a:	459b      	cmp	fp, r3
 801392c:	d10a      	bne.n	8013944 <_dtoa_r+0x6c4>
 801392e:	9b08      	ldr	r3, [sp, #32]
 8013930:	3301      	adds	r3, #1
 8013932:	9308      	str	r3, [sp, #32]
 8013934:	2330      	movs	r3, #48	; 0x30
 8013936:	f88b 3000 	strb.w	r3, [fp]
 801393a:	465b      	mov	r3, fp
 801393c:	781a      	ldrb	r2, [r3, #0]
 801393e:	3201      	adds	r2, #1
 8013940:	701a      	strb	r2, [r3, #0]
 8013942:	e78c      	b.n	801385e <_dtoa_r+0x5de>
 8013944:	461d      	mov	r5, r3
 8013946:	e7ea      	b.n	801391e <_dtoa_r+0x69e>
 8013948:	2200      	movs	r2, #0
 801394a:	4b9b      	ldr	r3, [pc, #620]	; (8013bb8 <_dtoa_r+0x938>)
 801394c:	f7ec fe54 	bl	80005f8 <__aeabi_dmul>
 8013950:	2200      	movs	r2, #0
 8013952:	2300      	movs	r3, #0
 8013954:	4606      	mov	r6, r0
 8013956:	460f      	mov	r7, r1
 8013958:	f7ed f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 801395c:	2800      	cmp	r0, #0
 801395e:	d09a      	beq.n	8013896 <_dtoa_r+0x616>
 8013960:	e7cb      	b.n	80138fa <_dtoa_r+0x67a>
 8013962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013964:	2a00      	cmp	r2, #0
 8013966:	f000 808b 	beq.w	8013a80 <_dtoa_r+0x800>
 801396a:	9a06      	ldr	r2, [sp, #24]
 801396c:	2a01      	cmp	r2, #1
 801396e:	dc6e      	bgt.n	8013a4e <_dtoa_r+0x7ce>
 8013970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013972:	2a00      	cmp	r2, #0
 8013974:	d067      	beq.n	8013a46 <_dtoa_r+0x7c6>
 8013976:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801397a:	9f07      	ldr	r7, [sp, #28]
 801397c:	9d05      	ldr	r5, [sp, #20]
 801397e:	9a05      	ldr	r2, [sp, #20]
 8013980:	2101      	movs	r1, #1
 8013982:	441a      	add	r2, r3
 8013984:	4620      	mov	r0, r4
 8013986:	9205      	str	r2, [sp, #20]
 8013988:	4498      	add	r8, r3
 801398a:	f001 f871 	bl	8014a70 <__i2b>
 801398e:	4606      	mov	r6, r0
 8013990:	2d00      	cmp	r5, #0
 8013992:	dd0c      	ble.n	80139ae <_dtoa_r+0x72e>
 8013994:	f1b8 0f00 	cmp.w	r8, #0
 8013998:	dd09      	ble.n	80139ae <_dtoa_r+0x72e>
 801399a:	4545      	cmp	r5, r8
 801399c:	9a05      	ldr	r2, [sp, #20]
 801399e:	462b      	mov	r3, r5
 80139a0:	bfa8      	it	ge
 80139a2:	4643      	movge	r3, r8
 80139a4:	1ad2      	subs	r2, r2, r3
 80139a6:	9205      	str	r2, [sp, #20]
 80139a8:	1aed      	subs	r5, r5, r3
 80139aa:	eba8 0803 	sub.w	r8, r8, r3
 80139ae:	9b07      	ldr	r3, [sp, #28]
 80139b0:	b1eb      	cbz	r3, 80139ee <_dtoa_r+0x76e>
 80139b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d067      	beq.n	8013a88 <_dtoa_r+0x808>
 80139b8:	b18f      	cbz	r7, 80139de <_dtoa_r+0x75e>
 80139ba:	4631      	mov	r1, r6
 80139bc:	463a      	mov	r2, r7
 80139be:	4620      	mov	r0, r4
 80139c0:	f001 f8f6 	bl	8014bb0 <__pow5mult>
 80139c4:	9a04      	ldr	r2, [sp, #16]
 80139c6:	4601      	mov	r1, r0
 80139c8:	4606      	mov	r6, r0
 80139ca:	4620      	mov	r0, r4
 80139cc:	f001 f859 	bl	8014a82 <__multiply>
 80139d0:	9904      	ldr	r1, [sp, #16]
 80139d2:	9008      	str	r0, [sp, #32]
 80139d4:	4620      	mov	r0, r4
 80139d6:	f000 ff6d 	bl	80148b4 <_Bfree>
 80139da:	9b08      	ldr	r3, [sp, #32]
 80139dc:	9304      	str	r3, [sp, #16]
 80139de:	9b07      	ldr	r3, [sp, #28]
 80139e0:	1bda      	subs	r2, r3, r7
 80139e2:	d004      	beq.n	80139ee <_dtoa_r+0x76e>
 80139e4:	9904      	ldr	r1, [sp, #16]
 80139e6:	4620      	mov	r0, r4
 80139e8:	f001 f8e2 	bl	8014bb0 <__pow5mult>
 80139ec:	9004      	str	r0, [sp, #16]
 80139ee:	2101      	movs	r1, #1
 80139f0:	4620      	mov	r0, r4
 80139f2:	f001 f83d 	bl	8014a70 <__i2b>
 80139f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139f8:	4607      	mov	r7, r0
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	f000 81d0 	beq.w	8013da0 <_dtoa_r+0xb20>
 8013a00:	461a      	mov	r2, r3
 8013a02:	4601      	mov	r1, r0
 8013a04:	4620      	mov	r0, r4
 8013a06:	f001 f8d3 	bl	8014bb0 <__pow5mult>
 8013a0a:	9b06      	ldr	r3, [sp, #24]
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	4607      	mov	r7, r0
 8013a10:	dc40      	bgt.n	8013a94 <_dtoa_r+0x814>
 8013a12:	9b00      	ldr	r3, [sp, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d139      	bne.n	8013a8c <_dtoa_r+0x80c>
 8013a18:	9b01      	ldr	r3, [sp, #4]
 8013a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d136      	bne.n	8013a90 <_dtoa_r+0x810>
 8013a22:	9b01      	ldr	r3, [sp, #4]
 8013a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a28:	0d1b      	lsrs	r3, r3, #20
 8013a2a:	051b      	lsls	r3, r3, #20
 8013a2c:	b12b      	cbz	r3, 8013a3a <_dtoa_r+0x7ba>
 8013a2e:	9b05      	ldr	r3, [sp, #20]
 8013a30:	3301      	adds	r3, #1
 8013a32:	9305      	str	r3, [sp, #20]
 8013a34:	f108 0801 	add.w	r8, r8, #1
 8013a38:	2301      	movs	r3, #1
 8013a3a:	9307      	str	r3, [sp, #28]
 8013a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d12a      	bne.n	8013a98 <_dtoa_r+0x818>
 8013a42:	2001      	movs	r0, #1
 8013a44:	e030      	b.n	8013aa8 <_dtoa_r+0x828>
 8013a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013a48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013a4c:	e795      	b.n	801397a <_dtoa_r+0x6fa>
 8013a4e:	9b07      	ldr	r3, [sp, #28]
 8013a50:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8013a54:	42bb      	cmp	r3, r7
 8013a56:	bfbf      	itttt	lt
 8013a58:	9b07      	ldrlt	r3, [sp, #28]
 8013a5a:	9707      	strlt	r7, [sp, #28]
 8013a5c:	1afa      	sublt	r2, r7, r3
 8013a5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013a60:	bfbb      	ittet	lt
 8013a62:	189b      	addlt	r3, r3, r2
 8013a64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013a66:	1bdf      	subge	r7, r3, r7
 8013a68:	2700      	movlt	r7, #0
 8013a6a:	f1b9 0f00 	cmp.w	r9, #0
 8013a6e:	bfb5      	itete	lt
 8013a70:	9b05      	ldrlt	r3, [sp, #20]
 8013a72:	9d05      	ldrge	r5, [sp, #20]
 8013a74:	eba3 0509 	sublt.w	r5, r3, r9
 8013a78:	464b      	movge	r3, r9
 8013a7a:	bfb8      	it	lt
 8013a7c:	2300      	movlt	r3, #0
 8013a7e:	e77e      	b.n	801397e <_dtoa_r+0x6fe>
 8013a80:	9f07      	ldr	r7, [sp, #28]
 8013a82:	9d05      	ldr	r5, [sp, #20]
 8013a84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013a86:	e783      	b.n	8013990 <_dtoa_r+0x710>
 8013a88:	9a07      	ldr	r2, [sp, #28]
 8013a8a:	e7ab      	b.n	80139e4 <_dtoa_r+0x764>
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	e7d4      	b.n	8013a3a <_dtoa_r+0x7ba>
 8013a90:	9b00      	ldr	r3, [sp, #0]
 8013a92:	e7d2      	b.n	8013a3a <_dtoa_r+0x7ba>
 8013a94:	2300      	movs	r3, #0
 8013a96:	9307      	str	r3, [sp, #28]
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013a9e:	6918      	ldr	r0, [r3, #16]
 8013aa0:	f000 ff98 	bl	80149d4 <__hi0bits>
 8013aa4:	f1c0 0020 	rsb	r0, r0, #32
 8013aa8:	4440      	add	r0, r8
 8013aaa:	f010 001f 	ands.w	r0, r0, #31
 8013aae:	d047      	beq.n	8013b40 <_dtoa_r+0x8c0>
 8013ab0:	f1c0 0320 	rsb	r3, r0, #32
 8013ab4:	2b04      	cmp	r3, #4
 8013ab6:	dd3b      	ble.n	8013b30 <_dtoa_r+0x8b0>
 8013ab8:	9b05      	ldr	r3, [sp, #20]
 8013aba:	f1c0 001c 	rsb	r0, r0, #28
 8013abe:	4403      	add	r3, r0
 8013ac0:	9305      	str	r3, [sp, #20]
 8013ac2:	4405      	add	r5, r0
 8013ac4:	4480      	add	r8, r0
 8013ac6:	9b05      	ldr	r3, [sp, #20]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	dd05      	ble.n	8013ad8 <_dtoa_r+0x858>
 8013acc:	461a      	mov	r2, r3
 8013ace:	9904      	ldr	r1, [sp, #16]
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f001 f8bb 	bl	8014c4c <__lshift>
 8013ad6:	9004      	str	r0, [sp, #16]
 8013ad8:	f1b8 0f00 	cmp.w	r8, #0
 8013adc:	dd05      	ble.n	8013aea <_dtoa_r+0x86a>
 8013ade:	4639      	mov	r1, r7
 8013ae0:	4642      	mov	r2, r8
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f001 f8b2 	bl	8014c4c <__lshift>
 8013ae8:	4607      	mov	r7, r0
 8013aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013aec:	b353      	cbz	r3, 8013b44 <_dtoa_r+0x8c4>
 8013aee:	4639      	mov	r1, r7
 8013af0:	9804      	ldr	r0, [sp, #16]
 8013af2:	f001 f8ff 	bl	8014cf4 <__mcmp>
 8013af6:	2800      	cmp	r0, #0
 8013af8:	da24      	bge.n	8013b44 <_dtoa_r+0x8c4>
 8013afa:	2300      	movs	r3, #0
 8013afc:	220a      	movs	r2, #10
 8013afe:	9904      	ldr	r1, [sp, #16]
 8013b00:	4620      	mov	r0, r4
 8013b02:	f000 feee 	bl	80148e2 <__multadd>
 8013b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b08:	9004      	str	r0, [sp, #16]
 8013b0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	f000 814d 	beq.w	8013dae <_dtoa_r+0xb2e>
 8013b14:	2300      	movs	r3, #0
 8013b16:	4631      	mov	r1, r6
 8013b18:	220a      	movs	r2, #10
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	f000 fee1 	bl	80148e2 <__multadd>
 8013b20:	9b02      	ldr	r3, [sp, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	4606      	mov	r6, r0
 8013b26:	dc4f      	bgt.n	8013bc8 <_dtoa_r+0x948>
 8013b28:	9b06      	ldr	r3, [sp, #24]
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	dd4c      	ble.n	8013bc8 <_dtoa_r+0x948>
 8013b2e:	e011      	b.n	8013b54 <_dtoa_r+0x8d4>
 8013b30:	d0c9      	beq.n	8013ac6 <_dtoa_r+0x846>
 8013b32:	9a05      	ldr	r2, [sp, #20]
 8013b34:	331c      	adds	r3, #28
 8013b36:	441a      	add	r2, r3
 8013b38:	9205      	str	r2, [sp, #20]
 8013b3a:	441d      	add	r5, r3
 8013b3c:	4498      	add	r8, r3
 8013b3e:	e7c2      	b.n	8013ac6 <_dtoa_r+0x846>
 8013b40:	4603      	mov	r3, r0
 8013b42:	e7f6      	b.n	8013b32 <_dtoa_r+0x8b2>
 8013b44:	f1b9 0f00 	cmp.w	r9, #0
 8013b48:	dc38      	bgt.n	8013bbc <_dtoa_r+0x93c>
 8013b4a:	9b06      	ldr	r3, [sp, #24]
 8013b4c:	2b02      	cmp	r3, #2
 8013b4e:	dd35      	ble.n	8013bbc <_dtoa_r+0x93c>
 8013b50:	f8cd 9008 	str.w	r9, [sp, #8]
 8013b54:	9b02      	ldr	r3, [sp, #8]
 8013b56:	b963      	cbnz	r3, 8013b72 <_dtoa_r+0x8f2>
 8013b58:	4639      	mov	r1, r7
 8013b5a:	2205      	movs	r2, #5
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f000 fec0 	bl	80148e2 <__multadd>
 8013b62:	4601      	mov	r1, r0
 8013b64:	4607      	mov	r7, r0
 8013b66:	9804      	ldr	r0, [sp, #16]
 8013b68:	f001 f8c4 	bl	8014cf4 <__mcmp>
 8013b6c:	2800      	cmp	r0, #0
 8013b6e:	f73f adcc 	bgt.w	801370a <_dtoa_r+0x48a>
 8013b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b74:	465d      	mov	r5, fp
 8013b76:	ea6f 0a03 	mvn.w	sl, r3
 8013b7a:	f04f 0900 	mov.w	r9, #0
 8013b7e:	4639      	mov	r1, r7
 8013b80:	4620      	mov	r0, r4
 8013b82:	f000 fe97 	bl	80148b4 <_Bfree>
 8013b86:	2e00      	cmp	r6, #0
 8013b88:	f43f aeb7 	beq.w	80138fa <_dtoa_r+0x67a>
 8013b8c:	f1b9 0f00 	cmp.w	r9, #0
 8013b90:	d005      	beq.n	8013b9e <_dtoa_r+0x91e>
 8013b92:	45b1      	cmp	r9, r6
 8013b94:	d003      	beq.n	8013b9e <_dtoa_r+0x91e>
 8013b96:	4649      	mov	r1, r9
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f000 fe8b 	bl	80148b4 <_Bfree>
 8013b9e:	4631      	mov	r1, r6
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f000 fe87 	bl	80148b4 <_Bfree>
 8013ba6:	e6a8      	b.n	80138fa <_dtoa_r+0x67a>
 8013ba8:	2700      	movs	r7, #0
 8013baa:	463e      	mov	r6, r7
 8013bac:	e7e1      	b.n	8013b72 <_dtoa_r+0x8f2>
 8013bae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013bb2:	463e      	mov	r6, r7
 8013bb4:	e5a9      	b.n	801370a <_dtoa_r+0x48a>
 8013bb6:	bf00      	nop
 8013bb8:	40240000 	.word	0x40240000
 8013bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	f000 80fa 	beq.w	8013dbc <_dtoa_r+0xb3c>
 8013bc8:	2d00      	cmp	r5, #0
 8013bca:	dd05      	ble.n	8013bd8 <_dtoa_r+0x958>
 8013bcc:	4631      	mov	r1, r6
 8013bce:	462a      	mov	r2, r5
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f001 f83b 	bl	8014c4c <__lshift>
 8013bd6:	4606      	mov	r6, r0
 8013bd8:	9b07      	ldr	r3, [sp, #28]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d04c      	beq.n	8013c78 <_dtoa_r+0x9f8>
 8013bde:	6871      	ldr	r1, [r6, #4]
 8013be0:	4620      	mov	r0, r4
 8013be2:	f000 fe33 	bl	801484c <_Balloc>
 8013be6:	6932      	ldr	r2, [r6, #16]
 8013be8:	3202      	adds	r2, #2
 8013bea:	4605      	mov	r5, r0
 8013bec:	0092      	lsls	r2, r2, #2
 8013bee:	f106 010c 	add.w	r1, r6, #12
 8013bf2:	300c      	adds	r0, #12
 8013bf4:	f7fd fe5c 	bl	80118b0 <memcpy>
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f001 f825 	bl	8014c4c <__lshift>
 8013c02:	9b00      	ldr	r3, [sp, #0]
 8013c04:	f8cd b014 	str.w	fp, [sp, #20]
 8013c08:	f003 0301 	and.w	r3, r3, #1
 8013c0c:	46b1      	mov	r9, r6
 8013c0e:	9307      	str	r3, [sp, #28]
 8013c10:	4606      	mov	r6, r0
 8013c12:	4639      	mov	r1, r7
 8013c14:	9804      	ldr	r0, [sp, #16]
 8013c16:	f7ff faa7 	bl	8013168 <quorem>
 8013c1a:	4649      	mov	r1, r9
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013c22:	9804      	ldr	r0, [sp, #16]
 8013c24:	f001 f866 	bl	8014cf4 <__mcmp>
 8013c28:	4632      	mov	r2, r6
 8013c2a:	9000      	str	r0, [sp, #0]
 8013c2c:	4639      	mov	r1, r7
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f001 f87a 	bl	8014d28 <__mdiff>
 8013c34:	68c3      	ldr	r3, [r0, #12]
 8013c36:	4602      	mov	r2, r0
 8013c38:	bb03      	cbnz	r3, 8013c7c <_dtoa_r+0x9fc>
 8013c3a:	4601      	mov	r1, r0
 8013c3c:	9008      	str	r0, [sp, #32]
 8013c3e:	9804      	ldr	r0, [sp, #16]
 8013c40:	f001 f858 	bl	8014cf4 <__mcmp>
 8013c44:	9a08      	ldr	r2, [sp, #32]
 8013c46:	4603      	mov	r3, r0
 8013c48:	4611      	mov	r1, r2
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	9308      	str	r3, [sp, #32]
 8013c4e:	f000 fe31 	bl	80148b4 <_Bfree>
 8013c52:	9b08      	ldr	r3, [sp, #32]
 8013c54:	b9a3      	cbnz	r3, 8013c80 <_dtoa_r+0xa00>
 8013c56:	9a06      	ldr	r2, [sp, #24]
 8013c58:	b992      	cbnz	r2, 8013c80 <_dtoa_r+0xa00>
 8013c5a:	9a07      	ldr	r2, [sp, #28]
 8013c5c:	b982      	cbnz	r2, 8013c80 <_dtoa_r+0xa00>
 8013c5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013c62:	d029      	beq.n	8013cb8 <_dtoa_r+0xa38>
 8013c64:	9b00      	ldr	r3, [sp, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	dd01      	ble.n	8013c6e <_dtoa_r+0x9ee>
 8013c6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013c6e:	9b05      	ldr	r3, [sp, #20]
 8013c70:	1c5d      	adds	r5, r3, #1
 8013c72:	f883 8000 	strb.w	r8, [r3]
 8013c76:	e782      	b.n	8013b7e <_dtoa_r+0x8fe>
 8013c78:	4630      	mov	r0, r6
 8013c7a:	e7c2      	b.n	8013c02 <_dtoa_r+0x982>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e7e3      	b.n	8013c48 <_dtoa_r+0x9c8>
 8013c80:	9a00      	ldr	r2, [sp, #0]
 8013c82:	2a00      	cmp	r2, #0
 8013c84:	db04      	blt.n	8013c90 <_dtoa_r+0xa10>
 8013c86:	d125      	bne.n	8013cd4 <_dtoa_r+0xa54>
 8013c88:	9a06      	ldr	r2, [sp, #24]
 8013c8a:	bb1a      	cbnz	r2, 8013cd4 <_dtoa_r+0xa54>
 8013c8c:	9a07      	ldr	r2, [sp, #28]
 8013c8e:	bb0a      	cbnz	r2, 8013cd4 <_dtoa_r+0xa54>
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	ddec      	ble.n	8013c6e <_dtoa_r+0x9ee>
 8013c94:	2201      	movs	r2, #1
 8013c96:	9904      	ldr	r1, [sp, #16]
 8013c98:	4620      	mov	r0, r4
 8013c9a:	f000 ffd7 	bl	8014c4c <__lshift>
 8013c9e:	4639      	mov	r1, r7
 8013ca0:	9004      	str	r0, [sp, #16]
 8013ca2:	f001 f827 	bl	8014cf4 <__mcmp>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	dc03      	bgt.n	8013cb2 <_dtoa_r+0xa32>
 8013caa:	d1e0      	bne.n	8013c6e <_dtoa_r+0x9ee>
 8013cac:	f018 0f01 	tst.w	r8, #1
 8013cb0:	d0dd      	beq.n	8013c6e <_dtoa_r+0x9ee>
 8013cb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013cb6:	d1d8      	bne.n	8013c6a <_dtoa_r+0x9ea>
 8013cb8:	9b05      	ldr	r3, [sp, #20]
 8013cba:	9a05      	ldr	r2, [sp, #20]
 8013cbc:	1c5d      	adds	r5, r3, #1
 8013cbe:	2339      	movs	r3, #57	; 0x39
 8013cc0:	7013      	strb	r3, [r2, #0]
 8013cc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013cc6:	2b39      	cmp	r3, #57	; 0x39
 8013cc8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8013ccc:	d04f      	beq.n	8013d6e <_dtoa_r+0xaee>
 8013cce:	3301      	adds	r3, #1
 8013cd0:	7013      	strb	r3, [r2, #0]
 8013cd2:	e754      	b.n	8013b7e <_dtoa_r+0x8fe>
 8013cd4:	9a05      	ldr	r2, [sp, #20]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	f102 0501 	add.w	r5, r2, #1
 8013cdc:	dd06      	ble.n	8013cec <_dtoa_r+0xa6c>
 8013cde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013ce2:	d0e9      	beq.n	8013cb8 <_dtoa_r+0xa38>
 8013ce4:	f108 0801 	add.w	r8, r8, #1
 8013ce8:	9b05      	ldr	r3, [sp, #20]
 8013cea:	e7c2      	b.n	8013c72 <_dtoa_r+0x9f2>
 8013cec:	9a02      	ldr	r2, [sp, #8]
 8013cee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013cf2:	eba5 030b 	sub.w	r3, r5, fp
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d021      	beq.n	8013d3e <_dtoa_r+0xabe>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	220a      	movs	r2, #10
 8013cfe:	9904      	ldr	r1, [sp, #16]
 8013d00:	4620      	mov	r0, r4
 8013d02:	f000 fdee 	bl	80148e2 <__multadd>
 8013d06:	45b1      	cmp	r9, r6
 8013d08:	9004      	str	r0, [sp, #16]
 8013d0a:	f04f 0300 	mov.w	r3, #0
 8013d0e:	f04f 020a 	mov.w	r2, #10
 8013d12:	4649      	mov	r1, r9
 8013d14:	4620      	mov	r0, r4
 8013d16:	d105      	bne.n	8013d24 <_dtoa_r+0xaa4>
 8013d18:	f000 fde3 	bl	80148e2 <__multadd>
 8013d1c:	4681      	mov	r9, r0
 8013d1e:	4606      	mov	r6, r0
 8013d20:	9505      	str	r5, [sp, #20]
 8013d22:	e776      	b.n	8013c12 <_dtoa_r+0x992>
 8013d24:	f000 fddd 	bl	80148e2 <__multadd>
 8013d28:	4631      	mov	r1, r6
 8013d2a:	4681      	mov	r9, r0
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	220a      	movs	r2, #10
 8013d30:	4620      	mov	r0, r4
 8013d32:	f000 fdd6 	bl	80148e2 <__multadd>
 8013d36:	4606      	mov	r6, r0
 8013d38:	e7f2      	b.n	8013d20 <_dtoa_r+0xaa0>
 8013d3a:	f04f 0900 	mov.w	r9, #0
 8013d3e:	2201      	movs	r2, #1
 8013d40:	9904      	ldr	r1, [sp, #16]
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 ff82 	bl	8014c4c <__lshift>
 8013d48:	4639      	mov	r1, r7
 8013d4a:	9004      	str	r0, [sp, #16]
 8013d4c:	f000 ffd2 	bl	8014cf4 <__mcmp>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	dcb6      	bgt.n	8013cc2 <_dtoa_r+0xa42>
 8013d54:	d102      	bne.n	8013d5c <_dtoa_r+0xadc>
 8013d56:	f018 0f01 	tst.w	r8, #1
 8013d5a:	d1b2      	bne.n	8013cc2 <_dtoa_r+0xa42>
 8013d5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013d60:	2b30      	cmp	r3, #48	; 0x30
 8013d62:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8013d66:	f47f af0a 	bne.w	8013b7e <_dtoa_r+0x8fe>
 8013d6a:	4615      	mov	r5, r2
 8013d6c:	e7f6      	b.n	8013d5c <_dtoa_r+0xadc>
 8013d6e:	4593      	cmp	fp, r2
 8013d70:	d105      	bne.n	8013d7e <_dtoa_r+0xafe>
 8013d72:	2331      	movs	r3, #49	; 0x31
 8013d74:	f10a 0a01 	add.w	sl, sl, #1
 8013d78:	f88b 3000 	strb.w	r3, [fp]
 8013d7c:	e6ff      	b.n	8013b7e <_dtoa_r+0x8fe>
 8013d7e:	4615      	mov	r5, r2
 8013d80:	e79f      	b.n	8013cc2 <_dtoa_r+0xa42>
 8013d82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013de8 <_dtoa_r+0xb68>
 8013d86:	e007      	b.n	8013d98 <_dtoa_r+0xb18>
 8013d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013dec <_dtoa_r+0xb6c>
 8013d8e:	b11b      	cbz	r3, 8013d98 <_dtoa_r+0xb18>
 8013d90:	f10b 0308 	add.w	r3, fp, #8
 8013d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013d96:	6013      	str	r3, [r2, #0]
 8013d98:	4658      	mov	r0, fp
 8013d9a:	b017      	add	sp, #92	; 0x5c
 8013d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da0:	9b06      	ldr	r3, [sp, #24]
 8013da2:	2b01      	cmp	r3, #1
 8013da4:	f77f ae35 	ble.w	8013a12 <_dtoa_r+0x792>
 8013da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013daa:	9307      	str	r3, [sp, #28]
 8013dac:	e649      	b.n	8013a42 <_dtoa_r+0x7c2>
 8013dae:	9b02      	ldr	r3, [sp, #8]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	dc03      	bgt.n	8013dbc <_dtoa_r+0xb3c>
 8013db4:	9b06      	ldr	r3, [sp, #24]
 8013db6:	2b02      	cmp	r3, #2
 8013db8:	f73f aecc 	bgt.w	8013b54 <_dtoa_r+0x8d4>
 8013dbc:	465d      	mov	r5, fp
 8013dbe:	4639      	mov	r1, r7
 8013dc0:	9804      	ldr	r0, [sp, #16]
 8013dc2:	f7ff f9d1 	bl	8013168 <quorem>
 8013dc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013dca:	f805 8b01 	strb.w	r8, [r5], #1
 8013dce:	9a02      	ldr	r2, [sp, #8]
 8013dd0:	eba5 030b 	sub.w	r3, r5, fp
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	ddb0      	ble.n	8013d3a <_dtoa_r+0xaba>
 8013dd8:	2300      	movs	r3, #0
 8013dda:	220a      	movs	r2, #10
 8013ddc:	9904      	ldr	r1, [sp, #16]
 8013dde:	4620      	mov	r0, r4
 8013de0:	f000 fd7f 	bl	80148e2 <__multadd>
 8013de4:	9004      	str	r0, [sp, #16]
 8013de6:	e7ea      	b.n	8013dbe <_dtoa_r+0xb3e>
 8013de8:	08018110 	.word	0x08018110
 8013dec:	08018188 	.word	0x08018188

08013df0 <__sflush_r>:
 8013df0:	898a      	ldrh	r2, [r1, #12]
 8013df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df6:	4605      	mov	r5, r0
 8013df8:	0710      	lsls	r0, r2, #28
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	d458      	bmi.n	8013eb0 <__sflush_r+0xc0>
 8013dfe:	684b      	ldr	r3, [r1, #4]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	dc05      	bgt.n	8013e10 <__sflush_r+0x20>
 8013e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	dc02      	bgt.n	8013e10 <__sflush_r+0x20>
 8013e0a:	2000      	movs	r0, #0
 8013e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e12:	2e00      	cmp	r6, #0
 8013e14:	d0f9      	beq.n	8013e0a <__sflush_r+0x1a>
 8013e16:	2300      	movs	r3, #0
 8013e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e1c:	682f      	ldr	r7, [r5, #0]
 8013e1e:	6a21      	ldr	r1, [r4, #32]
 8013e20:	602b      	str	r3, [r5, #0]
 8013e22:	d032      	beq.n	8013e8a <__sflush_r+0x9a>
 8013e24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e26:	89a3      	ldrh	r3, [r4, #12]
 8013e28:	075a      	lsls	r2, r3, #29
 8013e2a:	d505      	bpl.n	8013e38 <__sflush_r+0x48>
 8013e2c:	6863      	ldr	r3, [r4, #4]
 8013e2e:	1ac0      	subs	r0, r0, r3
 8013e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e32:	b10b      	cbz	r3, 8013e38 <__sflush_r+0x48>
 8013e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e36:	1ac0      	subs	r0, r0, r3
 8013e38:	2300      	movs	r3, #0
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e3e:	6a21      	ldr	r1, [r4, #32]
 8013e40:	4628      	mov	r0, r5
 8013e42:	47b0      	blx	r6
 8013e44:	1c43      	adds	r3, r0, #1
 8013e46:	89a3      	ldrh	r3, [r4, #12]
 8013e48:	d106      	bne.n	8013e58 <__sflush_r+0x68>
 8013e4a:	6829      	ldr	r1, [r5, #0]
 8013e4c:	291d      	cmp	r1, #29
 8013e4e:	d848      	bhi.n	8013ee2 <__sflush_r+0xf2>
 8013e50:	4a29      	ldr	r2, [pc, #164]	; (8013ef8 <__sflush_r+0x108>)
 8013e52:	40ca      	lsrs	r2, r1
 8013e54:	07d6      	lsls	r6, r2, #31
 8013e56:	d544      	bpl.n	8013ee2 <__sflush_r+0xf2>
 8013e58:	2200      	movs	r2, #0
 8013e5a:	6062      	str	r2, [r4, #4]
 8013e5c:	04d9      	lsls	r1, r3, #19
 8013e5e:	6922      	ldr	r2, [r4, #16]
 8013e60:	6022      	str	r2, [r4, #0]
 8013e62:	d504      	bpl.n	8013e6e <__sflush_r+0x7e>
 8013e64:	1c42      	adds	r2, r0, #1
 8013e66:	d101      	bne.n	8013e6c <__sflush_r+0x7c>
 8013e68:	682b      	ldr	r3, [r5, #0]
 8013e6a:	b903      	cbnz	r3, 8013e6e <__sflush_r+0x7e>
 8013e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8013e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e70:	602f      	str	r7, [r5, #0]
 8013e72:	2900      	cmp	r1, #0
 8013e74:	d0c9      	beq.n	8013e0a <__sflush_r+0x1a>
 8013e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e7a:	4299      	cmp	r1, r3
 8013e7c:	d002      	beq.n	8013e84 <__sflush_r+0x94>
 8013e7e:	4628      	mov	r0, r5
 8013e80:	f001 f8f2 	bl	8015068 <_free_r>
 8013e84:	2000      	movs	r0, #0
 8013e86:	6360      	str	r0, [r4, #52]	; 0x34
 8013e88:	e7c0      	b.n	8013e0c <__sflush_r+0x1c>
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	47b0      	blx	r6
 8013e90:	1c41      	adds	r1, r0, #1
 8013e92:	d1c8      	bne.n	8013e26 <__sflush_r+0x36>
 8013e94:	682b      	ldr	r3, [r5, #0]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d0c5      	beq.n	8013e26 <__sflush_r+0x36>
 8013e9a:	2b1d      	cmp	r3, #29
 8013e9c:	d001      	beq.n	8013ea2 <__sflush_r+0xb2>
 8013e9e:	2b16      	cmp	r3, #22
 8013ea0:	d101      	bne.n	8013ea6 <__sflush_r+0xb6>
 8013ea2:	602f      	str	r7, [r5, #0]
 8013ea4:	e7b1      	b.n	8013e0a <__sflush_r+0x1a>
 8013ea6:	89a3      	ldrh	r3, [r4, #12]
 8013ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eac:	81a3      	strh	r3, [r4, #12]
 8013eae:	e7ad      	b.n	8013e0c <__sflush_r+0x1c>
 8013eb0:	690f      	ldr	r7, [r1, #16]
 8013eb2:	2f00      	cmp	r7, #0
 8013eb4:	d0a9      	beq.n	8013e0a <__sflush_r+0x1a>
 8013eb6:	0793      	lsls	r3, r2, #30
 8013eb8:	680e      	ldr	r6, [r1, #0]
 8013eba:	bf08      	it	eq
 8013ebc:	694b      	ldreq	r3, [r1, #20]
 8013ebe:	600f      	str	r7, [r1, #0]
 8013ec0:	bf18      	it	ne
 8013ec2:	2300      	movne	r3, #0
 8013ec4:	eba6 0807 	sub.w	r8, r6, r7
 8013ec8:	608b      	str	r3, [r1, #8]
 8013eca:	f1b8 0f00 	cmp.w	r8, #0
 8013ece:	dd9c      	ble.n	8013e0a <__sflush_r+0x1a>
 8013ed0:	4643      	mov	r3, r8
 8013ed2:	463a      	mov	r2, r7
 8013ed4:	6a21      	ldr	r1, [r4, #32]
 8013ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ed8:	4628      	mov	r0, r5
 8013eda:	47b0      	blx	r6
 8013edc:	2800      	cmp	r0, #0
 8013ede:	dc06      	bgt.n	8013eee <__sflush_r+0xfe>
 8013ee0:	89a3      	ldrh	r3, [r4, #12]
 8013ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ee6:	81a3      	strh	r3, [r4, #12]
 8013ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013eec:	e78e      	b.n	8013e0c <__sflush_r+0x1c>
 8013eee:	4407      	add	r7, r0
 8013ef0:	eba8 0800 	sub.w	r8, r8, r0
 8013ef4:	e7e9      	b.n	8013eca <__sflush_r+0xda>
 8013ef6:	bf00      	nop
 8013ef8:	20400001 	.word	0x20400001

08013efc <_fflush_r>:
 8013efc:	b538      	push	{r3, r4, r5, lr}
 8013efe:	690b      	ldr	r3, [r1, #16]
 8013f00:	4605      	mov	r5, r0
 8013f02:	460c      	mov	r4, r1
 8013f04:	b1db      	cbz	r3, 8013f3e <_fflush_r+0x42>
 8013f06:	b118      	cbz	r0, 8013f10 <_fflush_r+0x14>
 8013f08:	6983      	ldr	r3, [r0, #24]
 8013f0a:	b90b      	cbnz	r3, 8013f10 <_fflush_r+0x14>
 8013f0c:	f000 f860 	bl	8013fd0 <__sinit>
 8013f10:	4b0c      	ldr	r3, [pc, #48]	; (8013f44 <_fflush_r+0x48>)
 8013f12:	429c      	cmp	r4, r3
 8013f14:	d109      	bne.n	8013f2a <_fflush_r+0x2e>
 8013f16:	686c      	ldr	r4, [r5, #4]
 8013f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f1c:	b17b      	cbz	r3, 8013f3e <_fflush_r+0x42>
 8013f1e:	4621      	mov	r1, r4
 8013f20:	4628      	mov	r0, r5
 8013f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f26:	f7ff bf63 	b.w	8013df0 <__sflush_r>
 8013f2a:	4b07      	ldr	r3, [pc, #28]	; (8013f48 <_fflush_r+0x4c>)
 8013f2c:	429c      	cmp	r4, r3
 8013f2e:	d101      	bne.n	8013f34 <_fflush_r+0x38>
 8013f30:	68ac      	ldr	r4, [r5, #8]
 8013f32:	e7f1      	b.n	8013f18 <_fflush_r+0x1c>
 8013f34:	4b05      	ldr	r3, [pc, #20]	; (8013f4c <_fflush_r+0x50>)
 8013f36:	429c      	cmp	r4, r3
 8013f38:	bf08      	it	eq
 8013f3a:	68ec      	ldreq	r4, [r5, #12]
 8013f3c:	e7ec      	b.n	8013f18 <_fflush_r+0x1c>
 8013f3e:	2000      	movs	r0, #0
 8013f40:	bd38      	pop	{r3, r4, r5, pc}
 8013f42:	bf00      	nop
 8013f44:	080181b8 	.word	0x080181b8
 8013f48:	080181d8 	.word	0x080181d8
 8013f4c:	08018198 	.word	0x08018198

08013f50 <std>:
 8013f50:	2300      	movs	r3, #0
 8013f52:	b510      	push	{r4, lr}
 8013f54:	4604      	mov	r4, r0
 8013f56:	e9c0 3300 	strd	r3, r3, [r0]
 8013f5a:	6083      	str	r3, [r0, #8]
 8013f5c:	8181      	strh	r1, [r0, #12]
 8013f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8013f60:	81c2      	strh	r2, [r0, #14]
 8013f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f66:	6183      	str	r3, [r0, #24]
 8013f68:	4619      	mov	r1, r3
 8013f6a:	2208      	movs	r2, #8
 8013f6c:	305c      	adds	r0, #92	; 0x5c
 8013f6e:	f7fd fcaa 	bl	80118c6 <memset>
 8013f72:	4b05      	ldr	r3, [pc, #20]	; (8013f88 <std+0x38>)
 8013f74:	6263      	str	r3, [r4, #36]	; 0x24
 8013f76:	4b05      	ldr	r3, [pc, #20]	; (8013f8c <std+0x3c>)
 8013f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f7a:	4b05      	ldr	r3, [pc, #20]	; (8013f90 <std+0x40>)
 8013f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f7e:	4b05      	ldr	r3, [pc, #20]	; (8013f94 <std+0x44>)
 8013f80:	6224      	str	r4, [r4, #32]
 8013f82:	6323      	str	r3, [r4, #48]	; 0x30
 8013f84:	bd10      	pop	{r4, pc}
 8013f86:	bf00      	nop
 8013f88:	08015775 	.word	0x08015775
 8013f8c:	08015797 	.word	0x08015797
 8013f90:	080157cf 	.word	0x080157cf
 8013f94:	080157f3 	.word	0x080157f3

08013f98 <_cleanup_r>:
 8013f98:	4901      	ldr	r1, [pc, #4]	; (8013fa0 <_cleanup_r+0x8>)
 8013f9a:	f000 b885 	b.w	80140a8 <_fwalk_reent>
 8013f9e:	bf00      	nop
 8013fa0:	08013efd 	.word	0x08013efd

08013fa4 <__sfmoreglue>:
 8013fa4:	b570      	push	{r4, r5, r6, lr}
 8013fa6:	1e4a      	subs	r2, r1, #1
 8013fa8:	2568      	movs	r5, #104	; 0x68
 8013faa:	4355      	muls	r5, r2
 8013fac:	460e      	mov	r6, r1
 8013fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013fb2:	f001 f8a7 	bl	8015104 <_malloc_r>
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	b140      	cbz	r0, 8013fcc <__sfmoreglue+0x28>
 8013fba:	2100      	movs	r1, #0
 8013fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8013fc0:	300c      	adds	r0, #12
 8013fc2:	60a0      	str	r0, [r4, #8]
 8013fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013fc8:	f7fd fc7d 	bl	80118c6 <memset>
 8013fcc:	4620      	mov	r0, r4
 8013fce:	bd70      	pop	{r4, r5, r6, pc}

08013fd0 <__sinit>:
 8013fd0:	6983      	ldr	r3, [r0, #24]
 8013fd2:	b510      	push	{r4, lr}
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	bb33      	cbnz	r3, 8014026 <__sinit+0x56>
 8013fd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013fdc:	6503      	str	r3, [r0, #80]	; 0x50
 8013fde:	4b12      	ldr	r3, [pc, #72]	; (8014028 <__sinit+0x58>)
 8013fe0:	4a12      	ldr	r2, [pc, #72]	; (801402c <__sinit+0x5c>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	6282      	str	r2, [r0, #40]	; 0x28
 8013fe6:	4298      	cmp	r0, r3
 8013fe8:	bf04      	itt	eq
 8013fea:	2301      	moveq	r3, #1
 8013fec:	6183      	streq	r3, [r0, #24]
 8013fee:	f000 f81f 	bl	8014030 <__sfp>
 8013ff2:	6060      	str	r0, [r4, #4]
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f000 f81b 	bl	8014030 <__sfp>
 8013ffa:	60a0      	str	r0, [r4, #8]
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f000 f817 	bl	8014030 <__sfp>
 8014002:	2200      	movs	r2, #0
 8014004:	60e0      	str	r0, [r4, #12]
 8014006:	2104      	movs	r1, #4
 8014008:	6860      	ldr	r0, [r4, #4]
 801400a:	f7ff ffa1 	bl	8013f50 <std>
 801400e:	2201      	movs	r2, #1
 8014010:	2109      	movs	r1, #9
 8014012:	68a0      	ldr	r0, [r4, #8]
 8014014:	f7ff ff9c 	bl	8013f50 <std>
 8014018:	2202      	movs	r2, #2
 801401a:	2112      	movs	r1, #18
 801401c:	68e0      	ldr	r0, [r4, #12]
 801401e:	f7ff ff97 	bl	8013f50 <std>
 8014022:	2301      	movs	r3, #1
 8014024:	61a3      	str	r3, [r4, #24]
 8014026:	bd10      	pop	{r4, pc}
 8014028:	080180fc 	.word	0x080180fc
 801402c:	08013f99 	.word	0x08013f99

08014030 <__sfp>:
 8014030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014032:	4b1b      	ldr	r3, [pc, #108]	; (80140a0 <__sfp+0x70>)
 8014034:	681e      	ldr	r6, [r3, #0]
 8014036:	69b3      	ldr	r3, [r6, #24]
 8014038:	4607      	mov	r7, r0
 801403a:	b913      	cbnz	r3, 8014042 <__sfp+0x12>
 801403c:	4630      	mov	r0, r6
 801403e:	f7ff ffc7 	bl	8013fd0 <__sinit>
 8014042:	3648      	adds	r6, #72	; 0x48
 8014044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014048:	3b01      	subs	r3, #1
 801404a:	d503      	bpl.n	8014054 <__sfp+0x24>
 801404c:	6833      	ldr	r3, [r6, #0]
 801404e:	b133      	cbz	r3, 801405e <__sfp+0x2e>
 8014050:	6836      	ldr	r6, [r6, #0]
 8014052:	e7f7      	b.n	8014044 <__sfp+0x14>
 8014054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014058:	b16d      	cbz	r5, 8014076 <__sfp+0x46>
 801405a:	3468      	adds	r4, #104	; 0x68
 801405c:	e7f4      	b.n	8014048 <__sfp+0x18>
 801405e:	2104      	movs	r1, #4
 8014060:	4638      	mov	r0, r7
 8014062:	f7ff ff9f 	bl	8013fa4 <__sfmoreglue>
 8014066:	6030      	str	r0, [r6, #0]
 8014068:	2800      	cmp	r0, #0
 801406a:	d1f1      	bne.n	8014050 <__sfp+0x20>
 801406c:	230c      	movs	r3, #12
 801406e:	603b      	str	r3, [r7, #0]
 8014070:	4604      	mov	r4, r0
 8014072:	4620      	mov	r0, r4
 8014074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014076:	4b0b      	ldr	r3, [pc, #44]	; (80140a4 <__sfp+0x74>)
 8014078:	6665      	str	r5, [r4, #100]	; 0x64
 801407a:	e9c4 5500 	strd	r5, r5, [r4]
 801407e:	60a5      	str	r5, [r4, #8]
 8014080:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014084:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014088:	2208      	movs	r2, #8
 801408a:	4629      	mov	r1, r5
 801408c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014090:	f7fd fc19 	bl	80118c6 <memset>
 8014094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801409c:	e7e9      	b.n	8014072 <__sfp+0x42>
 801409e:	bf00      	nop
 80140a0:	080180fc 	.word	0x080180fc
 80140a4:	ffff0001 	.word	0xffff0001

080140a8 <_fwalk_reent>:
 80140a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140ac:	4680      	mov	r8, r0
 80140ae:	4689      	mov	r9, r1
 80140b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80140b4:	2600      	movs	r6, #0
 80140b6:	b914      	cbnz	r4, 80140be <_fwalk_reent+0x16>
 80140b8:	4630      	mov	r0, r6
 80140ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80140c2:	3f01      	subs	r7, #1
 80140c4:	d501      	bpl.n	80140ca <_fwalk_reent+0x22>
 80140c6:	6824      	ldr	r4, [r4, #0]
 80140c8:	e7f5      	b.n	80140b6 <_fwalk_reent+0xe>
 80140ca:	89ab      	ldrh	r3, [r5, #12]
 80140cc:	2b01      	cmp	r3, #1
 80140ce:	d907      	bls.n	80140e0 <_fwalk_reent+0x38>
 80140d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80140d4:	3301      	adds	r3, #1
 80140d6:	d003      	beq.n	80140e0 <_fwalk_reent+0x38>
 80140d8:	4629      	mov	r1, r5
 80140da:	4640      	mov	r0, r8
 80140dc:	47c8      	blx	r9
 80140de:	4306      	orrs	r6, r0
 80140e0:	3568      	adds	r5, #104	; 0x68
 80140e2:	e7ee      	b.n	80140c2 <_fwalk_reent+0x1a>

080140e4 <rshift>:
 80140e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140e6:	6906      	ldr	r6, [r0, #16]
 80140e8:	114b      	asrs	r3, r1, #5
 80140ea:	429e      	cmp	r6, r3
 80140ec:	f100 0414 	add.w	r4, r0, #20
 80140f0:	dd30      	ble.n	8014154 <rshift+0x70>
 80140f2:	f011 011f 	ands.w	r1, r1, #31
 80140f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80140fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80140fe:	d108      	bne.n	8014112 <rshift+0x2e>
 8014100:	4621      	mov	r1, r4
 8014102:	42b2      	cmp	r2, r6
 8014104:	460b      	mov	r3, r1
 8014106:	d211      	bcs.n	801412c <rshift+0x48>
 8014108:	f852 3b04 	ldr.w	r3, [r2], #4
 801410c:	f841 3b04 	str.w	r3, [r1], #4
 8014110:	e7f7      	b.n	8014102 <rshift+0x1e>
 8014112:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014116:	f1c1 0c20 	rsb	ip, r1, #32
 801411a:	40cd      	lsrs	r5, r1
 801411c:	3204      	adds	r2, #4
 801411e:	4623      	mov	r3, r4
 8014120:	42b2      	cmp	r2, r6
 8014122:	4617      	mov	r7, r2
 8014124:	d30c      	bcc.n	8014140 <rshift+0x5c>
 8014126:	601d      	str	r5, [r3, #0]
 8014128:	b105      	cbz	r5, 801412c <rshift+0x48>
 801412a:	3304      	adds	r3, #4
 801412c:	1b1a      	subs	r2, r3, r4
 801412e:	42a3      	cmp	r3, r4
 8014130:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014134:	bf08      	it	eq
 8014136:	2300      	moveq	r3, #0
 8014138:	6102      	str	r2, [r0, #16]
 801413a:	bf08      	it	eq
 801413c:	6143      	streq	r3, [r0, #20]
 801413e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014140:	683f      	ldr	r7, [r7, #0]
 8014142:	fa07 f70c 	lsl.w	r7, r7, ip
 8014146:	433d      	orrs	r5, r7
 8014148:	f843 5b04 	str.w	r5, [r3], #4
 801414c:	f852 5b04 	ldr.w	r5, [r2], #4
 8014150:	40cd      	lsrs	r5, r1
 8014152:	e7e5      	b.n	8014120 <rshift+0x3c>
 8014154:	4623      	mov	r3, r4
 8014156:	e7e9      	b.n	801412c <rshift+0x48>

08014158 <__hexdig_fun>:
 8014158:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801415c:	2b09      	cmp	r3, #9
 801415e:	d802      	bhi.n	8014166 <__hexdig_fun+0xe>
 8014160:	3820      	subs	r0, #32
 8014162:	b2c0      	uxtb	r0, r0
 8014164:	4770      	bx	lr
 8014166:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801416a:	2b05      	cmp	r3, #5
 801416c:	d801      	bhi.n	8014172 <__hexdig_fun+0x1a>
 801416e:	3847      	subs	r0, #71	; 0x47
 8014170:	e7f7      	b.n	8014162 <__hexdig_fun+0xa>
 8014172:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014176:	2b05      	cmp	r3, #5
 8014178:	d801      	bhi.n	801417e <__hexdig_fun+0x26>
 801417a:	3827      	subs	r0, #39	; 0x27
 801417c:	e7f1      	b.n	8014162 <__hexdig_fun+0xa>
 801417e:	2000      	movs	r0, #0
 8014180:	4770      	bx	lr

08014182 <__gethex>:
 8014182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014186:	b08b      	sub	sp, #44	; 0x2c
 8014188:	468a      	mov	sl, r1
 801418a:	9002      	str	r0, [sp, #8]
 801418c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801418e:	9306      	str	r3, [sp, #24]
 8014190:	4690      	mov	r8, r2
 8014192:	f000 facd 	bl	8014730 <__localeconv_l>
 8014196:	6803      	ldr	r3, [r0, #0]
 8014198:	9303      	str	r3, [sp, #12]
 801419a:	4618      	mov	r0, r3
 801419c:	f7ec f818 	bl	80001d0 <strlen>
 80141a0:	9b03      	ldr	r3, [sp, #12]
 80141a2:	9001      	str	r0, [sp, #4]
 80141a4:	4403      	add	r3, r0
 80141a6:	f04f 0b00 	mov.w	fp, #0
 80141aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80141ae:	9307      	str	r3, [sp, #28]
 80141b0:	f8da 3000 	ldr.w	r3, [sl]
 80141b4:	3302      	adds	r3, #2
 80141b6:	461f      	mov	r7, r3
 80141b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80141bc:	2830      	cmp	r0, #48	; 0x30
 80141be:	d06c      	beq.n	801429a <__gethex+0x118>
 80141c0:	f7ff ffca 	bl	8014158 <__hexdig_fun>
 80141c4:	4604      	mov	r4, r0
 80141c6:	2800      	cmp	r0, #0
 80141c8:	d16a      	bne.n	80142a0 <__gethex+0x11e>
 80141ca:	9a01      	ldr	r2, [sp, #4]
 80141cc:	9903      	ldr	r1, [sp, #12]
 80141ce:	4638      	mov	r0, r7
 80141d0:	f001 fb13 	bl	80157fa <strncmp>
 80141d4:	2800      	cmp	r0, #0
 80141d6:	d166      	bne.n	80142a6 <__gethex+0x124>
 80141d8:	9b01      	ldr	r3, [sp, #4]
 80141da:	5cf8      	ldrb	r0, [r7, r3]
 80141dc:	18fe      	adds	r6, r7, r3
 80141de:	f7ff ffbb 	bl	8014158 <__hexdig_fun>
 80141e2:	2800      	cmp	r0, #0
 80141e4:	d062      	beq.n	80142ac <__gethex+0x12a>
 80141e6:	4633      	mov	r3, r6
 80141e8:	7818      	ldrb	r0, [r3, #0]
 80141ea:	2830      	cmp	r0, #48	; 0x30
 80141ec:	461f      	mov	r7, r3
 80141ee:	f103 0301 	add.w	r3, r3, #1
 80141f2:	d0f9      	beq.n	80141e8 <__gethex+0x66>
 80141f4:	f7ff ffb0 	bl	8014158 <__hexdig_fun>
 80141f8:	fab0 f580 	clz	r5, r0
 80141fc:	096d      	lsrs	r5, r5, #5
 80141fe:	4634      	mov	r4, r6
 8014200:	f04f 0b01 	mov.w	fp, #1
 8014204:	463a      	mov	r2, r7
 8014206:	4616      	mov	r6, r2
 8014208:	3201      	adds	r2, #1
 801420a:	7830      	ldrb	r0, [r6, #0]
 801420c:	f7ff ffa4 	bl	8014158 <__hexdig_fun>
 8014210:	2800      	cmp	r0, #0
 8014212:	d1f8      	bne.n	8014206 <__gethex+0x84>
 8014214:	9a01      	ldr	r2, [sp, #4]
 8014216:	9903      	ldr	r1, [sp, #12]
 8014218:	4630      	mov	r0, r6
 801421a:	f001 faee 	bl	80157fa <strncmp>
 801421e:	b950      	cbnz	r0, 8014236 <__gethex+0xb4>
 8014220:	b954      	cbnz	r4, 8014238 <__gethex+0xb6>
 8014222:	9b01      	ldr	r3, [sp, #4]
 8014224:	18f4      	adds	r4, r6, r3
 8014226:	4622      	mov	r2, r4
 8014228:	4616      	mov	r6, r2
 801422a:	3201      	adds	r2, #1
 801422c:	7830      	ldrb	r0, [r6, #0]
 801422e:	f7ff ff93 	bl	8014158 <__hexdig_fun>
 8014232:	2800      	cmp	r0, #0
 8014234:	d1f8      	bne.n	8014228 <__gethex+0xa6>
 8014236:	b10c      	cbz	r4, 801423c <__gethex+0xba>
 8014238:	1ba4      	subs	r4, r4, r6
 801423a:	00a4      	lsls	r4, r4, #2
 801423c:	7833      	ldrb	r3, [r6, #0]
 801423e:	2b50      	cmp	r3, #80	; 0x50
 8014240:	d001      	beq.n	8014246 <__gethex+0xc4>
 8014242:	2b70      	cmp	r3, #112	; 0x70
 8014244:	d140      	bne.n	80142c8 <__gethex+0x146>
 8014246:	7873      	ldrb	r3, [r6, #1]
 8014248:	2b2b      	cmp	r3, #43	; 0x2b
 801424a:	d031      	beq.n	80142b0 <__gethex+0x12e>
 801424c:	2b2d      	cmp	r3, #45	; 0x2d
 801424e:	d033      	beq.n	80142b8 <__gethex+0x136>
 8014250:	1c71      	adds	r1, r6, #1
 8014252:	f04f 0900 	mov.w	r9, #0
 8014256:	7808      	ldrb	r0, [r1, #0]
 8014258:	f7ff ff7e 	bl	8014158 <__hexdig_fun>
 801425c:	1e43      	subs	r3, r0, #1
 801425e:	b2db      	uxtb	r3, r3
 8014260:	2b18      	cmp	r3, #24
 8014262:	d831      	bhi.n	80142c8 <__gethex+0x146>
 8014264:	f1a0 0210 	sub.w	r2, r0, #16
 8014268:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801426c:	f7ff ff74 	bl	8014158 <__hexdig_fun>
 8014270:	1e43      	subs	r3, r0, #1
 8014272:	b2db      	uxtb	r3, r3
 8014274:	2b18      	cmp	r3, #24
 8014276:	d922      	bls.n	80142be <__gethex+0x13c>
 8014278:	f1b9 0f00 	cmp.w	r9, #0
 801427c:	d000      	beq.n	8014280 <__gethex+0xfe>
 801427e:	4252      	negs	r2, r2
 8014280:	4414      	add	r4, r2
 8014282:	f8ca 1000 	str.w	r1, [sl]
 8014286:	b30d      	cbz	r5, 80142cc <__gethex+0x14a>
 8014288:	f1bb 0f00 	cmp.w	fp, #0
 801428c:	bf0c      	ite	eq
 801428e:	2706      	moveq	r7, #6
 8014290:	2700      	movne	r7, #0
 8014292:	4638      	mov	r0, r7
 8014294:	b00b      	add	sp, #44	; 0x2c
 8014296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801429a:	f10b 0b01 	add.w	fp, fp, #1
 801429e:	e78a      	b.n	80141b6 <__gethex+0x34>
 80142a0:	2500      	movs	r5, #0
 80142a2:	462c      	mov	r4, r5
 80142a4:	e7ae      	b.n	8014204 <__gethex+0x82>
 80142a6:	463e      	mov	r6, r7
 80142a8:	2501      	movs	r5, #1
 80142aa:	e7c7      	b.n	801423c <__gethex+0xba>
 80142ac:	4604      	mov	r4, r0
 80142ae:	e7fb      	b.n	80142a8 <__gethex+0x126>
 80142b0:	f04f 0900 	mov.w	r9, #0
 80142b4:	1cb1      	adds	r1, r6, #2
 80142b6:	e7ce      	b.n	8014256 <__gethex+0xd4>
 80142b8:	f04f 0901 	mov.w	r9, #1
 80142bc:	e7fa      	b.n	80142b4 <__gethex+0x132>
 80142be:	230a      	movs	r3, #10
 80142c0:	fb03 0202 	mla	r2, r3, r2, r0
 80142c4:	3a10      	subs	r2, #16
 80142c6:	e7cf      	b.n	8014268 <__gethex+0xe6>
 80142c8:	4631      	mov	r1, r6
 80142ca:	e7da      	b.n	8014282 <__gethex+0x100>
 80142cc:	1bf3      	subs	r3, r6, r7
 80142ce:	3b01      	subs	r3, #1
 80142d0:	4629      	mov	r1, r5
 80142d2:	2b07      	cmp	r3, #7
 80142d4:	dc49      	bgt.n	801436a <__gethex+0x1e8>
 80142d6:	9802      	ldr	r0, [sp, #8]
 80142d8:	f000 fab8 	bl	801484c <_Balloc>
 80142dc:	9b01      	ldr	r3, [sp, #4]
 80142de:	f100 0914 	add.w	r9, r0, #20
 80142e2:	f04f 0b00 	mov.w	fp, #0
 80142e6:	f1c3 0301 	rsb	r3, r3, #1
 80142ea:	4605      	mov	r5, r0
 80142ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80142f0:	46da      	mov	sl, fp
 80142f2:	9308      	str	r3, [sp, #32]
 80142f4:	42b7      	cmp	r7, r6
 80142f6:	d33b      	bcc.n	8014370 <__gethex+0x1ee>
 80142f8:	9804      	ldr	r0, [sp, #16]
 80142fa:	f840 ab04 	str.w	sl, [r0], #4
 80142fe:	eba0 0009 	sub.w	r0, r0, r9
 8014302:	1080      	asrs	r0, r0, #2
 8014304:	6128      	str	r0, [r5, #16]
 8014306:	0147      	lsls	r7, r0, #5
 8014308:	4650      	mov	r0, sl
 801430a:	f000 fb63 	bl	80149d4 <__hi0bits>
 801430e:	f8d8 6000 	ldr.w	r6, [r8]
 8014312:	1a3f      	subs	r7, r7, r0
 8014314:	42b7      	cmp	r7, r6
 8014316:	dd64      	ble.n	80143e2 <__gethex+0x260>
 8014318:	1bbf      	subs	r7, r7, r6
 801431a:	4639      	mov	r1, r7
 801431c:	4628      	mov	r0, r5
 801431e:	f000 fe73 	bl	8015008 <__any_on>
 8014322:	4682      	mov	sl, r0
 8014324:	b178      	cbz	r0, 8014346 <__gethex+0x1c4>
 8014326:	1e7b      	subs	r3, r7, #1
 8014328:	1159      	asrs	r1, r3, #5
 801432a:	f003 021f 	and.w	r2, r3, #31
 801432e:	f04f 0a01 	mov.w	sl, #1
 8014332:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014336:	fa0a f202 	lsl.w	r2, sl, r2
 801433a:	420a      	tst	r2, r1
 801433c:	d003      	beq.n	8014346 <__gethex+0x1c4>
 801433e:	4553      	cmp	r3, sl
 8014340:	dc46      	bgt.n	80143d0 <__gethex+0x24e>
 8014342:	f04f 0a02 	mov.w	sl, #2
 8014346:	4639      	mov	r1, r7
 8014348:	4628      	mov	r0, r5
 801434a:	f7ff fecb 	bl	80140e4 <rshift>
 801434e:	443c      	add	r4, r7
 8014350:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014354:	42a3      	cmp	r3, r4
 8014356:	da52      	bge.n	80143fe <__gethex+0x27c>
 8014358:	4629      	mov	r1, r5
 801435a:	9802      	ldr	r0, [sp, #8]
 801435c:	f000 faaa 	bl	80148b4 <_Bfree>
 8014360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014362:	2300      	movs	r3, #0
 8014364:	6013      	str	r3, [r2, #0]
 8014366:	27a3      	movs	r7, #163	; 0xa3
 8014368:	e793      	b.n	8014292 <__gethex+0x110>
 801436a:	3101      	adds	r1, #1
 801436c:	105b      	asrs	r3, r3, #1
 801436e:	e7b0      	b.n	80142d2 <__gethex+0x150>
 8014370:	1e73      	subs	r3, r6, #1
 8014372:	9305      	str	r3, [sp, #20]
 8014374:	9a07      	ldr	r2, [sp, #28]
 8014376:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801437a:	4293      	cmp	r3, r2
 801437c:	d018      	beq.n	80143b0 <__gethex+0x22e>
 801437e:	f1bb 0f20 	cmp.w	fp, #32
 8014382:	d107      	bne.n	8014394 <__gethex+0x212>
 8014384:	9b04      	ldr	r3, [sp, #16]
 8014386:	f8c3 a000 	str.w	sl, [r3]
 801438a:	3304      	adds	r3, #4
 801438c:	f04f 0a00 	mov.w	sl, #0
 8014390:	9304      	str	r3, [sp, #16]
 8014392:	46d3      	mov	fp, sl
 8014394:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014398:	f7ff fede 	bl	8014158 <__hexdig_fun>
 801439c:	f000 000f 	and.w	r0, r0, #15
 80143a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80143a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80143a8:	f10b 0b04 	add.w	fp, fp, #4
 80143ac:	9b05      	ldr	r3, [sp, #20]
 80143ae:	e00d      	b.n	80143cc <__gethex+0x24a>
 80143b0:	9b05      	ldr	r3, [sp, #20]
 80143b2:	9a08      	ldr	r2, [sp, #32]
 80143b4:	4413      	add	r3, r2
 80143b6:	42bb      	cmp	r3, r7
 80143b8:	d3e1      	bcc.n	801437e <__gethex+0x1fc>
 80143ba:	4618      	mov	r0, r3
 80143bc:	9a01      	ldr	r2, [sp, #4]
 80143be:	9903      	ldr	r1, [sp, #12]
 80143c0:	9309      	str	r3, [sp, #36]	; 0x24
 80143c2:	f001 fa1a 	bl	80157fa <strncmp>
 80143c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d1d8      	bne.n	801437e <__gethex+0x1fc>
 80143cc:	461e      	mov	r6, r3
 80143ce:	e791      	b.n	80142f4 <__gethex+0x172>
 80143d0:	1eb9      	subs	r1, r7, #2
 80143d2:	4628      	mov	r0, r5
 80143d4:	f000 fe18 	bl	8015008 <__any_on>
 80143d8:	2800      	cmp	r0, #0
 80143da:	d0b2      	beq.n	8014342 <__gethex+0x1c0>
 80143dc:	f04f 0a03 	mov.w	sl, #3
 80143e0:	e7b1      	b.n	8014346 <__gethex+0x1c4>
 80143e2:	da09      	bge.n	80143f8 <__gethex+0x276>
 80143e4:	1bf7      	subs	r7, r6, r7
 80143e6:	4629      	mov	r1, r5
 80143e8:	463a      	mov	r2, r7
 80143ea:	9802      	ldr	r0, [sp, #8]
 80143ec:	f000 fc2e 	bl	8014c4c <__lshift>
 80143f0:	1be4      	subs	r4, r4, r7
 80143f2:	4605      	mov	r5, r0
 80143f4:	f100 0914 	add.w	r9, r0, #20
 80143f8:	f04f 0a00 	mov.w	sl, #0
 80143fc:	e7a8      	b.n	8014350 <__gethex+0x1ce>
 80143fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014402:	42a0      	cmp	r0, r4
 8014404:	dd6a      	ble.n	80144dc <__gethex+0x35a>
 8014406:	1b04      	subs	r4, r0, r4
 8014408:	42a6      	cmp	r6, r4
 801440a:	dc2e      	bgt.n	801446a <__gethex+0x2e8>
 801440c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014410:	2b02      	cmp	r3, #2
 8014412:	d022      	beq.n	801445a <__gethex+0x2d8>
 8014414:	2b03      	cmp	r3, #3
 8014416:	d024      	beq.n	8014462 <__gethex+0x2e0>
 8014418:	2b01      	cmp	r3, #1
 801441a:	d115      	bne.n	8014448 <__gethex+0x2c6>
 801441c:	42a6      	cmp	r6, r4
 801441e:	d113      	bne.n	8014448 <__gethex+0x2c6>
 8014420:	2e01      	cmp	r6, #1
 8014422:	dc0b      	bgt.n	801443c <__gethex+0x2ba>
 8014424:	9a06      	ldr	r2, [sp, #24]
 8014426:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801442a:	6013      	str	r3, [r2, #0]
 801442c:	2301      	movs	r3, #1
 801442e:	612b      	str	r3, [r5, #16]
 8014430:	f8c9 3000 	str.w	r3, [r9]
 8014434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014436:	2762      	movs	r7, #98	; 0x62
 8014438:	601d      	str	r5, [r3, #0]
 801443a:	e72a      	b.n	8014292 <__gethex+0x110>
 801443c:	1e71      	subs	r1, r6, #1
 801443e:	4628      	mov	r0, r5
 8014440:	f000 fde2 	bl	8015008 <__any_on>
 8014444:	2800      	cmp	r0, #0
 8014446:	d1ed      	bne.n	8014424 <__gethex+0x2a2>
 8014448:	4629      	mov	r1, r5
 801444a:	9802      	ldr	r0, [sp, #8]
 801444c:	f000 fa32 	bl	80148b4 <_Bfree>
 8014450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014452:	2300      	movs	r3, #0
 8014454:	6013      	str	r3, [r2, #0]
 8014456:	2750      	movs	r7, #80	; 0x50
 8014458:	e71b      	b.n	8014292 <__gethex+0x110>
 801445a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801445c:	2b00      	cmp	r3, #0
 801445e:	d0e1      	beq.n	8014424 <__gethex+0x2a2>
 8014460:	e7f2      	b.n	8014448 <__gethex+0x2c6>
 8014462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014464:	2b00      	cmp	r3, #0
 8014466:	d1dd      	bne.n	8014424 <__gethex+0x2a2>
 8014468:	e7ee      	b.n	8014448 <__gethex+0x2c6>
 801446a:	1e67      	subs	r7, r4, #1
 801446c:	f1ba 0f00 	cmp.w	sl, #0
 8014470:	d131      	bne.n	80144d6 <__gethex+0x354>
 8014472:	b127      	cbz	r7, 801447e <__gethex+0x2fc>
 8014474:	4639      	mov	r1, r7
 8014476:	4628      	mov	r0, r5
 8014478:	f000 fdc6 	bl	8015008 <__any_on>
 801447c:	4682      	mov	sl, r0
 801447e:	117a      	asrs	r2, r7, #5
 8014480:	2301      	movs	r3, #1
 8014482:	f007 071f 	and.w	r7, r7, #31
 8014486:	fa03 f707 	lsl.w	r7, r3, r7
 801448a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801448e:	4621      	mov	r1, r4
 8014490:	421f      	tst	r7, r3
 8014492:	4628      	mov	r0, r5
 8014494:	bf18      	it	ne
 8014496:	f04a 0a02 	orrne.w	sl, sl, #2
 801449a:	1b36      	subs	r6, r6, r4
 801449c:	f7ff fe22 	bl	80140e4 <rshift>
 80144a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80144a4:	2702      	movs	r7, #2
 80144a6:	f1ba 0f00 	cmp.w	sl, #0
 80144aa:	d048      	beq.n	801453e <__gethex+0x3bc>
 80144ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80144b0:	2b02      	cmp	r3, #2
 80144b2:	d015      	beq.n	80144e0 <__gethex+0x35e>
 80144b4:	2b03      	cmp	r3, #3
 80144b6:	d017      	beq.n	80144e8 <__gethex+0x366>
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d109      	bne.n	80144d0 <__gethex+0x34e>
 80144bc:	f01a 0f02 	tst.w	sl, #2
 80144c0:	d006      	beq.n	80144d0 <__gethex+0x34e>
 80144c2:	f8d9 3000 	ldr.w	r3, [r9]
 80144c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80144ca:	f01a 0f01 	tst.w	sl, #1
 80144ce:	d10e      	bne.n	80144ee <__gethex+0x36c>
 80144d0:	f047 0710 	orr.w	r7, r7, #16
 80144d4:	e033      	b.n	801453e <__gethex+0x3bc>
 80144d6:	f04f 0a01 	mov.w	sl, #1
 80144da:	e7d0      	b.n	801447e <__gethex+0x2fc>
 80144dc:	2701      	movs	r7, #1
 80144de:	e7e2      	b.n	80144a6 <__gethex+0x324>
 80144e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144e2:	f1c3 0301 	rsb	r3, r3, #1
 80144e6:	9315      	str	r3, [sp, #84]	; 0x54
 80144e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d0f0      	beq.n	80144d0 <__gethex+0x34e>
 80144ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80144f2:	f105 0314 	add.w	r3, r5, #20
 80144f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80144fa:	eb03 010a 	add.w	r1, r3, sl
 80144fe:	f04f 0c00 	mov.w	ip, #0
 8014502:	4618      	mov	r0, r3
 8014504:	f853 2b04 	ldr.w	r2, [r3], #4
 8014508:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801450c:	d01c      	beq.n	8014548 <__gethex+0x3c6>
 801450e:	3201      	adds	r2, #1
 8014510:	6002      	str	r2, [r0, #0]
 8014512:	2f02      	cmp	r7, #2
 8014514:	f105 0314 	add.w	r3, r5, #20
 8014518:	d138      	bne.n	801458c <__gethex+0x40a>
 801451a:	f8d8 2000 	ldr.w	r2, [r8]
 801451e:	3a01      	subs	r2, #1
 8014520:	42b2      	cmp	r2, r6
 8014522:	d10a      	bne.n	801453a <__gethex+0x3b8>
 8014524:	1171      	asrs	r1, r6, #5
 8014526:	2201      	movs	r2, #1
 8014528:	f006 061f 	and.w	r6, r6, #31
 801452c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014530:	fa02 f606 	lsl.w	r6, r2, r6
 8014534:	421e      	tst	r6, r3
 8014536:	bf18      	it	ne
 8014538:	4617      	movne	r7, r2
 801453a:	f047 0720 	orr.w	r7, r7, #32
 801453e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014540:	601d      	str	r5, [r3, #0]
 8014542:	9b06      	ldr	r3, [sp, #24]
 8014544:	601c      	str	r4, [r3, #0]
 8014546:	e6a4      	b.n	8014292 <__gethex+0x110>
 8014548:	4299      	cmp	r1, r3
 801454a:	f843 cc04 	str.w	ip, [r3, #-4]
 801454e:	d8d8      	bhi.n	8014502 <__gethex+0x380>
 8014550:	68ab      	ldr	r3, [r5, #8]
 8014552:	4599      	cmp	r9, r3
 8014554:	db12      	blt.n	801457c <__gethex+0x3fa>
 8014556:	6869      	ldr	r1, [r5, #4]
 8014558:	9802      	ldr	r0, [sp, #8]
 801455a:	3101      	adds	r1, #1
 801455c:	f000 f976 	bl	801484c <_Balloc>
 8014560:	692a      	ldr	r2, [r5, #16]
 8014562:	3202      	adds	r2, #2
 8014564:	f105 010c 	add.w	r1, r5, #12
 8014568:	4683      	mov	fp, r0
 801456a:	0092      	lsls	r2, r2, #2
 801456c:	300c      	adds	r0, #12
 801456e:	f7fd f99f 	bl	80118b0 <memcpy>
 8014572:	4629      	mov	r1, r5
 8014574:	9802      	ldr	r0, [sp, #8]
 8014576:	f000 f99d 	bl	80148b4 <_Bfree>
 801457a:	465d      	mov	r5, fp
 801457c:	692b      	ldr	r3, [r5, #16]
 801457e:	1c5a      	adds	r2, r3, #1
 8014580:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014584:	612a      	str	r2, [r5, #16]
 8014586:	2201      	movs	r2, #1
 8014588:	615a      	str	r2, [r3, #20]
 801458a:	e7c2      	b.n	8014512 <__gethex+0x390>
 801458c:	692a      	ldr	r2, [r5, #16]
 801458e:	454a      	cmp	r2, r9
 8014590:	dd0b      	ble.n	80145aa <__gethex+0x428>
 8014592:	2101      	movs	r1, #1
 8014594:	4628      	mov	r0, r5
 8014596:	f7ff fda5 	bl	80140e4 <rshift>
 801459a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801459e:	3401      	adds	r4, #1
 80145a0:	42a3      	cmp	r3, r4
 80145a2:	f6ff aed9 	blt.w	8014358 <__gethex+0x1d6>
 80145a6:	2701      	movs	r7, #1
 80145a8:	e7c7      	b.n	801453a <__gethex+0x3b8>
 80145aa:	f016 061f 	ands.w	r6, r6, #31
 80145ae:	d0fa      	beq.n	80145a6 <__gethex+0x424>
 80145b0:	449a      	add	sl, r3
 80145b2:	f1c6 0620 	rsb	r6, r6, #32
 80145b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80145ba:	f000 fa0b 	bl	80149d4 <__hi0bits>
 80145be:	42b0      	cmp	r0, r6
 80145c0:	dbe7      	blt.n	8014592 <__gethex+0x410>
 80145c2:	e7f0      	b.n	80145a6 <__gethex+0x424>

080145c4 <L_shift>:
 80145c4:	f1c2 0208 	rsb	r2, r2, #8
 80145c8:	0092      	lsls	r2, r2, #2
 80145ca:	b570      	push	{r4, r5, r6, lr}
 80145cc:	f1c2 0620 	rsb	r6, r2, #32
 80145d0:	6843      	ldr	r3, [r0, #4]
 80145d2:	6804      	ldr	r4, [r0, #0]
 80145d4:	fa03 f506 	lsl.w	r5, r3, r6
 80145d8:	432c      	orrs	r4, r5
 80145da:	40d3      	lsrs	r3, r2
 80145dc:	6004      	str	r4, [r0, #0]
 80145de:	f840 3f04 	str.w	r3, [r0, #4]!
 80145e2:	4288      	cmp	r0, r1
 80145e4:	d3f4      	bcc.n	80145d0 <L_shift+0xc>
 80145e6:	bd70      	pop	{r4, r5, r6, pc}

080145e8 <__match>:
 80145e8:	b530      	push	{r4, r5, lr}
 80145ea:	6803      	ldr	r3, [r0, #0]
 80145ec:	3301      	adds	r3, #1
 80145ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145f2:	b914      	cbnz	r4, 80145fa <__match+0x12>
 80145f4:	6003      	str	r3, [r0, #0]
 80145f6:	2001      	movs	r0, #1
 80145f8:	bd30      	pop	{r4, r5, pc}
 80145fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014602:	2d19      	cmp	r5, #25
 8014604:	bf98      	it	ls
 8014606:	3220      	addls	r2, #32
 8014608:	42a2      	cmp	r2, r4
 801460a:	d0f0      	beq.n	80145ee <__match+0x6>
 801460c:	2000      	movs	r0, #0
 801460e:	e7f3      	b.n	80145f8 <__match+0x10>

08014610 <__hexnan>:
 8014610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014614:	680b      	ldr	r3, [r1, #0]
 8014616:	6801      	ldr	r1, [r0, #0]
 8014618:	115f      	asrs	r7, r3, #5
 801461a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801461e:	f013 031f 	ands.w	r3, r3, #31
 8014622:	b087      	sub	sp, #28
 8014624:	bf18      	it	ne
 8014626:	3704      	addne	r7, #4
 8014628:	2500      	movs	r5, #0
 801462a:	1f3e      	subs	r6, r7, #4
 801462c:	4682      	mov	sl, r0
 801462e:	4690      	mov	r8, r2
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	f847 5c04 	str.w	r5, [r7, #-4]
 8014636:	46b1      	mov	r9, r6
 8014638:	4634      	mov	r4, r6
 801463a:	9502      	str	r5, [sp, #8]
 801463c:	46ab      	mov	fp, r5
 801463e:	784a      	ldrb	r2, [r1, #1]
 8014640:	1c4b      	adds	r3, r1, #1
 8014642:	9303      	str	r3, [sp, #12]
 8014644:	b342      	cbz	r2, 8014698 <__hexnan+0x88>
 8014646:	4610      	mov	r0, r2
 8014648:	9105      	str	r1, [sp, #20]
 801464a:	9204      	str	r2, [sp, #16]
 801464c:	f7ff fd84 	bl	8014158 <__hexdig_fun>
 8014650:	2800      	cmp	r0, #0
 8014652:	d143      	bne.n	80146dc <__hexnan+0xcc>
 8014654:	9a04      	ldr	r2, [sp, #16]
 8014656:	9905      	ldr	r1, [sp, #20]
 8014658:	2a20      	cmp	r2, #32
 801465a:	d818      	bhi.n	801468e <__hexnan+0x7e>
 801465c:	9b02      	ldr	r3, [sp, #8]
 801465e:	459b      	cmp	fp, r3
 8014660:	dd13      	ble.n	801468a <__hexnan+0x7a>
 8014662:	454c      	cmp	r4, r9
 8014664:	d206      	bcs.n	8014674 <__hexnan+0x64>
 8014666:	2d07      	cmp	r5, #7
 8014668:	dc04      	bgt.n	8014674 <__hexnan+0x64>
 801466a:	462a      	mov	r2, r5
 801466c:	4649      	mov	r1, r9
 801466e:	4620      	mov	r0, r4
 8014670:	f7ff ffa8 	bl	80145c4 <L_shift>
 8014674:	4544      	cmp	r4, r8
 8014676:	d944      	bls.n	8014702 <__hexnan+0xf2>
 8014678:	2300      	movs	r3, #0
 801467a:	f1a4 0904 	sub.w	r9, r4, #4
 801467e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014682:	f8cd b008 	str.w	fp, [sp, #8]
 8014686:	464c      	mov	r4, r9
 8014688:	461d      	mov	r5, r3
 801468a:	9903      	ldr	r1, [sp, #12]
 801468c:	e7d7      	b.n	801463e <__hexnan+0x2e>
 801468e:	2a29      	cmp	r2, #41	; 0x29
 8014690:	d14a      	bne.n	8014728 <__hexnan+0x118>
 8014692:	3102      	adds	r1, #2
 8014694:	f8ca 1000 	str.w	r1, [sl]
 8014698:	f1bb 0f00 	cmp.w	fp, #0
 801469c:	d044      	beq.n	8014728 <__hexnan+0x118>
 801469e:	454c      	cmp	r4, r9
 80146a0:	d206      	bcs.n	80146b0 <__hexnan+0xa0>
 80146a2:	2d07      	cmp	r5, #7
 80146a4:	dc04      	bgt.n	80146b0 <__hexnan+0xa0>
 80146a6:	462a      	mov	r2, r5
 80146a8:	4649      	mov	r1, r9
 80146aa:	4620      	mov	r0, r4
 80146ac:	f7ff ff8a 	bl	80145c4 <L_shift>
 80146b0:	4544      	cmp	r4, r8
 80146b2:	d928      	bls.n	8014706 <__hexnan+0xf6>
 80146b4:	4643      	mov	r3, r8
 80146b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80146ba:	f843 2b04 	str.w	r2, [r3], #4
 80146be:	42a6      	cmp	r6, r4
 80146c0:	d2f9      	bcs.n	80146b6 <__hexnan+0xa6>
 80146c2:	2200      	movs	r2, #0
 80146c4:	f843 2b04 	str.w	r2, [r3], #4
 80146c8:	429e      	cmp	r6, r3
 80146ca:	d2fb      	bcs.n	80146c4 <__hexnan+0xb4>
 80146cc:	6833      	ldr	r3, [r6, #0]
 80146ce:	b91b      	cbnz	r3, 80146d8 <__hexnan+0xc8>
 80146d0:	4546      	cmp	r6, r8
 80146d2:	d127      	bne.n	8014724 <__hexnan+0x114>
 80146d4:	2301      	movs	r3, #1
 80146d6:	6033      	str	r3, [r6, #0]
 80146d8:	2005      	movs	r0, #5
 80146da:	e026      	b.n	801472a <__hexnan+0x11a>
 80146dc:	3501      	adds	r5, #1
 80146de:	2d08      	cmp	r5, #8
 80146e0:	f10b 0b01 	add.w	fp, fp, #1
 80146e4:	dd06      	ble.n	80146f4 <__hexnan+0xe4>
 80146e6:	4544      	cmp	r4, r8
 80146e8:	d9cf      	bls.n	801468a <__hexnan+0x7a>
 80146ea:	2300      	movs	r3, #0
 80146ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80146f0:	2501      	movs	r5, #1
 80146f2:	3c04      	subs	r4, #4
 80146f4:	6822      	ldr	r2, [r4, #0]
 80146f6:	f000 000f 	and.w	r0, r0, #15
 80146fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80146fe:	6020      	str	r0, [r4, #0]
 8014700:	e7c3      	b.n	801468a <__hexnan+0x7a>
 8014702:	2508      	movs	r5, #8
 8014704:	e7c1      	b.n	801468a <__hexnan+0x7a>
 8014706:	9b01      	ldr	r3, [sp, #4]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d0df      	beq.n	80146cc <__hexnan+0xbc>
 801470c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014710:	f1c3 0320 	rsb	r3, r3, #32
 8014714:	fa22 f303 	lsr.w	r3, r2, r3
 8014718:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801471c:	401a      	ands	r2, r3
 801471e:	f847 2c04 	str.w	r2, [r7, #-4]
 8014722:	e7d3      	b.n	80146cc <__hexnan+0xbc>
 8014724:	3e04      	subs	r6, #4
 8014726:	e7d1      	b.n	80146cc <__hexnan+0xbc>
 8014728:	2004      	movs	r0, #4
 801472a:	b007      	add	sp, #28
 801472c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014730 <__localeconv_l>:
 8014730:	30f0      	adds	r0, #240	; 0xf0
 8014732:	4770      	bx	lr

08014734 <_localeconv_r>:
 8014734:	4b04      	ldr	r3, [pc, #16]	; (8014748 <_localeconv_r+0x14>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	6a18      	ldr	r0, [r3, #32]
 801473a:	4b04      	ldr	r3, [pc, #16]	; (801474c <_localeconv_r+0x18>)
 801473c:	2800      	cmp	r0, #0
 801473e:	bf08      	it	eq
 8014740:	4618      	moveq	r0, r3
 8014742:	30f0      	adds	r0, #240	; 0xf0
 8014744:	4770      	bx	lr
 8014746:	bf00      	nop
 8014748:	200001a4 	.word	0x200001a4
 801474c:	20000208 	.word	0x20000208

08014750 <__swhatbuf_r>:
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	460e      	mov	r6, r1
 8014754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014758:	2900      	cmp	r1, #0
 801475a:	b096      	sub	sp, #88	; 0x58
 801475c:	4614      	mov	r4, r2
 801475e:	461d      	mov	r5, r3
 8014760:	da07      	bge.n	8014772 <__swhatbuf_r+0x22>
 8014762:	2300      	movs	r3, #0
 8014764:	602b      	str	r3, [r5, #0]
 8014766:	89b3      	ldrh	r3, [r6, #12]
 8014768:	061a      	lsls	r2, r3, #24
 801476a:	d410      	bmi.n	801478e <__swhatbuf_r+0x3e>
 801476c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014770:	e00e      	b.n	8014790 <__swhatbuf_r+0x40>
 8014772:	466a      	mov	r2, sp
 8014774:	f001 f882 	bl	801587c <_fstat_r>
 8014778:	2800      	cmp	r0, #0
 801477a:	dbf2      	blt.n	8014762 <__swhatbuf_r+0x12>
 801477c:	9a01      	ldr	r2, [sp, #4]
 801477e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014782:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014786:	425a      	negs	r2, r3
 8014788:	415a      	adcs	r2, r3
 801478a:	602a      	str	r2, [r5, #0]
 801478c:	e7ee      	b.n	801476c <__swhatbuf_r+0x1c>
 801478e:	2340      	movs	r3, #64	; 0x40
 8014790:	2000      	movs	r0, #0
 8014792:	6023      	str	r3, [r4, #0]
 8014794:	b016      	add	sp, #88	; 0x58
 8014796:	bd70      	pop	{r4, r5, r6, pc}

08014798 <__smakebuf_r>:
 8014798:	898b      	ldrh	r3, [r1, #12]
 801479a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801479c:	079d      	lsls	r5, r3, #30
 801479e:	4606      	mov	r6, r0
 80147a0:	460c      	mov	r4, r1
 80147a2:	d507      	bpl.n	80147b4 <__smakebuf_r+0x1c>
 80147a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80147a8:	6023      	str	r3, [r4, #0]
 80147aa:	6123      	str	r3, [r4, #16]
 80147ac:	2301      	movs	r3, #1
 80147ae:	6163      	str	r3, [r4, #20]
 80147b0:	b002      	add	sp, #8
 80147b2:	bd70      	pop	{r4, r5, r6, pc}
 80147b4:	ab01      	add	r3, sp, #4
 80147b6:	466a      	mov	r2, sp
 80147b8:	f7ff ffca 	bl	8014750 <__swhatbuf_r>
 80147bc:	9900      	ldr	r1, [sp, #0]
 80147be:	4605      	mov	r5, r0
 80147c0:	4630      	mov	r0, r6
 80147c2:	f000 fc9f 	bl	8015104 <_malloc_r>
 80147c6:	b948      	cbnz	r0, 80147dc <__smakebuf_r+0x44>
 80147c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147cc:	059a      	lsls	r2, r3, #22
 80147ce:	d4ef      	bmi.n	80147b0 <__smakebuf_r+0x18>
 80147d0:	f023 0303 	bic.w	r3, r3, #3
 80147d4:	f043 0302 	orr.w	r3, r3, #2
 80147d8:	81a3      	strh	r3, [r4, #12]
 80147da:	e7e3      	b.n	80147a4 <__smakebuf_r+0xc>
 80147dc:	4b0d      	ldr	r3, [pc, #52]	; (8014814 <__smakebuf_r+0x7c>)
 80147de:	62b3      	str	r3, [r6, #40]	; 0x28
 80147e0:	89a3      	ldrh	r3, [r4, #12]
 80147e2:	6020      	str	r0, [r4, #0]
 80147e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147e8:	81a3      	strh	r3, [r4, #12]
 80147ea:	9b00      	ldr	r3, [sp, #0]
 80147ec:	6163      	str	r3, [r4, #20]
 80147ee:	9b01      	ldr	r3, [sp, #4]
 80147f0:	6120      	str	r0, [r4, #16]
 80147f2:	b15b      	cbz	r3, 801480c <__smakebuf_r+0x74>
 80147f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147f8:	4630      	mov	r0, r6
 80147fa:	f001 f851 	bl	80158a0 <_isatty_r>
 80147fe:	b128      	cbz	r0, 801480c <__smakebuf_r+0x74>
 8014800:	89a3      	ldrh	r3, [r4, #12]
 8014802:	f023 0303 	bic.w	r3, r3, #3
 8014806:	f043 0301 	orr.w	r3, r3, #1
 801480a:	81a3      	strh	r3, [r4, #12]
 801480c:	89a3      	ldrh	r3, [r4, #12]
 801480e:	431d      	orrs	r5, r3
 8014810:	81a5      	strh	r5, [r4, #12]
 8014812:	e7cd      	b.n	80147b0 <__smakebuf_r+0x18>
 8014814:	08013f99 	.word	0x08013f99

08014818 <malloc>:
 8014818:	4b02      	ldr	r3, [pc, #8]	; (8014824 <malloc+0xc>)
 801481a:	4601      	mov	r1, r0
 801481c:	6818      	ldr	r0, [r3, #0]
 801481e:	f000 bc71 	b.w	8015104 <_malloc_r>
 8014822:	bf00      	nop
 8014824:	200001a4 	.word	0x200001a4

08014828 <__ascii_mbtowc>:
 8014828:	b082      	sub	sp, #8
 801482a:	b901      	cbnz	r1, 801482e <__ascii_mbtowc+0x6>
 801482c:	a901      	add	r1, sp, #4
 801482e:	b142      	cbz	r2, 8014842 <__ascii_mbtowc+0x1a>
 8014830:	b14b      	cbz	r3, 8014846 <__ascii_mbtowc+0x1e>
 8014832:	7813      	ldrb	r3, [r2, #0]
 8014834:	600b      	str	r3, [r1, #0]
 8014836:	7812      	ldrb	r2, [r2, #0]
 8014838:	1c10      	adds	r0, r2, #0
 801483a:	bf18      	it	ne
 801483c:	2001      	movne	r0, #1
 801483e:	b002      	add	sp, #8
 8014840:	4770      	bx	lr
 8014842:	4610      	mov	r0, r2
 8014844:	e7fb      	b.n	801483e <__ascii_mbtowc+0x16>
 8014846:	f06f 0001 	mvn.w	r0, #1
 801484a:	e7f8      	b.n	801483e <__ascii_mbtowc+0x16>

0801484c <_Balloc>:
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014850:	4604      	mov	r4, r0
 8014852:	460e      	mov	r6, r1
 8014854:	b93d      	cbnz	r5, 8014866 <_Balloc+0x1a>
 8014856:	2010      	movs	r0, #16
 8014858:	f7ff ffde 	bl	8014818 <malloc>
 801485c:	6260      	str	r0, [r4, #36]	; 0x24
 801485e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014862:	6005      	str	r5, [r0, #0]
 8014864:	60c5      	str	r5, [r0, #12]
 8014866:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014868:	68eb      	ldr	r3, [r5, #12]
 801486a:	b183      	cbz	r3, 801488e <_Balloc+0x42>
 801486c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014874:	b9b8      	cbnz	r0, 80148a6 <_Balloc+0x5a>
 8014876:	2101      	movs	r1, #1
 8014878:	fa01 f506 	lsl.w	r5, r1, r6
 801487c:	1d6a      	adds	r2, r5, #5
 801487e:	0092      	lsls	r2, r2, #2
 8014880:	4620      	mov	r0, r4
 8014882:	f000 fbe2 	bl	801504a <_calloc_r>
 8014886:	b160      	cbz	r0, 80148a2 <_Balloc+0x56>
 8014888:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801488c:	e00e      	b.n	80148ac <_Balloc+0x60>
 801488e:	2221      	movs	r2, #33	; 0x21
 8014890:	2104      	movs	r1, #4
 8014892:	4620      	mov	r0, r4
 8014894:	f000 fbd9 	bl	801504a <_calloc_r>
 8014898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801489a:	60e8      	str	r0, [r5, #12]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d1e4      	bne.n	801486c <_Balloc+0x20>
 80148a2:	2000      	movs	r0, #0
 80148a4:	bd70      	pop	{r4, r5, r6, pc}
 80148a6:	6802      	ldr	r2, [r0, #0]
 80148a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80148ac:	2300      	movs	r3, #0
 80148ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80148b2:	e7f7      	b.n	80148a4 <_Balloc+0x58>

080148b4 <_Bfree>:
 80148b4:	b570      	push	{r4, r5, r6, lr}
 80148b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80148b8:	4606      	mov	r6, r0
 80148ba:	460d      	mov	r5, r1
 80148bc:	b93c      	cbnz	r4, 80148ce <_Bfree+0x1a>
 80148be:	2010      	movs	r0, #16
 80148c0:	f7ff ffaa 	bl	8014818 <malloc>
 80148c4:	6270      	str	r0, [r6, #36]	; 0x24
 80148c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148ca:	6004      	str	r4, [r0, #0]
 80148cc:	60c4      	str	r4, [r0, #12]
 80148ce:	b13d      	cbz	r5, 80148e0 <_Bfree+0x2c>
 80148d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80148d2:	686a      	ldr	r2, [r5, #4]
 80148d4:	68db      	ldr	r3, [r3, #12]
 80148d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148da:	6029      	str	r1, [r5, #0]
 80148dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80148e0:	bd70      	pop	{r4, r5, r6, pc}

080148e2 <__multadd>:
 80148e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148e6:	690d      	ldr	r5, [r1, #16]
 80148e8:	461f      	mov	r7, r3
 80148ea:	4606      	mov	r6, r0
 80148ec:	460c      	mov	r4, r1
 80148ee:	f101 0c14 	add.w	ip, r1, #20
 80148f2:	2300      	movs	r3, #0
 80148f4:	f8dc 0000 	ldr.w	r0, [ip]
 80148f8:	b281      	uxth	r1, r0
 80148fa:	fb02 7101 	mla	r1, r2, r1, r7
 80148fe:	0c0f      	lsrs	r7, r1, #16
 8014900:	0c00      	lsrs	r0, r0, #16
 8014902:	fb02 7000 	mla	r0, r2, r0, r7
 8014906:	b289      	uxth	r1, r1
 8014908:	3301      	adds	r3, #1
 801490a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801490e:	429d      	cmp	r5, r3
 8014910:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014914:	f84c 1b04 	str.w	r1, [ip], #4
 8014918:	dcec      	bgt.n	80148f4 <__multadd+0x12>
 801491a:	b1d7      	cbz	r7, 8014952 <__multadd+0x70>
 801491c:	68a3      	ldr	r3, [r4, #8]
 801491e:	42ab      	cmp	r3, r5
 8014920:	dc12      	bgt.n	8014948 <__multadd+0x66>
 8014922:	6861      	ldr	r1, [r4, #4]
 8014924:	4630      	mov	r0, r6
 8014926:	3101      	adds	r1, #1
 8014928:	f7ff ff90 	bl	801484c <_Balloc>
 801492c:	6922      	ldr	r2, [r4, #16]
 801492e:	3202      	adds	r2, #2
 8014930:	f104 010c 	add.w	r1, r4, #12
 8014934:	4680      	mov	r8, r0
 8014936:	0092      	lsls	r2, r2, #2
 8014938:	300c      	adds	r0, #12
 801493a:	f7fc ffb9 	bl	80118b0 <memcpy>
 801493e:	4621      	mov	r1, r4
 8014940:	4630      	mov	r0, r6
 8014942:	f7ff ffb7 	bl	80148b4 <_Bfree>
 8014946:	4644      	mov	r4, r8
 8014948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801494c:	3501      	adds	r5, #1
 801494e:	615f      	str	r7, [r3, #20]
 8014950:	6125      	str	r5, [r4, #16]
 8014952:	4620      	mov	r0, r4
 8014954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014958 <__s2b>:
 8014958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801495c:	460c      	mov	r4, r1
 801495e:	4615      	mov	r5, r2
 8014960:	461f      	mov	r7, r3
 8014962:	2209      	movs	r2, #9
 8014964:	3308      	adds	r3, #8
 8014966:	4606      	mov	r6, r0
 8014968:	fb93 f3f2 	sdiv	r3, r3, r2
 801496c:	2100      	movs	r1, #0
 801496e:	2201      	movs	r2, #1
 8014970:	429a      	cmp	r2, r3
 8014972:	db20      	blt.n	80149b6 <__s2b+0x5e>
 8014974:	4630      	mov	r0, r6
 8014976:	f7ff ff69 	bl	801484c <_Balloc>
 801497a:	9b08      	ldr	r3, [sp, #32]
 801497c:	6143      	str	r3, [r0, #20]
 801497e:	2d09      	cmp	r5, #9
 8014980:	f04f 0301 	mov.w	r3, #1
 8014984:	6103      	str	r3, [r0, #16]
 8014986:	dd19      	ble.n	80149bc <__s2b+0x64>
 8014988:	f104 0809 	add.w	r8, r4, #9
 801498c:	46c1      	mov	r9, r8
 801498e:	442c      	add	r4, r5
 8014990:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014994:	4601      	mov	r1, r0
 8014996:	3b30      	subs	r3, #48	; 0x30
 8014998:	220a      	movs	r2, #10
 801499a:	4630      	mov	r0, r6
 801499c:	f7ff ffa1 	bl	80148e2 <__multadd>
 80149a0:	45a1      	cmp	r9, r4
 80149a2:	d1f5      	bne.n	8014990 <__s2b+0x38>
 80149a4:	eb08 0405 	add.w	r4, r8, r5
 80149a8:	3c08      	subs	r4, #8
 80149aa:	1b2d      	subs	r5, r5, r4
 80149ac:	1963      	adds	r3, r4, r5
 80149ae:	42bb      	cmp	r3, r7
 80149b0:	db07      	blt.n	80149c2 <__s2b+0x6a>
 80149b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b6:	0052      	lsls	r2, r2, #1
 80149b8:	3101      	adds	r1, #1
 80149ba:	e7d9      	b.n	8014970 <__s2b+0x18>
 80149bc:	340a      	adds	r4, #10
 80149be:	2509      	movs	r5, #9
 80149c0:	e7f3      	b.n	80149aa <__s2b+0x52>
 80149c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80149c6:	4601      	mov	r1, r0
 80149c8:	3b30      	subs	r3, #48	; 0x30
 80149ca:	220a      	movs	r2, #10
 80149cc:	4630      	mov	r0, r6
 80149ce:	f7ff ff88 	bl	80148e2 <__multadd>
 80149d2:	e7eb      	b.n	80149ac <__s2b+0x54>

080149d4 <__hi0bits>:
 80149d4:	0c02      	lsrs	r2, r0, #16
 80149d6:	0412      	lsls	r2, r2, #16
 80149d8:	4603      	mov	r3, r0
 80149da:	b9b2      	cbnz	r2, 8014a0a <__hi0bits+0x36>
 80149dc:	0403      	lsls	r3, r0, #16
 80149de:	2010      	movs	r0, #16
 80149e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80149e4:	bf04      	itt	eq
 80149e6:	021b      	lsleq	r3, r3, #8
 80149e8:	3008      	addeq	r0, #8
 80149ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80149ee:	bf04      	itt	eq
 80149f0:	011b      	lsleq	r3, r3, #4
 80149f2:	3004      	addeq	r0, #4
 80149f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80149f8:	bf04      	itt	eq
 80149fa:	009b      	lsleq	r3, r3, #2
 80149fc:	3002      	addeq	r0, #2
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	db06      	blt.n	8014a10 <__hi0bits+0x3c>
 8014a02:	005b      	lsls	r3, r3, #1
 8014a04:	d503      	bpl.n	8014a0e <__hi0bits+0x3a>
 8014a06:	3001      	adds	r0, #1
 8014a08:	4770      	bx	lr
 8014a0a:	2000      	movs	r0, #0
 8014a0c:	e7e8      	b.n	80149e0 <__hi0bits+0xc>
 8014a0e:	2020      	movs	r0, #32
 8014a10:	4770      	bx	lr

08014a12 <__lo0bits>:
 8014a12:	6803      	ldr	r3, [r0, #0]
 8014a14:	f013 0207 	ands.w	r2, r3, #7
 8014a18:	4601      	mov	r1, r0
 8014a1a:	d00b      	beq.n	8014a34 <__lo0bits+0x22>
 8014a1c:	07da      	lsls	r2, r3, #31
 8014a1e:	d423      	bmi.n	8014a68 <__lo0bits+0x56>
 8014a20:	0798      	lsls	r0, r3, #30
 8014a22:	bf49      	itett	mi
 8014a24:	085b      	lsrmi	r3, r3, #1
 8014a26:	089b      	lsrpl	r3, r3, #2
 8014a28:	2001      	movmi	r0, #1
 8014a2a:	600b      	strmi	r3, [r1, #0]
 8014a2c:	bf5c      	itt	pl
 8014a2e:	600b      	strpl	r3, [r1, #0]
 8014a30:	2002      	movpl	r0, #2
 8014a32:	4770      	bx	lr
 8014a34:	b298      	uxth	r0, r3
 8014a36:	b9a8      	cbnz	r0, 8014a64 <__lo0bits+0x52>
 8014a38:	0c1b      	lsrs	r3, r3, #16
 8014a3a:	2010      	movs	r0, #16
 8014a3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014a40:	bf04      	itt	eq
 8014a42:	0a1b      	lsreq	r3, r3, #8
 8014a44:	3008      	addeq	r0, #8
 8014a46:	071a      	lsls	r2, r3, #28
 8014a48:	bf04      	itt	eq
 8014a4a:	091b      	lsreq	r3, r3, #4
 8014a4c:	3004      	addeq	r0, #4
 8014a4e:	079a      	lsls	r2, r3, #30
 8014a50:	bf04      	itt	eq
 8014a52:	089b      	lsreq	r3, r3, #2
 8014a54:	3002      	addeq	r0, #2
 8014a56:	07da      	lsls	r2, r3, #31
 8014a58:	d402      	bmi.n	8014a60 <__lo0bits+0x4e>
 8014a5a:	085b      	lsrs	r3, r3, #1
 8014a5c:	d006      	beq.n	8014a6c <__lo0bits+0x5a>
 8014a5e:	3001      	adds	r0, #1
 8014a60:	600b      	str	r3, [r1, #0]
 8014a62:	4770      	bx	lr
 8014a64:	4610      	mov	r0, r2
 8014a66:	e7e9      	b.n	8014a3c <__lo0bits+0x2a>
 8014a68:	2000      	movs	r0, #0
 8014a6a:	4770      	bx	lr
 8014a6c:	2020      	movs	r0, #32
 8014a6e:	4770      	bx	lr

08014a70 <__i2b>:
 8014a70:	b510      	push	{r4, lr}
 8014a72:	460c      	mov	r4, r1
 8014a74:	2101      	movs	r1, #1
 8014a76:	f7ff fee9 	bl	801484c <_Balloc>
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	6144      	str	r4, [r0, #20]
 8014a7e:	6102      	str	r2, [r0, #16]
 8014a80:	bd10      	pop	{r4, pc}

08014a82 <__multiply>:
 8014a82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a86:	4614      	mov	r4, r2
 8014a88:	690a      	ldr	r2, [r1, #16]
 8014a8a:	6923      	ldr	r3, [r4, #16]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	bfb8      	it	lt
 8014a90:	460b      	movlt	r3, r1
 8014a92:	4688      	mov	r8, r1
 8014a94:	bfbc      	itt	lt
 8014a96:	46a0      	movlt	r8, r4
 8014a98:	461c      	movlt	r4, r3
 8014a9a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014a9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014aa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014aa6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014aaa:	eb07 0609 	add.w	r6, r7, r9
 8014aae:	42b3      	cmp	r3, r6
 8014ab0:	bfb8      	it	lt
 8014ab2:	3101      	addlt	r1, #1
 8014ab4:	f7ff feca 	bl	801484c <_Balloc>
 8014ab8:	f100 0514 	add.w	r5, r0, #20
 8014abc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014ac0:	462b      	mov	r3, r5
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	4573      	cmp	r3, lr
 8014ac6:	d316      	bcc.n	8014af6 <__multiply+0x74>
 8014ac8:	f104 0214 	add.w	r2, r4, #20
 8014acc:	f108 0114 	add.w	r1, r8, #20
 8014ad0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014ad4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014ad8:	9300      	str	r3, [sp, #0]
 8014ada:	9b00      	ldr	r3, [sp, #0]
 8014adc:	9201      	str	r2, [sp, #4]
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d80c      	bhi.n	8014afc <__multiply+0x7a>
 8014ae2:	2e00      	cmp	r6, #0
 8014ae4:	dd03      	ble.n	8014aee <__multiply+0x6c>
 8014ae6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d05d      	beq.n	8014baa <__multiply+0x128>
 8014aee:	6106      	str	r6, [r0, #16]
 8014af0:	b003      	add	sp, #12
 8014af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af6:	f843 2b04 	str.w	r2, [r3], #4
 8014afa:	e7e3      	b.n	8014ac4 <__multiply+0x42>
 8014afc:	f8b2 b000 	ldrh.w	fp, [r2]
 8014b00:	f1bb 0f00 	cmp.w	fp, #0
 8014b04:	d023      	beq.n	8014b4e <__multiply+0xcc>
 8014b06:	4689      	mov	r9, r1
 8014b08:	46ac      	mov	ip, r5
 8014b0a:	f04f 0800 	mov.w	r8, #0
 8014b0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8014b12:	f8dc a000 	ldr.w	sl, [ip]
 8014b16:	b2a3      	uxth	r3, r4
 8014b18:	fa1f fa8a 	uxth.w	sl, sl
 8014b1c:	fb0b a303 	mla	r3, fp, r3, sl
 8014b20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014b24:	f8dc 4000 	ldr.w	r4, [ip]
 8014b28:	4443      	add	r3, r8
 8014b2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014b2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8014b32:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014b36:	46e2      	mov	sl, ip
 8014b38:	b29b      	uxth	r3, r3
 8014b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014b3e:	454f      	cmp	r7, r9
 8014b40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014b44:	f84a 3b04 	str.w	r3, [sl], #4
 8014b48:	d82b      	bhi.n	8014ba2 <__multiply+0x120>
 8014b4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8014b4e:	9b01      	ldr	r3, [sp, #4]
 8014b50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014b54:	3204      	adds	r2, #4
 8014b56:	f1ba 0f00 	cmp.w	sl, #0
 8014b5a:	d020      	beq.n	8014b9e <__multiply+0x11c>
 8014b5c:	682b      	ldr	r3, [r5, #0]
 8014b5e:	4689      	mov	r9, r1
 8014b60:	46a8      	mov	r8, r5
 8014b62:	f04f 0b00 	mov.w	fp, #0
 8014b66:	f8b9 c000 	ldrh.w	ip, [r9]
 8014b6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014b6e:	fb0a 440c 	mla	r4, sl, ip, r4
 8014b72:	445c      	add	r4, fp
 8014b74:	46c4      	mov	ip, r8
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014b7c:	f84c 3b04 	str.w	r3, [ip], #4
 8014b80:	f859 3b04 	ldr.w	r3, [r9], #4
 8014b84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014b88:	0c1b      	lsrs	r3, r3, #16
 8014b8a:	fb0a b303 	mla	r3, sl, r3, fp
 8014b8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014b92:	454f      	cmp	r7, r9
 8014b94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014b98:	d805      	bhi.n	8014ba6 <__multiply+0x124>
 8014b9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8014b9e:	3504      	adds	r5, #4
 8014ba0:	e79b      	b.n	8014ada <__multiply+0x58>
 8014ba2:	46d4      	mov	ip, sl
 8014ba4:	e7b3      	b.n	8014b0e <__multiply+0x8c>
 8014ba6:	46e0      	mov	r8, ip
 8014ba8:	e7dd      	b.n	8014b66 <__multiply+0xe4>
 8014baa:	3e01      	subs	r6, #1
 8014bac:	e799      	b.n	8014ae2 <__multiply+0x60>
	...

08014bb0 <__pow5mult>:
 8014bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bb4:	4615      	mov	r5, r2
 8014bb6:	f012 0203 	ands.w	r2, r2, #3
 8014bba:	4606      	mov	r6, r0
 8014bbc:	460f      	mov	r7, r1
 8014bbe:	d007      	beq.n	8014bd0 <__pow5mult+0x20>
 8014bc0:	3a01      	subs	r2, #1
 8014bc2:	4c21      	ldr	r4, [pc, #132]	; (8014c48 <__pow5mult+0x98>)
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014bca:	f7ff fe8a 	bl	80148e2 <__multadd>
 8014bce:	4607      	mov	r7, r0
 8014bd0:	10ad      	asrs	r5, r5, #2
 8014bd2:	d035      	beq.n	8014c40 <__pow5mult+0x90>
 8014bd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014bd6:	b93c      	cbnz	r4, 8014be8 <__pow5mult+0x38>
 8014bd8:	2010      	movs	r0, #16
 8014bda:	f7ff fe1d 	bl	8014818 <malloc>
 8014bde:	6270      	str	r0, [r6, #36]	; 0x24
 8014be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014be4:	6004      	str	r4, [r0, #0]
 8014be6:	60c4      	str	r4, [r0, #12]
 8014be8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014bf0:	b94c      	cbnz	r4, 8014c06 <__pow5mult+0x56>
 8014bf2:	f240 2171 	movw	r1, #625	; 0x271
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	f7ff ff3a 	bl	8014a70 <__i2b>
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c02:	4604      	mov	r4, r0
 8014c04:	6003      	str	r3, [r0, #0]
 8014c06:	f04f 0800 	mov.w	r8, #0
 8014c0a:	07eb      	lsls	r3, r5, #31
 8014c0c:	d50a      	bpl.n	8014c24 <__pow5mult+0x74>
 8014c0e:	4639      	mov	r1, r7
 8014c10:	4622      	mov	r2, r4
 8014c12:	4630      	mov	r0, r6
 8014c14:	f7ff ff35 	bl	8014a82 <__multiply>
 8014c18:	4639      	mov	r1, r7
 8014c1a:	4681      	mov	r9, r0
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	f7ff fe49 	bl	80148b4 <_Bfree>
 8014c22:	464f      	mov	r7, r9
 8014c24:	106d      	asrs	r5, r5, #1
 8014c26:	d00b      	beq.n	8014c40 <__pow5mult+0x90>
 8014c28:	6820      	ldr	r0, [r4, #0]
 8014c2a:	b938      	cbnz	r0, 8014c3c <__pow5mult+0x8c>
 8014c2c:	4622      	mov	r2, r4
 8014c2e:	4621      	mov	r1, r4
 8014c30:	4630      	mov	r0, r6
 8014c32:	f7ff ff26 	bl	8014a82 <__multiply>
 8014c36:	6020      	str	r0, [r4, #0]
 8014c38:	f8c0 8000 	str.w	r8, [r0]
 8014c3c:	4604      	mov	r4, r0
 8014c3e:	e7e4      	b.n	8014c0a <__pow5mult+0x5a>
 8014c40:	4638      	mov	r0, r7
 8014c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c46:	bf00      	nop
 8014c48:	080182f8 	.word	0x080182f8

08014c4c <__lshift>:
 8014c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c50:	460c      	mov	r4, r1
 8014c52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014c56:	6923      	ldr	r3, [r4, #16]
 8014c58:	6849      	ldr	r1, [r1, #4]
 8014c5a:	eb0a 0903 	add.w	r9, sl, r3
 8014c5e:	68a3      	ldr	r3, [r4, #8]
 8014c60:	4607      	mov	r7, r0
 8014c62:	4616      	mov	r6, r2
 8014c64:	f109 0501 	add.w	r5, r9, #1
 8014c68:	42ab      	cmp	r3, r5
 8014c6a:	db32      	blt.n	8014cd2 <__lshift+0x86>
 8014c6c:	4638      	mov	r0, r7
 8014c6e:	f7ff fded 	bl	801484c <_Balloc>
 8014c72:	2300      	movs	r3, #0
 8014c74:	4680      	mov	r8, r0
 8014c76:	f100 0114 	add.w	r1, r0, #20
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	4553      	cmp	r3, sl
 8014c7e:	db2b      	blt.n	8014cd8 <__lshift+0x8c>
 8014c80:	6920      	ldr	r0, [r4, #16]
 8014c82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014c86:	f104 0314 	add.w	r3, r4, #20
 8014c8a:	f016 021f 	ands.w	r2, r6, #31
 8014c8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014c92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014c96:	d025      	beq.n	8014ce4 <__lshift+0x98>
 8014c98:	f1c2 0e20 	rsb	lr, r2, #32
 8014c9c:	2000      	movs	r0, #0
 8014c9e:	681e      	ldr	r6, [r3, #0]
 8014ca0:	468a      	mov	sl, r1
 8014ca2:	4096      	lsls	r6, r2
 8014ca4:	4330      	orrs	r0, r6
 8014ca6:	f84a 0b04 	str.w	r0, [sl], #4
 8014caa:	f853 0b04 	ldr.w	r0, [r3], #4
 8014cae:	459c      	cmp	ip, r3
 8014cb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8014cb4:	d814      	bhi.n	8014ce0 <__lshift+0x94>
 8014cb6:	6048      	str	r0, [r1, #4]
 8014cb8:	b108      	cbz	r0, 8014cbe <__lshift+0x72>
 8014cba:	f109 0502 	add.w	r5, r9, #2
 8014cbe:	3d01      	subs	r5, #1
 8014cc0:	4638      	mov	r0, r7
 8014cc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8014cc6:	4621      	mov	r1, r4
 8014cc8:	f7ff fdf4 	bl	80148b4 <_Bfree>
 8014ccc:	4640      	mov	r0, r8
 8014cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cd2:	3101      	adds	r1, #1
 8014cd4:	005b      	lsls	r3, r3, #1
 8014cd6:	e7c7      	b.n	8014c68 <__lshift+0x1c>
 8014cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014cdc:	3301      	adds	r3, #1
 8014cde:	e7cd      	b.n	8014c7c <__lshift+0x30>
 8014ce0:	4651      	mov	r1, sl
 8014ce2:	e7dc      	b.n	8014c9e <__lshift+0x52>
 8014ce4:	3904      	subs	r1, #4
 8014ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cea:	f841 2f04 	str.w	r2, [r1, #4]!
 8014cee:	459c      	cmp	ip, r3
 8014cf0:	d8f9      	bhi.n	8014ce6 <__lshift+0x9a>
 8014cf2:	e7e4      	b.n	8014cbe <__lshift+0x72>

08014cf4 <__mcmp>:
 8014cf4:	6903      	ldr	r3, [r0, #16]
 8014cf6:	690a      	ldr	r2, [r1, #16]
 8014cf8:	1a9b      	subs	r3, r3, r2
 8014cfa:	b530      	push	{r4, r5, lr}
 8014cfc:	d10c      	bne.n	8014d18 <__mcmp+0x24>
 8014cfe:	0092      	lsls	r2, r2, #2
 8014d00:	3014      	adds	r0, #20
 8014d02:	3114      	adds	r1, #20
 8014d04:	1884      	adds	r4, r0, r2
 8014d06:	4411      	add	r1, r2
 8014d08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014d0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d10:	4295      	cmp	r5, r2
 8014d12:	d003      	beq.n	8014d1c <__mcmp+0x28>
 8014d14:	d305      	bcc.n	8014d22 <__mcmp+0x2e>
 8014d16:	2301      	movs	r3, #1
 8014d18:	4618      	mov	r0, r3
 8014d1a:	bd30      	pop	{r4, r5, pc}
 8014d1c:	42a0      	cmp	r0, r4
 8014d1e:	d3f3      	bcc.n	8014d08 <__mcmp+0x14>
 8014d20:	e7fa      	b.n	8014d18 <__mcmp+0x24>
 8014d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d26:	e7f7      	b.n	8014d18 <__mcmp+0x24>

08014d28 <__mdiff>:
 8014d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d2c:	460d      	mov	r5, r1
 8014d2e:	4607      	mov	r7, r0
 8014d30:	4611      	mov	r1, r2
 8014d32:	4628      	mov	r0, r5
 8014d34:	4614      	mov	r4, r2
 8014d36:	f7ff ffdd 	bl	8014cf4 <__mcmp>
 8014d3a:	1e06      	subs	r6, r0, #0
 8014d3c:	d108      	bne.n	8014d50 <__mdiff+0x28>
 8014d3e:	4631      	mov	r1, r6
 8014d40:	4638      	mov	r0, r7
 8014d42:	f7ff fd83 	bl	801484c <_Balloc>
 8014d46:	2301      	movs	r3, #1
 8014d48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d50:	bfa4      	itt	ge
 8014d52:	4623      	movge	r3, r4
 8014d54:	462c      	movge	r4, r5
 8014d56:	4638      	mov	r0, r7
 8014d58:	6861      	ldr	r1, [r4, #4]
 8014d5a:	bfa6      	itte	ge
 8014d5c:	461d      	movge	r5, r3
 8014d5e:	2600      	movge	r6, #0
 8014d60:	2601      	movlt	r6, #1
 8014d62:	f7ff fd73 	bl	801484c <_Balloc>
 8014d66:	692b      	ldr	r3, [r5, #16]
 8014d68:	60c6      	str	r6, [r0, #12]
 8014d6a:	6926      	ldr	r6, [r4, #16]
 8014d6c:	f105 0914 	add.w	r9, r5, #20
 8014d70:	f104 0214 	add.w	r2, r4, #20
 8014d74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014d78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014d7c:	f100 0514 	add.w	r5, r0, #20
 8014d80:	f04f 0e00 	mov.w	lr, #0
 8014d84:	f852 ab04 	ldr.w	sl, [r2], #4
 8014d88:	f859 4b04 	ldr.w	r4, [r9], #4
 8014d8c:	fa1e f18a 	uxtah	r1, lr, sl
 8014d90:	b2a3      	uxth	r3, r4
 8014d92:	1ac9      	subs	r1, r1, r3
 8014d94:	0c23      	lsrs	r3, r4, #16
 8014d96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014d9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014d9e:	b289      	uxth	r1, r1
 8014da0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014da4:	45c8      	cmp	r8, r9
 8014da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014daa:	4694      	mov	ip, r2
 8014dac:	f845 3b04 	str.w	r3, [r5], #4
 8014db0:	d8e8      	bhi.n	8014d84 <__mdiff+0x5c>
 8014db2:	45bc      	cmp	ip, r7
 8014db4:	d304      	bcc.n	8014dc0 <__mdiff+0x98>
 8014db6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014dba:	b183      	cbz	r3, 8014dde <__mdiff+0xb6>
 8014dbc:	6106      	str	r6, [r0, #16]
 8014dbe:	e7c5      	b.n	8014d4c <__mdiff+0x24>
 8014dc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014dc4:	fa1e f381 	uxtah	r3, lr, r1
 8014dc8:	141a      	asrs	r2, r3, #16
 8014dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014dd8:	f845 3b04 	str.w	r3, [r5], #4
 8014ddc:	e7e9      	b.n	8014db2 <__mdiff+0x8a>
 8014dde:	3e01      	subs	r6, #1
 8014de0:	e7e9      	b.n	8014db6 <__mdiff+0x8e>
	...

08014de4 <__ulp>:
 8014de4:	4b12      	ldr	r3, [pc, #72]	; (8014e30 <__ulp+0x4c>)
 8014de6:	ee10 2a90 	vmov	r2, s1
 8014dea:	401a      	ands	r2, r3
 8014dec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	dd04      	ble.n	8014dfe <__ulp+0x1a>
 8014df4:	2000      	movs	r0, #0
 8014df6:	4619      	mov	r1, r3
 8014df8:	ec41 0b10 	vmov	d0, r0, r1
 8014dfc:	4770      	bx	lr
 8014dfe:	425b      	negs	r3, r3
 8014e00:	151b      	asrs	r3, r3, #20
 8014e02:	2b13      	cmp	r3, #19
 8014e04:	f04f 0000 	mov.w	r0, #0
 8014e08:	f04f 0100 	mov.w	r1, #0
 8014e0c:	dc04      	bgt.n	8014e18 <__ulp+0x34>
 8014e0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014e12:	fa42 f103 	asr.w	r1, r2, r3
 8014e16:	e7ef      	b.n	8014df8 <__ulp+0x14>
 8014e18:	3b14      	subs	r3, #20
 8014e1a:	2b1e      	cmp	r3, #30
 8014e1c:	f04f 0201 	mov.w	r2, #1
 8014e20:	bfda      	itte	le
 8014e22:	f1c3 031f 	rsble	r3, r3, #31
 8014e26:	fa02 f303 	lslle.w	r3, r2, r3
 8014e2a:	4613      	movgt	r3, r2
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	e7e3      	b.n	8014df8 <__ulp+0x14>
 8014e30:	7ff00000 	.word	0x7ff00000

08014e34 <__b2d>:
 8014e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e36:	6905      	ldr	r5, [r0, #16]
 8014e38:	f100 0714 	add.w	r7, r0, #20
 8014e3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014e40:	1f2e      	subs	r6, r5, #4
 8014e42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014e46:	4620      	mov	r0, r4
 8014e48:	f7ff fdc4 	bl	80149d4 <__hi0bits>
 8014e4c:	f1c0 0320 	rsb	r3, r0, #32
 8014e50:	280a      	cmp	r0, #10
 8014e52:	600b      	str	r3, [r1, #0]
 8014e54:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014ecc <__b2d+0x98>
 8014e58:	dc14      	bgt.n	8014e84 <__b2d+0x50>
 8014e5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8014e5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8014e62:	42b7      	cmp	r7, r6
 8014e64:	ea41 030c 	orr.w	r3, r1, ip
 8014e68:	bf34      	ite	cc
 8014e6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014e6e:	2100      	movcs	r1, #0
 8014e70:	3015      	adds	r0, #21
 8014e72:	fa04 f000 	lsl.w	r0, r4, r0
 8014e76:	fa21 f10e 	lsr.w	r1, r1, lr
 8014e7a:	ea40 0201 	orr.w	r2, r0, r1
 8014e7e:	ec43 2b10 	vmov	d0, r2, r3
 8014e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e84:	42b7      	cmp	r7, r6
 8014e86:	bf3a      	itte	cc
 8014e88:	f1a5 0608 	subcc.w	r6, r5, #8
 8014e8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014e90:	2100      	movcs	r1, #0
 8014e92:	380b      	subs	r0, #11
 8014e94:	d015      	beq.n	8014ec2 <__b2d+0x8e>
 8014e96:	4084      	lsls	r4, r0
 8014e98:	f1c0 0520 	rsb	r5, r0, #32
 8014e9c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8014ea0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014ea4:	42be      	cmp	r6, r7
 8014ea6:	fa21 fc05 	lsr.w	ip, r1, r5
 8014eaa:	ea44 030c 	orr.w	r3, r4, ip
 8014eae:	bf8c      	ite	hi
 8014eb0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014eb4:	2400      	movls	r4, #0
 8014eb6:	fa01 f000 	lsl.w	r0, r1, r0
 8014eba:	40ec      	lsrs	r4, r5
 8014ebc:	ea40 0204 	orr.w	r2, r0, r4
 8014ec0:	e7dd      	b.n	8014e7e <__b2d+0x4a>
 8014ec2:	ea44 030c 	orr.w	r3, r4, ip
 8014ec6:	460a      	mov	r2, r1
 8014ec8:	e7d9      	b.n	8014e7e <__b2d+0x4a>
 8014eca:	bf00      	nop
 8014ecc:	3ff00000 	.word	0x3ff00000

08014ed0 <__d2b>:
 8014ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ed4:	460e      	mov	r6, r1
 8014ed6:	2101      	movs	r1, #1
 8014ed8:	ec59 8b10 	vmov	r8, r9, d0
 8014edc:	4615      	mov	r5, r2
 8014ede:	f7ff fcb5 	bl	801484c <_Balloc>
 8014ee2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014ee6:	4607      	mov	r7, r0
 8014ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014eec:	bb34      	cbnz	r4, 8014f3c <__d2b+0x6c>
 8014eee:	9301      	str	r3, [sp, #4]
 8014ef0:	f1b8 0300 	subs.w	r3, r8, #0
 8014ef4:	d027      	beq.n	8014f46 <__d2b+0x76>
 8014ef6:	a802      	add	r0, sp, #8
 8014ef8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014efc:	f7ff fd89 	bl	8014a12 <__lo0bits>
 8014f00:	9900      	ldr	r1, [sp, #0]
 8014f02:	b1f0      	cbz	r0, 8014f42 <__d2b+0x72>
 8014f04:	9a01      	ldr	r2, [sp, #4]
 8014f06:	f1c0 0320 	rsb	r3, r0, #32
 8014f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8014f0e:	430b      	orrs	r3, r1
 8014f10:	40c2      	lsrs	r2, r0
 8014f12:	617b      	str	r3, [r7, #20]
 8014f14:	9201      	str	r2, [sp, #4]
 8014f16:	9b01      	ldr	r3, [sp, #4]
 8014f18:	61bb      	str	r3, [r7, #24]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	bf14      	ite	ne
 8014f1e:	2102      	movne	r1, #2
 8014f20:	2101      	moveq	r1, #1
 8014f22:	6139      	str	r1, [r7, #16]
 8014f24:	b1c4      	cbz	r4, 8014f58 <__d2b+0x88>
 8014f26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014f2a:	4404      	add	r4, r0
 8014f2c:	6034      	str	r4, [r6, #0]
 8014f2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014f32:	6028      	str	r0, [r5, #0]
 8014f34:	4638      	mov	r0, r7
 8014f36:	b003      	add	sp, #12
 8014f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f40:	e7d5      	b.n	8014eee <__d2b+0x1e>
 8014f42:	6179      	str	r1, [r7, #20]
 8014f44:	e7e7      	b.n	8014f16 <__d2b+0x46>
 8014f46:	a801      	add	r0, sp, #4
 8014f48:	f7ff fd63 	bl	8014a12 <__lo0bits>
 8014f4c:	9b01      	ldr	r3, [sp, #4]
 8014f4e:	617b      	str	r3, [r7, #20]
 8014f50:	2101      	movs	r1, #1
 8014f52:	6139      	str	r1, [r7, #16]
 8014f54:	3020      	adds	r0, #32
 8014f56:	e7e5      	b.n	8014f24 <__d2b+0x54>
 8014f58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014f5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014f60:	6030      	str	r0, [r6, #0]
 8014f62:	6918      	ldr	r0, [r3, #16]
 8014f64:	f7ff fd36 	bl	80149d4 <__hi0bits>
 8014f68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014f6c:	e7e1      	b.n	8014f32 <__d2b+0x62>

08014f6e <__ratio>:
 8014f6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f72:	4688      	mov	r8, r1
 8014f74:	4669      	mov	r1, sp
 8014f76:	4681      	mov	r9, r0
 8014f78:	f7ff ff5c 	bl	8014e34 <__b2d>
 8014f7c:	a901      	add	r1, sp, #4
 8014f7e:	4640      	mov	r0, r8
 8014f80:	ec57 6b10 	vmov	r6, r7, d0
 8014f84:	f7ff ff56 	bl	8014e34 <__b2d>
 8014f88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014f90:	eba3 0c02 	sub.w	ip, r3, r2
 8014f94:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014f98:	1a9b      	subs	r3, r3, r2
 8014f9a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014f9e:	ec5b ab10 	vmov	sl, fp, d0
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	bfce      	itee	gt
 8014fa6:	463a      	movgt	r2, r7
 8014fa8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014fac:	465a      	movle	r2, fp
 8014fae:	4659      	mov	r1, fp
 8014fb0:	463d      	mov	r5, r7
 8014fb2:	bfd4      	ite	le
 8014fb4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8014fb8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8014fbc:	4630      	mov	r0, r6
 8014fbe:	ee10 2a10 	vmov	r2, s0
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	4629      	mov	r1, r5
 8014fc6:	f7eb fc41 	bl	800084c <__aeabi_ddiv>
 8014fca:	ec41 0b10 	vmov	d0, r0, r1
 8014fce:	b003      	add	sp, #12
 8014fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014fd4 <__copybits>:
 8014fd4:	3901      	subs	r1, #1
 8014fd6:	b510      	push	{r4, lr}
 8014fd8:	1149      	asrs	r1, r1, #5
 8014fda:	6914      	ldr	r4, [r2, #16]
 8014fdc:	3101      	adds	r1, #1
 8014fde:	f102 0314 	add.w	r3, r2, #20
 8014fe2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014fe6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014fea:	42a3      	cmp	r3, r4
 8014fec:	4602      	mov	r2, r0
 8014fee:	d303      	bcc.n	8014ff8 <__copybits+0x24>
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	428a      	cmp	r2, r1
 8014ff4:	d305      	bcc.n	8015002 <__copybits+0x2e>
 8014ff6:	bd10      	pop	{r4, pc}
 8014ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ffc:	f840 2b04 	str.w	r2, [r0], #4
 8015000:	e7f3      	b.n	8014fea <__copybits+0x16>
 8015002:	f842 3b04 	str.w	r3, [r2], #4
 8015006:	e7f4      	b.n	8014ff2 <__copybits+0x1e>

08015008 <__any_on>:
 8015008:	f100 0214 	add.w	r2, r0, #20
 801500c:	6900      	ldr	r0, [r0, #16]
 801500e:	114b      	asrs	r3, r1, #5
 8015010:	4298      	cmp	r0, r3
 8015012:	b510      	push	{r4, lr}
 8015014:	db11      	blt.n	801503a <__any_on+0x32>
 8015016:	dd0a      	ble.n	801502e <__any_on+0x26>
 8015018:	f011 011f 	ands.w	r1, r1, #31
 801501c:	d007      	beq.n	801502e <__any_on+0x26>
 801501e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015022:	fa24 f001 	lsr.w	r0, r4, r1
 8015026:	fa00 f101 	lsl.w	r1, r0, r1
 801502a:	428c      	cmp	r4, r1
 801502c:	d10b      	bne.n	8015046 <__any_on+0x3e>
 801502e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015032:	4293      	cmp	r3, r2
 8015034:	d803      	bhi.n	801503e <__any_on+0x36>
 8015036:	2000      	movs	r0, #0
 8015038:	bd10      	pop	{r4, pc}
 801503a:	4603      	mov	r3, r0
 801503c:	e7f7      	b.n	801502e <__any_on+0x26>
 801503e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015042:	2900      	cmp	r1, #0
 8015044:	d0f5      	beq.n	8015032 <__any_on+0x2a>
 8015046:	2001      	movs	r0, #1
 8015048:	e7f6      	b.n	8015038 <__any_on+0x30>

0801504a <_calloc_r>:
 801504a:	b538      	push	{r3, r4, r5, lr}
 801504c:	fb02 f401 	mul.w	r4, r2, r1
 8015050:	4621      	mov	r1, r4
 8015052:	f000 f857 	bl	8015104 <_malloc_r>
 8015056:	4605      	mov	r5, r0
 8015058:	b118      	cbz	r0, 8015062 <_calloc_r+0x18>
 801505a:	4622      	mov	r2, r4
 801505c:	2100      	movs	r1, #0
 801505e:	f7fc fc32 	bl	80118c6 <memset>
 8015062:	4628      	mov	r0, r5
 8015064:	bd38      	pop	{r3, r4, r5, pc}
	...

08015068 <_free_r>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	4605      	mov	r5, r0
 801506c:	2900      	cmp	r1, #0
 801506e:	d045      	beq.n	80150fc <_free_r+0x94>
 8015070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015074:	1f0c      	subs	r4, r1, #4
 8015076:	2b00      	cmp	r3, #0
 8015078:	bfb8      	it	lt
 801507a:	18e4      	addlt	r4, r4, r3
 801507c:	f000 fc4b 	bl	8015916 <__malloc_lock>
 8015080:	4a1f      	ldr	r2, [pc, #124]	; (8015100 <_free_r+0x98>)
 8015082:	6813      	ldr	r3, [r2, #0]
 8015084:	4610      	mov	r0, r2
 8015086:	b933      	cbnz	r3, 8015096 <_free_r+0x2e>
 8015088:	6063      	str	r3, [r4, #4]
 801508a:	6014      	str	r4, [r2, #0]
 801508c:	4628      	mov	r0, r5
 801508e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015092:	f000 bc41 	b.w	8015918 <__malloc_unlock>
 8015096:	42a3      	cmp	r3, r4
 8015098:	d90c      	bls.n	80150b4 <_free_r+0x4c>
 801509a:	6821      	ldr	r1, [r4, #0]
 801509c:	1862      	adds	r2, r4, r1
 801509e:	4293      	cmp	r3, r2
 80150a0:	bf04      	itt	eq
 80150a2:	681a      	ldreq	r2, [r3, #0]
 80150a4:	685b      	ldreq	r3, [r3, #4]
 80150a6:	6063      	str	r3, [r4, #4]
 80150a8:	bf04      	itt	eq
 80150aa:	1852      	addeq	r2, r2, r1
 80150ac:	6022      	streq	r2, [r4, #0]
 80150ae:	6004      	str	r4, [r0, #0]
 80150b0:	e7ec      	b.n	801508c <_free_r+0x24>
 80150b2:	4613      	mov	r3, r2
 80150b4:	685a      	ldr	r2, [r3, #4]
 80150b6:	b10a      	cbz	r2, 80150bc <_free_r+0x54>
 80150b8:	42a2      	cmp	r2, r4
 80150ba:	d9fa      	bls.n	80150b2 <_free_r+0x4a>
 80150bc:	6819      	ldr	r1, [r3, #0]
 80150be:	1858      	adds	r0, r3, r1
 80150c0:	42a0      	cmp	r0, r4
 80150c2:	d10b      	bne.n	80150dc <_free_r+0x74>
 80150c4:	6820      	ldr	r0, [r4, #0]
 80150c6:	4401      	add	r1, r0
 80150c8:	1858      	adds	r0, r3, r1
 80150ca:	4282      	cmp	r2, r0
 80150cc:	6019      	str	r1, [r3, #0]
 80150ce:	d1dd      	bne.n	801508c <_free_r+0x24>
 80150d0:	6810      	ldr	r0, [r2, #0]
 80150d2:	6852      	ldr	r2, [r2, #4]
 80150d4:	605a      	str	r2, [r3, #4]
 80150d6:	4401      	add	r1, r0
 80150d8:	6019      	str	r1, [r3, #0]
 80150da:	e7d7      	b.n	801508c <_free_r+0x24>
 80150dc:	d902      	bls.n	80150e4 <_free_r+0x7c>
 80150de:	230c      	movs	r3, #12
 80150e0:	602b      	str	r3, [r5, #0]
 80150e2:	e7d3      	b.n	801508c <_free_r+0x24>
 80150e4:	6820      	ldr	r0, [r4, #0]
 80150e6:	1821      	adds	r1, r4, r0
 80150e8:	428a      	cmp	r2, r1
 80150ea:	bf04      	itt	eq
 80150ec:	6811      	ldreq	r1, [r2, #0]
 80150ee:	6852      	ldreq	r2, [r2, #4]
 80150f0:	6062      	str	r2, [r4, #4]
 80150f2:	bf04      	itt	eq
 80150f4:	1809      	addeq	r1, r1, r0
 80150f6:	6021      	streq	r1, [r4, #0]
 80150f8:	605c      	str	r4, [r3, #4]
 80150fa:	e7c7      	b.n	801508c <_free_r+0x24>
 80150fc:	bd38      	pop	{r3, r4, r5, pc}
 80150fe:	bf00      	nop
 8015100:	200008e0 	.word	0x200008e0

08015104 <_malloc_r>:
 8015104:	b570      	push	{r4, r5, r6, lr}
 8015106:	1ccd      	adds	r5, r1, #3
 8015108:	f025 0503 	bic.w	r5, r5, #3
 801510c:	3508      	adds	r5, #8
 801510e:	2d0c      	cmp	r5, #12
 8015110:	bf38      	it	cc
 8015112:	250c      	movcc	r5, #12
 8015114:	2d00      	cmp	r5, #0
 8015116:	4606      	mov	r6, r0
 8015118:	db01      	blt.n	801511e <_malloc_r+0x1a>
 801511a:	42a9      	cmp	r1, r5
 801511c:	d903      	bls.n	8015126 <_malloc_r+0x22>
 801511e:	230c      	movs	r3, #12
 8015120:	6033      	str	r3, [r6, #0]
 8015122:	2000      	movs	r0, #0
 8015124:	bd70      	pop	{r4, r5, r6, pc}
 8015126:	f000 fbf6 	bl	8015916 <__malloc_lock>
 801512a:	4a21      	ldr	r2, [pc, #132]	; (80151b0 <_malloc_r+0xac>)
 801512c:	6814      	ldr	r4, [r2, #0]
 801512e:	4621      	mov	r1, r4
 8015130:	b991      	cbnz	r1, 8015158 <_malloc_r+0x54>
 8015132:	4c20      	ldr	r4, [pc, #128]	; (80151b4 <_malloc_r+0xb0>)
 8015134:	6823      	ldr	r3, [r4, #0]
 8015136:	b91b      	cbnz	r3, 8015140 <_malloc_r+0x3c>
 8015138:	4630      	mov	r0, r6
 801513a:	f000 fb05 	bl	8015748 <_sbrk_r>
 801513e:	6020      	str	r0, [r4, #0]
 8015140:	4629      	mov	r1, r5
 8015142:	4630      	mov	r0, r6
 8015144:	f000 fb00 	bl	8015748 <_sbrk_r>
 8015148:	1c43      	adds	r3, r0, #1
 801514a:	d124      	bne.n	8015196 <_malloc_r+0x92>
 801514c:	230c      	movs	r3, #12
 801514e:	6033      	str	r3, [r6, #0]
 8015150:	4630      	mov	r0, r6
 8015152:	f000 fbe1 	bl	8015918 <__malloc_unlock>
 8015156:	e7e4      	b.n	8015122 <_malloc_r+0x1e>
 8015158:	680b      	ldr	r3, [r1, #0]
 801515a:	1b5b      	subs	r3, r3, r5
 801515c:	d418      	bmi.n	8015190 <_malloc_r+0x8c>
 801515e:	2b0b      	cmp	r3, #11
 8015160:	d90f      	bls.n	8015182 <_malloc_r+0x7e>
 8015162:	600b      	str	r3, [r1, #0]
 8015164:	50cd      	str	r5, [r1, r3]
 8015166:	18cc      	adds	r4, r1, r3
 8015168:	4630      	mov	r0, r6
 801516a:	f000 fbd5 	bl	8015918 <__malloc_unlock>
 801516e:	f104 000b 	add.w	r0, r4, #11
 8015172:	1d23      	adds	r3, r4, #4
 8015174:	f020 0007 	bic.w	r0, r0, #7
 8015178:	1ac3      	subs	r3, r0, r3
 801517a:	d0d3      	beq.n	8015124 <_malloc_r+0x20>
 801517c:	425a      	negs	r2, r3
 801517e:	50e2      	str	r2, [r4, r3]
 8015180:	e7d0      	b.n	8015124 <_malloc_r+0x20>
 8015182:	428c      	cmp	r4, r1
 8015184:	684b      	ldr	r3, [r1, #4]
 8015186:	bf16      	itet	ne
 8015188:	6063      	strne	r3, [r4, #4]
 801518a:	6013      	streq	r3, [r2, #0]
 801518c:	460c      	movne	r4, r1
 801518e:	e7eb      	b.n	8015168 <_malloc_r+0x64>
 8015190:	460c      	mov	r4, r1
 8015192:	6849      	ldr	r1, [r1, #4]
 8015194:	e7cc      	b.n	8015130 <_malloc_r+0x2c>
 8015196:	1cc4      	adds	r4, r0, #3
 8015198:	f024 0403 	bic.w	r4, r4, #3
 801519c:	42a0      	cmp	r0, r4
 801519e:	d005      	beq.n	80151ac <_malloc_r+0xa8>
 80151a0:	1a21      	subs	r1, r4, r0
 80151a2:	4630      	mov	r0, r6
 80151a4:	f000 fad0 	bl	8015748 <_sbrk_r>
 80151a8:	3001      	adds	r0, #1
 80151aa:	d0cf      	beq.n	801514c <_malloc_r+0x48>
 80151ac:	6025      	str	r5, [r4, #0]
 80151ae:	e7db      	b.n	8015168 <_malloc_r+0x64>
 80151b0:	200008e0 	.word	0x200008e0
 80151b4:	200008e4 	.word	0x200008e4

080151b8 <__ssputs_r>:
 80151b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151bc:	688e      	ldr	r6, [r1, #8]
 80151be:	429e      	cmp	r6, r3
 80151c0:	4682      	mov	sl, r0
 80151c2:	460c      	mov	r4, r1
 80151c4:	4690      	mov	r8, r2
 80151c6:	4699      	mov	r9, r3
 80151c8:	d837      	bhi.n	801523a <__ssputs_r+0x82>
 80151ca:	898a      	ldrh	r2, [r1, #12]
 80151cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80151d0:	d031      	beq.n	8015236 <__ssputs_r+0x7e>
 80151d2:	6825      	ldr	r5, [r4, #0]
 80151d4:	6909      	ldr	r1, [r1, #16]
 80151d6:	1a6f      	subs	r7, r5, r1
 80151d8:	6965      	ldr	r5, [r4, #20]
 80151da:	2302      	movs	r3, #2
 80151dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80151e4:	f109 0301 	add.w	r3, r9, #1
 80151e8:	443b      	add	r3, r7
 80151ea:	429d      	cmp	r5, r3
 80151ec:	bf38      	it	cc
 80151ee:	461d      	movcc	r5, r3
 80151f0:	0553      	lsls	r3, r2, #21
 80151f2:	d530      	bpl.n	8015256 <__ssputs_r+0x9e>
 80151f4:	4629      	mov	r1, r5
 80151f6:	f7ff ff85 	bl	8015104 <_malloc_r>
 80151fa:	4606      	mov	r6, r0
 80151fc:	b950      	cbnz	r0, 8015214 <__ssputs_r+0x5c>
 80151fe:	230c      	movs	r3, #12
 8015200:	f8ca 3000 	str.w	r3, [sl]
 8015204:	89a3      	ldrh	r3, [r4, #12]
 8015206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801520a:	81a3      	strh	r3, [r4, #12]
 801520c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015214:	463a      	mov	r2, r7
 8015216:	6921      	ldr	r1, [r4, #16]
 8015218:	f7fc fb4a 	bl	80118b0 <memcpy>
 801521c:	89a3      	ldrh	r3, [r4, #12]
 801521e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015226:	81a3      	strh	r3, [r4, #12]
 8015228:	6126      	str	r6, [r4, #16]
 801522a:	6165      	str	r5, [r4, #20]
 801522c:	443e      	add	r6, r7
 801522e:	1bed      	subs	r5, r5, r7
 8015230:	6026      	str	r6, [r4, #0]
 8015232:	60a5      	str	r5, [r4, #8]
 8015234:	464e      	mov	r6, r9
 8015236:	454e      	cmp	r6, r9
 8015238:	d900      	bls.n	801523c <__ssputs_r+0x84>
 801523a:	464e      	mov	r6, r9
 801523c:	4632      	mov	r2, r6
 801523e:	4641      	mov	r1, r8
 8015240:	6820      	ldr	r0, [r4, #0]
 8015242:	f000 fb4f 	bl	80158e4 <memmove>
 8015246:	68a3      	ldr	r3, [r4, #8]
 8015248:	1b9b      	subs	r3, r3, r6
 801524a:	60a3      	str	r3, [r4, #8]
 801524c:	6823      	ldr	r3, [r4, #0]
 801524e:	441e      	add	r6, r3
 8015250:	6026      	str	r6, [r4, #0]
 8015252:	2000      	movs	r0, #0
 8015254:	e7dc      	b.n	8015210 <__ssputs_r+0x58>
 8015256:	462a      	mov	r2, r5
 8015258:	f000 fb5f 	bl	801591a <_realloc_r>
 801525c:	4606      	mov	r6, r0
 801525e:	2800      	cmp	r0, #0
 8015260:	d1e2      	bne.n	8015228 <__ssputs_r+0x70>
 8015262:	6921      	ldr	r1, [r4, #16]
 8015264:	4650      	mov	r0, sl
 8015266:	f7ff feff 	bl	8015068 <_free_r>
 801526a:	e7c8      	b.n	80151fe <__ssputs_r+0x46>

0801526c <_svfiprintf_r>:
 801526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015270:	461d      	mov	r5, r3
 8015272:	898b      	ldrh	r3, [r1, #12]
 8015274:	061f      	lsls	r7, r3, #24
 8015276:	b09d      	sub	sp, #116	; 0x74
 8015278:	4680      	mov	r8, r0
 801527a:	460c      	mov	r4, r1
 801527c:	4616      	mov	r6, r2
 801527e:	d50f      	bpl.n	80152a0 <_svfiprintf_r+0x34>
 8015280:	690b      	ldr	r3, [r1, #16]
 8015282:	b96b      	cbnz	r3, 80152a0 <_svfiprintf_r+0x34>
 8015284:	2140      	movs	r1, #64	; 0x40
 8015286:	f7ff ff3d 	bl	8015104 <_malloc_r>
 801528a:	6020      	str	r0, [r4, #0]
 801528c:	6120      	str	r0, [r4, #16]
 801528e:	b928      	cbnz	r0, 801529c <_svfiprintf_r+0x30>
 8015290:	230c      	movs	r3, #12
 8015292:	f8c8 3000 	str.w	r3, [r8]
 8015296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801529a:	e0c8      	b.n	801542e <_svfiprintf_r+0x1c2>
 801529c:	2340      	movs	r3, #64	; 0x40
 801529e:	6163      	str	r3, [r4, #20]
 80152a0:	2300      	movs	r3, #0
 80152a2:	9309      	str	r3, [sp, #36]	; 0x24
 80152a4:	2320      	movs	r3, #32
 80152a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152aa:	2330      	movs	r3, #48	; 0x30
 80152ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80152b0:	9503      	str	r5, [sp, #12]
 80152b2:	f04f 0b01 	mov.w	fp, #1
 80152b6:	4637      	mov	r7, r6
 80152b8:	463d      	mov	r5, r7
 80152ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80152be:	b10b      	cbz	r3, 80152c4 <_svfiprintf_r+0x58>
 80152c0:	2b25      	cmp	r3, #37	; 0x25
 80152c2:	d13e      	bne.n	8015342 <_svfiprintf_r+0xd6>
 80152c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80152c8:	d00b      	beq.n	80152e2 <_svfiprintf_r+0x76>
 80152ca:	4653      	mov	r3, sl
 80152cc:	4632      	mov	r2, r6
 80152ce:	4621      	mov	r1, r4
 80152d0:	4640      	mov	r0, r8
 80152d2:	f7ff ff71 	bl	80151b8 <__ssputs_r>
 80152d6:	3001      	adds	r0, #1
 80152d8:	f000 80a4 	beq.w	8015424 <_svfiprintf_r+0x1b8>
 80152dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152de:	4453      	add	r3, sl
 80152e0:	9309      	str	r3, [sp, #36]	; 0x24
 80152e2:	783b      	ldrb	r3, [r7, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	f000 809d 	beq.w	8015424 <_svfiprintf_r+0x1b8>
 80152ea:	2300      	movs	r3, #0
 80152ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152f4:	9304      	str	r3, [sp, #16]
 80152f6:	9307      	str	r3, [sp, #28]
 80152f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80152fc:	931a      	str	r3, [sp, #104]	; 0x68
 80152fe:	462f      	mov	r7, r5
 8015300:	2205      	movs	r2, #5
 8015302:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015306:	4850      	ldr	r0, [pc, #320]	; (8015448 <_svfiprintf_r+0x1dc>)
 8015308:	f7ea ff6a 	bl	80001e0 <memchr>
 801530c:	9b04      	ldr	r3, [sp, #16]
 801530e:	b9d0      	cbnz	r0, 8015346 <_svfiprintf_r+0xda>
 8015310:	06d9      	lsls	r1, r3, #27
 8015312:	bf44      	itt	mi
 8015314:	2220      	movmi	r2, #32
 8015316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801531a:	071a      	lsls	r2, r3, #28
 801531c:	bf44      	itt	mi
 801531e:	222b      	movmi	r2, #43	; 0x2b
 8015320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015324:	782a      	ldrb	r2, [r5, #0]
 8015326:	2a2a      	cmp	r2, #42	; 0x2a
 8015328:	d015      	beq.n	8015356 <_svfiprintf_r+0xea>
 801532a:	9a07      	ldr	r2, [sp, #28]
 801532c:	462f      	mov	r7, r5
 801532e:	2000      	movs	r0, #0
 8015330:	250a      	movs	r5, #10
 8015332:	4639      	mov	r1, r7
 8015334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015338:	3b30      	subs	r3, #48	; 0x30
 801533a:	2b09      	cmp	r3, #9
 801533c:	d94d      	bls.n	80153da <_svfiprintf_r+0x16e>
 801533e:	b1b8      	cbz	r0, 8015370 <_svfiprintf_r+0x104>
 8015340:	e00f      	b.n	8015362 <_svfiprintf_r+0xf6>
 8015342:	462f      	mov	r7, r5
 8015344:	e7b8      	b.n	80152b8 <_svfiprintf_r+0x4c>
 8015346:	4a40      	ldr	r2, [pc, #256]	; (8015448 <_svfiprintf_r+0x1dc>)
 8015348:	1a80      	subs	r0, r0, r2
 801534a:	fa0b f000 	lsl.w	r0, fp, r0
 801534e:	4318      	orrs	r0, r3
 8015350:	9004      	str	r0, [sp, #16]
 8015352:	463d      	mov	r5, r7
 8015354:	e7d3      	b.n	80152fe <_svfiprintf_r+0x92>
 8015356:	9a03      	ldr	r2, [sp, #12]
 8015358:	1d11      	adds	r1, r2, #4
 801535a:	6812      	ldr	r2, [r2, #0]
 801535c:	9103      	str	r1, [sp, #12]
 801535e:	2a00      	cmp	r2, #0
 8015360:	db01      	blt.n	8015366 <_svfiprintf_r+0xfa>
 8015362:	9207      	str	r2, [sp, #28]
 8015364:	e004      	b.n	8015370 <_svfiprintf_r+0x104>
 8015366:	4252      	negs	r2, r2
 8015368:	f043 0302 	orr.w	r3, r3, #2
 801536c:	9207      	str	r2, [sp, #28]
 801536e:	9304      	str	r3, [sp, #16]
 8015370:	783b      	ldrb	r3, [r7, #0]
 8015372:	2b2e      	cmp	r3, #46	; 0x2e
 8015374:	d10c      	bne.n	8015390 <_svfiprintf_r+0x124>
 8015376:	787b      	ldrb	r3, [r7, #1]
 8015378:	2b2a      	cmp	r3, #42	; 0x2a
 801537a:	d133      	bne.n	80153e4 <_svfiprintf_r+0x178>
 801537c:	9b03      	ldr	r3, [sp, #12]
 801537e:	1d1a      	adds	r2, r3, #4
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	9203      	str	r2, [sp, #12]
 8015384:	2b00      	cmp	r3, #0
 8015386:	bfb8      	it	lt
 8015388:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801538c:	3702      	adds	r7, #2
 801538e:	9305      	str	r3, [sp, #20]
 8015390:	4d2e      	ldr	r5, [pc, #184]	; (801544c <_svfiprintf_r+0x1e0>)
 8015392:	7839      	ldrb	r1, [r7, #0]
 8015394:	2203      	movs	r2, #3
 8015396:	4628      	mov	r0, r5
 8015398:	f7ea ff22 	bl	80001e0 <memchr>
 801539c:	b138      	cbz	r0, 80153ae <_svfiprintf_r+0x142>
 801539e:	2340      	movs	r3, #64	; 0x40
 80153a0:	1b40      	subs	r0, r0, r5
 80153a2:	fa03 f000 	lsl.w	r0, r3, r0
 80153a6:	9b04      	ldr	r3, [sp, #16]
 80153a8:	4303      	orrs	r3, r0
 80153aa:	3701      	adds	r7, #1
 80153ac:	9304      	str	r3, [sp, #16]
 80153ae:	7839      	ldrb	r1, [r7, #0]
 80153b0:	4827      	ldr	r0, [pc, #156]	; (8015450 <_svfiprintf_r+0x1e4>)
 80153b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80153b6:	2206      	movs	r2, #6
 80153b8:	1c7e      	adds	r6, r7, #1
 80153ba:	f7ea ff11 	bl	80001e0 <memchr>
 80153be:	2800      	cmp	r0, #0
 80153c0:	d038      	beq.n	8015434 <_svfiprintf_r+0x1c8>
 80153c2:	4b24      	ldr	r3, [pc, #144]	; (8015454 <_svfiprintf_r+0x1e8>)
 80153c4:	bb13      	cbnz	r3, 801540c <_svfiprintf_r+0x1a0>
 80153c6:	9b03      	ldr	r3, [sp, #12]
 80153c8:	3307      	adds	r3, #7
 80153ca:	f023 0307 	bic.w	r3, r3, #7
 80153ce:	3308      	adds	r3, #8
 80153d0:	9303      	str	r3, [sp, #12]
 80153d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153d4:	444b      	add	r3, r9
 80153d6:	9309      	str	r3, [sp, #36]	; 0x24
 80153d8:	e76d      	b.n	80152b6 <_svfiprintf_r+0x4a>
 80153da:	fb05 3202 	mla	r2, r5, r2, r3
 80153de:	2001      	movs	r0, #1
 80153e0:	460f      	mov	r7, r1
 80153e2:	e7a6      	b.n	8015332 <_svfiprintf_r+0xc6>
 80153e4:	2300      	movs	r3, #0
 80153e6:	3701      	adds	r7, #1
 80153e8:	9305      	str	r3, [sp, #20]
 80153ea:	4619      	mov	r1, r3
 80153ec:	250a      	movs	r5, #10
 80153ee:	4638      	mov	r0, r7
 80153f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153f4:	3a30      	subs	r2, #48	; 0x30
 80153f6:	2a09      	cmp	r2, #9
 80153f8:	d903      	bls.n	8015402 <_svfiprintf_r+0x196>
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d0c8      	beq.n	8015390 <_svfiprintf_r+0x124>
 80153fe:	9105      	str	r1, [sp, #20]
 8015400:	e7c6      	b.n	8015390 <_svfiprintf_r+0x124>
 8015402:	fb05 2101 	mla	r1, r5, r1, r2
 8015406:	2301      	movs	r3, #1
 8015408:	4607      	mov	r7, r0
 801540a:	e7f0      	b.n	80153ee <_svfiprintf_r+0x182>
 801540c:	ab03      	add	r3, sp, #12
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	4622      	mov	r2, r4
 8015412:	4b11      	ldr	r3, [pc, #68]	; (8015458 <_svfiprintf_r+0x1ec>)
 8015414:	a904      	add	r1, sp, #16
 8015416:	4640      	mov	r0, r8
 8015418:	f7fc faf2 	bl	8011a00 <_printf_float>
 801541c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015420:	4681      	mov	r9, r0
 8015422:	d1d6      	bne.n	80153d2 <_svfiprintf_r+0x166>
 8015424:	89a3      	ldrh	r3, [r4, #12]
 8015426:	065b      	lsls	r3, r3, #25
 8015428:	f53f af35 	bmi.w	8015296 <_svfiprintf_r+0x2a>
 801542c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801542e:	b01d      	add	sp, #116	; 0x74
 8015430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015434:	ab03      	add	r3, sp, #12
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	4622      	mov	r2, r4
 801543a:	4b07      	ldr	r3, [pc, #28]	; (8015458 <_svfiprintf_r+0x1ec>)
 801543c:	a904      	add	r1, sp, #16
 801543e:	4640      	mov	r0, r8
 8015440:	f7fc fd94 	bl	8011f6c <_printf_i>
 8015444:	e7ea      	b.n	801541c <_svfiprintf_r+0x1b0>
 8015446:	bf00      	nop
 8015448:	08018304 	.word	0x08018304
 801544c:	0801830a 	.word	0x0801830a
 8015450:	0801830e 	.word	0x0801830e
 8015454:	08011a01 	.word	0x08011a01
 8015458:	080151b9 	.word	0x080151b9

0801545c <__sfputc_r>:
 801545c:	6893      	ldr	r3, [r2, #8]
 801545e:	3b01      	subs	r3, #1
 8015460:	2b00      	cmp	r3, #0
 8015462:	b410      	push	{r4}
 8015464:	6093      	str	r3, [r2, #8]
 8015466:	da08      	bge.n	801547a <__sfputc_r+0x1e>
 8015468:	6994      	ldr	r4, [r2, #24]
 801546a:	42a3      	cmp	r3, r4
 801546c:	db01      	blt.n	8015472 <__sfputc_r+0x16>
 801546e:	290a      	cmp	r1, #10
 8015470:	d103      	bne.n	801547a <__sfputc_r+0x1e>
 8015472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015476:	f7fd bdb7 	b.w	8012fe8 <__swbuf_r>
 801547a:	6813      	ldr	r3, [r2, #0]
 801547c:	1c58      	adds	r0, r3, #1
 801547e:	6010      	str	r0, [r2, #0]
 8015480:	7019      	strb	r1, [r3, #0]
 8015482:	4608      	mov	r0, r1
 8015484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015488:	4770      	bx	lr

0801548a <__sfputs_r>:
 801548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801548c:	4606      	mov	r6, r0
 801548e:	460f      	mov	r7, r1
 8015490:	4614      	mov	r4, r2
 8015492:	18d5      	adds	r5, r2, r3
 8015494:	42ac      	cmp	r4, r5
 8015496:	d101      	bne.n	801549c <__sfputs_r+0x12>
 8015498:	2000      	movs	r0, #0
 801549a:	e007      	b.n	80154ac <__sfputs_r+0x22>
 801549c:	463a      	mov	r2, r7
 801549e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154a2:	4630      	mov	r0, r6
 80154a4:	f7ff ffda 	bl	801545c <__sfputc_r>
 80154a8:	1c43      	adds	r3, r0, #1
 80154aa:	d1f3      	bne.n	8015494 <__sfputs_r+0xa>
 80154ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154b0 <_vfiprintf_r>:
 80154b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b4:	460c      	mov	r4, r1
 80154b6:	b09d      	sub	sp, #116	; 0x74
 80154b8:	4617      	mov	r7, r2
 80154ba:	461d      	mov	r5, r3
 80154bc:	4606      	mov	r6, r0
 80154be:	b118      	cbz	r0, 80154c8 <_vfiprintf_r+0x18>
 80154c0:	6983      	ldr	r3, [r0, #24]
 80154c2:	b90b      	cbnz	r3, 80154c8 <_vfiprintf_r+0x18>
 80154c4:	f7fe fd84 	bl	8013fd0 <__sinit>
 80154c8:	4b7c      	ldr	r3, [pc, #496]	; (80156bc <_vfiprintf_r+0x20c>)
 80154ca:	429c      	cmp	r4, r3
 80154cc:	d158      	bne.n	8015580 <_vfiprintf_r+0xd0>
 80154ce:	6874      	ldr	r4, [r6, #4]
 80154d0:	89a3      	ldrh	r3, [r4, #12]
 80154d2:	0718      	lsls	r0, r3, #28
 80154d4:	d55e      	bpl.n	8015594 <_vfiprintf_r+0xe4>
 80154d6:	6923      	ldr	r3, [r4, #16]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d05b      	beq.n	8015594 <_vfiprintf_r+0xe4>
 80154dc:	2300      	movs	r3, #0
 80154de:	9309      	str	r3, [sp, #36]	; 0x24
 80154e0:	2320      	movs	r3, #32
 80154e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154e6:	2330      	movs	r3, #48	; 0x30
 80154e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154ec:	9503      	str	r5, [sp, #12]
 80154ee:	f04f 0b01 	mov.w	fp, #1
 80154f2:	46b8      	mov	r8, r7
 80154f4:	4645      	mov	r5, r8
 80154f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80154fa:	b10b      	cbz	r3, 8015500 <_vfiprintf_r+0x50>
 80154fc:	2b25      	cmp	r3, #37	; 0x25
 80154fe:	d154      	bne.n	80155aa <_vfiprintf_r+0xfa>
 8015500:	ebb8 0a07 	subs.w	sl, r8, r7
 8015504:	d00b      	beq.n	801551e <_vfiprintf_r+0x6e>
 8015506:	4653      	mov	r3, sl
 8015508:	463a      	mov	r2, r7
 801550a:	4621      	mov	r1, r4
 801550c:	4630      	mov	r0, r6
 801550e:	f7ff ffbc 	bl	801548a <__sfputs_r>
 8015512:	3001      	adds	r0, #1
 8015514:	f000 80c2 	beq.w	801569c <_vfiprintf_r+0x1ec>
 8015518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801551a:	4453      	add	r3, sl
 801551c:	9309      	str	r3, [sp, #36]	; 0x24
 801551e:	f898 3000 	ldrb.w	r3, [r8]
 8015522:	2b00      	cmp	r3, #0
 8015524:	f000 80ba 	beq.w	801569c <_vfiprintf_r+0x1ec>
 8015528:	2300      	movs	r3, #0
 801552a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801552e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015532:	9304      	str	r3, [sp, #16]
 8015534:	9307      	str	r3, [sp, #28]
 8015536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801553a:	931a      	str	r3, [sp, #104]	; 0x68
 801553c:	46a8      	mov	r8, r5
 801553e:	2205      	movs	r2, #5
 8015540:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015544:	485e      	ldr	r0, [pc, #376]	; (80156c0 <_vfiprintf_r+0x210>)
 8015546:	f7ea fe4b 	bl	80001e0 <memchr>
 801554a:	9b04      	ldr	r3, [sp, #16]
 801554c:	bb78      	cbnz	r0, 80155ae <_vfiprintf_r+0xfe>
 801554e:	06d9      	lsls	r1, r3, #27
 8015550:	bf44      	itt	mi
 8015552:	2220      	movmi	r2, #32
 8015554:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015558:	071a      	lsls	r2, r3, #28
 801555a:	bf44      	itt	mi
 801555c:	222b      	movmi	r2, #43	; 0x2b
 801555e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015562:	782a      	ldrb	r2, [r5, #0]
 8015564:	2a2a      	cmp	r2, #42	; 0x2a
 8015566:	d02a      	beq.n	80155be <_vfiprintf_r+0x10e>
 8015568:	9a07      	ldr	r2, [sp, #28]
 801556a:	46a8      	mov	r8, r5
 801556c:	2000      	movs	r0, #0
 801556e:	250a      	movs	r5, #10
 8015570:	4641      	mov	r1, r8
 8015572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015576:	3b30      	subs	r3, #48	; 0x30
 8015578:	2b09      	cmp	r3, #9
 801557a:	d969      	bls.n	8015650 <_vfiprintf_r+0x1a0>
 801557c:	b360      	cbz	r0, 80155d8 <_vfiprintf_r+0x128>
 801557e:	e024      	b.n	80155ca <_vfiprintf_r+0x11a>
 8015580:	4b50      	ldr	r3, [pc, #320]	; (80156c4 <_vfiprintf_r+0x214>)
 8015582:	429c      	cmp	r4, r3
 8015584:	d101      	bne.n	801558a <_vfiprintf_r+0xda>
 8015586:	68b4      	ldr	r4, [r6, #8]
 8015588:	e7a2      	b.n	80154d0 <_vfiprintf_r+0x20>
 801558a:	4b4f      	ldr	r3, [pc, #316]	; (80156c8 <_vfiprintf_r+0x218>)
 801558c:	429c      	cmp	r4, r3
 801558e:	bf08      	it	eq
 8015590:	68f4      	ldreq	r4, [r6, #12]
 8015592:	e79d      	b.n	80154d0 <_vfiprintf_r+0x20>
 8015594:	4621      	mov	r1, r4
 8015596:	4630      	mov	r0, r6
 8015598:	f7fd fd78 	bl	801308c <__swsetup_r>
 801559c:	2800      	cmp	r0, #0
 801559e:	d09d      	beq.n	80154dc <_vfiprintf_r+0x2c>
 80155a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155a4:	b01d      	add	sp, #116	; 0x74
 80155a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155aa:	46a8      	mov	r8, r5
 80155ac:	e7a2      	b.n	80154f4 <_vfiprintf_r+0x44>
 80155ae:	4a44      	ldr	r2, [pc, #272]	; (80156c0 <_vfiprintf_r+0x210>)
 80155b0:	1a80      	subs	r0, r0, r2
 80155b2:	fa0b f000 	lsl.w	r0, fp, r0
 80155b6:	4318      	orrs	r0, r3
 80155b8:	9004      	str	r0, [sp, #16]
 80155ba:	4645      	mov	r5, r8
 80155bc:	e7be      	b.n	801553c <_vfiprintf_r+0x8c>
 80155be:	9a03      	ldr	r2, [sp, #12]
 80155c0:	1d11      	adds	r1, r2, #4
 80155c2:	6812      	ldr	r2, [r2, #0]
 80155c4:	9103      	str	r1, [sp, #12]
 80155c6:	2a00      	cmp	r2, #0
 80155c8:	db01      	blt.n	80155ce <_vfiprintf_r+0x11e>
 80155ca:	9207      	str	r2, [sp, #28]
 80155cc:	e004      	b.n	80155d8 <_vfiprintf_r+0x128>
 80155ce:	4252      	negs	r2, r2
 80155d0:	f043 0302 	orr.w	r3, r3, #2
 80155d4:	9207      	str	r2, [sp, #28]
 80155d6:	9304      	str	r3, [sp, #16]
 80155d8:	f898 3000 	ldrb.w	r3, [r8]
 80155dc:	2b2e      	cmp	r3, #46	; 0x2e
 80155de:	d10e      	bne.n	80155fe <_vfiprintf_r+0x14e>
 80155e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80155e4:	2b2a      	cmp	r3, #42	; 0x2a
 80155e6:	d138      	bne.n	801565a <_vfiprintf_r+0x1aa>
 80155e8:	9b03      	ldr	r3, [sp, #12]
 80155ea:	1d1a      	adds	r2, r3, #4
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	9203      	str	r2, [sp, #12]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	bfb8      	it	lt
 80155f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80155f8:	f108 0802 	add.w	r8, r8, #2
 80155fc:	9305      	str	r3, [sp, #20]
 80155fe:	4d33      	ldr	r5, [pc, #204]	; (80156cc <_vfiprintf_r+0x21c>)
 8015600:	f898 1000 	ldrb.w	r1, [r8]
 8015604:	2203      	movs	r2, #3
 8015606:	4628      	mov	r0, r5
 8015608:	f7ea fdea 	bl	80001e0 <memchr>
 801560c:	b140      	cbz	r0, 8015620 <_vfiprintf_r+0x170>
 801560e:	2340      	movs	r3, #64	; 0x40
 8015610:	1b40      	subs	r0, r0, r5
 8015612:	fa03 f000 	lsl.w	r0, r3, r0
 8015616:	9b04      	ldr	r3, [sp, #16]
 8015618:	4303      	orrs	r3, r0
 801561a:	f108 0801 	add.w	r8, r8, #1
 801561e:	9304      	str	r3, [sp, #16]
 8015620:	f898 1000 	ldrb.w	r1, [r8]
 8015624:	482a      	ldr	r0, [pc, #168]	; (80156d0 <_vfiprintf_r+0x220>)
 8015626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801562a:	2206      	movs	r2, #6
 801562c:	f108 0701 	add.w	r7, r8, #1
 8015630:	f7ea fdd6 	bl	80001e0 <memchr>
 8015634:	2800      	cmp	r0, #0
 8015636:	d037      	beq.n	80156a8 <_vfiprintf_r+0x1f8>
 8015638:	4b26      	ldr	r3, [pc, #152]	; (80156d4 <_vfiprintf_r+0x224>)
 801563a:	bb1b      	cbnz	r3, 8015684 <_vfiprintf_r+0x1d4>
 801563c:	9b03      	ldr	r3, [sp, #12]
 801563e:	3307      	adds	r3, #7
 8015640:	f023 0307 	bic.w	r3, r3, #7
 8015644:	3308      	adds	r3, #8
 8015646:	9303      	str	r3, [sp, #12]
 8015648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801564a:	444b      	add	r3, r9
 801564c:	9309      	str	r3, [sp, #36]	; 0x24
 801564e:	e750      	b.n	80154f2 <_vfiprintf_r+0x42>
 8015650:	fb05 3202 	mla	r2, r5, r2, r3
 8015654:	2001      	movs	r0, #1
 8015656:	4688      	mov	r8, r1
 8015658:	e78a      	b.n	8015570 <_vfiprintf_r+0xc0>
 801565a:	2300      	movs	r3, #0
 801565c:	f108 0801 	add.w	r8, r8, #1
 8015660:	9305      	str	r3, [sp, #20]
 8015662:	4619      	mov	r1, r3
 8015664:	250a      	movs	r5, #10
 8015666:	4640      	mov	r0, r8
 8015668:	f810 2b01 	ldrb.w	r2, [r0], #1
 801566c:	3a30      	subs	r2, #48	; 0x30
 801566e:	2a09      	cmp	r2, #9
 8015670:	d903      	bls.n	801567a <_vfiprintf_r+0x1ca>
 8015672:	2b00      	cmp	r3, #0
 8015674:	d0c3      	beq.n	80155fe <_vfiprintf_r+0x14e>
 8015676:	9105      	str	r1, [sp, #20]
 8015678:	e7c1      	b.n	80155fe <_vfiprintf_r+0x14e>
 801567a:	fb05 2101 	mla	r1, r5, r1, r2
 801567e:	2301      	movs	r3, #1
 8015680:	4680      	mov	r8, r0
 8015682:	e7f0      	b.n	8015666 <_vfiprintf_r+0x1b6>
 8015684:	ab03      	add	r3, sp, #12
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	4622      	mov	r2, r4
 801568a:	4b13      	ldr	r3, [pc, #76]	; (80156d8 <_vfiprintf_r+0x228>)
 801568c:	a904      	add	r1, sp, #16
 801568e:	4630      	mov	r0, r6
 8015690:	f7fc f9b6 	bl	8011a00 <_printf_float>
 8015694:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015698:	4681      	mov	r9, r0
 801569a:	d1d5      	bne.n	8015648 <_vfiprintf_r+0x198>
 801569c:	89a3      	ldrh	r3, [r4, #12]
 801569e:	065b      	lsls	r3, r3, #25
 80156a0:	f53f af7e 	bmi.w	80155a0 <_vfiprintf_r+0xf0>
 80156a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156a6:	e77d      	b.n	80155a4 <_vfiprintf_r+0xf4>
 80156a8:	ab03      	add	r3, sp, #12
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	4622      	mov	r2, r4
 80156ae:	4b0a      	ldr	r3, [pc, #40]	; (80156d8 <_vfiprintf_r+0x228>)
 80156b0:	a904      	add	r1, sp, #16
 80156b2:	4630      	mov	r0, r6
 80156b4:	f7fc fc5a 	bl	8011f6c <_printf_i>
 80156b8:	e7ec      	b.n	8015694 <_vfiprintf_r+0x1e4>
 80156ba:	bf00      	nop
 80156bc:	080181b8 	.word	0x080181b8
 80156c0:	08018304 	.word	0x08018304
 80156c4:	080181d8 	.word	0x080181d8
 80156c8:	08018198 	.word	0x08018198
 80156cc:	0801830a 	.word	0x0801830a
 80156d0:	0801830e 	.word	0x0801830e
 80156d4:	08011a01 	.word	0x08011a01
 80156d8:	0801548b 	.word	0x0801548b

080156dc <_putc_r>:
 80156dc:	b570      	push	{r4, r5, r6, lr}
 80156de:	460d      	mov	r5, r1
 80156e0:	4614      	mov	r4, r2
 80156e2:	4606      	mov	r6, r0
 80156e4:	b118      	cbz	r0, 80156ee <_putc_r+0x12>
 80156e6:	6983      	ldr	r3, [r0, #24]
 80156e8:	b90b      	cbnz	r3, 80156ee <_putc_r+0x12>
 80156ea:	f7fe fc71 	bl	8013fd0 <__sinit>
 80156ee:	4b13      	ldr	r3, [pc, #76]	; (801573c <_putc_r+0x60>)
 80156f0:	429c      	cmp	r4, r3
 80156f2:	d112      	bne.n	801571a <_putc_r+0x3e>
 80156f4:	6874      	ldr	r4, [r6, #4]
 80156f6:	68a3      	ldr	r3, [r4, #8]
 80156f8:	3b01      	subs	r3, #1
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	60a3      	str	r3, [r4, #8]
 80156fe:	da16      	bge.n	801572e <_putc_r+0x52>
 8015700:	69a2      	ldr	r2, [r4, #24]
 8015702:	4293      	cmp	r3, r2
 8015704:	db02      	blt.n	801570c <_putc_r+0x30>
 8015706:	b2eb      	uxtb	r3, r5
 8015708:	2b0a      	cmp	r3, #10
 801570a:	d110      	bne.n	801572e <_putc_r+0x52>
 801570c:	4622      	mov	r2, r4
 801570e:	4629      	mov	r1, r5
 8015710:	4630      	mov	r0, r6
 8015712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015716:	f7fd bc67 	b.w	8012fe8 <__swbuf_r>
 801571a:	4b09      	ldr	r3, [pc, #36]	; (8015740 <_putc_r+0x64>)
 801571c:	429c      	cmp	r4, r3
 801571e:	d101      	bne.n	8015724 <_putc_r+0x48>
 8015720:	68b4      	ldr	r4, [r6, #8]
 8015722:	e7e8      	b.n	80156f6 <_putc_r+0x1a>
 8015724:	4b07      	ldr	r3, [pc, #28]	; (8015744 <_putc_r+0x68>)
 8015726:	429c      	cmp	r4, r3
 8015728:	bf08      	it	eq
 801572a:	68f4      	ldreq	r4, [r6, #12]
 801572c:	e7e3      	b.n	80156f6 <_putc_r+0x1a>
 801572e:	6823      	ldr	r3, [r4, #0]
 8015730:	1c5a      	adds	r2, r3, #1
 8015732:	6022      	str	r2, [r4, #0]
 8015734:	701d      	strb	r5, [r3, #0]
 8015736:	b2e8      	uxtb	r0, r5
 8015738:	bd70      	pop	{r4, r5, r6, pc}
 801573a:	bf00      	nop
 801573c:	080181b8 	.word	0x080181b8
 8015740:	080181d8 	.word	0x080181d8
 8015744:	08018198 	.word	0x08018198

08015748 <_sbrk_r>:
 8015748:	b538      	push	{r3, r4, r5, lr}
 801574a:	4c06      	ldr	r4, [pc, #24]	; (8015764 <_sbrk_r+0x1c>)
 801574c:	2300      	movs	r3, #0
 801574e:	4605      	mov	r5, r0
 8015750:	4608      	mov	r0, r1
 8015752:	6023      	str	r3, [r4, #0]
 8015754:	f7ef fb54 	bl	8004e00 <_sbrk>
 8015758:	1c43      	adds	r3, r0, #1
 801575a:	d102      	bne.n	8015762 <_sbrk_r+0x1a>
 801575c:	6823      	ldr	r3, [r4, #0]
 801575e:	b103      	cbz	r3, 8015762 <_sbrk_r+0x1a>
 8015760:	602b      	str	r3, [r5, #0]
 8015762:	bd38      	pop	{r3, r4, r5, pc}
 8015764:	200102b4 	.word	0x200102b4

08015768 <nanf>:
 8015768:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015770 <nanf+0x8>
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	7fc00000 	.word	0x7fc00000

08015774 <__sread>:
 8015774:	b510      	push	{r4, lr}
 8015776:	460c      	mov	r4, r1
 8015778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801577c:	f000 f8f4 	bl	8015968 <_read_r>
 8015780:	2800      	cmp	r0, #0
 8015782:	bfab      	itete	ge
 8015784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015786:	89a3      	ldrhlt	r3, [r4, #12]
 8015788:	181b      	addge	r3, r3, r0
 801578a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801578e:	bfac      	ite	ge
 8015790:	6563      	strge	r3, [r4, #84]	; 0x54
 8015792:	81a3      	strhlt	r3, [r4, #12]
 8015794:	bd10      	pop	{r4, pc}

08015796 <__swrite>:
 8015796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801579a:	461f      	mov	r7, r3
 801579c:	898b      	ldrh	r3, [r1, #12]
 801579e:	05db      	lsls	r3, r3, #23
 80157a0:	4605      	mov	r5, r0
 80157a2:	460c      	mov	r4, r1
 80157a4:	4616      	mov	r6, r2
 80157a6:	d505      	bpl.n	80157b4 <__swrite+0x1e>
 80157a8:	2302      	movs	r3, #2
 80157aa:	2200      	movs	r2, #0
 80157ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157b0:	f000 f886 	bl	80158c0 <_lseek_r>
 80157b4:	89a3      	ldrh	r3, [r4, #12]
 80157b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80157be:	81a3      	strh	r3, [r4, #12]
 80157c0:	4632      	mov	r2, r6
 80157c2:	463b      	mov	r3, r7
 80157c4:	4628      	mov	r0, r5
 80157c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157ca:	f000 b835 	b.w	8015838 <_write_r>

080157ce <__sseek>:
 80157ce:	b510      	push	{r4, lr}
 80157d0:	460c      	mov	r4, r1
 80157d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157d6:	f000 f873 	bl	80158c0 <_lseek_r>
 80157da:	1c43      	adds	r3, r0, #1
 80157dc:	89a3      	ldrh	r3, [r4, #12]
 80157de:	bf15      	itete	ne
 80157e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80157e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80157e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80157ea:	81a3      	strheq	r3, [r4, #12]
 80157ec:	bf18      	it	ne
 80157ee:	81a3      	strhne	r3, [r4, #12]
 80157f0:	bd10      	pop	{r4, pc}

080157f2 <__sclose>:
 80157f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157f6:	f000 b831 	b.w	801585c <_close_r>

080157fa <strncmp>:
 80157fa:	b510      	push	{r4, lr}
 80157fc:	b16a      	cbz	r2, 801581a <strncmp+0x20>
 80157fe:	3901      	subs	r1, #1
 8015800:	1884      	adds	r4, r0, r2
 8015802:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015806:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801580a:	4293      	cmp	r3, r2
 801580c:	d103      	bne.n	8015816 <strncmp+0x1c>
 801580e:	42a0      	cmp	r0, r4
 8015810:	d001      	beq.n	8015816 <strncmp+0x1c>
 8015812:	2b00      	cmp	r3, #0
 8015814:	d1f5      	bne.n	8015802 <strncmp+0x8>
 8015816:	1a98      	subs	r0, r3, r2
 8015818:	bd10      	pop	{r4, pc}
 801581a:	4610      	mov	r0, r2
 801581c:	e7fc      	b.n	8015818 <strncmp+0x1e>

0801581e <__ascii_wctomb>:
 801581e:	b149      	cbz	r1, 8015834 <__ascii_wctomb+0x16>
 8015820:	2aff      	cmp	r2, #255	; 0xff
 8015822:	bf85      	ittet	hi
 8015824:	238a      	movhi	r3, #138	; 0x8a
 8015826:	6003      	strhi	r3, [r0, #0]
 8015828:	700a      	strbls	r2, [r1, #0]
 801582a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801582e:	bf98      	it	ls
 8015830:	2001      	movls	r0, #1
 8015832:	4770      	bx	lr
 8015834:	4608      	mov	r0, r1
 8015836:	4770      	bx	lr

08015838 <_write_r>:
 8015838:	b538      	push	{r3, r4, r5, lr}
 801583a:	4c07      	ldr	r4, [pc, #28]	; (8015858 <_write_r+0x20>)
 801583c:	4605      	mov	r5, r0
 801583e:	4608      	mov	r0, r1
 8015840:	4611      	mov	r1, r2
 8015842:	2200      	movs	r2, #0
 8015844:	6022      	str	r2, [r4, #0]
 8015846:	461a      	mov	r2, r3
 8015848:	f7ef fa8a 	bl	8004d60 <_write>
 801584c:	1c43      	adds	r3, r0, #1
 801584e:	d102      	bne.n	8015856 <_write_r+0x1e>
 8015850:	6823      	ldr	r3, [r4, #0]
 8015852:	b103      	cbz	r3, 8015856 <_write_r+0x1e>
 8015854:	602b      	str	r3, [r5, #0]
 8015856:	bd38      	pop	{r3, r4, r5, pc}
 8015858:	200102b4 	.word	0x200102b4

0801585c <_close_r>:
 801585c:	b538      	push	{r3, r4, r5, lr}
 801585e:	4c06      	ldr	r4, [pc, #24]	; (8015878 <_close_r+0x1c>)
 8015860:	2300      	movs	r3, #0
 8015862:	4605      	mov	r5, r0
 8015864:	4608      	mov	r0, r1
 8015866:	6023      	str	r3, [r4, #0]
 8015868:	f7ef fa96 	bl	8004d98 <_close>
 801586c:	1c43      	adds	r3, r0, #1
 801586e:	d102      	bne.n	8015876 <_close_r+0x1a>
 8015870:	6823      	ldr	r3, [r4, #0]
 8015872:	b103      	cbz	r3, 8015876 <_close_r+0x1a>
 8015874:	602b      	str	r3, [r5, #0]
 8015876:	bd38      	pop	{r3, r4, r5, pc}
 8015878:	200102b4 	.word	0x200102b4

0801587c <_fstat_r>:
 801587c:	b538      	push	{r3, r4, r5, lr}
 801587e:	4c07      	ldr	r4, [pc, #28]	; (801589c <_fstat_r+0x20>)
 8015880:	2300      	movs	r3, #0
 8015882:	4605      	mov	r5, r0
 8015884:	4608      	mov	r0, r1
 8015886:	4611      	mov	r1, r2
 8015888:	6023      	str	r3, [r4, #0]
 801588a:	f7ef fa91 	bl	8004db0 <_fstat>
 801588e:	1c43      	adds	r3, r0, #1
 8015890:	d102      	bne.n	8015898 <_fstat_r+0x1c>
 8015892:	6823      	ldr	r3, [r4, #0]
 8015894:	b103      	cbz	r3, 8015898 <_fstat_r+0x1c>
 8015896:	602b      	str	r3, [r5, #0]
 8015898:	bd38      	pop	{r3, r4, r5, pc}
 801589a:	bf00      	nop
 801589c:	200102b4 	.word	0x200102b4

080158a0 <_isatty_r>:
 80158a0:	b538      	push	{r3, r4, r5, lr}
 80158a2:	4c06      	ldr	r4, [pc, #24]	; (80158bc <_isatty_r+0x1c>)
 80158a4:	2300      	movs	r3, #0
 80158a6:	4605      	mov	r5, r0
 80158a8:	4608      	mov	r0, r1
 80158aa:	6023      	str	r3, [r4, #0]
 80158ac:	f7ef fa90 	bl	8004dd0 <_isatty>
 80158b0:	1c43      	adds	r3, r0, #1
 80158b2:	d102      	bne.n	80158ba <_isatty_r+0x1a>
 80158b4:	6823      	ldr	r3, [r4, #0]
 80158b6:	b103      	cbz	r3, 80158ba <_isatty_r+0x1a>
 80158b8:	602b      	str	r3, [r5, #0]
 80158ba:	bd38      	pop	{r3, r4, r5, pc}
 80158bc:	200102b4 	.word	0x200102b4

080158c0 <_lseek_r>:
 80158c0:	b538      	push	{r3, r4, r5, lr}
 80158c2:	4c07      	ldr	r4, [pc, #28]	; (80158e0 <_lseek_r+0x20>)
 80158c4:	4605      	mov	r5, r0
 80158c6:	4608      	mov	r0, r1
 80158c8:	4611      	mov	r1, r2
 80158ca:	2200      	movs	r2, #0
 80158cc:	6022      	str	r2, [r4, #0]
 80158ce:	461a      	mov	r2, r3
 80158d0:	f7ef fa89 	bl	8004de6 <_lseek>
 80158d4:	1c43      	adds	r3, r0, #1
 80158d6:	d102      	bne.n	80158de <_lseek_r+0x1e>
 80158d8:	6823      	ldr	r3, [r4, #0]
 80158da:	b103      	cbz	r3, 80158de <_lseek_r+0x1e>
 80158dc:	602b      	str	r3, [r5, #0]
 80158de:	bd38      	pop	{r3, r4, r5, pc}
 80158e0:	200102b4 	.word	0x200102b4

080158e4 <memmove>:
 80158e4:	4288      	cmp	r0, r1
 80158e6:	b510      	push	{r4, lr}
 80158e8:	eb01 0302 	add.w	r3, r1, r2
 80158ec:	d807      	bhi.n	80158fe <memmove+0x1a>
 80158ee:	1e42      	subs	r2, r0, #1
 80158f0:	4299      	cmp	r1, r3
 80158f2:	d00a      	beq.n	801590a <memmove+0x26>
 80158f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80158fc:	e7f8      	b.n	80158f0 <memmove+0xc>
 80158fe:	4283      	cmp	r3, r0
 8015900:	d9f5      	bls.n	80158ee <memmove+0xa>
 8015902:	1881      	adds	r1, r0, r2
 8015904:	1ad2      	subs	r2, r2, r3
 8015906:	42d3      	cmn	r3, r2
 8015908:	d100      	bne.n	801590c <memmove+0x28>
 801590a:	bd10      	pop	{r4, pc}
 801590c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015910:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015914:	e7f7      	b.n	8015906 <memmove+0x22>

08015916 <__malloc_lock>:
 8015916:	4770      	bx	lr

08015918 <__malloc_unlock>:
 8015918:	4770      	bx	lr

0801591a <_realloc_r>:
 801591a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801591c:	4607      	mov	r7, r0
 801591e:	4614      	mov	r4, r2
 8015920:	460e      	mov	r6, r1
 8015922:	b921      	cbnz	r1, 801592e <_realloc_r+0x14>
 8015924:	4611      	mov	r1, r2
 8015926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801592a:	f7ff bbeb 	b.w	8015104 <_malloc_r>
 801592e:	b922      	cbnz	r2, 801593a <_realloc_r+0x20>
 8015930:	f7ff fb9a 	bl	8015068 <_free_r>
 8015934:	4625      	mov	r5, r4
 8015936:	4628      	mov	r0, r5
 8015938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801593a:	f000 f827 	bl	801598c <_malloc_usable_size_r>
 801593e:	42a0      	cmp	r0, r4
 8015940:	d20f      	bcs.n	8015962 <_realloc_r+0x48>
 8015942:	4621      	mov	r1, r4
 8015944:	4638      	mov	r0, r7
 8015946:	f7ff fbdd 	bl	8015104 <_malloc_r>
 801594a:	4605      	mov	r5, r0
 801594c:	2800      	cmp	r0, #0
 801594e:	d0f2      	beq.n	8015936 <_realloc_r+0x1c>
 8015950:	4631      	mov	r1, r6
 8015952:	4622      	mov	r2, r4
 8015954:	f7fb ffac 	bl	80118b0 <memcpy>
 8015958:	4631      	mov	r1, r6
 801595a:	4638      	mov	r0, r7
 801595c:	f7ff fb84 	bl	8015068 <_free_r>
 8015960:	e7e9      	b.n	8015936 <_realloc_r+0x1c>
 8015962:	4635      	mov	r5, r6
 8015964:	e7e7      	b.n	8015936 <_realloc_r+0x1c>
	...

08015968 <_read_r>:
 8015968:	b538      	push	{r3, r4, r5, lr}
 801596a:	4c07      	ldr	r4, [pc, #28]	; (8015988 <_read_r+0x20>)
 801596c:	4605      	mov	r5, r0
 801596e:	4608      	mov	r0, r1
 8015970:	4611      	mov	r1, r2
 8015972:	2200      	movs	r2, #0
 8015974:	6022      	str	r2, [r4, #0]
 8015976:	461a      	mov	r2, r3
 8015978:	f7ef f9d5 	bl	8004d26 <_read>
 801597c:	1c43      	adds	r3, r0, #1
 801597e:	d102      	bne.n	8015986 <_read_r+0x1e>
 8015980:	6823      	ldr	r3, [r4, #0]
 8015982:	b103      	cbz	r3, 8015986 <_read_r+0x1e>
 8015984:	602b      	str	r3, [r5, #0]
 8015986:	bd38      	pop	{r3, r4, r5, pc}
 8015988:	200102b4 	.word	0x200102b4

0801598c <_malloc_usable_size_r>:
 801598c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015990:	1f18      	subs	r0, r3, #4
 8015992:	2b00      	cmp	r3, #0
 8015994:	bfbc      	itt	lt
 8015996:	580b      	ldrlt	r3, [r1, r0]
 8015998:	18c0      	addlt	r0, r0, r3
 801599a:	4770      	bx	lr

0801599c <pow>:
 801599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a0:	ed2d 8b04 	vpush	{d8-d9}
 80159a4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8015c78 <pow+0x2dc>
 80159a8:	b08d      	sub	sp, #52	; 0x34
 80159aa:	ec57 6b10 	vmov	r6, r7, d0
 80159ae:	ec55 4b11 	vmov	r4, r5, d1
 80159b2:	f000 fb71 	bl	8016098 <__ieee754_pow>
 80159b6:	f999 3000 	ldrsb.w	r3, [r9]
 80159ba:	9300      	str	r3, [sp, #0]
 80159bc:	3301      	adds	r3, #1
 80159be:	eeb0 8a40 	vmov.f32	s16, s0
 80159c2:	eef0 8a60 	vmov.f32	s17, s1
 80159c6:	46c8      	mov	r8, r9
 80159c8:	d05f      	beq.n	8015a8a <pow+0xee>
 80159ca:	4622      	mov	r2, r4
 80159cc:	462b      	mov	r3, r5
 80159ce:	4620      	mov	r0, r4
 80159d0:	4629      	mov	r1, r5
 80159d2:	f7eb f8ab 	bl	8000b2c <__aeabi_dcmpun>
 80159d6:	4683      	mov	fp, r0
 80159d8:	2800      	cmp	r0, #0
 80159da:	d156      	bne.n	8015a8a <pow+0xee>
 80159dc:	4632      	mov	r2, r6
 80159de:	463b      	mov	r3, r7
 80159e0:	4630      	mov	r0, r6
 80159e2:	4639      	mov	r1, r7
 80159e4:	f7eb f8a2 	bl	8000b2c <__aeabi_dcmpun>
 80159e8:	9001      	str	r0, [sp, #4]
 80159ea:	b1e8      	cbz	r0, 8015a28 <pow+0x8c>
 80159ec:	2200      	movs	r2, #0
 80159ee:	2300      	movs	r3, #0
 80159f0:	4620      	mov	r0, r4
 80159f2:	4629      	mov	r1, r5
 80159f4:	f7eb f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d046      	beq.n	8015a8a <pow+0xee>
 80159fc:	2301      	movs	r3, #1
 80159fe:	9302      	str	r3, [sp, #8]
 8015a00:	4b96      	ldr	r3, [pc, #600]	; (8015c5c <pow+0x2c0>)
 8015a02:	9303      	str	r3, [sp, #12]
 8015a04:	4b96      	ldr	r3, [pc, #600]	; (8015c60 <pow+0x2c4>)
 8015a06:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a10:	9b00      	ldr	r3, [sp, #0]
 8015a12:	2b02      	cmp	r3, #2
 8015a14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015a18:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015a1c:	d033      	beq.n	8015a86 <pow+0xea>
 8015a1e:	a802      	add	r0, sp, #8
 8015a20:	f001 fbcc 	bl	80171bc <matherr>
 8015a24:	bb48      	cbnz	r0, 8015a7a <pow+0xde>
 8015a26:	e05d      	b.n	8015ae4 <pow+0x148>
 8015a28:	f04f 0a00 	mov.w	sl, #0
 8015a2c:	f04f 0b00 	mov.w	fp, #0
 8015a30:	4652      	mov	r2, sl
 8015a32:	465b      	mov	r3, fp
 8015a34:	4630      	mov	r0, r6
 8015a36:	4639      	mov	r1, r7
 8015a38:	f7eb f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a3c:	ec4b ab19 	vmov	d9, sl, fp
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d054      	beq.n	8015aee <pow+0x152>
 8015a44:	4652      	mov	r2, sl
 8015a46:	465b      	mov	r3, fp
 8015a48:	4620      	mov	r0, r4
 8015a4a:	4629      	mov	r1, r5
 8015a4c:	f7eb f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a50:	4680      	mov	r8, r0
 8015a52:	b318      	cbz	r0, 8015a9c <pow+0x100>
 8015a54:	2301      	movs	r3, #1
 8015a56:	9302      	str	r3, [sp, #8]
 8015a58:	4b80      	ldr	r3, [pc, #512]	; (8015c5c <pow+0x2c0>)
 8015a5a:	9303      	str	r3, [sp, #12]
 8015a5c:	9b01      	ldr	r3, [sp, #4]
 8015a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015a60:	9b00      	ldr	r3, [sp, #0]
 8015a62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015a66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015a6a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d0d5      	beq.n	8015a1e <pow+0x82>
 8015a72:	4b7b      	ldr	r3, [pc, #492]	; (8015c60 <pow+0x2c4>)
 8015a74:	2200      	movs	r2, #0
 8015a76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a7c:	b11b      	cbz	r3, 8015a86 <pow+0xea>
 8015a7e:	f7fb feed 	bl	801185c <__errno>
 8015a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a84:	6003      	str	r3, [r0, #0]
 8015a86:	ed9d 8b08 	vldr	d8, [sp, #32]
 8015a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8015a8e:	eef0 0a68 	vmov.f32	s1, s17
 8015a92:	b00d      	add	sp, #52	; 0x34
 8015a94:	ecbd 8b04 	vpop	{d8-d9}
 8015a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a9c:	ec45 4b10 	vmov	d0, r4, r5
 8015aa0:	f001 fb84 	bl	80171ac <finite>
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	d0f0      	beq.n	8015a8a <pow+0xee>
 8015aa8:	4652      	mov	r2, sl
 8015aaa:	465b      	mov	r3, fp
 8015aac:	4620      	mov	r0, r4
 8015aae:	4629      	mov	r1, r5
 8015ab0:	f7eb f814 	bl	8000adc <__aeabi_dcmplt>
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d0e8      	beq.n	8015a8a <pow+0xee>
 8015ab8:	2301      	movs	r3, #1
 8015aba:	9302      	str	r3, [sp, #8]
 8015abc:	4b67      	ldr	r3, [pc, #412]	; (8015c5c <pow+0x2c0>)
 8015abe:	9303      	str	r3, [sp, #12]
 8015ac0:	f999 3000 	ldrsb.w	r3, [r9]
 8015ac4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8015ac8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015acc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015ad0:	b913      	cbnz	r3, 8015ad8 <pow+0x13c>
 8015ad2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015ad6:	e7a2      	b.n	8015a1e <pow+0x82>
 8015ad8:	4962      	ldr	r1, [pc, #392]	; (8015c64 <pow+0x2c8>)
 8015ada:	2000      	movs	r0, #0
 8015adc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015ae0:	2b02      	cmp	r3, #2
 8015ae2:	d19c      	bne.n	8015a1e <pow+0x82>
 8015ae4:	f7fb feba 	bl	801185c <__errno>
 8015ae8:	2321      	movs	r3, #33	; 0x21
 8015aea:	6003      	str	r3, [r0, #0]
 8015aec:	e7c5      	b.n	8015a7a <pow+0xde>
 8015aee:	eeb0 0a48 	vmov.f32	s0, s16
 8015af2:	eef0 0a68 	vmov.f32	s1, s17
 8015af6:	f001 fb59 	bl	80171ac <finite>
 8015afa:	9000      	str	r0, [sp, #0]
 8015afc:	2800      	cmp	r0, #0
 8015afe:	f040 8081 	bne.w	8015c04 <pow+0x268>
 8015b02:	ec47 6b10 	vmov	d0, r6, r7
 8015b06:	f001 fb51 	bl	80171ac <finite>
 8015b0a:	2800      	cmp	r0, #0
 8015b0c:	d07a      	beq.n	8015c04 <pow+0x268>
 8015b0e:	ec45 4b10 	vmov	d0, r4, r5
 8015b12:	f001 fb4b 	bl	80171ac <finite>
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d074      	beq.n	8015c04 <pow+0x268>
 8015b1a:	ec53 2b18 	vmov	r2, r3, d8
 8015b1e:	ee18 0a10 	vmov	r0, s16
 8015b22:	4619      	mov	r1, r3
 8015b24:	f7eb f802 	bl	8000b2c <__aeabi_dcmpun>
 8015b28:	f999 9000 	ldrsb.w	r9, [r9]
 8015b2c:	4b4b      	ldr	r3, [pc, #300]	; (8015c5c <pow+0x2c0>)
 8015b2e:	b1b0      	cbz	r0, 8015b5e <pow+0x1c2>
 8015b30:	2201      	movs	r2, #1
 8015b32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015b36:	9b00      	ldr	r3, [sp, #0]
 8015b38:	930a      	str	r3, [sp, #40]	; 0x28
 8015b3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015b3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015b42:	f1b9 0f00 	cmp.w	r9, #0
 8015b46:	d0c4      	beq.n	8015ad2 <pow+0x136>
 8015b48:	4652      	mov	r2, sl
 8015b4a:	465b      	mov	r3, fp
 8015b4c:	4650      	mov	r0, sl
 8015b4e:	4659      	mov	r1, fp
 8015b50:	f7ea fe7c 	bl	800084c <__aeabi_ddiv>
 8015b54:	f1b9 0f02 	cmp.w	r9, #2
 8015b58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015b5c:	e7c1      	b.n	8015ae2 <pow+0x146>
 8015b5e:	2203      	movs	r2, #3
 8015b60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015b64:	900a      	str	r0, [sp, #40]	; 0x28
 8015b66:	4629      	mov	r1, r5
 8015b68:	4620      	mov	r0, r4
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	4b3e      	ldr	r3, [pc, #248]	; (8015c68 <pow+0x2cc>)
 8015b6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015b72:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015b76:	f7ea fd3f 	bl	80005f8 <__aeabi_dmul>
 8015b7a:	4604      	mov	r4, r0
 8015b7c:	460d      	mov	r5, r1
 8015b7e:	f1b9 0f00 	cmp.w	r9, #0
 8015b82:	d124      	bne.n	8015bce <pow+0x232>
 8015b84:	4b39      	ldr	r3, [pc, #228]	; (8015c6c <pow+0x2d0>)
 8015b86:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015b8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015b8e:	4630      	mov	r0, r6
 8015b90:	4652      	mov	r2, sl
 8015b92:	465b      	mov	r3, fp
 8015b94:	4639      	mov	r1, r7
 8015b96:	f7ea ffa1 	bl	8000adc <__aeabi_dcmplt>
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	d056      	beq.n	8015c4c <pow+0x2b0>
 8015b9e:	ec45 4b10 	vmov	d0, r4, r5
 8015ba2:	f001 fb15 	bl	80171d0 <rint>
 8015ba6:	4622      	mov	r2, r4
 8015ba8:	462b      	mov	r3, r5
 8015baa:	ec51 0b10 	vmov	r0, r1, d0
 8015bae:	f7ea ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015bb2:	b920      	cbnz	r0, 8015bbe <pow+0x222>
 8015bb4:	4b2e      	ldr	r3, [pc, #184]	; (8015c70 <pow+0x2d4>)
 8015bb6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015bba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015bbe:	f998 3000 	ldrsb.w	r3, [r8]
 8015bc2:	2b02      	cmp	r3, #2
 8015bc4:	d142      	bne.n	8015c4c <pow+0x2b0>
 8015bc6:	f7fb fe49 	bl	801185c <__errno>
 8015bca:	2322      	movs	r3, #34	; 0x22
 8015bcc:	e78d      	b.n	8015aea <pow+0x14e>
 8015bce:	4b29      	ldr	r3, [pc, #164]	; (8015c74 <pow+0x2d8>)
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015bd6:	4630      	mov	r0, r6
 8015bd8:	4652      	mov	r2, sl
 8015bda:	465b      	mov	r3, fp
 8015bdc:	4639      	mov	r1, r7
 8015bde:	f7ea ff7d 	bl	8000adc <__aeabi_dcmplt>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d0eb      	beq.n	8015bbe <pow+0x222>
 8015be6:	ec45 4b10 	vmov	d0, r4, r5
 8015bea:	f001 faf1 	bl	80171d0 <rint>
 8015bee:	4622      	mov	r2, r4
 8015bf0:	462b      	mov	r3, r5
 8015bf2:	ec51 0b10 	vmov	r0, r1, d0
 8015bf6:	f7ea ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8015bfa:	2800      	cmp	r0, #0
 8015bfc:	d1df      	bne.n	8015bbe <pow+0x222>
 8015bfe:	2200      	movs	r2, #0
 8015c00:	4b18      	ldr	r3, [pc, #96]	; (8015c64 <pow+0x2c8>)
 8015c02:	e7da      	b.n	8015bba <pow+0x21e>
 8015c04:	2200      	movs	r2, #0
 8015c06:	2300      	movs	r3, #0
 8015c08:	ec51 0b18 	vmov	r0, r1, d8
 8015c0c:	f7ea ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8015c10:	2800      	cmp	r0, #0
 8015c12:	f43f af3a 	beq.w	8015a8a <pow+0xee>
 8015c16:	ec47 6b10 	vmov	d0, r6, r7
 8015c1a:	f001 fac7 	bl	80171ac <finite>
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	f43f af33 	beq.w	8015a8a <pow+0xee>
 8015c24:	ec45 4b10 	vmov	d0, r4, r5
 8015c28:	f001 fac0 	bl	80171ac <finite>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	f43f af2c 	beq.w	8015a8a <pow+0xee>
 8015c32:	2304      	movs	r3, #4
 8015c34:	9302      	str	r3, [sp, #8]
 8015c36:	4b09      	ldr	r3, [pc, #36]	; (8015c5c <pow+0x2c0>)
 8015c38:	9303      	str	r3, [sp, #12]
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8015c3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015c42:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015c46:	ed8d 9b08 	vstr	d9, [sp, #32]
 8015c4a:	e7b8      	b.n	8015bbe <pow+0x222>
 8015c4c:	a802      	add	r0, sp, #8
 8015c4e:	f001 fab5 	bl	80171bc <matherr>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	f47f af11 	bne.w	8015a7a <pow+0xde>
 8015c58:	e7b5      	b.n	8015bc6 <pow+0x22a>
 8015c5a:	bf00      	nop
 8015c5c:	08018416 	.word	0x08018416
 8015c60:	3ff00000 	.word	0x3ff00000
 8015c64:	fff00000 	.word	0xfff00000
 8015c68:	3fe00000 	.word	0x3fe00000
 8015c6c:	47efffff 	.word	0x47efffff
 8015c70:	c7efffff 	.word	0xc7efffff
 8015c74:	7ff00000 	.word	0x7ff00000
 8015c78:	20000374 	.word	0x20000374

08015c7c <sqrt>:
 8015c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c80:	ed2d 8b02 	vpush	{d8}
 8015c84:	b08b      	sub	sp, #44	; 0x2c
 8015c86:	ec55 4b10 	vmov	r4, r5, d0
 8015c8a:	f000 ff13 	bl	8016ab4 <__ieee754_sqrt>
 8015c8e:	4b26      	ldr	r3, [pc, #152]	; (8015d28 <sqrt+0xac>)
 8015c90:	eeb0 8a40 	vmov.f32	s16, s0
 8015c94:	eef0 8a60 	vmov.f32	s17, s1
 8015c98:	f993 6000 	ldrsb.w	r6, [r3]
 8015c9c:	1c73      	adds	r3, r6, #1
 8015c9e:	d02a      	beq.n	8015cf6 <sqrt+0x7a>
 8015ca0:	4622      	mov	r2, r4
 8015ca2:	462b      	mov	r3, r5
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	4629      	mov	r1, r5
 8015ca8:	f7ea ff40 	bl	8000b2c <__aeabi_dcmpun>
 8015cac:	4607      	mov	r7, r0
 8015cae:	bb10      	cbnz	r0, 8015cf6 <sqrt+0x7a>
 8015cb0:	f04f 0800 	mov.w	r8, #0
 8015cb4:	f04f 0900 	mov.w	r9, #0
 8015cb8:	4642      	mov	r2, r8
 8015cba:	464b      	mov	r3, r9
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	f7ea ff0c 	bl	8000adc <__aeabi_dcmplt>
 8015cc4:	b1b8      	cbz	r0, 8015cf6 <sqrt+0x7a>
 8015cc6:	2301      	movs	r3, #1
 8015cc8:	9300      	str	r3, [sp, #0]
 8015cca:	4b18      	ldr	r3, [pc, #96]	; (8015d2c <sqrt+0xb0>)
 8015ccc:	9301      	str	r3, [sp, #4]
 8015cce:	9708      	str	r7, [sp, #32]
 8015cd0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015cd4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015cd8:	b9b6      	cbnz	r6, 8015d08 <sqrt+0x8c>
 8015cda:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015cde:	4668      	mov	r0, sp
 8015ce0:	f001 fa6c 	bl	80171bc <matherr>
 8015ce4:	b1d0      	cbz	r0, 8015d1c <sqrt+0xa0>
 8015ce6:	9b08      	ldr	r3, [sp, #32]
 8015ce8:	b11b      	cbz	r3, 8015cf2 <sqrt+0x76>
 8015cea:	f7fb fdb7 	bl	801185c <__errno>
 8015cee:	9b08      	ldr	r3, [sp, #32]
 8015cf0:	6003      	str	r3, [r0, #0]
 8015cf2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8015cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8015cfa:	eef0 0a68 	vmov.f32	s1, s17
 8015cfe:	b00b      	add	sp, #44	; 0x2c
 8015d00:	ecbd 8b02 	vpop	{d8}
 8015d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d08:	4642      	mov	r2, r8
 8015d0a:	464b      	mov	r3, r9
 8015d0c:	4640      	mov	r0, r8
 8015d0e:	4649      	mov	r1, r9
 8015d10:	f7ea fd9c 	bl	800084c <__aeabi_ddiv>
 8015d14:	2e02      	cmp	r6, #2
 8015d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015d1a:	d1e0      	bne.n	8015cde <sqrt+0x62>
 8015d1c:	f7fb fd9e 	bl	801185c <__errno>
 8015d20:	2321      	movs	r3, #33	; 0x21
 8015d22:	6003      	str	r3, [r0, #0]
 8015d24:	e7df      	b.n	8015ce6 <sqrt+0x6a>
 8015d26:	bf00      	nop
 8015d28:	20000374 	.word	0x20000374
 8015d2c:	0801841a 	.word	0x0801841a

08015d30 <powf>:
 8015d30:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8015d34:	ed2d 8b04 	vpush	{d8-d9}
 8015d38:	4ca7      	ldr	r4, [pc, #668]	; (8015fd8 <powf+0x2a8>)
 8015d3a:	b08a      	sub	sp, #40	; 0x28
 8015d3c:	eef0 8a40 	vmov.f32	s17, s0
 8015d40:	eeb0 8a60 	vmov.f32	s16, s1
 8015d44:	f000 ff66 	bl	8016c14 <__ieee754_powf>
 8015d48:	f994 5000 	ldrsb.w	r5, [r4]
 8015d4c:	1c6b      	adds	r3, r5, #1
 8015d4e:	eeb0 9a40 	vmov.f32	s18, s0
 8015d52:	4626      	mov	r6, r4
 8015d54:	d05f      	beq.n	8015e16 <powf+0xe6>
 8015d56:	eeb4 8a48 	vcmp.f32	s16, s16
 8015d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5e:	d65a      	bvs.n	8015e16 <powf+0xe6>
 8015d60:	eef4 8a68 	vcmp.f32	s17, s17
 8015d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d68:	d721      	bvc.n	8015dae <powf+0x7e>
 8015d6a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d72:	d150      	bne.n	8015e16 <powf+0xe6>
 8015d74:	2301      	movs	r3, #1
 8015d76:	9300      	str	r3, [sp, #0]
 8015d78:	4b98      	ldr	r3, [pc, #608]	; (8015fdc <powf+0x2ac>)
 8015d7a:	9301      	str	r3, [sp, #4]
 8015d7c:	ee18 0a90 	vmov	r0, s17
 8015d80:	2300      	movs	r3, #0
 8015d82:	9308      	str	r3, [sp, #32]
 8015d84:	f7ea fbe0 	bl	8000548 <__aeabi_f2d>
 8015d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d8c:	ee18 0a10 	vmov	r0, s16
 8015d90:	f7ea fbda 	bl	8000548 <__aeabi_f2d>
 8015d94:	4b92      	ldr	r3, [pc, #584]	; (8015fe0 <powf+0x2b0>)
 8015d96:	2200      	movs	r2, #0
 8015d98:	2d02      	cmp	r5, #2
 8015d9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015da2:	d032      	beq.n	8015e0a <powf+0xda>
 8015da4:	4668      	mov	r0, sp
 8015da6:	f001 fa09 	bl	80171bc <matherr>
 8015daa:	bb40      	cbnz	r0, 8015dfe <powf+0xce>
 8015dac:	e065      	b.n	8015e7a <powf+0x14a>
 8015dae:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8015fe4 <powf+0x2b4>
 8015db2:	eef4 8a69 	vcmp.f32	s17, s19
 8015db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dba:	d163      	bne.n	8015e84 <powf+0x154>
 8015dbc:	eeb4 8a69 	vcmp.f32	s16, s19
 8015dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc4:	d12e      	bne.n	8015e24 <powf+0xf4>
 8015dc6:	2301      	movs	r3, #1
 8015dc8:	9300      	str	r3, [sp, #0]
 8015dca:	4b84      	ldr	r3, [pc, #528]	; (8015fdc <powf+0x2ac>)
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	ee18 0a90 	vmov	r0, s17
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	9308      	str	r3, [sp, #32]
 8015dd6:	f7ea fbb7 	bl	8000548 <__aeabi_f2d>
 8015dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015dde:	ee18 0a10 	vmov	r0, s16
 8015de2:	f7ea fbb1 	bl	8000548 <__aeabi_f2d>
 8015de6:	2200      	movs	r2, #0
 8015de8:	2300      	movs	r3, #0
 8015dea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015dee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015df2:	2d00      	cmp	r5, #0
 8015df4:	d0d6      	beq.n	8015da4 <powf+0x74>
 8015df6:	4b7a      	ldr	r3, [pc, #488]	; (8015fe0 <powf+0x2b0>)
 8015df8:	2200      	movs	r2, #0
 8015dfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015dfe:	9b08      	ldr	r3, [sp, #32]
 8015e00:	b11b      	cbz	r3, 8015e0a <powf+0xda>
 8015e02:	f7fb fd2b 	bl	801185c <__errno>
 8015e06:	9b08      	ldr	r3, [sp, #32]
 8015e08:	6003      	str	r3, [r0, #0]
 8015e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e0e:	f7ea feeb 	bl	8000be8 <__aeabi_d2f>
 8015e12:	ee09 0a10 	vmov	s18, r0
 8015e16:	eeb0 0a49 	vmov.f32	s0, s18
 8015e1a:	b00a      	add	sp, #40	; 0x28
 8015e1c:	ecbd 8b04 	vpop	{d8-d9}
 8015e20:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8015e24:	eeb0 0a48 	vmov.f32	s0, s16
 8015e28:	f001 fad3 	bl	80173d2 <finitef>
 8015e2c:	2800      	cmp	r0, #0
 8015e2e:	d0f2      	beq.n	8015e16 <powf+0xe6>
 8015e30:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e38:	d5ed      	bpl.n	8015e16 <powf+0xe6>
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	4b67      	ldr	r3, [pc, #412]	; (8015fdc <powf+0x2ac>)
 8015e40:	9301      	str	r3, [sp, #4]
 8015e42:	ee18 0a90 	vmov	r0, s17
 8015e46:	2300      	movs	r3, #0
 8015e48:	9308      	str	r3, [sp, #32]
 8015e4a:	f7ea fb7d 	bl	8000548 <__aeabi_f2d>
 8015e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e52:	ee18 0a10 	vmov	r0, s16
 8015e56:	f7ea fb77 	bl	8000548 <__aeabi_f2d>
 8015e5a:	f994 3000 	ldrsb.w	r3, [r4]
 8015e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e62:	b923      	cbnz	r3, 8015e6e <powf+0x13e>
 8015e64:	2200      	movs	r2, #0
 8015e66:	2300      	movs	r3, #0
 8015e68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015e6c:	e79a      	b.n	8015da4 <powf+0x74>
 8015e6e:	495e      	ldr	r1, [pc, #376]	; (8015fe8 <powf+0x2b8>)
 8015e70:	2000      	movs	r0, #0
 8015e72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015e76:	2b02      	cmp	r3, #2
 8015e78:	d194      	bne.n	8015da4 <powf+0x74>
 8015e7a:	f7fb fcef 	bl	801185c <__errno>
 8015e7e:	2321      	movs	r3, #33	; 0x21
 8015e80:	6003      	str	r3, [r0, #0]
 8015e82:	e7bc      	b.n	8015dfe <powf+0xce>
 8015e84:	f001 faa5 	bl	80173d2 <finitef>
 8015e88:	4605      	mov	r5, r0
 8015e8a:	2800      	cmp	r0, #0
 8015e8c:	d173      	bne.n	8015f76 <powf+0x246>
 8015e8e:	eeb0 0a68 	vmov.f32	s0, s17
 8015e92:	f001 fa9e 	bl	80173d2 <finitef>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d06d      	beq.n	8015f76 <powf+0x246>
 8015e9a:	eeb0 0a48 	vmov.f32	s0, s16
 8015e9e:	f001 fa98 	bl	80173d2 <finitef>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	d067      	beq.n	8015f76 <powf+0x246>
 8015ea6:	ee18 0a90 	vmov	r0, s17
 8015eaa:	f7ea fb4d 	bl	8000548 <__aeabi_f2d>
 8015eae:	4680      	mov	r8, r0
 8015eb0:	ee18 0a10 	vmov	r0, s16
 8015eb4:	4689      	mov	r9, r1
 8015eb6:	f7ea fb47 	bl	8000548 <__aeabi_f2d>
 8015eba:	eeb4 9a49 	vcmp.f32	s18, s18
 8015ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec2:	f994 4000 	ldrsb.w	r4, [r4]
 8015ec6:	4b45      	ldr	r3, [pc, #276]	; (8015fdc <powf+0x2ac>)
 8015ec8:	d713      	bvc.n	8015ef2 <powf+0x1c2>
 8015eca:	2201      	movs	r2, #1
 8015ecc:	e9cd 2300 	strd	r2, r3, [sp]
 8015ed0:	9508      	str	r5, [sp, #32]
 8015ed2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015ed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015eda:	2c00      	cmp	r4, #0
 8015edc:	d0c2      	beq.n	8015e64 <powf+0x134>
 8015ede:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8015ee2:	ee17 0a90 	vmov	r0, s15
 8015ee6:	f7ea fb2f 	bl	8000548 <__aeabi_f2d>
 8015eea:	2c02      	cmp	r4, #2
 8015eec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015ef0:	e7c2      	b.n	8015e78 <powf+0x148>
 8015ef2:	2203      	movs	r2, #3
 8015ef4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015ef8:	e9cd 2300 	strd	r2, r3, [sp]
 8015efc:	9508      	str	r5, [sp, #32]
 8015efe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015f02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f06:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015f0a:	b9fc      	cbnz	r4, 8015f4c <powf+0x21c>
 8015f0c:	4b37      	ldr	r3, [pc, #220]	; (8015fec <powf+0x2bc>)
 8015f0e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015f12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f1e:	d553      	bpl.n	8015fc8 <powf+0x298>
 8015f20:	eeb0 0a48 	vmov.f32	s0, s16
 8015f24:	f001 fa60 	bl	80173e8 <rintf>
 8015f28:	eeb4 0a48 	vcmp.f32	s0, s16
 8015f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f30:	d004      	beq.n	8015f3c <powf+0x20c>
 8015f32:	4b2f      	ldr	r3, [pc, #188]	; (8015ff0 <powf+0x2c0>)
 8015f34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015f38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f3c:	f996 3000 	ldrsb.w	r3, [r6]
 8015f40:	2b02      	cmp	r3, #2
 8015f42:	d141      	bne.n	8015fc8 <powf+0x298>
 8015f44:	f7fb fc8a 	bl	801185c <__errno>
 8015f48:	2322      	movs	r3, #34	; 0x22
 8015f4a:	e799      	b.n	8015e80 <powf+0x150>
 8015f4c:	4b29      	ldr	r3, [pc, #164]	; (8015ff4 <powf+0x2c4>)
 8015f4e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015f52:	2200      	movs	r2, #0
 8015f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f5c:	d5ee      	bpl.n	8015f3c <powf+0x20c>
 8015f5e:	eeb0 0a48 	vmov.f32	s0, s16
 8015f62:	f001 fa41 	bl	80173e8 <rintf>
 8015f66:	eeb4 0a48 	vcmp.f32	s0, s16
 8015f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f6e:	d0e5      	beq.n	8015f3c <powf+0x20c>
 8015f70:	2200      	movs	r2, #0
 8015f72:	4b1d      	ldr	r3, [pc, #116]	; (8015fe8 <powf+0x2b8>)
 8015f74:	e7e0      	b.n	8015f38 <powf+0x208>
 8015f76:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f7e:	f47f af4a 	bne.w	8015e16 <powf+0xe6>
 8015f82:	eeb0 0a68 	vmov.f32	s0, s17
 8015f86:	f001 fa24 	bl	80173d2 <finitef>
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	f43f af43 	beq.w	8015e16 <powf+0xe6>
 8015f90:	eeb0 0a48 	vmov.f32	s0, s16
 8015f94:	f001 fa1d 	bl	80173d2 <finitef>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	f43f af3c 	beq.w	8015e16 <powf+0xe6>
 8015f9e:	2304      	movs	r3, #4
 8015fa0:	9300      	str	r3, [sp, #0]
 8015fa2:	4b0e      	ldr	r3, [pc, #56]	; (8015fdc <powf+0x2ac>)
 8015fa4:	9301      	str	r3, [sp, #4]
 8015fa6:	ee18 0a90 	vmov	r0, s17
 8015faa:	2300      	movs	r3, #0
 8015fac:	9308      	str	r3, [sp, #32]
 8015fae:	f7ea facb 	bl	8000548 <__aeabi_f2d>
 8015fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fb6:	ee18 0a10 	vmov	r0, s16
 8015fba:	f7ea fac5 	bl	8000548 <__aeabi_f2d>
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	e7b7      	b.n	8015f38 <powf+0x208>
 8015fc8:	4668      	mov	r0, sp
 8015fca:	f001 f8f7 	bl	80171bc <matherr>
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	f47f af15 	bne.w	8015dfe <powf+0xce>
 8015fd4:	e7b6      	b.n	8015f44 <powf+0x214>
 8015fd6:	bf00      	nop
 8015fd8:	20000374 	.word	0x20000374
 8015fdc:	0801841f 	.word	0x0801841f
 8015fe0:	3ff00000 	.word	0x3ff00000
 8015fe4:	00000000 	.word	0x00000000
 8015fe8:	fff00000 	.word	0xfff00000
 8015fec:	47efffff 	.word	0x47efffff
 8015ff0:	c7efffff 	.word	0xc7efffff
 8015ff4:	7ff00000 	.word	0x7ff00000

08015ff8 <sqrtf>:
 8015ff8:	b510      	push	{r4, lr}
 8015ffa:	ed2d 8b02 	vpush	{d8}
 8015ffe:	b08a      	sub	sp, #40	; 0x28
 8016000:	eeb0 8a40 	vmov.f32	s16, s0
 8016004:	f001 f8c6 	bl	8017194 <__ieee754_sqrtf>
 8016008:	4b21      	ldr	r3, [pc, #132]	; (8016090 <sqrtf+0x98>)
 801600a:	f993 4000 	ldrsb.w	r4, [r3]
 801600e:	1c63      	adds	r3, r4, #1
 8016010:	d02c      	beq.n	801606c <sqrtf+0x74>
 8016012:	eeb4 8a48 	vcmp.f32	s16, s16
 8016016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801601a:	d627      	bvs.n	801606c <sqrtf+0x74>
 801601c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016024:	d522      	bpl.n	801606c <sqrtf+0x74>
 8016026:	2301      	movs	r3, #1
 8016028:	9300      	str	r3, [sp, #0]
 801602a:	4b1a      	ldr	r3, [pc, #104]	; (8016094 <sqrtf+0x9c>)
 801602c:	9301      	str	r3, [sp, #4]
 801602e:	ee18 0a10 	vmov	r0, s16
 8016032:	2300      	movs	r3, #0
 8016034:	9308      	str	r3, [sp, #32]
 8016036:	f7ea fa87 	bl	8000548 <__aeabi_f2d>
 801603a:	2200      	movs	r2, #0
 801603c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016044:	2300      	movs	r3, #0
 8016046:	b9ac      	cbnz	r4, 8016074 <sqrtf+0x7c>
 8016048:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801604c:	4668      	mov	r0, sp
 801604e:	f001 f8b5 	bl	80171bc <matherr>
 8016052:	b1b8      	cbz	r0, 8016084 <sqrtf+0x8c>
 8016054:	9b08      	ldr	r3, [sp, #32]
 8016056:	b11b      	cbz	r3, 8016060 <sqrtf+0x68>
 8016058:	f7fb fc00 	bl	801185c <__errno>
 801605c:	9b08      	ldr	r3, [sp, #32]
 801605e:	6003      	str	r3, [r0, #0]
 8016060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016064:	f7ea fdc0 	bl	8000be8 <__aeabi_d2f>
 8016068:	ee00 0a10 	vmov	s0, r0
 801606c:	b00a      	add	sp, #40	; 0x28
 801606e:	ecbd 8b02 	vpop	{d8}
 8016072:	bd10      	pop	{r4, pc}
 8016074:	4610      	mov	r0, r2
 8016076:	4619      	mov	r1, r3
 8016078:	f7ea fbe8 	bl	800084c <__aeabi_ddiv>
 801607c:	2c02      	cmp	r4, #2
 801607e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016082:	d1e3      	bne.n	801604c <sqrtf+0x54>
 8016084:	f7fb fbea 	bl	801185c <__errno>
 8016088:	2321      	movs	r3, #33	; 0x21
 801608a:	6003      	str	r3, [r0, #0]
 801608c:	e7e2      	b.n	8016054 <sqrtf+0x5c>
 801608e:	bf00      	nop
 8016090:	20000374 	.word	0x20000374
 8016094:	08018424 	.word	0x08018424

08016098 <__ieee754_pow>:
 8016098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609c:	b091      	sub	sp, #68	; 0x44
 801609e:	ed8d 1b00 	vstr	d1, [sp]
 80160a2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80160a6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80160aa:	ea58 0302 	orrs.w	r3, r8, r2
 80160ae:	ec57 6b10 	vmov	r6, r7, d0
 80160b2:	f000 84be 	beq.w	8016a32 <__ieee754_pow+0x99a>
 80160b6:	4b7a      	ldr	r3, [pc, #488]	; (80162a0 <__ieee754_pow+0x208>)
 80160b8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80160bc:	429c      	cmp	r4, r3
 80160be:	463d      	mov	r5, r7
 80160c0:	ee10 aa10 	vmov	sl, s0
 80160c4:	dc09      	bgt.n	80160da <__ieee754_pow+0x42>
 80160c6:	d103      	bne.n	80160d0 <__ieee754_pow+0x38>
 80160c8:	b93e      	cbnz	r6, 80160da <__ieee754_pow+0x42>
 80160ca:	45a0      	cmp	r8, r4
 80160cc:	dc0d      	bgt.n	80160ea <__ieee754_pow+0x52>
 80160ce:	e001      	b.n	80160d4 <__ieee754_pow+0x3c>
 80160d0:	4598      	cmp	r8, r3
 80160d2:	dc02      	bgt.n	80160da <__ieee754_pow+0x42>
 80160d4:	4598      	cmp	r8, r3
 80160d6:	d10e      	bne.n	80160f6 <__ieee754_pow+0x5e>
 80160d8:	b16a      	cbz	r2, 80160f6 <__ieee754_pow+0x5e>
 80160da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80160de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80160e2:	ea54 030a 	orrs.w	r3, r4, sl
 80160e6:	f000 84a4 	beq.w	8016a32 <__ieee754_pow+0x99a>
 80160ea:	486e      	ldr	r0, [pc, #440]	; (80162a4 <__ieee754_pow+0x20c>)
 80160ec:	b011      	add	sp, #68	; 0x44
 80160ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f2:	f001 b865 	b.w	80171c0 <nan>
 80160f6:	2d00      	cmp	r5, #0
 80160f8:	da53      	bge.n	80161a2 <__ieee754_pow+0x10a>
 80160fa:	4b6b      	ldr	r3, [pc, #428]	; (80162a8 <__ieee754_pow+0x210>)
 80160fc:	4598      	cmp	r8, r3
 80160fe:	dc4d      	bgt.n	801619c <__ieee754_pow+0x104>
 8016100:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016104:	4598      	cmp	r8, r3
 8016106:	dd4c      	ble.n	80161a2 <__ieee754_pow+0x10a>
 8016108:	ea4f 5328 	mov.w	r3, r8, asr #20
 801610c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016110:	2b14      	cmp	r3, #20
 8016112:	dd26      	ble.n	8016162 <__ieee754_pow+0xca>
 8016114:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016118:	fa22 f103 	lsr.w	r1, r2, r3
 801611c:	fa01 f303 	lsl.w	r3, r1, r3
 8016120:	4293      	cmp	r3, r2
 8016122:	d13e      	bne.n	80161a2 <__ieee754_pow+0x10a>
 8016124:	f001 0101 	and.w	r1, r1, #1
 8016128:	f1c1 0b02 	rsb	fp, r1, #2
 801612c:	2a00      	cmp	r2, #0
 801612e:	d15b      	bne.n	80161e8 <__ieee754_pow+0x150>
 8016130:	4b5b      	ldr	r3, [pc, #364]	; (80162a0 <__ieee754_pow+0x208>)
 8016132:	4598      	cmp	r8, r3
 8016134:	d124      	bne.n	8016180 <__ieee754_pow+0xe8>
 8016136:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801613a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801613e:	ea53 030a 	orrs.w	r3, r3, sl
 8016142:	f000 8476 	beq.w	8016a32 <__ieee754_pow+0x99a>
 8016146:	4b59      	ldr	r3, [pc, #356]	; (80162ac <__ieee754_pow+0x214>)
 8016148:	429c      	cmp	r4, r3
 801614a:	dd2d      	ble.n	80161a8 <__ieee754_pow+0x110>
 801614c:	f1b9 0f00 	cmp.w	r9, #0
 8016150:	f280 8473 	bge.w	8016a3a <__ieee754_pow+0x9a2>
 8016154:	2000      	movs	r0, #0
 8016156:	2100      	movs	r1, #0
 8016158:	ec41 0b10 	vmov	d0, r0, r1
 801615c:	b011      	add	sp, #68	; 0x44
 801615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016162:	2a00      	cmp	r2, #0
 8016164:	d13e      	bne.n	80161e4 <__ieee754_pow+0x14c>
 8016166:	f1c3 0314 	rsb	r3, r3, #20
 801616a:	fa48 f103 	asr.w	r1, r8, r3
 801616e:	fa01 f303 	lsl.w	r3, r1, r3
 8016172:	4543      	cmp	r3, r8
 8016174:	f040 8469 	bne.w	8016a4a <__ieee754_pow+0x9b2>
 8016178:	f001 0101 	and.w	r1, r1, #1
 801617c:	f1c1 0b02 	rsb	fp, r1, #2
 8016180:	4b4b      	ldr	r3, [pc, #300]	; (80162b0 <__ieee754_pow+0x218>)
 8016182:	4598      	cmp	r8, r3
 8016184:	d118      	bne.n	80161b8 <__ieee754_pow+0x120>
 8016186:	f1b9 0f00 	cmp.w	r9, #0
 801618a:	f280 845a 	bge.w	8016a42 <__ieee754_pow+0x9aa>
 801618e:	4948      	ldr	r1, [pc, #288]	; (80162b0 <__ieee754_pow+0x218>)
 8016190:	4632      	mov	r2, r6
 8016192:	463b      	mov	r3, r7
 8016194:	2000      	movs	r0, #0
 8016196:	f7ea fb59 	bl	800084c <__aeabi_ddiv>
 801619a:	e7dd      	b.n	8016158 <__ieee754_pow+0xc0>
 801619c:	f04f 0b02 	mov.w	fp, #2
 80161a0:	e7c4      	b.n	801612c <__ieee754_pow+0x94>
 80161a2:	f04f 0b00 	mov.w	fp, #0
 80161a6:	e7c1      	b.n	801612c <__ieee754_pow+0x94>
 80161a8:	f1b9 0f00 	cmp.w	r9, #0
 80161ac:	dad2      	bge.n	8016154 <__ieee754_pow+0xbc>
 80161ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 80161b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80161b6:	e7cf      	b.n	8016158 <__ieee754_pow+0xc0>
 80161b8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80161bc:	d106      	bne.n	80161cc <__ieee754_pow+0x134>
 80161be:	4632      	mov	r2, r6
 80161c0:	463b      	mov	r3, r7
 80161c2:	4610      	mov	r0, r2
 80161c4:	4619      	mov	r1, r3
 80161c6:	f7ea fa17 	bl	80005f8 <__aeabi_dmul>
 80161ca:	e7c5      	b.n	8016158 <__ieee754_pow+0xc0>
 80161cc:	4b39      	ldr	r3, [pc, #228]	; (80162b4 <__ieee754_pow+0x21c>)
 80161ce:	4599      	cmp	r9, r3
 80161d0:	d10a      	bne.n	80161e8 <__ieee754_pow+0x150>
 80161d2:	2d00      	cmp	r5, #0
 80161d4:	db08      	blt.n	80161e8 <__ieee754_pow+0x150>
 80161d6:	ec47 6b10 	vmov	d0, r6, r7
 80161da:	b011      	add	sp, #68	; 0x44
 80161dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e0:	f000 bc68 	b.w	8016ab4 <__ieee754_sqrt>
 80161e4:	f04f 0b00 	mov.w	fp, #0
 80161e8:	ec47 6b10 	vmov	d0, r6, r7
 80161ec:	f000 ffd5 	bl	801719a <fabs>
 80161f0:	ec51 0b10 	vmov	r0, r1, d0
 80161f4:	f1ba 0f00 	cmp.w	sl, #0
 80161f8:	d127      	bne.n	801624a <__ieee754_pow+0x1b2>
 80161fa:	b124      	cbz	r4, 8016206 <__ieee754_pow+0x16e>
 80161fc:	4b2c      	ldr	r3, [pc, #176]	; (80162b0 <__ieee754_pow+0x218>)
 80161fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016202:	429a      	cmp	r2, r3
 8016204:	d121      	bne.n	801624a <__ieee754_pow+0x1b2>
 8016206:	f1b9 0f00 	cmp.w	r9, #0
 801620a:	da05      	bge.n	8016218 <__ieee754_pow+0x180>
 801620c:	4602      	mov	r2, r0
 801620e:	460b      	mov	r3, r1
 8016210:	2000      	movs	r0, #0
 8016212:	4927      	ldr	r1, [pc, #156]	; (80162b0 <__ieee754_pow+0x218>)
 8016214:	f7ea fb1a 	bl	800084c <__aeabi_ddiv>
 8016218:	2d00      	cmp	r5, #0
 801621a:	da9d      	bge.n	8016158 <__ieee754_pow+0xc0>
 801621c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016220:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016224:	ea54 030b 	orrs.w	r3, r4, fp
 8016228:	d108      	bne.n	801623c <__ieee754_pow+0x1a4>
 801622a:	4602      	mov	r2, r0
 801622c:	460b      	mov	r3, r1
 801622e:	4610      	mov	r0, r2
 8016230:	4619      	mov	r1, r3
 8016232:	f7ea f829 	bl	8000288 <__aeabi_dsub>
 8016236:	4602      	mov	r2, r0
 8016238:	460b      	mov	r3, r1
 801623a:	e7ac      	b.n	8016196 <__ieee754_pow+0xfe>
 801623c:	f1bb 0f01 	cmp.w	fp, #1
 8016240:	d18a      	bne.n	8016158 <__ieee754_pow+0xc0>
 8016242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016246:	4619      	mov	r1, r3
 8016248:	e786      	b.n	8016158 <__ieee754_pow+0xc0>
 801624a:	0fed      	lsrs	r5, r5, #31
 801624c:	1e6b      	subs	r3, r5, #1
 801624e:	930d      	str	r3, [sp, #52]	; 0x34
 8016250:	ea5b 0303 	orrs.w	r3, fp, r3
 8016254:	d102      	bne.n	801625c <__ieee754_pow+0x1c4>
 8016256:	4632      	mov	r2, r6
 8016258:	463b      	mov	r3, r7
 801625a:	e7e8      	b.n	801622e <__ieee754_pow+0x196>
 801625c:	4b16      	ldr	r3, [pc, #88]	; (80162b8 <__ieee754_pow+0x220>)
 801625e:	4598      	cmp	r8, r3
 8016260:	f340 80fe 	ble.w	8016460 <__ieee754_pow+0x3c8>
 8016264:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016268:	4598      	cmp	r8, r3
 801626a:	dd0a      	ble.n	8016282 <__ieee754_pow+0x1ea>
 801626c:	4b0f      	ldr	r3, [pc, #60]	; (80162ac <__ieee754_pow+0x214>)
 801626e:	429c      	cmp	r4, r3
 8016270:	dc0d      	bgt.n	801628e <__ieee754_pow+0x1f6>
 8016272:	f1b9 0f00 	cmp.w	r9, #0
 8016276:	f6bf af6d 	bge.w	8016154 <__ieee754_pow+0xbc>
 801627a:	a307      	add	r3, pc, #28	; (adr r3, 8016298 <__ieee754_pow+0x200>)
 801627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016280:	e79f      	b.n	80161c2 <__ieee754_pow+0x12a>
 8016282:	4b0e      	ldr	r3, [pc, #56]	; (80162bc <__ieee754_pow+0x224>)
 8016284:	429c      	cmp	r4, r3
 8016286:	ddf4      	ble.n	8016272 <__ieee754_pow+0x1da>
 8016288:	4b09      	ldr	r3, [pc, #36]	; (80162b0 <__ieee754_pow+0x218>)
 801628a:	429c      	cmp	r4, r3
 801628c:	dd18      	ble.n	80162c0 <__ieee754_pow+0x228>
 801628e:	f1b9 0f00 	cmp.w	r9, #0
 8016292:	dcf2      	bgt.n	801627a <__ieee754_pow+0x1e2>
 8016294:	e75e      	b.n	8016154 <__ieee754_pow+0xbc>
 8016296:	bf00      	nop
 8016298:	8800759c 	.word	0x8800759c
 801629c:	7e37e43c 	.word	0x7e37e43c
 80162a0:	7ff00000 	.word	0x7ff00000
 80162a4:	08018309 	.word	0x08018309
 80162a8:	433fffff 	.word	0x433fffff
 80162ac:	3fefffff 	.word	0x3fefffff
 80162b0:	3ff00000 	.word	0x3ff00000
 80162b4:	3fe00000 	.word	0x3fe00000
 80162b8:	41e00000 	.word	0x41e00000
 80162bc:	3feffffe 	.word	0x3feffffe
 80162c0:	2200      	movs	r2, #0
 80162c2:	4b63      	ldr	r3, [pc, #396]	; (8016450 <__ieee754_pow+0x3b8>)
 80162c4:	f7e9 ffe0 	bl	8000288 <__aeabi_dsub>
 80162c8:	a355      	add	r3, pc, #340	; (adr r3, 8016420 <__ieee754_pow+0x388>)
 80162ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ce:	4604      	mov	r4, r0
 80162d0:	460d      	mov	r5, r1
 80162d2:	f7ea f991 	bl	80005f8 <__aeabi_dmul>
 80162d6:	a354      	add	r3, pc, #336	; (adr r3, 8016428 <__ieee754_pow+0x390>)
 80162d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162dc:	4606      	mov	r6, r0
 80162de:	460f      	mov	r7, r1
 80162e0:	4620      	mov	r0, r4
 80162e2:	4629      	mov	r1, r5
 80162e4:	f7ea f988 	bl	80005f8 <__aeabi_dmul>
 80162e8:	2200      	movs	r2, #0
 80162ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80162ee:	4b59      	ldr	r3, [pc, #356]	; (8016454 <__ieee754_pow+0x3bc>)
 80162f0:	4620      	mov	r0, r4
 80162f2:	4629      	mov	r1, r5
 80162f4:	f7ea f980 	bl	80005f8 <__aeabi_dmul>
 80162f8:	4602      	mov	r2, r0
 80162fa:	460b      	mov	r3, r1
 80162fc:	a14c      	add	r1, pc, #304	; (adr r1, 8016430 <__ieee754_pow+0x398>)
 80162fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016302:	f7e9 ffc1 	bl	8000288 <__aeabi_dsub>
 8016306:	4622      	mov	r2, r4
 8016308:	462b      	mov	r3, r5
 801630a:	f7ea f975 	bl	80005f8 <__aeabi_dmul>
 801630e:	4602      	mov	r2, r0
 8016310:	460b      	mov	r3, r1
 8016312:	2000      	movs	r0, #0
 8016314:	4950      	ldr	r1, [pc, #320]	; (8016458 <__ieee754_pow+0x3c0>)
 8016316:	f7e9 ffb7 	bl	8000288 <__aeabi_dsub>
 801631a:	4622      	mov	r2, r4
 801631c:	462b      	mov	r3, r5
 801631e:	4680      	mov	r8, r0
 8016320:	4689      	mov	r9, r1
 8016322:	4620      	mov	r0, r4
 8016324:	4629      	mov	r1, r5
 8016326:	f7ea f967 	bl	80005f8 <__aeabi_dmul>
 801632a:	4602      	mov	r2, r0
 801632c:	460b      	mov	r3, r1
 801632e:	4640      	mov	r0, r8
 8016330:	4649      	mov	r1, r9
 8016332:	f7ea f961 	bl	80005f8 <__aeabi_dmul>
 8016336:	a340      	add	r3, pc, #256	; (adr r3, 8016438 <__ieee754_pow+0x3a0>)
 8016338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633c:	f7ea f95c 	bl	80005f8 <__aeabi_dmul>
 8016340:	4602      	mov	r2, r0
 8016342:	460b      	mov	r3, r1
 8016344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016348:	f7e9 ff9e 	bl	8000288 <__aeabi_dsub>
 801634c:	4602      	mov	r2, r0
 801634e:	460b      	mov	r3, r1
 8016350:	4604      	mov	r4, r0
 8016352:	460d      	mov	r5, r1
 8016354:	4630      	mov	r0, r6
 8016356:	4639      	mov	r1, r7
 8016358:	f7e9 ff98 	bl	800028c <__adddf3>
 801635c:	2000      	movs	r0, #0
 801635e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016362:	4632      	mov	r2, r6
 8016364:	463b      	mov	r3, r7
 8016366:	f7e9 ff8f 	bl	8000288 <__aeabi_dsub>
 801636a:	4602      	mov	r2, r0
 801636c:	460b      	mov	r3, r1
 801636e:	4620      	mov	r0, r4
 8016370:	4629      	mov	r1, r5
 8016372:	f7e9 ff89 	bl	8000288 <__aeabi_dsub>
 8016376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016378:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801637c:	4313      	orrs	r3, r2
 801637e:	4606      	mov	r6, r0
 8016380:	460f      	mov	r7, r1
 8016382:	f040 81eb 	bne.w	801675c <__ieee754_pow+0x6c4>
 8016386:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016440 <__ieee754_pow+0x3a8>
 801638a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801638e:	2400      	movs	r4, #0
 8016390:	4622      	mov	r2, r4
 8016392:	462b      	mov	r3, r5
 8016394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016398:	ed8d 7b02 	vstr	d7, [sp, #8]
 801639c:	f7e9 ff74 	bl	8000288 <__aeabi_dsub>
 80163a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163a4:	f7ea f928 	bl	80005f8 <__aeabi_dmul>
 80163a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80163ac:	4680      	mov	r8, r0
 80163ae:	4689      	mov	r9, r1
 80163b0:	4630      	mov	r0, r6
 80163b2:	4639      	mov	r1, r7
 80163b4:	f7ea f920 	bl	80005f8 <__aeabi_dmul>
 80163b8:	4602      	mov	r2, r0
 80163ba:	460b      	mov	r3, r1
 80163bc:	4640      	mov	r0, r8
 80163be:	4649      	mov	r1, r9
 80163c0:	f7e9 ff64 	bl	800028c <__adddf3>
 80163c4:	4622      	mov	r2, r4
 80163c6:	462b      	mov	r3, r5
 80163c8:	4680      	mov	r8, r0
 80163ca:	4689      	mov	r9, r1
 80163cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80163d0:	f7ea f912 	bl	80005f8 <__aeabi_dmul>
 80163d4:	460b      	mov	r3, r1
 80163d6:	4604      	mov	r4, r0
 80163d8:	460d      	mov	r5, r1
 80163da:	4602      	mov	r2, r0
 80163dc:	4649      	mov	r1, r9
 80163de:	4640      	mov	r0, r8
 80163e0:	e9cd 4500 	strd	r4, r5, [sp]
 80163e4:	f7e9 ff52 	bl	800028c <__adddf3>
 80163e8:	4b1c      	ldr	r3, [pc, #112]	; (801645c <__ieee754_pow+0x3c4>)
 80163ea:	4299      	cmp	r1, r3
 80163ec:	4606      	mov	r6, r0
 80163ee:	460f      	mov	r7, r1
 80163f0:	468b      	mov	fp, r1
 80163f2:	f340 82f7 	ble.w	80169e4 <__ieee754_pow+0x94c>
 80163f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80163fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80163fe:	4303      	orrs	r3, r0
 8016400:	f000 81ea 	beq.w	80167d8 <__ieee754_pow+0x740>
 8016404:	a310      	add	r3, pc, #64	; (adr r3, 8016448 <__ieee754_pow+0x3b0>)
 8016406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801640e:	f7ea f8f3 	bl	80005f8 <__aeabi_dmul>
 8016412:	a30d      	add	r3, pc, #52	; (adr r3, 8016448 <__ieee754_pow+0x3b0>)
 8016414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016418:	e6d5      	b.n	80161c6 <__ieee754_pow+0x12e>
 801641a:	bf00      	nop
 801641c:	f3af 8000 	nop.w
 8016420:	60000000 	.word	0x60000000
 8016424:	3ff71547 	.word	0x3ff71547
 8016428:	f85ddf44 	.word	0xf85ddf44
 801642c:	3e54ae0b 	.word	0x3e54ae0b
 8016430:	55555555 	.word	0x55555555
 8016434:	3fd55555 	.word	0x3fd55555
 8016438:	652b82fe 	.word	0x652b82fe
 801643c:	3ff71547 	.word	0x3ff71547
 8016440:	00000000 	.word	0x00000000
 8016444:	bff00000 	.word	0xbff00000
 8016448:	8800759c 	.word	0x8800759c
 801644c:	7e37e43c 	.word	0x7e37e43c
 8016450:	3ff00000 	.word	0x3ff00000
 8016454:	3fd00000 	.word	0x3fd00000
 8016458:	3fe00000 	.word	0x3fe00000
 801645c:	408fffff 	.word	0x408fffff
 8016460:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016464:	f04f 0200 	mov.w	r2, #0
 8016468:	da05      	bge.n	8016476 <__ieee754_pow+0x3de>
 801646a:	4bd3      	ldr	r3, [pc, #844]	; (80167b8 <__ieee754_pow+0x720>)
 801646c:	f7ea f8c4 	bl	80005f8 <__aeabi_dmul>
 8016470:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016474:	460c      	mov	r4, r1
 8016476:	1523      	asrs	r3, r4, #20
 8016478:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801647c:	4413      	add	r3, r2
 801647e:	9309      	str	r3, [sp, #36]	; 0x24
 8016480:	4bce      	ldr	r3, [pc, #824]	; (80167bc <__ieee754_pow+0x724>)
 8016482:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016486:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801648a:	429c      	cmp	r4, r3
 801648c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016490:	dd08      	ble.n	80164a4 <__ieee754_pow+0x40c>
 8016492:	4bcb      	ldr	r3, [pc, #812]	; (80167c0 <__ieee754_pow+0x728>)
 8016494:	429c      	cmp	r4, r3
 8016496:	f340 815e 	ble.w	8016756 <__ieee754_pow+0x6be>
 801649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801649c:	3301      	adds	r3, #1
 801649e:	9309      	str	r3, [sp, #36]	; 0x24
 80164a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80164a4:	f04f 0a00 	mov.w	sl, #0
 80164a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80164ac:	930c      	str	r3, [sp, #48]	; 0x30
 80164ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164b0:	4bc4      	ldr	r3, [pc, #784]	; (80167c4 <__ieee754_pow+0x72c>)
 80164b2:	4413      	add	r3, r2
 80164b4:	ed93 7b00 	vldr	d7, [r3]
 80164b8:	4629      	mov	r1, r5
 80164ba:	ec53 2b17 	vmov	r2, r3, d7
 80164be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80164c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80164c6:	f7e9 fedf 	bl	8000288 <__aeabi_dsub>
 80164ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80164ce:	4606      	mov	r6, r0
 80164d0:	460f      	mov	r7, r1
 80164d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80164d6:	f7e9 fed9 	bl	800028c <__adddf3>
 80164da:	4602      	mov	r2, r0
 80164dc:	460b      	mov	r3, r1
 80164de:	2000      	movs	r0, #0
 80164e0:	49b9      	ldr	r1, [pc, #740]	; (80167c8 <__ieee754_pow+0x730>)
 80164e2:	f7ea f9b3 	bl	800084c <__aeabi_ddiv>
 80164e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80164ea:	4602      	mov	r2, r0
 80164ec:	460b      	mov	r3, r1
 80164ee:	4630      	mov	r0, r6
 80164f0:	4639      	mov	r1, r7
 80164f2:	f7ea f881 	bl	80005f8 <__aeabi_dmul>
 80164f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164fa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80164fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016502:	2300      	movs	r3, #0
 8016504:	9302      	str	r3, [sp, #8]
 8016506:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801650a:	106d      	asrs	r5, r5, #1
 801650c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016510:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016514:	2200      	movs	r2, #0
 8016516:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801651a:	4640      	mov	r0, r8
 801651c:	4649      	mov	r1, r9
 801651e:	4614      	mov	r4, r2
 8016520:	461d      	mov	r5, r3
 8016522:	f7ea f869 	bl	80005f8 <__aeabi_dmul>
 8016526:	4602      	mov	r2, r0
 8016528:	460b      	mov	r3, r1
 801652a:	4630      	mov	r0, r6
 801652c:	4639      	mov	r1, r7
 801652e:	f7e9 feab 	bl	8000288 <__aeabi_dsub>
 8016532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016536:	4606      	mov	r6, r0
 8016538:	460f      	mov	r7, r1
 801653a:	4620      	mov	r0, r4
 801653c:	4629      	mov	r1, r5
 801653e:	f7e9 fea3 	bl	8000288 <__aeabi_dsub>
 8016542:	4602      	mov	r2, r0
 8016544:	460b      	mov	r3, r1
 8016546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801654a:	f7e9 fe9d 	bl	8000288 <__aeabi_dsub>
 801654e:	4642      	mov	r2, r8
 8016550:	464b      	mov	r3, r9
 8016552:	f7ea f851 	bl	80005f8 <__aeabi_dmul>
 8016556:	4602      	mov	r2, r0
 8016558:	460b      	mov	r3, r1
 801655a:	4630      	mov	r0, r6
 801655c:	4639      	mov	r1, r7
 801655e:	f7e9 fe93 	bl	8000288 <__aeabi_dsub>
 8016562:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016566:	f7ea f847 	bl	80005f8 <__aeabi_dmul>
 801656a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801656e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016572:	4610      	mov	r0, r2
 8016574:	4619      	mov	r1, r3
 8016576:	f7ea f83f 	bl	80005f8 <__aeabi_dmul>
 801657a:	a37b      	add	r3, pc, #492	; (adr r3, 8016768 <__ieee754_pow+0x6d0>)
 801657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016580:	4604      	mov	r4, r0
 8016582:	460d      	mov	r5, r1
 8016584:	f7ea f838 	bl	80005f8 <__aeabi_dmul>
 8016588:	a379      	add	r3, pc, #484	; (adr r3, 8016770 <__ieee754_pow+0x6d8>)
 801658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801658e:	f7e9 fe7d 	bl	800028c <__adddf3>
 8016592:	4622      	mov	r2, r4
 8016594:	462b      	mov	r3, r5
 8016596:	f7ea f82f 	bl	80005f8 <__aeabi_dmul>
 801659a:	a377      	add	r3, pc, #476	; (adr r3, 8016778 <__ieee754_pow+0x6e0>)
 801659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a0:	f7e9 fe74 	bl	800028c <__adddf3>
 80165a4:	4622      	mov	r2, r4
 80165a6:	462b      	mov	r3, r5
 80165a8:	f7ea f826 	bl	80005f8 <__aeabi_dmul>
 80165ac:	a374      	add	r3, pc, #464	; (adr r3, 8016780 <__ieee754_pow+0x6e8>)
 80165ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b2:	f7e9 fe6b 	bl	800028c <__adddf3>
 80165b6:	4622      	mov	r2, r4
 80165b8:	462b      	mov	r3, r5
 80165ba:	f7ea f81d 	bl	80005f8 <__aeabi_dmul>
 80165be:	a372      	add	r3, pc, #456	; (adr r3, 8016788 <__ieee754_pow+0x6f0>)
 80165c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c4:	f7e9 fe62 	bl	800028c <__adddf3>
 80165c8:	4622      	mov	r2, r4
 80165ca:	462b      	mov	r3, r5
 80165cc:	f7ea f814 	bl	80005f8 <__aeabi_dmul>
 80165d0:	a36f      	add	r3, pc, #444	; (adr r3, 8016790 <__ieee754_pow+0x6f8>)
 80165d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d6:	f7e9 fe59 	bl	800028c <__adddf3>
 80165da:	4622      	mov	r2, r4
 80165dc:	4606      	mov	r6, r0
 80165de:	460f      	mov	r7, r1
 80165e0:	462b      	mov	r3, r5
 80165e2:	4620      	mov	r0, r4
 80165e4:	4629      	mov	r1, r5
 80165e6:	f7ea f807 	bl	80005f8 <__aeabi_dmul>
 80165ea:	4602      	mov	r2, r0
 80165ec:	460b      	mov	r3, r1
 80165ee:	4630      	mov	r0, r6
 80165f0:	4639      	mov	r1, r7
 80165f2:	f7ea f801 	bl	80005f8 <__aeabi_dmul>
 80165f6:	4642      	mov	r2, r8
 80165f8:	4604      	mov	r4, r0
 80165fa:	460d      	mov	r5, r1
 80165fc:	464b      	mov	r3, r9
 80165fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016602:	f7e9 fe43 	bl	800028c <__adddf3>
 8016606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801660a:	f7e9 fff5 	bl	80005f8 <__aeabi_dmul>
 801660e:	4622      	mov	r2, r4
 8016610:	462b      	mov	r3, r5
 8016612:	f7e9 fe3b 	bl	800028c <__adddf3>
 8016616:	4642      	mov	r2, r8
 8016618:	4606      	mov	r6, r0
 801661a:	460f      	mov	r7, r1
 801661c:	464b      	mov	r3, r9
 801661e:	4640      	mov	r0, r8
 8016620:	4649      	mov	r1, r9
 8016622:	f7e9 ffe9 	bl	80005f8 <__aeabi_dmul>
 8016626:	2200      	movs	r2, #0
 8016628:	4b68      	ldr	r3, [pc, #416]	; (80167cc <__ieee754_pow+0x734>)
 801662a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801662e:	f7e9 fe2d 	bl	800028c <__adddf3>
 8016632:	4632      	mov	r2, r6
 8016634:	463b      	mov	r3, r7
 8016636:	f7e9 fe29 	bl	800028c <__adddf3>
 801663a:	9802      	ldr	r0, [sp, #8]
 801663c:	460d      	mov	r5, r1
 801663e:	4604      	mov	r4, r0
 8016640:	4602      	mov	r2, r0
 8016642:	460b      	mov	r3, r1
 8016644:	4640      	mov	r0, r8
 8016646:	4649      	mov	r1, r9
 8016648:	f7e9 ffd6 	bl	80005f8 <__aeabi_dmul>
 801664c:	2200      	movs	r2, #0
 801664e:	4680      	mov	r8, r0
 8016650:	4689      	mov	r9, r1
 8016652:	4b5e      	ldr	r3, [pc, #376]	; (80167cc <__ieee754_pow+0x734>)
 8016654:	4620      	mov	r0, r4
 8016656:	4629      	mov	r1, r5
 8016658:	f7e9 fe16 	bl	8000288 <__aeabi_dsub>
 801665c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016660:	f7e9 fe12 	bl	8000288 <__aeabi_dsub>
 8016664:	4602      	mov	r2, r0
 8016666:	460b      	mov	r3, r1
 8016668:	4630      	mov	r0, r6
 801666a:	4639      	mov	r1, r7
 801666c:	f7e9 fe0c 	bl	8000288 <__aeabi_dsub>
 8016670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016674:	f7e9 ffc0 	bl	80005f8 <__aeabi_dmul>
 8016678:	4622      	mov	r2, r4
 801667a:	4606      	mov	r6, r0
 801667c:	460f      	mov	r7, r1
 801667e:	462b      	mov	r3, r5
 8016680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016684:	f7e9 ffb8 	bl	80005f8 <__aeabi_dmul>
 8016688:	4602      	mov	r2, r0
 801668a:	460b      	mov	r3, r1
 801668c:	4630      	mov	r0, r6
 801668e:	4639      	mov	r1, r7
 8016690:	f7e9 fdfc 	bl	800028c <__adddf3>
 8016694:	4606      	mov	r6, r0
 8016696:	460f      	mov	r7, r1
 8016698:	4602      	mov	r2, r0
 801669a:	460b      	mov	r3, r1
 801669c:	4640      	mov	r0, r8
 801669e:	4649      	mov	r1, r9
 80166a0:	f7e9 fdf4 	bl	800028c <__adddf3>
 80166a4:	9802      	ldr	r0, [sp, #8]
 80166a6:	a33c      	add	r3, pc, #240	; (adr r3, 8016798 <__ieee754_pow+0x700>)
 80166a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ac:	4604      	mov	r4, r0
 80166ae:	460d      	mov	r5, r1
 80166b0:	f7e9 ffa2 	bl	80005f8 <__aeabi_dmul>
 80166b4:	4642      	mov	r2, r8
 80166b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80166ba:	464b      	mov	r3, r9
 80166bc:	4620      	mov	r0, r4
 80166be:	4629      	mov	r1, r5
 80166c0:	f7e9 fde2 	bl	8000288 <__aeabi_dsub>
 80166c4:	4602      	mov	r2, r0
 80166c6:	460b      	mov	r3, r1
 80166c8:	4630      	mov	r0, r6
 80166ca:	4639      	mov	r1, r7
 80166cc:	f7e9 fddc 	bl	8000288 <__aeabi_dsub>
 80166d0:	a333      	add	r3, pc, #204	; (adr r3, 80167a0 <__ieee754_pow+0x708>)
 80166d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d6:	f7e9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80166da:	a333      	add	r3, pc, #204	; (adr r3, 80167a8 <__ieee754_pow+0x710>)
 80166dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e0:	4606      	mov	r6, r0
 80166e2:	460f      	mov	r7, r1
 80166e4:	4620      	mov	r0, r4
 80166e6:	4629      	mov	r1, r5
 80166e8:	f7e9 ff86 	bl	80005f8 <__aeabi_dmul>
 80166ec:	4602      	mov	r2, r0
 80166ee:	460b      	mov	r3, r1
 80166f0:	4630      	mov	r0, r6
 80166f2:	4639      	mov	r1, r7
 80166f4:	f7e9 fdca 	bl	800028c <__adddf3>
 80166f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166fa:	4b35      	ldr	r3, [pc, #212]	; (80167d0 <__ieee754_pow+0x738>)
 80166fc:	4413      	add	r3, r2
 80166fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016702:	f7e9 fdc3 	bl	800028c <__adddf3>
 8016706:	4604      	mov	r4, r0
 8016708:	9809      	ldr	r0, [sp, #36]	; 0x24
 801670a:	460d      	mov	r5, r1
 801670c:	f7e9 ff0a 	bl	8000524 <__aeabi_i2d>
 8016710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016712:	4b30      	ldr	r3, [pc, #192]	; (80167d4 <__ieee754_pow+0x73c>)
 8016714:	4413      	add	r3, r2
 8016716:	e9d3 8900 	ldrd	r8, r9, [r3]
 801671a:	4606      	mov	r6, r0
 801671c:	460f      	mov	r7, r1
 801671e:	4622      	mov	r2, r4
 8016720:	462b      	mov	r3, r5
 8016722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016726:	f7e9 fdb1 	bl	800028c <__adddf3>
 801672a:	4642      	mov	r2, r8
 801672c:	464b      	mov	r3, r9
 801672e:	f7e9 fdad 	bl	800028c <__adddf3>
 8016732:	4632      	mov	r2, r6
 8016734:	463b      	mov	r3, r7
 8016736:	f7e9 fda9 	bl	800028c <__adddf3>
 801673a:	9802      	ldr	r0, [sp, #8]
 801673c:	4632      	mov	r2, r6
 801673e:	463b      	mov	r3, r7
 8016740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016744:	f7e9 fda0 	bl	8000288 <__aeabi_dsub>
 8016748:	4642      	mov	r2, r8
 801674a:	464b      	mov	r3, r9
 801674c:	f7e9 fd9c 	bl	8000288 <__aeabi_dsub>
 8016750:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016754:	e607      	b.n	8016366 <__ieee754_pow+0x2ce>
 8016756:	f04f 0a01 	mov.w	sl, #1
 801675a:	e6a5      	b.n	80164a8 <__ieee754_pow+0x410>
 801675c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80167b0 <__ieee754_pow+0x718>
 8016760:	e613      	b.n	801638a <__ieee754_pow+0x2f2>
 8016762:	bf00      	nop
 8016764:	f3af 8000 	nop.w
 8016768:	4a454eef 	.word	0x4a454eef
 801676c:	3fca7e28 	.word	0x3fca7e28
 8016770:	93c9db65 	.word	0x93c9db65
 8016774:	3fcd864a 	.word	0x3fcd864a
 8016778:	a91d4101 	.word	0xa91d4101
 801677c:	3fd17460 	.word	0x3fd17460
 8016780:	518f264d 	.word	0x518f264d
 8016784:	3fd55555 	.word	0x3fd55555
 8016788:	db6fabff 	.word	0xdb6fabff
 801678c:	3fdb6db6 	.word	0x3fdb6db6
 8016790:	33333303 	.word	0x33333303
 8016794:	3fe33333 	.word	0x3fe33333
 8016798:	e0000000 	.word	0xe0000000
 801679c:	3feec709 	.word	0x3feec709
 80167a0:	dc3a03fd 	.word	0xdc3a03fd
 80167a4:	3feec709 	.word	0x3feec709
 80167a8:	145b01f5 	.word	0x145b01f5
 80167ac:	be3e2fe0 	.word	0xbe3e2fe0
 80167b0:	00000000 	.word	0x00000000
 80167b4:	3ff00000 	.word	0x3ff00000
 80167b8:	43400000 	.word	0x43400000
 80167bc:	0003988e 	.word	0x0003988e
 80167c0:	000bb679 	.word	0x000bb679
 80167c4:	08018430 	.word	0x08018430
 80167c8:	3ff00000 	.word	0x3ff00000
 80167cc:	40080000 	.word	0x40080000
 80167d0:	08018450 	.word	0x08018450
 80167d4:	08018440 	.word	0x08018440
 80167d8:	a3b4      	add	r3, pc, #720	; (adr r3, 8016aac <__ieee754_pow+0xa14>)
 80167da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167de:	4640      	mov	r0, r8
 80167e0:	4649      	mov	r1, r9
 80167e2:	f7e9 fd53 	bl	800028c <__adddf3>
 80167e6:	4622      	mov	r2, r4
 80167e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80167ec:	462b      	mov	r3, r5
 80167ee:	4630      	mov	r0, r6
 80167f0:	4639      	mov	r1, r7
 80167f2:	f7e9 fd49 	bl	8000288 <__aeabi_dsub>
 80167f6:	4602      	mov	r2, r0
 80167f8:	460b      	mov	r3, r1
 80167fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80167fe:	f7ea f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8016802:	2800      	cmp	r0, #0
 8016804:	f47f adfe 	bne.w	8016404 <__ieee754_pow+0x36c>
 8016808:	4aa3      	ldr	r2, [pc, #652]	; (8016a98 <__ieee754_pow+0xa00>)
 801680a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801680e:	4293      	cmp	r3, r2
 8016810:	f340 810a 	ble.w	8016a28 <__ieee754_pow+0x990>
 8016814:	151b      	asrs	r3, r3, #20
 8016816:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801681a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801681e:	fa4a f303 	asr.w	r3, sl, r3
 8016822:	445b      	add	r3, fp
 8016824:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016828:	4e9c      	ldr	r6, [pc, #624]	; (8016a9c <__ieee754_pow+0xa04>)
 801682a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801682e:	4116      	asrs	r6, r2
 8016830:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016834:	2000      	movs	r0, #0
 8016836:	ea23 0106 	bic.w	r1, r3, r6
 801683a:	f1c2 0214 	rsb	r2, r2, #20
 801683e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016842:	fa4a fa02 	asr.w	sl, sl, r2
 8016846:	f1bb 0f00 	cmp.w	fp, #0
 801684a:	4602      	mov	r2, r0
 801684c:	460b      	mov	r3, r1
 801684e:	4620      	mov	r0, r4
 8016850:	4629      	mov	r1, r5
 8016852:	bfb8      	it	lt
 8016854:	f1ca 0a00 	rsblt	sl, sl, #0
 8016858:	f7e9 fd16 	bl	8000288 <__aeabi_dsub>
 801685c:	e9cd 0100 	strd	r0, r1, [sp]
 8016860:	4642      	mov	r2, r8
 8016862:	464b      	mov	r3, r9
 8016864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016868:	f7e9 fd10 	bl	800028c <__adddf3>
 801686c:	2000      	movs	r0, #0
 801686e:	a378      	add	r3, pc, #480	; (adr r3, 8016a50 <__ieee754_pow+0x9b8>)
 8016870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016874:	4604      	mov	r4, r0
 8016876:	460d      	mov	r5, r1
 8016878:	f7e9 febe 	bl	80005f8 <__aeabi_dmul>
 801687c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016880:	4606      	mov	r6, r0
 8016882:	460f      	mov	r7, r1
 8016884:	4620      	mov	r0, r4
 8016886:	4629      	mov	r1, r5
 8016888:	f7e9 fcfe 	bl	8000288 <__aeabi_dsub>
 801688c:	4602      	mov	r2, r0
 801688e:	460b      	mov	r3, r1
 8016890:	4640      	mov	r0, r8
 8016892:	4649      	mov	r1, r9
 8016894:	f7e9 fcf8 	bl	8000288 <__aeabi_dsub>
 8016898:	a36f      	add	r3, pc, #444	; (adr r3, 8016a58 <__ieee754_pow+0x9c0>)
 801689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689e:	f7e9 feab 	bl	80005f8 <__aeabi_dmul>
 80168a2:	a36f      	add	r3, pc, #444	; (adr r3, 8016a60 <__ieee754_pow+0x9c8>)
 80168a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a8:	4680      	mov	r8, r0
 80168aa:	4689      	mov	r9, r1
 80168ac:	4620      	mov	r0, r4
 80168ae:	4629      	mov	r1, r5
 80168b0:	f7e9 fea2 	bl	80005f8 <__aeabi_dmul>
 80168b4:	4602      	mov	r2, r0
 80168b6:	460b      	mov	r3, r1
 80168b8:	4640      	mov	r0, r8
 80168ba:	4649      	mov	r1, r9
 80168bc:	f7e9 fce6 	bl	800028c <__adddf3>
 80168c0:	4604      	mov	r4, r0
 80168c2:	460d      	mov	r5, r1
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	4630      	mov	r0, r6
 80168ca:	4639      	mov	r1, r7
 80168cc:	f7e9 fcde 	bl	800028c <__adddf3>
 80168d0:	4632      	mov	r2, r6
 80168d2:	463b      	mov	r3, r7
 80168d4:	4680      	mov	r8, r0
 80168d6:	4689      	mov	r9, r1
 80168d8:	f7e9 fcd6 	bl	8000288 <__aeabi_dsub>
 80168dc:	4602      	mov	r2, r0
 80168de:	460b      	mov	r3, r1
 80168e0:	4620      	mov	r0, r4
 80168e2:	4629      	mov	r1, r5
 80168e4:	f7e9 fcd0 	bl	8000288 <__aeabi_dsub>
 80168e8:	4642      	mov	r2, r8
 80168ea:	4606      	mov	r6, r0
 80168ec:	460f      	mov	r7, r1
 80168ee:	464b      	mov	r3, r9
 80168f0:	4640      	mov	r0, r8
 80168f2:	4649      	mov	r1, r9
 80168f4:	f7e9 fe80 	bl	80005f8 <__aeabi_dmul>
 80168f8:	a35b      	add	r3, pc, #364	; (adr r3, 8016a68 <__ieee754_pow+0x9d0>)
 80168fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168fe:	4604      	mov	r4, r0
 8016900:	460d      	mov	r5, r1
 8016902:	f7e9 fe79 	bl	80005f8 <__aeabi_dmul>
 8016906:	a35a      	add	r3, pc, #360	; (adr r3, 8016a70 <__ieee754_pow+0x9d8>)
 8016908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690c:	f7e9 fcbc 	bl	8000288 <__aeabi_dsub>
 8016910:	4622      	mov	r2, r4
 8016912:	462b      	mov	r3, r5
 8016914:	f7e9 fe70 	bl	80005f8 <__aeabi_dmul>
 8016918:	a357      	add	r3, pc, #348	; (adr r3, 8016a78 <__ieee754_pow+0x9e0>)
 801691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801691e:	f7e9 fcb5 	bl	800028c <__adddf3>
 8016922:	4622      	mov	r2, r4
 8016924:	462b      	mov	r3, r5
 8016926:	f7e9 fe67 	bl	80005f8 <__aeabi_dmul>
 801692a:	a355      	add	r3, pc, #340	; (adr r3, 8016a80 <__ieee754_pow+0x9e8>)
 801692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016930:	f7e9 fcaa 	bl	8000288 <__aeabi_dsub>
 8016934:	4622      	mov	r2, r4
 8016936:	462b      	mov	r3, r5
 8016938:	f7e9 fe5e 	bl	80005f8 <__aeabi_dmul>
 801693c:	a352      	add	r3, pc, #328	; (adr r3, 8016a88 <__ieee754_pow+0x9f0>)
 801693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016942:	f7e9 fca3 	bl	800028c <__adddf3>
 8016946:	4622      	mov	r2, r4
 8016948:	462b      	mov	r3, r5
 801694a:	f7e9 fe55 	bl	80005f8 <__aeabi_dmul>
 801694e:	4602      	mov	r2, r0
 8016950:	460b      	mov	r3, r1
 8016952:	4640      	mov	r0, r8
 8016954:	4649      	mov	r1, r9
 8016956:	f7e9 fc97 	bl	8000288 <__aeabi_dsub>
 801695a:	4604      	mov	r4, r0
 801695c:	460d      	mov	r5, r1
 801695e:	4602      	mov	r2, r0
 8016960:	460b      	mov	r3, r1
 8016962:	4640      	mov	r0, r8
 8016964:	4649      	mov	r1, r9
 8016966:	f7e9 fe47 	bl	80005f8 <__aeabi_dmul>
 801696a:	2200      	movs	r2, #0
 801696c:	e9cd 0100 	strd	r0, r1, [sp]
 8016970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016974:	4620      	mov	r0, r4
 8016976:	4629      	mov	r1, r5
 8016978:	f7e9 fc86 	bl	8000288 <__aeabi_dsub>
 801697c:	4602      	mov	r2, r0
 801697e:	460b      	mov	r3, r1
 8016980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016984:	f7e9 ff62 	bl	800084c <__aeabi_ddiv>
 8016988:	4632      	mov	r2, r6
 801698a:	4604      	mov	r4, r0
 801698c:	460d      	mov	r5, r1
 801698e:	463b      	mov	r3, r7
 8016990:	4640      	mov	r0, r8
 8016992:	4649      	mov	r1, r9
 8016994:	f7e9 fe30 	bl	80005f8 <__aeabi_dmul>
 8016998:	4632      	mov	r2, r6
 801699a:	463b      	mov	r3, r7
 801699c:	f7e9 fc76 	bl	800028c <__adddf3>
 80169a0:	4602      	mov	r2, r0
 80169a2:	460b      	mov	r3, r1
 80169a4:	4620      	mov	r0, r4
 80169a6:	4629      	mov	r1, r5
 80169a8:	f7e9 fc6e 	bl	8000288 <__aeabi_dsub>
 80169ac:	4642      	mov	r2, r8
 80169ae:	464b      	mov	r3, r9
 80169b0:	f7e9 fc6a 	bl	8000288 <__aeabi_dsub>
 80169b4:	4602      	mov	r2, r0
 80169b6:	460b      	mov	r3, r1
 80169b8:	2000      	movs	r0, #0
 80169ba:	4939      	ldr	r1, [pc, #228]	; (8016aa0 <__ieee754_pow+0xa08>)
 80169bc:	f7e9 fc64 	bl	8000288 <__aeabi_dsub>
 80169c0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80169c4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80169c8:	4602      	mov	r2, r0
 80169ca:	460b      	mov	r3, r1
 80169cc:	da2f      	bge.n	8016a2e <__ieee754_pow+0x996>
 80169ce:	4650      	mov	r0, sl
 80169d0:	ec43 2b10 	vmov	d0, r2, r3
 80169d4:	f000 fc80 	bl	80172d8 <scalbn>
 80169d8:	ec51 0b10 	vmov	r0, r1, d0
 80169dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80169e0:	f7ff bbf1 	b.w	80161c6 <__ieee754_pow+0x12e>
 80169e4:	4b2f      	ldr	r3, [pc, #188]	; (8016aa4 <__ieee754_pow+0xa0c>)
 80169e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80169ea:	429e      	cmp	r6, r3
 80169ec:	f77f af0c 	ble.w	8016808 <__ieee754_pow+0x770>
 80169f0:	4b2d      	ldr	r3, [pc, #180]	; (8016aa8 <__ieee754_pow+0xa10>)
 80169f2:	440b      	add	r3, r1
 80169f4:	4303      	orrs	r3, r0
 80169f6:	d00b      	beq.n	8016a10 <__ieee754_pow+0x978>
 80169f8:	a325      	add	r3, pc, #148	; (adr r3, 8016a90 <__ieee754_pow+0x9f8>)
 80169fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016a02:	f7e9 fdf9 	bl	80005f8 <__aeabi_dmul>
 8016a06:	a322      	add	r3, pc, #136	; (adr r3, 8016a90 <__ieee754_pow+0x9f8>)
 8016a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a0c:	f7ff bbdb 	b.w	80161c6 <__ieee754_pow+0x12e>
 8016a10:	4622      	mov	r2, r4
 8016a12:	462b      	mov	r3, r5
 8016a14:	f7e9 fc38 	bl	8000288 <__aeabi_dsub>
 8016a18:	4642      	mov	r2, r8
 8016a1a:	464b      	mov	r3, r9
 8016a1c:	f7ea f872 	bl	8000b04 <__aeabi_dcmpge>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	f43f aef1 	beq.w	8016808 <__ieee754_pow+0x770>
 8016a26:	e7e7      	b.n	80169f8 <__ieee754_pow+0x960>
 8016a28:	f04f 0a00 	mov.w	sl, #0
 8016a2c:	e718      	b.n	8016860 <__ieee754_pow+0x7c8>
 8016a2e:	4621      	mov	r1, r4
 8016a30:	e7d4      	b.n	80169dc <__ieee754_pow+0x944>
 8016a32:	2000      	movs	r0, #0
 8016a34:	491a      	ldr	r1, [pc, #104]	; (8016aa0 <__ieee754_pow+0xa08>)
 8016a36:	f7ff bb8f 	b.w	8016158 <__ieee754_pow+0xc0>
 8016a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a3e:	f7ff bb8b 	b.w	8016158 <__ieee754_pow+0xc0>
 8016a42:	4630      	mov	r0, r6
 8016a44:	4639      	mov	r1, r7
 8016a46:	f7ff bb87 	b.w	8016158 <__ieee754_pow+0xc0>
 8016a4a:	4693      	mov	fp, r2
 8016a4c:	f7ff bb98 	b.w	8016180 <__ieee754_pow+0xe8>
 8016a50:	00000000 	.word	0x00000000
 8016a54:	3fe62e43 	.word	0x3fe62e43
 8016a58:	fefa39ef 	.word	0xfefa39ef
 8016a5c:	3fe62e42 	.word	0x3fe62e42
 8016a60:	0ca86c39 	.word	0x0ca86c39
 8016a64:	be205c61 	.word	0xbe205c61
 8016a68:	72bea4d0 	.word	0x72bea4d0
 8016a6c:	3e663769 	.word	0x3e663769
 8016a70:	c5d26bf1 	.word	0xc5d26bf1
 8016a74:	3ebbbd41 	.word	0x3ebbbd41
 8016a78:	af25de2c 	.word	0xaf25de2c
 8016a7c:	3f11566a 	.word	0x3f11566a
 8016a80:	16bebd93 	.word	0x16bebd93
 8016a84:	3f66c16c 	.word	0x3f66c16c
 8016a88:	5555553e 	.word	0x5555553e
 8016a8c:	3fc55555 	.word	0x3fc55555
 8016a90:	c2f8f359 	.word	0xc2f8f359
 8016a94:	01a56e1f 	.word	0x01a56e1f
 8016a98:	3fe00000 	.word	0x3fe00000
 8016a9c:	000fffff 	.word	0x000fffff
 8016aa0:	3ff00000 	.word	0x3ff00000
 8016aa4:	4090cbff 	.word	0x4090cbff
 8016aa8:	3f6f3400 	.word	0x3f6f3400
 8016aac:	652b82fe 	.word	0x652b82fe
 8016ab0:	3c971547 	.word	0x3c971547

08016ab4 <__ieee754_sqrt>:
 8016ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab8:	4955      	ldr	r1, [pc, #340]	; (8016c10 <__ieee754_sqrt+0x15c>)
 8016aba:	ec55 4b10 	vmov	r4, r5, d0
 8016abe:	43a9      	bics	r1, r5
 8016ac0:	462b      	mov	r3, r5
 8016ac2:	462a      	mov	r2, r5
 8016ac4:	d112      	bne.n	8016aec <__ieee754_sqrt+0x38>
 8016ac6:	ee10 2a10 	vmov	r2, s0
 8016aca:	ee10 0a10 	vmov	r0, s0
 8016ace:	4629      	mov	r1, r5
 8016ad0:	f7e9 fd92 	bl	80005f8 <__aeabi_dmul>
 8016ad4:	4602      	mov	r2, r0
 8016ad6:	460b      	mov	r3, r1
 8016ad8:	4620      	mov	r0, r4
 8016ada:	4629      	mov	r1, r5
 8016adc:	f7e9 fbd6 	bl	800028c <__adddf3>
 8016ae0:	4604      	mov	r4, r0
 8016ae2:	460d      	mov	r5, r1
 8016ae4:	ec45 4b10 	vmov	d0, r4, r5
 8016ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aec:	2d00      	cmp	r5, #0
 8016aee:	ee10 0a10 	vmov	r0, s0
 8016af2:	4621      	mov	r1, r4
 8016af4:	dc0f      	bgt.n	8016b16 <__ieee754_sqrt+0x62>
 8016af6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016afa:	4330      	orrs	r0, r6
 8016afc:	d0f2      	beq.n	8016ae4 <__ieee754_sqrt+0x30>
 8016afe:	b155      	cbz	r5, 8016b16 <__ieee754_sqrt+0x62>
 8016b00:	ee10 2a10 	vmov	r2, s0
 8016b04:	4620      	mov	r0, r4
 8016b06:	4629      	mov	r1, r5
 8016b08:	f7e9 fbbe 	bl	8000288 <__aeabi_dsub>
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	460b      	mov	r3, r1
 8016b10:	f7e9 fe9c 	bl	800084c <__aeabi_ddiv>
 8016b14:	e7e4      	b.n	8016ae0 <__ieee754_sqrt+0x2c>
 8016b16:	151b      	asrs	r3, r3, #20
 8016b18:	d073      	beq.n	8016c02 <__ieee754_sqrt+0x14e>
 8016b1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016b1e:	07dd      	lsls	r5, r3, #31
 8016b20:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016b24:	bf48      	it	mi
 8016b26:	0fc8      	lsrmi	r0, r1, #31
 8016b28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016b2c:	bf44      	itt	mi
 8016b2e:	0049      	lslmi	r1, r1, #1
 8016b30:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016b34:	2500      	movs	r5, #0
 8016b36:	1058      	asrs	r0, r3, #1
 8016b38:	0fcb      	lsrs	r3, r1, #31
 8016b3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016b3e:	0049      	lsls	r1, r1, #1
 8016b40:	2316      	movs	r3, #22
 8016b42:	462c      	mov	r4, r5
 8016b44:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016b48:	19a7      	adds	r7, r4, r6
 8016b4a:	4297      	cmp	r7, r2
 8016b4c:	bfde      	ittt	le
 8016b4e:	19bc      	addle	r4, r7, r6
 8016b50:	1bd2      	suble	r2, r2, r7
 8016b52:	19ad      	addle	r5, r5, r6
 8016b54:	0fcf      	lsrs	r7, r1, #31
 8016b56:	3b01      	subs	r3, #1
 8016b58:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016b5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016b60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016b64:	d1f0      	bne.n	8016b48 <__ieee754_sqrt+0x94>
 8016b66:	f04f 0c20 	mov.w	ip, #32
 8016b6a:	469e      	mov	lr, r3
 8016b6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016b70:	42a2      	cmp	r2, r4
 8016b72:	eb06 070e 	add.w	r7, r6, lr
 8016b76:	dc02      	bgt.n	8016b7e <__ieee754_sqrt+0xca>
 8016b78:	d112      	bne.n	8016ba0 <__ieee754_sqrt+0xec>
 8016b7a:	428f      	cmp	r7, r1
 8016b7c:	d810      	bhi.n	8016ba0 <__ieee754_sqrt+0xec>
 8016b7e:	2f00      	cmp	r7, #0
 8016b80:	eb07 0e06 	add.w	lr, r7, r6
 8016b84:	da42      	bge.n	8016c0c <__ieee754_sqrt+0x158>
 8016b86:	f1be 0f00 	cmp.w	lr, #0
 8016b8a:	db3f      	blt.n	8016c0c <__ieee754_sqrt+0x158>
 8016b8c:	f104 0801 	add.w	r8, r4, #1
 8016b90:	1b12      	subs	r2, r2, r4
 8016b92:	428f      	cmp	r7, r1
 8016b94:	bf88      	it	hi
 8016b96:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8016b9a:	1bc9      	subs	r1, r1, r7
 8016b9c:	4433      	add	r3, r6
 8016b9e:	4644      	mov	r4, r8
 8016ba0:	0052      	lsls	r2, r2, #1
 8016ba2:	f1bc 0c01 	subs.w	ip, ip, #1
 8016ba6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016baa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016bae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016bb2:	d1dd      	bne.n	8016b70 <__ieee754_sqrt+0xbc>
 8016bb4:	430a      	orrs	r2, r1
 8016bb6:	d006      	beq.n	8016bc6 <__ieee754_sqrt+0x112>
 8016bb8:	1c5c      	adds	r4, r3, #1
 8016bba:	bf13      	iteet	ne
 8016bbc:	3301      	addne	r3, #1
 8016bbe:	3501      	addeq	r5, #1
 8016bc0:	4663      	moveq	r3, ip
 8016bc2:	f023 0301 	bicne.w	r3, r3, #1
 8016bc6:	106a      	asrs	r2, r5, #1
 8016bc8:	085b      	lsrs	r3, r3, #1
 8016bca:	07e9      	lsls	r1, r5, #31
 8016bcc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016bd0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016bd4:	bf48      	it	mi
 8016bd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016bda:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016bde:	461c      	mov	r4, r3
 8016be0:	e780      	b.n	8016ae4 <__ieee754_sqrt+0x30>
 8016be2:	0aca      	lsrs	r2, r1, #11
 8016be4:	3815      	subs	r0, #21
 8016be6:	0549      	lsls	r1, r1, #21
 8016be8:	2a00      	cmp	r2, #0
 8016bea:	d0fa      	beq.n	8016be2 <__ieee754_sqrt+0x12e>
 8016bec:	02d6      	lsls	r6, r2, #11
 8016bee:	d50a      	bpl.n	8016c06 <__ieee754_sqrt+0x152>
 8016bf0:	f1c3 0420 	rsb	r4, r3, #32
 8016bf4:	fa21 f404 	lsr.w	r4, r1, r4
 8016bf8:	1e5d      	subs	r5, r3, #1
 8016bfa:	4099      	lsls	r1, r3
 8016bfc:	4322      	orrs	r2, r4
 8016bfe:	1b43      	subs	r3, r0, r5
 8016c00:	e78b      	b.n	8016b1a <__ieee754_sqrt+0x66>
 8016c02:	4618      	mov	r0, r3
 8016c04:	e7f0      	b.n	8016be8 <__ieee754_sqrt+0x134>
 8016c06:	0052      	lsls	r2, r2, #1
 8016c08:	3301      	adds	r3, #1
 8016c0a:	e7ef      	b.n	8016bec <__ieee754_sqrt+0x138>
 8016c0c:	46a0      	mov	r8, r4
 8016c0e:	e7bf      	b.n	8016b90 <__ieee754_sqrt+0xdc>
 8016c10:	7ff00000 	.word	0x7ff00000

08016c14 <__ieee754_powf>:
 8016c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c18:	ee10 5a90 	vmov	r5, s1
 8016c1c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8016c20:	ed2d 8b02 	vpush	{d8}
 8016c24:	eeb0 8a40 	vmov.f32	s16, s0
 8016c28:	eef0 8a60 	vmov.f32	s17, s1
 8016c2c:	f000 8293 	beq.w	8017156 <__ieee754_powf+0x542>
 8016c30:	ee10 8a10 	vmov	r8, s0
 8016c34:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8016c38:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016c3c:	dc06      	bgt.n	8016c4c <__ieee754_powf+0x38>
 8016c3e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016c42:	dd0a      	ble.n	8016c5a <__ieee754_powf+0x46>
 8016c44:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016c48:	f000 8285 	beq.w	8017156 <__ieee754_powf+0x542>
 8016c4c:	ecbd 8b02 	vpop	{d8}
 8016c50:	48d9      	ldr	r0, [pc, #868]	; (8016fb8 <__ieee754_powf+0x3a4>)
 8016c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c56:	f7fe bd87 	b.w	8015768 <nanf>
 8016c5a:	f1b8 0f00 	cmp.w	r8, #0
 8016c5e:	da1d      	bge.n	8016c9c <__ieee754_powf+0x88>
 8016c60:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8016c64:	da2c      	bge.n	8016cc0 <__ieee754_powf+0xac>
 8016c66:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016c6a:	db30      	blt.n	8016cce <__ieee754_powf+0xba>
 8016c6c:	15fb      	asrs	r3, r7, #23
 8016c6e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016c72:	fa47 f603 	asr.w	r6, r7, r3
 8016c76:	fa06 f303 	lsl.w	r3, r6, r3
 8016c7a:	42bb      	cmp	r3, r7
 8016c7c:	d127      	bne.n	8016cce <__ieee754_powf+0xba>
 8016c7e:	f006 0601 	and.w	r6, r6, #1
 8016c82:	f1c6 0602 	rsb	r6, r6, #2
 8016c86:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016c8a:	d122      	bne.n	8016cd2 <__ieee754_powf+0xbe>
 8016c8c:	2d00      	cmp	r5, #0
 8016c8e:	f280 8268 	bge.w	8017162 <__ieee754_powf+0x54e>
 8016c92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016c96:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8016c9a:	e00d      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016c9c:	2600      	movs	r6, #0
 8016c9e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016ca2:	d1f0      	bne.n	8016c86 <__ieee754_powf+0x72>
 8016ca4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016ca8:	f000 8255 	beq.w	8017156 <__ieee754_powf+0x542>
 8016cac:	dd0a      	ble.n	8016cc4 <__ieee754_powf+0xb0>
 8016cae:	2d00      	cmp	r5, #0
 8016cb0:	f280 8254 	bge.w	801715c <__ieee754_powf+0x548>
 8016cb4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8016fbc <__ieee754_powf+0x3a8>
 8016cb8:	ecbd 8b02 	vpop	{d8}
 8016cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc0:	2602      	movs	r6, #2
 8016cc2:	e7ec      	b.n	8016c9e <__ieee754_powf+0x8a>
 8016cc4:	2d00      	cmp	r5, #0
 8016cc6:	daf5      	bge.n	8016cb4 <__ieee754_powf+0xa0>
 8016cc8:	eeb1 0a68 	vneg.f32	s0, s17
 8016ccc:	e7f4      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016cce:	2600      	movs	r6, #0
 8016cd0:	e7d9      	b.n	8016c86 <__ieee754_powf+0x72>
 8016cd2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8016cd6:	d102      	bne.n	8016cde <__ieee754_powf+0xca>
 8016cd8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016cdc:	e7ec      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016cde:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8016ce2:	eeb0 0a48 	vmov.f32	s0, s16
 8016ce6:	d108      	bne.n	8016cfa <__ieee754_powf+0xe6>
 8016ce8:	f1b8 0f00 	cmp.w	r8, #0
 8016cec:	db05      	blt.n	8016cfa <__ieee754_powf+0xe6>
 8016cee:	ecbd 8b02 	vpop	{d8}
 8016cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf6:	f000 ba4d 	b.w	8017194 <__ieee754_sqrtf>
 8016cfa:	f000 fb63 	bl	80173c4 <fabsf>
 8016cfe:	b124      	cbz	r4, 8016d0a <__ieee754_powf+0xf6>
 8016d00:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8016d04:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016d08:	d117      	bne.n	8016d3a <__ieee754_powf+0x126>
 8016d0a:	2d00      	cmp	r5, #0
 8016d0c:	bfbc      	itt	lt
 8016d0e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8016d12:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016d16:	f1b8 0f00 	cmp.w	r8, #0
 8016d1a:	dacd      	bge.n	8016cb8 <__ieee754_powf+0xa4>
 8016d1c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8016d20:	ea54 0306 	orrs.w	r3, r4, r6
 8016d24:	d104      	bne.n	8016d30 <__ieee754_powf+0x11c>
 8016d26:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016d2a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016d2e:	e7c3      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016d30:	2e01      	cmp	r6, #1
 8016d32:	d1c1      	bne.n	8016cb8 <__ieee754_powf+0xa4>
 8016d34:	eeb1 0a40 	vneg.f32	s0, s0
 8016d38:	e7be      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016d3a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8016d3e:	3801      	subs	r0, #1
 8016d40:	ea56 0300 	orrs.w	r3, r6, r0
 8016d44:	d104      	bne.n	8016d50 <__ieee754_powf+0x13c>
 8016d46:	ee38 8a48 	vsub.f32	s16, s16, s16
 8016d4a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016d4e:	e7b3      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016d50:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8016d54:	dd6d      	ble.n	8016e32 <__ieee754_powf+0x21e>
 8016d56:	4b9a      	ldr	r3, [pc, #616]	; (8016fc0 <__ieee754_powf+0x3ac>)
 8016d58:	429c      	cmp	r4, r3
 8016d5a:	dc06      	bgt.n	8016d6a <__ieee754_powf+0x156>
 8016d5c:	2d00      	cmp	r5, #0
 8016d5e:	daa9      	bge.n	8016cb4 <__ieee754_powf+0xa0>
 8016d60:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8016fc4 <__ieee754_powf+0x3b0>
 8016d64:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016d68:	e7a6      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016d6a:	4b97      	ldr	r3, [pc, #604]	; (8016fc8 <__ieee754_powf+0x3b4>)
 8016d6c:	429c      	cmp	r4, r3
 8016d6e:	dd02      	ble.n	8016d76 <__ieee754_powf+0x162>
 8016d70:	2d00      	cmp	r5, #0
 8016d72:	dcf5      	bgt.n	8016d60 <__ieee754_powf+0x14c>
 8016d74:	e79e      	b.n	8016cb4 <__ieee754_powf+0xa0>
 8016d76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016d7e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8016fcc <__ieee754_powf+0x3b8>
 8016d82:	eef1 6a40 	vneg.f32	s13, s0
 8016d86:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016d8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016d8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016d92:	eee7 7a40 	vfms.f32	s15, s14, s0
 8016d96:	ee60 0a00 	vmul.f32	s1, s0, s0
 8016d9a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8016fd0 <__ieee754_powf+0x3bc>
 8016d9e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8016da2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8016fd4 <__ieee754_powf+0x3c0>
 8016da6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8016daa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016dae:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016fd8 <__ieee754_powf+0x3c4>
 8016db2:	eeb0 6a67 	vmov.f32	s12, s15
 8016db6:	eea0 6a07 	vfma.f32	s12, s0, s14
 8016dba:	ee16 3a10 	vmov	r3, s12
 8016dbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016dc2:	f023 030f 	bic.w	r3, r3, #15
 8016dc6:	ee00 3a90 	vmov	s1, r3
 8016dca:	eee6 0a87 	vfma.f32	s1, s13, s14
 8016dce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016dd2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8016dd6:	f025 050f 	bic.w	r5, r5, #15
 8016dda:	ee07 5a10 	vmov	s14, r5
 8016dde:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8016de2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016de6:	ee07 3a90 	vmov	s15, r3
 8016dea:	eee7 0a27 	vfma.f32	s1, s14, s15
 8016dee:	3e01      	subs	r6, #1
 8016df0:	ea56 0200 	orrs.w	r2, r6, r0
 8016df4:	ee07 5a10 	vmov	s14, r5
 8016df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016dfc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016e00:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8016e04:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016e08:	ee17 4a10 	vmov	r4, s14
 8016e0c:	bf08      	it	eq
 8016e0e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8016e12:	2c00      	cmp	r4, #0
 8016e14:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016e18:	f340 8184 	ble.w	8017124 <__ieee754_powf+0x510>
 8016e1c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8016e20:	f340 80fc 	ble.w	801701c <__ieee754_powf+0x408>
 8016e24:	eddf 7a67 	vldr	s15, [pc, #412]	; 8016fc4 <__ieee754_powf+0x3b0>
 8016e28:	ee28 0a27 	vmul.f32	s0, s16, s15
 8016e2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016e30:	e742      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8016e32:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8016e36:	bfbf      	itttt	lt
 8016e38:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8016fdc <__ieee754_powf+0x3c8>
 8016e3c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016e40:	f06f 0217 	mvnlt.w	r2, #23
 8016e44:	ee17 4a90 	vmovlt	r4, s15
 8016e48:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8016e4c:	bfa8      	it	ge
 8016e4e:	2200      	movge	r2, #0
 8016e50:	3b7f      	subs	r3, #127	; 0x7f
 8016e52:	4413      	add	r3, r2
 8016e54:	4a62      	ldr	r2, [pc, #392]	; (8016fe0 <__ieee754_powf+0x3cc>)
 8016e56:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8016e5a:	4294      	cmp	r4, r2
 8016e5c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8016e60:	dd06      	ble.n	8016e70 <__ieee754_powf+0x25c>
 8016e62:	4a60      	ldr	r2, [pc, #384]	; (8016fe4 <__ieee754_powf+0x3d0>)
 8016e64:	4294      	cmp	r4, r2
 8016e66:	f340 80a5 	ble.w	8016fb4 <__ieee754_powf+0x3a0>
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8016e70:	2400      	movs	r4, #0
 8016e72:	4a5d      	ldr	r2, [pc, #372]	; (8016fe8 <__ieee754_powf+0x3d4>)
 8016e74:	00a7      	lsls	r7, r4, #2
 8016e76:	443a      	add	r2, r7
 8016e78:	ee07 1a90 	vmov	s15, r1
 8016e7c:	ed92 7a00 	vldr	s14, [r2]
 8016e80:	4a5a      	ldr	r2, [pc, #360]	; (8016fec <__ieee754_powf+0x3d8>)
 8016e82:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016e86:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8016e8a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8016e8e:	1049      	asrs	r1, r1, #1
 8016e90:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016e94:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016e98:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8016e9c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8016ea0:	ee06 1a10 	vmov	s12, r1
 8016ea4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8016ea8:	ee14 ca90 	vmov	ip, s9
 8016eac:	ea02 0c0c 	and.w	ip, r2, ip
 8016eb0:	ee05 ca10 	vmov	s10, ip
 8016eb4:	eeb1 4a45 	vneg.f32	s8, s10
 8016eb8:	eee4 5a06 	vfma.f32	s11, s8, s12
 8016ebc:	ee36 6a47 	vsub.f32	s12, s12, s14
 8016ec0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016ff0 <__ieee754_powf+0x3dc>
 8016ec4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016ec8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8016ecc:	eee4 5a06 	vfma.f32	s11, s8, s12
 8016ed0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8016ed4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8016ed8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016ff4 <__ieee754_powf+0x3e0>
 8016edc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016ee0:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016ff8 <__ieee754_powf+0x3e4>
 8016ee4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016ee8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8016fcc <__ieee754_powf+0x3b8>
 8016eec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016ef0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016ffc <__ieee754_powf+0x3e8>
 8016ef4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016ef8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8017000 <__ieee754_powf+0x3ec>
 8016efc:	ee75 6a24 	vadd.f32	s13, s10, s9
 8016f00:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016f04:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016f08:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8016f0c:	eef0 7a65 	vmov.f32	s15, s11
 8016f10:	eee3 6a87 	vfma.f32	s13, s7, s14
 8016f14:	eee5 7a05 	vfma.f32	s15, s10, s10
 8016f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f1c:	ee17 1a90 	vmov	r1, s15
 8016f20:	4011      	ands	r1, r2
 8016f22:	ee07 1a90 	vmov	s15, r1
 8016f26:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8016f2a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8017004 <__ieee754_powf+0x3f0>
 8016f2e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8016f32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016f36:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016f3a:	eea7 7a86 	vfma.f32	s14, s15, s12
 8016f3e:	eeb0 6a47 	vmov.f32	s12, s14
 8016f42:	eea5 6a27 	vfma.f32	s12, s10, s15
 8016f46:	ee16 1a10 	vmov	r1, s12
 8016f4a:	4011      	ands	r1, r2
 8016f4c:	ee06 1a90 	vmov	s13, r1
 8016f50:	eee4 6a27 	vfma.f32	s13, s8, s15
 8016f54:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8017008 <__ieee754_powf+0x3f4>
 8016f58:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016f5c:	ee06 1a10 	vmov	s12, r1
 8016f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f64:	eddf 7a29 	vldr	s15, [pc, #164]	; 801700c <__ieee754_powf+0x3f8>
 8016f68:	4929      	ldr	r1, [pc, #164]	; (8017010 <__ieee754_powf+0x3fc>)
 8016f6a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016f6e:	4439      	add	r1, r7
 8016f70:	edd1 7a00 	vldr	s15, [r1]
 8016f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f78:	ee07 3a90 	vmov	s15, r3
 8016f7c:	eef0 0a47 	vmov.f32	s1, s14
 8016f80:	4b24      	ldr	r3, [pc, #144]	; (8017014 <__ieee754_powf+0x400>)
 8016f82:	eee6 0a25 	vfma.f32	s1, s12, s11
 8016f86:	443b      	add	r3, r7
 8016f88:	ed93 5a00 	vldr	s10, [r3]
 8016f8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f90:	ee70 0a85 	vadd.f32	s1, s1, s10
 8016f94:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8016f98:	ee17 3a90 	vmov	r3, s15
 8016f9c:	4013      	ands	r3, r2
 8016f9e:	ee07 3a90 	vmov	s15, r3
 8016fa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016fa6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016faa:	eee6 7a65 	vfms.f32	s15, s12, s11
 8016fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016fb2:	e70e      	b.n	8016dd2 <__ieee754_powf+0x1be>
 8016fb4:	2401      	movs	r4, #1
 8016fb6:	e75c      	b.n	8016e72 <__ieee754_powf+0x25e>
 8016fb8:	08018309 	.word	0x08018309
 8016fbc:	00000000 	.word	0x00000000
 8016fc0:	3f7ffff7 	.word	0x3f7ffff7
 8016fc4:	7149f2ca 	.word	0x7149f2ca
 8016fc8:	3f800007 	.word	0x3f800007
 8016fcc:	3eaaaaab 	.word	0x3eaaaaab
 8016fd0:	36eca570 	.word	0x36eca570
 8016fd4:	3fb8aa3b 	.word	0x3fb8aa3b
 8016fd8:	3fb8aa00 	.word	0x3fb8aa00
 8016fdc:	4b800000 	.word	0x4b800000
 8016fe0:	001cc471 	.word	0x001cc471
 8016fe4:	005db3d6 	.word	0x005db3d6
 8016fe8:	08018460 	.word	0x08018460
 8016fec:	fffff000 	.word	0xfffff000
 8016ff0:	3e6c3255 	.word	0x3e6c3255
 8016ff4:	3e53f142 	.word	0x3e53f142
 8016ff8:	3e8ba305 	.word	0x3e8ba305
 8016ffc:	3edb6db7 	.word	0x3edb6db7
 8017000:	3f19999a 	.word	0x3f19999a
 8017004:	3f763800 	.word	0x3f763800
 8017008:	3f76384f 	.word	0x3f76384f
 801700c:	369dc3a0 	.word	0x369dc3a0
 8017010:	08018470 	.word	0x08018470
 8017014:	08018468 	.word	0x08018468
 8017018:	3338aa3c 	.word	0x3338aa3c
 801701c:	f040 8092 	bne.w	8017144 <__ieee754_powf+0x530>
 8017020:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8017018 <__ieee754_powf+0x404>
 8017024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017028:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801702c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017034:	f73f aef6 	bgt.w	8016e24 <__ieee754_powf+0x210>
 8017038:	15db      	asrs	r3, r3, #23
 801703a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801703e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8017042:	4103      	asrs	r3, r0
 8017044:	4423      	add	r3, r4
 8017046:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801704a:	4947      	ldr	r1, [pc, #284]	; (8017168 <__ieee754_powf+0x554>)
 801704c:	3a7f      	subs	r2, #127	; 0x7f
 801704e:	4111      	asrs	r1, r2
 8017050:	ea23 0101 	bic.w	r1, r3, r1
 8017054:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017058:	ee07 1a10 	vmov	s14, r1
 801705c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017060:	f1c2 0217 	rsb	r2, r2, #23
 8017064:	4110      	asrs	r0, r2
 8017066:	2c00      	cmp	r4, #0
 8017068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801706c:	bfb8      	it	lt
 801706e:	4240      	neglt	r0, r0
 8017070:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8017074:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801716c <__ieee754_powf+0x558>
 8017078:	ee17 3a10 	vmov	r3, s14
 801707c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017080:	f023 030f 	bic.w	r3, r3, #15
 8017084:	ee07 3a10 	vmov	s14, r3
 8017088:	ee77 7a67 	vsub.f32	s15, s14, s15
 801708c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017090:	eddf 7a37 	vldr	s15, [pc, #220]	; 8017170 <__ieee754_powf+0x55c>
 8017094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017098:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801709c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8017174 <__ieee754_powf+0x560>
 80170a0:	eeb0 0a67 	vmov.f32	s0, s15
 80170a4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80170a8:	eeb0 6a40 	vmov.f32	s12, s0
 80170ac:	eea7 6a66 	vfms.f32	s12, s14, s13
 80170b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80170b4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80170b8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8017178 <__ieee754_powf+0x564>
 80170bc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801717c <__ieee754_powf+0x568>
 80170c0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80170c4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8017180 <__ieee754_powf+0x56c>
 80170c8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80170cc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8017184 <__ieee754_powf+0x570>
 80170d0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80170d4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8017188 <__ieee754_powf+0x574>
 80170d8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80170dc:	eeb0 6a40 	vmov.f32	s12, s0
 80170e0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80170e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80170e8:	eeb0 7a46 	vmov.f32	s14, s12
 80170ec:	ee77 6a66 	vsub.f32	s13, s14, s13
 80170f0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80170f4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80170f8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80170fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017100:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017104:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017108:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801710c:	ee10 3a10 	vmov	r3, s0
 8017110:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8017114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017118:	da1a      	bge.n	8017150 <__ieee754_powf+0x53c>
 801711a:	f000 f9bf 	bl	801749c <scalbnf>
 801711e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8017122:	e5c9      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8017124:	4a19      	ldr	r2, [pc, #100]	; (801718c <__ieee754_powf+0x578>)
 8017126:	4293      	cmp	r3, r2
 8017128:	dd02      	ble.n	8017130 <__ieee754_powf+0x51c>
 801712a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8017190 <__ieee754_powf+0x57c>
 801712e:	e67b      	b.n	8016e28 <__ieee754_powf+0x214>
 8017130:	d108      	bne.n	8017144 <__ieee754_powf+0x530>
 8017132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017136:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801713a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801713e:	f6ff af7b 	blt.w	8017038 <__ieee754_powf+0x424>
 8017142:	e7f2      	b.n	801712a <__ieee754_powf+0x516>
 8017144:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8017148:	f73f af76 	bgt.w	8017038 <__ieee754_powf+0x424>
 801714c:	2000      	movs	r0, #0
 801714e:	e78f      	b.n	8017070 <__ieee754_powf+0x45c>
 8017150:	ee00 3a10 	vmov	s0, r3
 8017154:	e7e3      	b.n	801711e <__ieee754_powf+0x50a>
 8017156:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801715a:	e5ad      	b.n	8016cb8 <__ieee754_powf+0xa4>
 801715c:	eeb0 0a68 	vmov.f32	s0, s17
 8017160:	e5aa      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8017162:	eeb0 0a48 	vmov.f32	s0, s16
 8017166:	e5a7      	b.n	8016cb8 <__ieee754_powf+0xa4>
 8017168:	007fffff 	.word	0x007fffff
 801716c:	3f317218 	.word	0x3f317218
 8017170:	35bfbe8c 	.word	0x35bfbe8c
 8017174:	3f317200 	.word	0x3f317200
 8017178:	3331bb4c 	.word	0x3331bb4c
 801717c:	b5ddea0e 	.word	0xb5ddea0e
 8017180:	388ab355 	.word	0x388ab355
 8017184:	bb360b61 	.word	0xbb360b61
 8017188:	3e2aaaab 	.word	0x3e2aaaab
 801718c:	43160000 	.word	0x43160000
 8017190:	0da24260 	.word	0x0da24260

08017194 <__ieee754_sqrtf>:
 8017194:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017198:	4770      	bx	lr

0801719a <fabs>:
 801719a:	ec51 0b10 	vmov	r0, r1, d0
 801719e:	ee10 2a10 	vmov	r2, s0
 80171a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80171a6:	ec43 2b10 	vmov	d0, r2, r3
 80171aa:	4770      	bx	lr

080171ac <finite>:
 80171ac:	ee10 3a90 	vmov	r3, s1
 80171b0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80171b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80171b8:	0fc0      	lsrs	r0, r0, #31
 80171ba:	4770      	bx	lr

080171bc <matherr>:
 80171bc:	2000      	movs	r0, #0
 80171be:	4770      	bx	lr

080171c0 <nan>:
 80171c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80171c8 <nan+0x8>
 80171c4:	4770      	bx	lr
 80171c6:	bf00      	nop
 80171c8:	00000000 	.word	0x00000000
 80171cc:	7ff80000 	.word	0x7ff80000

080171d0 <rint>:
 80171d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171d2:	ec51 0b10 	vmov	r0, r1, d0
 80171d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80171da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80171de:	2e13      	cmp	r6, #19
 80171e0:	460b      	mov	r3, r1
 80171e2:	ee10 4a10 	vmov	r4, s0
 80171e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80171ea:	dc56      	bgt.n	801729a <rint+0xca>
 80171ec:	2e00      	cmp	r6, #0
 80171ee:	da2b      	bge.n	8017248 <rint+0x78>
 80171f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80171f4:	4302      	orrs	r2, r0
 80171f6:	d023      	beq.n	8017240 <rint+0x70>
 80171f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80171fc:	4302      	orrs	r2, r0
 80171fe:	4254      	negs	r4, r2
 8017200:	4314      	orrs	r4, r2
 8017202:	0c4b      	lsrs	r3, r1, #17
 8017204:	0b24      	lsrs	r4, r4, #12
 8017206:	045b      	lsls	r3, r3, #17
 8017208:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801720c:	ea44 0103 	orr.w	r1, r4, r3
 8017210:	460b      	mov	r3, r1
 8017212:	492f      	ldr	r1, [pc, #188]	; (80172d0 <rint+0x100>)
 8017214:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017218:	e9d1 6700 	ldrd	r6, r7, [r1]
 801721c:	4602      	mov	r2, r0
 801721e:	4639      	mov	r1, r7
 8017220:	4630      	mov	r0, r6
 8017222:	f7e9 f833 	bl	800028c <__adddf3>
 8017226:	e9cd 0100 	strd	r0, r1, [sp]
 801722a:	463b      	mov	r3, r7
 801722c:	4632      	mov	r2, r6
 801722e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017232:	f7e9 f829 	bl	8000288 <__aeabi_dsub>
 8017236:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801723a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801723e:	4639      	mov	r1, r7
 8017240:	ec41 0b10 	vmov	d0, r0, r1
 8017244:	b003      	add	sp, #12
 8017246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017248:	4a22      	ldr	r2, [pc, #136]	; (80172d4 <rint+0x104>)
 801724a:	4132      	asrs	r2, r6
 801724c:	ea01 0702 	and.w	r7, r1, r2
 8017250:	4307      	orrs	r7, r0
 8017252:	d0f5      	beq.n	8017240 <rint+0x70>
 8017254:	0852      	lsrs	r2, r2, #1
 8017256:	4011      	ands	r1, r2
 8017258:	430c      	orrs	r4, r1
 801725a:	d00b      	beq.n	8017274 <rint+0xa4>
 801725c:	ea23 0202 	bic.w	r2, r3, r2
 8017260:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017264:	2e13      	cmp	r6, #19
 8017266:	fa43 f306 	asr.w	r3, r3, r6
 801726a:	bf0c      	ite	eq
 801726c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017270:	2400      	movne	r4, #0
 8017272:	4313      	orrs	r3, r2
 8017274:	4916      	ldr	r1, [pc, #88]	; (80172d0 <rint+0x100>)
 8017276:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801727a:	4622      	mov	r2, r4
 801727c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017280:	4620      	mov	r0, r4
 8017282:	4629      	mov	r1, r5
 8017284:	f7e9 f802 	bl	800028c <__adddf3>
 8017288:	e9cd 0100 	strd	r0, r1, [sp]
 801728c:	4622      	mov	r2, r4
 801728e:	462b      	mov	r3, r5
 8017290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017294:	f7e8 fff8 	bl	8000288 <__aeabi_dsub>
 8017298:	e7d2      	b.n	8017240 <rint+0x70>
 801729a:	2e33      	cmp	r6, #51	; 0x33
 801729c:	dd07      	ble.n	80172ae <rint+0xde>
 801729e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80172a2:	d1cd      	bne.n	8017240 <rint+0x70>
 80172a4:	ee10 2a10 	vmov	r2, s0
 80172a8:	f7e8 fff0 	bl	800028c <__adddf3>
 80172ac:	e7c8      	b.n	8017240 <rint+0x70>
 80172ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80172b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80172b6:	40f2      	lsrs	r2, r6
 80172b8:	4210      	tst	r0, r2
 80172ba:	d0c1      	beq.n	8017240 <rint+0x70>
 80172bc:	0852      	lsrs	r2, r2, #1
 80172be:	4210      	tst	r0, r2
 80172c0:	bf1f      	itttt	ne
 80172c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80172c6:	ea20 0202 	bicne.w	r2, r0, r2
 80172ca:	4134      	asrne	r4, r6
 80172cc:	4314      	orrne	r4, r2
 80172ce:	e7d1      	b.n	8017274 <rint+0xa4>
 80172d0:	08018478 	.word	0x08018478
 80172d4:	000fffff 	.word	0x000fffff

080172d8 <scalbn>:
 80172d8:	b570      	push	{r4, r5, r6, lr}
 80172da:	ec55 4b10 	vmov	r4, r5, d0
 80172de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80172e2:	4606      	mov	r6, r0
 80172e4:	462b      	mov	r3, r5
 80172e6:	b9aa      	cbnz	r2, 8017314 <scalbn+0x3c>
 80172e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80172ec:	4323      	orrs	r3, r4
 80172ee:	d03b      	beq.n	8017368 <scalbn+0x90>
 80172f0:	4b31      	ldr	r3, [pc, #196]	; (80173b8 <scalbn+0xe0>)
 80172f2:	4629      	mov	r1, r5
 80172f4:	2200      	movs	r2, #0
 80172f6:	ee10 0a10 	vmov	r0, s0
 80172fa:	f7e9 f97d 	bl	80005f8 <__aeabi_dmul>
 80172fe:	4b2f      	ldr	r3, [pc, #188]	; (80173bc <scalbn+0xe4>)
 8017300:	429e      	cmp	r6, r3
 8017302:	4604      	mov	r4, r0
 8017304:	460d      	mov	r5, r1
 8017306:	da12      	bge.n	801732e <scalbn+0x56>
 8017308:	a327      	add	r3, pc, #156	; (adr r3, 80173a8 <scalbn+0xd0>)
 801730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730e:	f7e9 f973 	bl	80005f8 <__aeabi_dmul>
 8017312:	e009      	b.n	8017328 <scalbn+0x50>
 8017314:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017318:	428a      	cmp	r2, r1
 801731a:	d10c      	bne.n	8017336 <scalbn+0x5e>
 801731c:	ee10 2a10 	vmov	r2, s0
 8017320:	4620      	mov	r0, r4
 8017322:	4629      	mov	r1, r5
 8017324:	f7e8 ffb2 	bl	800028c <__adddf3>
 8017328:	4604      	mov	r4, r0
 801732a:	460d      	mov	r5, r1
 801732c:	e01c      	b.n	8017368 <scalbn+0x90>
 801732e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017332:	460b      	mov	r3, r1
 8017334:	3a36      	subs	r2, #54	; 0x36
 8017336:	4432      	add	r2, r6
 8017338:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801733c:	428a      	cmp	r2, r1
 801733e:	dd0b      	ble.n	8017358 <scalbn+0x80>
 8017340:	ec45 4b11 	vmov	d1, r4, r5
 8017344:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80173b0 <scalbn+0xd8>
 8017348:	f000 f908 	bl	801755c <copysign>
 801734c:	a318      	add	r3, pc, #96	; (adr r3, 80173b0 <scalbn+0xd8>)
 801734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017352:	ec51 0b10 	vmov	r0, r1, d0
 8017356:	e7da      	b.n	801730e <scalbn+0x36>
 8017358:	2a00      	cmp	r2, #0
 801735a:	dd08      	ble.n	801736e <scalbn+0x96>
 801735c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017360:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017364:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017368:	ec45 4b10 	vmov	d0, r4, r5
 801736c:	bd70      	pop	{r4, r5, r6, pc}
 801736e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017372:	da0d      	bge.n	8017390 <scalbn+0xb8>
 8017374:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017378:	429e      	cmp	r6, r3
 801737a:	ec45 4b11 	vmov	d1, r4, r5
 801737e:	dce1      	bgt.n	8017344 <scalbn+0x6c>
 8017380:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80173a8 <scalbn+0xd0>
 8017384:	f000 f8ea 	bl	801755c <copysign>
 8017388:	a307      	add	r3, pc, #28	; (adr r3, 80173a8 <scalbn+0xd0>)
 801738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801738e:	e7e0      	b.n	8017352 <scalbn+0x7a>
 8017390:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017394:	3236      	adds	r2, #54	; 0x36
 8017396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801739a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801739e:	4620      	mov	r0, r4
 80173a0:	4629      	mov	r1, r5
 80173a2:	2200      	movs	r2, #0
 80173a4:	4b06      	ldr	r3, [pc, #24]	; (80173c0 <scalbn+0xe8>)
 80173a6:	e7b2      	b.n	801730e <scalbn+0x36>
 80173a8:	c2f8f359 	.word	0xc2f8f359
 80173ac:	01a56e1f 	.word	0x01a56e1f
 80173b0:	8800759c 	.word	0x8800759c
 80173b4:	7e37e43c 	.word	0x7e37e43c
 80173b8:	43500000 	.word	0x43500000
 80173bc:	ffff3cb0 	.word	0xffff3cb0
 80173c0:	3c900000 	.word	0x3c900000

080173c4 <fabsf>:
 80173c4:	ee10 3a10 	vmov	r3, s0
 80173c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80173cc:	ee00 3a10 	vmov	s0, r3
 80173d0:	4770      	bx	lr

080173d2 <finitef>:
 80173d2:	ee10 3a10 	vmov	r3, s0
 80173d6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80173da:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80173de:	bfac      	ite	ge
 80173e0:	2000      	movge	r0, #0
 80173e2:	2001      	movlt	r0, #1
 80173e4:	4770      	bx	lr
	...

080173e8 <rintf>:
 80173e8:	b513      	push	{r0, r1, r4, lr}
 80173ea:	ee10 1a10 	vmov	r1, s0
 80173ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80173f2:	0ddc      	lsrs	r4, r3, #23
 80173f4:	3c7f      	subs	r4, #127	; 0x7f
 80173f6:	2c16      	cmp	r4, #22
 80173f8:	dc46      	bgt.n	8017488 <rintf+0xa0>
 80173fa:	b32b      	cbz	r3, 8017448 <rintf+0x60>
 80173fc:	2c00      	cmp	r4, #0
 80173fe:	ee10 2a10 	vmov	r2, s0
 8017402:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8017406:	da21      	bge.n	801744c <rintf+0x64>
 8017408:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801740c:	425b      	negs	r3, r3
 801740e:	4a21      	ldr	r2, [pc, #132]	; (8017494 <rintf+0xac>)
 8017410:	0a5b      	lsrs	r3, r3, #9
 8017412:	0d09      	lsrs	r1, r1, #20
 8017414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017418:	0509      	lsls	r1, r1, #20
 801741a:	430b      	orrs	r3, r1
 801741c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017420:	ee07 3a90 	vmov	s15, r3
 8017424:	edd2 6a00 	vldr	s13, [r2]
 8017428:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801742c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8017430:	eddd 7a01 	vldr	s15, [sp, #4]
 8017434:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017438:	ee17 3a90 	vmov	r3, s15
 801743c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017440:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8017444:	ee00 3a10 	vmov	s0, r3
 8017448:	b002      	add	sp, #8
 801744a:	bd10      	pop	{r4, pc}
 801744c:	4b12      	ldr	r3, [pc, #72]	; (8017498 <rintf+0xb0>)
 801744e:	4123      	asrs	r3, r4
 8017450:	4219      	tst	r1, r3
 8017452:	d0f9      	beq.n	8017448 <rintf+0x60>
 8017454:	085b      	lsrs	r3, r3, #1
 8017456:	4219      	tst	r1, r3
 8017458:	d006      	beq.n	8017468 <rintf+0x80>
 801745a:	ea21 0203 	bic.w	r2, r1, r3
 801745e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017462:	fa43 f404 	asr.w	r4, r3, r4
 8017466:	4322      	orrs	r2, r4
 8017468:	4b0a      	ldr	r3, [pc, #40]	; (8017494 <rintf+0xac>)
 801746a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801746e:	ed90 7a00 	vldr	s14, [r0]
 8017472:	ee07 2a90 	vmov	s15, r2
 8017476:	ee77 7a27 	vadd.f32	s15, s14, s15
 801747a:	edcd 7a01 	vstr	s15, [sp, #4]
 801747e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017482:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017486:	e7df      	b.n	8017448 <rintf+0x60>
 8017488:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801748c:	d3dc      	bcc.n	8017448 <rintf+0x60>
 801748e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017492:	e7d9      	b.n	8017448 <rintf+0x60>
 8017494:	08018488 	.word	0x08018488
 8017498:	007fffff 	.word	0x007fffff

0801749c <scalbnf>:
 801749c:	b508      	push	{r3, lr}
 801749e:	ee10 2a10 	vmov	r2, s0
 80174a2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80174a6:	ed2d 8b02 	vpush	{d8}
 80174aa:	eef0 0a40 	vmov.f32	s1, s0
 80174ae:	d004      	beq.n	80174ba <scalbnf+0x1e>
 80174b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80174b4:	d306      	bcc.n	80174c4 <scalbnf+0x28>
 80174b6:	ee70 0a00 	vadd.f32	s1, s0, s0
 80174ba:	ecbd 8b02 	vpop	{d8}
 80174be:	eeb0 0a60 	vmov.f32	s0, s1
 80174c2:	bd08      	pop	{r3, pc}
 80174c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80174c8:	d21c      	bcs.n	8017504 <scalbnf+0x68>
 80174ca:	4b1f      	ldr	r3, [pc, #124]	; (8017548 <scalbnf+0xac>)
 80174cc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801754c <scalbnf+0xb0>
 80174d0:	4298      	cmp	r0, r3
 80174d2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80174d6:	db10      	blt.n	80174fa <scalbnf+0x5e>
 80174d8:	ee10 2a90 	vmov	r2, s1
 80174dc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80174e0:	3b19      	subs	r3, #25
 80174e2:	4403      	add	r3, r0
 80174e4:	2bfe      	cmp	r3, #254	; 0xfe
 80174e6:	dd0f      	ble.n	8017508 <scalbnf+0x6c>
 80174e8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8017550 <scalbnf+0xb4>
 80174ec:	eeb0 0a48 	vmov.f32	s0, s16
 80174f0:	f000 f843 	bl	801757a <copysignf>
 80174f4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80174f8:	e7df      	b.n	80174ba <scalbnf+0x1e>
 80174fa:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017554 <scalbnf+0xb8>
 80174fe:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017502:	e7da      	b.n	80174ba <scalbnf+0x1e>
 8017504:	0ddb      	lsrs	r3, r3, #23
 8017506:	e7ec      	b.n	80174e2 <scalbnf+0x46>
 8017508:	2b00      	cmp	r3, #0
 801750a:	dd06      	ble.n	801751a <scalbnf+0x7e>
 801750c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017510:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017514:	ee00 3a90 	vmov	s1, r3
 8017518:	e7cf      	b.n	80174ba <scalbnf+0x1e>
 801751a:	f113 0f16 	cmn.w	r3, #22
 801751e:	da06      	bge.n	801752e <scalbnf+0x92>
 8017520:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017524:	4298      	cmp	r0, r3
 8017526:	dcdf      	bgt.n	80174e8 <scalbnf+0x4c>
 8017528:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8017554 <scalbnf+0xb8>
 801752c:	e7de      	b.n	80174ec <scalbnf+0x50>
 801752e:	3319      	adds	r3, #25
 8017530:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017534:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017538:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017558 <scalbnf+0xbc>
 801753c:	ee07 3a10 	vmov	s14, r3
 8017540:	ee67 0a27 	vmul.f32	s1, s14, s15
 8017544:	e7b9      	b.n	80174ba <scalbnf+0x1e>
 8017546:	bf00      	nop
 8017548:	ffff3cb0 	.word	0xffff3cb0
 801754c:	4c000000 	.word	0x4c000000
 8017550:	7149f2ca 	.word	0x7149f2ca
 8017554:	0da24260 	.word	0x0da24260
 8017558:	33000000 	.word	0x33000000

0801755c <copysign>:
 801755c:	ec51 0b10 	vmov	r0, r1, d0
 8017560:	ee11 0a90 	vmov	r0, s3
 8017564:	ee10 2a10 	vmov	r2, s0
 8017568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801756c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017570:	ea41 0300 	orr.w	r3, r1, r0
 8017574:	ec43 2b10 	vmov	d0, r2, r3
 8017578:	4770      	bx	lr

0801757a <copysignf>:
 801757a:	ee10 3a10 	vmov	r3, s0
 801757e:	ee10 2a90 	vmov	r2, s1
 8017582:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801758a:	4313      	orrs	r3, r2
 801758c:	ee00 3a10 	vmov	s0, r3
 8017590:	4770      	bx	lr
	...

08017594 <_init>:
 8017594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017596:	bf00      	nop
 8017598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801759a:	bc08      	pop	{r3}
 801759c:	469e      	mov	lr, r3
 801759e:	4770      	bx	lr

080175a0 <_fini>:
 80175a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175a2:	bf00      	nop
 80175a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175a6:	bc08      	pop	{r3}
 80175a8:	469e      	mov	lr, r3
 80175aa:	4770      	bx	lr
