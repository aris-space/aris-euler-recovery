
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800fc28  0800fc28  0001fc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010370  08010370  000302f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010370  08010370  00020370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010378  08010378  000302f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010378  08010378  00020378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801037c  0801037c  0002037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08010380  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059f8  200002f0  08010670  000302f0  2**2
                  ALLOC
 10 ._user_heap_stack 00002248  20005ce8  08010670  00035ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200a5  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000476d  00000000  00000000  000503c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00054b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  00055fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c31  00000000  00000000  00057240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001847f  00000000  00000000  0007ce71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c84bb  00000000  00000000  000952f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d7ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006164  00000000  00000000  0015d828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc0c 	.word	0x0800fc0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	0800fc0c 	.word	0x0800fc0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <turn_off_HAWKs>:
void fire_HAWKs(void){
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
}

void turn_off_HAWKs(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <turn_off_HAWKs+0x20>)
 8000f94:	f004 fc0a 	bl	80057ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9e:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <turn_off_HAWKs+0x20>)
 8000fa0:	f004 fc04 	bl	80057ac <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000

08000fac <turn_off_TDs>:
void fire_TDs(void){
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
}

void turn_off_TDs(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <turn_off_TDs+0x20>)
 8000fb8:	f004 fbf8 	bl	80057ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <turn_off_TDs+0x20>)
 8000fc4:	f004 fbf2 	bl	80057ac <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <init_ADC>:

void init_ADC(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <init_ADC+0x18>)
 8000fd6:	f003 fa11 	bl	80043fc <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 8000fda:	2208      	movs	r2, #8
 8000fdc:	4903      	ldr	r1, [pc, #12]	; (8000fec <init_ADC+0x1c>)
 8000fde:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <init_ADC+0x18>)
 8000fe0:	f003 f91a 	bl	8004218 <HAL_ADC_Start_DMA>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20003464 	.word	0x20003464
 8000fec:	200003a4 	.word	0x200003a4

08000ff0 <read_ADC>:

void read_ADC(float * out){
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8000ff8:	4b89      	ldr	r3, [pc, #548]	; (8001220 <read_ADC+0x230>)
 8000ffa:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 8000ffc:	4b89      	ldr	r3, [pc, #548]	; (8001224 <read_ADC+0x234>)
 8000ffe:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001000:	4b89      	ldr	r3, [pc, #548]	; (8001228 <read_ADC+0x238>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001014:	edd7 7a02 	vldr	s15, [r7, #8]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 8001022:	4b81      	ldr	r3, [pc, #516]	; (8001228 <read_ADC+0x238>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3304      	adds	r3, #4
 800103a:	edd7 7a02 	vldr	s15, [r7, #8]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 8001046:	4b78      	ldr	r3, [pc, #480]	; (8001228 <read_ADC+0x238>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3308      	adds	r3, #8
 800105e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <read_ADC+0x238>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	edd7 7a03 	vldr	s15, [r7, #12]
 800107a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107e:	ee17 0a90 	vmov	r0, s15
 8001082:	f7ff fa61 	bl	8000548 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	461a      	mov	r2, r3
 800108c:	4623      	mov	r3, r4
 800108e:	a15c      	add	r1, pc, #368	; (adr r1, 8001200 <read_ADC+0x210>)
 8001090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001094:	f7ff f8f8 	bl	8000288 <__aeabi_dsub>
 8001098:	4603      	mov	r3, r0
 800109a:	460c      	mov	r4, r1
 800109c:	4618      	mov	r0, r3
 800109e:	4621      	mov	r1, r4
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <read_ADC+0x23c>)
 80010a6:	f7ff faa7 	bl	80005f8 <__aeabi_dmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	4618      	mov	r0, r3
 80010b0:	4621      	mov	r1, r4
 80010b2:	a355      	add	r3, pc, #340	; (adr r3, 8001208 <read_ADC+0x218>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fbc8 	bl	800084c <__aeabi_ddiv>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4618      	mov	r0, r3
 80010c2:	4621      	mov	r1, r4
 80010c4:	f7ff fd90 	bl	8000be8 <__aeabi_d2f>
 80010c8:	4602      	mov	r2, r0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	330c      	adds	r3, #12
 80010ce:	ee07 2a90 	vmov	s15, r2
 80010d2:	eef1 7a67 	vneg.f32	s15, s15
 80010d6:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <read_ADC+0x238>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff fa29 	bl	8000548 <__aeabi_f2d>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	461a      	mov	r2, r3
 80010fc:	4623      	mov	r3, r4
 80010fe:	a140      	add	r1, pc, #256	; (adr r1, 8001200 <read_ADC+0x210>)
 8001100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001104:	f7ff f8c0 	bl	8000288 <__aeabi_dsub>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4618      	mov	r0, r3
 800110e:	4621      	mov	r1, r4
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <read_ADC+0x23c>)
 8001116:	f7ff fa6f 	bl	80005f8 <__aeabi_dmul>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	a339      	add	r3, pc, #228	; (adr r3, 8001208 <read_ADC+0x218>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fb90 	bl	800084c <__aeabi_ddiv>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4618      	mov	r0, r3
 8001132:	4621      	mov	r1, r4
 8001134:	f7ff fd58 	bl	8000be8 <__aeabi_d2f>
 8001138:	4602      	mov	r2, r0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3310      	adds	r3, #16
 800113e:	ee07 2a90 	vmov	s15, r2
 8001142:	eef1 7a67 	vneg.f32	s15, s15
 8001146:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <read_ADC+0x238>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3314      	adds	r3, #20
 8001162:	edd7 7a02 	vldr	s15, [r7, #8]
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <read_ADC+0x238>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800117a:	edd7 7a03 	vldr	s15, [r7, #12]
 800117e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3318      	adds	r3, #24
 8001186:	edd7 7a02 	vldr	s15, [r7, #8]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <read_ADC+0x238>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	ee17 0a90 	vmov	r0, s15
 80011aa:	f7ff f9cd 	bl	8000548 <__aeabi_f2d>
 80011ae:	a318      	add	r3, pc, #96	; (adr r3, 8001210 <read_ADC+0x220>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff f868 	bl	8000288 <__aeabi_dsub>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4618      	mov	r0, r3
 80011be:	4621      	mov	r1, r4
 80011c0:	a315      	add	r3, pc, #84	; (adr r3, 8001218 <read_ADC+0x228>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fb41 	bl	800084c <__aeabi_ddiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <read_ADC+0x240>)
 80011d8:	f7ff f858 	bl	800028c <__adddf3>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4619      	mov	r1, r3
 80011e2:	4622      	mov	r2, r4
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f103 041c 	add.w	r4, r3, #28
 80011ea:	4608      	mov	r0, r1
 80011ec:	4611      	mov	r1, r2
 80011ee:	f7ff fcfb 	bl	8000be8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	6023      	str	r3, [r4, #0]

}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	66666666 	.word	0x66666666
 8001204:	3ffa6666 	.word	0x3ffa6666
 8001208:	4189374c 	.word	0x4189374c
 800120c:	3fb0e560 	.word	0x3fb0e560
 8001210:	851eb852 	.word	0x851eb852
 8001214:	3fe851eb 	.word	0x3fe851eb
 8001218:	47ae147b 	.word	0x47ae147b
 800121c:	3f647ae1 	.word	0x3f647ae1
 8001220:	3a533333 	.word	0x3a533333
 8001224:	409b26ca 	.word	0x409b26ca
 8001228:	200003a4 	.word	0x200003a4
 800122c:	408f4000 	.word	0x408f4000
 8001230:	40390000 	.word	0x40390000

08001234 <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e007      	b.n	8001252 <bufclear+0x1e>
	{
		buffer[i] = '\0';
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001258:	dbf3      	blt.n	8001242 <bufclear+0xe>
	}
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b09d      	sub	sp, #116	; 0x74
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	DWORD fre_clust;
	uint32_t total, free_space;

	if (DEBUG_PRINT == 1) printf("mounting SD card...\n");

	FRESULT ret = f_mount(&fs, SDPath, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	4955      	ldr	r1, [pc, #340]	; (80013cc <init_sd+0x164>)
 8001276:	4856      	ldr	r0, [pc, #344]	; (80013d0 <init_sd+0x168>)
 8001278:	f00a fe80 	bl	800bf7c <f_mount>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 8001282:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <init_sd+0x26>
	{
		if (DEBUG_PRINT == 1) printf("mounted SD card\n");
	} else {
		if (DEBUG_PRINT == 1) printf("no SD connection established\n");
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
	  return 0;
 800128a:	2300      	movs	r3, #0
 800128c:	e09a      	b.n	80013c4 <init_sd+0x15c>
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 800128e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001292:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001296:	4619      	mov	r1, r3
 8001298:	484c      	ldr	r0, [pc, #304]	; (80013cc <init_sd+0x164>)
 800129a:	f00b fd91 	bl	800cdc0 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800129e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	3b02      	subs	r3, #2
 80012a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012a6:	8952      	ldrh	r2, [r2, #10]
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f929 	bl	8000504 <__aeabi_ui2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <init_sd+0x16c>)
 80012b8:	f7ff f99e 	bl	80005f8 <__aeabi_dmul>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fc70 	bl	8000ba8 <__aeabi_d2uiz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	667b      	str	r3, [r7, #100]	; 0x64
	if (DEBUG_PRINT == 1) printf("SD CARD Total Size: \t%lu\n",total);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80012cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012ce:	895b      	ldrh	r3, [r3, #10]
 80012d0:	461a      	mov	r2, r3
 80012d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d4:	fb03 f302 	mul.w	r3, r3, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f913 	bl	8000504 <__aeabi_ui2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <init_sd+0x16c>)
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4603      	mov	r3, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	4618      	mov	r0, r3
 80012ee:	4621      	mov	r1, r4
 80012f0:	f7ff fc5a 	bl	8000ba8 <__aeabi_d2uiz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	663b      	str	r3, [r7, #96]	; 0x60

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint16_t cnt2 = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4930      	ldr	r1, [pc, #192]	; (80013cc <init_sd+0x164>)
 800130a:	4618      	mov	r0, r3
 800130c:	f00b fca8 	bl	800cc60 <f_opendir>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <init_sd+0x170>)
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <init_sd+0x170>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d148      	bne.n	80013b2 <init_sd+0x14a>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 8001320:	e034      	b.n	800138c <init_sd+0x124>
			{
				fn = Finfo.fname;
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	3309      	adds	r3, #9
 8001328:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 800132a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b46      	cmp	r3, #70	; 0x46
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2da      	uxtb	r2, r3
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	3301      	adds	r3, #1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b4c      	cmp	r3, #76	; 0x4c
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4013      	ands	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <init_sd+0xf4>
				{
					if (DEBUG_PRINT == 1) printf("found flight log: %s \n",fn);
					cnt1 ++;
 8001350:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001354:	3301      	adds	r3, #1
 8001356:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800135a:	e017      	b.n	800138c <init_sd+0x124>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 800135c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b4c      	cmp	r3, #76	; 0x4c
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2da      	uxtb	r2, r3
 800136a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b4f      	cmp	r3, #79	; 0x4f
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4013      	ands	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <init_sd+0x124>
				{
					if (DEBUG_PRINT == 1) printf("found log file: %s \n",fn);
					cnt2 ++;
 8001382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001386:	3301      	adds	r3, #1
 8001388:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 800138c:	f107 020c 	add.w	r2, r7, #12
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f00b fcd5 	bl	800cd46 <f_readdir>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <init_sd+0x170>)
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <init_sd+0x170>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <init_sd+0x14a>
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1b7      	bne.n	8001322 <init_sd+0xba>
				}

			}
	}
	*file_count = cnt1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80013b8:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80013c0:	801a      	strh	r2, [r3, #0]
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th flight. \n", *file_count);
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th log file. \n", *log_count);
	return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3774      	adds	r7, #116	; 0x74
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	20003c7c 	.word	0x20003c7c
 80013d0:	200003c4 	.word	0x200003c4
 80013d4:	3fe00000 	.word	0x3fe00000
 80013d8:	20002430 	.word	0x20002430

080013dc <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0e2      	sub	sp, #392	; 0x188
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	6018      	str	r0, [r3, #0]
 80013e6:	463b      	mov	r3, r7
 80013e8:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	220a      	movs	r2, #10
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	4831      	ldr	r0, [pc, #196]	; (80014b8 <init_file+0xdc>)
 80013f2:	f00a fe09 	bl	800c008 <f_open>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <init_file+0xe0>)
 80013fc:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <init_file+0xe0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <init_file+0x2e>
		if (DEBUG_PRINT == 1) printf("trying to open datalog file, error-code: %d \n",fresult);
		return 0;
 8001406:	2300      	movs	r3, #0
 8001408:	e050      	b.n	80014ac <init_file+0xd0>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State2,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 800140a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <init_file+0xe4>)
 8001410:	4618      	mov	r0, r3
 8001412:	4611      	mov	r1, r2
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	461a      	mov	r2, r3
 800141a:	f00b fea9 	bl	800d170 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 800141e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <init_file+0xe8>)
 8001424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <init_file+0xdc>)
 800142a:	f00a ffb9 	bl	800c3a0 <f_write>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <init_file+0xe0>)
 8001434:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 8001436:	4820      	ldr	r0, [pc, #128]	; (80014b8 <init_file+0xdc>)
 8001438:	f00b f9c4 	bl	800c7c4 <f_close>

	if (fresult != FR_OK){
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <init_file+0xe0>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <init_file+0x6c>
		if (DEBUG_PRINT == 1) printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
		return 0;
 8001444:	2300      	movs	r3, #0
 8001446:	e031      	b.n	80014ac <init_file+0xd0>
	}
	//bufclear();

	HAL_Delay(100);
 8001448:	2064      	movs	r0, #100	; 0x64
 800144a:	f002 fe7f 	bl	800414c <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 800144e:	463b      	mov	r3, r7
 8001450:	2206      	movs	r2, #6
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	481c      	ldr	r0, [pc, #112]	; (80014c8 <init_file+0xec>)
 8001456:	f00a fdd7 	bl	800c008 <f_open>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <init_file+0xe0>)
 8001460:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <init_file+0xe0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <init_file+0x92>
		if (DEBUG_PRINT == 1) printf("trying to open setuplog file, error-code: %d \n",fresult);
		return 0;
 800146a:	2300      	movs	r3, #0
 800146c:	e01e      	b.n	80014ac <init_file+0xd0>
	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	char myLog[128];
	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 800146e:	f002 fe61 	bl	8004134 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	f107 0008 	add.w	r0, r7, #8
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4913      	ldr	r1, [pc, #76]	; (80014cc <init_file+0xf0>)
 800147e:	f00c fb63 	bl	800db48 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <init_file+0xe8>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	480f      	ldr	r0, [pc, #60]	; (80014c8 <init_file+0xec>)
 800148c:	f00a ff88 	bl	800c3a0 <f_write>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <init_file+0xe0>)
 8001496:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <init_file+0xe0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <init_file+0xc8>
		if (DEBUG_PRINT == 1) printf ("LOG FILE not created, error-code: %d \n",fresult);
		return 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e003      	b.n	80014ac <init_file+0xd0>
	}

	/* Close file */
	f_close(&log_file);
 80014a4:	4808      	ldr	r0, [pc, #32]	; (80014c8 <init_file+0xec>)
 80014a6:	f00b f98d 	bl	800c7c4 <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 80014aa:	2301      	movs	r3, #1

}
 80014ac:	4618      	mov	r0, r3
 80014ae:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200013f8 	.word	0x200013f8
 80014bc:	20002430 	.word	0x20002430
 80014c0:	0800fc64 	.word	0x0800fc64
 80014c4:	2000242c 	.word	0x2000242c
 80014c8:	20002434 	.word	0x20002434
 80014cc:	0800fc28 	.word	0x0800fc28

080014d0 <write_to_SD>:


void write_to_SD(char * FILE_NAME, char * buffer){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 80014da:	2212      	movs	r2, #18
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	481f      	ldr	r0, [pc, #124]	; (800155c <write_to_SD+0x8c>)
 80014e0:	f00a fd92 	bl	800c008 <f_open>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <write_to_SD+0x90>)
 80014ea:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <write_to_SD+0x90>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d016      	beq.n	8001522 <write_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 80014f4:	2201      	movs	r2, #1
 80014f6:	491b      	ldr	r1, [pc, #108]	; (8001564 <write_to_SD+0x94>)
 80014f8:	2000      	movs	r0, #0
 80014fa:	f00a fd3f 	bl	800bf7c <f_mount>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <write_to_SD+0x90>)
 8001504:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <write_to_SD+0x90>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <write_to_SD+0x44>
 800150e:	4816      	ldr	r0, [pc, #88]	; (8001568 <write_to_SD+0x98>)
 8001510:	f00c fb12 	bl	800db38 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	4913      	ldr	r1, [pc, #76]	; (8001564 <write_to_SD+0x94>)
 8001518:	4814      	ldr	r0, [pc, #80]	; (800156c <write_to_SD+0x9c>)
 800151a:	f00a fd2f 	bl	800bf7c <f_mount>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <write_to_SD+0x8c>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <write_to_SD+0x8c>)
 800152a:	f00b f975 	bl	800c818 <f_lseek>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <write_to_SD+0x90>)
 8001534:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 8001536:	4909      	ldr	r1, [pc, #36]	; (800155c <write_to_SD+0x8c>)
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f00b fd6e 	bl	800d01a <f_puts>
 800153e:	4603      	mov	r3, r0
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <write_to_SD+0x90>)
 8001544:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <write_to_SD+0x8c>)
 8001548:	f00b f93c 	bl	800c7c4 <f_close>

	bufclear(buffer);
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f7ff fe71 	bl	8001234 <bufclear>

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200013f8 	.word	0x200013f8
 8001560:	20002430 	.word	0x20002430
 8001564:	20003c7c 	.word	0x20003c7c
 8001568:	0800fd64 	.word	0x0800fd64
 800156c:	200003c4 	.word	0x200003c4

08001570 <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 800157a:	2212      	movs	r2, #18
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <log_to_SD+0x8c>)
 8001580:	f00a fd42 	bl	800c008 <f_open>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <log_to_SD+0x90>)
 800158a:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <log_to_SD+0x90>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d016      	beq.n	80015c2 <log_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening log file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	491b      	ldr	r1, [pc, #108]	; (8001604 <log_to_SD+0x94>)
 8001598:	2000      	movs	r0, #0
 800159a:	f00a fcef 	bl	800bf7c <f_mount>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <log_to_SD+0x90>)
 80015a4:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <log_to_SD+0x90>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <log_to_SD+0x44>
 80015ae:	4816      	ldr	r0, [pc, #88]	; (8001608 <log_to_SD+0x98>)
 80015b0:	f00c fac2 	bl	800db38 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	4913      	ldr	r1, [pc, #76]	; (8001604 <log_to_SD+0x94>)
 80015b8:	4814      	ldr	r0, [pc, #80]	; (800160c <log_to_SD+0x9c>)
 80015ba:	f00a fcdf 	bl	800bf7c <f_mount>
 80015be:	4603      	mov	r3, r0
 80015c0:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <log_to_SD+0x8c>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <log_to_SD+0x8c>)
 80015ca:	f00b f925 	bl	800c818 <f_lseek>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <log_to_SD+0x90>)
 80015d4:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 80015d6:	4909      	ldr	r1, [pc, #36]	; (80015fc <log_to_SD+0x8c>)
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f00b fd1e 	bl	800d01a <f_puts>
 80015de:	4603      	mov	r3, r0
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <log_to_SD+0x90>)
 80015e4:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <log_to_SD+0x8c>)
 80015e8:	f00b f8ec 	bl	800c7c4 <f_close>

	bufclear(buffer);
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f7ff fe21 	bl	8001234 <bufclear>

}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20002434 	.word	0x20002434
 8001600:	20002430 	.word	0x20002430
 8001604:	20003c7c 	.word	0x20003c7c
 8001608:	0800fd64 	.word	0x0800fd64
 800160c:	200003c4 	.word	0x200003c4

08001610 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001622:	4b52      	ldr	r3, [pc, #328]	; (800176c <MX_ADC1_Init+0x15c>)
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <MX_ADC1_Init+0x160>)
 8001626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <MX_ADC1_Init+0x15c>)
 800162a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800162e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001630:	4b4e      	ldr	r3, [pc, #312]	; (800176c <MX_ADC1_Init+0x15c>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001636:	4b4d      	ldr	r3, [pc, #308]	; (800176c <MX_ADC1_Init+0x15c>)
 8001638:	2201      	movs	r2, #1
 800163a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800163c:	4b4b      	ldr	r3, [pc, #300]	; (800176c <MX_ADC1_Init+0x15c>)
 800163e:	2201      	movs	r2, #1
 8001640:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <MX_ADC1_Init+0x15c>)
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164a:	4b48      	ldr	r3, [pc, #288]	; (800176c <MX_ADC1_Init+0x15c>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <MX_ADC1_Init+0x15c>)
 8001652:	4a48      	ldr	r2, [pc, #288]	; (8001774 <MX_ADC1_Init+0x164>)
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <MX_ADC1_Init+0x15c>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <MX_ADC1_Init+0x15c>)
 800165e:	2208      	movs	r2, #8
 8001660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <MX_ADC1_Init+0x15c>)
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166a:	4b40      	ldr	r3, [pc, #256]	; (800176c <MX_ADC1_Init+0x15c>)
 800166c:	2201      	movs	r2, #1
 800166e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001670:	483e      	ldr	r0, [pc, #248]	; (800176c <MX_ADC1_Init+0x15c>)
 8001672:	f002 fd8d 	bl	8004190 <HAL_ADC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800167c:	f000 fb86 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001684:	2301      	movs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001688:	2307      	movs	r3, #7
 800168a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4836      	ldr	r0, [pc, #216]	; (800176c <MX_ADC1_Init+0x15c>)
 8001692:	f002 ff1b 	bl	80044cc <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800169c:	f000 fb76 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	482f      	ldr	r0, [pc, #188]	; (800176c <MX_ADC1_Init+0x15c>)
 80016ae:	f002 ff0d 	bl	80044cc <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016b8:	f000 fb68 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016bc:	2302      	movs	r3, #2
 80016be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016c0:	2303      	movs	r3, #3
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <MX_ADC1_Init+0x15c>)
 80016ca:	f002 feff 	bl	80044cc <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80016d4:	f000 fb5a 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80016d8:	230a      	movs	r3, #10
 80016da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <MX_ADC1_Init+0x15c>)
 80016e6:	f002 fef1 	bl	80044cc <HAL_ADC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016f0:	f000 fb4c 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80016f4:	230b      	movs	r3, #11
 80016f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016f8:	2305      	movs	r3, #5
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <MX_ADC1_Init+0x15c>)
 8001702:	f002 fee3 	bl	80044cc <HAL_ADC_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800170c:	f000 fb3e 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001710:	230c      	movs	r3, #12
 8001712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001714:	2306      	movs	r3, #6
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_ADC1_Init+0x15c>)
 800171e:	f002 fed5 	bl	80044cc <HAL_ADC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001728:	f000 fb30 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800172c:	230d      	movs	r3, #13
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001730:	2307      	movs	r3, #7
 8001732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_ADC1_Init+0x15c>)
 800173a:	f002 fec7 	bl	80044cc <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001744:	f000 fb22 	bl	8001d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001748:	2310      	movs	r3, #16
 800174a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800174c:	2308      	movs	r3, #8
 800174e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_ADC1_Init+0x15c>)
 8001756:	f002 feb9 	bl	80044cc <HAL_ADC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001760:	f000 fb14 	bl	8001d8c <Error_Handler>
  }

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20003464 	.word	0x20003464
 8001770:	40012000 	.word	0x40012000
 8001774:	0f000001 	.word	0x0f000001

08001778 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <HAL_ADC_MspInit+0x110>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d171      	bne.n	800187e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a3a      	ldr	r2, [pc, #232]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a2c      	ldr	r2, [pc, #176]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_ADC_MspInit+0x114>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017ee:	230f      	movs	r3, #15
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f2:	2303      	movs	r3, #3
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4823      	ldr	r0, [pc, #140]	; (8001890 <HAL_ADC_MspInit+0x118>)
 8001802:	f003 fe21 	bl	8005448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001806:	2307      	movs	r3, #7
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	481e      	ldr	r0, [pc, #120]	; (8001894 <HAL_ADC_MspInit+0x11c>)
 800181a:	f003 fe15 	bl	8005448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001820:	4a1e      	ldr	r2, [pc, #120]	; (800189c <HAL_ADC_MspInit+0x124>)
 8001822:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_ADC_MspInit+0x120>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001844:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001848:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800184c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001854:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_ADC_MspInit+0x120>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001864:	f003 f9e4 	bl	8004c30 <HAL_DMA_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800186e:	f000 fa8d 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_ADC_MspInit+0x120>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40012000 	.word	0x40012000
 800188c:	40023800 	.word	0x40023800
 8001890:	40020800 	.word	0x40020800
 8001894:	40020000 	.word	0x40020000
 8001898:	200034ac 	.word	0x200034ac
 800189c:	40026410 	.word	0x40026410

080018a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_DMA_Init+0x5c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <MX_DMA_Init+0x5c>)
 80018b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_DMA_Init+0x5c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2038      	movs	r0, #56	; 0x38
 80018c8:	f003 f97b 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018cc:	2038      	movs	r0, #56	; 0x38
 80018ce:	f003 f994 	bl	8004bfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	203b      	movs	r0, #59	; 0x3b
 80018d8:	f003 f973 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018dc:	203b      	movs	r0, #59	; 0x3b
 80018de:	f003 f98c 	bl	8004bfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2045      	movs	r0, #69	; 0x45
 80018e8:	f003 f96b 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80018ec:	2045      	movs	r0, #69	; 0x45
 80018ee:	f003 f984 	bl	8004bfa <HAL_NVIC_EnableIRQ>

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b64      	ldr	r3, [pc, #400]	; (8001aac <MX_GPIO_Init+0x1ac>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a63      	ldr	r2, [pc, #396]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b61      	ldr	r3, [pc, #388]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <MX_GPIO_Init+0x1ac>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a55      	ldr	r2, [pc, #340]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b53      	ldr	r3, [pc, #332]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b4f      	ldr	r3, [pc, #316]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <MX_GPIO_Init+0x1ac>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b48      	ldr	r3, [pc, #288]	; (8001aac <MX_GPIO_Init+0x1ac>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a47      	ldr	r2, [pc, #284]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b45      	ldr	r3, [pc, #276]	; (8001aac <MX_GPIO_Init+0x1ac>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2110      	movs	r1, #16
 80019a6:	4842      	ldr	r0, [pc, #264]	; (8001ab0 <MX_GPIO_Init+0x1b0>)
 80019a8:	f003 ff00 	bl	80057ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	4840      	ldr	r0, [pc, #256]	; (8001ab4 <MX_GPIO_Init+0x1b4>)
 80019b2:	f003 fefb 	bl	80057ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 80019b6:	2200      	movs	r2, #0
 80019b8:	f64f 7180 	movw	r1, #65408	; 0xff80
 80019bc:	483e      	ldr	r0, [pc, #248]	; (8001ab8 <MX_GPIO_Init+0x1b8>)
 80019be:	f003 fef5 	bl	80057ac <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80019c8:	483c      	ldr	r0, [pc, #240]	; (8001abc <MX_GPIO_Init+0x1bc>)
 80019ca:	f003 feef 	bl	80057ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 80019ce:	2308      	movs	r3, #8
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4835      	ldr	r0, [pc, #212]	; (8001ab8 <MX_GPIO_Init+0x1b8>)
 80019e2:	f003 fd31 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 80019e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	482e      	ldr	r0, [pc, #184]	; (8001ab4 <MX_GPIO_Init+0x1b4>)
 80019fc:	f003 fd24 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001a00:	2310      	movs	r3, #16
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4826      	ldr	r0, [pc, #152]	; (8001ab0 <MX_GPIO_Init+0x1b0>)
 8001a18:	f003 fd16 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <MX_GPIO_Init+0x1b4>)
 8001a34:	f003 fd08 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001a38:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a3c:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <MX_GPIO_Init+0x1b8>)
 8001a52:	f003 fcf9 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 8001a56:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <MX_GPIO_Init+0x1bc>)
 8001a70:	f003 fcea 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8001a74:	2301      	movs	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <MX_GPIO_Init+0x1c0>)
 8001a88:	f003 fcde 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <MX_GPIO_Init+0x1bc>)
 8001aa0:	f003 fcd2 	bl	8005448 <HAL_GPIO_Init>

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020c00 	.word	0x40020c00

08001ac4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <MX_I2C1_Init+0x54>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_I2C1_Init+0x58>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_I2C1_Init+0x50>)
 8001b02:	f003 fe87 	bl	8005814 <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b0c:	f000 f93e 	bl	8001d8c <Error_Handler>
  }

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000350c 	.word	0x2000350c
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	00061a80 	.word	0x00061a80

08001b20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <MX_I2C2_Init+0x54>)
 8001b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <MX_I2C2_Init+0x58>)
 8001b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_I2C2_Init+0x50>)
 8001b5e:	f003 fe59 	bl	8005814 <HAL_I2C_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b68:	f000 f910 	bl	8001d8c <Error_Handler>
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20003560 	.word	0x20003560
 8001b74:	40005800 	.word	0x40005800
 8001b78:	000186a0 	.word	0x000186a0

08001b7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_I2C_MspInit+0xe8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d12c      	bne.n	8001bf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a30      	ldr	r2, [pc, #192]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bba:	23c0      	movs	r3, #192	; 0xc0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4825      	ldr	r0, [pc, #148]	; (8001c6c <HAL_I2C_MspInit+0xf0>)
 8001bd6:	f003 fc37 	bl	8005448 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bf6:	e031      	b.n	8001c5c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_I2C_MspInit+0xf4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12c      	bne.n	8001c5c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c24:	2312      	movs	r3, #18
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c30:	2304      	movs	r3, #4
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_I2C_MspInit+0xf0>)
 8001c3c:	f003 fc04 	bl	8005448 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001c4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_I2C_MspInit+0xec>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40005800 	.word	0x40005800

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c78:	f002 f9f6 	bl	8004068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7c:	f000 f81c 	bl	8001cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c80:	f7ff fe3e 	bl	8001900 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c84:	f7ff fe0c 	bl	80018a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c88:	f7ff ff1c 	bl	8001ac4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001c8c:	f000 fdb2 	bl	80027f4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001c90:	f7ff fcbe 	bl	8001610 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001c94:	f7ff ff44 	bl	8001b20 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001c98:	f000 fc66 	bl	8002568 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001c9c:	f000 fd74 	bl	8002788 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001ca0:	f008 f85a 	bl	8009d58 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8001ca4:	f7ff f970 	bl	8000f88 <turn_off_HAWKs>
  turn_off_TDs();
 8001ca8:	f7ff f980 	bl	8000fac <turn_off_TDs>

  schedulerinit();
 8001cac:	f000 f876 	bl	8001d9c <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8001cb0:	f000 f93c 	bl	8001f2c <scheduler>
 8001cb4:	e7fc      	b.n	8001cb0 <main+0x3c>
	...

08001cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b094      	sub	sp, #80	; 0x50
 8001cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	2230      	movs	r2, #48	; 0x30
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00b fa5d 	bl	800d186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <SystemClock_Config+0xcc>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <SystemClock_Config+0xcc>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6413      	str	r3, [r2, #64]	; 0x40
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <SystemClock_Config+0xd0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <SystemClock_Config+0xd0>)
 8001d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d14:	2302      	movs	r3, #2
 8001d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d20:	2302      	movs	r3, #2
 8001d22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d2c:	23a8      	movs	r3, #168	; 0xa8
 8001d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d34:	2307      	movs	r3, #7
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 fe2d 	bl	800699c <HAL_RCC_OscConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d48:	f000 f820 	bl	8001d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d50:	2302      	movs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 f886 	bl	8006e7c <HAL_RCC_ClockConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d76:	f000 f809 	bl	8001d8c <Error_Handler>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3750      	adds	r7, #80	; 0x50
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <schedulerinit>:
float V_BAT2;
float V_LDR;
float V_TD1;
float V_TD2;

void schedulerinit () {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	ms5607_init(&BARO1);
 8001da0:	484f      	ldr	r0, [pc, #316]	; (8001ee0 <schedulerinit+0x144>)
 8001da2:	f001 fc9f 	bl	80036e4 <ms5607_init>
	ms5607_init(&BARO2);
 8001da6:	484f      	ldr	r0, [pc, #316]	; (8001ee4 <schedulerinit+0x148>)
 8001da8:	f001 fc9c 	bl	80036e4 <ms5607_init>
	sht31_init(&TEMP);
 8001dac:	484e      	ldr	r0, [pc, #312]	; (8001ee8 <schedulerinit+0x14c>)
 8001dae:	f002 f841 	bl	8003e34 <sht31_init>
	icm20601_init(&IMU1);
 8001db2:	484e      	ldr	r0, [pc, #312]	; (8001eec <schedulerinit+0x150>)
 8001db4:	f001 f9ed 	bl	8003192 <icm20601_init>
	icm20601_init(&IMU2);
 8001db8:	484d      	ldr	r0, [pc, #308]	; (8001ef0 <schedulerinit+0x154>)
 8001dba:	f001 f9ea 	bl	8003192 <icm20601_init>
	h3l_init(&ACCEL);
 8001dbe:	484d      	ldr	r0, [pc, #308]	; (8001ef4 <schedulerinit+0x158>)
 8001dc0:	f000 ff20 	bl	8002c04 <h3l_init>
	init_ADC();
 8001dc4:	f7ff f904 	bl	8000fd0 <init_ADC>

	turn_on(&STAT);
 8001dc8:	484b      	ldr	r0, [pc, #300]	; (8001ef8 <schedulerinit+0x15c>)
 8001dca:	f001 fc6b 	bl	80036a4 <turn_on>
	HAL_Delay(300);
 8001dce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dd2:	f002 f9bb 	bl	800414c <HAL_Delay>
	turn_on(&SAVE);
 8001dd6:	4849      	ldr	r0, [pc, #292]	; (8001efc <schedulerinit+0x160>)
 8001dd8:	f001 fc64 	bl	80036a4 <turn_on>
	HAL_Delay(300);
 8001ddc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001de0:	f002 f9b4 	bl	800414c <HAL_Delay>
	turn_on(&PRGM);
 8001de4:	4846      	ldr	r0, [pc, #280]	; (8001f00 <schedulerinit+0x164>)
 8001de6:	f001 fc5d 	bl	80036a4 <turn_on>
	HAL_Delay(300);
 8001dea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dee:	f002 f9ad 	bl	800414c <HAL_Delay>

	turn_off(&STAT);
 8001df2:	4841      	ldr	r0, [pc, #260]	; (8001ef8 <schedulerinit+0x15c>)
 8001df4:	f001 fc66 	bl	80036c4 <turn_off>
	turn_off(&SAVE);
 8001df8:	4840      	ldr	r0, [pc, #256]	; (8001efc <schedulerinit+0x160>)
 8001dfa:	f001 fc63 	bl	80036c4 <turn_off>
	turn_off(&PRGM);
 8001dfe:	4840      	ldr	r0, [pc, #256]	; (8001f00 <schedulerinit+0x164>)
 8001e00:	f001 fc60 	bl	80036c4 <turn_off>

	turn_on(&SAVE);
 8001e04:	483d      	ldr	r0, [pc, #244]	; (8001efc <schedulerinit+0x160>)
 8001e06:	f001 fc4d 	bl	80036a4 <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 8001e0a:	493e      	ldr	r1, [pc, #248]	; (8001f04 <schedulerinit+0x168>)
 8001e0c:	483e      	ldr	r0, [pc, #248]	; (8001f08 <schedulerinit+0x16c>)
 8001e0e:	f7ff fa2b 	bl	8001268 <init_sd>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <schedulerinit+0x170>)
 8001e18:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 8001e1a:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <schedulerinit+0x170>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d103      	bne.n	8001e2a <schedulerinit+0x8e>
		turn_off(&SAVE);
 8001e22:	4836      	ldr	r0, [pc, #216]	; (8001efc <schedulerinit+0x160>)
 8001e24:	f001 fc4e 	bl	80036c4 <turn_off>
 8001e28:	e00b      	b.n	8001e42 <schedulerinit+0xa6>
	} else {
		turn_on(&RDY);
 8001e2a:	4839      	ldr	r0, [pc, #228]	; (8001f10 <schedulerinit+0x174>)
 8001e2c:	f001 fc3a 	bl	80036a4 <turn_on>
		HAL_Delay(100);
 8001e30:	2064      	movs	r0, #100	; 0x64
 8001e32:	f002 f98b 	bl	800414c <HAL_Delay>
		turn_off(&RDY);
 8001e36:	4836      	ldr	r0, [pc, #216]	; (8001f10 <schedulerinit+0x174>)
 8001e38:	f001 fc44 	bl	80036c4 <turn_off>
		HAL_Delay(100);
 8001e3c:	2064      	movs	r0, #100	; 0x64
 8001e3e:	f002 f985 	bl	800414c <HAL_Delay>
	}
	if (DEBUG_PRINT == 1) printf("num_dat_file: %hu \n",num_dat_file);
	if (DEBUG_PRINT == 1) printf("num_log_file: %hu \n",num_log_file);

	num_log_file ++;
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <schedulerinit+0x168>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <schedulerinit+0x168>)
 8001e4c:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <schedulerinit+0x16c>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <schedulerinit+0x16c>)
 8001e58:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 8001e5a:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <schedulerinit+0x16c>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	492c      	ldr	r1, [pc, #176]	; (8001f14 <schedulerinit+0x178>)
 8001e62:	482d      	ldr	r0, [pc, #180]	; (8001f18 <schedulerinit+0x17c>)
 8001e64:	f00b fe70 	bl	800db48 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",FILE_NAME);

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <schedulerinit+0x168>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	492b      	ldr	r1, [pc, #172]	; (8001f1c <schedulerinit+0x180>)
 8001e70:	482b      	ldr	r0, [pc, #172]	; (8001f20 <schedulerinit+0x184>)
 8001e72:	f00b fe69 	bl	800db48 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",LOG_NAME);

	SD_state = init_file(FILE_NAME, LOG_NAME);
 8001e76:	492a      	ldr	r1, [pc, #168]	; (8001f20 <schedulerinit+0x184>)
 8001e78:	4827      	ldr	r0, [pc, #156]	; (8001f18 <schedulerinit+0x17c>)
 8001e7a:	f7ff faaf 	bl	80013dc <init_file>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <schedulerinit+0x170>)
 8001e84:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <schedulerinit+0x170>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <schedulerinit+0xfa>
		turn_off(&SAVE);
 8001e8e:	481b      	ldr	r0, [pc, #108]	; (8001efc <schedulerinit+0x160>)
 8001e90:	f001 fc18 	bl	80036c4 <turn_off>
 8001e94:	e00b      	b.n	8001eae <schedulerinit+0x112>
	} else {
		turn_on(&RDY);
 8001e96:	481e      	ldr	r0, [pc, #120]	; (8001f10 <schedulerinit+0x174>)
 8001e98:	f001 fc04 	bl	80036a4 <turn_on>
		HAL_Delay(100);
 8001e9c:	2064      	movs	r0, #100	; 0x64
 8001e9e:	f002 f955 	bl	800414c <HAL_Delay>
		turn_off(&RDY);
 8001ea2:	481b      	ldr	r0, [pc, #108]	; (8001f10 <schedulerinit+0x174>)
 8001ea4:	f001 fc0e 	bl	80036c4 <turn_off>
		HAL_Delay(100);
 8001ea8:	2064      	movs	r0, #100	; 0x64
 8001eaa:	f002 f94f 	bl	800414c <HAL_Delay>
	}
	turn_on(&RDY);
 8001eae:	4818      	ldr	r0, [pc, #96]	; (8001f10 <schedulerinit+0x174>)
 8001eb0:	f001 fbf8 	bl	80036a4 <turn_on>
	HAL_Delay(1000);
 8001eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb8:	f002 f948 	bl	800414c <HAL_Delay>

	bufclear(buffer);
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <schedulerinit+0x188>)
 8001ebe:	f7ff f9b9 	bl	8001234 <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 8001ec2:	f002 f937 	bl	8004134 <HAL_GetTick>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4917      	ldr	r1, [pc, #92]	; (8001f28 <schedulerinit+0x18c>)
 8001ecc:	4815      	ldr	r0, [pc, #84]	; (8001f24 <schedulerinit+0x188>)
 8001ece:	f00b fe3b 	bl	800db48 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 8001ed2:	4914      	ldr	r1, [pc, #80]	; (8001f24 <schedulerinit+0x188>)
 8001ed4:	4812      	ldr	r0, [pc, #72]	; (8001f20 <schedulerinit+0x184>)
 8001ed6:	f7ff fb4b 	bl	8001570 <log_to_SD>

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000090 	.word	0x20000090
 8001ee4:	200000b0 	.word	0x200000b0
 8001ee8:	200000f0 	.word	0x200000f0
 8001eec:	200000d0 	.word	0x200000d0
 8001ef0:	200000e0 	.word	0x200000e0
 8001ef4:	20000100 	.word	0x20000100
 8001ef8:	20000070 	.word	0x20000070
 8001efc:	20000078 	.word	0x20000078
 8001f00:	20000080 	.word	0x20000080
 8001f04:	2000034e 	.word	0x2000034e
 8001f08:	2000034c 	.word	0x2000034c
 8001f0c:	20000350 	.word	0x20000350
 8001f10:	20000088 	.word	0x20000088
 8001f14:	0800fd88 	.word	0x0800fd88
 8001f18:	20003a74 	.word	0x20003a74
 8001f1c:	0800fd94 	.word	0x0800fd94
 8001f20:	200035bc 	.word	0x200035bc
 8001f24:	200035fc 	.word	0x200035fc
 8001f28:	0800fda0 	.word	0x0800fda0

08001f2c <scheduler>:

void scheduler (){
 8001f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f30:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001f34:	af44      	add	r7, sp, #272	; 0x110

	tick = HAL_GetTick();
 8001f36:	f002 f8fd 	bl	8004134 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b39      	ldr	r3, [pc, #228]	; (8002024 <scheduler+0xf8>)
 8001f3e:	601a      	str	r2, [r3, #0]

	// TASK LED
	if(tick >= getNextExecution(&RDY_TASK)){
 8001f40:	4839      	ldr	r0, [pc, #228]	; (8002028 <scheduler+0xfc>)
 8001f42:	f000 fb01 	bl	8002548 <getNextExecution>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <scheduler+0xf8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d807      	bhi.n	8001f60 <scheduler+0x34>
		RDY_TASK.last_call = HAL_GetTick();
 8001f50:	f002 f8f0 	bl	8004134 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b34      	ldr	r3, [pc, #208]	; (8002028 <scheduler+0xfc>)
 8001f58:	601a      	str	r2, [r3, #0]
		toggle(&RDY);
 8001f5a:	4834      	ldr	r0, [pc, #208]	; (800202c <scheduler+0x100>)
 8001f5c:	f001 fb92 	bl	8003684 <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 8001f60:	4833      	ldr	r0, [pc, #204]	; (8002030 <scheduler+0x104>)
 8001f62:	f000 faf1 	bl	8002548 <getNextExecution>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <scheduler+0xf8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d807      	bhi.n	8001f80 <scheduler+0x54>
		SAVE_TASK.last_call = HAL_GetTick();
 8001f70:	f002 f8e0 	bl	8004134 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <scheduler+0x104>)
 8001f78:	601a      	str	r2, [r3, #0]
		toggle(&SAVE);
 8001f7a:	482e      	ldr	r0, [pc, #184]	; (8002034 <scheduler+0x108>)
 8001f7c:	f001 fb82 	bl	8003684 <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 8001f80:	482d      	ldr	r0, [pc, #180]	; (8002038 <scheduler+0x10c>)
 8001f82:	f000 fae1 	bl	8002548 <getNextExecution>
 8001f86:	4602      	mov	r2, r0
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <scheduler+0xf8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d807      	bhi.n	8001fa0 <scheduler+0x74>
		STAT_TASK.last_call = HAL_GetTick();
 8001f90:	f002 f8d0 	bl	8004134 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <scheduler+0x10c>)
 8001f98:	601a      	str	r2, [r3, #0]
		toggle(&STAT);
 8001f9a:	4828      	ldr	r0, [pc, #160]	; (800203c <scheduler+0x110>)
 8001f9c:	f001 fb72 	bl	8003684 <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 8001fa0:	4827      	ldr	r0, [pc, #156]	; (8002040 <scheduler+0x114>)
 8001fa2:	f000 fad1 	bl	8002548 <getNextExecution>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <scheduler+0xf8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d807      	bhi.n	8001fc0 <scheduler+0x94>
		PRGM_TASK.last_call = HAL_GetTick();
 8001fb0:	f002 f8c0 	bl	8004134 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <scheduler+0x114>)
 8001fb8:	601a      	str	r2, [r3, #0]
		toggle(&PRGM);
 8001fba:	4822      	ldr	r0, [pc, #136]	; (8002044 <scheduler+0x118>)
 8001fbc:	f001 fb62 	bl	8003684 <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 8001fc0:	4821      	ldr	r0, [pc, #132]	; (8002048 <scheduler+0x11c>)
 8001fc2:	f000 fac1 	bl	8002548 <getNextExecution>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <scheduler+0xf8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d809      	bhi.n	8001fe4 <scheduler+0xb8>
		SHT_TASK.last_call = HAL_GetTick();
 8001fd0:	f002 f8b0 	bl	8004134 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <scheduler+0x11c>)
 8001fd8:	601a      	str	r2, [r3, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <scheduler+0x120>)
 8001fdc:	491c      	ldr	r1, [pc, #112]	; (8002050 <scheduler+0x124>)
 8001fde:	481d      	ldr	r0, [pc, #116]	; (8002054 <scheduler+0x128>)
 8001fe0:	f001 ff7e 	bl	8003ee0 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 8001fe4:	481c      	ldr	r0, [pc, #112]	; (8002058 <scheduler+0x12c>)
 8001fe6:	f000 faaf 	bl	8002548 <getNextExecution>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <scheduler+0xf8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d856      	bhi.n	80020a2 <scheduler+0x176>

		switch(BARO_TASK.stage){
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <scheduler+0x12c>)
 8001ff6:	7a1b      	ldrb	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <scheduler+0xd6>
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d035      	beq.n	800206c <scheduler+0x140>
 8002000:	e04f      	b.n	80020a2 <scheduler+0x176>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 8002002:	4916      	ldr	r1, [pc, #88]	; (800205c <scheduler+0x130>)
 8002004:	4816      	ldr	r0, [pc, #88]	; (8002060 <scheduler+0x134>)
 8002006:	f001 fc1b 	bl	8003840 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 800200a:	4916      	ldr	r1, [pc, #88]	; (8002064 <scheduler+0x138>)
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <scheduler+0x13c>)
 800200e:	f001 fc17 	bl	8003840 <ms5607_prep_pressure>
				BARO_TASK.last_call = HAL_GetTick();
 8002012:	f002 f88f 	bl	8004134 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <scheduler+0x12c>)
 800201a:	601a      	str	r2, [r3, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <scheduler+0x12c>)
 800201e:	2201      	movs	r2, #1
 8002020:	721a      	strb	r2, [r3, #8]
				break;
 8002022:	e03e      	b.n	80020a2 <scheduler+0x176>
 8002024:	200039fc 	.word	0x200039fc
 8002028:	20000030 	.word	0x20000030
 800202c:	20000088 	.word	0x20000088
 8002030:	20000050 	.word	0x20000050
 8002034:	20000078 	.word	0x20000078
 8002038:	20000040 	.word	0x20000040
 800203c:	20000070 	.word	0x20000070
 8002040:	20000060 	.word	0x20000060
 8002044:	20000080 	.word	0x20000080
 8002048:	20000010 	.word	0x20000010
 800204c:	200035f4 	.word	0x200035f4
 8002050:	20003a34 	.word	0x20003a34
 8002054:	200000f0 	.word	0x200000f0
 8002058:	20000000 	.word	0x20000000
 800205c:	20003a04 	.word	0x20003a04
 8002060:	20000090 	.word	0x20000090
 8002064:	200035b8 	.word	0x200035b8
 8002068:	200000b0 	.word	0x200000b0
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 800206c:	499a      	ldr	r1, [pc, #616]	; (80022d8 <scheduler+0x3ac>)
 800206e:	489b      	ldr	r0, [pc, #620]	; (80022dc <scheduler+0x3b0>)
 8002070:	f001 fc2f 	bl	80038d2 <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 8002074:	499a      	ldr	r1, [pc, #616]	; (80022e0 <scheduler+0x3b4>)
 8002076:	489b      	ldr	r0, [pc, #620]	; (80022e4 <scheduler+0x3b8>)
 8002078:	f001 fc2b 	bl	80038d2 <ms5607_read_pressure>
				BARO_TASK.last_call = HAL_GetTick();
 800207c:	f002 f85a 	bl	8004134 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	4b99      	ldr	r3, [pc, #612]	; (80022e8 <scheduler+0x3bc>)
 8002084:	601a      	str	r2, [r3, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 8002086:	4a99      	ldr	r2, [pc, #612]	; (80022ec <scheduler+0x3c0>)
 8002088:	4999      	ldr	r1, [pc, #612]	; (80022f0 <scheduler+0x3c4>)
 800208a:	4894      	ldr	r0, [pc, #592]	; (80022dc <scheduler+0x3b0>)
 800208c:	f001 fc6c 	bl	8003968 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 8002090:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <scheduler+0x3c8>)
 8002092:	4999      	ldr	r1, [pc, #612]	; (80022f8 <scheduler+0x3cc>)
 8002094:	4893      	ldr	r0, [pc, #588]	; (80022e4 <scheduler+0x3b8>)
 8002096:	f001 fc67 	bl	8003968 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 800209a:	4b93      	ldr	r3, [pc, #588]	; (80022e8 <scheduler+0x3bc>)
 800209c:	2200      	movs	r2, #0
 800209e:	721a      	strb	r2, [r3, #8]
				break;
 80020a0:	bf00      	nop
		}
	}

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 80020a2:	4896      	ldr	r0, [pc, #600]	; (80022fc <scheduler+0x3d0>)
 80020a4:	f000 fa50 	bl	8002548 <getNextExecution>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b95      	ldr	r3, [pc, #596]	; (8002300 <scheduler+0x3d4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d80c      	bhi.n	80020cc <scheduler+0x1a0>
		IMU_TASK.last_call = HAL_GetTick();
 80020b2:	f002 f83f 	bl	8004134 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b90      	ldr	r3, [pc, #576]	; (80022fc <scheduler+0x3d0>)
 80020ba:	601a      	str	r2, [r3, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 80020bc:	4991      	ldr	r1, [pc, #580]	; (8002304 <scheduler+0x3d8>)
 80020be:	4892      	ldr	r0, [pc, #584]	; (8002308 <scheduler+0x3dc>)
 80020c0:	f001 fa0a 	bl	80034d8 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 80020c4:	4991      	ldr	r1, [pc, #580]	; (800230c <scheduler+0x3e0>)
 80020c6:	4892      	ldr	r0, [pc, #584]	; (8002310 <scheduler+0x3e4>)
 80020c8:	f001 fa06 	bl	80034d8 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 80020cc:	4891      	ldr	r0, [pc, #580]	; (8002314 <scheduler+0x3e8>)
 80020ce:	f000 fa3b 	bl	8002548 <getNextExecution>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b8a      	ldr	r3, [pc, #552]	; (8002300 <scheduler+0x3d4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d80c      	bhi.n	80020f6 <scheduler+0x1ca>
		ACCEL_TASK.last_call = HAL_GetTick();
 80020dc:	f002 f82a 	bl	8004134 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <scheduler+0x3e8>)
 80020e4:	601a      	str	r2, [r3, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 80020e6:	498c      	ldr	r1, [pc, #560]	; (8002318 <scheduler+0x3ec>)
 80020e8:	488c      	ldr	r0, [pc, #560]	; (800231c <scheduler+0x3f0>)
 80020ea:	f000 fdd5 	bl	8002c98 <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 80020ee:	498c      	ldr	r1, [pc, #560]	; (8002320 <scheduler+0x3f4>)
 80020f0:	488a      	ldr	r0, [pc, #552]	; (800231c <scheduler+0x3f0>)
 80020f2:	f000 fecd 	bl	8002e90 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 80020f6:	488b      	ldr	r0, [pc, #556]	; (8002324 <scheduler+0x3f8>)
 80020f8:	f000 fa26 	bl	8002548 <getNextExecution>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b80      	ldr	r3, [pc, #512]	; (8002300 <scheduler+0x3d4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d827      	bhi.n	8002156 <scheduler+0x22a>
		ADC_TASK.last_call = HAL_GetTick();
 8002106:	f002 f815 	bl	8004134 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	4b85      	ldr	r3, [pc, #532]	; (8002324 <scheduler+0x3f8>)
 800210e:	601a      	str	r2, [r3, #0]
		read_ADC(adc_dat);
 8002110:	4885      	ldr	r0, [pc, #532]	; (8002328 <scheduler+0x3fc>)
 8002112:	f7fe ff6d 	bl	8000ff0 <read_ADC>
		if (DEBUG_PRINT == 1) printf("4 %4.2f V \n", adc_dat[3]);
		if (DEBUG_PRINT == 1) printf("5 %4.2f V \n", adc_dat[4]);
		if (DEBUG_PRINT == 1) printf("6 %4.2f V \n", adc_dat[5]);
		if (DEBUG_PRINT == 1) printf("7 %4.2f V \n", adc_dat[6]);
		if (DEBUG_PRINT == 1) printf("8 %4.2f C \n", adc_dat[7]);
		V_TD1 = adc_dat[0];
 8002116:	4b84      	ldr	r3, [pc, #528]	; (8002328 <scheduler+0x3fc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a84      	ldr	r2, [pc, #528]	; (800232c <scheduler+0x400>)
 800211c:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <scheduler+0x3fc>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a83      	ldr	r2, [pc, #524]	; (8002330 <scheduler+0x404>)
 8002124:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 8002126:	4b80      	ldr	r3, [pc, #512]	; (8002328 <scheduler+0x3fc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4a82      	ldr	r2, [pc, #520]	; (8002334 <scheduler+0x408>)
 800212c:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 800212e:	4b7e      	ldr	r3, [pc, #504]	; (8002328 <scheduler+0x3fc>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a81      	ldr	r2, [pc, #516]	; (8002338 <scheduler+0x40c>)
 8002134:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 8002136:	4b7c      	ldr	r3, [pc, #496]	; (8002328 <scheduler+0x3fc>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	4a80      	ldr	r2, [pc, #512]	; (800233c <scheduler+0x410>)
 800213c:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 800213e:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <scheduler+0x3fc>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4a7f      	ldr	r2, [pc, #508]	; (8002340 <scheduler+0x414>)
 8002144:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 8002146:	4b78      	ldr	r3, [pc, #480]	; (8002328 <scheduler+0x3fc>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a7e      	ldr	r2, [pc, #504]	; (8002344 <scheduler+0x418>)
 800214c:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <scheduler+0x3fc>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a7d      	ldr	r2, [pc, #500]	; (8002348 <scheduler+0x41c>)
 8002154:	6013      	str	r3, [r2, #0]

	// TASK STATE ESTIMATION
	// .........

	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 8002156:	487d      	ldr	r0, [pc, #500]	; (800234c <scheduler+0x420>)
 8002158:	f000 f9f6 	bl	8002548 <getNextExecution>
 800215c:	4602      	mov	r2, r0
 800215e:	4b68      	ldr	r3, [pc, #416]	; (8002300 <scheduler+0x3d4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	f200 81d4 	bhi.w	8002510 <scheduler+0x5e4>
		LOG_TASK.last_call = HAL_GetTick();
 8002168:	f001 ffe4 	bl	8004134 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	4b77      	ldr	r3, [pc, #476]	; (800234c <scheduler+0x420>)
 8002170:	601a      	str	r2, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <scheduler+0x3d4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800217a:	4b75      	ldr	r3, [pc, #468]	; (8002350 <scheduler+0x424>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002182:	4b74      	ldr	r3, [pc, #464]	; (8002354 <scheduler+0x428>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800218a:	4b73      	ldr	r3, [pc, #460]	; (8002358 <scheduler+0x42c>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002192:	4b72      	ldr	r3, [pc, #456]	; (800235c <scheduler+0x430>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9d6 	bl	8000548 <__aeabi_f2d>
 800219c:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 80021a0:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <scheduler+0x434>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9cf 	bl	8000548 <__aeabi_f2d>
 80021aa:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <scheduler+0x438>)
 80021b0:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9c8 	bl	8000548 <__aeabi_f2d>
 80021b8:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80021bc:	4b69      	ldr	r3, [pc, #420]	; (8002364 <scheduler+0x438>)
 80021be:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9c1 	bl	8000548 <__aeabi_f2d>
 80021c6:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <scheduler+0x41c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9ba 	bl	8000548 <__aeabi_f2d>
 80021d4:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 80021d8:	4b44      	ldr	r3, [pc, #272]	; (80022ec <scheduler+0x3c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9b3 	bl	8000548 <__aeabi_f2d>
 80021e2:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <scheduler+0x3c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f9ac 	bl	8000548 <__aeabi_f2d>
 80021f0:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <scheduler+0x3d8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f9a5 	bl	8000548 <__aeabi_f2d>
 80021fe:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <scheduler+0x3e0>)
 8002204:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f99e 	bl	8000548 <__aeabi_f2d>
 800220c:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <scheduler+0x3c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f997 	bl	8000548 <__aeabi_f2d>
 800221a:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <scheduler+0x3cc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f990 	bl	8000548 <__aeabi_f2d>
 8002228:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <scheduler+0x3d8>)
 800222e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f989 	bl	8000548 <__aeabi_f2d>
 8002236:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800223a:	4b32      	ldr	r3, [pc, #200]	; (8002304 <scheduler+0x3d8>)
 800223c:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f982 	bl	8000548 <__aeabi_f2d>
 8002244:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <scheduler+0x3d8>)
 800224a:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f97b 	bl	8000548 <__aeabi_f2d>
 8002252:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <scheduler+0x3d8>)
 8002258:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f974 	bl	8000548 <__aeabi_f2d>
 8002260:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <scheduler+0x3d8>)
 8002266:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f96d 	bl	8000548 <__aeabi_f2d>
 800226e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <scheduler+0x3d8>)
 8002274:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <scheduler+0x3e0>)
 8002282:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f95f 	bl	8000548 <__aeabi_f2d>
 800228a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <scheduler+0x3e0>)
 8002290:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <scheduler+0x3e0>)
 800229e:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f951 	bl	8000548 <__aeabi_f2d>
 80022a6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <scheduler+0x3e0>)
 80022ac:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f94a 	bl	8000548 <__aeabi_f2d>
 80022b4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <scheduler+0x3e0>)
 80022ba:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f943 	bl	8000548 <__aeabi_f2d>
 80022c2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <scheduler+0x3e0>)
 80022c8:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f93c 	bl	8000548 <__aeabi_f2d>
 80022d0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80022d4:	e048      	b.n	8002368 <scheduler+0x43c>
 80022d6:	bf00      	nop
 80022d8:	20003a04 	.word	0x20003a04
 80022dc:	20000090 	.word	0x20000090
 80022e0:	200035b8 	.word	0x200035b8
 80022e4:	200000b0 	.word	0x200000b0
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000344 	.word	0x20000344
 80022f0:	2000033c 	.word	0x2000033c
 80022f4:	20000348 	.word	0x20000348
 80022f8:	20000340 	.word	0x20000340
 80022fc:	2000030c 	.word	0x2000030c
 8002300:	200039fc 	.word	0x200039fc
 8002304:	20003a3c 	.word	0x20003a3c
 8002308:	200000d0 	.word	0x200000d0
 800230c:	20003a0c 	.word	0x20003a0c
 8002310:	200000e0 	.word	0x200000e0
 8002314:	2000031c 	.word	0x2000031c
 8002318:	200035c8 	.word	0x200035c8
 800231c:	20000100 	.word	0x20000100
 8002320:	200035e0 	.word	0x200035e0
 8002324:	20000020 	.word	0x20000020
 8002328:	20003a54 	.word	0x20003a54
 800232c:	200035dc 	.word	0x200035dc
 8002330:	200035ec 	.word	0x200035ec
 8002334:	20003a00 	.word	0x20003a00
 8002338:	200035f0 	.word	0x200035f0
 800233c:	20003a08 	.word	0x20003a08
 8002340:	20003a24 	.word	0x20003a24
 8002344:	200035f8 	.word	0x200035f8
 8002348:	200035b4 	.word	0x200035b4
 800234c:	2000032c 	.word	0x2000032c
 8002350:	20000351 	.word	0x20000351
 8002354:	20000352 	.word	0x20000352
 8002358:	20000353 	.word	0x20000353
 800235c:	20000354 	.word	0x20000354
 8002360:	20000358 	.word	0x20000358
 8002364:	20003a34 	.word	0x20003a34
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002368:	4b6c      	ldr	r3, [pc, #432]	; (800251c <scheduler+0x5f0>)
 800236a:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f8eb 	bl	8000548 <__aeabi_f2d>
 8002372:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002376:	4b69      	ldr	r3, [pc, #420]	; (800251c <scheduler+0x5f0>)
 8002378:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8e4 	bl	8000548 <__aeabi_f2d>
 8002380:	e9c7 0108 	strd	r0, r1, [r7, #32]
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002384:	4b65      	ldr	r3, [pc, #404]	; (800251c <scheduler+0x5f0>)
 8002386:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8dd 	bl	8000548 <__aeabi_f2d>
 800238e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <scheduler+0x5f4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f8d6 	bl	8000548 <__aeabi_f2d>
 800239c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80023a0:	4b60      	ldr	r3, [pc, #384]	; (8002524 <scheduler+0x5f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8cf 	bl	8000548 <__aeabi_f2d>
 80023aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80023ae:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <scheduler+0x5fc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8c8 	bl	8000548 <__aeabi_f2d>
 80023b8:	e9c7 0100 	strd	r0, r1, [r7]
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <scheduler+0x600>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f8c1 	bl	8000548 <__aeabi_f2d>
 80023c6:	4682      	mov	sl, r0
 80023c8:	468b      	mov	fp, r1
 80023ca:	4b59      	ldr	r3, [pc, #356]	; (8002530 <scheduler+0x604>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8ba 	bl	8000548 <__aeabi_f2d>
 80023d4:	4680      	mov	r8, r0
 80023d6:	4689      	mov	r9, r1
 80023d8:	4b56      	ldr	r3, [pc, #344]	; (8002534 <scheduler+0x608>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8b3 	bl	8000548 <__aeabi_f2d>
 80023e2:	4605      	mov	r5, r0
 80023e4:	460e      	mov	r6, r1
 80023e6:	4b54      	ldr	r3, [pc, #336]	; (8002538 <scheduler+0x60c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8ac 	bl	8000548 <__aeabi_f2d>
 80023f0:	4603      	mov	r3, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	e9cd 3442 	strd	r3, r4, [sp, #264]	; 0x108
 80023f8:	e9cd 5640 	strd	r5, r6, [sp, #256]	; 0x100
 80023fc:	e9cd 893e 	strd	r8, r9, [sp, #248]	; 0xf8
 8002400:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 8002404:	ed97 7b00 	vldr	d7, [r7]
 8002408:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 800240c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002410:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8002414:	ed97 7b04 	vldr	d7, [r7, #16]
 8002418:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 800241c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002420:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8002424:	ed97 7b08 	vldr	d7, [r7, #32]
 8002428:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 800242c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002430:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8002434:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002438:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 800243c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002440:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 8002444:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002448:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 800244c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002450:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8002454:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002458:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800245c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002460:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8002464:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002468:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800246c:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002470:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002474:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002478:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800247c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002480:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002484:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8002488:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800248c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8002490:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002494:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8002498:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800249c:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 80024a0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80024a4:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80024a8:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80024ac:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80024b0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80024b4:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80024b8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80024bc:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80024c0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80024c4:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80024c8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80024cc:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 80024d0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80024d4:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 80024d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80024dc:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80024e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80024e4:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80024e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80024ec:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80024f0:	9101      	str	r1, [sp, #4]
 80024f2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80024f6:	9100      	str	r1, [sp, #0]
 80024f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024fc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <scheduler+0x610>)
 8002502:	480f      	ldr	r0, [pc, #60]	; (8002540 <scheduler+0x614>)
 8002504:	f00b fb20 	bl	800db48 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 8002508:	490d      	ldr	r1, [pc, #52]	; (8002540 <scheduler+0x614>)
 800250a:	480e      	ldr	r0, [pc, #56]	; (8002544 <scheduler+0x618>)
 800250c:	f7fe ffe0 	bl	80014d0 <write_to_SD>
	if (DEBUG_PRINT == 1) printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
	if (DEBUG_PRINT == 1) printf("ACC ax: %4.2f m/s2 \n", accel[0]);
	if (DEBUG_PRINT == 1) printf("ACC ay: %4.2f m/s2 \n", accel[1]);
	if (DEBUG_PRINT == 1) printf("ACC az: %4.2f m/s2 \n", accel[2]);

}
 8002510:	bf00      	nop
 8002512:	37fc      	adds	r7, #252	; 0xfc
 8002514:	46bd      	mov	sp, r7
 8002516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800251a:	bf00      	nop
 800251c:	200035e0 	.word	0x200035e0
 8002520:	200035f0 	.word	0x200035f0
 8002524:	20003a08 	.word	0x20003a08
 8002528:	20003a24 	.word	0x20003a24
 800252c:	200035f8 	.word	0x200035f8
 8002530:	20003a00 	.word	0x20003a00
 8002534:	200035dc 	.word	0x200035dc
 8002538:	200035ec 	.word	0x200035ec
 800253c:	0800fdbc 	.word	0x0800fdbc
 8002540:	200035fc 	.word	0x200035fc
 8002544:	20003a74 	.word	0x20003a74

08002548 <getNextExecution>:

uint32_t getNextExecution(task_t * task){
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4413      	add	r3, r2
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <MX_SDIO_SD_Init+0x38>)
 800256e:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <MX_SDIO_SD_Init+0x3c>)
 8002570:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <MX_SDIO_SD_Init+0x38>)
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <MX_SDIO_SD_Init+0x38>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <MX_SDIO_SD_Init+0x38>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <MX_SDIO_SD_Init+0x38>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <MX_SDIO_SD_Init+0x38>)
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <MX_SDIO_SD_Init+0x38>)
 8002592:	2203      	movs	r2, #3
 8002594:	619a      	str	r2, [r3, #24]

}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20003b40 	.word	0x20003b40
 80025a4:	40012c00 	.word	0x40012c00

080025a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a68      	ldr	r2, [pc, #416]	; (8002768 <HAL_SD_MspInit+0x1c0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f040 80c9 	bne.w	800275e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_SD_MspInit+0x1c4>)
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_SD_MspInit+0x1c4>)
 80025d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
 80025dc:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_SD_MspInit+0x1c4>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_SD_MspInit+0x1c4>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_SD_MspInit+0x1c4>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_SD_MspInit+0x1c4>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_SD_MspInit+0x1c4>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_SD_MspInit+0x1c4>)
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b55      	ldr	r3, [pc, #340]	; (800276c <HAL_SD_MspInit+0x1c4>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002620:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002624:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002632:	230c      	movs	r3, #12
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	484c      	ldr	r0, [pc, #304]	; (8002770 <HAL_SD_MspInit+0x1c8>)
 800263e:	f002 ff03 	bl	8005448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002642:	2304      	movs	r3, #4
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002652:	230c      	movs	r3, #12
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	4845      	ldr	r0, [pc, #276]	; (8002774 <HAL_SD_MspInit+0x1cc>)
 800265e:	f002 fef3 	bl	8005448 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002662:	4b45      	ldr	r3, [pc, #276]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 8002664:	4a45      	ldr	r2, [pc, #276]	; (800277c <HAL_SD_MspInit+0x1d4>)
 8002666:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 800266a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800266e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800267c:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 800267e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002682:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002684:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 8002686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800268a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 800268e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002692:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002694:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 8002696:	2220      	movs	r2, #32
 8002698:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 800269c:	2200      	movs	r2, #0
 800269e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026a0:	4b35      	ldr	r3, [pc, #212]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 80026a2:	2204      	movs	r2, #4
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026a6:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 80026a8:	2203      	movs	r2, #3
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 80026ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 80026b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80026bc:	482e      	ldr	r0, [pc, #184]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 80026be:	f002 fab7 	bl	8004c30 <HAL_DMA_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80026c8:	f7ff fb60 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
 80026d2:	4a29      	ldr	r2, [pc, #164]	; (8002778 <HAL_SD_MspInit+0x1d0>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 80026da:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_SD_MspInit+0x1dc>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 80026e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 80026f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 80026fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002700:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 8002704:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002708:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 800270c:	2220      	movs	r2, #32
 800270e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 8002712:	2200      	movs	r2, #0
 8002714:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 8002718:	2204      	movs	r2, #4
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 800271e:	2203      	movs	r2, #3
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 8002724:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002728:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 800272c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002732:	4813      	ldr	r0, [pc, #76]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 8002734:	f002 fa7c 	bl	8004c30 <HAL_DMA_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800273e:	f7ff fb25 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <HAL_SD_MspInit+0x1d8>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2031      	movs	r0, #49	; 0x31
 8002754:	f002 fa35 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002758:	2031      	movs	r0, #49	; 0x31
 800275a:	f002 fa4e 	bl	8004bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	; 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40023800 	.word	0x40023800
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	20003a80 	.word	0x20003a80
 800277c:	40026458 	.word	0x40026458
 8002780:	20003ae0 	.word	0x20003ae0
 8002784:	400264a0 	.word	0x400264a0

08002788 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_SPI1_Init+0x64>)
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <MX_SPI1_Init+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_SPI1_Init+0x64>)
 8002794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_SPI1_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_SPI1_Init+0x64>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_SPI1_Init+0x64>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_SPI1_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_SPI1_Init+0x64>)
 80027b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_SPI1_Init+0x64>)
 80027bc:	2200      	movs	r2, #0
 80027be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <MX_SPI1_Init+0x64>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_SPI1_Init+0x64>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <MX_SPI1_Init+0x64>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_SPI1_Init+0x64>)
 80027d4:	220a      	movs	r2, #10
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <MX_SPI1_Init+0x64>)
 80027da:	f006 f805 	bl	80087e8 <HAL_SPI_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027e4:	f7ff fad2 	bl	8001d8c <Error_Handler>
  }

}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20003c1c 	.word	0x20003c1c
 80027f0:	40013000 	.word	0x40013000

080027f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <MX_SPI2_Init+0x64>)
 80027fa:	4a18      	ldr	r2, [pc, #96]	; (800285c <MX_SPI2_Init+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <MX_SPI2_Init+0x64>)
 8002800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002804:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <MX_SPI2_Init+0x64>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <MX_SPI2_Init+0x64>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_SPI2_Init+0x64>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <MX_SPI2_Init+0x64>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_SPI2_Init+0x64>)
 8002820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002824:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <MX_SPI2_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <MX_SPI2_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <MX_SPI2_Init+0x64>)
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <MX_SPI2_Init+0x64>)
 800283a:	2200      	movs	r2, #0
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <MX_SPI2_Init+0x64>)
 8002840:	220a      	movs	r2, #10
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <MX_SPI2_Init+0x64>)
 8002846:	f005 ffcf 	bl	80087e8 <HAL_SPI_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002850:	f7ff fa9c 	bl	8001d8c <Error_Handler>
  }

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20003bc4 	.word	0x20003bc4
 800285c:	40003800 	.word	0x40003800

08002860 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08c      	sub	sp, #48	; 0x30
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a32      	ldr	r2, [pc, #200]	; (8002948 <HAL_SPI_MspInit+0xe8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12c      	bne.n	80028dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_SPI_MspInit+0xec>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_SPI_MspInit+0xec>)
 800288c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b2e      	ldr	r3, [pc, #184]	; (800294c <HAL_SPI_MspInit+0xec>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_SPI_MspInit+0xec>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a29      	ldr	r2, [pc, #164]	; (800294c <HAL_SPI_MspInit+0xec>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_SPI_MspInit+0xec>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028ba:	23e0      	movs	r3, #224	; 0xe0
 80028bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ca:	2305      	movs	r3, #5
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ce:	f107 031c 	add.w	r3, r7, #28
 80028d2:	4619      	mov	r1, r3
 80028d4:	481e      	ldr	r0, [pc, #120]	; (8002950 <HAL_SPI_MspInit+0xf0>)
 80028d6:	f002 fdb7 	bl	8005448 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80028da:	e031      	b.n	8002940 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1c      	ldr	r2, [pc, #112]	; (8002954 <HAL_SPI_MspInit+0xf4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d12c      	bne.n	8002940 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_SPI_MspInit+0xec>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_SPI_MspInit+0xec>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_SPI_MspInit+0xec>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_SPI_MspInit+0xec>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_SPI_MspInit+0xec>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_SPI_MspInit+0xec>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800291e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002930:	2305      	movs	r3, #5
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4619      	mov	r1, r3
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <HAL_SPI_MspInit+0xf8>)
 800293c:	f002 fd84 	bl	8005448 <HAL_GPIO_Init>
}
 8002940:	bf00      	nop
 8002942:	3730      	adds	r7, #48	; 0x30
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40013000 	.word	0x40013000
 800294c:	40023800 	.word	0x40023800
 8002950:	40020000 	.word	0x40020000
 8002954:	40003800 	.word	0x40003800
 8002958:	40020400 	.word	0x40020400

0800295c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_MspInit+0x4c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_MspInit+0x4c>)
 800296c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_MspInit+0x4c>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_MspInit+0x4c>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <HAL_MspInit+0x4c>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_MspInit+0x4c>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <HardFault_Handler+0x4>

080029c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <MemManage_Handler+0x4>

080029c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <BusFault_Handler+0x4>

080029cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <UsageFault_Handler+0x4>

080029d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a00:	f001 fb84 	bl	800410c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <SDIO_IRQHandler+0x10>)
 8002a0e:	f004 fe57 	bl	80076c0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20003b40 	.word	0x20003b40

08002a1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <DMA2_Stream0_IRQHandler+0x10>)
 8002a22:	f002 fa9d 	bl	8004f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200034ac 	.word	0x200034ac

08002a30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <DMA2_Stream3_IRQHandler+0x10>)
 8002a36:	f002 fa93 	bl	8004f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20003a80 	.word	0x20003a80

08002a44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <DMA2_Stream6_IRQHandler+0x10>)
 8002a4a:	f002 fa89 	bl	8004f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20003ae0 	.word	0x20003ae0

08002a58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002a70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002a78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002a80:	e000      	b.n	8002a84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002a82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002a84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f9      	beq.n	8002a82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002a8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e00a      	b.n	8002ace <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ab8:	f3af 8000 	nop.w
 8002abc:	4601      	mov	r1, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	60ba      	str	r2, [r7, #8]
 8002ac4:	b2ca      	uxtb	r2, r1
 8002ac6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dbf0      	blt.n	8002ab8 <_read+0x12>
	}

return len;
 8002ad6:	687b      	ldr	r3, [r7, #4]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e009      	b.n	8002b06 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	60ba      	str	r2, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ffac 	bl	8002a58 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3301      	adds	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dbf1      	blt.n	8002af2 <_write+0x12>
	}
	return len;
 8002b0e:	687b      	ldr	r3, [r7, #4]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_close>:

int _close(int file)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	return -1;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b40:	605a      	str	r2, [r3, #4]
	return 0;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <_isatty>:

int _isatty(int file)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	return 1;
 8002b58:	2301      	movs	r3, #1
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
	return 0;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <_sbrk+0x50>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_sbrk+0x16>
		heap_end = &end;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <_sbrk+0x50>)
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <_sbrk+0x54>)
 8002b94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <_sbrk+0x50>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <_sbrk+0x50>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	466a      	mov	r2, sp
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d907      	bls.n	8002bba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002baa:	f00a fab7 	bl	800d11c <__errno>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb8:	e006      	b.n	8002bc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <_sbrk+0x50>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <_sbrk+0x50>)
 8002bc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	2000035c 	.word	0x2000035c
 8002bd4:	20005ce8 	.word	0x20005ce8

08002bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <SystemInit+0x28>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <SystemInit+0x28>)
 8002be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <SystemInit+0x28>)
 8002bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 fb89 	bl	8006328 <HAL_I2C_GetState>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d003      	beq.n	8002c24 <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8002c1c:	481a      	ldr	r0, [pc, #104]	; (8002c88 <h3l_init+0x84>)
 8002c1e:	f00a ff8b 	bl	800db38 <puts>
 8002c22:	e002      	b.n	8002c2a <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8002c24:	4819      	ldr	r0, [pc, #100]	; (8002c8c <h3l_init+0x88>)
 8002c26:	f00a ff87 	bl	800db38 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6858      	ldr	r0, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b299      	uxth	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7a1b      	ldrb	r3, [r3, #8]
 8002c38:	220a      	movs	r2, #10
 8002c3a:	f003 fa47 	bl	80060cc <HAL_I2C_IsDeviceReady>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 8002c48:	4811      	ldr	r0, [pc, #68]	; (8002c90 <h3l_init+0x8c>)
 8002c4a:	f00a ff75 	bl	800db38 <puts>
		printf("Errorcode: %d\n", _ret);
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4810      	ldr	r0, [pc, #64]	; (8002c94 <h3l_init+0x90>)
 8002c54:	f00a fefc 	bl	800da50 <iprintf>
		return 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e010      	b.n	8002c7e <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8002c5c:	233f      	movs	r3, #63	; 0x3f
 8002c5e:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	461a      	mov	r2, r3
 8002c64:	2120      	movs	r1, #32
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9ae 	bl	8002fc8 <h3l_write>


	PWR_CONF = 0b10000000;
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 8002c70:	7bbb      	ldrb	r3, [r7, #14]
 8002c72:	461a      	mov	r2, r3
 8002c74:	2123      	movs	r1, #35	; 0x23
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9a6 	bl	8002fc8 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8002c7c:	2301      	movs	r3, #1
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	0800feb4 	.word	0x0800feb4
 8002c8c:	0800fec4 	.word	0x0800fec4
 8002c90:	0800fed4 	.word	0x0800fed4
 8002c94:	0800fee4 	.word	0x0800fee4

08002c98 <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 8002ca2:	2328      	movs	r3, #40	; 0x28
 8002ca4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6858      	ldr	r0, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b299      	uxth	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7a1b      	ldrb	r3, [r3, #8]
 8002cb4:	f107 020f 	add.w	r2, r7, #15
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f002 fee2 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6858      	ldr	r0, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	b299      	uxth	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7a1b      	ldrb	r3, [r3, #8]
 8002cce:	f107 0208 	add.w	r2, r7, #8
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f002 ffd3 	bl	8005c80 <HAL_I2C_Master_Receive>
	reg = 0x29;
 8002cda:	2329      	movs	r3, #41	; 0x29
 8002cdc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6858      	ldr	r0, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b299      	uxth	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7a1b      	ldrb	r3, [r3, #8]
 8002cec:	f107 020f 	add.w	r2, r7, #15
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f002 fec6 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6858      	ldr	r0, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b299      	uxth	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7a1b      	ldrb	r3, [r3, #8]
 8002d06:	461c      	mov	r4, r3
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	9400      	str	r4, [sp, #0]
 8002d10:	2301      	movs	r3, #1
 8002d12:	f002 ffb5 	bl	8005c80 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 8002d16:	232a      	movs	r3, #42	; 0x2a
 8002d18:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6858      	ldr	r0, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b299      	uxth	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7a1b      	ldrb	r3, [r3, #8]
 8002d28:	f107 020f 	add.w	r2, r7, #15
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f002 fea8 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6858      	ldr	r0, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b299      	uxth	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7a1b      	ldrb	r3, [r3, #8]
 8002d42:	461c      	mov	r4, r3
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	1c9a      	adds	r2, r3, #2
 8002d4a:	9400      	str	r4, [sp, #0]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f002 ff97 	bl	8005c80 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 8002d52:	232b      	movs	r3, #43	; 0x2b
 8002d54:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6858      	ldr	r0, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b299      	uxth	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a1b      	ldrb	r3, [r3, #8]
 8002d64:	f107 020f 	add.w	r2, r7, #15
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f002 fe8a 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6858      	ldr	r0, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b299      	uxth	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7a1b      	ldrb	r3, [r3, #8]
 8002d7e:	461c      	mov	r4, r3
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	1cda      	adds	r2, r3, #3
 8002d86:	9400      	str	r4, [sp, #0]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f002 ff79 	bl	8005c80 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 8002d8e:	232c      	movs	r3, #44	; 0x2c
 8002d90:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6858      	ldr	r0, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b299      	uxth	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7a1b      	ldrb	r3, [r3, #8]
 8002da0:	f107 020f 	add.w	r2, r7, #15
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2301      	movs	r3, #1
 8002da8:	f002 fe6c 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6858      	ldr	r0, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b299      	uxth	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7a1b      	ldrb	r3, [r3, #8]
 8002dba:	461c      	mov	r4, r3
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	1d1a      	adds	r2, r3, #4
 8002dc2:	9400      	str	r4, [sp, #0]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f002 ff5b 	bl	8005c80 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 8002dca:	232d      	movs	r3, #45	; 0x2d
 8002dcc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6858      	ldr	r0, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b299      	uxth	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7a1b      	ldrb	r3, [r3, #8]
 8002ddc:	f107 020f 	add.w	r2, r7, #15
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	f002 fe4e 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6858      	ldr	r0, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b299      	uxth	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7a1b      	ldrb	r3, [r3, #8]
 8002df6:	461c      	mov	r4, r3
 8002df8:	f107 0308 	add.w	r3, r7, #8
 8002dfc:	1d5a      	adds	r2, r3, #5
 8002dfe:	9400      	str	r4, [sp, #0]
 8002e00:	2301      	movs	r3, #1
 8002e02:	f002 ff3d 	bl	8005c80 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 8002e06:	7a3b      	ldrb	r3, [r7, #8]
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	7a7b      	ldrb	r3, [r7, #9]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 8002e18:	7abb      	ldrb	r3, [r7, #10]
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4313      	orrs	r3, r2
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 8002e2a:	7b3b      	ldrb	r3, [r7, #12]
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	7b7b      	ldrb	r3, [r7, #13]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e42:	111b      	asrs	r3, r3, #4
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e50:	111b      	asrs	r3, r3, #4
 8002e52:	b21a      	sxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002e5e:	111b      	asrs	r3, r3, #4
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3302      	adds	r3, #2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002e7a:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002e86:	801a      	strh	r2, [r3, #0]

};
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}

08002e90 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea8:	ee17 0a90 	vmov	r0, s15
 8002eac:	f7fd fb4c 	bl	8000548 <__aeabi_f2d>
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <h3l_convert+0x130>)
 8002eb6:	f7fd fb9f 	bl	80005f8 <__aeabi_dmul>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <h3l_convert+0x134>)
 8002ec8:	f7fd fcc0 	bl	800084c <__aeabi_ddiv>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	a338      	add	r3, pc, #224	; (adr r3, 8002fb8 <h3l_convert+0x128>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f7fd fb8d 	bl	80005f8 <__aeabi_dmul>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	f7fd fe7f 	bl	8000be8 <__aeabi_d2f>
 8002eea:	4602      	mov	r2, r0
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efe:	ee17 0a90 	vmov	r0, s15
 8002f02:	f7fd fb21 	bl	8000548 <__aeabi_f2d>
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <h3l_convert+0x130>)
 8002f0c:	f7fd fb74 	bl	80005f8 <__aeabi_dmul>
 8002f10:	4603      	mov	r3, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	4618      	mov	r0, r3
 8002f16:	4621      	mov	r1, r4
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <h3l_convert+0x134>)
 8002f1e:	f7fd fc95 	bl	800084c <__aeabi_ddiv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	460c      	mov	r4, r1
 8002f26:	4618      	mov	r0, r3
 8002f28:	4621      	mov	r1, r4
 8002f2a:	a323      	add	r3, pc, #140	; (adr r3, 8002fb8 <h3l_convert+0x128>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd fb62 	bl	80005f8 <__aeabi_dmul>
 8002f34:	4603      	mov	r3, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	1d1c      	adds	r4, r3, #4
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	f7fd fe50 	bl	8000be8 <__aeabi_d2f>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5a:	ee17 0a90 	vmov	r0, s15
 8002f5e:	f7fd faf3 	bl	8000548 <__aeabi_f2d>
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <h3l_convert+0x130>)
 8002f68:	f7fd fb46 	bl	80005f8 <__aeabi_dmul>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	4618      	mov	r0, r3
 8002f72:	4621      	mov	r1, r4
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <h3l_convert+0x134>)
 8002f7a:	f7fd fc67 	bl	800084c <__aeabi_ddiv>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	4618      	mov	r0, r3
 8002f84:	4621      	mov	r1, r4
 8002f86:	a30c      	add	r3, pc, #48	; (adr r3, 8002fb8 <h3l_convert+0x128>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f7fd fb34 	bl	80005f8 <__aeabi_dmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	4619      	mov	r1, r3
 8002f96:	4622      	mov	r2, r4
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f103 0408 	add.w	r4, r3, #8
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	f7fd fe21 	bl	8000be8 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	51eb851f 	.word	0x51eb851f
 8002fbc:	40239eb8 	.word	0x40239eb8
 8002fc0:	40488000 	.word	0x40488000
 8002fc4:	408f4000 	.word	0x408f4000

08002fc8 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 8002fdc:	78bb      	ldrb	r3, [r7, #2]
 8002fde:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6858      	ldr	r0, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b299      	uxth	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7a1b      	ldrb	r3, [r3, #8]
 8002fee:	f107 020c 	add.w	r2, r7, #12
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f002 fd45 	bl	8005a84 <HAL_I2C_Master_Transmit>

};
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d81a      	bhi.n	8003050 <_get_accel_sensitivity+0x4c>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <_get_accel_sensitivity+0x1c>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003031 	.word	0x08003031
 8003024:	08003039 	.word	0x08003039
 8003028:	08003041 	.word	0x08003041
 800302c:	08003049 	.word	0x08003049
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 8003030:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8003034:	60fb      	str	r3, [r7, #12]
    break;
 8003036:	e00b      	b.n	8003050 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 8003038:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800303c:	60fb      	str	r3, [r7, #12]
    break;
 800303e:	e007      	b.n	8003050 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 8003040:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8003044:	60fb      	str	r3, [r7, #12]
    break;
 8003046:	e003      	b.n	8003050 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 8003048:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800304c:	60fb      	str	r3, [r7, #12]
    break;
 800304e:	bf00      	nop
  }
  return f;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	ee07 3a90 	vmov	s15, r3
}
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d816      	bhi.n	80030a8 <_get_gyro_sensitivity+0x44>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <_get_gyro_sensitivity+0x1c>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	08003091 	.word	0x08003091
 8003084:	08003097 	.word	0x08003097
 8003088:	0800309d 	.word	0x0800309d
 800308c:	080030a3 	.word	0x080030a3
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <_get_gyro_sensitivity+0x58>)
 8003092:	60fb      	str	r3, [r7, #12]
	break;
 8003094:	e008      	b.n	80030a8 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <_get_gyro_sensitivity+0x5c>)
 8003098:	60fb      	str	r3, [r7, #12]
    break;
 800309a:	e005      	b.n	80030a8 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <_get_gyro_sensitivity+0x60>)
 800309e:	60fb      	str	r3, [r7, #12]
    break;
 80030a0:	e002      	b.n	80030a8 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <_get_gyro_sensitivity+0x64>)
 80030a4:	60fb      	str	r3, [r7, #12]
    break;
 80030a6:	bf00      	nop
  }
  return f;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	ee07 3a90 	vmov	s15, r3
}
 80030ae:	eeb0 0a67 	vmov.f32	s0, s15
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	42830000 	.word	0x42830000
 80030c0:	42033333 	.word	0x42033333
 80030c4:	41833333 	.word	0x41833333
 80030c8:	41033333 	.word	0x41033333

080030cc <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	460b      	mov	r3, r1
 80030da:	72fb      	strb	r3, [r7, #11]
 80030dc:	4613      	mov	r3, r2
 80030de:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 80030e0:	7afb      	ldrb	r3, [r7, #11]
 80030e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	889b      	ldrh	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	4619      	mov	r1, r3
 80030f6:	f002 fb59 	bl	80057ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6898      	ldr	r0, [r3, #8]
 80030fe:	f107 010b 	add.w	r1, r7, #11
 8003102:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003106:	2201      	movs	r2, #1
 8003108:	f005 fbd2 	bl	80088b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6898      	ldr	r0, [r3, #8]
 8003110:	893a      	ldrh	r2, [r7, #8]
 8003112:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	f005 fcfe 	bl	8008b18 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	889b      	ldrh	r3, [r3, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	4619      	mov	r1, r3
 8003128:	f002 fb40 	bl	80057ac <HAL_GPIO_WritePin>
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	460b      	mov	r3, r1
 8003142:	72fb      	strb	r3, [r7, #11]
 8003144:	4613      	mov	r3, r2
 8003146:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	889b      	ldrh	r3, [r3, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	4619      	mov	r1, r3
 8003154:	f002 fb2a 	bl	80057ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6898      	ldr	r0, [r3, #8]
 800315c:	f107 010b 	add.w	r1, r7, #11
 8003160:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003164:	2201      	movs	r2, #1
 8003166:	f005 fba3 	bl	80088b0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6898      	ldr	r0, [r3, #8]
 800316e:	893a      	ldrh	r2, [r7, #8]
 8003170:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	f005 fb9b 	bl	80088b0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	889b      	ldrh	r3, [r3, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	4619      	mov	r1, r3
 8003186:	f002 fb11 	bl	80057ac <HAL_GPIO_WritePin>
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 800319e:	2300      	movs	r3, #0
 80031a0:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 80031a2:	2381      	movs	r3, #129	; 0x81
 80031a4:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 80031a6:	f107 020f 	add.w	r2, r7, #15
 80031aa:	2301      	movs	r3, #1
 80031ac:	216b      	movs	r1, #107	; 0x6b
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ffc0 	bl	8003134 <_icm_write_bytes>
	HAL_Delay(1);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f000 ffc9 	bl	800414c <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 80031be:	f107 020f 	add.w	r2, r7, #15
 80031c2:	2301      	movs	r3, #1
 80031c4:	216b      	movs	r1, #107	; 0x6b
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffb4 	bl	8003134 <_icm_write_bytes>
    HAL_Delay(1);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f000 ffbd 	bl	800414c <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 80031d2:	f107 020c 	add.w	r2, r7, #12
 80031d6:	2301      	movs	r3, #1
 80031d8:	2175      	movs	r1, #117	; 0x75
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ff76 	bl	80030cc <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 80031e0:	7b3b      	ldrb	r3, [r7, #12]
 80031e2:	2bac      	cmp	r3, #172	; 0xac
 80031e4:	d001      	beq.n	80031ea <icm20601_init+0x58>
 80031e6:	2300      	movs	r3, #0
 80031e8:	e093      	b.n	8003312 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 80031ea:	233f      	movs	r3, #63	; 0x3f
 80031ec:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 80031ee:	f107 020f 	add.w	r2, r7, #15
 80031f2:	2301      	movs	r3, #1
 80031f4:	216c      	movs	r1, #108	; 0x6c
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff9c 	bl	8003134 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8003200:	f107 020f 	add.w	r2, r7, #15
 8003204:	2301      	movs	r3, #1
 8003206:	216a      	movs	r1, #106	; 0x6a
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff93 	bl	8003134 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 800320e:	2341      	movs	r3, #65	; 0x41
 8003210:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8003212:	f107 020f 	add.w	r2, r7, #15
 8003216:	2301      	movs	r3, #1
 8003218:	216a      	movs	r1, #106	; 0x6a
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ff8a 	bl	8003134 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7b1b      	ldrb	r3, [r3, #12]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d102      	bne.n	800322e <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8003228:	2308      	movs	r3, #8
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e002      	b.n	8003234 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7b1b      	ldrb	r3, [r3, #12]
 8003232:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8003234:	f107 020f 	add.w	r2, r7, #15
 8003238:	2301      	movs	r3, #1
 800323a:	211d      	movs	r1, #29
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff79 	bl	8003134 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7b5b      	ldrb	r3, [r3, #13]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 800324c:	f107 020f 	add.w	r2, r7, #15
 8003250:	2301      	movs	r3, #1
 8003252:	211c      	movs	r1, #28
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff6d 	bl	8003134 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7b9b      	ldrb	r3, [r3, #14]
 800325e:	2b08      	cmp	r3, #8
 8003260:	d119      	bne.n	8003296 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8003266:	f107 020f 	add.w	r2, r7, #15
 800326a:	2301      	movs	r3, #1
 800326c:	211a      	movs	r1, #26
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ff60 	bl	8003134 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7bdb      	ldrb	r3, [r3, #15]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	b25b      	sxtb	r3, r3
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	b25b      	sxtb	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8003286:	f107 020f 	add.w	r2, r7, #15
 800328a:	2301      	movs	r3, #1
 800328c:	211b      	movs	r1, #27
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff50 	bl	8003134 <_icm_write_bytes>
 8003294:	e033      	b.n	80032fe <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7b9b      	ldrb	r3, [r3, #14]
 800329a:	2b09      	cmp	r3, #9
 800329c:	d119      	bne.n	80032d2 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80032a2:	f107 020f 	add.w	r2, r7, #15
 80032a6:	2301      	movs	r3, #1
 80032a8:	211a      	movs	r1, #26
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ff42 	bl	8003134 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7bdb      	ldrb	r3, [r3, #15]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80032c2:	f107 020f 	add.w	r2, r7, #15
 80032c6:	2301      	movs	r3, #1
 80032c8:	211b      	movs	r1, #27
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ff32 	bl	8003134 <_icm_write_bytes>
 80032d0:	e015      	b.n	80032fe <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7b9b      	ldrb	r3, [r3, #14]
 80032d6:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80032d8:	f107 020f 	add.w	r2, r7, #15
 80032dc:	2301      	movs	r3, #1
 80032de:	211a      	movs	r1, #26
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff27 	bl	8003134 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7bdb      	ldrb	r3, [r3, #15]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80032f0:	f107 020f 	add.w	r2, r7, #15
 80032f4:	2301      	movs	r3, #1
 80032f6:	211b      	movs	r1, #27
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff1b 	bl	8003134 <_icm_write_bytes>
     }


    tmp = 0x00;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8003302:	f107 020f 	add.w	r2, r7, #15
 8003306:	2301      	movs	r3, #1
 8003308:	216c      	movs	r1, #108	; 0x6c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff12 	bl	8003134 <_icm_write_bytes>


    return 1;
 8003310:	2301      	movs	r3, #1
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8003324:	f107 0308 	add.w	r3, r7, #8
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 800332e:	f107 0208 	add.w	r2, r7, #8
 8003332:	2306      	movs	r3, #6
 8003334:	213b      	movs	r1, #59	; 0x3b
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fec8 	bl	80030cc <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 800333c:	7a3b      	ldrb	r3, [r7, #8]
 800333e:	b21a      	sxth	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	b21a      	sxth	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003358:	7a7b      	ldrb	r3, [r7, #9]
 800335a:	b21b      	sxth	r3, r3
 800335c:	4313      	orrs	r3, r2
 800335e:	b21a      	sxth	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8003364:	7aba      	ldrb	r2, [r7, #10]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	3302      	adds	r3, #2
 800336a:	b212      	sxth	r2, r2
 800336c:	801a      	strh	r2, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3302      	adds	r3, #2
 8003372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3302      	adds	r3, #2
 800337c:	b212      	sxth	r2, r2
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	3302      	adds	r3, #2
 8003384:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	b21a      	sxth	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	3302      	adds	r3, #2
 8003390:	430a      	orrs	r2, r1
 8003392:	b212      	sxth	r2, r2
 8003394:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8003396:	7b3a      	ldrb	r2, [r7, #12]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	3304      	adds	r3, #4
 800339c:	b212      	sxth	r2, r2
 800339e:	801a      	strh	r2, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	3304      	adds	r3, #4
 80033a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a8:	021a      	lsls	r2, r3, #8
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	b212      	sxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3304      	adds	r3, #4
 80033b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80033ba:	7b7b      	ldrb	r3, [r7, #13]
 80033bc:	b21a      	sxth	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	3304      	adds	r3, #4
 80033c2:	430a      	orrs	r2, r1
 80033c4:	b212      	sxth	r2, r2
 80033c6:	801a      	strh	r2, [r3, #0]
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 80033e4:	f107 0208 	add.w	r2, r7, #8
 80033e8:	2306      	movs	r3, #6
 80033ea:	2143      	movs	r1, #67	; 0x43
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff fe6d 	bl	80030cc <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 80033f2:	7a3b      	ldrb	r3, [r7, #8]
 80033f4:	b21a      	sxth	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	b21a      	sxth	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	801a      	strh	r2, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800340e:	7a7b      	ldrb	r3, [r7, #9]
 8003410:	b21b      	sxth	r3, r3
 8003412:	4313      	orrs	r3, r2
 8003414:	b21a      	sxth	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 800341a:	7aba      	ldrb	r2, [r7, #10]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	3302      	adds	r3, #2
 8003420:	b212      	sxth	r2, r2
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	3302      	adds	r3, #2
 8003428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342c:	021a      	lsls	r2, r3, #8
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	3302      	adds	r3, #2
 8003432:	b212      	sxth	r2, r2
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	3302      	adds	r3, #2
 800343a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	b21a      	sxth	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	3302      	adds	r3, #2
 8003446:	430a      	orrs	r2, r1
 8003448:	b212      	sxth	r2, r2
 800344a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 800344c:	7b3a      	ldrb	r2, [r7, #12]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3304      	adds	r3, #4
 8003452:	b212      	sxth	r2, r2
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	3304      	adds	r3, #4
 800345a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345e:	021a      	lsls	r2, r3, #8
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	3304      	adds	r3, #4
 8003464:	b212      	sxth	r2, r2
 8003466:	801a      	strh	r2, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	3304      	adds	r3, #4
 800346c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003470:	7b7b      	ldrb	r3, [r7, #13]
 8003472:	b21a      	sxth	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	3304      	adds	r3, #4
 8003478:	430a      	orrs	r2, r1
 800347a:	b212      	sxth	r2, r2
 800347c:	801a      	strh	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8003490:	2300      	movs	r3, #0
 8003492:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8003494:	f107 020c 	add.w	r2, r7, #12
 8003498:	2302      	movs	r3, #2
 800349a:	2141      	movs	r1, #65	; 0x41
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff fe15 	bl	80030cc <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 80034a2:	7b3b      	ldrb	r3, [r7, #12]
 80034a4:	b21a      	sxth	r2, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	801a      	strh	r2, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	b21a      	sxth	r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034be:	7b7b      	ldrb	r3, [r7, #13]
 80034c0:	b21b      	sxth	r3, r3
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b21a      	sxth	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	801a      	strh	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	0000      	movs	r0, r0
 80034d4:	0000      	movs	r0, r0
	...

080034d8 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 80034e2:	f107 0316 	add.w	r3, r7, #22
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ffcc 	bl	8003486 <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 80034ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034fa:	4b61      	ldr	r3, [pc, #388]	; (8003680 <icm20601_read_data+0x1a8>)
 80034fc:	ed93 7a00 	vldr	s14, [r3]
 8003500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003504:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7b5b      	ldrb	r3, [r3, #13]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd6f 	bl	8003004 <_get_accel_sensitivity>
 8003526:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 800352a:	f107 0310 	add.w	r3, r7, #16
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fef2 	bl	800331a <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 8003536:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003542:	edd7 7a07 	vldr	s15, [r7, #28]
 8003546:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800354a:	ee16 0a90 	vmov	r0, s13
 800354e:	f7fc fffb 	bl	8000548 <__aeabi_f2d>
 8003552:	a349      	add	r3, pc, #292	; (adr r3, 8003678 <icm20601_read_data+0x1a0>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd f84e 	bl	80005f8 <__aeabi_dmul>
 800355c:	4603      	mov	r3, r0
 800355e:	460c      	mov	r4, r1
 8003560:	4619      	mov	r1, r3
 8003562:	4622      	mov	r2, r4
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1d1c      	adds	r4, r3, #4
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	f7fd fb3c 	bl	8000be8 <__aeabi_d2f>
 8003570:	4603      	mov	r3, r0
 8003572:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8003574:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003580:	edd7 7a07 	vldr	s15, [r7, #28]
 8003584:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003588:	ee16 0a90 	vmov	r0, s13
 800358c:	f7fc ffdc 	bl	8000548 <__aeabi_f2d>
 8003590:	a339      	add	r3, pc, #228	; (adr r3, 8003678 <icm20601_read_data+0x1a0>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fd f82f 	bl	80005f8 <__aeabi_dmul>
 800359a:	4603      	mov	r3, r0
 800359c:	460c      	mov	r4, r1
 800359e:	4619      	mov	r1, r3
 80035a0:	4622      	mov	r2, r4
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f103 0408 	add.w	r4, r3, #8
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	f7fd fb1c 	bl	8000be8 <__aeabi_d2f>
 80035b0:	4603      	mov	r3, r0
 80035b2:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 80035b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80035c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035c8:	ee16 0a90 	vmov	r0, s13
 80035cc:	f7fc ffbc 	bl	8000548 <__aeabi_f2d>
 80035d0:	a329      	add	r3, pc, #164	; (adr r3, 8003678 <icm20601_read_data+0x1a0>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fd f80f 	bl	80005f8 <__aeabi_dmul>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	4619      	mov	r1, r3
 80035e0:	4622      	mov	r2, r4
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f103 040c 	add.w	r4, r3, #12
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	f7fd fafc 	bl	8000be8 <__aeabi_d2f>
 80035f0:	4603      	mov	r3, r0
 80035f2:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 80035f4:	f107 0308 	add.w	r3, r7, #8
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->accel_g);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7b5b      	ldrb	r3, [r3, #13]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fd2e 	bl	8003064 <_get_gyro_sensitivity>
 8003608:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fedc 	bl	80033d0 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 8003618:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	3310      	adds	r3, #16
 8003628:	ed97 7a06 	vldr	s14, [r7, #24]
 800362c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003630:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 8003634:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	ed97 7a06 	vldr	s14, [r7, #24]
 8003648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364c:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8003650:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	3318      	adds	r3, #24
 8003660:	ed97 7a06 	vldr	s14, [r7, #24]
 8003664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003668:	edc3 7a00 	vstr	s15, [r3]
}
 800366c:	bf00      	nop
 800366e:	3724      	adds	r7, #36	; 0x24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}
 8003674:	f3af 8000 	nop.w
 8003678:	51eb851f 	.word	0x51eb851f
 800367c:	40239eb8 	.word	0x40239eb8
 8003680:	20000114 	.word	0x20000114

08003684 <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	889b      	ldrh	r3, [r3, #4]
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f002 f8a1 	bl	80057de <HAL_GPIO_TogglePin>
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <turn_on>:

void turn_on(struct LED_dev * ctrl){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	889b      	ldrh	r3, [r3, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4619      	mov	r1, r3
 80036b8:	f002 f878 	bl	80057ac <HAL_GPIO_WritePin>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <turn_off>:

void turn_off(struct LED_dev * ctrl){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	889b      	ldrh	r3, [r3, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	4619      	mov	r1, r3
 80036d8:	f002 f868 	bl	80057ac <HAL_GPIO_WritePin>
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ms5607_init>:

#include <devices/MS5607.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 fe19 	bl	8006328 <HAL_I2C_GetState>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d003      	beq.n	8003704 <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 80036fc:	484a      	ldr	r0, [pc, #296]	; (8003828 <ms5607_init+0x144>)
 80036fe:	f00a fa1b 	bl	800db38 <puts>
 8003702:	e002      	b.n	800370a <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 8003704:	4849      	ldr	r0, [pc, #292]	; (800382c <ms5607_init+0x148>)
 8003706:	f00a fa17 	bl	800db38 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6858      	ldr	r0, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b299      	uxth	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	220a      	movs	r2, #10
 800371a:	f002 fcd7 	bl	80060cc <HAL_I2C_IsDeviceReady>
 800371e:	4603      	mov	r3, r0
 8003720:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 8003728:	4841      	ldr	r0, [pc, #260]	; (8003830 <ms5607_init+0x14c>)
 800372a:	f00a fa05 	bl	800db38 <puts>
		printf("Errorcode: %d\n", _ret);
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	4619      	mov	r1, r3
 8003732:	4840      	ldr	r0, [pc, #256]	; (8003834 <ms5607_init+0x150>)
 8003734:	f00a f98c 	bl	800da50 <iprintf>
		return 0;
 8003738:	2300      	movs	r3, #0
 800373a:	e070      	b.n	800381e <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 800373c:	231e      	movs	r3, #30
 800373e:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6858      	ldr	r0, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b299      	uxth	r1, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7a1b      	ldrb	r3, [r3, #8]
 800374e:	f107 0210 	add.w	r2, r7, #16
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2301      	movs	r3, #1
 8003756:	f002 f995 	bl	8005a84 <HAL_I2C_Master_Transmit>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 800375e:	2064      	movs	r0, #100	; 0x64
 8003760:	f000 fcf4 	bl	800414c <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e043      	b.n	80037f2 <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 800376a:	23a0      	movs	r3, #160	; 0xa0
 800376c:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	b2da      	uxtb	r2, r3
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	4413      	add	r3, r2
 800377a:	b2db      	uxtb	r3, r3
 800377c:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6858      	ldr	r0, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b299      	uxth	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7a1b      	ldrb	r3, [r3, #8]
 800378c:	f107 020f 	add.w	r2, r7, #15
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2301      	movs	r3, #1
 8003794:	f002 f976 	bl	8005a84 <HAL_I2C_Master_Transmit>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 800379c:	200f      	movs	r0, #15
 800379e:	f000 fcd5 	bl	800414c <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6858      	ldr	r0, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b299      	uxth	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7a1b      	ldrb	r3, [r3, #8]
 80037b0:	f107 020c 	add.w	r2, r7, #12
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2302      	movs	r3, #2
 80037b8:	f002 fa62 	bl	8005c80 <HAL_I2C_Master_Receive>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 80037c0:	7b3b      	ldrb	r3, [r7, #12]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	b299      	uxth	r1, r3
 80037c8:	7b7b      	ldrb	r3, [r7, #13]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	430a      	orrs	r2, r1
 80037d2:	b291      	uxth	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	460a      	mov	r2, r1
 80037de:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 80037e6:	4814      	ldr	r0, [pc, #80]	; (8003838 <ms5607_init+0x154>)
 80037e8:	f00a f9a6 	bl	800db38 <puts>
	for(int i = 1; i < 7; i++){
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3301      	adds	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	ddb8      	ble.n	800376a <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 80037f8:	4810      	ldr	r0, [pc, #64]	; (800383c <ms5607_init+0x158>)
 80037fa:	f00a f99d 	bl	800db38 <puts>

	buf[0] = 0x44;
 80037fe:	2344      	movs	r3, #68	; 0x44
 8003800:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6858      	ldr	r0, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b299      	uxth	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7a1b      	ldrb	r3, [r3, #8]
 8003810:	f107 020c 	add.w	r2, r7, #12
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2301      	movs	r3, #1
 8003818:	f002 f934 	bl	8005a84 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	0800fef4 	.word	0x0800fef4
 800382c:	0800ff04 	.word	0x0800ff04
 8003830:	0800ff14 	.word	0x0800ff14
 8003834:	0800ff24 	.word	0x0800ff24
 8003838:	0800ff34 	.word	0x0800ff34
 800383c:	0800ff4c 	.word	0x0800ff4c

08003840 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af02      	add	r7, sp, #8
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 800384a:	2300      	movs	r3, #0
 800384c:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6858      	ldr	r0, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b299      	uxth	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7a1b      	ldrb	r3, [r3, #8]
 800385c:	f107 020c 	add.w	r2, r7, #12
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2301      	movs	r3, #1
 8003864:	f002 f90e 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6858      	ldr	r0, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b299      	uxth	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7a1b      	ldrb	r3, [r3, #8]
 8003876:	f107 020c 	add.w	r2, r7, #12
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2303      	movs	r3, #3
 800387e:	f002 f9ff 	bl	8005c80 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8003882:	7b3b      	ldrb	r3, [r7, #12]
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	461a      	mov	r2, r3
 8003888:	7b7b      	ldrb	r3, [r7, #13]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	4313      	orrs	r3, r2
 800388e:	7bba      	ldrb	r2, [r7, #14]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8003896:	7b3a      	ldrb	r2, [r7, #12]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	7b7a      	ldrb	r2, [r7, #13]
 80038a2:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	3302      	adds	r3, #2
 80038a8:	7bba      	ldrb	r2, [r7, #14]
 80038aa:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 80038ac:	2354      	movs	r3, #84	; 0x54
 80038ae:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6858      	ldr	r0, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b299      	uxth	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7a1b      	ldrb	r3, [r3, #8]
 80038be:	f107 020c 	add.w	r2, r7, #12
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	f002 f8dd 	bl	8005a84 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 80038dc:	2300      	movs	r3, #0
 80038de:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6858      	ldr	r0, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	b299      	uxth	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	7a1b      	ldrb	r3, [r3, #8]
 80038ee:	f107 020c 	add.w	r2, r7, #12
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2301      	movs	r3, #1
 80038f6:	f002 f8c5 	bl	8005a84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6858      	ldr	r0, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b299      	uxth	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7a1b      	ldrb	r3, [r3, #8]
 8003908:	f107 020c 	add.w	r2, r7, #12
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2303      	movs	r3, #3
 8003910:	f002 f9b6 	bl	8005c80 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8003914:	7b3b      	ldrb	r3, [r7, #12]
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	461a      	mov	r2, r3
 800391a:	7b7b      	ldrb	r3, [r7, #13]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4313      	orrs	r3, r2
 8003920:	7bba      	ldrb	r2, [r7, #14]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	3303      	adds	r3, #3
 800392c:	7b3a      	ldrb	r2, [r7, #12]
 800392e:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	7b7a      	ldrb	r2, [r7, #13]
 8003936:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	3305      	adds	r3, #5
 800393c:	7bba      	ldrb	r2, [r7, #14]
 800393e:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 8003940:	2344      	movs	r3, #68	; 0x44
 8003942:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6858      	ldr	r0, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b299      	uxth	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7a1b      	ldrb	r3, [r3, #8]
 8003952:	f107 020c 	add.w	r2, r7, #12
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2301      	movs	r3, #1
 800395a:	f002 f893 	bl	8005a84 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8003968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800396c:	b092      	sub	sp, #72	; 0x48
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	895b      	ldrh	r3, [r3, #10]
 800397a:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	899b      	ldrh	r3, [r3, #12]
 8003980:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	89db      	ldrh	r3, [r3, #14]
 8003986:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8a1b      	ldrh	r3, [r3, #16]
 800398c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8a5b      	ldrh	r3, [r3, #18]
 8003992:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8a9b      	ldrh	r3, [r3, #20]
 8003998:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b0:	ee17 0a90 	vmov	r0, s15
 80039b4:	f7fc fdc8 	bl	8000548 <__aeabi_f2d>
 80039b8:	4604      	mov	r4, r0
 80039ba:	460d      	mov	r5, r1
 80039bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fdb0 	bl	8000524 <__aeabi_i2d>
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	4bd9      	ldr	r3, [pc, #868]	; (8003d30 <ms5607_convert+0x3c8>)
 80039ca:	f7fc fe15 	bl	80005f8 <__aeabi_dmul>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4620      	mov	r0, r4
 80039d4:	4629      	mov	r1, r5
 80039d6:	f7fc fc57 	bl	8000288 <__aeabi_dsub>
 80039da:	4603      	mov	r3, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	4618      	mov	r0, r3
 80039e0:	4621      	mov	r1, r4
 80039e2:	f7fd f901 	bl	8000be8 <__aeabi_d2f>
 80039e6:	4603      	mov	r3, r0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 80039ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fc fd99 	bl	8000524 <__aeabi_i2d>
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80039fa:	f7fc fdfd 	bl	80005f8 <__aeabi_dmul>
 80039fe:	4603      	mov	r3, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	4625      	mov	r5, r4
 8003a04:	461c      	mov	r4, r3
 8003a06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a18:	ee17 0a90 	vmov	r0, s15
 8003a1c:	f7fc fd94 	bl	8000548 <__aeabi_f2d>
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	4bc3      	ldr	r3, [pc, #780]	; (8003d34 <ms5607_convert+0x3cc>)
 8003a26:	f7fc ff11 	bl	800084c <__aeabi_ddiv>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	f7fc fc2b 	bl	800028c <__adddf3>
 8003a36:	4603      	mov	r3, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f7fd f8d3 	bl	8000be8 <__aeabi_d2f>
 8003a42:	4603      	mov	r3, r0
 8003a44:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 8003a46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd6b 	bl	8000524 <__aeabi_i2d>
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	4bb9      	ldr	r3, [pc, #740]	; (8003d38 <ms5607_convert+0x3d0>)
 8003a54:	f7fc fdd0 	bl	80005f8 <__aeabi_dmul>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	4625      	mov	r5, r4
 8003a5e:	461c      	mov	r4, r3
 8003a60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	ee17 0a90 	vmov	r0, s15
 8003a76:	f7fc fd67 	bl	8000548 <__aeabi_f2d>
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	4baf      	ldr	r3, [pc, #700]	; (8003d3c <ms5607_convert+0x3d4>)
 8003a80:	f7fc fee4 	bl	800084c <__aeabi_ddiv>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f7fc fbfe 	bl	800028c <__adddf3>
 8003a90:	4603      	mov	r3, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4618      	mov	r0, r3
 8003a96:	4621      	mov	r1, r4
 8003a98:	f7fd f8a6 	bl	8000be8 <__aeabi_d2f>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8003aa0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	ee17 0a90 	vmov	r0, s15
 8003ab6:	f7fc fd47 	bl	8000548 <__aeabi_f2d>
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <ms5607_convert+0x3d8>)
 8003ac0:	f7fc fec4 	bl	800084c <__aeabi_ddiv>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	4621      	mov	r1, r4
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	4b9c      	ldr	r3, [pc, #624]	; (8003d44 <ms5607_convert+0x3dc>)
 8003ad2:	f7fc fbdb 	bl	800028c <__adddf3>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	4618      	mov	r0, r3
 8003adc:	4621      	mov	r1, r4
 8003ade:	f7fd f883 	bl	8000be8 <__aeabi_d2f>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003af0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fd24 	bl	8000548 <__aeabi_f2d>
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	4b90      	ldr	r3, [pc, #576]	; (8003d48 <ms5607_convert+0x3e0>)
 8003b06:	f7fc fea1 	bl	800084c <__aeabi_ddiv>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	4625      	mov	r5, r4
 8003b10:	461c      	mov	r4, r3
 8003b12:	6a38      	ldr	r0, [r7, #32]
 8003b14:	f7fc fd18 	bl	8000548 <__aeabi_f2d>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	4629      	mov	r1, r5
 8003b20:	f7fc fbb2 	bl	8000288 <__aeabi_dsub>
 8003b24:	4603      	mov	r3, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	4618      	mov	r0, r3
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	4b86      	ldr	r3, [pc, #536]	; (8003d4c <ms5607_convert+0x3e4>)
 8003b32:	f7fc fe8b 	bl	800084c <__aeabi_ddiv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	f7fd f853 	bl	8000be8 <__aeabi_d2f>
 8003b42:	4603      	mov	r3, r0
 8003b44:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8003b58:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b5c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003d50 <ms5607_convert+0x3e8>
 8003b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b68:	f140 8104 	bpl.w	8003d74 <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 8003b6c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b78:	eddf 6a76 	vldr	s13, [pc, #472]	; 8003d54 <ms5607_convert+0x3ec>
 8003b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b80:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 8003b84:	69b8      	ldr	r0, [r7, #24]
 8003b86:	f7fc fcdf 	bl	8000548 <__aeabi_f2d>
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	4b6d      	ldr	r3, [pc, #436]	; (8003d44 <ms5607_convert+0x3dc>)
 8003b90:	f7fc fb7a 	bl	8000288 <__aeabi_dsub>
 8003b94:	4603      	mov	r3, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <ms5607_convert+0x3f0>)
 8003ba2:	f7fc fd29 	bl	80005f8 <__aeabi_dmul>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	4625      	mov	r5, r4
 8003bac:	461c      	mov	r4, r3
 8003bae:	69b8      	ldr	r0, [r7, #24]
 8003bb0:	f7fc fcca 	bl	8000548 <__aeabi_f2d>
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <ms5607_convert+0x3dc>)
 8003bba:	f7fc fb65 	bl	8000288 <__aeabi_dsub>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f7fc fd17 	bl	80005f8 <__aeabi_dmul>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	460c      	mov	r4, r1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	4b61      	ldr	r3, [pc, #388]	; (8003d5c <ms5607_convert+0x3f4>)
 8003bd8:	f7fc fe38 	bl	800084c <__aeabi_ddiv>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	4618      	mov	r0, r3
 8003be2:	4621      	mov	r1, r4
 8003be4:	f7fd f800 	bl	8000be8 <__aeabi_d2f>
 8003be8:	4603      	mov	r3, r0
 8003bea:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8003bec:	69b8      	ldr	r0, [r7, #24]
 8003bee:	f7fc fcab 	bl	8000548 <__aeabi_f2d>
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <ms5607_convert+0x3dc>)
 8003bf8:	f7fc fb46 	bl	8000288 <__aeabi_dsub>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	4618      	mov	r0, r3
 8003c02:	4621      	mov	r1, r4
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	f7fc fb40 	bl	800028c <__adddf3>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	4625      	mov	r5, r4
 8003c12:	461c      	mov	r4, r3
 8003c14:	69b8      	ldr	r0, [r7, #24]
 8003c16:	f7fc fc97 	bl	8000548 <__aeabi_f2d>
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <ms5607_convert+0x3dc>)
 8003c20:	f7fc fb32 	bl	8000288 <__aeabi_dsub>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7fc fce4 	bl	80005f8 <__aeabi_dmul>
 8003c30:	4603      	mov	r3, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	4618      	mov	r0, r3
 8003c36:	4621      	mov	r1, r4
 8003c38:	f7fc ffd6 	bl	8000be8 <__aeabi_d2f>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8003c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c44:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003d60 <ms5607_convert+0x3f8>
 8003c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	f140 8090 	bpl.w	8003d74 <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8003c54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003c56:	f7fc fc77 	bl	8000548 <__aeabi_f2d>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	460d      	mov	r5, r1
 8003c5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c62:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003d64 <ms5607_convert+0x3fc>
 8003c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c6a:	ee17 0a90 	vmov	r0, s15
 8003c6e:	f7fc fc6b 	bl	8000548 <__aeabi_f2d>
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	4b3c      	ldr	r3, [pc, #240]	; (8003d68 <ms5607_convert+0x400>)
 8003c78:	f7fc fcbe 	bl	80005f8 <__aeabi_dmul>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4690      	mov	r8, r2
 8003c82:	4699      	mov	r9, r3
 8003c84:	69b8      	ldr	r0, [r7, #24]
 8003c86:	f7fc fc5f 	bl	8000548 <__aeabi_f2d>
 8003c8a:	a327      	add	r3, pc, #156	; (adr r3, 8003d28 <ms5607_convert+0x3c0>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f7fc fafc 	bl	800028c <__adddf3>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	f7fc fcac 	bl	80005f8 <__aeabi_dmul>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f7fc faf0 	bl	800028c <__adddf3>
 8003cac:	4603      	mov	r3, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	f7fc ff98 	bl	8000be8 <__aeabi_d2f>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8003cbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cbe:	f7fc fc43 	bl	8000548 <__aeabi_f2d>
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	460d      	mov	r5, r1
 8003cc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003d64 <ms5607_convert+0x3fc>
 8003cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cd2:	ee17 0a90 	vmov	r0, s15
 8003cd6:	f7fc fc37 	bl	8000548 <__aeabi_f2d>
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <ms5607_convert+0x404>)
 8003ce0:	f7fc fc8a 	bl	80005f8 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4690      	mov	r8, r2
 8003cea:	4699      	mov	r9, r3
 8003cec:	69b8      	ldr	r0, [r7, #24]
 8003cee:	f7fc fc2b 	bl	8000548 <__aeabi_f2d>
 8003cf2:	a30d      	add	r3, pc, #52	; (adr r3, 8003d28 <ms5607_convert+0x3c0>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fac8 	bl	800028c <__adddf3>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4640      	mov	r0, r8
 8003d02:	4649      	mov	r1, r9
 8003d04:	f7fc fc78 	bl	80005f8 <__aeabi_dmul>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fc fabc 	bl	800028c <__adddf3>
 8003d14:	4603      	mov	r3, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	f7fc ff64 	bl	8000be8 <__aeabi_d2f>
 8003d20:	4603      	mov	r3, r0
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d24:	e026      	b.n	8003d74 <ms5607_convert+0x40c>
 8003d26:	bf00      	nop
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	40977000 	.word	0x40977000
 8003d30:	40700000 	.word	0x40700000
 8003d34:	40500000 	.word	0x40500000
 8003d38:	40f00000 	.word	0x40f00000
 8003d3c:	40600000 	.word	0x40600000
 8003d40:	41600000 	.word	0x41600000
 8003d44:	409f4000 	.word	0x409f4000
 8003d48:	41400000 	.word	0x41400000
 8003d4c:	40e00000 	.word	0x40e00000
 8003d50:	44fa0000 	.word	0x44fa0000
 8003d54:	4f000000 	.word	0x4f000000
 8003d58:	404e8000 	.word	0x404e8000
 8003d5c:	40300000 	.word	0x40300000
 8003d60:	c4bb8000 	.word	0xc4bb8000
 8003d64:	44bb8000 	.word	0x44bb8000
 8003d68:	402e0000 	.word	0x402e0000
 8003d6c:	40200000 	.word	0x40200000
 8003d70:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8003d74:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d80:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8003d84:	ed97 7a08 	vldr	s14, [r7, #32]
 8003d88:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d90:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8003d94:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da0:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8003da4:	ed97 7a06 	vldr	s14, [r7, #24]
 8003da8:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8003d70 <ms5607_convert+0x408>
 8003dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003db0:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	ee17 0a90 	vmov	r0, s15
 8003dca:	f7fc fbbd 	bl	8000548 <__aeabi_f2d>
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <ms5607_convert+0x4c4>)
 8003dd4:	f7fc fd3a 	bl	800084c <__aeabi_ddiv>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	4625      	mov	r5, r4
 8003dde:	461c      	mov	r4, r3
 8003de0:	6a38      	ldr	r0, [r7, #32]
 8003de2:	f7fc fbb1 	bl	8000548 <__aeabi_f2d>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	f7fc fa4b 	bl	8000288 <__aeabi_dsub>
 8003df2:	4603      	mov	r3, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	4618      	mov	r0, r3
 8003df8:	4621      	mov	r1, r4
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <ms5607_convert+0x4c8>)
 8003e00:	f7fc fd24 	bl	800084c <__aeabi_ddiv>
 8003e04:	4603      	mov	r3, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	f7fc feec 	bl	8000be8 <__aeabi_d2f>
 8003e10:	4603      	mov	r3, r0
 8003e12:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	601a      	str	r2, [r3, #0]
	*p = pressure;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 8003e20:	bf00      	nop
 8003e22:	3748      	adds	r7, #72	; 0x48
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e2a:	bf00      	nop
 8003e2c:	41400000 	.word	0x41400000
 8003e30:	40e00000 	.word	0x40e00000

08003e34 <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f002 fa71 	bl	8006328 <HAL_I2C_GetState>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d003      	beq.n	8003e54 <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8003e4c:	481f      	ldr	r0, [pc, #124]	; (8003ecc <sht31_init+0x98>)
 8003e4e:	f009 fe73 	bl	800db38 <puts>
 8003e52:	e002      	b.n	8003e5a <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8003e54:	481e      	ldr	r0, [pc, #120]	; (8003ed0 <sht31_init+0x9c>)
 8003e56:	f009 fe6f 	bl	800db38 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6858      	ldr	r0, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b299      	uxth	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7a1b      	ldrb	r3, [r3, #8]
 8003e68:	220a      	movs	r2, #10
 8003e6a:	f002 f92f 	bl	80060cc <HAL_I2C_IsDeviceReady>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d009      	beq.n	8003e8c <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8003e78:	4816      	ldr	r0, [pc, #88]	; (8003ed4 <sht31_init+0xa0>)
 8003e7a:	f009 fe5d 	bl	800db38 <puts>
		printf("Errorcode: %d\n", _ret);
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	4619      	mov	r1, r3
 8003e82:	4815      	ldr	r0, [pc, #84]	; (8003ed8 <sht31_init+0xa4>)
 8003e84:	f009 fde4 	bl	800da50 <iprintf>
		return 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e01b      	b.n	8003ec4 <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8003e8c:	4813      	ldr	r0, [pc, #76]	; (8003edc <sht31_init+0xa8>)
 8003e8e:	f009 fe53 	bl	800db38 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8003e92:	f242 4316 	movw	r3, #9238	; 0x2416
 8003e96:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8003e98:	89bb      	ldrh	r3, [r7, #12]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8003ea2:	89bb      	ldrh	r3, [r7, #12]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6858      	ldr	r0, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b299      	uxth	r1, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7a1b      	ldrb	r3, [r3, #8]
 8003eb6:	f107 0208 	add.w	r2, r7, #8
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f001 fde1 	bl	8005a84 <HAL_I2C_Master_Transmit>
	return 1;
 8003ec2:	2301      	movs	r3, #1
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0800ff60 	.word	0x0800ff60
 8003ed0:	0800ff70 	.word	0x0800ff70
 8003ed4:	0800ff80 	.word	0x0800ff80
 8003ed8:	0800ff94 	.word	0x0800ff94
 8003edc:	0800ffa4 	.word	0x0800ffa4

08003ee0 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b08d      	sub	sp, #52	; 0x34
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6858      	ldr	r0, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b299      	uxth	r1, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	7a1b      	ldrb	r3, [r3, #8]
 8003efa:	f107 0214 	add.w	r2, r7, #20
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2306      	movs	r3, #6
 8003f02:	f001 febd 	bl	8005c80 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8003f06:	7d3b      	ldrb	r3, [r7, #20]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	b21a      	sxth	r2, r3
 8003f0c:	7d7b      	ldrb	r3, [r7, #21]
 8003f0e:	b21b      	sxth	r3, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b21b      	sxth	r3, r3
 8003f14:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	b21a      	sxth	r2, r3
 8003f1c:	7e3b      	ldrb	r3, [r7, #24]
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 8003f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f30:	ee17 0a90 	vmov	r0, s15
 8003f34:	f7fc fb08 	bl	8000548 <__aeabi_f2d>
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	4b32      	ldr	r3, [pc, #200]	; (8004008 <sht31_read+0x128>)
 8003f3e:	f7fc fb5b 	bl	80005f8 <__aeabi_dmul>
 8003f42:	4603      	mov	r3, r0
 8003f44:	460c      	mov	r4, r1
 8003f46:	4618      	mov	r0, r3
 8003f48:	4621      	mov	r1, r4
 8003f4a:	a32d      	add	r3, pc, #180	; (adr r3, 8004000 <sht31_read+0x120>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f7fc fc7c 	bl	800084c <__aeabi_ddiv>
 8003f54:	4603      	mov	r3, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	f7fc fe44 	bl	8000be8 <__aeabi_d2f>
 8003f60:	4603      	mov	r3, r0
 8003f62:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8003f64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800400c <sht31_read+0x12c>
 8003f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f76:	ee17 0a90 	vmov	r0, s15
 8003f7a:	f7fc fae5 	bl	8000548 <__aeabi_f2d>
 8003f7e:	a320      	add	r3, pc, #128	; (adr r3, 8004000 <sht31_read+0x120>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc fc62 	bl	800084c <__aeabi_ddiv>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	4621      	mov	r1, r4
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <sht31_read+0x130>)
 8003f96:	f7fc f977 	bl	8000288 <__aeabi_dsub>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	f7fc fe21 	bl	8000be8 <__aeabi_d2f>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fbc:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc4:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8003fc6:	f242 4316 	movw	r3, #9238	; 0x2416
 8003fca:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 8003fcc:	8b7b      	ldrh	r3, [r7, #26]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8003fd6:	8b7b      	ldrh	r3, [r7, #26]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6858      	ldr	r0, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	b299      	uxth	r1, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	7a1b      	ldrb	r3, [r3, #8]
 8003fea:	f107 0214 	add.w	r2, r7, #20
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f001 fd47 	bl	8005a84 <HAL_I2C_Master_Transmit>

};
 8003ff6:	bf00      	nop
 8003ff8:	372c      	adds	r7, #44	; 0x2c
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd90      	pop	{r4, r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00000000 	.word	0x00000000
 8004004:	40efffe0 	.word	0x40efffe0
 8004008:	40590000 	.word	0x40590000
 800400c:	432f0000 	.word	0x432f0000
 8004010:	40468000 	.word	0x40468000

08004014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800404c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800401a:	e003      	b.n	8004024 <LoopCopyDataInit>

0800401c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800401e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004022:	3104      	adds	r1, #4

08004024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004024:	480b      	ldr	r0, [pc, #44]	; (8004054 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800402a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800402c:	d3f6      	bcc.n	800401c <CopyDataInit>
  ldr  r2, =_sbss
 800402e:	4a0b      	ldr	r2, [pc, #44]	; (800405c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004030:	e002      	b.n	8004038 <LoopFillZerobss>

08004032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004034:	f842 3b04 	str.w	r3, [r2], #4

08004038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800403a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800403c:	d3f9      	bcc.n	8004032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800403e:	f7fe fdcb 	bl	8002bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004042:	f009 f871 	bl	800d128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004046:	f7fd fe15 	bl	8001c74 <main>
  bx  lr    
 800404a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800404c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004050:	08010380 	.word	0x08010380
  ldr  r0, =_sdata
 8004054:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004058:	200002f0 	.word	0x200002f0
  ldr  r2, =_sbss
 800405c:	200002f0 	.word	0x200002f0
  ldr  r3, = _ebss
 8004060:	20005ce8 	.word	0x20005ce8

08004064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004064:	e7fe      	b.n	8004064 <ADC_IRQHandler>
	...

08004068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_Init+0x40>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_Init+0x40>)
 8004072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_Init+0x40>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <HAL_Init+0x40>)
 800407e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_Init+0x40>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <HAL_Init+0x40>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004090:	2003      	movs	r0, #3
 8004092:	f000 fd8b 	bl	8004bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004096:	2000      	movs	r0, #0
 8004098:	f000 f808 	bl	80040ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800409c:	f7fe fc5e 	bl	800295c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023c00 	.word	0x40023c00

080040ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_InitTick+0x54>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_InitTick+0x58>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fda3 	bl	8004c16 <HAL_SYSTICK_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00e      	b.n	80040f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d80a      	bhi.n	80040f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e0:	2200      	movs	r2, #0
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e8:	f000 fd6b 	bl	8004bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040ec:	4a06      	ldr	r2, [pc, #24]	; (8004108 <HAL_InitTick+0x5c>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000110 	.word	0x20000110
 8004104:	2000011c 	.word	0x2000011c
 8004108:	20000118 	.word	0x20000118

0800410c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_IncTick+0x20>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_IncTick+0x24>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4413      	add	r3, r2
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_IncTick+0x24>)
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000011c 	.word	0x2000011c
 8004130:	20003c74 	.word	0x20003c74

08004134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return uwTick;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_GetTick+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20003c74 	.word	0x20003c74

0800414c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff ffee 	bl	8004134 <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004164:	d005      	beq.n	8004172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_Delay+0x40>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004172:	bf00      	nop
 8004174:	f7ff ffde 	bl	8004134 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8f7      	bhi.n	8004174 <HAL_Delay+0x28>
  {
  }
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	2000011c 	.word	0x2000011c

08004190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e033      	b.n	800420e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd fae2 	bl	8001778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d118      	bne.n	8004200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041d6:	f023 0302 	bic.w	r3, r3, #2
 80041da:	f043 0202 	orr.w	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa94 	bl	8004710 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
 80041fe:	e001      	b.n	8004204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADC_Start_DMA+0x1e>
 8004232:	2302      	movs	r3, #2
 8004234:	e0cc      	b.n	80043d0 <HAL_ADC_Start_DMA+0x1b8>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d018      	beq.n	800427e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800425c:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <HAL_ADC_Start_DMA+0x1c0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a5e      	ldr	r2, [pc, #376]	; (80043dc <HAL_ADC_Start_DMA+0x1c4>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	0c9a      	lsrs	r2, r3, #18
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004270:	e002      	b.n	8004278 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3b01      	subs	r3, #1
 8004276:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f9      	bne.n	8004272 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 80a0 	bne.w	80043ce <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042cc:	d106      	bne.n	80042dc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f023 0206 	bic.w	r2, r3, #6
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
 80042da:	e002      	b.n	80042e2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042ea:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_ADC_Start_DMA+0x1c8>)
 80042ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	4a3c      	ldr	r2, [pc, #240]	; (80043e4 <HAL_ADC_Start_DMA+0x1cc>)
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	4a3b      	ldr	r2, [pc, #236]	; (80043e8 <HAL_ADC_Start_DMA+0x1d0>)
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	4a3a      	ldr	r2, [pc, #232]	; (80043ec <HAL_ADC_Start_DMA+0x1d4>)
 8004304:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800430e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800431e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	334c      	adds	r3, #76	; 0x4c
 800433a:	4619      	mov	r1, r3
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f000 fd24 	bl	8004d8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2b00      	cmp	r3, #0
 800434e:	d12a      	bne.n	80043a6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <HAL_ADC_Start_DMA+0x1d8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d015      	beq.n	8004386 <HAL_ADC_Start_DMA+0x16e>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <HAL_ADC_Start_DMA+0x1dc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d105      	bne.n	8004370 <HAL_ADC_Start_DMA+0x158>
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <HAL_ADC_Start_DMA+0x1c8>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <HAL_ADC_Start_DMA+0x1e0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d129      	bne.n	80043ce <HAL_ADC_Start_DMA+0x1b6>
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_ADC_Start_DMA+0x1c8>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2b0f      	cmp	r3, #15
 8004384:	d823      	bhi.n	80043ce <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11c      	bne.n	80043ce <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	e013      	b.n	80043ce <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <HAL_ADC_Start_DMA+0x1d8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10e      	bne.n	80043ce <HAL_ADC_Start_DMA+0x1b6>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80043cc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000110 	.word	0x20000110
 80043dc:	431bde83 	.word	0x431bde83
 80043e0:	40012300 	.word	0x40012300
 80043e4:	08004909 	.word	0x08004909
 80043e8:	080049c3 	.word	0x080049c3
 80043ec:	080049df 	.word	0x080049df
 80043f0:	40012000 	.word	0x40012000
 80043f4:	40012100 	.word	0x40012100
 80043f8:	40012200 	.word	0x40012200

080043fc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_ADC_Stop_DMA+0x1a>
 8004412:	2302      	movs	r3, #2
 8004414:	e038      	b.n	8004488 <HAL_ADC_Stop_DMA+0x8c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d120      	bne.n	800447e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fcf3 	bl	8004e3c <HAL_DMA_Abort>
 8004456:	4603      	mov	r3, r0
 8004458:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004468:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	f043 0201 	orr.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e105      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x228>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b09      	cmp	r3, #9
 80044f6:	d925      	bls.n	8004544 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	3b1e      	subs	r3, #30
 800450e:	2207      	movs	r2, #7
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43da      	mvns	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	400a      	ands	r2, r1
 800451c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68d9      	ldr	r1, [r3, #12]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	4618      	mov	r0, r3
 8004530:	4603      	mov	r3, r0
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4403      	add	r3, r0
 8004536:	3b1e      	subs	r3, #30
 8004538:	409a      	lsls	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	e022      	b.n	800458a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6919      	ldr	r1, [r3, #16]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	2207      	movs	r2, #7
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	400a      	ands	r2, r1
 8004566:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6919      	ldr	r1, [r3, #16]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	4618      	mov	r0, r3
 800457a:	4603      	mov	r3, r0
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4403      	add	r3, r0
 8004580:	409a      	lsls	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d824      	bhi.n	80045dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	3b05      	subs	r3, #5
 80045a4:	221f      	movs	r2, #31
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	400a      	ands	r2, r1
 80045b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4618      	mov	r0, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	3b05      	subs	r3, #5
 80045ce:	fa00 f203 	lsl.w	r2, r0, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
 80045da:	e04c      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d824      	bhi.n	800462e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	3b23      	subs	r3, #35	; 0x23
 80045f6:	221f      	movs	r2, #31
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43da      	mvns	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	400a      	ands	r2, r1
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	4618      	mov	r0, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	3b23      	subs	r3, #35	; 0x23
 8004620:	fa00 f203 	lsl.w	r2, r0, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
 800462c:	e023      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	3b41      	subs	r3, #65	; 0x41
 8004640:	221f      	movs	r2, #31
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43da      	mvns	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	400a      	ands	r2, r1
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	4618      	mov	r0, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	3b41      	subs	r3, #65	; 0x41
 800466a:	fa00 f203 	lsl.w	r2, r0, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004676:	4b22      	ldr	r3, [pc, #136]	; (8004700 <HAL_ADC_ConfigChannel+0x234>)
 8004678:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a21      	ldr	r2, [pc, #132]	; (8004704 <HAL_ADC_ConfigChannel+0x238>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d109      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x1cc>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b12      	cmp	r3, #18
 800468a:	d105      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <HAL_ADC_ConfigChannel+0x238>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d123      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x21e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d003      	beq.n	80046b2 <HAL_ADC_ConfigChannel+0x1e6>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b11      	cmp	r3, #17
 80046b0:	d11b      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d111      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <HAL_ADC_ConfigChannel+0x23c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a10      	ldr	r2, [pc, #64]	; (800470c <HAL_ADC_ConfigChannel+0x240>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	0c9a      	lsrs	r2, r3, #18
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046dc:	e002      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f9      	bne.n	80046de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40012300 	.word	0x40012300
 8004704:	40012000 	.word	0x40012000
 8004708:	20000110 	.word	0x20000110
 800470c:	431bde83 	.word	0x431bde83

08004710 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004718:	4b79      	ldr	r3, [pc, #484]	; (8004900 <ADC_Init+0x1f0>)
 800471a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	021a      	lsls	r2, r3, #8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6899      	ldr	r1, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	4a58      	ldr	r2, [pc, #352]	; (8004904 <ADC_Init+0x1f4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6899      	ldr	r1, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	e00f      	b.n	800480e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800480c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0202 	bic.w	r2, r2, #2
 800481c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6899      	ldr	r1, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7e1b      	ldrb	r3, [r3, #24]
 8004828:	005a      	lsls	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800485a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	3b01      	subs	r3, #1
 8004868:	035a      	lsls	r2, r3, #13
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	e007      	b.n	8004884 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004882:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	3b01      	subs	r3, #1
 80048a0:	051a      	lsls	r2, r3, #20
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048c6:	025a      	lsls	r2, r3, #9
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6899      	ldr	r1, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	029a      	lsls	r2, r3, #10
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40012300 	.word	0x40012300
 8004904:	0f000001 	.word	0x0f000001

08004908 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800491e:	2b00      	cmp	r3, #0
 8004920:	d13c      	bne.n	800499c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d12b      	bne.n	8004994 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004940:	2b00      	cmp	r3, #0
 8004942:	d127      	bne.n	8004994 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800495c:	2b00      	cmp	r3, #0
 800495e:	d119      	bne.n	8004994 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0220 	bic.w	r2, r2, #32
 800496e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fd7b 	bl	8004490 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800499a:	e00e      	b.n	80049ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fd85 	bl	80044b8 <HAL_ADC_ErrorCallback>
}
 80049ae:	e004      	b.n	80049ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff fd67 	bl	80044a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7ff fd5a 	bl	80044b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <__NVIC_SetPriorityGrouping>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <__NVIC_SetPriorityGrouping+0x44>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <__NVIC_SetPriorityGrouping+0x44>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	60d3      	str	r3, [r2, #12]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <__NVIC_GetPriorityGrouping>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <__NVIC_GetPriorityGrouping+0x18>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	f003 0307 	and.w	r3, r3, #7
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <__NVIC_EnableIRQ>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	db0b      	blt.n	8004a9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	f003 021f 	and.w	r2, r3, #31
 8004a88:	4907      	ldr	r1, [pc, #28]	; (8004aa8 <__NVIC_EnableIRQ+0x38>)
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2001      	movs	r0, #1
 8004a92:	fa00 f202 	lsl.w	r2, r0, r2
 8004a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	e000e100 	.word	0xe000e100

08004aac <__NVIC_SetPriority>:
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	db0a      	blt.n	8004ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	490c      	ldr	r1, [pc, #48]	; (8004af8 <__NVIC_SetPriority+0x4c>)
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ad4:	e00a      	b.n	8004aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4908      	ldr	r1, [pc, #32]	; (8004afc <__NVIC_SetPriority+0x50>)
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	3b04      	subs	r3, #4
 8004ae4:	0112      	lsls	r2, r2, #4
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	440b      	add	r3, r1
 8004aea:	761a      	strb	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000e100 	.word	0xe000e100
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <NVIC_EncodePriority>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b089      	sub	sp, #36	; 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f1c3 0307 	rsb	r3, r3, #7
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	bf28      	it	cs
 8004b1e:	2304      	movcs	r3, #4
 8004b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3304      	adds	r3, #4
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d902      	bls.n	8004b30 <NVIC_EncodePriority+0x30>
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3b03      	subs	r3, #3
 8004b2e:	e000      	b.n	8004b32 <NVIC_EncodePriority+0x32>
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	401a      	ands	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	43d9      	mvns	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b58:	4313      	orrs	r3, r2
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3724      	adds	r7, #36	; 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <SysTick_Config>:
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b78:	d301      	bcc.n	8004b7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00f      	b.n	8004b9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <SysTick_Config+0x40>)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b86:	210f      	movs	r1, #15
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b8c:	f7ff ff8e 	bl	8004aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <SysTick_Config+0x40>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <SysTick_Config+0x40>)
 8004b98:	2207      	movs	r2, #7
 8004b9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000e010 	.word	0xe000e010

08004bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ff29 	bl	8004a0c <__NVIC_SetPriorityGrouping>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4603      	mov	r3, r0
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bd4:	f7ff ff3e 	bl	8004a54 <__NVIC_GetPriorityGrouping>
 8004bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f7ff ff8e 	bl	8004b00 <NVIC_EncodePriority>
 8004be4:	4602      	mov	r2, r0
 8004be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff5d 	bl	8004aac <__NVIC_SetPriority>
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	4603      	mov	r3, r0
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff ff31 	bl	8004a70 <__NVIC_EnableIRQ>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ffa2 	bl	8004b68 <SysTick_Config>
 8004c24:	4603      	mov	r3, r0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7ff fa7a 	bl	8004134 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e099      	b.n	8004d80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c6c:	e00f      	b.n	8004c8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c6e:	f7ff fa61 	bl	8004134 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d908      	bls.n	8004c8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e078      	b.n	8004d80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e8      	bne.n	8004c6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <HAL_DMA_Init+0x158>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d117      	bne.n	8004d52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fb0d 	bl	8005354 <DMA_CheckFifoParam>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e016      	b.n	8004d80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fac4 	bl	80052e8 <DMA_CalcBaseAndBitshift>
 8004d60:	4603      	mov	r3, r0
 8004d62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	223f      	movs	r2, #63	; 0x3f
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	f010803f 	.word	0xf010803f

08004d8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_DMA_Start_IT+0x26>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e040      	b.n	8004e34 <HAL_DMA_Start_IT+0xa8>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d12f      	bne.n	8004e26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fa56 	bl	800528c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de4:	223f      	movs	r2, #63	; 0x3f
 8004de6:	409a      	lsls	r2, r3
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0216 	orr.w	r2, r2, #22
 8004dfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0208 	orr.w	r2, r2, #8
 8004e12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e005      	b.n	8004e32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e4a:	f7ff f973 	bl	8004134 <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d008      	beq.n	8004e6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e052      	b.n	8004f14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0216 	bic.w	r2, r2, #22
 8004e7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <HAL_DMA_Abort+0x62>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0208 	bic.w	r2, r2, #8
 8004eac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ebe:	e013      	b.n	8004ee8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ec0:	f7ff f938 	bl	8004134 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d90c      	bls.n	8004ee8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e015      	b.n	8004f14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e4      	bne.n	8004ec0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	223f      	movs	r2, #63	; 0x3f
 8004efc:	409a      	lsls	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e00c      	b.n	8004f54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2205      	movs	r2, #5
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f6c:	4b92      	ldr	r3, [pc, #584]	; (80051b8 <HAL_DMA_IRQHandler+0x258>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a92      	ldr	r2, [pc, #584]	; (80051bc <HAL_DMA_IRQHandler+0x25c>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	0a9b      	lsrs	r3, r3, #10
 8004f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01a      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0204 	bic.w	r2, r2, #4
 8004fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	2208      	movs	r2, #8
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	f043 0201 	orr.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d012      	beq.n	8005002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	2201      	movs	r2, #1
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f043 0202 	orr.w	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	2204      	movs	r2, #4
 8005008:	409a      	lsls	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4013      	ands	r3, r2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d012      	beq.n	8005038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00b      	beq.n	8005038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	2204      	movs	r2, #4
 8005026:	409a      	lsls	r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f043 0204 	orr.w	r2, r3, #4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	2210      	movs	r2, #16
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d043      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03c      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	2210      	movs	r2, #16
 800505c:	409a      	lsls	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d024      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
 800508e:	e01f      	b.n	80050d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01b      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
 80050a0:	e016      	b.n	80050d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0208 	bic.w	r2, r2, #8
 80050be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	2220      	movs	r2, #32
 80050d6:	409a      	lsls	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 808e 	beq.w	80051fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8086 	beq.w	80051fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f6:	2220      	movs	r2, #32
 80050f8:	409a      	lsls	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b05      	cmp	r3, #5
 8005108:	d136      	bne.n	8005178 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0216 	bic.w	r2, r2, #22
 8005118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <HAL_DMA_IRQHandler+0x1da>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0208 	bic.w	r2, r2, #8
 8005148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	223f      	movs	r2, #63	; 0x3f
 8005150:	409a      	lsls	r2, r3
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516a:	2b00      	cmp	r3, #0
 800516c:	d07d      	beq.n	800526a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
        }
        return;
 8005176:	e078      	b.n	800526a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01c      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d108      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	2b00      	cmp	r3, #0
 800519a:	d030      	beq.n	80051fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
 80051a4:	e02b      	b.n	80051fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d027      	beq.n	80051fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	e022      	b.n	80051fe <HAL_DMA_IRQHandler+0x29e>
 80051b8:	20000110 	.word	0x20000110
 80051bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10f      	bne.n	80051ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0210 	bic.w	r2, r2, #16
 80051dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	2b00      	cmp	r3, #0
 8005204:	d032      	beq.n	800526c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d022      	beq.n	8005258 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2205      	movs	r2, #5
 8005216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	3301      	adds	r3, #1
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	429a      	cmp	r2, r3
 8005234:	d307      	bcc.n	8005246 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f2      	bne.n	800522a <HAL_DMA_IRQHandler+0x2ca>
 8005244:	e000      	b.n	8005248 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005246:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
 8005268:	e000      	b.n	800526c <HAL_DMA_IRQHandler+0x30c>
        return;
 800526a:	bf00      	nop
    }
  }
}
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop

08005274 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d108      	bne.n	80052cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ca:	e007      	b.n	80052dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3b10      	subs	r3, #16
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <DMA_CalcBaseAndBitshift+0x64>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <DMA_CalcBaseAndBitshift+0x68>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d909      	bls.n	800532a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	659a      	str	r2, [r3, #88]	; 0x58
 8005328:	e007      	b.n	800533a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	aaaaaaab 	.word	0xaaaaaaab
 8005350:	08010014 	.word	0x08010014

08005354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11f      	bne.n	80053ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d855      	bhi.n	8005420 <DMA_CheckFifoParam+0xcc>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <DMA_CheckFifoParam+0x28>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800538d 	.word	0x0800538d
 8005380:	0800539f 	.word	0x0800539f
 8005384:	0800538d 	.word	0x0800538d
 8005388:	08005421 	.word	0x08005421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d045      	beq.n	8005424 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539c:	e042      	b.n	8005424 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053a6:	d13f      	bne.n	8005428 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ac:	e03c      	b.n	8005428 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d121      	bne.n	80053fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d836      	bhi.n	800542c <DMA_CheckFifoParam+0xd8>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <DMA_CheckFifoParam+0x70>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053db 	.word	0x080053db
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	080053ed 	.word	0x080053ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e02f      	b.n	800543a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d024      	beq.n	8005430 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ea:	e021      	b.n	8005430 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053f4:	d11e      	bne.n	8005434 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053fa:	e01b      	b.n	8005434 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d902      	bls.n	8005408 <DMA_CheckFifoParam+0xb4>
 8005402:	2b03      	cmp	r3, #3
 8005404:	d003      	beq.n	800540e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005406:	e018      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	e015      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
      break;
 800541e:	e00b      	b.n	8005438 <DMA_CheckFifoParam+0xe4>
      break;
 8005420:	bf00      	nop
 8005422:	e00a      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005424:	bf00      	nop
 8005426:	e008      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005428:	bf00      	nop
 800542a:	e006      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 800542c:	bf00      	nop
 800542e:	e004      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005430:	bf00      	nop
 8005432:	e002      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;   
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005438:	bf00      	nop
    }
  } 
  
  return status; 
 800543a:	7bfb      	ldrb	r3, [r7, #15]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005448:	b480      	push	{r7}
 800544a:	b089      	sub	sp, #36	; 0x24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e16b      	b.n	800573c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005464:	2201      	movs	r2, #1
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4013      	ands	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	429a      	cmp	r2, r3
 800547e:	f040 815a 	bne.w	8005736 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d00b      	beq.n	80054a2 <HAL_GPIO_Init+0x5a>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d007      	beq.n	80054a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005496:	2b11      	cmp	r3, #17
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b12      	cmp	r3, #18
 80054a0:	d130      	bne.n	8005504 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	2203      	movs	r2, #3
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d8:	2201      	movs	r2, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 0201 	and.w	r2, r3, #1
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	2203      	movs	r2, #3
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4313      	orrs	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0xfc>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b12      	cmp	r3, #18
 8005542:	d123      	bne.n	800558c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	08da      	lsrs	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3208      	adds	r2, #8
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	220f      	movs	r2, #15
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	08da      	lsrs	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3208      	adds	r2, #8
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	2203      	movs	r2, #3
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0203 	and.w	r2, r3, #3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80b4 	beq.w	8005736 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	4b5f      	ldr	r3, [pc, #380]	; (8005750 <HAL_GPIO_Init+0x308>)
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	4a5e      	ldr	r2, [pc, #376]	; (8005750 <HAL_GPIO_Init+0x308>)
 80055d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055dc:	6453      	str	r3, [r2, #68]	; 0x44
 80055de:	4b5c      	ldr	r3, [pc, #368]	; (8005750 <HAL_GPIO_Init+0x308>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ea:	4a5a      	ldr	r2, [pc, #360]	; (8005754 <HAL_GPIO_Init+0x30c>)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	3302      	adds	r3, #2
 80055f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	220f      	movs	r2, #15
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a51      	ldr	r2, [pc, #324]	; (8005758 <HAL_GPIO_Init+0x310>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02b      	beq.n	800566e <HAL_GPIO_Init+0x226>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a50      	ldr	r2, [pc, #320]	; (800575c <HAL_GPIO_Init+0x314>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d025      	beq.n	800566a <HAL_GPIO_Init+0x222>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a4f      	ldr	r2, [pc, #316]	; (8005760 <HAL_GPIO_Init+0x318>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01f      	beq.n	8005666 <HAL_GPIO_Init+0x21e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a4e      	ldr	r2, [pc, #312]	; (8005764 <HAL_GPIO_Init+0x31c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d019      	beq.n	8005662 <HAL_GPIO_Init+0x21a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a4d      	ldr	r2, [pc, #308]	; (8005768 <HAL_GPIO_Init+0x320>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_GPIO_Init+0x216>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a4c      	ldr	r2, [pc, #304]	; (800576c <HAL_GPIO_Init+0x324>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00d      	beq.n	800565a <HAL_GPIO_Init+0x212>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a4b      	ldr	r2, [pc, #300]	; (8005770 <HAL_GPIO_Init+0x328>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <HAL_GPIO_Init+0x20e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a4a      	ldr	r2, [pc, #296]	; (8005774 <HAL_GPIO_Init+0x32c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d101      	bne.n	8005652 <HAL_GPIO_Init+0x20a>
 800564e:	2307      	movs	r3, #7
 8005650:	e00e      	b.n	8005670 <HAL_GPIO_Init+0x228>
 8005652:	2308      	movs	r3, #8
 8005654:	e00c      	b.n	8005670 <HAL_GPIO_Init+0x228>
 8005656:	2306      	movs	r3, #6
 8005658:	e00a      	b.n	8005670 <HAL_GPIO_Init+0x228>
 800565a:	2305      	movs	r3, #5
 800565c:	e008      	b.n	8005670 <HAL_GPIO_Init+0x228>
 800565e:	2304      	movs	r3, #4
 8005660:	e006      	b.n	8005670 <HAL_GPIO_Init+0x228>
 8005662:	2303      	movs	r3, #3
 8005664:	e004      	b.n	8005670 <HAL_GPIO_Init+0x228>
 8005666:	2302      	movs	r3, #2
 8005668:	e002      	b.n	8005670 <HAL_GPIO_Init+0x228>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <HAL_GPIO_Init+0x228>
 800566e:	2300      	movs	r3, #0
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	f002 0203 	and.w	r2, r2, #3
 8005676:	0092      	lsls	r2, r2, #2
 8005678:	4093      	lsls	r3, r2
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005680:	4934      	ldr	r1, [pc, #208]	; (8005754 <HAL_GPIO_Init+0x30c>)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	3302      	adds	r3, #2
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800568e:	4b3a      	ldr	r3, [pc, #232]	; (8005778 <HAL_GPIO_Init+0x330>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056b2:	4a31      	ldr	r2, [pc, #196]	; (8005778 <HAL_GPIO_Init+0x330>)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056b8:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <HAL_GPIO_Init+0x330>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056dc:	4a26      	ldr	r2, [pc, #152]	; (8005778 <HAL_GPIO_Init+0x330>)
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056e2:	4b25      	ldr	r3, [pc, #148]	; (8005778 <HAL_GPIO_Init+0x330>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <HAL_GPIO_Init+0x330>)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <HAL_GPIO_Init+0x330>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005730:	4a11      	ldr	r2, [pc, #68]	; (8005778 <HAL_GPIO_Init+0x330>)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3301      	adds	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b0f      	cmp	r3, #15
 8005740:	f67f ae90 	bls.w	8005464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005744:	bf00      	nop
 8005746:	3724      	adds	r7, #36	; 0x24
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40023800 	.word	0x40023800
 8005754:	40013800 	.word	0x40013800
 8005758:	40020000 	.word	0x40020000
 800575c:	40020400 	.word	0x40020400
 8005760:	40020800 	.word	0x40020800
 8005764:	40020c00 	.word	0x40020c00
 8005768:	40021000 	.word	0x40021000
 800576c:	40021400 	.word	0x40021400
 8005770:	40021800 	.word	0x40021800
 8005774:	40021c00 	.word	0x40021c00
 8005778:	40013c00 	.word	0x40013c00

0800577c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
 8005798:	e001      	b.n	800579e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	807b      	strh	r3, [r7, #2]
 80057b8:	4613      	mov	r3, r2
 80057ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057bc:	787b      	ldrb	r3, [r7, #1]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057c2:	887a      	ldrh	r2, [r7, #2]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057c8:	e003      	b.n	80057d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057ca:	887b      	ldrh	r3, [r7, #2]
 80057cc:	041a      	lsls	r2, r3, #16
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	619a      	str	r2, [r3, #24]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	887b      	ldrh	r3, [r7, #2]
 80057f0:	401a      	ands	r2, r3
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d104      	bne.n	8005802 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057f8:	887b      	ldrh	r3, [r7, #2]
 80057fa:	041a      	lsls	r2, r3, #16
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005800:	e002      	b.n	8005808 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e11f      	b.n	8005a66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc f99e 	bl	8001b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	; 0x24
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005878:	f001 fca4 	bl	80071c4 <HAL_RCC_GetPCLK1Freq>
 800587c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	4a7b      	ldr	r2, [pc, #492]	; (8005a70 <HAL_I2C_Init+0x25c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d807      	bhi.n	8005898 <HAL_I2C_Init+0x84>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a7a      	ldr	r2, [pc, #488]	; (8005a74 <HAL_I2C_Init+0x260>)
 800588c:	4293      	cmp	r3, r2
 800588e:	bf94      	ite	ls
 8005890:	2301      	movls	r3, #1
 8005892:	2300      	movhi	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e006      	b.n	80058a6 <HAL_I2C_Init+0x92>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a77      	ldr	r2, [pc, #476]	; (8005a78 <HAL_I2C_Init+0x264>)
 800589c:	4293      	cmp	r3, r2
 800589e:	bf94      	ite	ls
 80058a0:	2301      	movls	r3, #1
 80058a2:	2300      	movhi	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e0db      	b.n	8005a66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a72      	ldr	r2, [pc, #456]	; (8005a7c <HAL_I2C_Init+0x268>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	0c9b      	lsrs	r3, r3, #18
 80058b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4a64      	ldr	r2, [pc, #400]	; (8005a70 <HAL_I2C_Init+0x25c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d802      	bhi.n	80058e8 <HAL_I2C_Init+0xd4>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3301      	adds	r3, #1
 80058e6:	e009      	b.n	80058fc <HAL_I2C_Init+0xe8>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	4a63      	ldr	r2, [pc, #396]	; (8005a80 <HAL_I2C_Init+0x26c>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	3301      	adds	r3, #1
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	430b      	orrs	r3, r1
 8005902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800590e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4956      	ldr	r1, [pc, #344]	; (8005a70 <HAL_I2C_Init+0x25c>)
 8005918:	428b      	cmp	r3, r1
 800591a:	d80d      	bhi.n	8005938 <HAL_I2C_Init+0x124>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1e59      	subs	r1, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	fbb1 f3f3 	udiv	r3, r1, r3
 800592a:	3301      	adds	r3, #1
 800592c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005930:	2b04      	cmp	r3, #4
 8005932:	bf38      	it	cc
 8005934:	2304      	movcc	r3, #4
 8005936:	e04f      	b.n	80059d8 <HAL_I2C_Init+0x1c4>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d111      	bne.n	8005964 <HAL_I2C_Init+0x150>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1e58      	subs	r0, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	440b      	add	r3, r1
 800594e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005952:	3301      	adds	r3, #1
 8005954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf0c      	ite	eq
 800595c:	2301      	moveq	r3, #1
 800595e:	2300      	movne	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e012      	b.n	800598a <HAL_I2C_Init+0x176>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1e58      	subs	r0, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	0099      	lsls	r1, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_I2C_Init+0x17e>
 800598e:	2301      	movs	r3, #1
 8005990:	e022      	b.n	80059d8 <HAL_I2C_Init+0x1c4>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10e      	bne.n	80059b8 <HAL_I2C_Init+0x1a4>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1e58      	subs	r0, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	440b      	add	r3, r1
 80059a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ac:	3301      	adds	r3, #1
 80059ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b6:	e00f      	b.n	80059d8 <HAL_I2C_Init+0x1c4>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1e58      	subs	r0, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	0099      	lsls	r1, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ce:	3301      	adds	r3, #1
 80059d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	6809      	ldr	r1, [r1, #0]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6911      	ldr	r1, [r2, #16]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68d2      	ldr	r2, [r2, #12]
 8005a12:	4311      	orrs	r1, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	000186a0 	.word	0x000186a0
 8005a74:	001e847f 	.word	0x001e847f
 8005a78:	003d08ff 	.word	0x003d08ff
 8005a7c:	431bde83 	.word	0x431bde83
 8005a80:	10624dd3 	.word	0x10624dd3

08005a84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	460b      	mov	r3, r1
 8005a92:	817b      	strh	r3, [r7, #10]
 8005a94:	4613      	mov	r3, r2
 8005a96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a98:	f7fe fb4c 	bl	8004134 <HAL_GetTick>
 8005a9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	f040 80e0 	bne.w	8005c6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2319      	movs	r3, #25
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	4970      	ldr	r1, [pc, #448]	; (8005c78 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fd92 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e0d3      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_I2C_Master_Transmit+0x50>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0cc      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x1ea>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d007      	beq.n	8005afa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2221      	movs	r2, #33	; 0x21
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2210      	movs	r2, #16
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	893a      	ldrh	r2, [r7, #8]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a50      	ldr	r2, [pc, #320]	; (8005c7c <HAL_I2C_Master_Transmit+0x1f8>)
 8005b3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b3c:	8979      	ldrh	r1, [r7, #10]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	6a3a      	ldr	r2, [r7, #32]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fbfe 	bl	8006344 <I2C_MasterRequestWrite>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e08d      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b68:	e066      	b.n	8005c38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	6a39      	ldr	r1, [r7, #32]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fe0c 	bl	800678c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d107      	bne.n	8005b92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e06b      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d11b      	bne.n	8005c0c <HAL_I2C_Master_Transmit+0x188>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d017      	beq.n	8005c0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	6a39      	ldr	r1, [r7, #32]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fdfc 	bl	800680e <I2C_WaitOnBTFFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00d      	beq.n	8005c38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d107      	bne.n	8005c34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e01a      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d194      	bne.n	8005b6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00100002 	.word	0x00100002
 8005c7c:	ffff0000 	.word	0xffff0000

08005c80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	; 0x30
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	817b      	strh	r3, [r7, #10]
 8005c90:	4613      	mov	r3, r2
 8005c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c94:	f7fe fa4e 	bl	8004134 <HAL_GetTick>
 8005c98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	f040 820b 	bne.w	80060be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	2319      	movs	r3, #25
 8005cae:	2201      	movs	r2, #1
 8005cb0:	497c      	ldr	r1, [pc, #496]	; (8005ea4 <HAL_I2C_Master_Receive+0x224>)
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fc94 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e1fe      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_I2C_Master_Receive+0x50>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e1f7      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d007      	beq.n	8005cf6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0201 	orr.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2222      	movs	r2, #34	; 0x22
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2210      	movs	r2, #16
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	893a      	ldrh	r2, [r7, #8]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a5c      	ldr	r2, [pc, #368]	; (8005ea8 <HAL_I2C_Master_Receive+0x228>)
 8005d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d38:	8979      	ldrh	r1, [r7, #10]
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fb82 	bl	8006448 <I2C_MasterRequestRead>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e1b8      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d113      	bne.n	8005d7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d56:	2300      	movs	r3, #0
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e18c      	b.n	8006098 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d11b      	bne.n	8005dbe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e16c      	b.n	8006098 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d11b      	bne.n	8005dfe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	e14c      	b.n	8006098 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e24:	e138      	b.n	8006098 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	f200 80f1 	bhi.w	8006012 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d123      	bne.n	8005e80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fd27 	bl	8006890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e139      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e7e:	e10b      	b.n	8006098 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d14e      	bne.n	8005f26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	2200      	movs	r2, #0
 8005e90:	4906      	ldr	r1, [pc, #24]	; (8005eac <HAL_I2C_Master_Receive+0x22c>)
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fba4 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e10e      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
 8005ea2:	bf00      	nop
 8005ea4:	00100002 	.word	0x00100002
 8005ea8:	ffff0000 	.word	0xffff0000
 8005eac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f24:	e0b8      	b.n	8006098 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4966      	ldr	r1, [pc, #408]	; (80060c8 <HAL_I2C_Master_Receive+0x448>)
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fb55 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0bf      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2200      	movs	r2, #0
 8005f8a:	494f      	ldr	r1, [pc, #316]	; (80060c8 <HAL_I2C_Master_Receive+0x448>)
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fb27 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e091      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006010:	e042      	b.n	8006098 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fc3a 	bl	8006890 <I2C_WaitOnRXNEFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e04c      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b04      	cmp	r3, #4
 8006064:	d118      	bne.n	8006098 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	f47f aec2 	bne.w	8005e26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3728      	adds	r7, #40	; 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	00010004 	.word	0x00010004

080060cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	460b      	mov	r3, r1
 80060da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80060dc:	f7fe f82a 	bl	8004134 <HAL_GetTick>
 80060e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	f040 8110 	bne.w	8006314 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2319      	movs	r3, #25
 80060fa:	2201      	movs	r2, #1
 80060fc:	4988      	ldr	r1, [pc, #544]	; (8006320 <HAL_I2C_IsDeviceReady+0x254>)
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fa6e 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
 800610c:	e103      	b.n	8006316 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_I2C_IsDeviceReady+0x50>
 8006118:	2302      	movs	r3, #2
 800611a:	e0fc      	b.n	8006316 <HAL_I2C_IsDeviceReady+0x24a>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d007      	beq.n	8006142 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006150:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2224      	movs	r2, #36	; 0x24
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a70      	ldr	r2, [pc, #448]	; (8006324 <HAL_I2C_IsDeviceReady+0x258>)
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006174:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fa2c 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e0b6      	b.n	8006316 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a8:	897b      	ldrh	r3, [r7, #10]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061b6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80061b8:	f7fd ffbc 	bl	8004134 <HAL_GetTick>
 80061bc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80061ec:	e025      	b.n	800623a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fd ffa1 	bl	8004134 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <HAL_I2C_IsDeviceReady+0x138>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	22a0      	movs	r2, #160	; 0xa0
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	bf0c      	ite	eq
 800621a:	2301      	moveq	r3, #1
 800621c:	2300      	movne	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	bf0c      	ite	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	2300      	movne	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2ba0      	cmp	r3, #160	; 0xa0
 8006244:	d005      	beq.n	8006252 <HAL_I2C_IsDeviceReady+0x186>
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <HAL_I2C_IsDeviceReady+0x186>
 800624c:	7dbb      	ldrb	r3, [r7, #22]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0cd      	beq.n	80061ee <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b02      	cmp	r3, #2
 8006266:	d129      	bne.n	80062bc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006276:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	2319      	movs	r3, #25
 8006294:	2201      	movs	r2, #1
 8006296:	4922      	ldr	r1, [pc, #136]	; (8006320 <HAL_I2C_IsDeviceReady+0x254>)
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f9a1 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e036      	b.n	8006316 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e02c      	b.n	8006316 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ca:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062d4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	2319      	movs	r3, #25
 80062dc:	2201      	movs	r2, #1
 80062de:	4910      	ldr	r1, [pc, #64]	; (8006320 <HAL_I2C_IsDeviceReady+0x254>)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f97d 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e012      	b.n	8006316 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	f4ff af33 	bcc.w	8006166 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8006314:	2302      	movs	r3, #2
  }
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	00100002 	.word	0x00100002
 8006324:	ffff0000 	.word	0xffff0000

08006328 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
}
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	460b      	mov	r3, r1
 8006352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d006      	beq.n	800636e <I2C_MasterRequestWrite+0x2a>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d003      	beq.n	800636e <I2C_MasterRequestWrite+0x2a>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800636c:	d108      	bne.n	8006380 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e00b      	b.n	8006398 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	2b12      	cmp	r3, #18
 8006386:	d107      	bne.n	8006398 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f91b 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e035      	b.n	8006436 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d2:	d108      	bne.n	80063e6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063d4:	897b      	ldrh	r3, [r7, #10]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063e2:	611a      	str	r2, [r3, #16]
 80063e4:	e01b      	b.n	800641e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063e6:	897b      	ldrh	r3, [r7, #10]
 80063e8:	11db      	asrs	r3, r3, #7
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 0306 	and.w	r3, r3, #6
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f063 030f 	orn	r3, r3, #15
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	490f      	ldr	r1, [pc, #60]	; (8006440 <I2C_MasterRequestWrite+0xfc>)
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f942 	bl	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e010      	b.n	8006436 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006414:	897b      	ldrh	r3, [r7, #10]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	4908      	ldr	r1, [pc, #32]	; (8006444 <I2C_MasterRequestWrite+0x100>)
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f932 	bl	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	00010008 	.word	0x00010008
 8006444:	00010002 	.word	0x00010002

08006448 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	460b      	mov	r3, r1
 8006456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800646c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b08      	cmp	r3, #8
 8006472:	d006      	beq.n	8006482 <I2C_MasterRequestRead+0x3a>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d003      	beq.n	8006482 <I2C_MasterRequestRead+0x3a>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006480:	d108      	bne.n	8006494 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e00b      	b.n	80064ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	2b11      	cmp	r3, #17
 800649a:	d107      	bne.n	80064ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f891 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00c      	beq.n	80064de <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e078      	b.n	80065d0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e6:	d108      	bne.n	80064fa <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064e8:	897b      	ldrh	r3, [r7, #10]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	611a      	str	r2, [r3, #16]
 80064f8:	e05e      	b.n	80065b8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064fa:	897b      	ldrh	r3, [r7, #10]
 80064fc:	11db      	asrs	r3, r3, #7
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f003 0306 	and.w	r3, r3, #6
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f063 030f 	orn	r3, r3, #15
 800650a:	b2da      	uxtb	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4930      	ldr	r1, [pc, #192]	; (80065d8 <I2C_MasterRequestRead+0x190>)
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f8b8 	bl	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e053      	b.n	80065d0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006528:	897b      	ldrh	r3, [r7, #10]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4929      	ldr	r1, [pc, #164]	; (80065dc <I2C_MasterRequestRead+0x194>)
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f8a8 	bl	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e043      	b.n	80065d0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006548:	2300      	movs	r3, #0
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800656c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f830 	bl	80065e0 <I2C_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00c      	beq.n	80065a0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e017      	b.n	80065d0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80065a0:	897b      	ldrh	r3, [r7, #10]
 80065a2:	11db      	asrs	r3, r3, #7
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0306 	and.w	r3, r3, #6
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f063 030e 	orn	r3, r3, #14
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4907      	ldr	r1, [pc, #28]	; (80065dc <I2C_MasterRequestRead+0x194>)
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f865 	bl	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	00010008 	.word	0x00010008
 80065dc:	00010002 	.word	0x00010002

080065e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065f0:	e025      	b.n	800663e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065f8:	d021      	beq.n	800663e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fa:	f7fd fd9b 	bl	8004134 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d116      	bne.n	800663e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f043 0220 	orr.w	r2, r3, #32
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e023      	b.n	8006686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d10d      	bne.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	43da      	mvns	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	e00c      	b.n	800667e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	43da      	mvns	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d0b6      	beq.n	80065f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800669c:	e051      	b.n	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ac:	d123      	bne.n	80066f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e046      	b.n	8006784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fc:	d021      	beq.n	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fe:	f7fd fd19 	bl	8004134 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d302      	bcc.n	8006714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d116      	bne.n	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e020      	b.n	8006784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	0c1b      	lsrs	r3, r3, #16
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d10c      	bne.n	8006766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	43da      	mvns	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e00b      	b.n	800677e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	43da      	mvns	r2, r3
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d18d      	bne.n	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006798:	e02d      	b.n	80067f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f8ce 	bl	800693c <I2C_IsAcknowledgeFailed>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e02d      	b.n	8006806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b0:	d021      	beq.n	80067f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7fd fcbf 	bl	8004134 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d302      	bcc.n	80067c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d116      	bne.n	80067f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0220 	orr.w	r2, r3, #32
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e007      	b.n	8006806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006800:	2b80      	cmp	r3, #128	; 0x80
 8006802:	d1ca      	bne.n	800679a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800681a:	e02d      	b.n	8006878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f88d 	bl	800693c <I2C_IsAcknowledgeFailed>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e02d      	b.n	8006888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006832:	d021      	beq.n	8006878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006834:	f7fd fc7e 	bl	8004134 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	429a      	cmp	r2, r3
 8006842:	d302      	bcc.n	800684a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d116      	bne.n	8006878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e007      	b.n	8006888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b04      	cmp	r3, #4
 8006884:	d1ca      	bne.n	800681c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800689c:	e042      	b.n	8006924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d119      	bne.n	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0210 	mvn.w	r2, #16
 80068b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e029      	b.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e0:	f7fd fc28 	bl	8004134 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d302      	bcc.n	80068f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d116      	bne.n	8006924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	f043 0220 	orr.w	r2, r3, #32
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e007      	b.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d1b5      	bne.n	800689e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006952:	d11b      	bne.n	800698c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800695c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	f043 0204 	orr.w	r2, r3, #4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e25b      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d075      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ba:	4ba3      	ldr	r3, [pc, #652]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 030c 	and.w	r3, r3, #12
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d00c      	beq.n	80069e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069c6:	4ba0      	ldr	r3, [pc, #640]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d112      	bne.n	80069f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069d2:	4b9d      	ldr	r3, [pc, #628]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069de:	d10b      	bne.n	80069f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e0:	4b99      	ldr	r3, [pc, #612]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d05b      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x108>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d157      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e236      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a00:	d106      	bne.n	8006a10 <HAL_RCC_OscConfig+0x74>
 8006a02:	4b91      	ldr	r3, [pc, #580]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a90      	ldr	r2, [pc, #576]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e01d      	b.n	8006a4c <HAL_RCC_OscConfig+0xb0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a18:	d10c      	bne.n	8006a34 <HAL_RCC_OscConfig+0x98>
 8006a1a:	4b8b      	ldr	r3, [pc, #556]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a8a      	ldr	r2, [pc, #552]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	4b88      	ldr	r3, [pc, #544]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a87      	ldr	r2, [pc, #540]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e00b      	b.n	8006a4c <HAL_RCC_OscConfig+0xb0>
 8006a34:	4b84      	ldr	r3, [pc, #528]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a83      	ldr	r2, [pc, #524]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	4b81      	ldr	r3, [pc, #516]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a80      	ldr	r2, [pc, #512]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d013      	beq.n	8006a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a54:	f7fd fb6e 	bl	8004134 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a5c:	f7fd fb6a 	bl	8004134 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b64      	cmp	r3, #100	; 0x64
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e1fb      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6e:	4b76      	ldr	r3, [pc, #472]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCC_OscConfig+0xc0>
 8006a7a:	e014      	b.n	8006aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7c:	f7fd fb5a 	bl	8004134 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a84:	f7fd fb56 	bl	8004134 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	; 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e1e7      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a96:	4b6c      	ldr	r3, [pc, #432]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f0      	bne.n	8006a84 <HAL_RCC_OscConfig+0xe8>
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d063      	beq.n	8006b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ab2:	4b65      	ldr	r3, [pc, #404]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006abe:	4b62      	ldr	r3, [pc, #392]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d11c      	bne.n	8006b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aca:	4b5f      	ldr	r3, [pc, #380]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d116      	bne.n	8006b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad6:	4b5c      	ldr	r3, [pc, #368]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_RCC_OscConfig+0x152>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d001      	beq.n	8006aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e1bb      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aee:	4b56      	ldr	r3, [pc, #344]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4952      	ldr	r1, [pc, #328]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b02:	e03a      	b.n	8006b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d020      	beq.n	8006b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b0c:	4b4f      	ldr	r3, [pc, #316]	; (8006c4c <HAL_RCC_OscConfig+0x2b0>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fd fb0f 	bl	8004134 <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b1a:	f7fd fb0b 	bl	8004134 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e19c      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2c:	4b46      	ldr	r3, [pc, #280]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0f0      	beq.n	8006b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b38:	4b43      	ldr	r3, [pc, #268]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4940      	ldr	r1, [pc, #256]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	600b      	str	r3, [r1, #0]
 8006b4c:	e015      	b.n	8006b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b4e:	4b3f      	ldr	r3, [pc, #252]	; (8006c4c <HAL_RCC_OscConfig+0x2b0>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b54:	f7fd faee 	bl	8004134 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b5c:	f7fd faea 	bl	8004134 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e17b      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6e:	4b36      	ldr	r3, [pc, #216]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d030      	beq.n	8006be8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d016      	beq.n	8006bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b8e:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <HAL_RCC_OscConfig+0x2b4>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b94:	f7fd face 	bl	8004134 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b9c:	f7fd faca 	bl	8004134 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e15b      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0f0      	beq.n	8006b9c <HAL_RCC_OscConfig+0x200>
 8006bba:	e015      	b.n	8006be8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bbc:	4b24      	ldr	r3, [pc, #144]	; (8006c50 <HAL_RCC_OscConfig+0x2b4>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bc2:	f7fd fab7 	bl	8004134 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bca:	f7fd fab3 	bl	8004134 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e144      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bdc:	4b1a      	ldr	r3, [pc, #104]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80a0 	beq.w	8006d36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10f      	bne.n	8006c26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	4a0e      	ldr	r2, [pc, #56]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c14:	6413      	str	r3, [r2, #64]	; 0x40
 8006c16:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <HAL_RCC_OscConfig+0x2ac>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c26:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <HAL_RCC_OscConfig+0x2b8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d121      	bne.n	8006c76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c32:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <HAL_RCC_OscConfig+0x2b8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a07      	ldr	r2, [pc, #28]	; (8006c54 <HAL_RCC_OscConfig+0x2b8>)
 8006c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c3e:	f7fd fa79 	bl	8004134 <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c44:	e011      	b.n	8006c6a <HAL_RCC_OscConfig+0x2ce>
 8006c46:	bf00      	nop
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	42470000 	.word	0x42470000
 8006c50:	42470e80 	.word	0x42470e80
 8006c54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c58:	f7fd fa6c 	bl	8004134 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e0fd      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c6a:	4b81      	ldr	r3, [pc, #516]	; (8006e70 <HAL_RCC_OscConfig+0x4d4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d106      	bne.n	8006c8c <HAL_RCC_OscConfig+0x2f0>
 8006c7e:	4b7d      	ldr	r3, [pc, #500]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	4a7c      	ldr	r2, [pc, #496]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8a:	e01c      	b.n	8006cc6 <HAL_RCC_OscConfig+0x32a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	d10c      	bne.n	8006cae <HAL_RCC_OscConfig+0x312>
 8006c94:	4b77      	ldr	r3, [pc, #476]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c98:	4a76      	ldr	r2, [pc, #472]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006c9a:	f043 0304 	orr.w	r3, r3, #4
 8006c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca0:	4b74      	ldr	r3, [pc, #464]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	4a73      	ldr	r2, [pc, #460]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6713      	str	r3, [r2, #112]	; 0x70
 8006cac:	e00b      	b.n	8006cc6 <HAL_RCC_OscConfig+0x32a>
 8006cae:	4b71      	ldr	r3, [pc, #452]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a70      	ldr	r2, [pc, #448]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	4b6e      	ldr	r3, [pc, #440]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	4a6d      	ldr	r2, [pc, #436]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d015      	beq.n	8006cfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cce:	f7fd fa31 	bl	8004134 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd6:	f7fd fa2d 	bl	8004134 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e0bc      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	4b61      	ldr	r3, [pc, #388]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ee      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x33a>
 8006cf8:	e014      	b.n	8006d24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfa:	f7fd fa1b 	bl	8004134 <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7fd fa17 	bl	8004134 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e0a6      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d18:	4b56      	ldr	r3, [pc, #344]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ee      	bne.n	8006d02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d105      	bne.n	8006d36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2a:	4b52      	ldr	r3, [pc, #328]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	4a51      	ldr	r2, [pc, #324]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 8092 	beq.w	8006e64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d40:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d05c      	beq.n	8006e06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d141      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d54:	4b48      	ldr	r3, [pc, #288]	; (8006e78 <HAL_RCC_OscConfig+0x4dc>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5a:	f7fd f9eb 	bl	8004134 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d62:	f7fd f9e7 	bl	8004134 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e078      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d74:	4b3f      	ldr	r3, [pc, #252]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f0      	bne.n	8006d62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	019b      	lsls	r3, r3, #6
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	061b      	lsls	r3, r3, #24
 8006da4:	4933      	ldr	r1, [pc, #204]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006daa:	4b33      	ldr	r3, [pc, #204]	; (8006e78 <HAL_RCC_OscConfig+0x4dc>)
 8006dac:	2201      	movs	r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fd f9c0 	bl	8004134 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fd f9bc 	bl	8004134 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e04d      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dca:	4b2a      	ldr	r3, [pc, #168]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0x41c>
 8006dd6:	e045      	b.n	8006e64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd8:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <HAL_RCC_OscConfig+0x4dc>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dde:	f7fd f9a9 	bl	8004134 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de6:	f7fd f9a5 	bl	8004134 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e036      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df8:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f0      	bne.n	8006de6 <HAL_RCC_OscConfig+0x44a>
 8006e04:	e02e      	b.n	8006e64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e029      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e12:	4b18      	ldr	r3, [pc, #96]	; (8006e74 <HAL_RCC_OscConfig+0x4d8>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d11c      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d115      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d10d      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d106      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d001      	beq.n	8006e64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40007000 	.word	0x40007000
 8006e74:	40023800 	.word	0x40023800
 8006e78:	42470060 	.word	0x42470060

08006e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0cc      	b.n	800702a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e90:	4b68      	ldr	r3, [pc, #416]	; (8007034 <HAL_RCC_ClockConfig+0x1b8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d90c      	bls.n	8006eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9e:	4b65      	ldr	r3, [pc, #404]	; (8007034 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea6:	4b63      	ldr	r3, [pc, #396]	; (8007034 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0b8      	b.n	800702a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d020      	beq.n	8006f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ed0:	4b59      	ldr	r3, [pc, #356]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	4a58      	ldr	r2, [pc, #352]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ee8:	4b53      	ldr	r3, [pc, #332]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4a52      	ldr	r2, [pc, #328]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef4:	4b50      	ldr	r3, [pc, #320]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	494d      	ldr	r1, [pc, #308]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d044      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d107      	bne.n	8006f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f1a:	4b47      	ldr	r3, [pc, #284]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d119      	bne.n	8006f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e07f      	b.n	800702a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d003      	beq.n	8006f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d107      	bne.n	8006f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f3a:	4b3f      	ldr	r3, [pc, #252]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e06f      	b.n	800702a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f4a:	4b3b      	ldr	r3, [pc, #236]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e067      	b.n	800702a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f5a:	4b37      	ldr	r3, [pc, #220]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f023 0203 	bic.w	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	4934      	ldr	r1, [pc, #208]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f6c:	f7fd f8e2 	bl	8004134 <HAL_GetTick>
 8006f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f72:	e00a      	b.n	8006f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f74:	f7fd f8de 	bl	8004134 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e04f      	b.n	800702a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8a:	4b2b      	ldr	r3, [pc, #172]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 020c 	and.w	r2, r3, #12
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d1eb      	bne.n	8006f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f9c:	4b25      	ldr	r3, [pc, #148]	; (8007034 <HAL_RCC_ClockConfig+0x1b8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d20c      	bcs.n	8006fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	4b22      	ldr	r3, [pc, #136]	; (8007034 <HAL_RCC_ClockConfig+0x1b8>)
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb2:	4b20      	ldr	r3, [pc, #128]	; (8007034 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e032      	b.n	800702a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d008      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fd0:	4b19      	ldr	r3, [pc, #100]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	4916      	ldr	r1, [pc, #88]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fee:	4b12      	ldr	r3, [pc, #72]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	490e      	ldr	r1, [pc, #56]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007002:	f000 f821 	bl	8007048 <HAL_RCC_GetSysClockFreq>
 8007006:	4601      	mov	r1, r0
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	4a0a      	ldr	r2, [pc, #40]	; (800703c <HAL_RCC_ClockConfig+0x1c0>)
 8007014:	5cd3      	ldrb	r3, [r2, r3]
 8007016:	fa21 f303 	lsr.w	r3, r1, r3
 800701a:	4a09      	ldr	r2, [pc, #36]	; (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 800701c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd f842 	bl	80040ac <HAL_InitTick>

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40023c00 	.word	0x40023c00
 8007038:	40023800 	.word	0x40023800
 800703c:	0800fffc 	.word	0x0800fffc
 8007040:	20000110 	.word	0x20000110
 8007044:	20000118 	.word	0x20000118

08007048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	2300      	movs	r3, #0
 8007058:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800705e:	4b50      	ldr	r3, [pc, #320]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 030c 	and.w	r3, r3, #12
 8007066:	2b04      	cmp	r3, #4
 8007068:	d007      	beq.n	800707a <HAL_RCC_GetSysClockFreq+0x32>
 800706a:	2b08      	cmp	r3, #8
 800706c:	d008      	beq.n	8007080 <HAL_RCC_GetSysClockFreq+0x38>
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 808d 	bne.w	800718e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007074:	4b4b      	ldr	r3, [pc, #300]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007076:	60bb      	str	r3, [r7, #8]
       break;
 8007078:	e08c      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800707a:	4b4b      	ldr	r3, [pc, #300]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800707c:	60bb      	str	r3, [r7, #8]
      break;
 800707e:	e089      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007080:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007088:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800708a:	4b45      	ldr	r3, [pc, #276]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d023      	beq.n	80070de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007096:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	099b      	lsrs	r3, r3, #6
 800709c:	f04f 0400 	mov.w	r4, #0
 80070a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	ea03 0501 	and.w	r5, r3, r1
 80070ac:	ea04 0602 	and.w	r6, r4, r2
 80070b0:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80070b2:	fb02 f106 	mul.w	r1, r2, r6
 80070b6:	2200      	movs	r2, #0
 80070b8:	fb02 f205 	mul.w	r2, r2, r5
 80070bc:	440a      	add	r2, r1
 80070be:	493a      	ldr	r1, [pc, #232]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80070c0:	fba5 0101 	umull	r0, r1, r5, r1
 80070c4:	1853      	adds	r3, r2, r1
 80070c6:	4619      	mov	r1, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f04f 0400 	mov.w	r4, #0
 80070ce:	461a      	mov	r2, r3
 80070d0:	4623      	mov	r3, r4
 80070d2:	f7f9 fdd9 	bl	8000c88 <__aeabi_uldivmod>
 80070d6:	4603      	mov	r3, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e049      	b.n	8007172 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	099b      	lsrs	r3, r3, #6
 80070e4:	f04f 0400 	mov.w	r4, #0
 80070e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	ea03 0501 	and.w	r5, r3, r1
 80070f4:	ea04 0602 	and.w	r6, r4, r2
 80070f8:	4629      	mov	r1, r5
 80070fa:	4632      	mov	r2, r6
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	f04f 0400 	mov.w	r4, #0
 8007104:	0154      	lsls	r4, r2, #5
 8007106:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800710a:	014b      	lsls	r3, r1, #5
 800710c:	4619      	mov	r1, r3
 800710e:	4622      	mov	r2, r4
 8007110:	1b49      	subs	r1, r1, r5
 8007112:	eb62 0206 	sbc.w	r2, r2, r6
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	f04f 0400 	mov.w	r4, #0
 800711e:	0194      	lsls	r4, r2, #6
 8007120:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007124:	018b      	lsls	r3, r1, #6
 8007126:	1a5b      	subs	r3, r3, r1
 8007128:	eb64 0402 	sbc.w	r4, r4, r2
 800712c:	f04f 0100 	mov.w	r1, #0
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	00e2      	lsls	r2, r4, #3
 8007136:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800713a:	00d9      	lsls	r1, r3, #3
 800713c:	460b      	mov	r3, r1
 800713e:	4614      	mov	r4, r2
 8007140:	195b      	adds	r3, r3, r5
 8007142:	eb44 0406 	adc.w	r4, r4, r6
 8007146:	f04f 0100 	mov.w	r1, #0
 800714a:	f04f 0200 	mov.w	r2, #0
 800714e:	02a2      	lsls	r2, r4, #10
 8007150:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007154:	0299      	lsls	r1, r3, #10
 8007156:	460b      	mov	r3, r1
 8007158:	4614      	mov	r4, r2
 800715a:	4618      	mov	r0, r3
 800715c:	4621      	mov	r1, r4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f04f 0400 	mov.w	r4, #0
 8007164:	461a      	mov	r2, r3
 8007166:	4623      	mov	r3, r4
 8007168:	f7f9 fd8e 	bl	8000c88 <__aeabi_uldivmod>
 800716c:	4603      	mov	r3, r0
 800716e:	460c      	mov	r4, r1
 8007170:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	0c1b      	lsrs	r3, r3, #16
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	3301      	adds	r3, #1
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	fbb2 f3f3 	udiv	r3, r2, r3
 800718a:	60bb      	str	r3, [r7, #8]
      break;
 800718c:	e002      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800718e:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007190:	60bb      	str	r3, [r7, #8]
      break;
 8007192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007194:	68bb      	ldr	r3, [r7, #8]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719e:	bf00      	nop
 80071a0:	40023800 	.word	0x40023800
 80071a4:	00f42400 	.word	0x00f42400
 80071a8:	017d7840 	.word	0x017d7840

080071ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071b0:	4b03      	ldr	r3, [pc, #12]	; (80071c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000110 	.word	0x20000110

080071c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071c8:	f7ff fff0 	bl	80071ac <HAL_RCC_GetHCLKFreq>
 80071cc:	4601      	mov	r1, r0
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	0a9b      	lsrs	r3, r3, #10
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	4a03      	ldr	r2, [pc, #12]	; (80071e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071da:	5cd3      	ldrb	r3, [r2, r3]
 80071dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40023800 	.word	0x40023800
 80071e8:	0801000c 	.word	0x0801000c

080071ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e022      	b.n	8007244 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7fb f9c9 	bl	80025a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2203      	movs	r2, #3
 800721a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f814 	bl	800724c <HAL_SD_InitCard>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e00a      	b.n	8007244 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800724c:	b5b0      	push	{r4, r5, r7, lr}
 800724e:	b08e      	sub	sp, #56	; 0x38
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007254:	2300      	movs	r3, #0
 8007256:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800725c:	2300      	movs	r3, #0
 800725e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007268:	2376      	movs	r3, #118	; 0x76
 800726a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681d      	ldr	r5, [r3, #0]
 8007270:	466c      	mov	r4, sp
 8007272:	f107 0314 	add.w	r3, r7, #20
 8007276:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800727a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800727e:	f107 0308 	add.w	r3, r7, #8
 8007282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007284:	4628      	mov	r0, r5
 8007286:	f002 f803 	bl	8009290 <SDIO_Init>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e031      	b.n	8007300 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <HAL_SD_InitCard+0xbc>)
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 f83b 	bl	8009322 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80072ac:	4b16      	ldr	r3, [pc, #88]	; (8007308 <HAL_SD_InitCard+0xbc>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 ffdc 	bl	8008270 <SD_PowerON>
 80072b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e013      	b.n	8007300 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fefb 	bl	80080d4 <SD_InitCard>
 80072de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00b      	beq.n	80072fe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3728      	adds	r7, #40	; 0x28
 8007304:	46bd      	mov	sp, r7
 8007306:	bdb0      	pop	{r4, r5, r7, pc}
 8007308:	422580a0 	.word	0x422580a0

0800730c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08c      	sub	sp, #48	; 0x30
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d107      	bne.n	8007334 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0c9      	b.n	80074c8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	f040 80c2 	bne.w	80074c6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	441a      	add	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007352:	429a      	cmp	r2, r3
 8007354:	d907      	bls.n	8007366 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e0b0      	b.n	80074c8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2203      	movs	r2, #3
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007384:	f043 0302 	orr.w	r3, r3, #2
 8007388:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	4a50      	ldr	r2, [pc, #320]	; (80074d0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8007390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	4a4f      	ldr	r2, [pc, #316]	; (80074d4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007398:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	2200      	movs	r2, #0
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3380      	adds	r3, #128	; 0x80
 80073ac:	4619      	mov	r1, r3
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	025b      	lsls	r3, r3, #9
 80073b4:	089b      	lsrs	r3, r3, #2
 80073b6:	f7fd fce9 	bl	8004d8c <HAL_DMA_Start_IT>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80073ce:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a40      	ldr	r2, [pc, #256]	; (80074d8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e06b      	b.n	80074c8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80073f0:	4b3a      	ldr	r3, [pc, #232]	; (80074dc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d002      	beq.n	8007404 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	025b      	lsls	r3, r3, #9
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800740c:	4618      	mov	r0, r3
 800740e:	f002 f81b 	bl	8009448 <SDMMC_CmdBlockLength>
 8007412:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00f      	beq.n	800743a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007420:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	431a      	orrs	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e046      	b.n	80074c8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800743e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	025b      	lsls	r3, r3, #9
 8007444:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007446:	2390      	movs	r3, #144	; 0x90
 8007448:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800744a:	2302      	movs	r3, #2
 800744c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800744e:	2300      	movs	r3, #0
 8007450:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007452:	2301      	movs	r3, #1
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f107 0210 	add.w	r2, r7, #16
 800745e:	4611      	mov	r1, r2
 8007460:	4618      	mov	r0, r3
 8007462:	f001 ffc5 	bl	80093f0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d90a      	bls.n	8007482 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2282      	movs	r2, #130	; 0x82
 8007470:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007478:	4618      	mov	r0, r3
 800747a:	f002 f829 	bl	80094d0 <SDMMC_CmdReadMultiBlock>
 800747e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007480:	e009      	b.n	8007496 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2281      	movs	r2, #129	; 0x81
 8007486:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fffc 	bl	800948c <SDMMC_CmdReadSingleBlock>
 8007494:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d012      	beq.n	80074c2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0d      	ldr	r2, [pc, #52]	; (80074d8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	431a      	orrs	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e002      	b.n	80074c8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e000      	b.n	80074c8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80074c6:	2302      	movs	r3, #2
  }
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3730      	adds	r7, #48	; 0x30
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	08007ee3 	.word	0x08007ee3
 80074d4:	08007f55 	.word	0x08007f55
 80074d8:	004005ff 	.word	0x004005ff
 80074dc:	4225858c 	.word	0x4225858c

080074e0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08c      	sub	sp, #48	; 0x30
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d107      	bne.n	8007508 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0ce      	b.n	80076a6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	f040 80c7 	bne.w	80076a4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800751c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	441a      	add	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007526:	429a      	cmp	r2, r3
 8007528:	d907      	bls.n	800753a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e0b5      	b.n	80076a6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2203      	movs	r2, #3
 800753e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2200      	movs	r2, #0
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007558:	f043 0302 	orr.w	r3, r3, #2
 800755c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	4a53      	ldr	r2, [pc, #332]	; (80076b0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756a:	4a52      	ldr	r2, [pc, #328]	; (80076b4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800756c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007572:	2200      	movs	r2, #0
 8007574:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	2b01      	cmp	r3, #1
 800757c:	d002      	beq.n	8007584 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	025b      	lsls	r3, r3, #9
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800758c:	4618      	mov	r0, r3
 800758e:	f001 ff5b 	bl	8009448 <SDMMC_CmdBlockLength>
 8007592:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00f      	beq.n	80075ba <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a46      	ldr	r2, [pc, #280]	; (80076b8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	431a      	orrs	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e075      	b.n	80076a6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d90a      	bls.n	80075d6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	22a0      	movs	r2, #160	; 0xa0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 ffc3 	bl	8009558 <SDMMC_CmdWriteMultiBlock>
 80075d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80075d4:	e009      	b.n	80075ea <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2290      	movs	r2, #144	; 0x90
 80075da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 ff96 	bl	8009514 <SDMMC_CmdWriteSingleBlock>
 80075e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a30      	ldr	r2, [pc, #192]	; (80076b8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	431a      	orrs	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e047      	b.n	80076a6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007616:	4b29      	ldr	r3, [pc, #164]	; (80076bc <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3380      	adds	r3, #128	; 0x80
 8007628:	461a      	mov	r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	025b      	lsls	r3, r3, #9
 800762e:	089b      	lsrs	r3, r3, #2
 8007630:	f7fd fbac 	bl	8004d8c <HAL_DMA_Start_IT>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01c      	beq.n	8007674 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8007648:	f023 0302 	bic.w	r3, r3, #2
 800764c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007654:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e018      	b.n	80076a6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007678:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	025b      	lsls	r3, r3, #9
 800767e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007680:	2390      	movs	r3, #144	; 0x90
 8007682:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007688:	2300      	movs	r3, #0
 800768a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800768c:	2301      	movs	r3, #1
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f107 0210 	add.w	r2, r7, #16
 8007698:	4611      	mov	r1, r2
 800769a:	4618      	mov	r0, r3
 800769c:	f001 fea8 	bl	80093f0 <SDIO_ConfigData>

      return HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	e000      	b.n	80076a6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80076a4:	2302      	movs	r3, #2
  }
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3730      	adds	r7, #48	; 0x30
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	08007eb9 	.word	0x08007eb9
 80076b4:	08007f55 	.word	0x08007f55
 80076b8:	004005ff 	.word	0x004005ff
 80076bc:	4225858c 	.word	0x4225858c

080076c0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_SD_IRQHandler+0x2e>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 ffd8 	bl	800869c <SD_Read_IT>
 80076ec:	e165      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 808f 	beq.w	800781c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007706:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007716:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800771a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d039      	beq.n	80077aa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <HAL_SD_IRQHandler+0x8a>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d011      	beq.n	800776e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f001 ff24 	bl	800959c <SDMMC_CmdStopTransfer>
 8007754:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f92f 	bl	80079cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f240 523a 	movw	r2, #1338	; 0x53a
 8007776:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <HAL_SD_IRQHandler+0xda>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f002 fb82 	bl	8009ea4 <HAL_SD_RxCpltCallback>
 80077a0:	e10b      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f002 fb74 	bl	8009e90 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80077a8:	e107      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8102 	beq.w	80079ba <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d011      	beq.n	80077e4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fee9 	bl	800959c <SDMMC_CmdStopTransfer>
 80077ca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d008      	beq.n	80077e4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f8f4 	bl	80079cc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 80e5 	bne.w	80079ba <HAL_SD_IRQHandler+0x2fa>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 80df 	bne.w	80079ba <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0208 	bic.w	r2, r2, #8
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f002 fb3b 	bl	8009e90 <HAL_SD_TxCpltCallback>
}
 800781a:	e0ce      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <HAL_SD_IRQHandler+0x17c>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 ff82 	bl	800873e <SD_Write_IT>
 800783a:	e0be      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007842:	f240 233a 	movw	r3, #570	; 0x23a
 8007846:	4013      	ands	r3, r2
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80b6 	beq.w	80079ba <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	f043 0202 	orr.w	r2, r3, #2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	f043 0208 	orr.w	r2, r3, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	f043 0220 	orr.w	r2, r3, #32
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	f043 0210 	orr.w	r2, r3, #16
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	f043 0208 	orr.w	r2, r3, #8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f240 723a 	movw	r2, #1850	; 0x73a
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6812      	ldr	r2, [r2, #0]
 80078e4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80078e8:	f023 0302 	bic.w	r3, r3, #2
 80078ec:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fe52 	bl	800959c <SDMMC_CmdStopTransfer>
 80078f8:	4602      	mov	r2, r0
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f855 	bl	80079cc <HAL_SD_ErrorCallback>
}
 8007922:	e04a      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	d045      	beq.n	80079ba <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <HAL_SD_IRQHandler+0x282>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d011      	beq.n	8007966 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <HAL_SD_IRQHandler+0x304>)
 8007948:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	4618      	mov	r0, r3
 8007950:	f7fd fae4 	bl	8004f1c <HAL_DMA_Abort_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d02f      	beq.n	80079ba <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fb4a 	bl	8007ff8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007964:	e029      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <HAL_SD_IRQHandler+0x2ba>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d011      	beq.n	800799e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	4a12      	ldr	r2, [pc, #72]	; (80079c8 <HAL_SD_IRQHandler+0x308>)
 8007980:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	4618      	mov	r0, r3
 8007988:	f7fd fac8 	bl	8004f1c <HAL_DMA_Abort_IT>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d013      	beq.n	80079ba <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fb65 	bl	8008066 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800799c:	e00d      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f002 fa62 	bl	8009e7c <HAL_SD_AbortCallback>
}
 80079b8:	e7ff      	b.n	80079ba <HAL_SD_IRQHandler+0x2fa>
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	08007ff9 	.word	0x08007ff9
 80079c8:	08008067 	.word	0x08008067

080079cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ee:	0f9b      	lsrs	r3, r3, #30
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079fa:	0e9b      	lsrs	r3, r3, #26
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0c:	0e1b      	lsrs	r3, r3, #24
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 0303 	and.w	r3, r3, #3
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1e:	0c1b      	lsrs	r3, r3, #16
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a40:	0d1b      	lsrs	r3, r3, #20
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a5e:	0bdb      	lsrs	r3, r3, #15
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a70:	0b9b      	lsrs	r3, r3, #14
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a82:	0b5b      	lsrs	r3, r3, #13
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a94:	0b1b      	lsrs	r3, r3, #12
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d163      	bne.n	8007b78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab4:	009a      	lsls	r2, r3, #2
 8007ab6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007aba:	4013      	ands	r3, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ac0:	0f92      	lsrs	r2, r2, #30
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007acc:	0edb      	lsrs	r3, r3, #27
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ade:	0e1b      	lsrs	r3, r3, #24
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af0:	0d5b      	lsrs	r3, r3, #21
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b02:	0c9b      	lsrs	r3, r3, #18
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b14:	0bdb      	lsrs	r3, r3, #15
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	7e1b      	ldrb	r3, [r3, #24]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	3302      	adds	r3, #2
 8007b38:	2201      	movs	r2, #1
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007b42:	fb02 f203 	mul.w	r2, r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	7a1b      	ldrb	r3, [r3, #8]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	2201      	movs	r2, #1
 8007b56:	409a      	lsls	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b64:	0a52      	lsrs	r2, r2, #9
 8007b66:	fb02 f203 	mul.w	r2, r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b74:	661a      	str	r2, [r3, #96]	; 0x60
 8007b76:	e031      	b.n	8007bdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d11d      	bne.n	8007bbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8e:	0c1b      	lsrs	r3, r3, #16
 8007b90:	431a      	orrs	r2, r3
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	029a      	lsls	r2, r3, #10
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	661a      	str	r2, [r3, #96]	; 0x60
 8007bba:	e00f      	b.n	8007bdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a58      	ldr	r2, [pc, #352]	; (8007d24 <HAL_SD_GetCardCSD+0x344>)
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e09d      	b.n	8007d18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be0:	0b9b      	lsrs	r3, r3, #14
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf2:	09db      	lsrs	r3, r3, #7
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	0fdb      	lsrs	r3, r3, #31
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c20:	0f5b      	lsrs	r3, r3, #29
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0303 	and.w	r3, r3, #3
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	0e9b      	lsrs	r3, r3, #26
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	0d9b      	lsrs	r3, r3, #22
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c56:	0d5b      	lsrs	r3, r3, #21
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	0c1b      	lsrs	r3, r3, #16
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c86:	0bdb      	lsrs	r3, r3, #15
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	0b9b      	lsrs	r3, r3, #14
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	0b5b      	lsrs	r3, r3, #13
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	0b1b      	lsrs	r3, r3, #12
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	0a9b      	lsrs	r3, r3, #10
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	004005ff 	.word	0x004005ff

08007d28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007d80:	b5b0      	push	{r4, r5, r7, lr}
 8007d82:	b08e      	sub	sp, #56	; 0x38
 8007d84:	af04      	add	r7, sp, #16
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d02e      	beq.n	8007df8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da0:	d106      	bne.n	8007db0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	639a      	str	r2, [r3, #56]	; 0x38
 8007dae:	e029      	b.n	8007e04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db6:	d10a      	bne.n	8007dce <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fb0f 	bl	80083dc <SD_WideBus_Enable>
 8007dbe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38
 8007dcc:	e01a      	b.n	8007e04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fb4c 	bl	8008472 <SD_WideBus_Disable>
 8007dda:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38
 8007de8:	e00c      	b.n	8007e04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38
 8007df6:	e005      	b.n	8007e04 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a18      	ldr	r2, [pc, #96]	; (8007e74 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e024      	b.n	8007e6a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681d      	ldr	r5, [r3, #0]
 8007e46:	466c      	mov	r4, sp
 8007e48:	f107 0318 	add.w	r3, r7, #24
 8007e4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e54:	f107 030c 	add.w	r3, r7, #12
 8007e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f001 fa18 	bl	8009290 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3728      	adds	r7, #40	; 0x28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bdb0      	pop	{r4, r5, r7, pc}
 8007e72:	bf00      	nop
 8007e74:	004005ff 	.word	0x004005ff

08007e78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007e84:	f107 030c 	add.w	r3, r7, #12
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa7e 	bl	800838c <SD_SendStatus>
 8007e90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	0a5b      	lsrs	r3, r3, #9
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007eae:	693b      	ldr	r3, [r7, #16]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ed4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	2b82      	cmp	r3, #130	; 0x82
 8007ef6:	d111      	bne.n	8007f1c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 fb4d 	bl	800959c <SDMMC_CmdStopTransfer>
 8007f02:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	431a      	orrs	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff fd58 	bl	80079cc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0208 	bic.w	r2, r2, #8
 8007f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f001 ffad 	bl	8009ea4 <HAL_SD_RxCpltCallback>
#endif
}
 8007f4a:	bf00      	nop
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fd f986 	bl	8005274 <HAL_DMA_GetError>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d03e      	beq.n	8007fec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f74:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d002      	beq.n	8007f8a <SD_DMAError+0x36>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d12d      	bne.n	8007fe6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <SD_DMAError+0xa0>)
 8007f90:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007fa0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007fae:	6978      	ldr	r0, [r7, #20]
 8007fb0:	f7ff ff62 	bl	8007e78 <HAL_SD_GetCardState>
 8007fb4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b06      	cmp	r3, #6
 8007fba:	d002      	beq.n	8007fc2 <SD_DMAError+0x6e>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b05      	cmp	r3, #5
 8007fc0:	d10a      	bne.n	8007fd8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fae8 	bl	800959c <SDMMC_CmdStopTransfer>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007fe6:	6978      	ldr	r0, [r7, #20]
 8007fe8:	f7ff fcf0 	bl	80079cc <HAL_SD_ErrorCallback>
#endif
  }
}
 8007fec:	bf00      	nop
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	004005ff 	.word	0x004005ff

08007ff8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008004:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f240 523a 	movw	r2, #1338	; 0x53a
 800800e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff ff31 	bl	8007e78 <HAL_SD_GetCardState>
 8008016:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b06      	cmp	r3, #6
 800802a:	d002      	beq.n	8008032 <SD_DMATxAbort+0x3a>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b05      	cmp	r3, #5
 8008030:	d10a      	bne.n	8008048 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f001 fab0 	bl	800959c <SDMMC_CmdStopTransfer>
 800803c:	4602      	mov	r2, r0
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	431a      	orrs	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 ff13 	bl	8009e7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008056:	e002      	b.n	800805e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7ff fcb7 	bl	80079cc <HAL_SD_ErrorCallback>
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f240 523a 	movw	r2, #1338	; 0x53a
 800807c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7ff fefa 	bl	8007e78 <HAL_SD_GetCardState>
 8008084:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b06      	cmp	r3, #6
 8008098:	d002      	beq.n	80080a0 <SD_DMARxAbort+0x3a>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b05      	cmp	r3, #5
 800809e:	d10a      	bne.n	80080b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fa79 	bl	800959c <SDMMC_CmdStopTransfer>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	431a      	orrs	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 fedc 	bl	8009e7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80080c4:	e002      	b.n	80080cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fc80 	bl	80079cc <HAL_SD_ErrorCallback>
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080d4:	b5b0      	push	{r4, r5, r7, lr}
 80080d6:	b094      	sub	sp, #80	; 0x50
 80080d8:	af04      	add	r7, sp, #16
 80080da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80080dc:	2301      	movs	r3, #1
 80080de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 f92b 	bl	8009340 <SDIO_GetPowerState>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80080f4:	e0b7      	b.n	8008266 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d02f      	beq.n	800815e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f001 fb54 	bl	80097b0 <SDMMC_CmdSendCID>
 8008108:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800810a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <SD_InitCard+0x40>
    {
      return errorstate;
 8008110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008112:	e0a8      	b.n	8008266 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f955 	bl	80093ca <SDIO_GetResponse>
 8008120:	4602      	mov	r2, r0
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2104      	movs	r1, #4
 800812c:	4618      	mov	r0, r3
 800812e:	f001 f94c 	bl	80093ca <SDIO_GetResponse>
 8008132:	4602      	mov	r2, r0
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2108      	movs	r1, #8
 800813e:	4618      	mov	r0, r3
 8008140:	f001 f943 	bl	80093ca <SDIO_GetResponse>
 8008144:	4602      	mov	r2, r0
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	210c      	movs	r1, #12
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f93a 	bl	80093ca <SDIO_GetResponse>
 8008156:	4602      	mov	r2, r0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008162:	2b03      	cmp	r3, #3
 8008164:	d00d      	beq.n	8008182 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f107 020e 	add.w	r2, r7, #14
 800816e:	4611      	mov	r1, r2
 8008170:	4618      	mov	r0, r3
 8008172:	f001 fb5a 	bl	800982a <SDMMC_CmdSetRelAdd>
 8008176:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <SD_InitCard+0xae>
    {
      return errorstate;
 800817e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008180:	e071      	b.n	8008266 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008186:	2b03      	cmp	r3, #3
 8008188:	d036      	beq.n	80081f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800818a:	89fb      	ldrh	r3, [r7, #14]
 800818c:	461a      	mov	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819a:	041b      	lsls	r3, r3, #16
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f001 fb24 	bl	80097ec <SDMMC_CmdSendCSD>
 80081a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80081ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ae:	e05a      	b.n	8008266 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 f907 	bl	80093ca <SDIO_GetResponse>
 80081bc:	4602      	mov	r2, r0
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2104      	movs	r1, #4
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 f8fe 	bl	80093ca <SDIO_GetResponse>
 80081ce:	4602      	mov	r2, r0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2108      	movs	r1, #8
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 f8f5 	bl	80093ca <SDIO_GetResponse>
 80081e0:	4602      	mov	r2, r0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	210c      	movs	r1, #12
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 f8ec 	bl	80093ca <SDIO_GetResponse>
 80081f2:	4602      	mov	r2, r0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2104      	movs	r1, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 f8e3 	bl	80093ca <SDIO_GetResponse>
 8008204:	4603      	mov	r3, r0
 8008206:	0d1a      	lsrs	r2, r3, #20
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800820c:	f107 0310 	add.w	r3, r7, #16
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fbe4 	bl	80079e0 <HAL_SD_GetCardCSD>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800821e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008222:	e020      	b.n	8008266 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6819      	ldr	r1, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822c:	041b      	lsls	r3, r3, #16
 800822e:	f04f 0400 	mov.w	r4, #0
 8008232:	461a      	mov	r2, r3
 8008234:	4623      	mov	r3, r4
 8008236:	4608      	mov	r0, r1
 8008238:	f001 f9d2 	bl	80095e0 <SDMMC_CmdSelDesel>
 800823c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800823e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <SD_InitCard+0x174>
  {
    return errorstate;
 8008244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008246:	e00e      	b.n	8008266 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681d      	ldr	r5, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	466c      	mov	r4, sp
 8008250:	f103 0210 	add.w	r2, r3, #16
 8008254:	ca07      	ldmia	r2, {r0, r1, r2}
 8008256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800825a:	3304      	adds	r3, #4
 800825c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800825e:	4628      	mov	r0, r5
 8008260:	f001 f816 	bl	8009290 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3740      	adds	r7, #64	; 0x40
 800826a:	46bd      	mov	sp, r7
 800826c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008270 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	2300      	movs	r3, #0
 8008282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4618      	mov	r0, r3
 800828a:	f001 f9cc 	bl	8009626 <SDMMC_CmdGoIdleState>
 800828e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	e072      	b.n	8008380 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 f9df 	bl	8009662 <SDMMC_CmdOperCond>
 80082a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00d      	beq.n	80082c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 f9b5 	bl	8009626 <SDMMC_CmdGoIdleState>
 80082bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	e05b      	b.n	8008380 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d137      	bne.n	8008346 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2100      	movs	r1, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 f9df 	bl	80096a0 <SDMMC_CmdAppCommand>
 80082e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d02d      	beq.n	8008346 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082ee:	e047      	b.n	8008380 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 f9d2 	bl	80096a0 <SDMMC_CmdAppCommand>
 80082fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <SD_PowerON+0x98>
    {
      return errorstate;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	e03b      	b.n	8008380 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	491e      	ldr	r1, [pc, #120]	; (8008388 <SD_PowerON+0x118>)
 800830e:	4618      	mov	r0, r3
 8008310:	f001 f9e8 	bl	80096e4 <SDMMC_CmdAppOperCommand>
 8008314:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800831c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008320:	e02e      	b.n	8008380 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2100      	movs	r1, #0
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f84e 	bl	80093ca <SDIO_GetResponse>
 800832e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	0fdb      	lsrs	r3, r3, #31
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <SD_PowerON+0xcc>
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <SD_PowerON+0xce>
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]

    count++;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	3301      	adds	r3, #1
 8008344:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800834c:	4293      	cmp	r3, r2
 800834e:	d802      	bhi.n	8008356 <SD_PowerON+0xe6>
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0cc      	beq.n	80082f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800835c:	4293      	cmp	r3, r2
 800835e:	d902      	bls.n	8008366 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008364:	e00c      	b.n	8008380 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	645a      	str	r2, [r3, #68]	; 0x44
 8008376:	e002      	b.n	800837e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	c1100000 	.word	0xc1100000

0800838c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800839c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083a0:	e018      	b.n	80083d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083aa:	041b      	lsls	r3, r3, #16
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f001 fa5c 	bl	800986c <SDMMC_CmdSendStatus>
 80083b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	e009      	b.n	80083d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 ffff 	bl	80093ca <SDIO_GetResponse>
 80083cc:	4602      	mov	r2, r0
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	2300      	movs	r3, #0
 80083ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2100      	movs	r1, #0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 ffe9 	bl	80093ca <SDIO_GetResponse>
 80083f8:	4603      	mov	r3, r0
 80083fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008402:	d102      	bne.n	800840a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008408:	e02f      	b.n	800846a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800840a:	f107 030c 	add.w	r3, r7, #12
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f879 	bl	8008508 <SD_FindSCR>
 8008416:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	e023      	b.n	800846a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01c      	beq.n	8008466 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008434:	041b      	lsls	r3, r3, #16
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f001 f931 	bl	80096a0 <SDMMC_CmdAppCommand>
 800843e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	e00f      	b.n	800846a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2102      	movs	r1, #2
 8008450:	4618      	mov	r0, r3
 8008452:	f001 f96a 	bl	800972a <SDMMC_CmdBusWidth>
 8008456:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	e003      	b.n	800846a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008462:	2300      	movs	r3, #0
 8008464:	e001      	b.n	800846a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b086      	sub	sp, #24
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	2300      	movs	r3, #0
 8008480:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f000 ff9e 	bl	80093ca <SDIO_GetResponse>
 800848e:	4603      	mov	r3, r0
 8008490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008498:	d102      	bne.n	80084a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800849a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800849e:	e02f      	b.n	8008500 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084a0:	f107 030c 	add.w	r3, r7, #12
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f82e 	bl	8008508 <SD_FindSCR>
 80084ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	e023      	b.n	8008500 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01c      	beq.n	80084fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	4619      	mov	r1, r3
 80084ce:	4610      	mov	r0, r2
 80084d0:	f001 f8e6 	bl	80096a0 <SDMMC_CmdAppCommand>
 80084d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	e00f      	b.n	8008500 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 f91f 	bl	800972a <SDMMC_CmdBusWidth>
 80084ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	e003      	b.n	8008500 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e001      	b.n	8008500 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b08f      	sub	sp, #60	; 0x3c
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008512:	f7fb fe0f 	bl	8004134 <HAL_GetTick>
 8008516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2108      	movs	r1, #8
 800852e:	4618      	mov	r0, r3
 8008530:	f000 ff8a 	bl	8009448 <SDMMC_CmdBlockLength>
 8008534:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <SD_FindSCR+0x38>
  {
    return errorstate;
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	e0a9      	b.n	8008694 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008548:	041b      	lsls	r3, r3, #16
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f001 f8a7 	bl	80096a0 <SDMMC_CmdAppCommand>
 8008552:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <SD_FindSCR+0x56>
  {
    return errorstate;
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	e09a      	b.n	8008694 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800855e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008562:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008564:	2308      	movs	r3, #8
 8008566:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008568:	2330      	movs	r3, #48	; 0x30
 800856a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800856c:	2302      	movs	r3, #2
 800856e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008570:	2300      	movs	r3, #0
 8008572:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008574:	2301      	movs	r3, #1
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f107 0210 	add.w	r2, r7, #16
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f000 ff34 	bl	80093f0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f001 f8ee 	bl	800976e <SDMMC_CmdSendSCR>
 8008592:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	2b00      	cmp	r3, #0
 8008598:	d022      	beq.n	80085e0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	e07a      	b.n	8008694 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00e      	beq.n	80085ca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6819      	ldr	r1, [r3, #0]
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	f107 0208 	add.w	r2, r7, #8
 80085b8:	18d4      	adds	r4, r2, r3
 80085ba:	4608      	mov	r0, r1
 80085bc:	f000 fe93 	bl	80092e6 <SDIO_ReadFIFO>
 80085c0:	4603      	mov	r3, r0
 80085c2:	6023      	str	r3, [r4, #0]
      index++;
 80085c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c6:	3301      	adds	r3, #1
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085ca:	f7fb fdb3 	bl	8004134 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085d8:	d102      	bne.n	80085e0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80085da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085de:	e059      	b.n	8008694 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e6:	f240 432a 	movw	r3, #1066	; 0x42a
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0d6      	beq.n	800859e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2208      	movs	r2, #8
 8008604:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008606:	2308      	movs	r3, #8
 8008608:	e044      	b.n	8008694 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2202      	movs	r2, #2
 800861e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008620:	2302      	movs	r3, #2
 8008622:	e037      	b.n	8008694 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2220      	movs	r2, #32
 8008638:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800863a:	2320      	movs	r3, #32
 800863c:	e02a      	b.n	8008694 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f240 523a 	movw	r2, #1338	; 0x53a
 8008646:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	061a      	lsls	r2, r3, #24
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008654:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	0a1b      	lsrs	r3, r3, #8
 800865a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800865e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	0e1b      	lsrs	r3, r3, #24
 8008664:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	601a      	str	r2, [r3, #0]
    scr++;
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	3304      	adds	r3, #4
 800866e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	061a      	lsls	r2, r3, #24
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800867c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	0a1b      	lsrs	r3, r3, #8
 8008682:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008686:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	0e1b      	lsrs	r3, r3, #24
 800868c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	373c      	adds	r7, #60	; 0x3c
 8008698:	46bd      	mov	sp, r7
 800869a:	bd90      	pop	{r4, r7, pc}

0800869c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d03f      	beq.n	8008736 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80086b6:	2300      	movs	r3, #0
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	e033      	b.n	8008724 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fe10 	bl	80092e6 <SDIO_ReadFIFO>
 80086c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	3b01      	subs	r3, #1
 80086da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3301      	adds	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	3b01      	subs	r3, #1
 8008706:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	0e1b      	lsrs	r3, r3, #24
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	3b01      	subs	r3, #1
 800871c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	3301      	adds	r3, #1
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b07      	cmp	r3, #7
 8008728:	d9c8      	bls.n	80086bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008736:	bf00      	nop
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d043      	beq.n	80087e0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]
 800875c:	e037      	b.n	80087ce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3b01      	subs	r3, #1
 800876e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	021a      	lsls	r2, r3, #8
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4313      	orrs	r3, r2
 800877a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3b01      	subs	r3, #1
 8008786:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	041a      	lsls	r2, r3, #16
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	4313      	orrs	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3301      	adds	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	3b01      	subs	r3, #1
 800879e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	061a      	lsls	r2, r3, #24
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3301      	adds	r3, #1
 80087b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f107 0208 	add.w	r2, r7, #8
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fd9c 	bl	8009300 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	3301      	adds	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	d9c4      	bls.n	800875e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80087e0:	bf00      	nop
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e056      	b.n	80088a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7fa f823 	bl	8002860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2202      	movs	r2, #2
 800881e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008830:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	431a      	orrs	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	ea42 0103 	orr.w	r1, r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	0c1b      	lsrs	r3, r3, #16
 8008878:	f003 0104 	and.w	r1, r3, #4
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69da      	ldr	r2, [r3, #28]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008896:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	4613      	mov	r3, r2
 80088be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <HAL_SPI_Transmit+0x22>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e11e      	b.n	8008b10 <HAL_SPI_Transmit+0x260>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088da:	f7fb fc2b 	bl	8004134 <HAL_GetTick>
 80088de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d002      	beq.n	80088f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088f0:	2302      	movs	r3, #2
 80088f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088f4:	e103      	b.n	8008afe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_SPI_Transmit+0x52>
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008906:	e0fa      	b.n	8008afe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2203      	movs	r2, #3
 800890c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894e:	d107      	bne.n	8008960 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800895e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d007      	beq.n	800897e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800897c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008986:	d14b      	bne.n	8008a20 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <HAL_SPI_Transmit+0xe6>
 8008990:	8afb      	ldrh	r3, [r7, #22]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d13e      	bne.n	8008a14 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	881a      	ldrh	r2, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089ba:	e02b      	b.n	8008a14 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d112      	bne.n	80089f0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	881a      	ldrh	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	1c9a      	adds	r2, r3, #2
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80089ee:	e011      	b.n	8008a14 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f0:	f7fb fba0 	bl	8004134 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d803      	bhi.n	8008a08 <HAL_SPI_Transmit+0x158>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a06:	d102      	bne.n	8008a0e <HAL_SPI_Transmit+0x15e>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a12:	e074      	b.n	8008afe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1ce      	bne.n	80089bc <HAL_SPI_Transmit+0x10c>
 8008a1e:	e04c      	b.n	8008aba <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <HAL_SPI_Transmit+0x17e>
 8008a28:	8afb      	ldrh	r3, [r7, #22]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d140      	bne.n	8008ab0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a54:	e02c      	b.n	8008ab0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d113      	bne.n	8008a8c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	330c      	adds	r3, #12
 8008a6e:	7812      	ldrb	r2, [r2, #0]
 8008a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a8a:	e011      	b.n	8008ab0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a8c:	f7fb fb52 	bl	8004134 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d803      	bhi.n	8008aa4 <HAL_SPI_Transmit+0x1f4>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa2:	d102      	bne.n	8008aaa <HAL_SPI_Transmit+0x1fa>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d102      	bne.n	8008ab0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008aae:	e026      	b.n	8008afe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1cd      	bne.n	8008a56 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fba4 	bl	800920c <SPI_EndRxTxTransaction>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2220      	movs	r2, #32
 8008ace:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	613b      	str	r3, [r7, #16]
 8008aec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	77fb      	strb	r3, [r7, #31]
 8008afa:	e000      	b.n	8008afe <HAL_SPI_Transmit+0x24e>
  }

error:
 8008afc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3720      	adds	r7, #32
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	4613      	mov	r3, r2
 8008b26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b34:	d112      	bne.n	8008b5c <HAL_SPI_Receive+0x44>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10e      	bne.n	8008b5c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2204      	movs	r2, #4
 8008b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b46:	88fa      	ldrh	r2, [r7, #6]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f8e9 	bl	8008d2a <HAL_SPI_TransmitReceive>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	e0e2      	b.n	8008d22 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_SPI_Receive+0x52>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e0db      	b.n	8008d22 <HAL_SPI_Receive+0x20a>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b72:	f7fb fadf 	bl	8004134 <HAL_GetTick>
 8008b76:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d002      	beq.n	8008b8a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b84:	2302      	movs	r3, #2
 8008b86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b88:	e0c2      	b.n	8008d10 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <HAL_SPI_Receive+0x7e>
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b9a:	e0b9      	b.n	8008d10 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be2:	d107      	bne.n	8008bf4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	d007      	beq.n	8008c12 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d162      	bne.n	8008ce0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c1a:	e02e      	b.n	8008c7a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d115      	bne.n	8008c56 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f103 020c 	add.w	r2, r3, #12
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c54:	e011      	b.n	8008c7a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c56:	f7fb fa6d 	bl	8004134 <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d803      	bhi.n	8008c6e <HAL_SPI_Receive+0x156>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c6c:	d102      	bne.n	8008c74 <HAL_SPI_Receive+0x15c>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c78:	e04a      	b.n	8008d10 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1cb      	bne.n	8008c1c <HAL_SPI_Receive+0x104>
 8008c84:	e031      	b.n	8008cea <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d113      	bne.n	8008cbc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68da      	ldr	r2, [r3, #12]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	b292      	uxth	r2, r2
 8008ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	1c9a      	adds	r2, r3, #2
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cba:	e011      	b.n	8008ce0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cbc:	f7fb fa3a 	bl	8004134 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d803      	bhi.n	8008cd4 <HAL_SPI_Receive+0x1bc>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cd2:	d102      	bne.n	8008cda <HAL_SPI_Receive+0x1c2>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008cde:	e017      	b.n	8008d10 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1cd      	bne.n	8008c86 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fa27 	bl	8009142 <SPI_EndRxTransaction>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	75fb      	strb	r3, [r7, #23]
 8008d0c:	e000      	b.n	8008d10 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b08c      	sub	sp, #48	; 0x30
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
 8008d36:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x26>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	e18a      	b.n	8009066 <HAL_SPI_TransmitReceive+0x33c>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d58:	f7fb f9ec 	bl	8004134 <HAL_GetTick>
 8008d5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d6e:	887b      	ldrh	r3, [r7, #2]
 8008d70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d00f      	beq.n	8008d9a <HAL_SPI_TransmitReceive+0x70>
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d80:	d107      	bne.n	8008d92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <HAL_SPI_TransmitReceive+0x68>
 8008d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d003      	beq.n	8008d9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
 8008d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d98:	e15b      	b.n	8009052 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <HAL_SPI_TransmitReceive+0x82>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_SPI_TransmitReceive+0x82>
 8008da6:	887b      	ldrh	r3, [r7, #2]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008db2:	e14e      	b.n	8009052 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d003      	beq.n	8008dc8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2205      	movs	r2, #5
 8008dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	887a      	ldrh	r2, [r7, #2]
 8008dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	887a      	ldrh	r2, [r7, #2]
 8008dde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	887a      	ldrh	r2, [r7, #2]
 8008dea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	887a      	ldrh	r2, [r7, #2]
 8008df0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d007      	beq.n	8008e1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e24:	d178      	bne.n	8008f18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <HAL_SPI_TransmitReceive+0x10a>
 8008e2e:	8b7b      	ldrh	r3, [r7, #26]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d166      	bne.n	8008f02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e38:	881a      	ldrh	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	1c9a      	adds	r2, r3, #2
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e58:	e053      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d11b      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x176>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d016      	beq.n	8008ea0 <HAL_SPI_TransmitReceive+0x176>
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d113      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7c:	881a      	ldrh	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	1c9a      	adds	r2, r3, #2
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d119      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x1b8>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d014      	beq.n	8008ee2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	b292      	uxth	r2, r2
 8008ec4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ee2:	f7fb f927 	bl	8004134 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d807      	bhi.n	8008f02 <HAL_SPI_TransmitReceive+0x1d8>
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef8:	d003      	beq.n	8008f02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f00:	e0a7      	b.n	8009052 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1a6      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x130>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1a1      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x130>
 8008f16:	e07c      	b.n	8009012 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <HAL_SPI_TransmitReceive+0x1fc>
 8008f20:	8b7b      	ldrh	r3, [r7, #26]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d16b      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	330c      	adds	r3, #12
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	3b01      	subs	r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f4c:	e057      	b.n	8008ffe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d11c      	bne.n	8008f96 <HAL_SPI_TransmitReceive+0x26c>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d017      	beq.n	8008f96 <HAL_SPI_TransmitReceive+0x26c>
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d114      	bne.n	8008f96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	330c      	adds	r3, #12
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d119      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x2ae>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d014      	beq.n	8008fd8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	b2d2      	uxtb	r2, r2
 8008fba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fd8:	f7fb f8ac 	bl	8004134 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d803      	bhi.n	8008ff0 <HAL_SPI_TransmitReceive+0x2c6>
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fee:	d102      	bne.n	8008ff6 <HAL_SPI_TransmitReceive+0x2cc>
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d103      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ffc:	e029      	b.n	8009052 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1a2      	bne.n	8008f4e <HAL_SPI_TransmitReceive+0x224>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900c:	b29b      	uxth	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d19d      	bne.n	8008f4e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 f8f8 	bl	800920c <SPI_EndRxTxTransaction>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d006      	beq.n	8009030 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800902e:	e010      	b.n	8009052 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10b      	bne.n	8009050 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	e000      	b.n	8009052 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009066:	4618      	mov	r0, r3
 8009068:	3730      	adds	r7, #48	; 0x30
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	4613      	mov	r3, r2
 800907c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800907e:	e04c      	b.n	800911a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009086:	d048      	beq.n	800911a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009088:	f7fb f854 	bl	8004134 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d902      	bls.n	800909e <SPI_WaitFlagStateUntilTimeout+0x30>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d13d      	bne.n	800911a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090b6:	d111      	bne.n	80090dc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c0:	d004      	beq.n	80090cc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ca:	d107      	bne.n	80090dc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e4:	d10f      	bne.n	8009106 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e00f      	b.n	800913a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	4013      	ands	r3, r2
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	429a      	cmp	r2, r3
 8009128:	bf0c      	ite	eq
 800912a:	2301      	moveq	r3, #1
 800912c:	2300      	movne	r3, #0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	429a      	cmp	r2, r3
 8009136:	d1a3      	bne.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b086      	sub	sp, #24
 8009146:	af02      	add	r7, sp, #8
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009156:	d111      	bne.n	800917c <SPI_EndRxTransaction+0x3a>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009160:	d004      	beq.n	800916c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916a:	d107      	bne.n	800917c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800917a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009184:	d12a      	bne.n	80091dc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800918e:	d012      	beq.n	80091b6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2200      	movs	r2, #0
 8009198:	2180      	movs	r1, #128	; 0x80
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7ff ff67 	bl	800906e <SPI_WaitFlagStateUntilTimeout>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d02d      	beq.n	8009202 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091aa:	f043 0220 	orr.w	r2, r3, #32
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e026      	b.n	8009204 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	2101      	movs	r1, #1
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff ff54 	bl	800906e <SPI_WaitFlagStateUntilTimeout>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01a      	beq.n	8009202 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d0:	f043 0220 	orr.w	r2, r3, #32
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e013      	b.n	8009204 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	2101      	movs	r1, #1
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff ff41 	bl	800906e <SPI_WaitFlagStateUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	f043 0220 	orr.w	r2, r3, #32
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e000      	b.n	8009204 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af02      	add	r7, sp, #8
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009218:	4b1b      	ldr	r3, [pc, #108]	; (8009288 <SPI_EndRxTxTransaction+0x7c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1b      	ldr	r2, [pc, #108]	; (800928c <SPI_EndRxTxTransaction+0x80>)
 800921e:	fba2 2303 	umull	r2, r3, r2, r3
 8009222:	0d5b      	lsrs	r3, r3, #21
 8009224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009228:	fb02 f303 	mul.w	r3, r2, r3
 800922c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009236:	d112      	bne.n	800925e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	2180      	movs	r1, #128	; 0x80
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff ff13 	bl	800906e <SPI_WaitFlagStateUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d016      	beq.n	800927c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009252:	f043 0220 	orr.w	r2, r3, #32
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e00f      	b.n	800927e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00a      	beq.n	800927a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	3b01      	subs	r3, #1
 8009268:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d0f2      	beq.n	800925e <SPI_EndRxTxTransaction+0x52>
 8009278:	e000      	b.n	800927c <SPI_EndRxTxTransaction+0x70>
        break;
 800927a:	bf00      	nop
  }

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000110 	.word	0x20000110
 800928c:	165e9f81 	.word	0x165e9f81

08009290 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009290:	b084      	sub	sp, #16
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	f107 001c 	add.w	r0, r7, #28
 800929e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80092a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80092a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80092aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80092ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80092b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80092b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80092ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80092ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	b004      	add	sp, #16
 80092e4:	4770      	bx	lr

080092e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2203      	movs	r2, #3
 800932e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009330:	2002      	movs	r0, #2
 8009332:	f7fa ff0b 	bl	800414c <HAL_Delay>
  
  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0303 	and.w	r3, r3, #3
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800937a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009380:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009386:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009396:	f023 030f 	bic.w	r3, r3, #15
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	b2db      	uxtb	r3, r3
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3314      	adds	r3, #20
 80093d8:	461a      	mov	r2, r3
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	4413      	add	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
}  
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009416:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800941c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009422:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	431a      	orrs	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800943a:	2300      	movs	r3, #0

}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009456:	2310      	movs	r3, #16
 8009458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800945a:	2340      	movs	r3, #64	; 0x40
 800945c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009468:	f107 0308 	add.w	r3, r7, #8
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff ff74 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009474:	f241 3288 	movw	r2, #5000	; 0x1388
 8009478:	2110      	movs	r1, #16
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fa40 	bl	8009900 <SDMMC_GetCmdResp1>
 8009480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009482:	69fb      	ldr	r3, [r7, #28]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800949a:	2311      	movs	r3, #17
 800949c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800949e:	2340      	movs	r3, #64	; 0x40
 80094a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094ac:	f107 0308 	add.w	r3, r7, #8
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7ff ff52 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	2111      	movs	r1, #17
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa1e 	bl	8009900 <SDMMC_GetCmdResp1>
 80094c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094c6:	69fb      	ldr	r3, [r7, #28]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3720      	adds	r7, #32
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80094de:	2312      	movs	r3, #18
 80094e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094f0:	f107 0308 	add.w	r3, r7, #8
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff ff30 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80094fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009500:	2112      	movs	r1, #18
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9fc 	bl	8009900 <SDMMC_GetCmdResp1>
 8009508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800950a:	69fb      	ldr	r3, [r7, #28]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009522:	2318      	movs	r3, #24
 8009524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009526:	2340      	movs	r3, #64	; 0x40
 8009528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800952e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009534:	f107 0308 	add.w	r3, r7, #8
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff ff0e 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009540:	f241 3288 	movw	r2, #5000	; 0x1388
 8009544:	2118      	movs	r1, #24
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f9da 	bl	8009900 <SDMMC_GetCmdResp1>
 800954c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800954e:	69fb      	ldr	r3, [r7, #28]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3720      	adds	r7, #32
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009566:	2319      	movs	r3, #25
 8009568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009576:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009578:	f107 0308 	add.w	r3, r7, #8
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff feec 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009584:	f241 3288 	movw	r2, #5000	; 0x1388
 8009588:	2119      	movs	r1, #25
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f9b8 	bl	8009900 <SDMMC_GetCmdResp1>
 8009590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009592:	69fb      	ldr	r3, [r7, #28]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3720      	adds	r7, #32
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80095a8:	230c      	movs	r3, #12
 80095aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095ba:	f107 0308 	add.w	r3, r7, #8
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fecb 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80095c6:	4a05      	ldr	r2, [pc, #20]	; (80095dc <SDMMC_CmdStopTransfer+0x40>)
 80095c8:	210c      	movs	r1, #12
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f998 	bl	8009900 <SDMMC_GetCmdResp1>
 80095d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d2:	69fb      	ldr	r3, [r7, #28]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3720      	adds	r7, #32
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	05f5e100 	.word	0x05f5e100

080095e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08a      	sub	sp, #40	; 0x28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80095f0:	2307      	movs	r3, #7
 80095f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009600:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009602:	f107 0310 	add.w	r3, r7, #16
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fea7 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800960e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009612:	2107      	movs	r1, #7
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 f973 	bl	8009900 <SDMMC_GetCmdResp1>
 800961a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800961e:	4618      	mov	r0, r3
 8009620:	3728      	adds	r7, #40	; 0x28
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b088      	sub	sp, #32
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009636:	2300      	movs	r3, #0
 8009638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800963e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009642:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009644:	f107 0308 	add.w	r3, r7, #8
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff fe86 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f92d 	bl	80098b0 <SDMMC_GetCmdError>
 8009656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009658:	69fb      	ldr	r3, [r7, #28]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3720      	adds	r7, #32
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b088      	sub	sp, #32
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800966a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800966e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009670:	2308      	movs	r3, #8
 8009672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009674:	2340      	movs	r3, #64	; 0x40
 8009676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800967c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009680:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009682:	f107 0308 	add.w	r3, r7, #8
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff fe67 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fb16 	bl	8009cc0 <SDMMC_GetCmdResp7>
 8009694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009696:	69fb      	ldr	r3, [r7, #28]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3720      	adds	r7, #32
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80096ae:	2337      	movs	r3, #55	; 0x37
 80096b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096b6:	2300      	movs	r3, #0
 80096b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096c0:	f107 0308 	add.w	r3, r7, #8
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff fe48 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80096cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d0:	2137      	movs	r1, #55	; 0x37
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f914 	bl	8009900 <SDMMC_GetCmdResp1>
 80096d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096da:	69fb      	ldr	r3, [r7, #28]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80096fa:	2329      	movs	r3, #41	; 0x29
 80096fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096fe:	2340      	movs	r3, #64	; 0x40
 8009700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009702:	2300      	movs	r3, #0
 8009704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800970a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800970c:	f107 0308 	add.w	r3, r7, #8
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff fe22 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fa23 	bl	8009b64 <SDMMC_GetCmdResp3>
 800971e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009720:	69fb      	ldr	r3, [r7, #28]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b088      	sub	sp, #32
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009738:	2306      	movs	r3, #6
 800973a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009748:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800974a:	f107 0308 	add.w	r3, r7, #8
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fe03 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009756:	f241 3288 	movw	r2, #5000	; 0x1388
 800975a:	2106      	movs	r1, #6
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f8cf 	bl	8009900 <SDMMC_GetCmdResp1>
 8009762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009764:	69fb      	ldr	r3, [r7, #28]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3720      	adds	r7, #32
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b088      	sub	sp, #32
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800977a:	2333      	movs	r3, #51	; 0x33
 800977c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800977e:	2340      	movs	r3, #64	; 0x40
 8009780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff fde2 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009798:	f241 3288 	movw	r2, #5000	; 0x1388
 800979c:	2133      	movs	r1, #51	; 0x33
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f8ae 	bl	8009900 <SDMMC_GetCmdResp1>
 80097a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a6:	69fb      	ldr	r3, [r7, #28]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80097bc:	2302      	movs	r3, #2
 80097be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80097c0:	23c0      	movs	r3, #192	; 0xc0
 80097c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097c4:	2300      	movs	r3, #0
 80097c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ce:	f107 0308 	add.w	r3, r7, #8
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff fdc1 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f97c 	bl	8009ad8 <SDMMC_GetCmdResp2>
 80097e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097e2:	69fb      	ldr	r3, [r7, #28]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80097fa:	2309      	movs	r3, #9
 80097fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80097fe:	23c0      	movs	r3, #192	; 0xc0
 8009800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009802:	2300      	movs	r3, #0
 8009804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff fda2 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f95d 	bl	8009ad8 <SDMMC_GetCmdResp2>
 800981e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009820:	69fb      	ldr	r3, [r7, #28]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b088      	sub	sp, #32
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009838:	2303      	movs	r3, #3
 800983a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800983c:	2340      	movs	r3, #64	; 0x40
 800983e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009840:	2300      	movs	r3, #0
 8009842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009848:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800984a:	f107 0308 	add.w	r3, r7, #8
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff fd83 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	2103      	movs	r1, #3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f9bc 	bl	8009bd8 <SDMMC_GetCmdResp6>
 8009860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009862:	69fb      	ldr	r3, [r7, #28]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800987a:	230d      	movs	r3, #13
 800987c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800987e:	2340      	movs	r3, #64	; 0x40
 8009880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800988a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800988c:	f107 0308 	add.w	r3, r7, #8
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fd62 	bl	800935c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009898:	f241 3288 	movw	r2, #5000	; 0x1388
 800989c:	210d      	movs	r1, #13
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f82e 	bl	8009900 <SDMMC_GetCmdResp1>
 80098a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098a6:	69fb      	ldr	r3, [r7, #28]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80098b0:	b490      	push	{r4, r7}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098b8:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <SDMMC_GetCmdError+0x48>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a0f      	ldr	r2, [pc, #60]	; (80098fc <SDMMC_GetCmdError+0x4c>)
 80098be:	fba2 2303 	umull	r2, r3, r2, r3
 80098c2:	0a5b      	lsrs	r3, r3, #9
 80098c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80098cc:	4623      	mov	r3, r4
 80098ce:	1e5c      	subs	r4, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098d8:	e009      	b.n	80098ee <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0f2      	beq.n	80098cc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	22c5      	movs	r2, #197	; 0xc5
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bc90      	pop	{r4, r7}
 80098f6:	4770      	bx	lr
 80098f8:	20000110 	.word	0x20000110
 80098fc:	10624dd3 	.word	0x10624dd3

08009900 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	460b      	mov	r3, r1
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800990e:	4b6f      	ldr	r3, [pc, #444]	; (8009acc <SDMMC_GetCmdResp1+0x1cc>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a6f      	ldr	r2, [pc, #444]	; (8009ad0 <SDMMC_GetCmdResp1+0x1d0>)
 8009914:	fba2 2303 	umull	r2, r3, r2, r3
 8009918:	0a5b      	lsrs	r3, r3, #9
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009920:	4623      	mov	r3, r4
 8009922:	1e5c      	subs	r4, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d102      	bne.n	800992e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009928:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800992c:	e0c9      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009932:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0f0      	beq.n	8009920 <SDMMC_GetCmdResp1+0x20>
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1eb      	bne.n	8009920 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2204      	movs	r2, #4
 8009958:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800995a:	2304      	movs	r3, #4
 800995c:	e0b1      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009970:	2301      	movs	r3, #1
 8009972:	e0a6      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	22c5      	movs	r2, #197	; 0xc5
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fd18 	bl	80093b0 <SDIO_GetCommandResponse>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	7afb      	ldrb	r3, [r7, #11]
 8009986:	4293      	cmp	r3, r2
 8009988:	d001      	beq.n	800998e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800998a:	2301      	movs	r3, #1
 800998c:	e099      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800998e:	2100      	movs	r1, #0
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f7ff fd1a 	bl	80093ca <SDIO_GetResponse>
 8009996:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4b4e      	ldr	r3, [pc, #312]	; (8009ad4 <SDMMC_GetCmdResp1+0x1d4>)
 800999c:	4013      	ands	r3, r2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e08d      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	da02      	bge.n	80099b2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80099ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099b0:	e087      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	e080      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80099ca:	2380      	movs	r3, #128	; 0x80
 80099cc:	e079      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80099d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099dc:	e071      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80099e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ec:	e069      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80099f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099fc:	e061      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a0c:	e059      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a1c:	e051      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a2c:	e049      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009a38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a3c:	e041      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a4c:	e039      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a5c:	e031      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009a68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a6c:	e029      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a7c:	e021      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a8c:	e019      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009a9c:	e011      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009aa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009aac:	e009      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009ab8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009abc:	e001      	b.n	8009ac2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	371c      	adds	r7, #28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd90      	pop	{r4, r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20000110 	.word	0x20000110
 8009ad0:	10624dd3 	.word	0x10624dd3
 8009ad4:	fdffe008 	.word	0xfdffe008

08009ad8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009ad8:	b490      	push	{r4, r7}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ae0:	4b1e      	ldr	r3, [pc, #120]	; (8009b5c <SDMMC_GetCmdResp2+0x84>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <SDMMC_GetCmdResp2+0x88>)
 8009ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aea:	0a5b      	lsrs	r3, r3, #9
 8009aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009af4:	4623      	mov	r3, r4
 8009af6:	1e5c      	subs	r4, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009afc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b00:	e026      	b.n	8009b50 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b06:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f0      	beq.n	8009af4 <SDMMC_GetCmdResp2+0x1c>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1eb      	bne.n	8009af4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b2e:	2304      	movs	r3, #4
 8009b30:	e00e      	b.n	8009b50 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e003      	b.n	8009b50 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	22c5      	movs	r2, #197	; 0xc5
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bc90      	pop	{r4, r7}
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	20000110 	.word	0x20000110
 8009b60:	10624dd3 	.word	0x10624dd3

08009b64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009b64:	b490      	push	{r4, r7}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b6c:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <SDMMC_GetCmdResp3+0x6c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <SDMMC_GetCmdResp3+0x70>)
 8009b72:	fba2 2303 	umull	r2, r3, r2, r3
 8009b76:	0a5b      	lsrs	r3, r3, #9
 8009b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b80:	4623      	mov	r3, r4
 8009b82:	1e5c      	subs	r4, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b8c:	e01b      	b.n	8009bc6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b92:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <SDMMC_GetCmdResp3+0x1c>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1eb      	bne.n	8009b80 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bba:	2304      	movs	r3, #4
 8009bbc:	e003      	b.n	8009bc6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	22c5      	movs	r2, #197	; 0xc5
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bc90      	pop	{r4, r7}
 8009bce:	4770      	bx	lr
 8009bd0:	20000110 	.word	0x20000110
 8009bd4:	10624dd3 	.word	0x10624dd3

08009bd8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	460b      	mov	r3, r1
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009be6:	4b34      	ldr	r3, [pc, #208]	; (8009cb8 <SDMMC_GetCmdResp6+0xe0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a34      	ldr	r2, [pc, #208]	; (8009cbc <SDMMC_GetCmdResp6+0xe4>)
 8009bec:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf0:	0a5b      	lsrs	r3, r3, #9
 8009bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009bfa:	4623      	mov	r3, r4
 8009bfc:	1e5c      	subs	r4, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c06:	e052      	b.n	8009cae <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0f0      	beq.n	8009bfa <SDMMC_GetCmdResp6+0x22>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1eb      	bne.n	8009bfa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	f003 0304 	and.w	r3, r3, #4
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d004      	beq.n	8009c38 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2204      	movs	r2, #4
 8009c32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c34:	2304      	movs	r3, #4
 8009c36:	e03a      	b.n	8009cae <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e02f      	b.n	8009cae <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fbae 	bl	80093b0 <SDIO_GetCommandResponse>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461a      	mov	r2, r3
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d001      	beq.n	8009c62 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e025      	b.n	8009cae <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	22c5      	movs	r2, #197	; 0xc5
 8009c66:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009c68:	2100      	movs	r1, #0
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff fbad 	bl	80093ca <SDIO_GetResponse>
 8009c70:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d106      	bne.n	8009c8a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	0c1b      	lsrs	r3, r3, #16
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e011      	b.n	8009cae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c98:	e009      	b.n	8009cae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ca8:	e001      	b.n	8009cae <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd90      	pop	{r4, r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000110 	.word	0x20000110
 8009cbc:	10624dd3 	.word	0x10624dd3

08009cc0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009cc0:	b490      	push	{r4, r7}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009cc8:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <SDMMC_GetCmdResp7+0x90>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a21      	ldr	r2, [pc, #132]	; (8009d54 <SDMMC_GetCmdResp7+0x94>)
 8009cce:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd2:	0a5b      	lsrs	r3, r3, #9
 8009cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009cdc:	4623      	mov	r3, r4
 8009cde:	1e5c      	subs	r4, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ce8:	e02c      	b.n	8009d44 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0f0      	beq.n	8009cdc <SDMMC_GetCmdResp7+0x1c>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1eb      	bne.n	8009cdc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2204      	movs	r2, #4
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d16:	2304      	movs	r3, #4
 8009d18:	e014      	b.n	8009d44 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d004      	beq.n	8009d30 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e009      	b.n	8009d44 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2240      	movs	r2, #64	; 0x40
 8009d40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009d42:	2300      	movs	r3, #0
  
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bc90      	pop	{r4, r7}
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	20000110 	.word	0x20000110
 8009d54:	10624dd3 	.word	0x10624dd3

08009d58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009d5c:	4904      	ldr	r1, [pc, #16]	; (8009d70 <MX_FATFS_Init+0x18>)
 8009d5e:	4805      	ldr	r0, [pc, #20]	; (8009d74 <MX_FATFS_Init+0x1c>)
 8009d60:	f003 f9cc 	bl	800d0fc <FATFS_LinkDriver>
 8009d64:	4603      	mov	r3, r0
 8009d66:	461a      	mov	r2, r3
 8009d68:	4b03      	ldr	r3, [pc, #12]	; (8009d78 <MX_FATFS_Init+0x20>)
 8009d6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009d6c:	bf00      	nop
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20003c7c 	.word	0x20003c7c
 8009d74:	0801001c 	.word	0x0801001c
 8009d78:	20003c78 	.word	0x20003c78

08009d7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009d80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009d96:	f000 f896 	bl	8009ec6 <BSP_SD_IsDetected>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d001      	beq.n	8009da4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e012      	b.n	8009dca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009da4:	480b      	ldr	r0, [pc, #44]	; (8009dd4 <BSP_SD_Init+0x48>)
 8009da6:	f7fd fa21 	bl	80071ec <HAL_SD_Init>
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d109      	bne.n	8009dc8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009db8:	4806      	ldr	r0, [pc, #24]	; (8009dd4 <BSP_SD_Init+0x48>)
 8009dba:	f7fd ffe1 	bl	8007d80 <HAL_SD_ConfigWideBusOperation>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20003b40 	.word	0x20003b40

08009dd8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	4806      	ldr	r0, [pc, #24]	; (8009e08 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009df0:	f7fd fa8c 	bl	800730c <HAL_SD_ReadBlocks_DMA>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20003b40 	.word	0x20003b40

08009e0c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	68f9      	ldr	r1, [r7, #12]
 8009e22:	4806      	ldr	r0, [pc, #24]	; (8009e3c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009e24:	f7fd fb5c 	bl	80074e0 <HAL_SD_WriteBlocks_DMA>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20003b40 	.word	0x20003b40

08009e40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009e44:	4805      	ldr	r0, [pc, #20]	; (8009e5c <BSP_SD_GetCardState+0x1c>)
 8009e46:	f7fe f817 	bl	8007e78 <HAL_SD_GetCardState>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b04      	cmp	r3, #4
 8009e4e:	bf14      	ite	ne
 8009e50:	2301      	movne	r3, #1
 8009e52:	2300      	moveq	r3, #0
 8009e54:	b2db      	uxtb	r3, r3
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20003b40 	.word	0x20003b40

08009e60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	4803      	ldr	r0, [pc, #12]	; (8009e78 <BSP_SD_GetCardInfo+0x18>)
 8009e6c:	f7fd ff5c 	bl	8007d28 <HAL_SD_GetCardInfo>
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20003b40 	.word	0x20003b40

08009e7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009e84:	f000 f818 	bl	8009eb8 <BSP_SD_AbortCallback>
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009e98:	f000 f9aa 	bl	800a1f0 <BSP_SD_WriteCpltCallback>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009eac:	f000 f9ac 	bl	800a208 <BSP_SD_ReadCpltCallback>
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	af00      	add	r7, sp, #0

}
 8009ebc:	bf00      	nop
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009ed0:	f000 f80c 	bl	8009eec <BSP_PlatformIsDetected>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009eda:	2300      	movs	r3, #0
 8009edc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	b2db      	uxtb	r3, r3
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4807      	ldr	r0, [pc, #28]	; (8009f18 <BSP_PlatformIsDetected+0x2c>)
 8009efa:	f7fb fc3f 	bl	800577c <HAL_GPIO_ReadPin>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009f04:	2300      	movs	r3, #0
 8009f06:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	40020c00 	.word	0x40020c00

08009f1c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009f24:	f7fa f906 	bl	8004134 <HAL_GetTick>
 8009f28:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009f2a:	e006      	b.n	8009f3a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009f2c:	f7ff ff88 	bl	8009e40 <BSP_SD_GetCardState>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e009      	b.n	8009f4e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009f3a:	f7fa f8fb 	bl	8004134 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d8f0      	bhi.n	8009f2c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009f62:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <SD_CheckStatus+0x38>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009f68:	f7ff ff6a 	bl	8009e40 <BSP_SD_GetCardState>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d107      	bne.n	8009f82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009f72:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <SD_CheckStatus+0x38>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f023 0301 	bic.w	r3, r3, #1
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <SD_CheckStatus+0x38>)
 8009f80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009f82:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <SD_CheckStatus+0x38>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b2db      	uxtb	r3, r3
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	2000011d 	.word	0x2000011d

08009f94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009f9e:	f7ff fef5 	bl	8009d8c <BSP_SD_Init>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d107      	bne.n	8009fb8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff ffd4 	bl	8009f58 <SD_CheckStatus>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <SD_initialize+0x34>)
 8009fb6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009fb8:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <SD_initialize+0x34>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b2db      	uxtb	r3, r3
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	2000011d 	.word	0x2000011d

08009fcc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009fd6:	79fb      	ldrb	r3, [r7, #7]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff ffbd 	bl	8009f58 <SD_CheckStatus>
 8009fde:	4603      	mov	r3, r0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009ffc:	f247 5030 	movw	r0, #30000	; 0x7530
 800a000:	f7ff ff8c 	bl	8009f1c <SD_CheckStatusWithTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	da01      	bge.n	800a00e <SD_read+0x26>
  {
    return res;
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	e03b      	b.n	800a086 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	68b8      	ldr	r0, [r7, #8]
 800a014:	f7ff fee0 	bl	8009dd8 <BSP_SD_ReadBlocks_DMA>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d132      	bne.n	800a084 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a01e:	4b1c      	ldr	r3, [pc, #112]	; (800a090 <SD_read+0xa8>)
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a024:	f7fa f886 	bl	8004134 <HAL_GetTick>
 800a028:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a02a:	bf00      	nop
 800a02c:	4b18      	ldr	r3, [pc, #96]	; (800a090 <SD_read+0xa8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d108      	bne.n	800a046 <SD_read+0x5e>
 800a034:	f7fa f87e 	bl	8004134 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	f247 522f 	movw	r2, #29999	; 0x752f
 800a042:	4293      	cmp	r3, r2
 800a044:	d9f2      	bls.n	800a02c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800a046:	4b12      	ldr	r3, [pc, #72]	; (800a090 <SD_read+0xa8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d102      	bne.n	800a054 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	75fb      	strb	r3, [r7, #23]
 800a052:	e017      	b.n	800a084 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a054:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <SD_read+0xa8>)
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a05a:	f7fa f86b 	bl	8004134 <HAL_GetTick>
 800a05e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a060:	e007      	b.n	800a072 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a062:	f7ff feed 	bl	8009e40 <BSP_SD_GetCardState>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <SD_read+0x8a>
          {
            res = RES_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a070:	e008      	b.n	800a084 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a072:	f7fa f85f 	bl	8004134 <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a080:	4293      	cmp	r3, r2
 800a082:	d9ee      	bls.n	800a062 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000364 	.word	0x20000364

0800a094 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a0a8:	4b24      	ldr	r3, [pc, #144]	; (800a13c <SD_write+0xa8>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a0ae:	f247 5030 	movw	r0, #30000	; 0x7530
 800a0b2:	f7ff ff33 	bl	8009f1c <SD_CheckStatusWithTimeout>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	da01      	bge.n	800a0c0 <SD_write+0x2c>
  {
    return res;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	e038      	b.n	800a132 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	68b8      	ldr	r0, [r7, #8]
 800a0c6:	f7ff fea1 	bl	8009e0c <BSP_SD_WriteBlocks_DMA>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d12f      	bne.n	800a130 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a0d0:	f7fa f830 	bl	8004134 <HAL_GetTick>
 800a0d4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a0d6:	bf00      	nop
 800a0d8:	4b18      	ldr	r3, [pc, #96]	; (800a13c <SD_write+0xa8>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d108      	bne.n	800a0f2 <SD_write+0x5e>
 800a0e0:	f7fa f828 	bl	8004134 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	f247 522f 	movw	r2, #29999	; 0x752f
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d9f2      	bls.n	800a0d8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800a0f2:	4b12      	ldr	r3, [pc, #72]	; (800a13c <SD_write+0xa8>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d102      	bne.n	800a100 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]
 800a0fe:	e017      	b.n	800a130 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a100:	4b0e      	ldr	r3, [pc, #56]	; (800a13c <SD_write+0xa8>)
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a106:	f7fa f815 	bl	8004134 <HAL_GetTick>
 800a10a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a10c:	e007      	b.n	800a11e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a10e:	f7ff fe97 	bl	8009e40 <BSP_SD_GetCardState>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <SD_write+0x8a>
          {
            res = RES_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	75fb      	strb	r3, [r7, #23]
            break;
 800a11c:	e008      	b.n	800a130 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a11e:	f7fa f809 	bl	8004134 <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	f247 522f 	movw	r2, #29999	; 0x752f
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d9ee      	bls.n	800a10e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a130:	7dfb      	ldrb	r3, [r7, #23]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000360 	.word	0x20000360

0800a140 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08c      	sub	sp, #48	; 0x30
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	603a      	str	r2, [r7, #0]
 800a14a:	71fb      	strb	r3, [r7, #7]
 800a14c:	460b      	mov	r3, r1
 800a14e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a156:	4b25      	ldr	r3, [pc, #148]	; (800a1ec <SD_ioctl+0xac>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <SD_ioctl+0x28>
 800a164:	2303      	movs	r3, #3
 800a166:	e03c      	b.n	800a1e2 <SD_ioctl+0xa2>

  switch (cmd)
 800a168:	79bb      	ldrb	r3, [r7, #6]
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d834      	bhi.n	800a1d8 <SD_ioctl+0x98>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <SD_ioctl+0x34>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a185 	.word	0x0800a185
 800a178:	0800a18d 	.word	0x0800a18d
 800a17c:	0800a1a5 	.word	0x0800a1a5
 800a180:	0800a1bf 	.word	0x0800a1bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a18a:	e028      	b.n	800a1de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a18c:	f107 030c 	add.w	r3, r7, #12
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fe65 	bl	8009e60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a1a2:	e01c      	b.n	800a1de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a1a4:	f107 030c 	add.w	r3, r7, #12
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff fe59 	bl	8009e60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a1bc:	e00f      	b.n	800a1de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a1be:	f107 030c 	add.w	r3, r7, #12
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7ff fe4c 	bl	8009e60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	0a5a      	lsrs	r2, r3, #9
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a1d6:	e002      	b.n	800a1de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a1d8:	2304      	movs	r3, #4
 800a1da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a1de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3730      	adds	r7, #48	; 0x30
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	2000011d 	.word	0x2000011d

0800a1f0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a1f4:	4b03      	ldr	r3, [pc, #12]	; (800a204 <BSP_SD_WriteCpltCallback+0x14>)
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
}
 800a1fa:	bf00      	nop
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	20000360 	.word	0x20000360

0800a208 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a20c:	4b03      	ldr	r3, [pc, #12]	; (800a21c <BSP_SD_ReadCpltCallback+0x14>)
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]
}
 800a212:	bf00      	nop
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	20000364 	.word	0x20000364

0800a220 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	4a08      	ldr	r2, [pc, #32]	; (800a250 <disk_status+0x30>)
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	79fa      	ldrb	r2, [r7, #7]
 800a238:	4905      	ldr	r1, [pc, #20]	; (800a250 <disk_status+0x30>)
 800a23a:	440a      	add	r2, r1
 800a23c:	7a12      	ldrb	r2, [r2, #8]
 800a23e:	4610      	mov	r0, r2
 800a240:	4798      	blx	r3
 800a242:	4603      	mov	r3, r0
 800a244:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a246:	7bfb      	ldrb	r3, [r7, #15]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	20000390 	.word	0x20000390

0800a254 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a262:	79fb      	ldrb	r3, [r7, #7]
 800a264:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <disk_initialize+0x48>)
 800a266:	5cd3      	ldrb	r3, [r2, r3]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d111      	bne.n	800a290 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	4a0b      	ldr	r2, [pc, #44]	; (800a29c <disk_initialize+0x48>)
 800a270:	2101      	movs	r1, #1
 800a272:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	4a09      	ldr	r2, [pc, #36]	; (800a29c <disk_initialize+0x48>)
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	79fa      	ldrb	r2, [r7, #7]
 800a282:	4906      	ldr	r1, [pc, #24]	; (800a29c <disk_initialize+0x48>)
 800a284:	440a      	add	r2, r1
 800a286:	7a12      	ldrb	r2, [r2, #8]
 800a288:	4610      	mov	r0, r2
 800a28a:	4798      	blx	r3
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000390 	.word	0x20000390

0800a2a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a2a0:	b590      	push	{r4, r7, lr}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	4a0a      	ldr	r2, [pc, #40]	; (800a2dc <disk_read+0x3c>)
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	689c      	ldr	r4, [r3, #8]
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	4a07      	ldr	r2, [pc, #28]	; (800a2dc <disk_read+0x3c>)
 800a2c0:	4413      	add	r3, r2
 800a2c2:	7a18      	ldrb	r0, [r3, #8]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	68b9      	ldr	r1, [r7, #8]
 800a2ca:	47a0      	blx	r4
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd90      	pop	{r4, r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000390 	.word	0x20000390

0800a2e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	607a      	str	r2, [r7, #4]
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <disk_write+0x3c>)
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	68dc      	ldr	r4, [r3, #12]
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	4a07      	ldr	r2, [pc, #28]	; (800a31c <disk_write+0x3c>)
 800a300:	4413      	add	r3, r2
 800a302:	7a18      	ldrb	r0, [r3, #8]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	47a0      	blx	r4
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a310:	7dfb      	ldrb	r3, [r7, #23]
}
 800a312:	4618      	mov	r0, r3
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	bd90      	pop	{r4, r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000390 	.word	0x20000390

0800a320 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	603a      	str	r2, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
 800a32c:	460b      	mov	r3, r1
 800a32e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	4a09      	ldr	r2, [pc, #36]	; (800a358 <disk_ioctl+0x38>)
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	79fa      	ldrb	r2, [r7, #7]
 800a33e:	4906      	ldr	r1, [pc, #24]	; (800a358 <disk_ioctl+0x38>)
 800a340:	440a      	add	r2, r1
 800a342:	7a10      	ldrb	r0, [r2, #8]
 800a344:	79b9      	ldrb	r1, [r7, #6]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4798      	blx	r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000390 	.word	0x20000390

0800a35c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3301      	adds	r3, #1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a36c:	89fb      	ldrh	r3, [r7, #14]
 800a36e:	021b      	lsls	r3, r3, #8
 800a370:	b21a      	sxth	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b21b      	sxth	r3, r3
 800a378:	4313      	orrs	r3, r2
 800a37a:	b21b      	sxth	r3, r3
 800a37c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a37e:	89fb      	ldrh	r3, [r7, #14]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3303      	adds	r3, #3
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	3202      	adds	r2, #2
 800a3a4:	7812      	ldrb	r2, [r2, #0]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	3201      	adds	r2, #1
 800a3b2:	7812      	ldrb	r2, [r2, #0]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	021b      	lsls	r3, r3, #8
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	7812      	ldrb	r2, [r2, #0]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	887a      	ldrh	r2, [r7, #2]
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	887b      	ldrh	r3, [r7, #2]
 800a3ec:	0a1b      	lsrs	r3, r3, #8
 800a3ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	607a      	str	r2, [r7, #4]
 800a3f6:	887a      	ldrh	r2, [r7, #2]
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	701a      	strb	r2, [r3, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	b2d2      	uxtb	r2, r2
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	0a1b      	lsrs	r3, r3, #8
 800a422:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	607a      	str	r2, [r7, #4]
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	b2d2      	uxtb	r2, r2
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	0a1b      	lsrs	r3, r3, #8
 800a434:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	b2d2      	uxtb	r2, r2
 800a440:	701a      	strb	r2, [r3, #0]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	0a1b      	lsrs	r3, r3, #8
 800a446:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	607a      	str	r2, [r7, #4]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00d      	beq.n	800a496 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	1c53      	adds	r3, r2, #1
 800a47e:	613b      	str	r3, [r7, #16]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	1c59      	adds	r1, r3, #1
 800a484:	6179      	str	r1, [r7, #20]
 800a486:	7812      	ldrb	r2, [r2, #0]
 800a488:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1f1      	bne.n	800a47a <mem_cpy+0x1a>
	}
}
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a4a2:	b480      	push	{r7}
 800a4a4:	b087      	sub	sp, #28
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	617a      	str	r2, [r7, #20]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	607b      	str	r3, [r7, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f3      	bne.n	800a4b2 <mem_set+0x10>
}
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a4d6:	b480      	push	{r7}
 800a4d8:	b089      	sub	sp, #36	; 0x24
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	61fb      	str	r3, [r7, #28]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	61fa      	str	r2, [r7, #28]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	61ba      	str	r2, [r7, #24]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	1acb      	subs	r3, r1, r3
 800a502:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3b01      	subs	r3, #1
 800a508:	607b      	str	r3, [r7, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <mem_cmp+0x40>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0eb      	beq.n	800a4ee <mem_cmp+0x18>

	return r;
 800a516:	697b      	ldr	r3, [r7, #20]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3724      	adds	r7, #36	; 0x24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a52e:	e002      	b.n	800a536 <chk_chr+0x12>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3301      	adds	r3, #1
 800a534:	607b      	str	r3, [r7, #4]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <chk_chr+0x26>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	4293      	cmp	r3, r2
 800a548:	d1f2      	bne.n	800a530 <chk_chr+0xc>
	return *str;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	781b      	ldrb	r3, [r3, #0]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a566:	2300      	movs	r3, #0
 800a568:	60bb      	str	r3, [r7, #8]
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	e029      	b.n	800a5c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a570:	4a27      	ldr	r2, [pc, #156]	; (800a610 <chk_lock+0xb4>)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	011b      	lsls	r3, r3, #4
 800a576:	4413      	add	r3, r2
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d01d      	beq.n	800a5ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a57e:	4a24      	ldr	r2, [pc, #144]	; (800a610 <chk_lock+0xb4>)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	4413      	add	r3, r2
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d116      	bne.n	800a5be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a590:	4a1f      	ldr	r2, [pc, #124]	; (800a610 <chk_lock+0xb4>)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	4413      	add	r3, r2
 800a598:	3304      	adds	r3, #4
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d10c      	bne.n	800a5be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a5a4:	4a1a      	ldr	r2, [pc, #104]	; (800a610 <chk_lock+0xb4>)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	011b      	lsls	r3, r3, #4
 800a5aa:	4413      	add	r3, r2
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d102      	bne.n	800a5be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a5b8:	e007      	b.n	800a5ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d9d2      	bls.n	800a570 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d109      	bne.n	800a5e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <chk_lock+0x80>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d101      	bne.n	800a5e0 <chk_lock+0x84>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e010      	b.n	800a602 <chk_lock+0xa6>
 800a5e0:	2312      	movs	r3, #18
 800a5e2:	e00e      	b.n	800a602 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d108      	bne.n	800a5fc <chk_lock+0xa0>
 800a5ea:	4a09      	ldr	r2, [pc, #36]	; (800a610 <chk_lock+0xb4>)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	4413      	add	r3, r2
 800a5f2:	330c      	adds	r3, #12
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fa:	d101      	bne.n	800a600 <chk_lock+0xa4>
 800a5fc:	2310      	movs	r3, #16
 800a5fe:	e000      	b.n	800a602 <chk_lock+0xa6>
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20000370 	.word	0x20000370

0800a614 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a61a:	2300      	movs	r3, #0
 800a61c:	607b      	str	r3, [r7, #4]
 800a61e:	e002      	b.n	800a626 <enq_lock+0x12>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3301      	adds	r3, #1
 800a624:	607b      	str	r3, [r7, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d806      	bhi.n	800a63a <enq_lock+0x26>
 800a62c:	4a09      	ldr	r2, [pc, #36]	; (800a654 <enq_lock+0x40>)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	011b      	lsls	r3, r3, #4
 800a632:	4413      	add	r3, r2
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1f2      	bne.n	800a620 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	bf14      	ite	ne
 800a640:	2301      	movne	r3, #1
 800a642:	2300      	moveq	r3, #0
 800a644:	b2db      	uxtb	r3, r3
}
 800a646:	4618      	mov	r0, r3
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20000370 	.word	0x20000370

0800a658 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a662:	2300      	movs	r3, #0
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	e01f      	b.n	800a6a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a668:	4a41      	ldr	r2, [pc, #260]	; (800a770 <inc_lock+0x118>)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	4413      	add	r3, r2
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d113      	bne.n	800a6a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a67a:	4a3d      	ldr	r2, [pc, #244]	; (800a770 <inc_lock+0x118>)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	4413      	add	r3, r2
 800a682:	3304      	adds	r3, #4
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d109      	bne.n	800a6a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a68e:	4a38      	ldr	r2, [pc, #224]	; (800a770 <inc_lock+0x118>)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	011b      	lsls	r3, r3, #4
 800a694:	4413      	add	r3, r2
 800a696:	3308      	adds	r3, #8
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d006      	beq.n	800a6b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d9dc      	bls.n	800a668 <inc_lock+0x10>
 800a6ae:	e000      	b.n	800a6b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a6b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d132      	bne.n	800a71e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	e002      	b.n	800a6c4 <inc_lock+0x6c>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d806      	bhi.n	800a6d8 <inc_lock+0x80>
 800a6ca:	4a29      	ldr	r2, [pc, #164]	; (800a770 <inc_lock+0x118>)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	4413      	add	r3, r2
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1f2      	bne.n	800a6be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d101      	bne.n	800a6e2 <inc_lock+0x8a>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e040      	b.n	800a764 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	4922      	ldr	r1, [pc, #136]	; (800a770 <inc_lock+0x118>)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	011b      	lsls	r3, r3, #4
 800a6ec:	440b      	add	r3, r1
 800a6ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	491e      	ldr	r1, [pc, #120]	; (800a770 <inc_lock+0x118>)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	440b      	add	r3, r1
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	695a      	ldr	r2, [r3, #20]
 800a704:	491a      	ldr	r1, [pc, #104]	; (800a770 <inc_lock+0x118>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	011b      	lsls	r3, r3, #4
 800a70a:	440b      	add	r3, r1
 800a70c:	3308      	adds	r3, #8
 800a70e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a710:	4a17      	ldr	r2, [pc, #92]	; (800a770 <inc_lock+0x118>)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	011b      	lsls	r3, r3, #4
 800a716:	4413      	add	r3, r2
 800a718:	330c      	adds	r3, #12
 800a71a:	2200      	movs	r2, #0
 800a71c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <inc_lock+0xe0>
 800a724:	4a12      	ldr	r2, [pc, #72]	; (800a770 <inc_lock+0x118>)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	011b      	lsls	r3, r3, #4
 800a72a:	4413      	add	r3, r2
 800a72c:	330c      	adds	r3, #12
 800a72e:	881b      	ldrh	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <inc_lock+0xe0>
 800a734:	2300      	movs	r3, #0
 800a736:	e015      	b.n	800a764 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d108      	bne.n	800a750 <inc_lock+0xf8>
 800a73e:	4a0c      	ldr	r2, [pc, #48]	; (800a770 <inc_lock+0x118>)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	011b      	lsls	r3, r3, #4
 800a744:	4413      	add	r3, r2
 800a746:	330c      	adds	r3, #12
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	3301      	adds	r3, #1
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	e001      	b.n	800a754 <inc_lock+0xfc>
 800a750:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a754:	4906      	ldr	r1, [pc, #24]	; (800a770 <inc_lock+0x118>)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	440b      	add	r3, r1
 800a75c:	330c      	adds	r3, #12
 800a75e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	20000370 	.word	0x20000370

0800a774 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3b01      	subs	r3, #1
 800a780:	607b      	str	r3, [r7, #4]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d825      	bhi.n	800a7d4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a788:	4a17      	ldr	r2, [pc, #92]	; (800a7e8 <dec_lock+0x74>)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	011b      	lsls	r3, r3, #4
 800a78e:	4413      	add	r3, r2
 800a790:	330c      	adds	r3, #12
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a796:	89fb      	ldrh	r3, [r7, #14]
 800a798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a79c:	d101      	bne.n	800a7a2 <dec_lock+0x2e>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a7a2:	89fb      	ldrh	r3, [r7, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <dec_lock+0x3a>
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a7ae:	4a0e      	ldr	r2, [pc, #56]	; (800a7e8 <dec_lock+0x74>)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	4413      	add	r3, r2
 800a7b6:	330c      	adds	r3, #12
 800a7b8:	89fa      	ldrh	r2, [r7, #14]
 800a7ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a7bc:	89fb      	ldrh	r3, [r7, #14]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d105      	bne.n	800a7ce <dec_lock+0x5a>
 800a7c2:	4a09      	ldr	r2, [pc, #36]	; (800a7e8 <dec_lock+0x74>)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	4413      	add	r3, r2
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	737b      	strb	r3, [r7, #13]
 800a7d2:	e001      	b.n	800a7d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a7d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000370 	.word	0x20000370

0800a7ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e010      	b.n	800a81c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a7fa:	4a0d      	ldr	r2, [pc, #52]	; (800a830 <clear_lock+0x44>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	4413      	add	r3, r2
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d105      	bne.n	800a816 <clear_lock+0x2a>
 800a80a:	4a09      	ldr	r2, [pc, #36]	; (800a830 <clear_lock+0x44>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	4413      	add	r3, r2
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d9eb      	bls.n	800a7fa <clear_lock+0xe>
	}
}
 800a822:	bf00      	nop
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	20000370 	.word	0x20000370

0800a834 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	78db      	ldrb	r3, [r3, #3]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d034      	beq.n	800a8b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	7858      	ldrb	r0, [r3, #1]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a858:	2301      	movs	r3, #1
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	f7ff fd40 	bl	800a2e0 <disk_write>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d002      	beq.n	800a86c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a866:	2301      	movs	r3, #1
 800a868:	73fb      	strb	r3, [r7, #15]
 800a86a:	e022      	b.n	800a8b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	1ad2      	subs	r2, r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d217      	bcs.n	800a8b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	789b      	ldrb	r3, [r3, #2]
 800a886:	613b      	str	r3, [r7, #16]
 800a888:	e010      	b.n	800a8ac <sync_window+0x78>
					wsect += fs->fsize;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	4413      	add	r3, r2
 800a892:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7858      	ldrb	r0, [r3, #1]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a89e:	2301      	movs	r3, #1
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	f7ff fd1d 	bl	800a2e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	613b      	str	r3, [r7, #16]
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d8eb      	bhi.n	800a88a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d01b      	beq.n	800a90c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ffad 	bl	800a834 <sync_window>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d113      	bne.n	800a90c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7858      	ldrb	r0, [r3, #1]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	f7ff fcd5 	bl	800a2a0 <disk_read>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a8fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a900:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a902:	2301      	movs	r3, #1
 800a904:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ff87 	bl	800a834 <sync_window>
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d159      	bne.n	800a9e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b03      	cmp	r3, #3
 800a936:	d149      	bne.n	800a9cc <sync_fs+0xb4>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	791b      	ldrb	r3, [r3, #4]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d145      	bne.n	800a9cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	899b      	ldrh	r3, [r3, #12]
 800a94a:	461a      	mov	r2, r3
 800a94c:	2100      	movs	r1, #0
 800a94e:	f7ff fda8 	bl	800a4a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3334      	adds	r3, #52	; 0x34
 800a956:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a95a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fd37 	bl	800a3d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3334      	adds	r3, #52	; 0x34
 800a968:	4921      	ldr	r1, [pc, #132]	; (800a9f0 <sync_fs+0xd8>)
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff fd4c 	bl	800a408 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3334      	adds	r3, #52	; 0x34
 800a974:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a978:	491e      	ldr	r1, [pc, #120]	; (800a9f4 <sync_fs+0xdc>)
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff fd44 	bl	800a408 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3334      	adds	r3, #52	; 0x34
 800a984:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	4619      	mov	r1, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	f7ff fd3a 	bl	800a408 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3334      	adds	r3, #52	; 0x34
 800a998:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	f7ff fd30 	bl	800a408 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	1c5a      	adds	r2, r3, #1
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7858      	ldrb	r0, [r3, #1]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f7ff fc8d 	bl	800a2e0 <disk_write>
			fs->fsi_flag = 0;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	785b      	ldrb	r3, [r3, #1]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff fca3 	bl	800a320 <disk_ioctl>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <sync_fs+0xcc>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	41615252 	.word	0x41615252
 800a9f4:	61417272 	.word	0x61417272

0800a9f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	3b02      	subs	r3, #2
 800aa06:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	3b02      	subs	r3, #2
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d301      	bcc.n	800aa18 <clust2sect+0x20>
 800aa14:	2300      	movs	r3, #0
 800aa16:	e008      	b.n	800aa2a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	895b      	ldrh	r3, [r3, #10]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	fb03 f202 	mul.w	r2, r3, r2
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	4413      	add	r3, r2
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b086      	sub	sp, #24
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d904      	bls.n	800aa56 <get_fat+0x20>
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d302      	bcc.n	800aa5c <get_fat+0x26>
		val = 1;	/* Internal error */
 800aa56:	2301      	movs	r3, #1
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	e0b7      	b.n	800abcc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa60:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d05a      	beq.n	800ab20 <get_fat+0xea>
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d07d      	beq.n	800ab6a <get_fat+0x134>
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	f040 80a2 	bne.w	800abb8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	085b      	lsrs	r3, r3, #1
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	899b      	ldrh	r3, [r3, #12]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa92:	4413      	add	r3, r2
 800aa94:	4619      	mov	r1, r3
 800aa96:	6938      	ldr	r0, [r7, #16]
 800aa98:	f7ff ff10 	bl	800a8bc <move_window>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f040 808d 	bne.w	800abbe <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	60fa      	str	r2, [r7, #12]
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	8992      	ldrh	r2, [r2, #12]
 800aaae:	fbb3 f1f2 	udiv	r1, r3, r2
 800aab2:	fb02 f201 	mul.w	r2, r2, r1
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	4413      	add	r3, r2
 800aabc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aac0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	899b      	ldrh	r3, [r3, #12]
 800aaca:	4619      	mov	r1, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	fbb3 f3f1 	udiv	r3, r3, r1
 800aad2:	4413      	add	r3, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	6938      	ldr	r0, [r7, #16]
 800aad8:	f7ff fef0 	bl	800a8bc <move_window>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d16f      	bne.n	800abc2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	899b      	ldrh	r3, [r3, #12]
 800aae6:	461a      	mov	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaee:	fb02 f201 	mul.w	r2, r2, r1
 800aaf2:	1a9b      	subs	r3, r3, r2
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	461a      	mov	r2, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <get_fat+0xe0>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	091b      	lsrs	r3, r3, #4
 800ab14:	e002      	b.n	800ab1c <get_fat+0xe6>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab1c:	617b      	str	r3, [r7, #20]
			break;
 800ab1e:	e055      	b.n	800abcc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	899b      	ldrh	r3, [r3, #12]
 800ab28:	085b      	lsrs	r3, r3, #1
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab34:	4413      	add	r3, r2
 800ab36:	4619      	mov	r1, r3
 800ab38:	6938      	ldr	r0, [r7, #16]
 800ab3a:	f7ff febf 	bl	800a8bc <move_window>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d140      	bne.n	800abc6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	8992      	ldrh	r2, [r2, #12]
 800ab52:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab56:	fb02 f200 	mul.w	r2, r2, r0
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	440b      	add	r3, r1
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fbfc 	bl	800a35c <ld_word>
 800ab64:	4603      	mov	r3, r0
 800ab66:	617b      	str	r3, [r7, #20]
			break;
 800ab68:	e030      	b.n	800abcc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	899b      	ldrh	r3, [r3, #12]
 800ab72:	089b      	lsrs	r3, r3, #2
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	4619      	mov	r1, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab7e:	4413      	add	r3, r2
 800ab80:	4619      	mov	r1, r3
 800ab82:	6938      	ldr	r0, [r7, #16]
 800ab84:	f7ff fe9a 	bl	800a8bc <move_window>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d11d      	bne.n	800abca <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	8992      	ldrh	r2, [r2, #12]
 800ab9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800aba0:	fb02 f200 	mul.w	r2, r2, r0
 800aba4:	1a9b      	subs	r3, r3, r2
 800aba6:	440b      	add	r3, r1
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff fbef 	bl	800a38c <ld_dword>
 800abae:	4603      	mov	r3, r0
 800abb0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800abb4:	617b      	str	r3, [r7, #20]
			break;
 800abb6:	e009      	b.n	800abcc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800abb8:	2301      	movs	r3, #1
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	e006      	b.n	800abcc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abbe:	bf00      	nop
 800abc0:	e004      	b.n	800abcc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abc2:	bf00      	nop
 800abc4:	e002      	b.n	800abcc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800abc6:	bf00      	nop
 800abc8:	e000      	b.n	800abcc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abca:	bf00      	nop
		}
	}

	return val;
 800abcc:	697b      	ldr	r3, [r7, #20]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800abd6:	b590      	push	{r4, r7, lr}
 800abd8:	b089      	sub	sp, #36	; 0x24
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800abe2:	2302      	movs	r3, #2
 800abe4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	f240 8106 	bls.w	800adfa <put_fat+0x224>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	f080 8100 	bcs.w	800adfa <put_fat+0x224>
		switch (fs->fs_type) {
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	f000 8088 	beq.w	800ad14 <put_fat+0x13e>
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	f000 80b0 	beq.w	800ad6a <put_fat+0x194>
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	f040 80f5 	bne.w	800adfa <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	61bb      	str	r3, [r7, #24]
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	085b      	lsrs	r3, r3, #1
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	899b      	ldrh	r3, [r3, #12]
 800ac26:	4619      	mov	r1, r3
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac2e:	4413      	add	r3, r2
 800ac30:	4619      	mov	r1, r3
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f7ff fe42 	bl	800a8bc <move_window>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac3c:	7ffb      	ldrb	r3, [r7, #31]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f040 80d4 	bne.w	800adec <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	61ba      	str	r2, [r7, #24]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	8992      	ldrh	r2, [r2, #12]
 800ac54:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac58:	fb02 f200 	mul.w	r2, r2, r0
 800ac5c:	1a9b      	subs	r3, r3, r2
 800ac5e:	440b      	add	r3, r1
 800ac60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00d      	beq.n	800ac88 <put_fat+0xb2>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b25b      	sxtb	r3, r3
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	b25a      	sxtb	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	b25b      	sxtb	r3, r3
 800ac80:	4313      	orrs	r3, r2
 800ac82:	b25b      	sxtb	r3, r3
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	e001      	b.n	800ac8c <put_fat+0xb6>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	899b      	ldrh	r3, [r3, #12]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aca6:	4413      	add	r3, r2
 800aca8:	4619      	mov	r1, r3
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7ff fe06 	bl	800a8bc <move_window>
 800acb0:	4603      	mov	r3, r0
 800acb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acb4:	7ffb      	ldrb	r3, [r7, #31]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f040 809a 	bne.w	800adf0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	899b      	ldrh	r3, [r3, #12]
 800acc6:	461a      	mov	r2, r3
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	fbb3 f0f2 	udiv	r0, r3, r2
 800acce:	fb02 f200 	mul.w	r2, r2, r0
 800acd2:	1a9b      	subs	r3, r3, r2
 800acd4:	440b      	add	r3, r1
 800acd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <put_fat+0x114>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	091b      	lsrs	r3, r3, #4
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	e00e      	b.n	800ad08 <put_fat+0x132>
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	b25b      	sxtb	r3, r3
 800acf0:	f023 030f 	bic.w	r3, r3, #15
 800acf4:	b25a      	sxtb	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	0a1b      	lsrs	r3, r3, #8
 800acfa:	b25b      	sxtb	r3, r3
 800acfc:	f003 030f 	and.w	r3, r3, #15
 800ad00:	b25b      	sxtb	r3, r3
 800ad02:	4313      	orrs	r3, r2
 800ad04:	b25b      	sxtb	r3, r3
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	70da      	strb	r2, [r3, #3]
			break;
 800ad12:	e072      	b.n	800adfa <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	899b      	ldrh	r3, [r3, #12]
 800ad1c:	085b      	lsrs	r3, r3, #1
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	4619      	mov	r1, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad28:	4413      	add	r3, r2
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff fdc5 	bl	800a8bc <move_window>
 800ad32:	4603      	mov	r3, r0
 800ad34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad36:	7ffb      	ldrb	r3, [r7, #31]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d15b      	bne.n	800adf4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	8992      	ldrh	r2, [r2, #12]
 800ad4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad4e:	fb02 f200 	mul.w	r2, r2, r0
 800ad52:	1a9b      	subs	r3, r3, r2
 800ad54:	440b      	add	r3, r1
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	b292      	uxth	r2, r2
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff fb38 	bl	800a3d2 <st_word>
			fs->wflag = 1;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2201      	movs	r2, #1
 800ad66:	70da      	strb	r2, [r3, #3]
			break;
 800ad68:	e047      	b.n	800adfa <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	899b      	ldrh	r3, [r3, #12]
 800ad72:	089b      	lsrs	r3, r3, #2
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	4619      	mov	r1, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad7e:	4413      	add	r3, r2
 800ad80:	4619      	mov	r1, r3
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f7ff fd9a 	bl	800a8bc <move_window>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad8c:	7ffb      	ldrb	r3, [r7, #31]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d132      	bne.n	800adf8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	8992      	ldrh	r2, [r2, #12]
 800ada6:	fbb3 f0f2 	udiv	r0, r3, r2
 800adaa:	fb02 f200 	mul.w	r2, r2, r0
 800adae:	1a9b      	subs	r3, r3, r2
 800adb0:	440b      	add	r3, r1
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff faea 	bl	800a38c <ld_dword>
 800adb8:	4603      	mov	r3, r0
 800adba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800adbe:	4323      	orrs	r3, r4
 800adc0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	8992      	ldrh	r2, [r2, #12]
 800add0:	fbb3 f0f2 	udiv	r0, r3, r2
 800add4:	fb02 f200 	mul.w	r2, r2, r0
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	440b      	add	r3, r1
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff fb12 	bl	800a408 <st_dword>
			fs->wflag = 1;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2201      	movs	r2, #1
 800ade8:	70da      	strb	r2, [r3, #3]
			break;
 800adea:	e006      	b.n	800adfa <put_fat+0x224>
			if (res != FR_OK) break;
 800adec:	bf00      	nop
 800adee:	e004      	b.n	800adfa <put_fat+0x224>
			if (res != FR_OK) break;
 800adf0:	bf00      	nop
 800adf2:	e002      	b.n	800adfa <put_fat+0x224>
			if (res != FR_OK) break;
 800adf4:	bf00      	nop
 800adf6:	e000      	b.n	800adfa <put_fat+0x224>
			if (res != FR_OK) break;
 800adf8:	bf00      	nop
		}
	}
	return res;
 800adfa:	7ffb      	ldrb	r3, [r7, #31]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3724      	adds	r7, #36	; 0x24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd90      	pop	{r4, r7, pc}

0800ae04 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b088      	sub	sp, #32
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d904      	bls.n	800ae2a <remove_chain+0x26>
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d301      	bcc.n	800ae2e <remove_chain+0x2a>
 800ae2a:	2302      	movs	r3, #2
 800ae2c:	e04b      	b.n	800aec6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00c      	beq.n	800ae4e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ae34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	69b8      	ldr	r0, [r7, #24]
 800ae3c:	f7ff fecb 	bl	800abd6 <put_fat>
 800ae40:	4603      	mov	r3, r0
 800ae42:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ae44:	7ffb      	ldrb	r3, [r7, #31]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <remove_chain+0x4a>
 800ae4a:	7ffb      	ldrb	r3, [r7, #31]
 800ae4c:	e03b      	b.n	800aec6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ae4e:	68b9      	ldr	r1, [r7, #8]
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f7ff fdf0 	bl	800aa36 <get_fat>
 800ae56:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d031      	beq.n	800aec2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d101      	bne.n	800ae68 <remove_chain+0x64>
 800ae64:	2302      	movs	r3, #2
 800ae66:	e02e      	b.n	800aec6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae6e:	d101      	bne.n	800ae74 <remove_chain+0x70>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e028      	b.n	800aec6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ae74:	2200      	movs	r2, #0
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	69b8      	ldr	r0, [r7, #24]
 800ae7a:	f7ff feac 	bl	800abd6 <put_fat>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ae82:	7ffb      	ldrb	r3, [r7, #31]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <remove_chain+0x88>
 800ae88:	7ffb      	ldrb	r3, [r7, #31]
 800ae8a:	e01c      	b.n	800aec6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	695a      	ldr	r2, [r3, #20]
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	3b02      	subs	r3, #2
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d20b      	bcs.n	800aeb2 <remove_chain+0xae>
			fs->free_clst++;
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	791b      	ldrb	r3, [r3, #4]
 800aea8:	f043 0301 	orr.w	r3, r3, #1
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d3c6      	bcc.n	800ae4e <remove_chain+0x4a>
 800aec0:	e000      	b.n	800aec4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aec2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3720      	adds	r7, #32
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b088      	sub	sp, #32
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10d      	bne.n	800af00 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <create_chain+0x2c>
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	69ba      	ldr	r2, [r7, #24]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d31b      	bcc.n	800af32 <create_chain+0x64>
 800aefa:	2301      	movs	r3, #1
 800aefc:	61bb      	str	r3, [r7, #24]
 800aefe:	e018      	b.n	800af32 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff fd97 	bl	800aa36 <get_fat>
 800af08:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d801      	bhi.n	800af14 <create_chain+0x46>
 800af10:	2301      	movs	r3, #1
 800af12:	e070      	b.n	800aff6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af1a:	d101      	bne.n	800af20 <create_chain+0x52>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	e06a      	b.n	800aff6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	429a      	cmp	r2, r3
 800af28:	d201      	bcs.n	800af2e <create_chain+0x60>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	e063      	b.n	800aff6 <create_chain+0x128>
		scl = clst;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	3301      	adds	r3, #1
 800af3a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	69fa      	ldr	r2, [r7, #28]
 800af42:	429a      	cmp	r2, r3
 800af44:	d307      	bcc.n	800af56 <create_chain+0x88>
				ncl = 2;
 800af46:	2302      	movs	r3, #2
 800af48:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d901      	bls.n	800af56 <create_chain+0x88>
 800af52:	2300      	movs	r3, #0
 800af54:	e04f      	b.n	800aff6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800af56:	69f9      	ldr	r1, [r7, #28]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7ff fd6c 	bl	800aa36 <get_fat>
 800af5e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00e      	beq.n	800af84 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d003      	beq.n	800af74 <create_chain+0xa6>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af72:	d101      	bne.n	800af78 <create_chain+0xaa>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	e03e      	b.n	800aff6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800af78:	69fa      	ldr	r2, [r7, #28]
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d1da      	bne.n	800af36 <create_chain+0x68>
 800af80:	2300      	movs	r3, #0
 800af82:	e038      	b.n	800aff6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800af84:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800af86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af8a:	69f9      	ldr	r1, [r7, #28]
 800af8c:	6938      	ldr	r0, [r7, #16]
 800af8e:	f7ff fe22 	bl	800abd6 <put_fat>
 800af92:	4603      	mov	r3, r0
 800af94:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d109      	bne.n	800afb0 <create_chain+0xe2>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d006      	beq.n	800afb0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6938      	ldr	r0, [r7, #16]
 800afa8:	f7ff fe15 	bl	800abd6 <put_fat>
 800afac:	4603      	mov	r3, r0
 800afae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d116      	bne.n	800afe4 <create_chain+0x116>
		fs->last_clst = ncl;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	69fa      	ldr	r2, [r7, #28]
 800afba:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	695a      	ldr	r2, [r3, #20]
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	3b02      	subs	r3, #2
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d804      	bhi.n	800afd4 <create_chain+0x106>
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	1e5a      	subs	r2, r3, #1
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	791b      	ldrb	r3, [r3, #4]
 800afd8:	f043 0301 	orr.w	r3, r3, #1
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	711a      	strb	r2, [r3, #4]
 800afe2:	e007      	b.n	800aff4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d102      	bne.n	800aff0 <create_chain+0x122>
 800afea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afee:	e000      	b.n	800aff2 <create_chain+0x124>
 800aff0:	2301      	movs	r3, #1
 800aff2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aff4:	69fb      	ldr	r3, [r7, #28]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3720      	adds	r7, #32
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800affe:	b480      	push	{r7}
 800b000:	b087      	sub	sp, #28
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b012:	3304      	adds	r3, #4
 800b014:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	899b      	ldrh	r3, [r3, #12]
 800b01a:	461a      	mov	r2, r3
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	8952      	ldrh	r2, [r2, #10]
 800b026:	fbb3 f3f2 	udiv	r3, r3, r2
 800b02a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	1d1a      	adds	r2, r3, #4
 800b030:	613a      	str	r2, [r7, #16]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <clmt_clust+0x42>
 800b03c:	2300      	movs	r3, #0
 800b03e:	e010      	b.n	800b062 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	429a      	cmp	r2, r3
 800b046:	d307      	bcc.n	800b058 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	3304      	adds	r3, #4
 800b054:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b056:	e7e9      	b.n	800b02c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b058:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	4413      	add	r3, r2
}
 800b062:	4618      	mov	r0, r3
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b086      	sub	sp, #24
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b084:	d204      	bcs.n	800b090 <dir_sdi+0x22>
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	f003 031f 	and.w	r3, r3, #31
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b090:	2302      	movs	r3, #2
 800b092:	e071      	b.n	800b178 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <dir_sdi+0x46>
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d902      	bls.n	800b0b4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10c      	bne.n	800b0d4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	8912      	ldrh	r2, [r2, #8]
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d301      	bcc.n	800b0ca <dir_sdi+0x5c>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e056      	b.n	800b178 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	61da      	str	r2, [r3, #28]
 800b0d2:	e02d      	b.n	800b130 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	895b      	ldrh	r3, [r3, #10]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	899b      	ldrh	r3, [r3, #12]
 800b0de:	fb03 f302 	mul.w	r3, r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0e4:	e019      	b.n	800b11a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6979      	ldr	r1, [r7, #20]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff fca3 	bl	800aa36 <get_fat>
 800b0f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0f8:	d101      	bne.n	800b0fe <dir_sdi+0x90>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e03c      	b.n	800b178 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d904      	bls.n	800b10e <dir_sdi+0xa0>
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d301      	bcc.n	800b112 <dir_sdi+0xa4>
 800b10e:	2302      	movs	r3, #2
 800b110:	e032      	b.n	800b178 <dir_sdi+0x10a>
			ofs -= csz;
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d2e1      	bcs.n	800b0e6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b122:	6979      	ldr	r1, [r7, #20]
 800b124:	6938      	ldr	r0, [r7, #16]
 800b126:	f7ff fc67 	bl	800a9f8 <clust2sect>
 800b12a:	4602      	mov	r2, r0
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <dir_sdi+0xd4>
 800b13e:	2302      	movs	r3, #2
 800b140:	e01a      	b.n	800b178 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	899b      	ldrh	r3, [r3, #12]
 800b14a:	4619      	mov	r1, r3
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b152:	441a      	add	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	899b      	ldrh	r3, [r3, #12]
 800b162:	461a      	mov	r2, r3
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	fbb3 f0f2 	udiv	r0, r3, r2
 800b16a:	fb02 f200 	mul.w	r2, r2, r0
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	18ca      	adds	r2, r1, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	3320      	adds	r3, #32
 800b196:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	69db      	ldr	r3, [r3, #28]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <dir_next+0x28>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1a6:	d301      	bcc.n	800b1ac <dir_next+0x2c>
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	e0bb      	b.n	800b324 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	899b      	ldrh	r3, [r3, #12]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1b8:	fb02 f201 	mul.w	r2, r2, r1
 800b1bc:	1a9b      	subs	r3, r3, r2
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f040 809d 	bne.w	800b2fe <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	69db      	ldr	r3, [r3, #28]
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10b      	bne.n	800b1ee <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	8912      	ldrh	r2, [r2, #8]
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	f0c0 808d 	bcc.w	800b2fe <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	61da      	str	r2, [r3, #28]
 800b1ea:	2304      	movs	r3, #4
 800b1ec:	e09a      	b.n	800b324 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	899b      	ldrh	r3, [r3, #12]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	8952      	ldrh	r2, [r2, #10]
 800b1fe:	3a01      	subs	r2, #1
 800b200:	4013      	ands	r3, r2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d17b      	bne.n	800b2fe <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7ff fc11 	bl	800aa36 <get_fat>
 800b214:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d801      	bhi.n	800b220 <dir_next+0xa0>
 800b21c:	2302      	movs	r3, #2
 800b21e:	e081      	b.n	800b324 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b226:	d101      	bne.n	800b22c <dir_next+0xac>
 800b228:	2301      	movs	r3, #1
 800b22a:	e07b      	b.n	800b324 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	429a      	cmp	r2, r3
 800b234:	d359      	bcc.n	800b2ea <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d104      	bne.n	800b246 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	61da      	str	r2, [r3, #28]
 800b242:	2304      	movs	r3, #4
 800b244:	e06e      	b.n	800b324 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	4619      	mov	r1, r3
 800b24e:	4610      	mov	r0, r2
 800b250:	f7ff fe3d 	bl	800aece <create_chain>
 800b254:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <dir_next+0xe0>
 800b25c:	2307      	movs	r3, #7
 800b25e:	e061      	b.n	800b324 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d101      	bne.n	800b26a <dir_next+0xea>
 800b266:	2302      	movs	r3, #2
 800b268:	e05c      	b.n	800b324 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b270:	d101      	bne.n	800b276 <dir_next+0xf6>
 800b272:	2301      	movs	r3, #1
 800b274:	e056      	b.n	800b324 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7ff fadc 	bl	800a834 <sync_window>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <dir_next+0x106>
 800b282:	2301      	movs	r3, #1
 800b284:	e04e      	b.n	800b324 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	899b      	ldrh	r3, [r3, #12]
 800b290:	461a      	mov	r2, r3
 800b292:	2100      	movs	r1, #0
 800b294:	f7ff f905 	bl	800a4a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]
 800b29c:	6979      	ldr	r1, [r7, #20]
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f7ff fbaa 	bl	800a9f8 <clust2sect>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	631a      	str	r2, [r3, #48]	; 0x30
 800b2aa:	e012      	b.n	800b2d2 <dir_next+0x152>
						fs->wflag = 1;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff fabe 	bl	800a834 <sync_window>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <dir_next+0x142>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e030      	b.n	800b324 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	613b      	str	r3, [r7, #16]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	631a      	str	r2, [r3, #48]	; 0x30
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	895b      	ldrh	r3, [r3, #10]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d3e6      	bcc.n	800b2ac <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	1ad2      	subs	r2, r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b2f0:	6979      	ldr	r1, [r7, #20]
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff fb80 	bl	800a9f8 <clust2sect>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	899b      	ldrh	r3, [r3, #12]
 800b30e:	461a      	mov	r2, r3
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	fbb3 f0f2 	udiv	r0, r3, r2
 800b316:	fb02 f200 	mul.w	r2, r2, r0
 800b31a:	1a9b      	subs	r3, r3, r2
 800b31c:	18ca      	adds	r2, r1, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b33c:	2100      	movs	r1, #0
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff fe95 	bl	800b06e <dir_sdi>
 800b344:	4603      	mov	r3, r0
 800b346:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d12b      	bne.n	800b3a6 <dir_alloc+0x7a>
		n = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	69db      	ldr	r3, [r3, #28]
 800b356:	4619      	mov	r1, r3
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7ff faaf 	bl	800a8bc <move_window>
 800b35e:	4603      	mov	r3, r0
 800b360:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d11d      	bne.n	800b3a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a1b      	ldr	r3, [r3, #32]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2be5      	cmp	r3, #229	; 0xe5
 800b370:	d004      	beq.n	800b37c <dir_alloc+0x50>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d107      	bne.n	800b38c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	3301      	adds	r3, #1
 800b380:	613b      	str	r3, [r7, #16]
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	429a      	cmp	r2, r3
 800b388:	d102      	bne.n	800b390 <dir_alloc+0x64>
 800b38a:	e00c      	b.n	800b3a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b38c:	2300      	movs	r3, #0
 800b38e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b390:	2101      	movs	r1, #1
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff fef4 	bl	800b180 <dir_next>
 800b398:	4603      	mov	r3, r0
 800b39a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0d7      	beq.n	800b352 <dir_alloc+0x26>
 800b3a2:	e000      	b.n	800b3a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b3a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b3a6:	7dfb      	ldrb	r3, [r7, #23]
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d101      	bne.n	800b3b0 <dir_alloc+0x84>
 800b3ac:	2307      	movs	r3, #7
 800b3ae:	75fb      	strb	r3, [r7, #23]
	return res;
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b084      	sub	sp, #16
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	331a      	adds	r3, #26
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fe ffc7 	bl	800a35c <ld_word>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d109      	bne.n	800b3ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	3314      	adds	r3, #20
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe ffbc 	bl	800a35c <ld_word>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	331a      	adds	r3, #26
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	b292      	uxth	r2, r2
 800b40c:	4611      	mov	r1, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe ffdf 	bl	800a3d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d109      	bne.n	800b430 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f103 0214 	add.w	r2, r3, #20
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	0c1b      	lsrs	r3, r3, #16
 800b426:	b29b      	uxth	r3, r3
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f7fe ffd1 	bl	800a3d2 <st_word>
	}
}
 800b430:	bf00      	nop
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b442:	2304      	movs	r3, #4
 800b444:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b44c:	e03c      	b.n	800b4c8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	4619      	mov	r1, r3
 800b454:	6938      	ldr	r0, [r7, #16]
 800b456:	f7ff fa31 	bl	800a8bc <move_window>
 800b45a:	4603      	mov	r3, r0
 800b45c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d136      	bne.n	800b4d2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d102      	bne.n	800b478 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b472:	2304      	movs	r3, #4
 800b474:	75fb      	strb	r3, [r7, #23]
 800b476:	e031      	b.n	800b4dc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a1b      	ldr	r3, [r3, #32]
 800b47c:	330b      	adds	r3, #11
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b484:	73bb      	strb	r3, [r7, #14]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	7bba      	ldrb	r2, [r7, #14]
 800b48a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	2be5      	cmp	r3, #229	; 0xe5
 800b490:	d011      	beq.n	800b4b6 <dir_read+0x7e>
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	2b2e      	cmp	r3, #46	; 0x2e
 800b496:	d00e      	beq.n	800b4b6 <dir_read+0x7e>
 800b498:	7bbb      	ldrb	r3, [r7, #14]
 800b49a:	2b0f      	cmp	r3, #15
 800b49c:	d00b      	beq.n	800b4b6 <dir_read+0x7e>
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	f023 0320 	bic.w	r3, r3, #32
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	bf0c      	ite	eq
 800b4a8:	2301      	moveq	r3, #1
 800b4aa:	2300      	movne	r3, #0
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d00f      	beq.n	800b4d6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff fe61 	bl	800b180 <dir_next>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b4c2:	7dfb      	ldrb	r3, [r7, #23]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d108      	bne.n	800b4da <dir_read+0xa2>
	while (dp->sect) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1be      	bne.n	800b44e <dir_read+0x16>
 800b4d0:	e004      	b.n	800b4dc <dir_read+0xa4>
		if (res != FR_OK) break;
 800b4d2:	bf00      	nop
 800b4d4:	e002      	b.n	800b4dc <dir_read+0xa4>
				break;
 800b4d6:	bf00      	nop
 800b4d8:	e000      	b.n	800b4dc <dir_read+0xa4>
		if (res != FR_OK) break;
 800b4da:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <dir_read+0xb0>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	61da      	str	r2, [r3, #28]
	return res;
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b086      	sub	sp, #24
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b500:	2100      	movs	r1, #0
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff fdb3 	bl	800b06e <dir_sdi>
 800b508:	4603      	mov	r3, r0
 800b50a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <dir_find+0x24>
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	e03e      	b.n	800b594 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6938      	ldr	r0, [r7, #16]
 800b51e:	f7ff f9cd 	bl	800a8bc <move_window>
 800b522:	4603      	mov	r3, r0
 800b524:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d12f      	bne.n	800b58c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a1b      	ldr	r3, [r3, #32]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <dir_find+0x4e>
 800b53a:	2304      	movs	r3, #4
 800b53c:	75fb      	strb	r3, [r7, #23]
 800b53e:	e028      	b.n	800b592 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	330b      	adds	r3, #11
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	330b      	adds	r3, #11
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	f003 0308 	and.w	r3, r3, #8
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <dir_find+0x86>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a18      	ldr	r0, [r3, #32]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3324      	adds	r3, #36	; 0x24
 800b56a:	220b      	movs	r2, #11
 800b56c:	4619      	mov	r1, r3
 800b56e:	f7fe ffb2 	bl	800a4d6 <mem_cmp>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b578:	2100      	movs	r1, #0
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff fe00 	bl	800b180 <dir_next>
 800b580:	4603      	mov	r3, r0
 800b582:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b584:	7dfb      	ldrb	r3, [r7, #23]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0c5      	beq.n	800b516 <dir_find+0x24>
 800b58a:	e002      	b.n	800b592 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b58c:	bf00      	nop
 800b58e:	e000      	b.n	800b592 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b590:	bf00      	nop

	return res;
 800b592:	7dfb      	ldrb	r3, [r7, #23]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff febd 	bl	800b32c <dir_alloc>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d11c      	bne.n	800b5f6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	69db      	ldr	r3, [r3, #28]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	68b8      	ldr	r0, [r7, #8]
 800b5c4:	f7ff f97a 	bl	800a8bc <move_window>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d111      	bne.n	800b5f6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe ff61 	bl	800a4a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a18      	ldr	r0, [r3, #32]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3324      	adds	r3, #36	; 0x24
 800b5e8:	220b      	movs	r2, #11
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	f7fe ff38 	bl	800a460 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2200      	movs	r2, #0
 800b60e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d04e      	beq.n	800b6b6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	613b      	str	r3, [r7, #16]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b620:	e021      	b.n	800b666 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1a      	ldr	r2, [r3, #32]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	1c59      	adds	r1, r3, #1
 800b62a:	6179      	str	r1, [r7, #20]
 800b62c:	4413      	add	r3, r2
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	2b20      	cmp	r3, #32
 800b636:	d100      	bne.n	800b63a <get_fileinfo+0x3a>
 800b638:	e015      	b.n	800b666 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	2b05      	cmp	r3, #5
 800b63e:	d101      	bne.n	800b644 <get_fileinfo+0x44>
 800b640:	23e5      	movs	r3, #229	; 0xe5
 800b642:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	2b09      	cmp	r3, #9
 800b648:	d106      	bne.n	800b658 <get_fileinfo+0x58>
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	613a      	str	r2, [r7, #16]
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	4413      	add	r3, r2
 800b654:	222e      	movs	r2, #46	; 0x2e
 800b656:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	613a      	str	r2, [r7, #16]
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	4413      	add	r3, r2
 800b662:	7bfa      	ldrb	r2, [r7, #15]
 800b664:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b0a      	cmp	r3, #10
 800b66a:	d9da      	bls.n	800b622 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	4413      	add	r3, r2
 800b672:	3309      	adds	r3, #9
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a1b      	ldr	r3, [r3, #32]
 800b67c:	7ada      	ldrb	r2, [r3, #11]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	331c      	adds	r3, #28
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fe fe7f 	bl	800a38c <ld_dword>
 800b68e:	4602      	mov	r2, r0
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	3316      	adds	r3, #22
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe fe76 	bl	800a38c <ld_dword>
 800b6a0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	80da      	strh	r2, [r3, #6]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	0c1b      	lsrs	r3, r3, #16
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	809a      	strh	r2, [r3, #4]
 800b6b4:	e000      	b.n	800b6b8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b6b6:	bf00      	nop
}
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b088      	sub	sp, #32
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3324      	adds	r3, #36	; 0x24
 800b6d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b6d6:	220b      	movs	r2, #11
 800b6d8:	2120      	movs	r1, #32
 800b6da:	68b8      	ldr	r0, [r7, #8]
 800b6dc:	f7fe fee1 	bl	800a4a2 <mem_set>
	si = i = 0; ni = 8;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	613b      	str	r3, [r7, #16]
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	617b      	str	r3, [r7, #20]
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	617a      	str	r2, [r7, #20]
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b6fa:	7ffb      	ldrb	r3, [r7, #31]
 800b6fc:	2b20      	cmp	r3, #32
 800b6fe:	d94e      	bls.n	800b79e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b700:	7ffb      	ldrb	r3, [r7, #31]
 800b702:	2b2f      	cmp	r3, #47	; 0x2f
 800b704:	d006      	beq.n	800b714 <create_name+0x54>
 800b706:	7ffb      	ldrb	r3, [r7, #31]
 800b708:	2b5c      	cmp	r3, #92	; 0x5c
 800b70a:	d110      	bne.n	800b72e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b70c:	e002      	b.n	800b714 <create_name+0x54>
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	3301      	adds	r3, #1
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	4413      	add	r3, r2
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b2f      	cmp	r3, #47	; 0x2f
 800b71e:	d0f6      	beq.n	800b70e <create_name+0x4e>
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	4413      	add	r3, r2
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b5c      	cmp	r3, #92	; 0x5c
 800b72a:	d0f0      	beq.n	800b70e <create_name+0x4e>
			break;
 800b72c:	e038      	b.n	800b7a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b72e:	7ffb      	ldrb	r3, [r7, #31]
 800b730:	2b2e      	cmp	r3, #46	; 0x2e
 800b732:	d003      	beq.n	800b73c <create_name+0x7c>
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d30c      	bcc.n	800b756 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	2b0b      	cmp	r3, #11
 800b740:	d002      	beq.n	800b748 <create_name+0x88>
 800b742:	7ffb      	ldrb	r3, [r7, #31]
 800b744:	2b2e      	cmp	r3, #46	; 0x2e
 800b746:	d001      	beq.n	800b74c <create_name+0x8c>
 800b748:	2306      	movs	r3, #6
 800b74a:	e044      	b.n	800b7d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b74c:	2308      	movs	r3, #8
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	230b      	movs	r3, #11
 800b752:	61bb      	str	r3, [r7, #24]
			continue;
 800b754:	e022      	b.n	800b79c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	da04      	bge.n	800b768 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b75e:	7ffb      	ldrb	r3, [r7, #31]
 800b760:	3b80      	subs	r3, #128	; 0x80
 800b762:	4a1f      	ldr	r2, [pc, #124]	; (800b7e0 <create_name+0x120>)
 800b764:	5cd3      	ldrb	r3, [r2, r3]
 800b766:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b768:	7ffb      	ldrb	r3, [r7, #31]
 800b76a:	4619      	mov	r1, r3
 800b76c:	481d      	ldr	r0, [pc, #116]	; (800b7e4 <create_name+0x124>)
 800b76e:	f7fe fed9 	bl	800a524 <chk_chr>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <create_name+0xbc>
 800b778:	2306      	movs	r3, #6
 800b77a:	e02c      	b.n	800b7d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b77c:	7ffb      	ldrb	r3, [r7, #31]
 800b77e:	2b60      	cmp	r3, #96	; 0x60
 800b780:	d905      	bls.n	800b78e <create_name+0xce>
 800b782:	7ffb      	ldrb	r3, [r7, #31]
 800b784:	2b7a      	cmp	r3, #122	; 0x7a
 800b786:	d802      	bhi.n	800b78e <create_name+0xce>
 800b788:	7ffb      	ldrb	r3, [r7, #31]
 800b78a:	3b20      	subs	r3, #32
 800b78c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	613a      	str	r2, [r7, #16]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	4413      	add	r3, r2
 800b798:	7ffa      	ldrb	r2, [r7, #31]
 800b79a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b79c:	e7a6      	b.n	800b6ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b79e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	441a      	add	r2, r3
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <create_name+0xf4>
 800b7b0:	2306      	movs	r3, #6
 800b7b2:	e010      	b.n	800b7d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2be5      	cmp	r3, #229	; 0xe5
 800b7ba:	d102      	bne.n	800b7c2 <create_name+0x102>
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2205      	movs	r2, #5
 800b7c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b7c2:	7ffb      	ldrb	r3, [r7, #31]
 800b7c4:	2b20      	cmp	r3, #32
 800b7c6:	d801      	bhi.n	800b7cc <create_name+0x10c>
 800b7c8:	2204      	movs	r2, #4
 800b7ca:	e000      	b.n	800b7ce <create_name+0x10e>
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	330b      	adds	r3, #11
 800b7d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b7d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3720      	adds	r7, #32
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	08010030 	.word	0x08010030
 800b7e4:	0800ffb8 	.word	0x0800ffb8

0800b7e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b7fc:	e002      	b.n	800b804 <follow_path+0x1c>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	3301      	adds	r3, #1
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b2f      	cmp	r3, #47	; 0x2f
 800b80a:	d0f8      	beq.n	800b7fe <follow_path+0x16>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	2b5c      	cmp	r3, #92	; 0x5c
 800b812:	d0f4      	beq.n	800b7fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	2200      	movs	r2, #0
 800b818:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b1f      	cmp	r3, #31
 800b820:	d80a      	bhi.n	800b838 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2280      	movs	r2, #128	; 0x80
 800b826:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b82a:	2100      	movs	r1, #0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff fc1e 	bl	800b06e <dir_sdi>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]
 800b836:	e048      	b.n	800b8ca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b838:	463b      	mov	r3, r7
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff ff3f 	bl	800b6c0 <create_name>
 800b842:	4603      	mov	r3, r0
 800b844:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d139      	bne.n	800b8c0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7ff fe50 	bl	800b4f2 <dir_find>
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b85c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00a      	beq.n	800b87a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	2b04      	cmp	r3, #4
 800b868:	d12c      	bne.n	800b8c4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	2b00      	cmp	r3, #0
 800b872:	d127      	bne.n	800b8c4 <follow_path+0xdc>
 800b874:	2305      	movs	r3, #5
 800b876:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b878:	e024      	b.n	800b8c4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	f003 0304 	and.w	r3, r3, #4
 800b880:	2b00      	cmp	r3, #0
 800b882:	d121      	bne.n	800b8c8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	799b      	ldrb	r3, [r3, #6]
 800b888:	f003 0310 	and.w	r3, r3, #16
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d102      	bne.n	800b896 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b890:	2305      	movs	r3, #5
 800b892:	75fb      	strb	r3, [r7, #23]
 800b894:	e019      	b.n	800b8ca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	695b      	ldr	r3, [r3, #20]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	8992      	ldrh	r2, [r2, #12]
 800b8a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8a8:	fb02 f200 	mul.w	r2, r2, r0
 800b8ac:	1a9b      	subs	r3, r3, r2
 800b8ae:	440b      	add	r3, r1
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f7ff fd81 	bl	800b3ba <ld_clust>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b8be:	e7bb      	b.n	800b838 <follow_path+0x50>
			if (res != FR_OK) break;
 800b8c0:	bf00      	nop
 800b8c2:	e002      	b.n	800b8ca <follow_path+0xe2>
				break;
 800b8c4:	bf00      	nop
 800b8c6:	e000      	b.n	800b8ca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b8c8:	bf00      	nop
			}
		}
	}

	return res;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d031      	beq.n	800b94e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	e002      	b.n	800b8f8 <get_ldnumber+0x24>
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b20      	cmp	r3, #32
 800b8fe:	d903      	bls.n	800b908 <get_ldnumber+0x34>
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2b3a      	cmp	r3, #58	; 0x3a
 800b906:	d1f4      	bne.n	800b8f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b3a      	cmp	r3, #58	; 0x3a
 800b90e:	d11c      	bne.n	800b94a <get_ldnumber+0x76>
			tp = *path;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	60fa      	str	r2, [r7, #12]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	3b30      	subs	r3, #48	; 0x30
 800b920:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2b09      	cmp	r3, #9
 800b926:	d80e      	bhi.n	800b946 <get_ldnumber+0x72>
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d10a      	bne.n	800b946 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d107      	bne.n	800b946 <get_ldnumber+0x72>
					vol = (int)i;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	3301      	adds	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	e002      	b.n	800b950 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b94a:	2300      	movs	r3, #0
 800b94c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b94e:	693b      	ldr	r3, [r7, #16]
}
 800b950:	4618      	mov	r0, r3
 800b952:	371c      	adds	r7, #28
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	70da      	strb	r2, [r3, #3]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b972:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7fe ffa0 	bl	800a8bc <move_window>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <check_fs+0x2a>
 800b982:	2304      	movs	r3, #4
 800b984:	e038      	b.n	800b9f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3334      	adds	r3, #52	; 0x34
 800b98a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe fce4 	bl	800a35c <ld_word>
 800b994:	4603      	mov	r3, r0
 800b996:	461a      	mov	r2, r3
 800b998:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d001      	beq.n	800b9a4 <check_fs+0x48>
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e029      	b.n	800b9f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9aa:	2be9      	cmp	r3, #233	; 0xe9
 800b9ac:	d009      	beq.n	800b9c2 <check_fs+0x66>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9b4:	2beb      	cmp	r3, #235	; 0xeb
 800b9b6:	d11e      	bne.n	800b9f6 <check_fs+0x9a>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b9be:	2b90      	cmp	r3, #144	; 0x90
 800b9c0:	d119      	bne.n	800b9f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	3334      	adds	r3, #52	; 0x34
 800b9c6:	3336      	adds	r3, #54	; 0x36
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fcdf 	bl	800a38c <ld_dword>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b9d4:	4a0a      	ldr	r2, [pc, #40]	; (800ba00 <check_fs+0xa4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d101      	bne.n	800b9de <check_fs+0x82>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	e00c      	b.n	800b9f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3334      	adds	r3, #52	; 0x34
 800b9e2:	3352      	adds	r3, #82	; 0x52
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fe fcd1 	bl	800a38c <ld_dword>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <check_fs+0xa8>)
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d101      	bne.n	800b9f6 <check_fs+0x9a>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e000      	b.n	800b9f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b9f6:	2302      	movs	r3, #2
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	00544146 	.word	0x00544146
 800ba04:	33544146 	.word	0x33544146

0800ba08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b096      	sub	sp, #88	; 0x58
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4613      	mov	r3, r2
 800ba14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7ff ff59 	bl	800b8d4 <get_ldnumber>
 800ba22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	da01      	bge.n	800ba2e <find_volume+0x26>
 800ba2a:	230b      	movs	r3, #11
 800ba2c:	e265      	b.n	800befa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ba2e:	4ab0      	ldr	r2, [pc, #704]	; (800bcf0 <find_volume+0x2e8>)
 800ba30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <find_volume+0x3a>
 800ba3e:	230c      	movs	r3, #12
 800ba40:	e25b      	b.n	800befa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ba48:	79fb      	ldrb	r3, [r7, #7]
 800ba4a:	f023 0301 	bic.w	r3, r3, #1
 800ba4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d01a      	beq.n	800ba8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ba58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5a:	785b      	ldrb	r3, [r3, #1]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fbdf 	bl	800a220 <disk_status>
 800ba62:	4603      	mov	r3, r0
 800ba64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ba68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10c      	bne.n	800ba8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <find_volume+0x82>
 800ba7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba7e:	f003 0304 	and.w	r3, r3, #4
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ba86:	230a      	movs	r3, #10
 800ba88:	e237      	b.n	800befa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e235      	b.n	800befa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba90:	2200      	movs	r2, #0
 800ba92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ba94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	785b      	ldrb	r3, [r3, #1]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe fbd7 	bl	800a254 <disk_initialize>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800baac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bab8:	2303      	movs	r3, #3
 800baba:	e21e      	b.n	800befa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800babc:	79fb      	ldrb	r3, [r7, #7]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <find_volume+0xca>
 800bac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bac6:	f003 0304 	and.w	r3, r3, #4
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bace:	230a      	movs	r3, #10
 800bad0:	e213      	b.n	800befa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	7858      	ldrb	r0, [r3, #1]
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	330c      	adds	r3, #12
 800bada:	461a      	mov	r2, r3
 800badc:	2102      	movs	r1, #2
 800bade:	f7fe fc1f 	bl	800a320 <disk_ioctl>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <find_volume+0xe4>
 800bae8:	2301      	movs	r3, #1
 800baea:	e206      	b.n	800befa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	899b      	ldrh	r3, [r3, #12]
 800baf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf4:	d80d      	bhi.n	800bb12 <find_volume+0x10a>
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	899b      	ldrh	r3, [r3, #12]
 800bafa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bafe:	d308      	bcc.n	800bb12 <find_volume+0x10a>
 800bb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb02:	899b      	ldrh	r3, [r3, #12]
 800bb04:	461a      	mov	r2, r3
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	899b      	ldrh	r3, [r3, #12]
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <find_volume+0x10e>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e1f1      	b.n	800befa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bb1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb1e:	f7ff ff1d 	bl	800b95c <check_fs>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bb28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d14b      	bne.n	800bbc8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bb30:	2300      	movs	r3, #0
 800bb32:	643b      	str	r3, [r7, #64]	; 0x40
 800bb34:	e01f      	b.n	800bb76 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bb44:	4413      	add	r3, r2
 800bb46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d006      	beq.n	800bb60 <find_volume+0x158>
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	3308      	adds	r3, #8
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe fc18 	bl	800a38c <ld_dword>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	e000      	b.n	800bb62 <find_volume+0x15a>
 800bb60:	2200      	movs	r2, #0
 800bb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bb6a:	440b      	add	r3, r1
 800bb6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bb70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb72:	3301      	adds	r3, #1
 800bb74:	643b      	str	r3, [r7, #64]	; 0x40
 800bb76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d9dc      	bls.n	800bb36 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bb80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <find_volume+0x184>
 800bb86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bb8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bb94:	4413      	add	r3, r2
 800bb96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bb9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bb9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d005      	beq.n	800bbae <find_volume+0x1a6>
 800bba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bba6:	f7ff fed9 	bl	800b95c <check_fs>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	e000      	b.n	800bbb0 <find_volume+0x1a8>
 800bbae:	2303      	movs	r3, #3
 800bbb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bbb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d905      	bls.n	800bbc8 <find_volume+0x1c0>
 800bbbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	643b      	str	r3, [r7, #64]	; 0x40
 800bbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d9e1      	bls.n	800bb8c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bbc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	d101      	bne.n	800bbd4 <find_volume+0x1cc>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e192      	b.n	800befa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bbd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d901      	bls.n	800bbe0 <find_volume+0x1d8>
 800bbdc:	230d      	movs	r3, #13
 800bbde:	e18c      	b.n	800befa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	3334      	adds	r3, #52	; 0x34
 800bbe4:	330b      	adds	r3, #11
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fe fbb8 	bl	800a35c <ld_word>
 800bbec:	4603      	mov	r3, r0
 800bbee:	461a      	mov	r2, r3
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	899b      	ldrh	r3, [r3, #12]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d001      	beq.n	800bbfc <find_volume+0x1f4>
 800bbf8:	230d      	movs	r3, #13
 800bbfa:	e17e      	b.n	800befa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	3334      	adds	r3, #52	; 0x34
 800bc00:	3316      	adds	r3, #22
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe fbaa 	bl	800a35c <ld_word>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <find_volume+0x218>
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	3334      	adds	r3, #52	; 0x34
 800bc16:	3324      	adds	r3, #36	; 0x24
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe fbb7 	bl	800a38c <ld_dword>
 800bc1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc24:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc28:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	789b      	ldrb	r3, [r3, #2]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d005      	beq.n	800bc44 <find_volume+0x23c>
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	789b      	ldrb	r3, [r3, #2]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d001      	beq.n	800bc44 <find_volume+0x23c>
 800bc40:	230d      	movs	r3, #13
 800bc42:	e15a      	b.n	800befa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	789b      	ldrb	r3, [r3, #2]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4c:	fb02 f303 	mul.w	r3, r2, r3
 800bc50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc60:	895b      	ldrh	r3, [r3, #10]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d008      	beq.n	800bc78 <find_volume+0x270>
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	895b      	ldrh	r3, [r3, #10]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	895b      	ldrh	r3, [r3, #10]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	4013      	ands	r3, r2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <find_volume+0x274>
 800bc78:	230d      	movs	r3, #13
 800bc7a:	e13e      	b.n	800befa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	3334      	adds	r3, #52	; 0x34
 800bc80:	3311      	adds	r3, #17
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fe fb6a 	bl	800a35c <ld_word>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc92:	891b      	ldrh	r3, [r3, #8]
 800bc94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc96:	8992      	ldrh	r2, [r2, #12]
 800bc98:	0952      	lsrs	r2, r2, #5
 800bc9a:	b292      	uxth	r2, r2
 800bc9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bca0:	fb02 f201 	mul.w	r2, r2, r1
 800bca4:	1a9b      	subs	r3, r3, r2
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <find_volume+0x2a8>
 800bcac:	230d      	movs	r3, #13
 800bcae:	e124      	b.n	800befa <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	3334      	adds	r3, #52	; 0x34
 800bcb4:	3313      	adds	r3, #19
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe fb50 	bl	800a35c <ld_word>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bcc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d106      	bne.n	800bcd4 <find_volume+0x2cc>
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	3334      	adds	r3, #52	; 0x34
 800bcca:	3320      	adds	r3, #32
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fb5d 	bl	800a38c <ld_dword>
 800bcd2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	3334      	adds	r3, #52	; 0x34
 800bcd8:	330e      	adds	r3, #14
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fe fb3e 	bl	800a35c <ld_word>
 800bce0:	4603      	mov	r3, r0
 800bce2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d104      	bne.n	800bcf4 <find_volume+0x2ec>
 800bcea:	230d      	movs	r3, #13
 800bcec:	e105      	b.n	800befa <find_volume+0x4f2>
 800bcee:	bf00      	nop
 800bcf0:	20000368 	.word	0x20000368

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bcf4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf8:	4413      	add	r3, r2
 800bcfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcfc:	8911      	ldrh	r1, [r2, #8]
 800bcfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd00:	8992      	ldrh	r2, [r2, #12]
 800bd02:	0952      	lsrs	r2, r2, #5
 800bd04:	b292      	uxth	r2, r2
 800bd06:	fbb1 f2f2 	udiv	r2, r1, r2
 800bd0a:	b292      	uxth	r2, r2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bd10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d201      	bcs.n	800bd1c <find_volume+0x314>
 800bd18:	230d      	movs	r3, #13
 800bd1a:	e0ee      	b.n	800befa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bd1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd24:	8952      	ldrh	r2, [r2, #10]
 800bd26:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd2a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <find_volume+0x32e>
 800bd32:	230d      	movs	r3, #13
 800bd34:	e0e1      	b.n	800befa <find_volume+0x4f2>
		fmt = FS_FAT32;
 800bd36:	2303      	movs	r3, #3
 800bd38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d802      	bhi.n	800bd4c <find_volume+0x344>
 800bd46:	2302      	movs	r3, #2
 800bd48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d802      	bhi.n	800bd5c <find_volume+0x354>
 800bd56:	2301      	movs	r3, #1
 800bd58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	1c9a      	adds	r2, r3, #2
 800bd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd62:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd68:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bd6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd6e:	441a      	add	r2, r3
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bd74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	441a      	add	r2, r3
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bd7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d11e      	bne.n	800bdc4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd88:	3334      	adds	r3, #52	; 0x34
 800bd8a:	332a      	adds	r3, #42	; 0x2a
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe fae5 	bl	800a35c <ld_word>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <find_volume+0x394>
 800bd98:	230d      	movs	r3, #13
 800bd9a:	e0ae      	b.n	800befa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	891b      	ldrh	r3, [r3, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <find_volume+0x3a0>
 800bda4:	230d      	movs	r3, #13
 800bda6:	e0a8      	b.n	800befa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdaa:	3334      	adds	r3, #52	; 0x34
 800bdac:	332c      	adds	r3, #44	; 0x2c
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fe faec 	bl	800a38c <ld_dword>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc2:	e01f      	b.n	800be04 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	891b      	ldrh	r3, [r3, #8]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <find_volume+0x3c8>
 800bdcc:	230d      	movs	r3, #13
 800bdce:	e094      	b.n	800befa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd6:	441a      	add	r2, r3
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d103      	bne.n	800bdec <find_volume+0x3e4>
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	e00a      	b.n	800be02 <find_volume+0x3fa>
 800bdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdee:	699a      	ldr	r2, [r3, #24]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	4413      	add	r3, r2
 800bdf6:	085a      	lsrs	r2, r3, #1
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800be02:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	69da      	ldr	r2, [r3, #28]
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	899b      	ldrh	r3, [r3, #12]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be10:	440b      	add	r3, r1
 800be12:	3b01      	subs	r3, #1
 800be14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be16:	8989      	ldrh	r1, [r1, #12]
 800be18:	fbb3 f3f1 	udiv	r3, r3, r1
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d201      	bcs.n	800be24 <find_volume+0x41c>
 800be20:	230d      	movs	r3, #13
 800be22:	e06a      	b.n	800befa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800be24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be2a:	615a      	str	r2, [r3, #20]
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	695a      	ldr	r2, [r3, #20]
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800be34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be36:	2280      	movs	r2, #128	; 0x80
 800be38:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800be3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d149      	bne.n	800bed6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	3334      	adds	r3, #52	; 0x34
 800be46:	3330      	adds	r3, #48	; 0x30
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fa87 	bl	800a35c <ld_word>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b01      	cmp	r3, #1
 800be52:	d140      	bne.n	800bed6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800be54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be56:	3301      	adds	r3, #1
 800be58:	4619      	mov	r1, r3
 800be5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be5c:	f7fe fd2e 	bl	800a8bc <move_window>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d137      	bne.n	800bed6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	2200      	movs	r2, #0
 800be6a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800be6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6e:	3334      	adds	r3, #52	; 0x34
 800be70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fa71 	bl	800a35c <ld_word>
 800be7a:	4603      	mov	r3, r0
 800be7c:	461a      	mov	r2, r3
 800be7e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be82:	429a      	cmp	r2, r3
 800be84:	d127      	bne.n	800bed6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	3334      	adds	r3, #52	; 0x34
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe fa7e 	bl	800a38c <ld_dword>
 800be90:	4602      	mov	r2, r0
 800be92:	4b1c      	ldr	r3, [pc, #112]	; (800bf04 <find_volume+0x4fc>)
 800be94:	429a      	cmp	r2, r3
 800be96:	d11e      	bne.n	800bed6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	3334      	adds	r3, #52	; 0x34
 800be9c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fe fa73 	bl	800a38c <ld_dword>
 800bea6:	4602      	mov	r2, r0
 800bea8:	4b17      	ldr	r3, [pc, #92]	; (800bf08 <find_volume+0x500>)
 800beaa:	429a      	cmp	r2, r3
 800beac:	d113      	bne.n	800bed6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	3334      	adds	r3, #52	; 0x34
 800beb2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fa68 	bl	800a38c <ld_dword>
 800bebc:	4602      	mov	r2, r0
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec4:	3334      	adds	r3, #52	; 0x34
 800bec6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fa5e 	bl	800a38c <ld_dword>
 800bed0:	4602      	mov	r2, r0
 800bed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bedc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bede:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <find_volume+0x504>)
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	3301      	adds	r3, #1
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	4b09      	ldr	r3, [pc, #36]	; (800bf0c <find_volume+0x504>)
 800bee8:	801a      	strh	r2, [r3, #0]
 800beea:	4b08      	ldr	r3, [pc, #32]	; (800bf0c <find_volume+0x504>)
 800beec:	881a      	ldrh	r2, [r3, #0]
 800beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bef2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bef4:	f7fe fc7a 	bl	800a7ec <clear_lock>
#endif
	return FR_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3758      	adds	r7, #88	; 0x58
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	41615252 	.word	0x41615252
 800bf08:	61417272 	.word	0x61417272
 800bf0c:	2000036c 	.word	0x2000036c

0800bf10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bf1a:	2309      	movs	r3, #9
 800bf1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01c      	beq.n	800bf5e <validate+0x4e>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d018      	beq.n	800bf5e <validate+0x4e>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d013      	beq.n	800bf5e <validate+0x4e>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	889a      	ldrh	r2, [r3, #4]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	88db      	ldrh	r3, [r3, #6]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d10c      	bne.n	800bf5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	785b      	ldrb	r3, [r3, #1]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe f968 	bl	800a220 <disk_status>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <validate+0x4e>
			res = FR_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <validate+0x5a>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	e000      	b.n	800bf6c <validate+0x5c>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	6013      	str	r3, [r2, #0]
	return res;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	4613      	mov	r3, r2
 800bf88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bf8e:	f107 0310 	add.w	r3, r7, #16
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff fc9e 	bl	800b8d4 <get_ldnumber>
 800bf98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da01      	bge.n	800bfa4 <f_mount+0x28>
 800bfa0:	230b      	movs	r3, #11
 800bfa2:	e02b      	b.n	800bffc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bfa4:	4a17      	ldr	r2, [pc, #92]	; (800c004 <f_mount+0x88>)
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d005      	beq.n	800bfc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bfb4:	69b8      	ldr	r0, [r7, #24]
 800bfb6:	f7fe fc19 	bl	800a7ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	490d      	ldr	r1, [pc, #52]	; (800c004 <f_mount+0x88>)
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <f_mount+0x66>
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d001      	beq.n	800bfe6 <f_mount+0x6a>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e00a      	b.n	800bffc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bfe6:	f107 010c 	add.w	r1, r7, #12
 800bfea:	f107 0308 	add.w	r3, r7, #8
 800bfee:	2200      	movs	r2, #0
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fd09 	bl	800ba08 <find_volume>
 800bff6:	4603      	mov	r3, r0
 800bff8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20000368 	.word	0x20000368

0800c008 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b098      	sub	sp, #96	; 0x60
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	4613      	mov	r3, r2
 800c014:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d101      	bne.n	800c020 <f_open+0x18>
 800c01c:	2309      	movs	r3, #9
 800c01e:	e1bb      	b.n	800c398 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c020:	79fb      	ldrb	r3, [r7, #7]
 800c022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c026:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c028:	79fa      	ldrb	r2, [r7, #7]
 800c02a:	f107 0110 	add.w	r1, r7, #16
 800c02e:	f107 0308 	add.w	r3, r7, #8
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff fce8 	bl	800ba08 <find_volume>
 800c038:	4603      	mov	r3, r0
 800c03a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c03e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c042:	2b00      	cmp	r3, #0
 800c044:	f040 819f 	bne.w	800c386 <f_open+0x37e>
		dj.obj.fs = fs;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	f107 0314 	add.w	r3, r7, #20
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff fbc7 	bl	800b7e8 <follow_path>
 800c05a:	4603      	mov	r3, r0
 800c05c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c064:	2b00      	cmp	r3, #0
 800c066:	d11a      	bne.n	800c09e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c068:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c06c:	b25b      	sxtb	r3, r3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	da03      	bge.n	800c07a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c072:	2306      	movs	r3, #6
 800c074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c078:	e011      	b.n	800c09e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c07a:	79fb      	ldrb	r3, [r7, #7]
 800c07c:	f023 0301 	bic.w	r3, r3, #1
 800c080:	2b00      	cmp	r3, #0
 800c082:	bf14      	ite	ne
 800c084:	2301      	movne	r3, #1
 800c086:	2300      	moveq	r3, #0
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	461a      	mov	r2, r3
 800c08c:	f107 0314 	add.w	r3, r7, #20
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fa62 	bl	800a55c <chk_lock>
 800c098:	4603      	mov	r3, r0
 800c09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c09e:	79fb      	ldrb	r3, [r7, #7]
 800c0a0:	f003 031c 	and.w	r3, r3, #28
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d07f      	beq.n	800c1a8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c0a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d017      	beq.n	800c0e0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c0b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0b4:	2b04      	cmp	r3, #4
 800c0b6:	d10e      	bne.n	800c0d6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c0b8:	f7fe faac 	bl	800a614 <enq_lock>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d006      	beq.n	800c0d0 <f_open+0xc8>
 800c0c2:	f107 0314 	add.w	r3, r7, #20
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff fa68 	bl	800b59c <dir_register>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	e000      	b.n	800c0d2 <f_open+0xca>
 800c0d0:	2312      	movs	r3, #18
 800c0d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c0d6:	79fb      	ldrb	r3, [r7, #7]
 800c0d8:	f043 0308 	orr.w	r3, r3, #8
 800c0dc:	71fb      	strb	r3, [r7, #7]
 800c0de:	e010      	b.n	800c102 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c0e0:	7ebb      	ldrb	r3, [r7, #26]
 800c0e2:	f003 0311 	and.w	r3, r3, #17
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <f_open+0xea>
					res = FR_DENIED;
 800c0ea:	2307      	movs	r3, #7
 800c0ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c0f0:	e007      	b.n	800c102 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <f_open+0xfa>
 800c0fc:	2308      	movs	r3, #8
 800c0fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c102:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c106:	2b00      	cmp	r3, #0
 800c108:	d168      	bne.n	800c1dc <f_open+0x1d4>
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	f003 0308 	and.w	r3, r3, #8
 800c110:	2b00      	cmp	r3, #0
 800c112:	d063      	beq.n	800c1dc <f_open+0x1d4>
				dw = GET_FATTIME();
 800c114:	f7fd fe32 	bl	8009d7c <get_fattime>
 800c118:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11c:	330e      	adds	r3, #14
 800c11e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c120:	4618      	mov	r0, r3
 800c122:	f7fe f971 	bl	800a408 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c128:	3316      	adds	r3, #22
 800c12a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe f96b 	bl	800a408 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	330b      	adds	r3, #11
 800c136:	2220      	movs	r2, #32
 800c138:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff f93a 	bl	800b3ba <ld_clust>
 800c146:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c14c:	2200      	movs	r2, #0
 800c14e:	4618      	mov	r0, r3
 800c150:	f7ff f952 	bl	800b3f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c156:	331c      	adds	r3, #28
 800c158:	2100      	movs	r1, #0
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe f954 	bl	800a408 <st_dword>
					fs->wflag = 1;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	2201      	movs	r2, #1
 800c164:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d037      	beq.n	800c1dc <f_open+0x1d4>
						dw = fs->winsect;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c170:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c172:	f107 0314 	add.w	r3, r7, #20
 800c176:	2200      	movs	r2, #0
 800c178:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fe42 	bl	800ae04 <remove_chain>
 800c180:	4603      	mov	r3, r0
 800c182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d126      	bne.n	800c1dc <f_open+0x1d4>
							res = move_window(fs, dw);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe fb92 	bl	800a8bc <move_window>
 800c198:	4603      	mov	r3, r0
 800c19a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1a2:	3a01      	subs	r2, #1
 800c1a4:	611a      	str	r2, [r3, #16]
 800c1a6:	e019      	b.n	800c1dc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c1a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d115      	bne.n	800c1dc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c1b0:	7ebb      	ldrb	r3, [r7, #26]
 800c1b2:	f003 0310 	and.w	r3, r3, #16
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c1ba:	2304      	movs	r3, #4
 800c1bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c1c0:	e00c      	b.n	800c1dc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	f003 0302 	and.w	r3, r3, #2
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <f_open+0x1d4>
 800c1cc:	7ebb      	ldrb	r3, [r7, #26]
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d002      	beq.n	800c1dc <f_open+0x1d4>
						res = FR_DENIED;
 800c1d6:	2307      	movs	r3, #7
 800c1d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c1dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d128      	bne.n	800c236 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c1e4:	79fb      	ldrb	r3, [r7, #7]
 800c1e6:	f003 0308 	and.w	r3, r3, #8
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d003      	beq.n	800c1f6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c204:	79fb      	ldrb	r3, [r7, #7]
 800c206:	f023 0301 	bic.w	r3, r3, #1
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	bf14      	ite	ne
 800c20e:	2301      	movne	r3, #1
 800c210:	2300      	moveq	r3, #0
 800c212:	b2db      	uxtb	r3, r3
 800c214:	461a      	mov	r2, r3
 800c216:	f107 0314 	add.w	r3, r7, #20
 800c21a:	4611      	mov	r1, r2
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fe fa1b 	bl	800a658 <inc_lock>
 800c222:	4602      	mov	r2, r0
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d102      	bne.n	800c236 <f_open+0x22e>
 800c230:	2302      	movs	r3, #2
 800c232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f040 80a3 	bne.w	800c386 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c244:	4611      	mov	r1, r2
 800c246:	4618      	mov	r0, r3
 800c248:	f7ff f8b7 	bl	800b3ba <ld_clust>
 800c24c:	4602      	mov	r2, r0
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	331c      	adds	r3, #28
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe f898 	bl	800a38c <ld_dword>
 800c25c:	4602      	mov	r2, r0
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	88da      	ldrh	r2, [r3, #6]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	79fa      	ldrb	r2, [r7, #7]
 800c27a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3330      	adds	r3, #48	; 0x30
 800c292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c296:	2100      	movs	r1, #0
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fe f902 	bl	800a4a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	f003 0320 	and.w	r3, r3, #32
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d06e      	beq.n	800c386 <f_open+0x37e>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d06a      	beq.n	800c386 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	68da      	ldr	r2, [r3, #12]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	895b      	ldrh	r3, [r3, #10]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	899b      	ldrh	r3, [r3, #12]
 800c2c2:	fb03 f302 	mul.w	r3, r3, r2
 800c2c6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	657b      	str	r3, [r7, #84]	; 0x54
 800c2d4:	e016      	b.n	800c304 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fe fbab 	bl	800aa36 <get_fat>
 800c2e0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c2e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d802      	bhi.n	800c2ee <f_open+0x2e6>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2f4:	d102      	bne.n	800c2fc <f_open+0x2f4>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c2fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	657b      	str	r3, [r7, #84]	; 0x54
 800c304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d103      	bne.n	800c314 <f_open+0x30c>
 800c30c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c30e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c310:	429a      	cmp	r2, r3
 800c312:	d8e0      	bhi.n	800c2d6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c318:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c31a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d131      	bne.n	800c386 <f_open+0x37e>
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	899b      	ldrh	r3, [r3, #12]
 800c326:	461a      	mov	r2, r3
 800c328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c32a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c32e:	fb02 f201 	mul.w	r2, r2, r1
 800c332:	1a9b      	subs	r3, r3, r2
 800c334:	2b00      	cmp	r3, #0
 800c336:	d026      	beq.n	800c386 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fe fb5b 	bl	800a9f8 <clust2sect>
 800c342:	6478      	str	r0, [r7, #68]	; 0x44
 800c344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c346:	2b00      	cmp	r3, #0
 800c348:	d103      	bne.n	800c352 <f_open+0x34a>
						res = FR_INT_ERR;
 800c34a:	2302      	movs	r3, #2
 800c34c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c350:	e019      	b.n	800c386 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	899b      	ldrh	r3, [r3, #12]
 800c356:	461a      	mov	r2, r3
 800c358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c35a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c360:	441a      	add	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	7858      	ldrb	r0, [r3, #1]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6a1a      	ldr	r2, [r3, #32]
 800c374:	2301      	movs	r3, #1
 800c376:	f7fd ff93 	bl	800a2a0 <disk_read>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <f_open+0x37e>
 800c380:	2301      	movs	r3, #1
 800c382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <f_open+0x38c>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3760      	adds	r7, #96	; 0x60
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08c      	sub	sp, #48	; 0x30
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f107 0210 	add.w	r2, r7, #16
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff fda5 	bl	800bf10 <validate>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c3cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d107      	bne.n	800c3e4 <f_write+0x44>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	7d5b      	ldrb	r3, [r3, #21]
 800c3d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c3dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <f_write+0x4a>
 800c3e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3e8:	e16a      	b.n	800c6c0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	7d1b      	ldrb	r3, [r3, #20]
 800c3ee:	f003 0302 	and.w	r3, r3, #2
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <f_write+0x5a>
 800c3f6:	2307      	movs	r3, #7
 800c3f8:	e162      	b.n	800c6c0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	699a      	ldr	r2, [r3, #24]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	441a      	add	r2, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	429a      	cmp	r2, r3
 800c408:	f080 814c 	bcs.w	800c6a4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	43db      	mvns	r3, r3
 800c412:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c414:	e146      	b.n	800c6a4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	8992      	ldrh	r2, [r2, #12]
 800c41e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c422:	fb02 f201 	mul.w	r2, r2, r1
 800c426:	1a9b      	subs	r3, r3, r2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f040 80f1 	bne.w	800c610 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	8992      	ldrh	r2, [r2, #12]
 800c436:	fbb3 f3f2 	udiv	r3, r3, r2
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	8952      	ldrh	r2, [r2, #10]
 800c43e:	3a01      	subs	r2, #1
 800c440:	4013      	ands	r3, r2
 800c442:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d143      	bne.n	800c4d2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10c      	bne.n	800c46c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d11a      	bne.n	800c494 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2100      	movs	r1, #0
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe fd33 	bl	800aece <create_chain>
 800c468:	62b8      	str	r0, [r7, #40]	; 0x28
 800c46a:	e013      	b.n	800c494 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d007      	beq.n	800c484 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	4619      	mov	r1, r3
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f7fe fdbf 	bl	800affe <clmt_clust>
 800c480:	62b8      	str	r0, [r7, #40]	; 0x28
 800c482:	e007      	b.n	800c494 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	4619      	mov	r1, r3
 800c48c:	4610      	mov	r0, r2
 800c48e:	f7fe fd1e 	bl	800aece <create_chain>
 800c492:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 8109 	beq.w	800c6ae <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d104      	bne.n	800c4ac <f_write+0x10c>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	755a      	strb	r2, [r3, #21]
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e109      	b.n	800c6c0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b2:	d104      	bne.n	800c4be <f_write+0x11e>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	755a      	strb	r2, [r3, #21]
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e100      	b.n	800c6c0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <f_write+0x132>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	7d1b      	ldrb	r3, [r3, #20]
 800c4d6:	b25b      	sxtb	r3, r3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	da18      	bge.n	800c50e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	7858      	ldrb	r0, [r3, #1]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6a1a      	ldr	r2, [r3, #32]
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	f7fd fef8 	bl	800a2e0 <disk_write>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d004      	beq.n	800c500 <f_write+0x160>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	755a      	strb	r2, [r3, #21]
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e0df      	b.n	800c6c0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	7d1b      	ldrb	r3, [r3, #20]
 800c504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	69db      	ldr	r3, [r3, #28]
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f7fe fa6e 	bl	800a9f8 <clust2sect>
 800c51c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d104      	bne.n	800c52e <f_write+0x18e>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2202      	movs	r2, #2
 800c528:	755a      	strb	r2, [r3, #21]
 800c52a:	2302      	movs	r3, #2
 800c52c:	e0c8      	b.n	800c6c0 <f_write+0x320>
			sect += csect;
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	4413      	add	r3, r2
 800c534:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	899b      	ldrh	r3, [r3, #12]
 800c53a:	461a      	mov	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c542:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d043      	beq.n	800c5d2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	4413      	add	r3, r2
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	8952      	ldrh	r2, [r2, #10]
 800c554:	4293      	cmp	r3, r2
 800c556:	d905      	bls.n	800c564 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	895b      	ldrh	r3, [r3, #10]
 800c55c:	461a      	mov	r2, r3
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	7858      	ldrb	r0, [r3, #1]
 800c568:	6a3b      	ldr	r3, [r7, #32]
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	69f9      	ldr	r1, [r7, #28]
 800c56e:	f7fd feb7 	bl	800a2e0 <disk_write>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <f_write+0x1e2>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2201      	movs	r2, #1
 800c57c:	755a      	strb	r2, [r3, #21]
 800c57e:	2301      	movs	r3, #1
 800c580:	e09e      	b.n	800c6c0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6a1a      	ldr	r2, [r3, #32]
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	6a3a      	ldr	r2, [r7, #32]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d918      	bls.n	800c5c2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1a      	ldr	r2, [r3, #32]
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	8992      	ldrh	r2, [r2, #12]
 800c5a2:	fb02 f303 	mul.w	r3, r2, r3
 800c5a6:	69fa      	ldr	r2, [r7, #28]
 800c5a8:	18d1      	adds	r1, r2, r3
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	899b      	ldrh	r3, [r3, #12]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f7fd ff56 	bl	800a460 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	7d1b      	ldrb	r3, [r3, #20]
 800c5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	899b      	ldrh	r3, [r3, #12]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	fb02 f303 	mul.w	r3, r2, r3
 800c5ce:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c5d0:	e04b      	b.n	800c66a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d016      	beq.n	800c60a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	699a      	ldr	r2, [r3, #24]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d210      	bcs.n	800c60a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	7858      	ldrb	r0, [r3, #1]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	f7fd fe53 	bl	800a2a0 <disk_read>
 800c5fa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d004      	beq.n	800c60a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2201      	movs	r2, #1
 800c604:	755a      	strb	r2, [r3, #21]
 800c606:	2301      	movs	r3, #1
 800c608:	e05a      	b.n	800c6c0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	899b      	ldrh	r3, [r3, #12]
 800c614:	4618      	mov	r0, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	693a      	ldr	r2, [r7, #16]
 800c61c:	8992      	ldrh	r2, [r2, #12]
 800c61e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c622:	fb02 f201 	mul.w	r2, r2, r1
 800c626:	1a9b      	subs	r3, r3, r2
 800c628:	1ac3      	subs	r3, r0, r3
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	429a      	cmp	r2, r3
 800c632:	d901      	bls.n	800c638 <f_write+0x298>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	8992      	ldrh	r2, [r2, #12]
 800c646:	fbb3 f0f2 	udiv	r0, r3, r2
 800c64a:	fb02 f200 	mul.w	r2, r2, r0
 800c64e:	1a9b      	subs	r3, r3, r2
 800c650:	440b      	add	r3, r1
 800c652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c654:	69f9      	ldr	r1, [r7, #28]
 800c656:	4618      	mov	r0, r3
 800c658:	f7fd ff02 	bl	800a460 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	7d1b      	ldrb	r3, [r3, #20]
 800c660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c664:	b2da      	uxtb	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	4413      	add	r3, r2
 800c670:	61fb      	str	r3, [r7, #28]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	699a      	ldr	r2, [r3, #24]
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	441a      	add	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	619a      	str	r2, [r3, #24]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	429a      	cmp	r2, r3
 800c688:	bf38      	it	cc
 800c68a:	461a      	movcc	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	60da      	str	r2, [r3, #12]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	441a      	add	r2, r3
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f47f aeb5 	bne.w	800c416 <f_write+0x76>
 800c6ac:	e000      	b.n	800c6b0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c6ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	7d1b      	ldrb	r3, [r3, #20]
 800c6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3730      	adds	r7, #48	; 0x30
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f107 0208 	add.w	r2, r7, #8
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff fc19 	bl	800bf10 <validate>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d168      	bne.n	800c7ba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	7d1b      	ldrb	r3, [r3, #20]
 800c6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d062      	beq.n	800c7ba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	7d1b      	ldrb	r3, [r3, #20]
 800c6f8:	b25b      	sxtb	r3, r3
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da15      	bge.n	800c72a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	7858      	ldrb	r0, [r3, #1]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a1a      	ldr	r2, [r3, #32]
 800c70c:	2301      	movs	r3, #1
 800c70e:	f7fd fde7 	bl	800a2e0 <disk_write>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <f_sync+0x54>
 800c718:	2301      	movs	r3, #1
 800c71a:	e04f      	b.n	800c7bc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	7d1b      	ldrb	r3, [r3, #20]
 800c720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c724:	b2da      	uxtb	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c72a:	f7fd fb27 	bl	8009d7c <get_fattime>
 800c72e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c736:	4619      	mov	r1, r3
 800c738:	4610      	mov	r0, r2
 800c73a:	f7fe f8bf 	bl	800a8bc <move_window>
 800c73e:	4603      	mov	r3, r0
 800c740:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d138      	bne.n	800c7ba <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	330b      	adds	r3, #11
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	330b      	adds	r3, #11
 800c758:	f042 0220 	orr.w	r2, r2, #32
 800c75c:	b2d2      	uxtb	r2, r2
 800c75e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6818      	ldr	r0, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	461a      	mov	r2, r3
 800c76a:	68f9      	ldr	r1, [r7, #12]
 800c76c:	f7fe fe44 	bl	800b3f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f103 021c 	add.w	r2, r3, #28
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	4619      	mov	r1, r3
 800c77c:	4610      	mov	r0, r2
 800c77e:	f7fd fe43 	bl	800a408 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3316      	adds	r3, #22
 800c786:	6939      	ldr	r1, [r7, #16]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fd fe3d 	bl	800a408 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3312      	adds	r3, #18
 800c792:	2100      	movs	r1, #0
 800c794:	4618      	mov	r0, r3
 800c796:	f7fd fe1c 	bl	800a3d2 <st_word>
					fs->wflag = 1;
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	2201      	movs	r2, #1
 800c79e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe f8b8 	bl	800a918 <sync_fs>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7d1b      	ldrb	r3, [r3, #20]
 800c7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff ff7b 	bl	800c6c8 <f_sync>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d118      	bne.n	800c80e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f107 0208 	add.w	r2, r7, #8
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7ff fb93 	bl	800bf10 <validate>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10c      	bne.n	800c80e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fd ffbb 	bl	800a774 <dec_lock>
 800c7fe:	4603      	mov	r3, r0
 800c800:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c802:	7bfb      	ldrb	r3, [r7, #15]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d102      	bne.n	800c80e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b090      	sub	sp, #64	; 0x40
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f107 0208 	add.w	r2, r7, #8
 800c828:	4611      	mov	r1, r2
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff fb70 	bl	800bf10 <validate>
 800c830:	4603      	mov	r3, r0
 800c832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c836:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d103      	bne.n	800c846 <f_lseek+0x2e>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	7d5b      	ldrb	r3, [r3, #21]
 800c842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <f_lseek+0x3c>
 800c84e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c852:	e201      	b.n	800cc58 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f000 80d9 	beq.w	800ca10 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c864:	d15a      	bne.n	800c91c <f_lseek+0x104>
			tbl = fp->cltbl;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	1d1a      	adds	r2, r3, #4
 800c870:	627a      	str	r2, [r7, #36]	; 0x24
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	617b      	str	r3, [r7, #20]
 800c876:	2302      	movs	r3, #2
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c882:	2b00      	cmp	r3, #0
 800c884:	d03a      	beq.n	800c8fc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c888:	613b      	str	r3, [r7, #16]
 800c88a:	2300      	movs	r3, #0
 800c88c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c890:	3302      	adds	r3, #2
 800c892:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	3301      	adds	r3, #1
 800c89c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe f8c7 	bl	800aa36 <get_fat>
 800c8a8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d804      	bhi.n	800c8ba <f_lseek+0xa2>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	755a      	strb	r2, [r3, #21]
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	e1ce      	b.n	800cc58 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8c0:	d104      	bne.n	800c8cc <f_lseek+0xb4>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	755a      	strb	r2, [r3, #21]
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e1c5      	b.n	800cc58 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d0de      	beq.n	800c894 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d809      	bhi.n	800c8f2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e0:	1d1a      	adds	r2, r3, #4
 800c8e2:	627a      	str	r2, [r7, #36]	; 0x24
 800c8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	1d1a      	adds	r2, r3, #4
 800c8ec:	627a      	str	r2, [r7, #36]	; 0x24
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d3c4      	bcc.n	800c886 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c902:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d803      	bhi.n	800c914 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	e19f      	b.n	800cc54 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c914:	2311      	movs	r3, #17
 800c916:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c91a:	e19b      	b.n	800cc54 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	429a      	cmp	r2, r3
 800c924:	d902      	bls.n	800c92c <f_lseek+0x114>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 818d 	beq.w	800cc54 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7fe fb5c 	bl	800affe <clmt_clust>
 800c946:	4602      	mov	r2, r0
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	69db      	ldr	r3, [r3, #28]
 800c952:	4619      	mov	r1, r3
 800c954:	4610      	mov	r0, r2
 800c956:	f7fe f84f 	bl	800a9f8 <clust2sect>
 800c95a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <f_lseek+0x154>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2202      	movs	r2, #2
 800c966:	755a      	strb	r2, [r3, #21]
 800c968:	2302      	movs	r3, #2
 800c96a:	e175      	b.n	800cc58 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	3b01      	subs	r3, #1
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	8992      	ldrh	r2, [r2, #12]
 800c974:	fbb3 f3f2 	udiv	r3, r3, r2
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	8952      	ldrh	r2, [r2, #10]
 800c97c:	3a01      	subs	r2, #1
 800c97e:	4013      	ands	r3, r2
 800c980:	69ba      	ldr	r2, [r7, #24]
 800c982:	4413      	add	r3, r2
 800c984:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	8992      	ldrh	r2, [r2, #12]
 800c98e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c992:	fb02 f201 	mul.w	r2, r2, r1
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 815b 	beq.w	800cc54 <f_lseek+0x43c>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	f000 8155 	beq.w	800cc54 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	7d1b      	ldrb	r3, [r3, #20]
 800c9ae:	b25b      	sxtb	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	da18      	bge.n	800c9e6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	7858      	ldrb	r0, [r3, #1]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a1a      	ldr	r2, [r3, #32]
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	f7fd fc8c 	bl	800a2e0 <disk_write>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d004      	beq.n	800c9d8 <f_lseek+0x1c0>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	755a      	strb	r2, [r3, #21]
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e13f      	b.n	800cc58 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	7d1b      	ldrb	r3, [r3, #20]
 800c9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	7858      	ldrb	r0, [r3, #1]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	69ba      	ldr	r2, [r7, #24]
 800c9f4:	f7fd fc54 	bl	800a2a0 <disk_read>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d004      	beq.n	800ca08 <f_lseek+0x1f0>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	755a      	strb	r2, [r3, #21]
 800ca04:	2301      	movs	r3, #1
 800ca06:	e127      	b.n	800cc58 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	69ba      	ldr	r2, [r7, #24]
 800ca0c:	621a      	str	r2, [r3, #32]
 800ca0e:	e121      	b.n	800cc54 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d908      	bls.n	800ca2c <f_lseek+0x214>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7d1b      	ldrb	r3, [r3, #20]
 800ca1e:	f003 0302 	and.w	r3, r3, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	637b      	str	r3, [r7, #52]	; 0x34
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca3a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80b5 	beq.w	800cbae <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	895b      	ldrh	r3, [r3, #10]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	899b      	ldrh	r3, [r3, #12]
 800ca4e:	fb03 f302 	mul.w	r3, r3, r2
 800ca52:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d01b      	beq.n	800ca92 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	1e5a      	subs	r2, r3, #1
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	1e59      	subs	r1, r3, #1
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d30f      	bcc.n	800ca92 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	1e5a      	subs	r2, r3, #1
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	425b      	negs	r3, r3
 800ca7a:	401a      	ands	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	683a      	ldr	r2, [r7, #0]
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca90:	e022      	b.n	800cad8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d119      	bne.n	800cad2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2100      	movs	r1, #0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fa13 	bl	800aece <create_chain>
 800caa8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800caaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caac:	2b01      	cmp	r3, #1
 800caae:	d104      	bne.n	800caba <f_lseek+0x2a2>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	755a      	strb	r2, [r3, #21]
 800cab6:	2302      	movs	r3, #2
 800cab8:	e0ce      	b.n	800cc58 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cac0:	d104      	bne.n	800cacc <f_lseek+0x2b4>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2201      	movs	r2, #1
 800cac6:	755a      	strb	r2, [r3, #21]
 800cac8:	2301      	movs	r3, #1
 800caca:	e0c5      	b.n	800cc58 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d067      	beq.n	800cbae <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800cade:	e03a      	b.n	800cb56 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800cae0:	683a      	ldr	r2, [r7, #0]
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	603b      	str	r3, [r7, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	699a      	ldr	r2, [r3, #24]
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	441a      	add	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	7d1b      	ldrb	r3, [r3, #20]
 800caf8:	f003 0302 	and.w	r3, r3, #2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00b      	beq.n	800cb18 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe f9e2 	bl	800aece <create_chain>
 800cb0a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d108      	bne.n	800cb24 <f_lseek+0x30c>
							ofs = 0; break;
 800cb12:	2300      	movs	r3, #0
 800cb14:	603b      	str	r3, [r7, #0]
 800cb16:	e022      	b.n	800cb5e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fd ff8a 	bl	800aa36 <get_fat>
 800cb22:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb2a:	d104      	bne.n	800cb36 <f_lseek+0x31e>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	755a      	strb	r2, [r3, #21]
 800cb32:	2301      	movs	r3, #1
 800cb34:	e090      	b.n	800cc58 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d904      	bls.n	800cb46 <f_lseek+0x32e>
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d304      	bcc.n	800cb50 <f_lseek+0x338>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2202      	movs	r2, #2
 800cb4a:	755a      	strb	r2, [r3, #21]
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e083      	b.n	800cc58 <f_lseek+0x440>
					fp->clust = clst;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb54:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d8c0      	bhi.n	800cae0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	699a      	ldr	r2, [r3, #24]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	441a      	add	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	899b      	ldrh	r3, [r3, #12]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb76:	fb02 f201 	mul.w	r2, r2, r1
 800cb7a:	1a9b      	subs	r3, r3, r2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d016      	beq.n	800cbae <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fd ff37 	bl	800a9f8 <clust2sect>
 800cb8a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d104      	bne.n	800cb9c <f_lseek+0x384>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2202      	movs	r2, #2
 800cb96:	755a      	strb	r2, [r3, #21]
 800cb98:	2302      	movs	r3, #2
 800cb9a:	e05d      	b.n	800cc58 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	899b      	ldrh	r3, [r3, #12]
 800cba0:	461a      	mov	r2, r3
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbaa:	4413      	add	r3, r2
 800cbac:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	699a      	ldr	r2, [r3, #24]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d90a      	bls.n	800cbd0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	699a      	ldr	r2, [r3, #24]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	7d1b      	ldrb	r3, [r3, #20]
 800cbc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	68ba      	ldr	r2, [r7, #8]
 800cbd6:	8992      	ldrh	r2, [r2, #12]
 800cbd8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbdc:	fb02 f201 	mul.w	r2, r2, r1
 800cbe0:	1a9b      	subs	r3, r3, r2
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d036      	beq.n	800cc54 <f_lseek+0x43c>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a1b      	ldr	r3, [r3, #32]
 800cbea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d031      	beq.n	800cc54 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7d1b      	ldrb	r3, [r3, #20]
 800cbf4:	b25b      	sxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	da18      	bge.n	800cc2c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	7858      	ldrb	r0, [r3, #1]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a1a      	ldr	r2, [r3, #32]
 800cc08:	2301      	movs	r3, #1
 800cc0a:	f7fd fb69 	bl	800a2e0 <disk_write>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d004      	beq.n	800cc1e <f_lseek+0x406>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	755a      	strb	r2, [r3, #21]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e01c      	b.n	800cc58 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7d1b      	ldrb	r3, [r3, #20]
 800cc22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	7858      	ldrb	r0, [r3, #1]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc36:	2301      	movs	r3, #1
 800cc38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc3a:	f7fd fb31 	bl	800a2a0 <disk_read>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d004      	beq.n	800cc4e <f_lseek+0x436>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	755a      	strb	r2, [r3, #21]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e004      	b.n	800cc58 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc52:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cc54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3740      	adds	r7, #64	; 0x40
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <f_opendir+0x14>
 800cc70:	2309      	movs	r3, #9
 800cc72:	e064      	b.n	800cd3e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800cc78:	f107 010c 	add.w	r1, r7, #12
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fe fec1 	bl	800ba08 <find_volume>
 800cc86:	4603      	mov	r3, r0
 800cc88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d14f      	bne.n	800cd30 <f_opendir+0xd0>
		obj->fs = fs;
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	4619      	mov	r1, r3
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7fe fda4 	bl	800b7e8 <follow_path>
 800cca0:	4603      	mov	r3, r0
 800cca2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d13d      	bne.n	800cd26 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ccb0:	b25b      	sxtb	r3, r3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	db12      	blt.n	800ccdc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	799b      	ldrb	r3, [r3, #6]
 800ccba:	f003 0310 	and.w	r3, r3, #16
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00a      	beq.n	800ccd8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a1b      	ldr	r3, [r3, #32]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4610      	mov	r0, r2
 800cccc:	f7fe fb75 	bl	800b3ba <ld_clust>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	609a      	str	r2, [r3, #8]
 800ccd6:	e001      	b.n	800ccdc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ccd8:	2305      	movs	r3, #5
 800ccda:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d121      	bne.n	800cd26 <f_opendir+0xc6>
				obj->id = fs->id;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	88da      	ldrh	r2, [r3, #6]
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ccea:	2100      	movs	r1, #0
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7fe f9be 	bl	800b06e <dir_sdi>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d114      	bne.n	800cd26 <f_opendir+0xc6>
					if (obj->sclust) {
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00d      	beq.n	800cd20 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cd04:	2100      	movs	r1, #0
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7fd fca6 	bl	800a658 <inc_lock>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <f_opendir+0xc6>
 800cd1a:	2312      	movs	r3, #18
 800cd1c:	75fb      	strb	r3, [r7, #23]
 800cd1e:	e002      	b.n	800cd26 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	2200      	movs	r2, #0
 800cd24:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	2b04      	cmp	r3, #4
 800cd2a:	d101      	bne.n	800cd30 <f_opendir+0xd0>
 800cd2c:	2305      	movs	r3, #5
 800cd2e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <f_opendir+0xdc>
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f107 0208 	add.w	r2, r7, #8
 800cd56:	4611      	mov	r1, r2
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7ff f8d9 	bl	800bf10 <validate>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d126      	bne.n	800cdb6 <f_readdir+0x70>
		if (!fno) {
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cd6e:	2100      	movs	r1, #0
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7fe f97c 	bl	800b06e <dir_sdi>
 800cd76:	4603      	mov	r3, r0
 800cd78:	73fb      	strb	r3, [r7, #15]
 800cd7a:	e01c      	b.n	800cdb6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7fe fb5a 	bl	800b438 <dir_read>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	2b04      	cmp	r3, #4
 800cd8c:	d101      	bne.n	800cd92 <f_readdir+0x4c>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10e      	bne.n	800cdb6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800cd98:	6839      	ldr	r1, [r7, #0]
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7fe fc30 	bl	800b600 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cda0:	2100      	movs	r1, #0
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7fe f9ec 	bl	800b180 <dir_next>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
 800cdae:	2b04      	cmp	r3, #4
 800cdb0:	d101      	bne.n	800cdb6 <f_readdir+0x70>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b092      	sub	sp, #72	; 0x48
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cdcc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cdd0:	f107 030c 	add.w	r3, r7, #12
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fe fe16 	bl	800ba08 <find_volume>
 800cddc:	4603      	mov	r3, r0
 800cdde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800cde2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f040 8099 	bne.w	800cf1e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800cdec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf4:	695a      	ldr	r2, [r3, #20]
 800cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	3b02      	subs	r3, #2
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d804      	bhi.n	800ce0a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	695a      	ldr	r2, [r3, #20]
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	e089      	b.n	800cf1e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ce0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d128      	bne.n	800ce68 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ce16:	2302      	movs	r3, #2
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ce1e:	f107 0314 	add.w	r3, r7, #20
 800ce22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fd fe06 	bl	800aa36 <get_fat>
 800ce2a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce32:	d103      	bne.n	800ce3c <f_getfree+0x7c>
 800ce34:	2301      	movs	r3, #1
 800ce36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ce3a:	e063      	b.n	800cf04 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d103      	bne.n	800ce4a <f_getfree+0x8a>
 800ce42:	2302      	movs	r3, #2
 800ce44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ce48:	e05c      	b.n	800cf04 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <f_getfree+0x96>
 800ce50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce52:	3301      	adds	r3, #1
 800ce54:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ce56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce58:	3301      	adds	r3, #1
 800ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d3db      	bcc.n	800ce1e <f_getfree+0x5e>
 800ce66:	e04d      	b.n	800cf04 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce72:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ce74:	2300      	movs	r3, #0
 800ce76:	637b      	str	r3, [r7, #52]	; 0x34
 800ce78:	2300      	movs	r3, #0
 800ce7a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d113      	bne.n	800ceaa <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ce82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	1c5a      	adds	r2, r3, #1
 800ce88:	63ba      	str	r2, [r7, #56]	; 0x38
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f7fd fd16 	bl	800a8bc <move_window>
 800ce90:	4603      	mov	r3, r0
 800ce92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ce96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d131      	bne.n	800cf02 <f_getfree+0x142>
							p = fs->win;
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	3334      	adds	r3, #52	; 0x34
 800cea2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea6:	899b      	ldrh	r3, [r3, #12]
 800cea8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d10f      	bne.n	800ced2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ceb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceb4:	f7fd fa52 	bl	800a35c <ld_word>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d102      	bne.n	800cec4 <f_getfree+0x104>
 800cebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec0:	3301      	adds	r3, #1
 800cec2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	3302      	adds	r3, #2
 800cec8:	633b      	str	r3, [r7, #48]	; 0x30
 800ceca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cecc:	3b02      	subs	r3, #2
 800cece:	637b      	str	r3, [r7, #52]	; 0x34
 800ced0:	e010      	b.n	800cef4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ced2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ced4:	f7fd fa5a 	bl	800a38c <ld_dword>
 800ced8:	4603      	mov	r3, r0
 800ceda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d102      	bne.n	800cee8 <f_getfree+0x128>
 800cee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee4:	3301      	adds	r3, #1
 800cee6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800cee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceea:	3304      	adds	r3, #4
 800ceec:	633b      	str	r3, [r7, #48]	; 0x30
 800ceee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef0:	3b04      	subs	r3, #4
 800cef2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800cef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef6:	3b01      	subs	r3, #1
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1bd      	bne.n	800ce7c <f_getfree+0xbc>
 800cf00:	e000      	b.n	800cf04 <f_getfree+0x144>
							if (res != FR_OK) break;
 800cf02:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf08:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf0e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800cf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf12:	791a      	ldrb	r2, [r3, #4]
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf16:	f042 0201 	orr.w	r2, r2, #1
 800cf1a:	b2d2      	uxtb	r2, r2
 800cf1c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800cf1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3748      	adds	r7, #72	; 0x48
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	460b      	mov	r3, r1
 800cf34:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800cf36:	78fb      	ldrb	r3, [r7, #3]
 800cf38:	2b0a      	cmp	r3, #10
 800cf3a:	d103      	bne.n	800cf44 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800cf3c:	210d      	movs	r1, #13
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fff3 	bl	800cf2a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	db25      	blt.n	800cf9c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	60fa      	str	r2, [r7, #12]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	4413      	add	r3, r2
 800cf5a:	78fa      	ldrb	r2, [r7, #3]
 800cf5c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b3c      	cmp	r3, #60	; 0x3c
 800cf62:	dd12      	ble.n	800cf8a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6818      	ldr	r0, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f103 010c 	add.w	r1, r3, #12
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	f107 0308 	add.w	r3, r7, #8
 800cf74:	f7ff fa14 	bl	800c3a0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d101      	bne.n	800cf84 <putc_bfd+0x5a>
 800cf80:	2300      	movs	r3, #0
 800cf82:	e001      	b.n	800cf88 <putc_bfd+0x5e>
 800cf84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf88:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	609a      	str	r2, [r3, #8]
 800cf9a:	e000      	b.n	800cf9e <putc_bfd+0x74>
	if (i < 0) return;
 800cf9c:	bf00      	nop
}
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	db17      	blt.n	800cfe4 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6818      	ldr	r0, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f103 010c 	add.w	r1, r3, #12
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f107 030c 	add.w	r3, r7, #12
 800cfc8:	f7ff f9ea 	bl	800c3a0 <f_write>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d108      	bne.n	800cfe4 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d102      	bne.n	800cfe4 <putc_flush+0x40>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	e001      	b.n	800cfe8 <putc_flush+0x44>
	return EOF;
 800cfe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	605a      	str	r2, [r3, #4]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	609a      	str	r2, [r3, #8]
}
 800d00e:	bf00      	nop
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b096      	sub	sp, #88	; 0x58
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d024:	f107 030c 	add.w	r3, r7, #12
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff ffe0 	bl	800cff0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d030:	e009      	b.n	800d046 <f_puts+0x2c>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	607a      	str	r2, [r7, #4]
 800d038:	781a      	ldrb	r2, [r3, #0]
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	4611      	mov	r1, r2
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff ff72 	bl	800cf2a <putc_bfd>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1f1      	bne.n	800d032 <f_puts+0x18>
	return putc_flush(&pb);
 800d04e:	f107 030c 	add.w	r3, r7, #12
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff ffa6 	bl	800cfa4 <putc_flush>
 800d058:	4603      	mov	r3, r0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3758      	adds	r7, #88	; 0x58
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
	...

0800d064 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d064:	b480      	push	{r7}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	4613      	mov	r3, r2
 800d070:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d072:	2301      	movs	r3, #1
 800d074:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d07a:	4b1f      	ldr	r3, [pc, #124]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d07c:	7a5b      	ldrb	r3, [r3, #9]
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b00      	cmp	r3, #0
 800d082:	d131      	bne.n	800d0e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d084:	4b1c      	ldr	r3, [pc, #112]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d086:	7a5b      	ldrb	r3, [r3, #9]
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	461a      	mov	r2, r3
 800d08c:	4b1a      	ldr	r3, [pc, #104]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d08e:	2100      	movs	r1, #0
 800d090:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d092:	4b19      	ldr	r3, [pc, #100]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d094:	7a5b      	ldrb	r3, [r3, #9]
 800d096:	b2db      	uxtb	r3, r3
 800d098:	4a17      	ldr	r2, [pc, #92]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d0a2:	4b15      	ldr	r3, [pc, #84]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d0a4:	7a5b      	ldrb	r3, [r3, #9]
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d0ac:	4413      	add	r3, r2
 800d0ae:	79fa      	ldrb	r2, [r7, #7]
 800d0b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d0b2:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d0b4:	7a5b      	ldrb	r3, [r3, #9]
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	1c5a      	adds	r2, r3, #1
 800d0ba:	b2d1      	uxtb	r1, r2
 800d0bc:	4a0e      	ldr	r2, [pc, #56]	; (800d0f8 <FATFS_LinkDriverEx+0x94>)
 800d0be:	7251      	strb	r1, [r2, #9]
 800d0c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d0c2:	7dbb      	ldrb	r3, [r7, #22]
 800d0c4:	3330      	adds	r3, #48	; 0x30
 800d0c6:	b2da      	uxtb	r2, r3
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	223a      	movs	r2, #58	; 0x3a
 800d0d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	3302      	adds	r3, #2
 800d0d8:	222f      	movs	r2, #47	; 0x2f
 800d0da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	3303      	adds	r3, #3
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	371c      	adds	r7, #28
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	20000390 	.word	0x20000390

0800d0fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d106:	2200      	movs	r2, #0
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff ffaa 	bl	800d064 <FATFS_LinkDriverEx>
 800d110:	4603      	mov	r3, r0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <__errno>:
 800d11c:	4b01      	ldr	r3, [pc, #4]	; (800d124 <__errno+0x8>)
 800d11e:	6818      	ldr	r0, [r3, #0]
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	20000120 	.word	0x20000120

0800d128 <__libc_init_array>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	4e0d      	ldr	r6, [pc, #52]	; (800d160 <__libc_init_array+0x38>)
 800d12c:	4c0d      	ldr	r4, [pc, #52]	; (800d164 <__libc_init_array+0x3c>)
 800d12e:	1ba4      	subs	r4, r4, r6
 800d130:	10a4      	asrs	r4, r4, #2
 800d132:	2500      	movs	r5, #0
 800d134:	42a5      	cmp	r5, r4
 800d136:	d109      	bne.n	800d14c <__libc_init_array+0x24>
 800d138:	4e0b      	ldr	r6, [pc, #44]	; (800d168 <__libc_init_array+0x40>)
 800d13a:	4c0c      	ldr	r4, [pc, #48]	; (800d16c <__libc_init_array+0x44>)
 800d13c:	f002 fd66 	bl	800fc0c <_init>
 800d140:	1ba4      	subs	r4, r4, r6
 800d142:	10a4      	asrs	r4, r4, #2
 800d144:	2500      	movs	r5, #0
 800d146:	42a5      	cmp	r5, r4
 800d148:	d105      	bne.n	800d156 <__libc_init_array+0x2e>
 800d14a:	bd70      	pop	{r4, r5, r6, pc}
 800d14c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d150:	4798      	blx	r3
 800d152:	3501      	adds	r5, #1
 800d154:	e7ee      	b.n	800d134 <__libc_init_array+0xc>
 800d156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d15a:	4798      	blx	r3
 800d15c:	3501      	adds	r5, #1
 800d15e:	e7f2      	b.n	800d146 <__libc_init_array+0x1e>
 800d160:	08010378 	.word	0x08010378
 800d164:	08010378 	.word	0x08010378
 800d168:	08010378 	.word	0x08010378
 800d16c:	0801037c 	.word	0x0801037c

0800d170 <memcpy>:
 800d170:	b510      	push	{r4, lr}
 800d172:	1e43      	subs	r3, r0, #1
 800d174:	440a      	add	r2, r1
 800d176:	4291      	cmp	r1, r2
 800d178:	d100      	bne.n	800d17c <memcpy+0xc>
 800d17a:	bd10      	pop	{r4, pc}
 800d17c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d180:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d184:	e7f7      	b.n	800d176 <memcpy+0x6>

0800d186 <memset>:
 800d186:	4402      	add	r2, r0
 800d188:	4603      	mov	r3, r0
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d100      	bne.n	800d190 <memset+0xa>
 800d18e:	4770      	bx	lr
 800d190:	f803 1b01 	strb.w	r1, [r3], #1
 800d194:	e7f9      	b.n	800d18a <memset+0x4>

0800d196 <__cvt>:
 800d196:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d19a:	ec55 4b10 	vmov	r4, r5, d0
 800d19e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d1a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d1a4:	2d00      	cmp	r5, #0
 800d1a6:	460e      	mov	r6, r1
 800d1a8:	4691      	mov	r9, r2
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	bfb8      	it	lt
 800d1ae:	4622      	movlt	r2, r4
 800d1b0:	462b      	mov	r3, r5
 800d1b2:	f027 0720 	bic.w	r7, r7, #32
 800d1b6:	bfbb      	ittet	lt
 800d1b8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d1bc:	461d      	movlt	r5, r3
 800d1be:	2300      	movge	r3, #0
 800d1c0:	232d      	movlt	r3, #45	; 0x2d
 800d1c2:	bfb8      	it	lt
 800d1c4:	4614      	movlt	r4, r2
 800d1c6:	2f46      	cmp	r7, #70	; 0x46
 800d1c8:	700b      	strb	r3, [r1, #0]
 800d1ca:	d004      	beq.n	800d1d6 <__cvt+0x40>
 800d1cc:	2f45      	cmp	r7, #69	; 0x45
 800d1ce:	d100      	bne.n	800d1d2 <__cvt+0x3c>
 800d1d0:	3601      	adds	r6, #1
 800d1d2:	2102      	movs	r1, #2
 800d1d4:	e000      	b.n	800d1d8 <__cvt+0x42>
 800d1d6:	2103      	movs	r1, #3
 800d1d8:	ab03      	add	r3, sp, #12
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	ab02      	add	r3, sp, #8
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	4632      	mov	r2, r6
 800d1e2:	4653      	mov	r3, sl
 800d1e4:	ec45 4b10 	vmov	d0, r4, r5
 800d1e8:	f000 fe1a 	bl	800de20 <_dtoa_r>
 800d1ec:	2f47      	cmp	r7, #71	; 0x47
 800d1ee:	4680      	mov	r8, r0
 800d1f0:	d102      	bne.n	800d1f8 <__cvt+0x62>
 800d1f2:	f019 0f01 	tst.w	r9, #1
 800d1f6:	d026      	beq.n	800d246 <__cvt+0xb0>
 800d1f8:	2f46      	cmp	r7, #70	; 0x46
 800d1fa:	eb08 0906 	add.w	r9, r8, r6
 800d1fe:	d111      	bne.n	800d224 <__cvt+0x8e>
 800d200:	f898 3000 	ldrb.w	r3, [r8]
 800d204:	2b30      	cmp	r3, #48	; 0x30
 800d206:	d10a      	bne.n	800d21e <__cvt+0x88>
 800d208:	2200      	movs	r2, #0
 800d20a:	2300      	movs	r3, #0
 800d20c:	4620      	mov	r0, r4
 800d20e:	4629      	mov	r1, r5
 800d210:	f7f3 fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d214:	b918      	cbnz	r0, 800d21e <__cvt+0x88>
 800d216:	f1c6 0601 	rsb	r6, r6, #1
 800d21a:	f8ca 6000 	str.w	r6, [sl]
 800d21e:	f8da 3000 	ldr.w	r3, [sl]
 800d222:	4499      	add	r9, r3
 800d224:	2200      	movs	r2, #0
 800d226:	2300      	movs	r3, #0
 800d228:	4620      	mov	r0, r4
 800d22a:	4629      	mov	r1, r5
 800d22c:	f7f3 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d230:	b938      	cbnz	r0, 800d242 <__cvt+0xac>
 800d232:	2230      	movs	r2, #48	; 0x30
 800d234:	9b03      	ldr	r3, [sp, #12]
 800d236:	454b      	cmp	r3, r9
 800d238:	d205      	bcs.n	800d246 <__cvt+0xb0>
 800d23a:	1c59      	adds	r1, r3, #1
 800d23c:	9103      	str	r1, [sp, #12]
 800d23e:	701a      	strb	r2, [r3, #0]
 800d240:	e7f8      	b.n	800d234 <__cvt+0x9e>
 800d242:	f8cd 900c 	str.w	r9, [sp, #12]
 800d246:	9b03      	ldr	r3, [sp, #12]
 800d248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d24a:	eba3 0308 	sub.w	r3, r3, r8
 800d24e:	4640      	mov	r0, r8
 800d250:	6013      	str	r3, [r2, #0]
 800d252:	b004      	add	sp, #16
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d258 <__exponent>:
 800d258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d25a:	2900      	cmp	r1, #0
 800d25c:	4604      	mov	r4, r0
 800d25e:	bfba      	itte	lt
 800d260:	4249      	neglt	r1, r1
 800d262:	232d      	movlt	r3, #45	; 0x2d
 800d264:	232b      	movge	r3, #43	; 0x2b
 800d266:	2909      	cmp	r1, #9
 800d268:	f804 2b02 	strb.w	r2, [r4], #2
 800d26c:	7043      	strb	r3, [r0, #1]
 800d26e:	dd20      	ble.n	800d2b2 <__exponent+0x5a>
 800d270:	f10d 0307 	add.w	r3, sp, #7
 800d274:	461f      	mov	r7, r3
 800d276:	260a      	movs	r6, #10
 800d278:	fb91 f5f6 	sdiv	r5, r1, r6
 800d27c:	fb06 1115 	mls	r1, r6, r5, r1
 800d280:	3130      	adds	r1, #48	; 0x30
 800d282:	2d09      	cmp	r5, #9
 800d284:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d288:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800d28c:	4629      	mov	r1, r5
 800d28e:	dc09      	bgt.n	800d2a4 <__exponent+0x4c>
 800d290:	3130      	adds	r1, #48	; 0x30
 800d292:	3b02      	subs	r3, #2
 800d294:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d298:	42bb      	cmp	r3, r7
 800d29a:	4622      	mov	r2, r4
 800d29c:	d304      	bcc.n	800d2a8 <__exponent+0x50>
 800d29e:	1a10      	subs	r0, r2, r0
 800d2a0:	b003      	add	sp, #12
 800d2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	e7e7      	b.n	800d278 <__exponent+0x20>
 800d2a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ac:	f804 2b01 	strb.w	r2, [r4], #1
 800d2b0:	e7f2      	b.n	800d298 <__exponent+0x40>
 800d2b2:	2330      	movs	r3, #48	; 0x30
 800d2b4:	4419      	add	r1, r3
 800d2b6:	7083      	strb	r3, [r0, #2]
 800d2b8:	1d02      	adds	r2, r0, #4
 800d2ba:	70c1      	strb	r1, [r0, #3]
 800d2bc:	e7ef      	b.n	800d29e <__exponent+0x46>
	...

0800d2c0 <_printf_float>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	b08d      	sub	sp, #52	; 0x34
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	461f      	mov	r7, r3
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	f001 fcd7 	bl	800ec84 <_localeconv_r>
 800d2d6:	6803      	ldr	r3, [r0, #0]
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7f2 ff78 	bl	80001d0 <strlen>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e8:	9005      	str	r0, [sp, #20]
 800d2ea:	3307      	adds	r3, #7
 800d2ec:	f023 0307 	bic.w	r3, r3, #7
 800d2f0:	f103 0208 	add.w	r2, r3, #8
 800d2f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d2f8:	f8d4 b000 	ldr.w	fp, [r4]
 800d2fc:	f8c8 2000 	str.w	r2, [r8]
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d308:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d30c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d310:	9307      	str	r3, [sp, #28]
 800d312:	f8cd 8018 	str.w	r8, [sp, #24]
 800d316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d31a:	4ba7      	ldr	r3, [pc, #668]	; (800d5b8 <_printf_float+0x2f8>)
 800d31c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d320:	f7f3 fc04 	bl	8000b2c <__aeabi_dcmpun>
 800d324:	bb70      	cbnz	r0, 800d384 <_printf_float+0xc4>
 800d326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d32a:	4ba3      	ldr	r3, [pc, #652]	; (800d5b8 <_printf_float+0x2f8>)
 800d32c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d330:	f7f3 fbde 	bl	8000af0 <__aeabi_dcmple>
 800d334:	bb30      	cbnz	r0, 800d384 <_printf_float+0xc4>
 800d336:	2200      	movs	r2, #0
 800d338:	2300      	movs	r3, #0
 800d33a:	4640      	mov	r0, r8
 800d33c:	4649      	mov	r1, r9
 800d33e:	f7f3 fbcd 	bl	8000adc <__aeabi_dcmplt>
 800d342:	b110      	cbz	r0, 800d34a <_printf_float+0x8a>
 800d344:	232d      	movs	r3, #45	; 0x2d
 800d346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d34a:	4a9c      	ldr	r2, [pc, #624]	; (800d5bc <_printf_float+0x2fc>)
 800d34c:	4b9c      	ldr	r3, [pc, #624]	; (800d5c0 <_printf_float+0x300>)
 800d34e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d352:	bf8c      	ite	hi
 800d354:	4690      	movhi	r8, r2
 800d356:	4698      	movls	r8, r3
 800d358:	2303      	movs	r3, #3
 800d35a:	f02b 0204 	bic.w	r2, fp, #4
 800d35e:	6123      	str	r3, [r4, #16]
 800d360:	6022      	str	r2, [r4, #0]
 800d362:	f04f 0900 	mov.w	r9, #0
 800d366:	9700      	str	r7, [sp, #0]
 800d368:	4633      	mov	r3, r6
 800d36a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d36c:	4621      	mov	r1, r4
 800d36e:	4628      	mov	r0, r5
 800d370:	f000 f9e6 	bl	800d740 <_printf_common>
 800d374:	3001      	adds	r0, #1
 800d376:	f040 808d 	bne.w	800d494 <_printf_float+0x1d4>
 800d37a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d37e:	b00d      	add	sp, #52	; 0x34
 800d380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d384:	4642      	mov	r2, r8
 800d386:	464b      	mov	r3, r9
 800d388:	4640      	mov	r0, r8
 800d38a:	4649      	mov	r1, r9
 800d38c:	f7f3 fbce 	bl	8000b2c <__aeabi_dcmpun>
 800d390:	b110      	cbz	r0, 800d398 <_printf_float+0xd8>
 800d392:	4a8c      	ldr	r2, [pc, #560]	; (800d5c4 <_printf_float+0x304>)
 800d394:	4b8c      	ldr	r3, [pc, #560]	; (800d5c8 <_printf_float+0x308>)
 800d396:	e7da      	b.n	800d34e <_printf_float+0x8e>
 800d398:	6861      	ldr	r1, [r4, #4]
 800d39a:	1c4b      	adds	r3, r1, #1
 800d39c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d3a0:	a80a      	add	r0, sp, #40	; 0x28
 800d3a2:	d13e      	bne.n	800d422 <_printf_float+0x162>
 800d3a4:	2306      	movs	r3, #6
 800d3a6:	6063      	str	r3, [r4, #4]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d3ae:	ab09      	add	r3, sp, #36	; 0x24
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	ec49 8b10 	vmov	d0, r8, r9
 800d3b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3ba:	6022      	str	r2, [r4, #0]
 800d3bc:	f8cd a004 	str.w	sl, [sp, #4]
 800d3c0:	6861      	ldr	r1, [r4, #4]
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f7ff fee7 	bl	800d196 <__cvt>
 800d3c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d3cc:	2b47      	cmp	r3, #71	; 0x47
 800d3ce:	4680      	mov	r8, r0
 800d3d0:	d109      	bne.n	800d3e6 <_printf_float+0x126>
 800d3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d4:	1cd8      	adds	r0, r3, #3
 800d3d6:	db02      	blt.n	800d3de <_printf_float+0x11e>
 800d3d8:	6862      	ldr	r2, [r4, #4]
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	dd47      	ble.n	800d46e <_printf_float+0x1ae>
 800d3de:	f1aa 0a02 	sub.w	sl, sl, #2
 800d3e2:	fa5f fa8a 	uxtb.w	sl, sl
 800d3e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d3ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3ec:	d824      	bhi.n	800d438 <_printf_float+0x178>
 800d3ee:	3901      	subs	r1, #1
 800d3f0:	4652      	mov	r2, sl
 800d3f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3f6:	9109      	str	r1, [sp, #36]	; 0x24
 800d3f8:	f7ff ff2e 	bl	800d258 <__exponent>
 800d3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3fe:	1813      	adds	r3, r2, r0
 800d400:	2a01      	cmp	r2, #1
 800d402:	4681      	mov	r9, r0
 800d404:	6123      	str	r3, [r4, #16]
 800d406:	dc02      	bgt.n	800d40e <_printf_float+0x14e>
 800d408:	6822      	ldr	r2, [r4, #0]
 800d40a:	07d1      	lsls	r1, r2, #31
 800d40c:	d501      	bpl.n	800d412 <_printf_float+0x152>
 800d40e:	3301      	adds	r3, #1
 800d410:	6123      	str	r3, [r4, #16]
 800d412:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0a5      	beq.n	800d366 <_printf_float+0xa6>
 800d41a:	232d      	movs	r3, #45	; 0x2d
 800d41c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d420:	e7a1      	b.n	800d366 <_printf_float+0xa6>
 800d422:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d426:	f000 8177 	beq.w	800d718 <_printf_float+0x458>
 800d42a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d42e:	d1bb      	bne.n	800d3a8 <_printf_float+0xe8>
 800d430:	2900      	cmp	r1, #0
 800d432:	d1b9      	bne.n	800d3a8 <_printf_float+0xe8>
 800d434:	2301      	movs	r3, #1
 800d436:	e7b6      	b.n	800d3a6 <_printf_float+0xe6>
 800d438:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d43c:	d119      	bne.n	800d472 <_printf_float+0x1b2>
 800d43e:	2900      	cmp	r1, #0
 800d440:	6863      	ldr	r3, [r4, #4]
 800d442:	dd0c      	ble.n	800d45e <_printf_float+0x19e>
 800d444:	6121      	str	r1, [r4, #16]
 800d446:	b913      	cbnz	r3, 800d44e <_printf_float+0x18e>
 800d448:	6822      	ldr	r2, [r4, #0]
 800d44a:	07d2      	lsls	r2, r2, #31
 800d44c:	d502      	bpl.n	800d454 <_printf_float+0x194>
 800d44e:	3301      	adds	r3, #1
 800d450:	440b      	add	r3, r1
 800d452:	6123      	str	r3, [r4, #16]
 800d454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d456:	65a3      	str	r3, [r4, #88]	; 0x58
 800d458:	f04f 0900 	mov.w	r9, #0
 800d45c:	e7d9      	b.n	800d412 <_printf_float+0x152>
 800d45e:	b913      	cbnz	r3, 800d466 <_printf_float+0x1a6>
 800d460:	6822      	ldr	r2, [r4, #0]
 800d462:	07d0      	lsls	r0, r2, #31
 800d464:	d501      	bpl.n	800d46a <_printf_float+0x1aa>
 800d466:	3302      	adds	r3, #2
 800d468:	e7f3      	b.n	800d452 <_printf_float+0x192>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e7f1      	b.n	800d452 <_printf_float+0x192>
 800d46e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d472:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d476:	4293      	cmp	r3, r2
 800d478:	db05      	blt.n	800d486 <_printf_float+0x1c6>
 800d47a:	6822      	ldr	r2, [r4, #0]
 800d47c:	6123      	str	r3, [r4, #16]
 800d47e:	07d1      	lsls	r1, r2, #31
 800d480:	d5e8      	bpl.n	800d454 <_printf_float+0x194>
 800d482:	3301      	adds	r3, #1
 800d484:	e7e5      	b.n	800d452 <_printf_float+0x192>
 800d486:	2b00      	cmp	r3, #0
 800d488:	bfd4      	ite	le
 800d48a:	f1c3 0302 	rsble	r3, r3, #2
 800d48e:	2301      	movgt	r3, #1
 800d490:	4413      	add	r3, r2
 800d492:	e7de      	b.n	800d452 <_printf_float+0x192>
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	055a      	lsls	r2, r3, #21
 800d498:	d407      	bmi.n	800d4aa <_printf_float+0x1ea>
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	4642      	mov	r2, r8
 800d49e:	4631      	mov	r1, r6
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	47b8      	blx	r7
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d12b      	bne.n	800d500 <_printf_float+0x240>
 800d4a8:	e767      	b.n	800d37a <_printf_float+0xba>
 800d4aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d4ae:	f240 80dc 	bls.w	800d66a <_printf_float+0x3aa>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4ba:	f7f3 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d033      	beq.n	800d52a <_printf_float+0x26a>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	4a41      	ldr	r2, [pc, #260]	; (800d5cc <_printf_float+0x30c>)
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	47b8      	blx	r7
 800d4cc:	3001      	adds	r0, #1
 800d4ce:	f43f af54 	beq.w	800d37a <_printf_float+0xba>
 800d4d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	db02      	blt.n	800d4e0 <_printf_float+0x220>
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	07d8      	lsls	r0, r3, #31
 800d4de:	d50f      	bpl.n	800d500 <_printf_float+0x240>
 800d4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	47b8      	blx	r7
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	f43f af45 	beq.w	800d37a <_printf_float+0xba>
 800d4f0:	f04f 0800 	mov.w	r8, #0
 800d4f4:	f104 091a 	add.w	r9, r4, #26
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	4543      	cmp	r3, r8
 800d4fe:	dc09      	bgt.n	800d514 <_printf_float+0x254>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	079b      	lsls	r3, r3, #30
 800d504:	f100 8103 	bmi.w	800d70e <_printf_float+0x44e>
 800d508:	68e0      	ldr	r0, [r4, #12]
 800d50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d50c:	4298      	cmp	r0, r3
 800d50e:	bfb8      	it	lt
 800d510:	4618      	movlt	r0, r3
 800d512:	e734      	b.n	800d37e <_printf_float+0xbe>
 800d514:	2301      	movs	r3, #1
 800d516:	464a      	mov	r2, r9
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	47b8      	blx	r7
 800d51e:	3001      	adds	r0, #1
 800d520:	f43f af2b 	beq.w	800d37a <_printf_float+0xba>
 800d524:	f108 0801 	add.w	r8, r8, #1
 800d528:	e7e6      	b.n	800d4f8 <_printf_float+0x238>
 800d52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dc2b      	bgt.n	800d588 <_printf_float+0x2c8>
 800d530:	2301      	movs	r3, #1
 800d532:	4a26      	ldr	r2, [pc, #152]	; (800d5cc <_printf_float+0x30c>)
 800d534:	4631      	mov	r1, r6
 800d536:	4628      	mov	r0, r5
 800d538:	47b8      	blx	r7
 800d53a:	3001      	adds	r0, #1
 800d53c:	f43f af1d 	beq.w	800d37a <_printf_float+0xba>
 800d540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d542:	b923      	cbnz	r3, 800d54e <_printf_float+0x28e>
 800d544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d546:	b913      	cbnz	r3, 800d54e <_printf_float+0x28e>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	07d9      	lsls	r1, r3, #31
 800d54c:	d5d8      	bpl.n	800d500 <_printf_float+0x240>
 800d54e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d552:	4631      	mov	r1, r6
 800d554:	4628      	mov	r0, r5
 800d556:	47b8      	blx	r7
 800d558:	3001      	adds	r0, #1
 800d55a:	f43f af0e 	beq.w	800d37a <_printf_float+0xba>
 800d55e:	f04f 0900 	mov.w	r9, #0
 800d562:	f104 0a1a 	add.w	sl, r4, #26
 800d566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d568:	425b      	negs	r3, r3
 800d56a:	454b      	cmp	r3, r9
 800d56c:	dc01      	bgt.n	800d572 <_printf_float+0x2b2>
 800d56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d570:	e794      	b.n	800d49c <_printf_float+0x1dc>
 800d572:	2301      	movs	r3, #1
 800d574:	4652      	mov	r2, sl
 800d576:	4631      	mov	r1, r6
 800d578:	4628      	mov	r0, r5
 800d57a:	47b8      	blx	r7
 800d57c:	3001      	adds	r0, #1
 800d57e:	f43f aefc 	beq.w	800d37a <_printf_float+0xba>
 800d582:	f109 0901 	add.w	r9, r9, #1
 800d586:	e7ee      	b.n	800d566 <_printf_float+0x2a6>
 800d588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d58a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d58c:	429a      	cmp	r2, r3
 800d58e:	bfa8      	it	ge
 800d590:	461a      	movge	r2, r3
 800d592:	2a00      	cmp	r2, #0
 800d594:	4691      	mov	r9, r2
 800d596:	dd07      	ble.n	800d5a8 <_printf_float+0x2e8>
 800d598:	4613      	mov	r3, r2
 800d59a:	4631      	mov	r1, r6
 800d59c:	4642      	mov	r2, r8
 800d59e:	4628      	mov	r0, r5
 800d5a0:	47b8      	blx	r7
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	f43f aee9 	beq.w	800d37a <_printf_float+0xba>
 800d5a8:	f104 031a 	add.w	r3, r4, #26
 800d5ac:	f04f 0b00 	mov.w	fp, #0
 800d5b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5b4:	9306      	str	r3, [sp, #24]
 800d5b6:	e015      	b.n	800d5e4 <_printf_float+0x324>
 800d5b8:	7fefffff 	.word	0x7fefffff
 800d5bc:	080100b8 	.word	0x080100b8
 800d5c0:	080100b4 	.word	0x080100b4
 800d5c4:	080100c0 	.word	0x080100c0
 800d5c8:	080100bc 	.word	0x080100bc
 800d5cc:	080100c4 	.word	0x080100c4
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	9a06      	ldr	r2, [sp, #24]
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	47b8      	blx	r7
 800d5da:	3001      	adds	r0, #1
 800d5dc:	f43f aecd 	beq.w	800d37a <_printf_float+0xba>
 800d5e0:	f10b 0b01 	add.w	fp, fp, #1
 800d5e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d5e8:	ebaa 0309 	sub.w	r3, sl, r9
 800d5ec:	455b      	cmp	r3, fp
 800d5ee:	dcef      	bgt.n	800d5d0 <_printf_float+0x310>
 800d5f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	44d0      	add	r8, sl
 800d5f8:	db15      	blt.n	800d626 <_printf_float+0x366>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	07da      	lsls	r2, r3, #31
 800d5fe:	d412      	bmi.n	800d626 <_printf_float+0x366>
 800d600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d602:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d604:	eba3 020a 	sub.w	r2, r3, sl
 800d608:	eba3 0a01 	sub.w	sl, r3, r1
 800d60c:	4592      	cmp	sl, r2
 800d60e:	bfa8      	it	ge
 800d610:	4692      	movge	sl, r2
 800d612:	f1ba 0f00 	cmp.w	sl, #0
 800d616:	dc0e      	bgt.n	800d636 <_printf_float+0x376>
 800d618:	f04f 0800 	mov.w	r8, #0
 800d61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d620:	f104 091a 	add.w	r9, r4, #26
 800d624:	e019      	b.n	800d65a <_printf_float+0x39a>
 800d626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d62a:	4631      	mov	r1, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b8      	blx	r7
 800d630:	3001      	adds	r0, #1
 800d632:	d1e5      	bne.n	800d600 <_printf_float+0x340>
 800d634:	e6a1      	b.n	800d37a <_printf_float+0xba>
 800d636:	4653      	mov	r3, sl
 800d638:	4642      	mov	r2, r8
 800d63a:	4631      	mov	r1, r6
 800d63c:	4628      	mov	r0, r5
 800d63e:	47b8      	blx	r7
 800d640:	3001      	adds	r0, #1
 800d642:	d1e9      	bne.n	800d618 <_printf_float+0x358>
 800d644:	e699      	b.n	800d37a <_printf_float+0xba>
 800d646:	2301      	movs	r3, #1
 800d648:	464a      	mov	r2, r9
 800d64a:	4631      	mov	r1, r6
 800d64c:	4628      	mov	r0, r5
 800d64e:	47b8      	blx	r7
 800d650:	3001      	adds	r0, #1
 800d652:	f43f ae92 	beq.w	800d37a <_printf_float+0xba>
 800d656:	f108 0801 	add.w	r8, r8, #1
 800d65a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d65e:	1a9b      	subs	r3, r3, r2
 800d660:	eba3 030a 	sub.w	r3, r3, sl
 800d664:	4543      	cmp	r3, r8
 800d666:	dcee      	bgt.n	800d646 <_printf_float+0x386>
 800d668:	e74a      	b.n	800d500 <_printf_float+0x240>
 800d66a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d66c:	2a01      	cmp	r2, #1
 800d66e:	dc01      	bgt.n	800d674 <_printf_float+0x3b4>
 800d670:	07db      	lsls	r3, r3, #31
 800d672:	d53a      	bpl.n	800d6ea <_printf_float+0x42a>
 800d674:	2301      	movs	r3, #1
 800d676:	4642      	mov	r2, r8
 800d678:	4631      	mov	r1, r6
 800d67a:	4628      	mov	r0, r5
 800d67c:	47b8      	blx	r7
 800d67e:	3001      	adds	r0, #1
 800d680:	f43f ae7b 	beq.w	800d37a <_printf_float+0xba>
 800d684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d688:	4631      	mov	r1, r6
 800d68a:	4628      	mov	r0, r5
 800d68c:	47b8      	blx	r7
 800d68e:	3001      	adds	r0, #1
 800d690:	f108 0801 	add.w	r8, r8, #1
 800d694:	f43f ae71 	beq.w	800d37a <_printf_float+0xba>
 800d698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d69a:	2200      	movs	r2, #0
 800d69c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800d6a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f7f3 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6aa:	b9c8      	cbnz	r0, 800d6e0 <_printf_float+0x420>
 800d6ac:	4653      	mov	r3, sl
 800d6ae:	4642      	mov	r2, r8
 800d6b0:	4631      	mov	r1, r6
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	47b8      	blx	r7
 800d6b6:	3001      	adds	r0, #1
 800d6b8:	d10e      	bne.n	800d6d8 <_printf_float+0x418>
 800d6ba:	e65e      	b.n	800d37a <_printf_float+0xba>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	4652      	mov	r2, sl
 800d6c0:	4631      	mov	r1, r6
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	47b8      	blx	r7
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	f43f ae57 	beq.w	800d37a <_printf_float+0xba>
 800d6cc:	f108 0801 	add.w	r8, r8, #1
 800d6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	4543      	cmp	r3, r8
 800d6d6:	dcf1      	bgt.n	800d6bc <_printf_float+0x3fc>
 800d6d8:	464b      	mov	r3, r9
 800d6da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6de:	e6de      	b.n	800d49e <_printf_float+0x1de>
 800d6e0:	f04f 0800 	mov.w	r8, #0
 800d6e4:	f104 0a1a 	add.w	sl, r4, #26
 800d6e8:	e7f2      	b.n	800d6d0 <_printf_float+0x410>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e7df      	b.n	800d6ae <_printf_float+0x3ee>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	464a      	mov	r2, r9
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	47b8      	blx	r7
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	f43f ae3e 	beq.w	800d37a <_printf_float+0xba>
 800d6fe:	f108 0801 	add.w	r8, r8, #1
 800d702:	68e3      	ldr	r3, [r4, #12]
 800d704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d706:	1a9b      	subs	r3, r3, r2
 800d708:	4543      	cmp	r3, r8
 800d70a:	dcf0      	bgt.n	800d6ee <_printf_float+0x42e>
 800d70c:	e6fc      	b.n	800d508 <_printf_float+0x248>
 800d70e:	f04f 0800 	mov.w	r8, #0
 800d712:	f104 0919 	add.w	r9, r4, #25
 800d716:	e7f4      	b.n	800d702 <_printf_float+0x442>
 800d718:	2900      	cmp	r1, #0
 800d71a:	f43f ae8b 	beq.w	800d434 <_printf_float+0x174>
 800d71e:	2300      	movs	r3, #0
 800d720:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d724:	ab09      	add	r3, sp, #36	; 0x24
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	ec49 8b10 	vmov	d0, r8, r9
 800d72c:	6022      	str	r2, [r4, #0]
 800d72e:	f8cd a004 	str.w	sl, [sp, #4]
 800d732:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d736:	4628      	mov	r0, r5
 800d738:	f7ff fd2d 	bl	800d196 <__cvt>
 800d73c:	4680      	mov	r8, r0
 800d73e:	e648      	b.n	800d3d2 <_printf_float+0x112>

0800d740 <_printf_common>:
 800d740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d744:	4691      	mov	r9, r2
 800d746:	461f      	mov	r7, r3
 800d748:	688a      	ldr	r2, [r1, #8]
 800d74a:	690b      	ldr	r3, [r1, #16]
 800d74c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d750:	4293      	cmp	r3, r2
 800d752:	bfb8      	it	lt
 800d754:	4613      	movlt	r3, r2
 800d756:	f8c9 3000 	str.w	r3, [r9]
 800d75a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d75e:	4606      	mov	r6, r0
 800d760:	460c      	mov	r4, r1
 800d762:	b112      	cbz	r2, 800d76a <_printf_common+0x2a>
 800d764:	3301      	adds	r3, #1
 800d766:	f8c9 3000 	str.w	r3, [r9]
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	0699      	lsls	r1, r3, #26
 800d76e:	bf42      	ittt	mi
 800d770:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d774:	3302      	addmi	r3, #2
 800d776:	f8c9 3000 	strmi.w	r3, [r9]
 800d77a:	6825      	ldr	r5, [r4, #0]
 800d77c:	f015 0506 	ands.w	r5, r5, #6
 800d780:	d107      	bne.n	800d792 <_printf_common+0x52>
 800d782:	f104 0a19 	add.w	sl, r4, #25
 800d786:	68e3      	ldr	r3, [r4, #12]
 800d788:	f8d9 2000 	ldr.w	r2, [r9]
 800d78c:	1a9b      	subs	r3, r3, r2
 800d78e:	42ab      	cmp	r3, r5
 800d790:	dc28      	bgt.n	800d7e4 <_printf_common+0xa4>
 800d792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d796:	6822      	ldr	r2, [r4, #0]
 800d798:	3300      	adds	r3, #0
 800d79a:	bf18      	it	ne
 800d79c:	2301      	movne	r3, #1
 800d79e:	0692      	lsls	r2, r2, #26
 800d7a0:	d42d      	bmi.n	800d7fe <_printf_common+0xbe>
 800d7a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	47c0      	blx	r8
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	d020      	beq.n	800d7f2 <_printf_common+0xb2>
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	68e5      	ldr	r5, [r4, #12]
 800d7b4:	f8d9 2000 	ldr.w	r2, [r9]
 800d7b8:	f003 0306 	and.w	r3, r3, #6
 800d7bc:	2b04      	cmp	r3, #4
 800d7be:	bf08      	it	eq
 800d7c0:	1aad      	subeq	r5, r5, r2
 800d7c2:	68a3      	ldr	r3, [r4, #8]
 800d7c4:	6922      	ldr	r2, [r4, #16]
 800d7c6:	bf0c      	ite	eq
 800d7c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7cc:	2500      	movne	r5, #0
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	bfc4      	itt	gt
 800d7d2:	1a9b      	subgt	r3, r3, r2
 800d7d4:	18ed      	addgt	r5, r5, r3
 800d7d6:	f04f 0900 	mov.w	r9, #0
 800d7da:	341a      	adds	r4, #26
 800d7dc:	454d      	cmp	r5, r9
 800d7de:	d11a      	bne.n	800d816 <_printf_common+0xd6>
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	e008      	b.n	800d7f6 <_printf_common+0xb6>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4652      	mov	r2, sl
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	47c0      	blx	r8
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	d103      	bne.n	800d7fa <_printf_common+0xba>
 800d7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fa:	3501      	adds	r5, #1
 800d7fc:	e7c3      	b.n	800d786 <_printf_common+0x46>
 800d7fe:	18e1      	adds	r1, r4, r3
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	2030      	movs	r0, #48	; 0x30
 800d804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d808:	4422      	add	r2, r4
 800d80a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d80e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d812:	3302      	adds	r3, #2
 800d814:	e7c5      	b.n	800d7a2 <_printf_common+0x62>
 800d816:	2301      	movs	r3, #1
 800d818:	4622      	mov	r2, r4
 800d81a:	4639      	mov	r1, r7
 800d81c:	4630      	mov	r0, r6
 800d81e:	47c0      	blx	r8
 800d820:	3001      	adds	r0, #1
 800d822:	d0e6      	beq.n	800d7f2 <_printf_common+0xb2>
 800d824:	f109 0901 	add.w	r9, r9, #1
 800d828:	e7d8      	b.n	800d7dc <_printf_common+0x9c>
	...

0800d82c <_printf_i>:
 800d82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d830:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d834:	460c      	mov	r4, r1
 800d836:	7e09      	ldrb	r1, [r1, #24]
 800d838:	b085      	sub	sp, #20
 800d83a:	296e      	cmp	r1, #110	; 0x6e
 800d83c:	4617      	mov	r7, r2
 800d83e:	4606      	mov	r6, r0
 800d840:	4698      	mov	r8, r3
 800d842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d844:	f000 80b3 	beq.w	800d9ae <_printf_i+0x182>
 800d848:	d822      	bhi.n	800d890 <_printf_i+0x64>
 800d84a:	2963      	cmp	r1, #99	; 0x63
 800d84c:	d036      	beq.n	800d8bc <_printf_i+0x90>
 800d84e:	d80a      	bhi.n	800d866 <_printf_i+0x3a>
 800d850:	2900      	cmp	r1, #0
 800d852:	f000 80b9 	beq.w	800d9c8 <_printf_i+0x19c>
 800d856:	2958      	cmp	r1, #88	; 0x58
 800d858:	f000 8083 	beq.w	800d962 <_printf_i+0x136>
 800d85c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d864:	e032      	b.n	800d8cc <_printf_i+0xa0>
 800d866:	2964      	cmp	r1, #100	; 0x64
 800d868:	d001      	beq.n	800d86e <_printf_i+0x42>
 800d86a:	2969      	cmp	r1, #105	; 0x69
 800d86c:	d1f6      	bne.n	800d85c <_printf_i+0x30>
 800d86e:	6820      	ldr	r0, [r4, #0]
 800d870:	6813      	ldr	r3, [r2, #0]
 800d872:	0605      	lsls	r5, r0, #24
 800d874:	f103 0104 	add.w	r1, r3, #4
 800d878:	d52a      	bpl.n	800d8d0 <_printf_i+0xa4>
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6011      	str	r1, [r2, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	da03      	bge.n	800d88a <_printf_i+0x5e>
 800d882:	222d      	movs	r2, #45	; 0x2d
 800d884:	425b      	negs	r3, r3
 800d886:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d88a:	486f      	ldr	r0, [pc, #444]	; (800da48 <_printf_i+0x21c>)
 800d88c:	220a      	movs	r2, #10
 800d88e:	e039      	b.n	800d904 <_printf_i+0xd8>
 800d890:	2973      	cmp	r1, #115	; 0x73
 800d892:	f000 809d 	beq.w	800d9d0 <_printf_i+0x1a4>
 800d896:	d808      	bhi.n	800d8aa <_printf_i+0x7e>
 800d898:	296f      	cmp	r1, #111	; 0x6f
 800d89a:	d020      	beq.n	800d8de <_printf_i+0xb2>
 800d89c:	2970      	cmp	r1, #112	; 0x70
 800d89e:	d1dd      	bne.n	800d85c <_printf_i+0x30>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	f043 0320 	orr.w	r3, r3, #32
 800d8a6:	6023      	str	r3, [r4, #0]
 800d8a8:	e003      	b.n	800d8b2 <_printf_i+0x86>
 800d8aa:	2975      	cmp	r1, #117	; 0x75
 800d8ac:	d017      	beq.n	800d8de <_printf_i+0xb2>
 800d8ae:	2978      	cmp	r1, #120	; 0x78
 800d8b0:	d1d4      	bne.n	800d85c <_printf_i+0x30>
 800d8b2:	2378      	movs	r3, #120	; 0x78
 800d8b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8b8:	4864      	ldr	r0, [pc, #400]	; (800da4c <_printf_i+0x220>)
 800d8ba:	e055      	b.n	800d968 <_printf_i+0x13c>
 800d8bc:	6813      	ldr	r3, [r2, #0]
 800d8be:	1d19      	adds	r1, r3, #4
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	6011      	str	r1, [r2, #0]
 800d8c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e08c      	b.n	800d9ea <_printf_i+0x1be>
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	6011      	str	r1, [r2, #0]
 800d8d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8d8:	bf18      	it	ne
 800d8da:	b21b      	sxthne	r3, r3
 800d8dc:	e7cf      	b.n	800d87e <_printf_i+0x52>
 800d8de:	6813      	ldr	r3, [r2, #0]
 800d8e0:	6825      	ldr	r5, [r4, #0]
 800d8e2:	1d18      	adds	r0, r3, #4
 800d8e4:	6010      	str	r0, [r2, #0]
 800d8e6:	0628      	lsls	r0, r5, #24
 800d8e8:	d501      	bpl.n	800d8ee <_printf_i+0xc2>
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	e002      	b.n	800d8f4 <_printf_i+0xc8>
 800d8ee:	0668      	lsls	r0, r5, #25
 800d8f0:	d5fb      	bpl.n	800d8ea <_printf_i+0xbe>
 800d8f2:	881b      	ldrh	r3, [r3, #0]
 800d8f4:	4854      	ldr	r0, [pc, #336]	; (800da48 <_printf_i+0x21c>)
 800d8f6:	296f      	cmp	r1, #111	; 0x6f
 800d8f8:	bf14      	ite	ne
 800d8fa:	220a      	movne	r2, #10
 800d8fc:	2208      	moveq	r2, #8
 800d8fe:	2100      	movs	r1, #0
 800d900:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d904:	6865      	ldr	r5, [r4, #4]
 800d906:	60a5      	str	r5, [r4, #8]
 800d908:	2d00      	cmp	r5, #0
 800d90a:	f2c0 8095 	blt.w	800da38 <_printf_i+0x20c>
 800d90e:	6821      	ldr	r1, [r4, #0]
 800d910:	f021 0104 	bic.w	r1, r1, #4
 800d914:	6021      	str	r1, [r4, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d13d      	bne.n	800d996 <_printf_i+0x16a>
 800d91a:	2d00      	cmp	r5, #0
 800d91c:	f040 808e 	bne.w	800da3c <_printf_i+0x210>
 800d920:	4665      	mov	r5, ip
 800d922:	2a08      	cmp	r2, #8
 800d924:	d10b      	bne.n	800d93e <_printf_i+0x112>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	07db      	lsls	r3, r3, #31
 800d92a:	d508      	bpl.n	800d93e <_printf_i+0x112>
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	6862      	ldr	r2, [r4, #4]
 800d930:	429a      	cmp	r2, r3
 800d932:	bfde      	ittt	le
 800d934:	2330      	movle	r3, #48	; 0x30
 800d936:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d93a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d93e:	ebac 0305 	sub.w	r3, ip, r5
 800d942:	6123      	str	r3, [r4, #16]
 800d944:	f8cd 8000 	str.w	r8, [sp]
 800d948:	463b      	mov	r3, r7
 800d94a:	aa03      	add	r2, sp, #12
 800d94c:	4621      	mov	r1, r4
 800d94e:	4630      	mov	r0, r6
 800d950:	f7ff fef6 	bl	800d740 <_printf_common>
 800d954:	3001      	adds	r0, #1
 800d956:	d14d      	bne.n	800d9f4 <_printf_i+0x1c8>
 800d958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d95c:	b005      	add	sp, #20
 800d95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d962:	4839      	ldr	r0, [pc, #228]	; (800da48 <_printf_i+0x21c>)
 800d964:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d968:	6813      	ldr	r3, [r2, #0]
 800d96a:	6821      	ldr	r1, [r4, #0]
 800d96c:	1d1d      	adds	r5, r3, #4
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6015      	str	r5, [r2, #0]
 800d972:	060a      	lsls	r2, r1, #24
 800d974:	d50b      	bpl.n	800d98e <_printf_i+0x162>
 800d976:	07ca      	lsls	r2, r1, #31
 800d978:	bf44      	itt	mi
 800d97a:	f041 0120 	orrmi.w	r1, r1, #32
 800d97e:	6021      	strmi	r1, [r4, #0]
 800d980:	b91b      	cbnz	r3, 800d98a <_printf_i+0x15e>
 800d982:	6822      	ldr	r2, [r4, #0]
 800d984:	f022 0220 	bic.w	r2, r2, #32
 800d988:	6022      	str	r2, [r4, #0]
 800d98a:	2210      	movs	r2, #16
 800d98c:	e7b7      	b.n	800d8fe <_printf_i+0xd2>
 800d98e:	064d      	lsls	r5, r1, #25
 800d990:	bf48      	it	mi
 800d992:	b29b      	uxthmi	r3, r3
 800d994:	e7ef      	b.n	800d976 <_printf_i+0x14a>
 800d996:	4665      	mov	r5, ip
 800d998:	fbb3 f1f2 	udiv	r1, r3, r2
 800d99c:	fb02 3311 	mls	r3, r2, r1, r3
 800d9a0:	5cc3      	ldrb	r3, [r0, r3]
 800d9a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	2900      	cmp	r1, #0
 800d9aa:	d1f5      	bne.n	800d998 <_printf_i+0x16c>
 800d9ac:	e7b9      	b.n	800d922 <_printf_i+0xf6>
 800d9ae:	6813      	ldr	r3, [r2, #0]
 800d9b0:	6825      	ldr	r5, [r4, #0]
 800d9b2:	6961      	ldr	r1, [r4, #20]
 800d9b4:	1d18      	adds	r0, r3, #4
 800d9b6:	6010      	str	r0, [r2, #0]
 800d9b8:	0628      	lsls	r0, r5, #24
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	d501      	bpl.n	800d9c2 <_printf_i+0x196>
 800d9be:	6019      	str	r1, [r3, #0]
 800d9c0:	e002      	b.n	800d9c8 <_printf_i+0x19c>
 800d9c2:	066a      	lsls	r2, r5, #25
 800d9c4:	d5fb      	bpl.n	800d9be <_printf_i+0x192>
 800d9c6:	8019      	strh	r1, [r3, #0]
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	6123      	str	r3, [r4, #16]
 800d9cc:	4665      	mov	r5, ip
 800d9ce:	e7b9      	b.n	800d944 <_printf_i+0x118>
 800d9d0:	6813      	ldr	r3, [r2, #0]
 800d9d2:	1d19      	adds	r1, r3, #4
 800d9d4:	6011      	str	r1, [r2, #0]
 800d9d6:	681d      	ldr	r5, [r3, #0]
 800d9d8:	6862      	ldr	r2, [r4, #4]
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4628      	mov	r0, r5
 800d9de:	f7f2 fbff 	bl	80001e0 <memchr>
 800d9e2:	b108      	cbz	r0, 800d9e8 <_printf_i+0x1bc>
 800d9e4:	1b40      	subs	r0, r0, r5
 800d9e6:	6060      	str	r0, [r4, #4]
 800d9e8:	6863      	ldr	r3, [r4, #4]
 800d9ea:	6123      	str	r3, [r4, #16]
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9f2:	e7a7      	b.n	800d944 <_printf_i+0x118>
 800d9f4:	6923      	ldr	r3, [r4, #16]
 800d9f6:	462a      	mov	r2, r5
 800d9f8:	4639      	mov	r1, r7
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	47c0      	blx	r8
 800d9fe:	3001      	adds	r0, #1
 800da00:	d0aa      	beq.n	800d958 <_printf_i+0x12c>
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	079b      	lsls	r3, r3, #30
 800da06:	d413      	bmi.n	800da30 <_printf_i+0x204>
 800da08:	68e0      	ldr	r0, [r4, #12]
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	4298      	cmp	r0, r3
 800da0e:	bfb8      	it	lt
 800da10:	4618      	movlt	r0, r3
 800da12:	e7a3      	b.n	800d95c <_printf_i+0x130>
 800da14:	2301      	movs	r3, #1
 800da16:	464a      	mov	r2, r9
 800da18:	4639      	mov	r1, r7
 800da1a:	4630      	mov	r0, r6
 800da1c:	47c0      	blx	r8
 800da1e:	3001      	adds	r0, #1
 800da20:	d09a      	beq.n	800d958 <_printf_i+0x12c>
 800da22:	3501      	adds	r5, #1
 800da24:	68e3      	ldr	r3, [r4, #12]
 800da26:	9a03      	ldr	r2, [sp, #12]
 800da28:	1a9b      	subs	r3, r3, r2
 800da2a:	42ab      	cmp	r3, r5
 800da2c:	dcf2      	bgt.n	800da14 <_printf_i+0x1e8>
 800da2e:	e7eb      	b.n	800da08 <_printf_i+0x1dc>
 800da30:	2500      	movs	r5, #0
 800da32:	f104 0919 	add.w	r9, r4, #25
 800da36:	e7f5      	b.n	800da24 <_printf_i+0x1f8>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1ac      	bne.n	800d996 <_printf_i+0x16a>
 800da3c:	7803      	ldrb	r3, [r0, #0]
 800da3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da46:	e76c      	b.n	800d922 <_printf_i+0xf6>
 800da48:	080100c6 	.word	0x080100c6
 800da4c:	080100d7 	.word	0x080100d7

0800da50 <iprintf>:
 800da50:	b40f      	push	{r0, r1, r2, r3}
 800da52:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <iprintf+0x2c>)
 800da54:	b513      	push	{r0, r1, r4, lr}
 800da56:	681c      	ldr	r4, [r3, #0]
 800da58:	b124      	cbz	r4, 800da64 <iprintf+0x14>
 800da5a:	69a3      	ldr	r3, [r4, #24]
 800da5c:	b913      	cbnz	r3, 800da64 <iprintf+0x14>
 800da5e:	4620      	mov	r0, r4
 800da60:	f001 f886 	bl	800eb70 <__sinit>
 800da64:	ab05      	add	r3, sp, #20
 800da66:	9a04      	ldr	r2, [sp, #16]
 800da68:	68a1      	ldr	r1, [r4, #8]
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	4620      	mov	r0, r4
 800da6e:	f001 fe91 	bl	800f794 <_vfiprintf_r>
 800da72:	b002      	add	sp, #8
 800da74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da78:	b004      	add	sp, #16
 800da7a:	4770      	bx	lr
 800da7c:	20000120 	.word	0x20000120

0800da80 <_puts_r>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	460e      	mov	r6, r1
 800da84:	4605      	mov	r5, r0
 800da86:	b118      	cbz	r0, 800da90 <_puts_r+0x10>
 800da88:	6983      	ldr	r3, [r0, #24]
 800da8a:	b90b      	cbnz	r3, 800da90 <_puts_r+0x10>
 800da8c:	f001 f870 	bl	800eb70 <__sinit>
 800da90:	69ab      	ldr	r3, [r5, #24]
 800da92:	68ac      	ldr	r4, [r5, #8]
 800da94:	b913      	cbnz	r3, 800da9c <_puts_r+0x1c>
 800da96:	4628      	mov	r0, r5
 800da98:	f001 f86a 	bl	800eb70 <__sinit>
 800da9c:	4b23      	ldr	r3, [pc, #140]	; (800db2c <_puts_r+0xac>)
 800da9e:	429c      	cmp	r4, r3
 800daa0:	d117      	bne.n	800dad2 <_puts_r+0x52>
 800daa2:	686c      	ldr	r4, [r5, #4]
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	071b      	lsls	r3, r3, #28
 800daa8:	d51d      	bpl.n	800dae6 <_puts_r+0x66>
 800daaa:	6923      	ldr	r3, [r4, #16]
 800daac:	b1db      	cbz	r3, 800dae6 <_puts_r+0x66>
 800daae:	3e01      	subs	r6, #1
 800dab0:	68a3      	ldr	r3, [r4, #8]
 800dab2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dab6:	3b01      	subs	r3, #1
 800dab8:	60a3      	str	r3, [r4, #8]
 800daba:	b9e9      	cbnz	r1, 800daf8 <_puts_r+0x78>
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	da2e      	bge.n	800db1e <_puts_r+0x9e>
 800dac0:	4622      	mov	r2, r4
 800dac2:	210a      	movs	r1, #10
 800dac4:	4628      	mov	r0, r5
 800dac6:	f000 f85f 	bl	800db88 <__swbuf_r>
 800daca:	3001      	adds	r0, #1
 800dacc:	d011      	beq.n	800daf2 <_puts_r+0x72>
 800dace:	200a      	movs	r0, #10
 800dad0:	e011      	b.n	800daf6 <_puts_r+0x76>
 800dad2:	4b17      	ldr	r3, [pc, #92]	; (800db30 <_puts_r+0xb0>)
 800dad4:	429c      	cmp	r4, r3
 800dad6:	d101      	bne.n	800dadc <_puts_r+0x5c>
 800dad8:	68ac      	ldr	r4, [r5, #8]
 800dada:	e7e3      	b.n	800daa4 <_puts_r+0x24>
 800dadc:	4b15      	ldr	r3, [pc, #84]	; (800db34 <_puts_r+0xb4>)
 800dade:	429c      	cmp	r4, r3
 800dae0:	bf08      	it	eq
 800dae2:	68ec      	ldreq	r4, [r5, #12]
 800dae4:	e7de      	b.n	800daa4 <_puts_r+0x24>
 800dae6:	4621      	mov	r1, r4
 800dae8:	4628      	mov	r0, r5
 800daea:	f000 f89f 	bl	800dc2c <__swsetup_r>
 800daee:	2800      	cmp	r0, #0
 800daf0:	d0dd      	beq.n	800daae <_puts_r+0x2e>
 800daf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da04      	bge.n	800db06 <_puts_r+0x86>
 800dafc:	69a2      	ldr	r2, [r4, #24]
 800dafe:	429a      	cmp	r2, r3
 800db00:	dc06      	bgt.n	800db10 <_puts_r+0x90>
 800db02:	290a      	cmp	r1, #10
 800db04:	d004      	beq.n	800db10 <_puts_r+0x90>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	6022      	str	r2, [r4, #0]
 800db0c:	7019      	strb	r1, [r3, #0]
 800db0e:	e7cf      	b.n	800dab0 <_puts_r+0x30>
 800db10:	4622      	mov	r2, r4
 800db12:	4628      	mov	r0, r5
 800db14:	f000 f838 	bl	800db88 <__swbuf_r>
 800db18:	3001      	adds	r0, #1
 800db1a:	d1c9      	bne.n	800dab0 <_puts_r+0x30>
 800db1c:	e7e9      	b.n	800daf2 <_puts_r+0x72>
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	200a      	movs	r0, #10
 800db22:	1c5a      	adds	r2, r3, #1
 800db24:	6022      	str	r2, [r4, #0]
 800db26:	7018      	strb	r0, [r3, #0]
 800db28:	e7e5      	b.n	800daf6 <_puts_r+0x76>
 800db2a:	bf00      	nop
 800db2c:	08010118 	.word	0x08010118
 800db30:	08010138 	.word	0x08010138
 800db34:	080100f8 	.word	0x080100f8

0800db38 <puts>:
 800db38:	4b02      	ldr	r3, [pc, #8]	; (800db44 <puts+0xc>)
 800db3a:	4601      	mov	r1, r0
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	f7ff bf9f 	b.w	800da80 <_puts_r>
 800db42:	bf00      	nop
 800db44:	20000120 	.word	0x20000120

0800db48 <siprintf>:
 800db48:	b40e      	push	{r1, r2, r3}
 800db4a:	b500      	push	{lr}
 800db4c:	b09c      	sub	sp, #112	; 0x70
 800db4e:	ab1d      	add	r3, sp, #116	; 0x74
 800db50:	9002      	str	r0, [sp, #8]
 800db52:	9006      	str	r0, [sp, #24]
 800db54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db58:	4809      	ldr	r0, [pc, #36]	; (800db80 <siprintf+0x38>)
 800db5a:	9107      	str	r1, [sp, #28]
 800db5c:	9104      	str	r1, [sp, #16]
 800db5e:	4909      	ldr	r1, [pc, #36]	; (800db84 <siprintf+0x3c>)
 800db60:	f853 2b04 	ldr.w	r2, [r3], #4
 800db64:	9105      	str	r1, [sp, #20]
 800db66:	6800      	ldr	r0, [r0, #0]
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	a902      	add	r1, sp, #8
 800db6c:	f001 fcf0 	bl	800f550 <_svfiprintf_r>
 800db70:	9b02      	ldr	r3, [sp, #8]
 800db72:	2200      	movs	r2, #0
 800db74:	701a      	strb	r2, [r3, #0]
 800db76:	b01c      	add	sp, #112	; 0x70
 800db78:	f85d eb04 	ldr.w	lr, [sp], #4
 800db7c:	b003      	add	sp, #12
 800db7e:	4770      	bx	lr
 800db80:	20000120 	.word	0x20000120
 800db84:	ffff0208 	.word	0xffff0208

0800db88 <__swbuf_r>:
 800db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8a:	460e      	mov	r6, r1
 800db8c:	4614      	mov	r4, r2
 800db8e:	4605      	mov	r5, r0
 800db90:	b118      	cbz	r0, 800db9a <__swbuf_r+0x12>
 800db92:	6983      	ldr	r3, [r0, #24]
 800db94:	b90b      	cbnz	r3, 800db9a <__swbuf_r+0x12>
 800db96:	f000 ffeb 	bl	800eb70 <__sinit>
 800db9a:	4b21      	ldr	r3, [pc, #132]	; (800dc20 <__swbuf_r+0x98>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	d12a      	bne.n	800dbf6 <__swbuf_r+0x6e>
 800dba0:	686c      	ldr	r4, [r5, #4]
 800dba2:	69a3      	ldr	r3, [r4, #24]
 800dba4:	60a3      	str	r3, [r4, #8]
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	071a      	lsls	r2, r3, #28
 800dbaa:	d52e      	bpl.n	800dc0a <__swbuf_r+0x82>
 800dbac:	6923      	ldr	r3, [r4, #16]
 800dbae:	b363      	cbz	r3, 800dc0a <__swbuf_r+0x82>
 800dbb0:	6923      	ldr	r3, [r4, #16]
 800dbb2:	6820      	ldr	r0, [r4, #0]
 800dbb4:	1ac0      	subs	r0, r0, r3
 800dbb6:	6963      	ldr	r3, [r4, #20]
 800dbb8:	b2f6      	uxtb	r6, r6
 800dbba:	4283      	cmp	r3, r0
 800dbbc:	4637      	mov	r7, r6
 800dbbe:	dc04      	bgt.n	800dbca <__swbuf_r+0x42>
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f000 ff6a 	bl	800ea9c <_fflush_r>
 800dbc8:	bb28      	cbnz	r0, 800dc16 <__swbuf_r+0x8e>
 800dbca:	68a3      	ldr	r3, [r4, #8]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	60a3      	str	r3, [r4, #8]
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	6022      	str	r2, [r4, #0]
 800dbd6:	701e      	strb	r6, [r3, #0]
 800dbd8:	6963      	ldr	r3, [r4, #20]
 800dbda:	3001      	adds	r0, #1
 800dbdc:	4283      	cmp	r3, r0
 800dbde:	d004      	beq.n	800dbea <__swbuf_r+0x62>
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	07db      	lsls	r3, r3, #31
 800dbe4:	d519      	bpl.n	800dc1a <__swbuf_r+0x92>
 800dbe6:	2e0a      	cmp	r6, #10
 800dbe8:	d117      	bne.n	800dc1a <__swbuf_r+0x92>
 800dbea:	4621      	mov	r1, r4
 800dbec:	4628      	mov	r0, r5
 800dbee:	f000 ff55 	bl	800ea9c <_fflush_r>
 800dbf2:	b190      	cbz	r0, 800dc1a <__swbuf_r+0x92>
 800dbf4:	e00f      	b.n	800dc16 <__swbuf_r+0x8e>
 800dbf6:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <__swbuf_r+0x9c>)
 800dbf8:	429c      	cmp	r4, r3
 800dbfa:	d101      	bne.n	800dc00 <__swbuf_r+0x78>
 800dbfc:	68ac      	ldr	r4, [r5, #8]
 800dbfe:	e7d0      	b.n	800dba2 <__swbuf_r+0x1a>
 800dc00:	4b09      	ldr	r3, [pc, #36]	; (800dc28 <__swbuf_r+0xa0>)
 800dc02:	429c      	cmp	r4, r3
 800dc04:	bf08      	it	eq
 800dc06:	68ec      	ldreq	r4, [r5, #12]
 800dc08:	e7cb      	b.n	800dba2 <__swbuf_r+0x1a>
 800dc0a:	4621      	mov	r1, r4
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f000 f80d 	bl	800dc2c <__swsetup_r>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d0cc      	beq.n	800dbb0 <__swbuf_r+0x28>
 800dc16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	08010118 	.word	0x08010118
 800dc24:	08010138 	.word	0x08010138
 800dc28:	080100f8 	.word	0x080100f8

0800dc2c <__swsetup_r>:
 800dc2c:	4b32      	ldr	r3, [pc, #200]	; (800dcf8 <__swsetup_r+0xcc>)
 800dc2e:	b570      	push	{r4, r5, r6, lr}
 800dc30:	681d      	ldr	r5, [r3, #0]
 800dc32:	4606      	mov	r6, r0
 800dc34:	460c      	mov	r4, r1
 800dc36:	b125      	cbz	r5, 800dc42 <__swsetup_r+0x16>
 800dc38:	69ab      	ldr	r3, [r5, #24]
 800dc3a:	b913      	cbnz	r3, 800dc42 <__swsetup_r+0x16>
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	f000 ff97 	bl	800eb70 <__sinit>
 800dc42:	4b2e      	ldr	r3, [pc, #184]	; (800dcfc <__swsetup_r+0xd0>)
 800dc44:	429c      	cmp	r4, r3
 800dc46:	d10f      	bne.n	800dc68 <__swsetup_r+0x3c>
 800dc48:	686c      	ldr	r4, [r5, #4]
 800dc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	0715      	lsls	r5, r2, #28
 800dc52:	d42c      	bmi.n	800dcae <__swsetup_r+0x82>
 800dc54:	06d0      	lsls	r0, r2, #27
 800dc56:	d411      	bmi.n	800dc7c <__swsetup_r+0x50>
 800dc58:	2209      	movs	r2, #9
 800dc5a:	6032      	str	r2, [r6, #0]
 800dc5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc60:	81a3      	strh	r3, [r4, #12]
 800dc62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc66:	e03e      	b.n	800dce6 <__swsetup_r+0xba>
 800dc68:	4b25      	ldr	r3, [pc, #148]	; (800dd00 <__swsetup_r+0xd4>)
 800dc6a:	429c      	cmp	r4, r3
 800dc6c:	d101      	bne.n	800dc72 <__swsetup_r+0x46>
 800dc6e:	68ac      	ldr	r4, [r5, #8]
 800dc70:	e7eb      	b.n	800dc4a <__swsetup_r+0x1e>
 800dc72:	4b24      	ldr	r3, [pc, #144]	; (800dd04 <__swsetup_r+0xd8>)
 800dc74:	429c      	cmp	r4, r3
 800dc76:	bf08      	it	eq
 800dc78:	68ec      	ldreq	r4, [r5, #12]
 800dc7a:	e7e6      	b.n	800dc4a <__swsetup_r+0x1e>
 800dc7c:	0751      	lsls	r1, r2, #29
 800dc7e:	d512      	bpl.n	800dca6 <__swsetup_r+0x7a>
 800dc80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc82:	b141      	cbz	r1, 800dc96 <__swsetup_r+0x6a>
 800dc84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc88:	4299      	cmp	r1, r3
 800dc8a:	d002      	beq.n	800dc92 <__swsetup_r+0x66>
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	f001 fb5d 	bl	800f34c <_free_r>
 800dc92:	2300      	movs	r3, #0
 800dc94:	6363      	str	r3, [r4, #52]	; 0x34
 800dc96:	89a3      	ldrh	r3, [r4, #12]
 800dc98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc9c:	81a3      	strh	r3, [r4, #12]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6063      	str	r3, [r4, #4]
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	89a3      	ldrh	r3, [r4, #12]
 800dca8:	f043 0308 	orr.w	r3, r3, #8
 800dcac:	81a3      	strh	r3, [r4, #12]
 800dcae:	6923      	ldr	r3, [r4, #16]
 800dcb0:	b94b      	cbnz	r3, 800dcc6 <__swsetup_r+0x9a>
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcbc:	d003      	beq.n	800dcc6 <__swsetup_r+0x9a>
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f001 f811 	bl	800ece8 <__smakebuf_r>
 800dcc6:	89a2      	ldrh	r2, [r4, #12]
 800dcc8:	f012 0301 	ands.w	r3, r2, #1
 800dccc:	d00c      	beq.n	800dce8 <__swsetup_r+0xbc>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60a3      	str	r3, [r4, #8]
 800dcd2:	6963      	ldr	r3, [r4, #20]
 800dcd4:	425b      	negs	r3, r3
 800dcd6:	61a3      	str	r3, [r4, #24]
 800dcd8:	6923      	ldr	r3, [r4, #16]
 800dcda:	b953      	cbnz	r3, 800dcf2 <__swsetup_r+0xc6>
 800dcdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dce4:	d1ba      	bne.n	800dc5c <__swsetup_r+0x30>
 800dce6:	bd70      	pop	{r4, r5, r6, pc}
 800dce8:	0792      	lsls	r2, r2, #30
 800dcea:	bf58      	it	pl
 800dcec:	6963      	ldrpl	r3, [r4, #20]
 800dcee:	60a3      	str	r3, [r4, #8]
 800dcf0:	e7f2      	b.n	800dcd8 <__swsetup_r+0xac>
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	e7f7      	b.n	800dce6 <__swsetup_r+0xba>
 800dcf6:	bf00      	nop
 800dcf8:	20000120 	.word	0x20000120
 800dcfc:	08010118 	.word	0x08010118
 800dd00:	08010138 	.word	0x08010138
 800dd04:	080100f8 	.word	0x080100f8

0800dd08 <quorem>:
 800dd08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0c:	6903      	ldr	r3, [r0, #16]
 800dd0e:	690c      	ldr	r4, [r1, #16]
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	4680      	mov	r8, r0
 800dd14:	f2c0 8082 	blt.w	800de1c <quorem+0x114>
 800dd18:	3c01      	subs	r4, #1
 800dd1a:	f101 0714 	add.w	r7, r1, #20
 800dd1e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dd22:	f100 0614 	add.w	r6, r0, #20
 800dd26:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dd2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dd2e:	eb06 030c 	add.w	r3, r6, ip
 800dd32:	3501      	adds	r5, #1
 800dd34:	eb07 090c 	add.w	r9, r7, ip
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	fbb0 f5f5 	udiv	r5, r0, r5
 800dd3e:	b395      	cbz	r5, 800dda6 <quorem+0x9e>
 800dd40:	f04f 0a00 	mov.w	sl, #0
 800dd44:	4638      	mov	r0, r7
 800dd46:	46b6      	mov	lr, r6
 800dd48:	46d3      	mov	fp, sl
 800dd4a:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd4e:	b293      	uxth	r3, r2
 800dd50:	fb05 a303 	mla	r3, r5, r3, sl
 800dd54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	ebab 0303 	sub.w	r3, fp, r3
 800dd5e:	0c12      	lsrs	r2, r2, #16
 800dd60:	f8de b000 	ldr.w	fp, [lr]
 800dd64:	fb05 a202 	mla	r2, r5, r2, sl
 800dd68:	fa13 f38b 	uxtah	r3, r3, fp
 800dd6c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dd70:	fa1f fb82 	uxth.w	fp, r2
 800dd74:	f8de 2000 	ldr.w	r2, [lr]
 800dd78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dd7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd86:	4581      	cmp	r9, r0
 800dd88:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dd8c:	f84e 3b04 	str.w	r3, [lr], #4
 800dd90:	d2db      	bcs.n	800dd4a <quorem+0x42>
 800dd92:	f856 300c 	ldr.w	r3, [r6, ip]
 800dd96:	b933      	cbnz	r3, 800dda6 <quorem+0x9e>
 800dd98:	9b01      	ldr	r3, [sp, #4]
 800dd9a:	3b04      	subs	r3, #4
 800dd9c:	429e      	cmp	r6, r3
 800dd9e:	461a      	mov	r2, r3
 800dda0:	d330      	bcc.n	800de04 <quorem+0xfc>
 800dda2:	f8c8 4010 	str.w	r4, [r8, #16]
 800dda6:	4640      	mov	r0, r8
 800dda8:	f001 f9fc 	bl	800f1a4 <__mcmp>
 800ddac:	2800      	cmp	r0, #0
 800ddae:	db25      	blt.n	800ddfc <quorem+0xf4>
 800ddb0:	3501      	adds	r5, #1
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f04f 0c00 	mov.w	ip, #0
 800ddb8:	f857 2b04 	ldr.w	r2, [r7], #4
 800ddbc:	f8d0 e000 	ldr.w	lr, [r0]
 800ddc0:	b293      	uxth	r3, r2
 800ddc2:	ebac 0303 	sub.w	r3, ip, r3
 800ddc6:	0c12      	lsrs	r2, r2, #16
 800ddc8:	fa13 f38e 	uxtah	r3, r3, lr
 800ddcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ddd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddda:	45b9      	cmp	r9, r7
 800dddc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dde0:	f840 3b04 	str.w	r3, [r0], #4
 800dde4:	d2e8      	bcs.n	800ddb8 <quorem+0xb0>
 800dde6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ddea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ddee:	b92a      	cbnz	r2, 800ddfc <quorem+0xf4>
 800ddf0:	3b04      	subs	r3, #4
 800ddf2:	429e      	cmp	r6, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	d30b      	bcc.n	800de10 <quorem+0x108>
 800ddf8:	f8c8 4010 	str.w	r4, [r8, #16]
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	b003      	add	sp, #12
 800de00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de04:	6812      	ldr	r2, [r2, #0]
 800de06:	3b04      	subs	r3, #4
 800de08:	2a00      	cmp	r2, #0
 800de0a:	d1ca      	bne.n	800dda2 <quorem+0x9a>
 800de0c:	3c01      	subs	r4, #1
 800de0e:	e7c5      	b.n	800dd9c <quorem+0x94>
 800de10:	6812      	ldr	r2, [r2, #0]
 800de12:	3b04      	subs	r3, #4
 800de14:	2a00      	cmp	r2, #0
 800de16:	d1ef      	bne.n	800ddf8 <quorem+0xf0>
 800de18:	3c01      	subs	r4, #1
 800de1a:	e7ea      	b.n	800ddf2 <quorem+0xea>
 800de1c:	2000      	movs	r0, #0
 800de1e:	e7ee      	b.n	800ddfe <quorem+0xf6>

0800de20 <_dtoa_r>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	ec57 6b10 	vmov	r6, r7, d0
 800de28:	b097      	sub	sp, #92	; 0x5c
 800de2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de2c:	9106      	str	r1, [sp, #24]
 800de2e:	4604      	mov	r4, r0
 800de30:	920b      	str	r2, [sp, #44]	; 0x2c
 800de32:	9312      	str	r3, [sp, #72]	; 0x48
 800de34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de38:	e9cd 6700 	strd	r6, r7, [sp]
 800de3c:	b93d      	cbnz	r5, 800de4e <_dtoa_r+0x2e>
 800de3e:	2010      	movs	r0, #16
 800de40:	f000 ff92 	bl	800ed68 <malloc>
 800de44:	6260      	str	r0, [r4, #36]	; 0x24
 800de46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de4a:	6005      	str	r5, [r0, #0]
 800de4c:	60c5      	str	r5, [r0, #12]
 800de4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de50:	6819      	ldr	r1, [r3, #0]
 800de52:	b151      	cbz	r1, 800de6a <_dtoa_r+0x4a>
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	604a      	str	r2, [r1, #4]
 800de58:	2301      	movs	r3, #1
 800de5a:	4093      	lsls	r3, r2
 800de5c:	608b      	str	r3, [r1, #8]
 800de5e:	4620      	mov	r0, r4
 800de60:	f000 ffbe 	bl	800ede0 <_Bfree>
 800de64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de66:	2200      	movs	r2, #0
 800de68:	601a      	str	r2, [r3, #0]
 800de6a:	1e3b      	subs	r3, r7, #0
 800de6c:	bfbb      	ittet	lt
 800de6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de72:	9301      	strlt	r3, [sp, #4]
 800de74:	2300      	movge	r3, #0
 800de76:	2201      	movlt	r2, #1
 800de78:	bfac      	ite	ge
 800de7a:	f8c8 3000 	strge.w	r3, [r8]
 800de7e:	f8c8 2000 	strlt.w	r2, [r8]
 800de82:	4baf      	ldr	r3, [pc, #700]	; (800e140 <_dtoa_r+0x320>)
 800de84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de88:	ea33 0308 	bics.w	r3, r3, r8
 800de8c:	d114      	bne.n	800deb8 <_dtoa_r+0x98>
 800de8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de90:	f242 730f 	movw	r3, #9999	; 0x270f
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	9b00      	ldr	r3, [sp, #0]
 800de98:	b923      	cbnz	r3, 800dea4 <_dtoa_r+0x84>
 800de9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800de9e:	2800      	cmp	r0, #0
 800dea0:	f000 8542 	beq.w	800e928 <_dtoa_r+0xb08>
 800dea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dea6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e154 <_dtoa_r+0x334>
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 8544 	beq.w	800e938 <_dtoa_r+0xb18>
 800deb0:	f10b 0303 	add.w	r3, fp, #3
 800deb4:	f000 bd3e 	b.w	800e934 <_dtoa_r+0xb14>
 800deb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800debc:	2200      	movs	r2, #0
 800debe:	2300      	movs	r3, #0
 800dec0:	4630      	mov	r0, r6
 800dec2:	4639      	mov	r1, r7
 800dec4:	f7f2 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 800dec8:	4681      	mov	r9, r0
 800deca:	b168      	cbz	r0, 800dee8 <_dtoa_r+0xc8>
 800decc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dece:	2301      	movs	r3, #1
 800ded0:	6013      	str	r3, [r2, #0]
 800ded2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 8524 	beq.w	800e922 <_dtoa_r+0xb02>
 800deda:	4b9a      	ldr	r3, [pc, #616]	; (800e144 <_dtoa_r+0x324>)
 800dedc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dede:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	f000 bd28 	b.w	800e938 <_dtoa_r+0xb18>
 800dee8:	aa14      	add	r2, sp, #80	; 0x50
 800deea:	a915      	add	r1, sp, #84	; 0x54
 800deec:	ec47 6b10 	vmov	d0, r6, r7
 800def0:	4620      	mov	r0, r4
 800def2:	f001 f9ce 	bl	800f292 <__d2b>
 800def6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800defa:	9004      	str	r0, [sp, #16]
 800defc:	2d00      	cmp	r5, #0
 800defe:	d07c      	beq.n	800dffa <_dtoa_r+0x1da>
 800df00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800df08:	46b2      	mov	sl, r6
 800df0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800df0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800df16:	2200      	movs	r2, #0
 800df18:	4b8b      	ldr	r3, [pc, #556]	; (800e148 <_dtoa_r+0x328>)
 800df1a:	4650      	mov	r0, sl
 800df1c:	4659      	mov	r1, fp
 800df1e:	f7f2 f9b3 	bl	8000288 <__aeabi_dsub>
 800df22:	a381      	add	r3, pc, #516	; (adr r3, 800e128 <_dtoa_r+0x308>)
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	f7f2 fb66 	bl	80005f8 <__aeabi_dmul>
 800df2c:	a380      	add	r3, pc, #512	; (adr r3, 800e130 <_dtoa_r+0x310>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f9ab 	bl	800028c <__adddf3>
 800df36:	4606      	mov	r6, r0
 800df38:	4628      	mov	r0, r5
 800df3a:	460f      	mov	r7, r1
 800df3c:	f7f2 faf2 	bl	8000524 <__aeabi_i2d>
 800df40:	a37d      	add	r3, pc, #500	; (adr r3, 800e138 <_dtoa_r+0x318>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	f7f2 fb57 	bl	80005f8 <__aeabi_dmul>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4630      	mov	r0, r6
 800df50:	4639      	mov	r1, r7
 800df52:	f7f2 f99b 	bl	800028c <__adddf3>
 800df56:	4606      	mov	r6, r0
 800df58:	460f      	mov	r7, r1
 800df5a:	f7f2 fdfd 	bl	8000b58 <__aeabi_d2iz>
 800df5e:	2200      	movs	r2, #0
 800df60:	4682      	mov	sl, r0
 800df62:	2300      	movs	r3, #0
 800df64:	4630      	mov	r0, r6
 800df66:	4639      	mov	r1, r7
 800df68:	f7f2 fdb8 	bl	8000adc <__aeabi_dcmplt>
 800df6c:	b148      	cbz	r0, 800df82 <_dtoa_r+0x162>
 800df6e:	4650      	mov	r0, sl
 800df70:	f7f2 fad8 	bl	8000524 <__aeabi_i2d>
 800df74:	4632      	mov	r2, r6
 800df76:	463b      	mov	r3, r7
 800df78:	f7f2 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 800df7c:	b908      	cbnz	r0, 800df82 <_dtoa_r+0x162>
 800df7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800df82:	f1ba 0f16 	cmp.w	sl, #22
 800df86:	d859      	bhi.n	800e03c <_dtoa_r+0x21c>
 800df88:	4970      	ldr	r1, [pc, #448]	; (800e14c <_dtoa_r+0x32c>)
 800df8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800df8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df96:	f7f2 fdbf 	bl	8000b18 <__aeabi_dcmpgt>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d050      	beq.n	800e040 <_dtoa_r+0x220>
 800df9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfa8:	1b5d      	subs	r5, r3, r5
 800dfaa:	f1b5 0801 	subs.w	r8, r5, #1
 800dfae:	bf49      	itett	mi
 800dfb0:	f1c5 0301 	rsbmi	r3, r5, #1
 800dfb4:	2300      	movpl	r3, #0
 800dfb6:	9305      	strmi	r3, [sp, #20]
 800dfb8:	f04f 0800 	movmi.w	r8, #0
 800dfbc:	bf58      	it	pl
 800dfbe:	9305      	strpl	r3, [sp, #20]
 800dfc0:	f1ba 0f00 	cmp.w	sl, #0
 800dfc4:	db3e      	blt.n	800e044 <_dtoa_r+0x224>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	44d0      	add	r8, sl
 800dfca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800dfce:	9307      	str	r3, [sp, #28]
 800dfd0:	9b06      	ldr	r3, [sp, #24]
 800dfd2:	2b09      	cmp	r3, #9
 800dfd4:	f200 8090 	bhi.w	800e0f8 <_dtoa_r+0x2d8>
 800dfd8:	2b05      	cmp	r3, #5
 800dfda:	bfc4      	itt	gt
 800dfdc:	3b04      	subgt	r3, #4
 800dfde:	9306      	strgt	r3, [sp, #24]
 800dfe0:	9b06      	ldr	r3, [sp, #24]
 800dfe2:	f1a3 0302 	sub.w	r3, r3, #2
 800dfe6:	bfcc      	ite	gt
 800dfe8:	2500      	movgt	r5, #0
 800dfea:	2501      	movle	r5, #1
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	f200 808f 	bhi.w	800e110 <_dtoa_r+0x2f0>
 800dff2:	e8df f003 	tbb	[pc, r3]
 800dff6:	7f7d      	.short	0x7f7d
 800dff8:	7131      	.short	0x7131
 800dffa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800dffe:	441d      	add	r5, r3
 800e000:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e004:	2820      	cmp	r0, #32
 800e006:	dd13      	ble.n	800e030 <_dtoa_r+0x210>
 800e008:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e00c:	9b00      	ldr	r3, [sp, #0]
 800e00e:	fa08 f800 	lsl.w	r8, r8, r0
 800e012:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e016:	fa23 f000 	lsr.w	r0, r3, r0
 800e01a:	ea48 0000 	orr.w	r0, r8, r0
 800e01e:	f7f2 fa71 	bl	8000504 <__aeabi_ui2d>
 800e022:	2301      	movs	r3, #1
 800e024:	4682      	mov	sl, r0
 800e026:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e02a:	3d01      	subs	r5, #1
 800e02c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e02e:	e772      	b.n	800df16 <_dtoa_r+0xf6>
 800e030:	9b00      	ldr	r3, [sp, #0]
 800e032:	f1c0 0020 	rsb	r0, r0, #32
 800e036:	fa03 f000 	lsl.w	r0, r3, r0
 800e03a:	e7f0      	b.n	800e01e <_dtoa_r+0x1fe>
 800e03c:	2301      	movs	r3, #1
 800e03e:	e7b1      	b.n	800dfa4 <_dtoa_r+0x184>
 800e040:	900f      	str	r0, [sp, #60]	; 0x3c
 800e042:	e7b0      	b.n	800dfa6 <_dtoa_r+0x186>
 800e044:	9b05      	ldr	r3, [sp, #20]
 800e046:	eba3 030a 	sub.w	r3, r3, sl
 800e04a:	9305      	str	r3, [sp, #20]
 800e04c:	f1ca 0300 	rsb	r3, sl, #0
 800e050:	9307      	str	r3, [sp, #28]
 800e052:	2300      	movs	r3, #0
 800e054:	930e      	str	r3, [sp, #56]	; 0x38
 800e056:	e7bb      	b.n	800dfd0 <_dtoa_r+0x1b0>
 800e058:	2301      	movs	r3, #1
 800e05a:	930a      	str	r3, [sp, #40]	; 0x28
 800e05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e05e:	2b00      	cmp	r3, #0
 800e060:	dd59      	ble.n	800e116 <_dtoa_r+0x2f6>
 800e062:	9302      	str	r3, [sp, #8]
 800e064:	4699      	mov	r9, r3
 800e066:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e068:	2200      	movs	r2, #0
 800e06a:	6072      	str	r2, [r6, #4]
 800e06c:	2204      	movs	r2, #4
 800e06e:	f102 0014 	add.w	r0, r2, #20
 800e072:	4298      	cmp	r0, r3
 800e074:	6871      	ldr	r1, [r6, #4]
 800e076:	d953      	bls.n	800e120 <_dtoa_r+0x300>
 800e078:	4620      	mov	r0, r4
 800e07a:	f000 fe7d 	bl	800ed78 <_Balloc>
 800e07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e080:	6030      	str	r0, [r6, #0]
 800e082:	f1b9 0f0e 	cmp.w	r9, #14
 800e086:	f8d3 b000 	ldr.w	fp, [r3]
 800e08a:	f200 80e6 	bhi.w	800e25a <_dtoa_r+0x43a>
 800e08e:	2d00      	cmp	r5, #0
 800e090:	f000 80e3 	beq.w	800e25a <_dtoa_r+0x43a>
 800e094:	ed9d 7b00 	vldr	d7, [sp]
 800e098:	f1ba 0f00 	cmp.w	sl, #0
 800e09c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e0a0:	dd74      	ble.n	800e18c <_dtoa_r+0x36c>
 800e0a2:	4a2a      	ldr	r2, [pc, #168]	; (800e14c <_dtoa_r+0x32c>)
 800e0a4:	f00a 030f 	and.w	r3, sl, #15
 800e0a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e0ac:	ed93 7b00 	vldr	d7, [r3]
 800e0b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e0b4:	06f0      	lsls	r0, r6, #27
 800e0b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e0ba:	d565      	bpl.n	800e188 <_dtoa_r+0x368>
 800e0bc:	4b24      	ldr	r3, [pc, #144]	; (800e150 <_dtoa_r+0x330>)
 800e0be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e0c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0c6:	f7f2 fbc1 	bl	800084c <__aeabi_ddiv>
 800e0ca:	e9cd 0100 	strd	r0, r1, [sp]
 800e0ce:	f006 060f 	and.w	r6, r6, #15
 800e0d2:	2503      	movs	r5, #3
 800e0d4:	4f1e      	ldr	r7, [pc, #120]	; (800e150 <_dtoa_r+0x330>)
 800e0d6:	e04c      	b.n	800e172 <_dtoa_r+0x352>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	930a      	str	r3, [sp, #40]	; 0x28
 800e0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0de:	4453      	add	r3, sl
 800e0e0:	f103 0901 	add.w	r9, r3, #1
 800e0e4:	9302      	str	r3, [sp, #8]
 800e0e6:	464b      	mov	r3, r9
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	bfb8      	it	lt
 800e0ec:	2301      	movlt	r3, #1
 800e0ee:	e7ba      	b.n	800e066 <_dtoa_r+0x246>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e7b2      	b.n	800e05a <_dtoa_r+0x23a>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e7f0      	b.n	800e0da <_dtoa_r+0x2ba>
 800e0f8:	2501      	movs	r5, #1
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	9306      	str	r3, [sp, #24]
 800e0fe:	950a      	str	r5, [sp, #40]	; 0x28
 800e100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e104:	9302      	str	r3, [sp, #8]
 800e106:	4699      	mov	r9, r3
 800e108:	2200      	movs	r2, #0
 800e10a:	2312      	movs	r3, #18
 800e10c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e10e:	e7aa      	b.n	800e066 <_dtoa_r+0x246>
 800e110:	2301      	movs	r3, #1
 800e112:	930a      	str	r3, [sp, #40]	; 0x28
 800e114:	e7f4      	b.n	800e100 <_dtoa_r+0x2e0>
 800e116:	2301      	movs	r3, #1
 800e118:	9302      	str	r3, [sp, #8]
 800e11a:	4699      	mov	r9, r3
 800e11c:	461a      	mov	r2, r3
 800e11e:	e7f5      	b.n	800e10c <_dtoa_r+0x2ec>
 800e120:	3101      	adds	r1, #1
 800e122:	6071      	str	r1, [r6, #4]
 800e124:	0052      	lsls	r2, r2, #1
 800e126:	e7a2      	b.n	800e06e <_dtoa_r+0x24e>
 800e128:	636f4361 	.word	0x636f4361
 800e12c:	3fd287a7 	.word	0x3fd287a7
 800e130:	8b60c8b3 	.word	0x8b60c8b3
 800e134:	3fc68a28 	.word	0x3fc68a28
 800e138:	509f79fb 	.word	0x509f79fb
 800e13c:	3fd34413 	.word	0x3fd34413
 800e140:	7ff00000 	.word	0x7ff00000
 800e144:	080100c5 	.word	0x080100c5
 800e148:	3ff80000 	.word	0x3ff80000
 800e14c:	08010180 	.word	0x08010180
 800e150:	08010158 	.word	0x08010158
 800e154:	080100f1 	.word	0x080100f1
 800e158:	07f1      	lsls	r1, r6, #31
 800e15a:	d508      	bpl.n	800e16e <_dtoa_r+0x34e>
 800e15c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e164:	f7f2 fa48 	bl	80005f8 <__aeabi_dmul>
 800e168:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e16c:	3501      	adds	r5, #1
 800e16e:	1076      	asrs	r6, r6, #1
 800e170:	3708      	adds	r7, #8
 800e172:	2e00      	cmp	r6, #0
 800e174:	d1f0      	bne.n	800e158 <_dtoa_r+0x338>
 800e176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e17a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e17e:	f7f2 fb65 	bl	800084c <__aeabi_ddiv>
 800e182:	e9cd 0100 	strd	r0, r1, [sp]
 800e186:	e01a      	b.n	800e1be <_dtoa_r+0x39e>
 800e188:	2502      	movs	r5, #2
 800e18a:	e7a3      	b.n	800e0d4 <_dtoa_r+0x2b4>
 800e18c:	f000 80a0 	beq.w	800e2d0 <_dtoa_r+0x4b0>
 800e190:	f1ca 0600 	rsb	r6, sl, #0
 800e194:	4b9f      	ldr	r3, [pc, #636]	; (800e414 <_dtoa_r+0x5f4>)
 800e196:	4fa0      	ldr	r7, [pc, #640]	; (800e418 <_dtoa_r+0x5f8>)
 800e198:	f006 020f 	and.w	r2, r6, #15
 800e19c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e1a8:	f7f2 fa26 	bl	80005f8 <__aeabi_dmul>
 800e1ac:	e9cd 0100 	strd	r0, r1, [sp]
 800e1b0:	1136      	asrs	r6, r6, #4
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	2502      	movs	r5, #2
 800e1b6:	2e00      	cmp	r6, #0
 800e1b8:	d17f      	bne.n	800e2ba <_dtoa_r+0x49a>
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1e1      	bne.n	800e182 <_dtoa_r+0x362>
 800e1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f000 8087 	beq.w	800e2d4 <_dtoa_r+0x4b4>
 800e1c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	4b93      	ldr	r3, [pc, #588]	; (800e41c <_dtoa_r+0x5fc>)
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	4639      	mov	r1, r7
 800e1d2:	f7f2 fc83 	bl	8000adc <__aeabi_dcmplt>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d07c      	beq.n	800e2d4 <_dtoa_r+0x4b4>
 800e1da:	f1b9 0f00 	cmp.w	r9, #0
 800e1de:	d079      	beq.n	800e2d4 <_dtoa_r+0x4b4>
 800e1e0:	9b02      	ldr	r3, [sp, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dd35      	ble.n	800e252 <_dtoa_r+0x432>
 800e1e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800e1ea:	9308      	str	r3, [sp, #32]
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	4b8b      	ldr	r3, [pc, #556]	; (800e420 <_dtoa_r+0x600>)
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f7f2 fa00 	bl	80005f8 <__aeabi_dmul>
 800e1f8:	e9cd 0100 	strd	r0, r1, [sp]
 800e1fc:	9f02      	ldr	r7, [sp, #8]
 800e1fe:	3501      	adds	r5, #1
 800e200:	4628      	mov	r0, r5
 800e202:	f7f2 f98f 	bl	8000524 <__aeabi_i2d>
 800e206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e20a:	f7f2 f9f5 	bl	80005f8 <__aeabi_dmul>
 800e20e:	2200      	movs	r2, #0
 800e210:	4b84      	ldr	r3, [pc, #528]	; (800e424 <_dtoa_r+0x604>)
 800e212:	f7f2 f83b 	bl	800028c <__adddf3>
 800e216:	4605      	mov	r5, r0
 800e218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e21c:	2f00      	cmp	r7, #0
 800e21e:	d15d      	bne.n	800e2dc <_dtoa_r+0x4bc>
 800e220:	2200      	movs	r2, #0
 800e222:	4b81      	ldr	r3, [pc, #516]	; (800e428 <_dtoa_r+0x608>)
 800e224:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e228:	f7f2 f82e 	bl	8000288 <__aeabi_dsub>
 800e22c:	462a      	mov	r2, r5
 800e22e:	4633      	mov	r3, r6
 800e230:	e9cd 0100 	strd	r0, r1, [sp]
 800e234:	f7f2 fc70 	bl	8000b18 <__aeabi_dcmpgt>
 800e238:	2800      	cmp	r0, #0
 800e23a:	f040 8288 	bne.w	800e74e <_dtoa_r+0x92e>
 800e23e:	462a      	mov	r2, r5
 800e240:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e244:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e248:	f7f2 fc48 	bl	8000adc <__aeabi_dcmplt>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	f040 827c 	bne.w	800e74a <_dtoa_r+0x92a>
 800e252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e256:	e9cd 2300 	strd	r2, r3, [sp]
 800e25a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f2c0 8150 	blt.w	800e502 <_dtoa_r+0x6e2>
 800e262:	f1ba 0f0e 	cmp.w	sl, #14
 800e266:	f300 814c 	bgt.w	800e502 <_dtoa_r+0x6e2>
 800e26a:	4b6a      	ldr	r3, [pc, #424]	; (800e414 <_dtoa_r+0x5f4>)
 800e26c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e270:	ed93 7b00 	vldr	d7, [r3]
 800e274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e276:	2b00      	cmp	r3, #0
 800e278:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e27c:	f280 80d8 	bge.w	800e430 <_dtoa_r+0x610>
 800e280:	f1b9 0f00 	cmp.w	r9, #0
 800e284:	f300 80d4 	bgt.w	800e430 <_dtoa_r+0x610>
 800e288:	f040 825e 	bne.w	800e748 <_dtoa_r+0x928>
 800e28c:	2200      	movs	r2, #0
 800e28e:	4b66      	ldr	r3, [pc, #408]	; (800e428 <_dtoa_r+0x608>)
 800e290:	ec51 0b17 	vmov	r0, r1, d7
 800e294:	f7f2 f9b0 	bl	80005f8 <__aeabi_dmul>
 800e298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e29c:	f7f2 fc32 	bl	8000b04 <__aeabi_dcmpge>
 800e2a0:	464f      	mov	r7, r9
 800e2a2:	464e      	mov	r6, r9
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	f040 8234 	bne.w	800e712 <_dtoa_r+0x8f2>
 800e2aa:	2331      	movs	r3, #49	; 0x31
 800e2ac:	f10b 0501 	add.w	r5, fp, #1
 800e2b0:	f88b 3000 	strb.w	r3, [fp]
 800e2b4:	f10a 0a01 	add.w	sl, sl, #1
 800e2b8:	e22f      	b.n	800e71a <_dtoa_r+0x8fa>
 800e2ba:	07f2      	lsls	r2, r6, #31
 800e2bc:	d505      	bpl.n	800e2ca <_dtoa_r+0x4aa>
 800e2be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2c2:	f7f2 f999 	bl	80005f8 <__aeabi_dmul>
 800e2c6:	3501      	adds	r5, #1
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	1076      	asrs	r6, r6, #1
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	e772      	b.n	800e1b6 <_dtoa_r+0x396>
 800e2d0:	2502      	movs	r5, #2
 800e2d2:	e774      	b.n	800e1be <_dtoa_r+0x39e>
 800e2d4:	f8cd a020 	str.w	sl, [sp, #32]
 800e2d8:	464f      	mov	r7, r9
 800e2da:	e791      	b.n	800e200 <_dtoa_r+0x3e0>
 800e2dc:	4b4d      	ldr	r3, [pc, #308]	; (800e414 <_dtoa_r+0x5f4>)
 800e2de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d047      	beq.n	800e37c <_dtoa_r+0x55c>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	494e      	ldr	r1, [pc, #312]	; (800e42c <_dtoa_r+0x60c>)
 800e2f4:	f7f2 faaa 	bl	800084c <__aeabi_ddiv>
 800e2f8:	462a      	mov	r2, r5
 800e2fa:	4633      	mov	r3, r6
 800e2fc:	f7f1 ffc4 	bl	8000288 <__aeabi_dsub>
 800e300:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e304:	465d      	mov	r5, fp
 800e306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e30a:	f7f2 fc25 	bl	8000b58 <__aeabi_d2iz>
 800e30e:	4606      	mov	r6, r0
 800e310:	f7f2 f908 	bl	8000524 <__aeabi_i2d>
 800e314:	4602      	mov	r2, r0
 800e316:	460b      	mov	r3, r1
 800e318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e31c:	f7f1 ffb4 	bl	8000288 <__aeabi_dsub>
 800e320:	3630      	adds	r6, #48	; 0x30
 800e322:	f805 6b01 	strb.w	r6, [r5], #1
 800e326:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e32a:	e9cd 0100 	strd	r0, r1, [sp]
 800e32e:	f7f2 fbd5 	bl	8000adc <__aeabi_dcmplt>
 800e332:	2800      	cmp	r0, #0
 800e334:	d163      	bne.n	800e3fe <_dtoa_r+0x5de>
 800e336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e33a:	2000      	movs	r0, #0
 800e33c:	4937      	ldr	r1, [pc, #220]	; (800e41c <_dtoa_r+0x5fc>)
 800e33e:	f7f1 ffa3 	bl	8000288 <__aeabi_dsub>
 800e342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e346:	f7f2 fbc9 	bl	8000adc <__aeabi_dcmplt>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	f040 80b7 	bne.w	800e4be <_dtoa_r+0x69e>
 800e350:	eba5 030b 	sub.w	r3, r5, fp
 800e354:	429f      	cmp	r7, r3
 800e356:	f77f af7c 	ble.w	800e252 <_dtoa_r+0x432>
 800e35a:	2200      	movs	r2, #0
 800e35c:	4b30      	ldr	r3, [pc, #192]	; (800e420 <_dtoa_r+0x600>)
 800e35e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e362:	f7f2 f949 	bl	80005f8 <__aeabi_dmul>
 800e366:	2200      	movs	r2, #0
 800e368:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e36c:	4b2c      	ldr	r3, [pc, #176]	; (800e420 <_dtoa_r+0x600>)
 800e36e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e372:	f7f2 f941 	bl	80005f8 <__aeabi_dmul>
 800e376:	e9cd 0100 	strd	r0, r1, [sp]
 800e37a:	e7c4      	b.n	800e306 <_dtoa_r+0x4e6>
 800e37c:	462a      	mov	r2, r5
 800e37e:	4633      	mov	r3, r6
 800e380:	f7f2 f93a 	bl	80005f8 <__aeabi_dmul>
 800e384:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e388:	eb0b 0507 	add.w	r5, fp, r7
 800e38c:	465e      	mov	r6, fp
 800e38e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e392:	f7f2 fbe1 	bl	8000b58 <__aeabi_d2iz>
 800e396:	4607      	mov	r7, r0
 800e398:	f7f2 f8c4 	bl	8000524 <__aeabi_i2d>
 800e39c:	3730      	adds	r7, #48	; 0x30
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3a6:	f7f1 ff6f 	bl	8000288 <__aeabi_dsub>
 800e3aa:	f806 7b01 	strb.w	r7, [r6], #1
 800e3ae:	42ae      	cmp	r6, r5
 800e3b0:	e9cd 0100 	strd	r0, r1, [sp]
 800e3b4:	f04f 0200 	mov.w	r2, #0
 800e3b8:	d126      	bne.n	800e408 <_dtoa_r+0x5e8>
 800e3ba:	4b1c      	ldr	r3, [pc, #112]	; (800e42c <_dtoa_r+0x60c>)
 800e3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e3c0:	f7f1 ff64 	bl	800028c <__adddf3>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3cc:	f7f2 fba4 	bl	8000b18 <__aeabi_dcmpgt>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d174      	bne.n	800e4be <_dtoa_r+0x69e>
 800e3d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e3d8:	2000      	movs	r0, #0
 800e3da:	4914      	ldr	r1, [pc, #80]	; (800e42c <_dtoa_r+0x60c>)
 800e3dc:	f7f1 ff54 	bl	8000288 <__aeabi_dsub>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3e8:	f7f2 fb78 	bl	8000adc <__aeabi_dcmplt>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	f43f af30 	beq.w	800e252 <_dtoa_r+0x432>
 800e3f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3f6:	2b30      	cmp	r3, #48	; 0x30
 800e3f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e3fc:	d002      	beq.n	800e404 <_dtoa_r+0x5e4>
 800e3fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e402:	e04a      	b.n	800e49a <_dtoa_r+0x67a>
 800e404:	4615      	mov	r5, r2
 800e406:	e7f4      	b.n	800e3f2 <_dtoa_r+0x5d2>
 800e408:	4b05      	ldr	r3, [pc, #20]	; (800e420 <_dtoa_r+0x600>)
 800e40a:	f7f2 f8f5 	bl	80005f8 <__aeabi_dmul>
 800e40e:	e9cd 0100 	strd	r0, r1, [sp]
 800e412:	e7bc      	b.n	800e38e <_dtoa_r+0x56e>
 800e414:	08010180 	.word	0x08010180
 800e418:	08010158 	.word	0x08010158
 800e41c:	3ff00000 	.word	0x3ff00000
 800e420:	40240000 	.word	0x40240000
 800e424:	401c0000 	.word	0x401c0000
 800e428:	40140000 	.word	0x40140000
 800e42c:	3fe00000 	.word	0x3fe00000
 800e430:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e434:	465d      	mov	r5, fp
 800e436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e43a:	4630      	mov	r0, r6
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f2 fa05 	bl	800084c <__aeabi_ddiv>
 800e442:	f7f2 fb89 	bl	8000b58 <__aeabi_d2iz>
 800e446:	4680      	mov	r8, r0
 800e448:	f7f2 f86c 	bl	8000524 <__aeabi_i2d>
 800e44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e450:	f7f2 f8d2 	bl	80005f8 <__aeabi_dmul>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4630      	mov	r0, r6
 800e45a:	4639      	mov	r1, r7
 800e45c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e460:	f7f1 ff12 	bl	8000288 <__aeabi_dsub>
 800e464:	f805 6b01 	strb.w	r6, [r5], #1
 800e468:	eba5 060b 	sub.w	r6, r5, fp
 800e46c:	45b1      	cmp	r9, r6
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	d139      	bne.n	800e4e8 <_dtoa_r+0x6c8>
 800e474:	f7f1 ff0a 	bl	800028c <__adddf3>
 800e478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e47c:	4606      	mov	r6, r0
 800e47e:	460f      	mov	r7, r1
 800e480:	f7f2 fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 800e484:	b9c8      	cbnz	r0, 800e4ba <_dtoa_r+0x69a>
 800e486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e48a:	4630      	mov	r0, r6
 800e48c:	4639      	mov	r1, r7
 800e48e:	f7f2 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e492:	b110      	cbz	r0, 800e49a <_dtoa_r+0x67a>
 800e494:	f018 0f01 	tst.w	r8, #1
 800e498:	d10f      	bne.n	800e4ba <_dtoa_r+0x69a>
 800e49a:	9904      	ldr	r1, [sp, #16]
 800e49c:	4620      	mov	r0, r4
 800e49e:	f000 fc9f 	bl	800ede0 <_Bfree>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e4a6:	702b      	strb	r3, [r5, #0]
 800e4a8:	f10a 0301 	add.w	r3, sl, #1
 800e4ac:	6013      	str	r3, [r2, #0]
 800e4ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 8241 	beq.w	800e938 <_dtoa_r+0xb18>
 800e4b6:	601d      	str	r5, [r3, #0]
 800e4b8:	e23e      	b.n	800e938 <_dtoa_r+0xb18>
 800e4ba:	f8cd a020 	str.w	sl, [sp, #32]
 800e4be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4c2:	2a39      	cmp	r2, #57	; 0x39
 800e4c4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800e4c8:	d108      	bne.n	800e4dc <_dtoa_r+0x6bc>
 800e4ca:	459b      	cmp	fp, r3
 800e4cc:	d10a      	bne.n	800e4e4 <_dtoa_r+0x6c4>
 800e4ce:	9b08      	ldr	r3, [sp, #32]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	9308      	str	r3, [sp, #32]
 800e4d4:	2330      	movs	r3, #48	; 0x30
 800e4d6:	f88b 3000 	strb.w	r3, [fp]
 800e4da:	465b      	mov	r3, fp
 800e4dc:	781a      	ldrb	r2, [r3, #0]
 800e4de:	3201      	adds	r2, #1
 800e4e0:	701a      	strb	r2, [r3, #0]
 800e4e2:	e78c      	b.n	800e3fe <_dtoa_r+0x5de>
 800e4e4:	461d      	mov	r5, r3
 800e4e6:	e7ea      	b.n	800e4be <_dtoa_r+0x69e>
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	4b9b      	ldr	r3, [pc, #620]	; (800e758 <_dtoa_r+0x938>)
 800e4ec:	f7f2 f884 	bl	80005f8 <__aeabi_dmul>
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	460f      	mov	r7, r1
 800e4f8:	f7f2 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d09a      	beq.n	800e436 <_dtoa_r+0x616>
 800e500:	e7cb      	b.n	800e49a <_dtoa_r+0x67a>
 800e502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e504:	2a00      	cmp	r2, #0
 800e506:	f000 808b 	beq.w	800e620 <_dtoa_r+0x800>
 800e50a:	9a06      	ldr	r2, [sp, #24]
 800e50c:	2a01      	cmp	r2, #1
 800e50e:	dc6e      	bgt.n	800e5ee <_dtoa_r+0x7ce>
 800e510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e512:	2a00      	cmp	r2, #0
 800e514:	d067      	beq.n	800e5e6 <_dtoa_r+0x7c6>
 800e516:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e51a:	9f07      	ldr	r7, [sp, #28]
 800e51c:	9d05      	ldr	r5, [sp, #20]
 800e51e:	9a05      	ldr	r2, [sp, #20]
 800e520:	2101      	movs	r1, #1
 800e522:	441a      	add	r2, r3
 800e524:	4620      	mov	r0, r4
 800e526:	9205      	str	r2, [sp, #20]
 800e528:	4498      	add	r8, r3
 800e52a:	f000 fcf9 	bl	800ef20 <__i2b>
 800e52e:	4606      	mov	r6, r0
 800e530:	2d00      	cmp	r5, #0
 800e532:	dd0c      	ble.n	800e54e <_dtoa_r+0x72e>
 800e534:	f1b8 0f00 	cmp.w	r8, #0
 800e538:	dd09      	ble.n	800e54e <_dtoa_r+0x72e>
 800e53a:	4545      	cmp	r5, r8
 800e53c:	9a05      	ldr	r2, [sp, #20]
 800e53e:	462b      	mov	r3, r5
 800e540:	bfa8      	it	ge
 800e542:	4643      	movge	r3, r8
 800e544:	1ad2      	subs	r2, r2, r3
 800e546:	9205      	str	r2, [sp, #20]
 800e548:	1aed      	subs	r5, r5, r3
 800e54a:	eba8 0803 	sub.w	r8, r8, r3
 800e54e:	9b07      	ldr	r3, [sp, #28]
 800e550:	b1eb      	cbz	r3, 800e58e <_dtoa_r+0x76e>
 800e552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e554:	2b00      	cmp	r3, #0
 800e556:	d067      	beq.n	800e628 <_dtoa_r+0x808>
 800e558:	b18f      	cbz	r7, 800e57e <_dtoa_r+0x75e>
 800e55a:	4631      	mov	r1, r6
 800e55c:	463a      	mov	r2, r7
 800e55e:	4620      	mov	r0, r4
 800e560:	f000 fd7e 	bl	800f060 <__pow5mult>
 800e564:	9a04      	ldr	r2, [sp, #16]
 800e566:	4601      	mov	r1, r0
 800e568:	4606      	mov	r6, r0
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 fce1 	bl	800ef32 <__multiply>
 800e570:	9904      	ldr	r1, [sp, #16]
 800e572:	9008      	str	r0, [sp, #32]
 800e574:	4620      	mov	r0, r4
 800e576:	f000 fc33 	bl	800ede0 <_Bfree>
 800e57a:	9b08      	ldr	r3, [sp, #32]
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	9b07      	ldr	r3, [sp, #28]
 800e580:	1bda      	subs	r2, r3, r7
 800e582:	d004      	beq.n	800e58e <_dtoa_r+0x76e>
 800e584:	9904      	ldr	r1, [sp, #16]
 800e586:	4620      	mov	r0, r4
 800e588:	f000 fd6a 	bl	800f060 <__pow5mult>
 800e58c:	9004      	str	r0, [sp, #16]
 800e58e:	2101      	movs	r1, #1
 800e590:	4620      	mov	r0, r4
 800e592:	f000 fcc5 	bl	800ef20 <__i2b>
 800e596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e598:	4607      	mov	r7, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 81d0 	beq.w	800e940 <_dtoa_r+0xb20>
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	4601      	mov	r1, r0
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f000 fd5b 	bl	800f060 <__pow5mult>
 800e5aa:	9b06      	ldr	r3, [sp, #24]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	4607      	mov	r7, r0
 800e5b0:	dc40      	bgt.n	800e634 <_dtoa_r+0x814>
 800e5b2:	9b00      	ldr	r3, [sp, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d139      	bne.n	800e62c <_dtoa_r+0x80c>
 800e5b8:	9b01      	ldr	r3, [sp, #4]
 800e5ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d136      	bne.n	800e630 <_dtoa_r+0x810>
 800e5c2:	9b01      	ldr	r3, [sp, #4]
 800e5c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5c8:	0d1b      	lsrs	r3, r3, #20
 800e5ca:	051b      	lsls	r3, r3, #20
 800e5cc:	b12b      	cbz	r3, 800e5da <_dtoa_r+0x7ba>
 800e5ce:	9b05      	ldr	r3, [sp, #20]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	9305      	str	r3, [sp, #20]
 800e5d4:	f108 0801 	add.w	r8, r8, #1
 800e5d8:	2301      	movs	r3, #1
 800e5da:	9307      	str	r3, [sp, #28]
 800e5dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d12a      	bne.n	800e638 <_dtoa_r+0x818>
 800e5e2:	2001      	movs	r0, #1
 800e5e4:	e030      	b.n	800e648 <_dtoa_r+0x828>
 800e5e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e5ec:	e795      	b.n	800e51a <_dtoa_r+0x6fa>
 800e5ee:	9b07      	ldr	r3, [sp, #28]
 800e5f0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800e5f4:	42bb      	cmp	r3, r7
 800e5f6:	bfbf      	itttt	lt
 800e5f8:	9b07      	ldrlt	r3, [sp, #28]
 800e5fa:	9707      	strlt	r7, [sp, #28]
 800e5fc:	1afa      	sublt	r2, r7, r3
 800e5fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e600:	bfbb      	ittet	lt
 800e602:	189b      	addlt	r3, r3, r2
 800e604:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e606:	1bdf      	subge	r7, r3, r7
 800e608:	2700      	movlt	r7, #0
 800e60a:	f1b9 0f00 	cmp.w	r9, #0
 800e60e:	bfb5      	itete	lt
 800e610:	9b05      	ldrlt	r3, [sp, #20]
 800e612:	9d05      	ldrge	r5, [sp, #20]
 800e614:	eba3 0509 	sublt.w	r5, r3, r9
 800e618:	464b      	movge	r3, r9
 800e61a:	bfb8      	it	lt
 800e61c:	2300      	movlt	r3, #0
 800e61e:	e77e      	b.n	800e51e <_dtoa_r+0x6fe>
 800e620:	9f07      	ldr	r7, [sp, #28]
 800e622:	9d05      	ldr	r5, [sp, #20]
 800e624:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e626:	e783      	b.n	800e530 <_dtoa_r+0x710>
 800e628:	9a07      	ldr	r2, [sp, #28]
 800e62a:	e7ab      	b.n	800e584 <_dtoa_r+0x764>
 800e62c:	2300      	movs	r3, #0
 800e62e:	e7d4      	b.n	800e5da <_dtoa_r+0x7ba>
 800e630:	9b00      	ldr	r3, [sp, #0]
 800e632:	e7d2      	b.n	800e5da <_dtoa_r+0x7ba>
 800e634:	2300      	movs	r3, #0
 800e636:	9307      	str	r3, [sp, #28]
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e63e:	6918      	ldr	r0, [r3, #16]
 800e640:	f000 fc20 	bl	800ee84 <__hi0bits>
 800e644:	f1c0 0020 	rsb	r0, r0, #32
 800e648:	4440      	add	r0, r8
 800e64a:	f010 001f 	ands.w	r0, r0, #31
 800e64e:	d047      	beq.n	800e6e0 <_dtoa_r+0x8c0>
 800e650:	f1c0 0320 	rsb	r3, r0, #32
 800e654:	2b04      	cmp	r3, #4
 800e656:	dd3b      	ble.n	800e6d0 <_dtoa_r+0x8b0>
 800e658:	9b05      	ldr	r3, [sp, #20]
 800e65a:	f1c0 001c 	rsb	r0, r0, #28
 800e65e:	4403      	add	r3, r0
 800e660:	9305      	str	r3, [sp, #20]
 800e662:	4405      	add	r5, r0
 800e664:	4480      	add	r8, r0
 800e666:	9b05      	ldr	r3, [sp, #20]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	dd05      	ble.n	800e678 <_dtoa_r+0x858>
 800e66c:	461a      	mov	r2, r3
 800e66e:	9904      	ldr	r1, [sp, #16]
 800e670:	4620      	mov	r0, r4
 800e672:	f000 fd43 	bl	800f0fc <__lshift>
 800e676:	9004      	str	r0, [sp, #16]
 800e678:	f1b8 0f00 	cmp.w	r8, #0
 800e67c:	dd05      	ble.n	800e68a <_dtoa_r+0x86a>
 800e67e:	4639      	mov	r1, r7
 800e680:	4642      	mov	r2, r8
 800e682:	4620      	mov	r0, r4
 800e684:	f000 fd3a 	bl	800f0fc <__lshift>
 800e688:	4607      	mov	r7, r0
 800e68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e68c:	b353      	cbz	r3, 800e6e4 <_dtoa_r+0x8c4>
 800e68e:	4639      	mov	r1, r7
 800e690:	9804      	ldr	r0, [sp, #16]
 800e692:	f000 fd87 	bl	800f1a4 <__mcmp>
 800e696:	2800      	cmp	r0, #0
 800e698:	da24      	bge.n	800e6e4 <_dtoa_r+0x8c4>
 800e69a:	2300      	movs	r3, #0
 800e69c:	220a      	movs	r2, #10
 800e69e:	9904      	ldr	r1, [sp, #16]
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f000 fbb4 	bl	800ee0e <__multadd>
 800e6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a8:	9004      	str	r0, [sp, #16]
 800e6aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f000 814d 	beq.w	800e94e <_dtoa_r+0xb2e>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4631      	mov	r1, r6
 800e6b8:	220a      	movs	r2, #10
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f000 fba7 	bl	800ee0e <__multadd>
 800e6c0:	9b02      	ldr	r3, [sp, #8]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	dc4f      	bgt.n	800e768 <_dtoa_r+0x948>
 800e6c8:	9b06      	ldr	r3, [sp, #24]
 800e6ca:	2b02      	cmp	r3, #2
 800e6cc:	dd4c      	ble.n	800e768 <_dtoa_r+0x948>
 800e6ce:	e011      	b.n	800e6f4 <_dtoa_r+0x8d4>
 800e6d0:	d0c9      	beq.n	800e666 <_dtoa_r+0x846>
 800e6d2:	9a05      	ldr	r2, [sp, #20]
 800e6d4:	331c      	adds	r3, #28
 800e6d6:	441a      	add	r2, r3
 800e6d8:	9205      	str	r2, [sp, #20]
 800e6da:	441d      	add	r5, r3
 800e6dc:	4498      	add	r8, r3
 800e6de:	e7c2      	b.n	800e666 <_dtoa_r+0x846>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	e7f6      	b.n	800e6d2 <_dtoa_r+0x8b2>
 800e6e4:	f1b9 0f00 	cmp.w	r9, #0
 800e6e8:	dc38      	bgt.n	800e75c <_dtoa_r+0x93c>
 800e6ea:	9b06      	ldr	r3, [sp, #24]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	dd35      	ble.n	800e75c <_dtoa_r+0x93c>
 800e6f0:	f8cd 9008 	str.w	r9, [sp, #8]
 800e6f4:	9b02      	ldr	r3, [sp, #8]
 800e6f6:	b963      	cbnz	r3, 800e712 <_dtoa_r+0x8f2>
 800e6f8:	4639      	mov	r1, r7
 800e6fa:	2205      	movs	r2, #5
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f000 fb86 	bl	800ee0e <__multadd>
 800e702:	4601      	mov	r1, r0
 800e704:	4607      	mov	r7, r0
 800e706:	9804      	ldr	r0, [sp, #16]
 800e708:	f000 fd4c 	bl	800f1a4 <__mcmp>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	f73f adcc 	bgt.w	800e2aa <_dtoa_r+0x48a>
 800e712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e714:	465d      	mov	r5, fp
 800e716:	ea6f 0a03 	mvn.w	sl, r3
 800e71a:	f04f 0900 	mov.w	r9, #0
 800e71e:	4639      	mov	r1, r7
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fb5d 	bl	800ede0 <_Bfree>
 800e726:	2e00      	cmp	r6, #0
 800e728:	f43f aeb7 	beq.w	800e49a <_dtoa_r+0x67a>
 800e72c:	f1b9 0f00 	cmp.w	r9, #0
 800e730:	d005      	beq.n	800e73e <_dtoa_r+0x91e>
 800e732:	45b1      	cmp	r9, r6
 800e734:	d003      	beq.n	800e73e <_dtoa_r+0x91e>
 800e736:	4649      	mov	r1, r9
 800e738:	4620      	mov	r0, r4
 800e73a:	f000 fb51 	bl	800ede0 <_Bfree>
 800e73e:	4631      	mov	r1, r6
 800e740:	4620      	mov	r0, r4
 800e742:	f000 fb4d 	bl	800ede0 <_Bfree>
 800e746:	e6a8      	b.n	800e49a <_dtoa_r+0x67a>
 800e748:	2700      	movs	r7, #0
 800e74a:	463e      	mov	r6, r7
 800e74c:	e7e1      	b.n	800e712 <_dtoa_r+0x8f2>
 800e74e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e752:	463e      	mov	r6, r7
 800e754:	e5a9      	b.n	800e2aa <_dtoa_r+0x48a>
 800e756:	bf00      	nop
 800e758:	40240000 	.word	0x40240000
 800e75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e75e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f000 80fa 	beq.w	800e95c <_dtoa_r+0xb3c>
 800e768:	2d00      	cmp	r5, #0
 800e76a:	dd05      	ble.n	800e778 <_dtoa_r+0x958>
 800e76c:	4631      	mov	r1, r6
 800e76e:	462a      	mov	r2, r5
 800e770:	4620      	mov	r0, r4
 800e772:	f000 fcc3 	bl	800f0fc <__lshift>
 800e776:	4606      	mov	r6, r0
 800e778:	9b07      	ldr	r3, [sp, #28]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d04c      	beq.n	800e818 <_dtoa_r+0x9f8>
 800e77e:	6871      	ldr	r1, [r6, #4]
 800e780:	4620      	mov	r0, r4
 800e782:	f000 faf9 	bl	800ed78 <_Balloc>
 800e786:	6932      	ldr	r2, [r6, #16]
 800e788:	3202      	adds	r2, #2
 800e78a:	4605      	mov	r5, r0
 800e78c:	0092      	lsls	r2, r2, #2
 800e78e:	f106 010c 	add.w	r1, r6, #12
 800e792:	300c      	adds	r0, #12
 800e794:	f7fe fcec 	bl	800d170 <memcpy>
 800e798:	2201      	movs	r2, #1
 800e79a:	4629      	mov	r1, r5
 800e79c:	4620      	mov	r0, r4
 800e79e:	f000 fcad 	bl	800f0fc <__lshift>
 800e7a2:	9b00      	ldr	r3, [sp, #0]
 800e7a4:	f8cd b014 	str.w	fp, [sp, #20]
 800e7a8:	f003 0301 	and.w	r3, r3, #1
 800e7ac:	46b1      	mov	r9, r6
 800e7ae:	9307      	str	r3, [sp, #28]
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	9804      	ldr	r0, [sp, #16]
 800e7b6:	f7ff faa7 	bl	800dd08 <quorem>
 800e7ba:	4649      	mov	r1, r9
 800e7bc:	4605      	mov	r5, r0
 800e7be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e7c2:	9804      	ldr	r0, [sp, #16]
 800e7c4:	f000 fcee 	bl	800f1a4 <__mcmp>
 800e7c8:	4632      	mov	r2, r6
 800e7ca:	9000      	str	r0, [sp, #0]
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f000 fd02 	bl	800f1d8 <__mdiff>
 800e7d4:	68c3      	ldr	r3, [r0, #12]
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	bb03      	cbnz	r3, 800e81c <_dtoa_r+0x9fc>
 800e7da:	4601      	mov	r1, r0
 800e7dc:	9008      	str	r0, [sp, #32]
 800e7de:	9804      	ldr	r0, [sp, #16]
 800e7e0:	f000 fce0 	bl	800f1a4 <__mcmp>
 800e7e4:	9a08      	ldr	r2, [sp, #32]
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	9308      	str	r3, [sp, #32]
 800e7ee:	f000 faf7 	bl	800ede0 <_Bfree>
 800e7f2:	9b08      	ldr	r3, [sp, #32]
 800e7f4:	b9a3      	cbnz	r3, 800e820 <_dtoa_r+0xa00>
 800e7f6:	9a06      	ldr	r2, [sp, #24]
 800e7f8:	b992      	cbnz	r2, 800e820 <_dtoa_r+0xa00>
 800e7fa:	9a07      	ldr	r2, [sp, #28]
 800e7fc:	b982      	cbnz	r2, 800e820 <_dtoa_r+0xa00>
 800e7fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e802:	d029      	beq.n	800e858 <_dtoa_r+0xa38>
 800e804:	9b00      	ldr	r3, [sp, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	dd01      	ble.n	800e80e <_dtoa_r+0x9ee>
 800e80a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e80e:	9b05      	ldr	r3, [sp, #20]
 800e810:	1c5d      	adds	r5, r3, #1
 800e812:	f883 8000 	strb.w	r8, [r3]
 800e816:	e782      	b.n	800e71e <_dtoa_r+0x8fe>
 800e818:	4630      	mov	r0, r6
 800e81a:	e7c2      	b.n	800e7a2 <_dtoa_r+0x982>
 800e81c:	2301      	movs	r3, #1
 800e81e:	e7e3      	b.n	800e7e8 <_dtoa_r+0x9c8>
 800e820:	9a00      	ldr	r2, [sp, #0]
 800e822:	2a00      	cmp	r2, #0
 800e824:	db04      	blt.n	800e830 <_dtoa_r+0xa10>
 800e826:	d125      	bne.n	800e874 <_dtoa_r+0xa54>
 800e828:	9a06      	ldr	r2, [sp, #24]
 800e82a:	bb1a      	cbnz	r2, 800e874 <_dtoa_r+0xa54>
 800e82c:	9a07      	ldr	r2, [sp, #28]
 800e82e:	bb0a      	cbnz	r2, 800e874 <_dtoa_r+0xa54>
 800e830:	2b00      	cmp	r3, #0
 800e832:	ddec      	ble.n	800e80e <_dtoa_r+0x9ee>
 800e834:	2201      	movs	r2, #1
 800e836:	9904      	ldr	r1, [sp, #16]
 800e838:	4620      	mov	r0, r4
 800e83a:	f000 fc5f 	bl	800f0fc <__lshift>
 800e83e:	4639      	mov	r1, r7
 800e840:	9004      	str	r0, [sp, #16]
 800e842:	f000 fcaf 	bl	800f1a4 <__mcmp>
 800e846:	2800      	cmp	r0, #0
 800e848:	dc03      	bgt.n	800e852 <_dtoa_r+0xa32>
 800e84a:	d1e0      	bne.n	800e80e <_dtoa_r+0x9ee>
 800e84c:	f018 0f01 	tst.w	r8, #1
 800e850:	d0dd      	beq.n	800e80e <_dtoa_r+0x9ee>
 800e852:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e856:	d1d8      	bne.n	800e80a <_dtoa_r+0x9ea>
 800e858:	9b05      	ldr	r3, [sp, #20]
 800e85a:	9a05      	ldr	r2, [sp, #20]
 800e85c:	1c5d      	adds	r5, r3, #1
 800e85e:	2339      	movs	r3, #57	; 0x39
 800e860:	7013      	strb	r3, [r2, #0]
 800e862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e866:	2b39      	cmp	r3, #57	; 0x39
 800e868:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e86c:	d04f      	beq.n	800e90e <_dtoa_r+0xaee>
 800e86e:	3301      	adds	r3, #1
 800e870:	7013      	strb	r3, [r2, #0]
 800e872:	e754      	b.n	800e71e <_dtoa_r+0x8fe>
 800e874:	9a05      	ldr	r2, [sp, #20]
 800e876:	2b00      	cmp	r3, #0
 800e878:	f102 0501 	add.w	r5, r2, #1
 800e87c:	dd06      	ble.n	800e88c <_dtoa_r+0xa6c>
 800e87e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e882:	d0e9      	beq.n	800e858 <_dtoa_r+0xa38>
 800e884:	f108 0801 	add.w	r8, r8, #1
 800e888:	9b05      	ldr	r3, [sp, #20]
 800e88a:	e7c2      	b.n	800e812 <_dtoa_r+0x9f2>
 800e88c:	9a02      	ldr	r2, [sp, #8]
 800e88e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e892:	eba5 030b 	sub.w	r3, r5, fp
 800e896:	4293      	cmp	r3, r2
 800e898:	d021      	beq.n	800e8de <_dtoa_r+0xabe>
 800e89a:	2300      	movs	r3, #0
 800e89c:	220a      	movs	r2, #10
 800e89e:	9904      	ldr	r1, [sp, #16]
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f000 fab4 	bl	800ee0e <__multadd>
 800e8a6:	45b1      	cmp	r9, r6
 800e8a8:	9004      	str	r0, [sp, #16]
 800e8aa:	f04f 0300 	mov.w	r3, #0
 800e8ae:	f04f 020a 	mov.w	r2, #10
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	d105      	bne.n	800e8c4 <_dtoa_r+0xaa4>
 800e8b8:	f000 faa9 	bl	800ee0e <__multadd>
 800e8bc:	4681      	mov	r9, r0
 800e8be:	4606      	mov	r6, r0
 800e8c0:	9505      	str	r5, [sp, #20]
 800e8c2:	e776      	b.n	800e7b2 <_dtoa_r+0x992>
 800e8c4:	f000 faa3 	bl	800ee0e <__multadd>
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	4681      	mov	r9, r0
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	220a      	movs	r2, #10
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f000 fa9c 	bl	800ee0e <__multadd>
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	e7f2      	b.n	800e8c0 <_dtoa_r+0xaa0>
 800e8da:	f04f 0900 	mov.w	r9, #0
 800e8de:	2201      	movs	r2, #1
 800e8e0:	9904      	ldr	r1, [sp, #16]
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f000 fc0a 	bl	800f0fc <__lshift>
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	9004      	str	r0, [sp, #16]
 800e8ec:	f000 fc5a 	bl	800f1a4 <__mcmp>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	dcb6      	bgt.n	800e862 <_dtoa_r+0xa42>
 800e8f4:	d102      	bne.n	800e8fc <_dtoa_r+0xadc>
 800e8f6:	f018 0f01 	tst.w	r8, #1
 800e8fa:	d1b2      	bne.n	800e862 <_dtoa_r+0xa42>
 800e8fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e900:	2b30      	cmp	r3, #48	; 0x30
 800e902:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e906:	f47f af0a 	bne.w	800e71e <_dtoa_r+0x8fe>
 800e90a:	4615      	mov	r5, r2
 800e90c:	e7f6      	b.n	800e8fc <_dtoa_r+0xadc>
 800e90e:	4593      	cmp	fp, r2
 800e910:	d105      	bne.n	800e91e <_dtoa_r+0xafe>
 800e912:	2331      	movs	r3, #49	; 0x31
 800e914:	f10a 0a01 	add.w	sl, sl, #1
 800e918:	f88b 3000 	strb.w	r3, [fp]
 800e91c:	e6ff      	b.n	800e71e <_dtoa_r+0x8fe>
 800e91e:	4615      	mov	r5, r2
 800e920:	e79f      	b.n	800e862 <_dtoa_r+0xa42>
 800e922:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e988 <_dtoa_r+0xb68>
 800e926:	e007      	b.n	800e938 <_dtoa_r+0xb18>
 800e928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e92a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e98c <_dtoa_r+0xb6c>
 800e92e:	b11b      	cbz	r3, 800e938 <_dtoa_r+0xb18>
 800e930:	f10b 0308 	add.w	r3, fp, #8
 800e934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	4658      	mov	r0, fp
 800e93a:	b017      	add	sp, #92	; 0x5c
 800e93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e940:	9b06      	ldr	r3, [sp, #24]
 800e942:	2b01      	cmp	r3, #1
 800e944:	f77f ae35 	ble.w	800e5b2 <_dtoa_r+0x792>
 800e948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e94a:	9307      	str	r3, [sp, #28]
 800e94c:	e649      	b.n	800e5e2 <_dtoa_r+0x7c2>
 800e94e:	9b02      	ldr	r3, [sp, #8]
 800e950:	2b00      	cmp	r3, #0
 800e952:	dc03      	bgt.n	800e95c <_dtoa_r+0xb3c>
 800e954:	9b06      	ldr	r3, [sp, #24]
 800e956:	2b02      	cmp	r3, #2
 800e958:	f73f aecc 	bgt.w	800e6f4 <_dtoa_r+0x8d4>
 800e95c:	465d      	mov	r5, fp
 800e95e:	4639      	mov	r1, r7
 800e960:	9804      	ldr	r0, [sp, #16]
 800e962:	f7ff f9d1 	bl	800dd08 <quorem>
 800e966:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e96a:	f805 8b01 	strb.w	r8, [r5], #1
 800e96e:	9a02      	ldr	r2, [sp, #8]
 800e970:	eba5 030b 	sub.w	r3, r5, fp
 800e974:	429a      	cmp	r2, r3
 800e976:	ddb0      	ble.n	800e8da <_dtoa_r+0xaba>
 800e978:	2300      	movs	r3, #0
 800e97a:	220a      	movs	r2, #10
 800e97c:	9904      	ldr	r1, [sp, #16]
 800e97e:	4620      	mov	r0, r4
 800e980:	f000 fa45 	bl	800ee0e <__multadd>
 800e984:	9004      	str	r0, [sp, #16]
 800e986:	e7ea      	b.n	800e95e <_dtoa_r+0xb3e>
 800e988:	080100c4 	.word	0x080100c4
 800e98c:	080100e8 	.word	0x080100e8

0800e990 <__sflush_r>:
 800e990:	898a      	ldrh	r2, [r1, #12]
 800e992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e996:	4605      	mov	r5, r0
 800e998:	0710      	lsls	r0, r2, #28
 800e99a:	460c      	mov	r4, r1
 800e99c:	d458      	bmi.n	800ea50 <__sflush_r+0xc0>
 800e99e:	684b      	ldr	r3, [r1, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	dc05      	bgt.n	800e9b0 <__sflush_r+0x20>
 800e9a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	dc02      	bgt.n	800e9b0 <__sflush_r+0x20>
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9b2:	2e00      	cmp	r6, #0
 800e9b4:	d0f9      	beq.n	800e9aa <__sflush_r+0x1a>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9bc:	682f      	ldr	r7, [r5, #0]
 800e9be:	6a21      	ldr	r1, [r4, #32]
 800e9c0:	602b      	str	r3, [r5, #0]
 800e9c2:	d032      	beq.n	800ea2a <__sflush_r+0x9a>
 800e9c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9c6:	89a3      	ldrh	r3, [r4, #12]
 800e9c8:	075a      	lsls	r2, r3, #29
 800e9ca:	d505      	bpl.n	800e9d8 <__sflush_r+0x48>
 800e9cc:	6863      	ldr	r3, [r4, #4]
 800e9ce:	1ac0      	subs	r0, r0, r3
 800e9d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9d2:	b10b      	cbz	r3, 800e9d8 <__sflush_r+0x48>
 800e9d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9d6:	1ac0      	subs	r0, r0, r3
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4602      	mov	r2, r0
 800e9dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9de:	6a21      	ldr	r1, [r4, #32]
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	47b0      	blx	r6
 800e9e4:	1c43      	adds	r3, r0, #1
 800e9e6:	89a3      	ldrh	r3, [r4, #12]
 800e9e8:	d106      	bne.n	800e9f8 <__sflush_r+0x68>
 800e9ea:	6829      	ldr	r1, [r5, #0]
 800e9ec:	291d      	cmp	r1, #29
 800e9ee:	d848      	bhi.n	800ea82 <__sflush_r+0xf2>
 800e9f0:	4a29      	ldr	r2, [pc, #164]	; (800ea98 <__sflush_r+0x108>)
 800e9f2:	40ca      	lsrs	r2, r1
 800e9f4:	07d6      	lsls	r6, r2, #31
 800e9f6:	d544      	bpl.n	800ea82 <__sflush_r+0xf2>
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	6062      	str	r2, [r4, #4]
 800e9fc:	04d9      	lsls	r1, r3, #19
 800e9fe:	6922      	ldr	r2, [r4, #16]
 800ea00:	6022      	str	r2, [r4, #0]
 800ea02:	d504      	bpl.n	800ea0e <__sflush_r+0x7e>
 800ea04:	1c42      	adds	r2, r0, #1
 800ea06:	d101      	bne.n	800ea0c <__sflush_r+0x7c>
 800ea08:	682b      	ldr	r3, [r5, #0]
 800ea0a:	b903      	cbnz	r3, 800ea0e <__sflush_r+0x7e>
 800ea0c:	6560      	str	r0, [r4, #84]	; 0x54
 800ea0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea10:	602f      	str	r7, [r5, #0]
 800ea12:	2900      	cmp	r1, #0
 800ea14:	d0c9      	beq.n	800e9aa <__sflush_r+0x1a>
 800ea16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea1a:	4299      	cmp	r1, r3
 800ea1c:	d002      	beq.n	800ea24 <__sflush_r+0x94>
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f000 fc94 	bl	800f34c <_free_r>
 800ea24:	2000      	movs	r0, #0
 800ea26:	6360      	str	r0, [r4, #52]	; 0x34
 800ea28:	e7c0      	b.n	800e9ac <__sflush_r+0x1c>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	47b0      	blx	r6
 800ea30:	1c41      	adds	r1, r0, #1
 800ea32:	d1c8      	bne.n	800e9c6 <__sflush_r+0x36>
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d0c5      	beq.n	800e9c6 <__sflush_r+0x36>
 800ea3a:	2b1d      	cmp	r3, #29
 800ea3c:	d001      	beq.n	800ea42 <__sflush_r+0xb2>
 800ea3e:	2b16      	cmp	r3, #22
 800ea40:	d101      	bne.n	800ea46 <__sflush_r+0xb6>
 800ea42:	602f      	str	r7, [r5, #0]
 800ea44:	e7b1      	b.n	800e9aa <__sflush_r+0x1a>
 800ea46:	89a3      	ldrh	r3, [r4, #12]
 800ea48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea4c:	81a3      	strh	r3, [r4, #12]
 800ea4e:	e7ad      	b.n	800e9ac <__sflush_r+0x1c>
 800ea50:	690f      	ldr	r7, [r1, #16]
 800ea52:	2f00      	cmp	r7, #0
 800ea54:	d0a9      	beq.n	800e9aa <__sflush_r+0x1a>
 800ea56:	0793      	lsls	r3, r2, #30
 800ea58:	680e      	ldr	r6, [r1, #0]
 800ea5a:	bf08      	it	eq
 800ea5c:	694b      	ldreq	r3, [r1, #20]
 800ea5e:	600f      	str	r7, [r1, #0]
 800ea60:	bf18      	it	ne
 800ea62:	2300      	movne	r3, #0
 800ea64:	eba6 0807 	sub.w	r8, r6, r7
 800ea68:	608b      	str	r3, [r1, #8]
 800ea6a:	f1b8 0f00 	cmp.w	r8, #0
 800ea6e:	dd9c      	ble.n	800e9aa <__sflush_r+0x1a>
 800ea70:	4643      	mov	r3, r8
 800ea72:	463a      	mov	r2, r7
 800ea74:	6a21      	ldr	r1, [r4, #32]
 800ea76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea78:	4628      	mov	r0, r5
 800ea7a:	47b0      	blx	r6
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	dc06      	bgt.n	800ea8e <__sflush_r+0xfe>
 800ea80:	89a3      	ldrh	r3, [r4, #12]
 800ea82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea86:	81a3      	strh	r3, [r4, #12]
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea8c:	e78e      	b.n	800e9ac <__sflush_r+0x1c>
 800ea8e:	4407      	add	r7, r0
 800ea90:	eba8 0800 	sub.w	r8, r8, r0
 800ea94:	e7e9      	b.n	800ea6a <__sflush_r+0xda>
 800ea96:	bf00      	nop
 800ea98:	20400001 	.word	0x20400001

0800ea9c <_fflush_r>:
 800ea9c:	b538      	push	{r3, r4, r5, lr}
 800ea9e:	690b      	ldr	r3, [r1, #16]
 800eaa0:	4605      	mov	r5, r0
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	b1db      	cbz	r3, 800eade <_fflush_r+0x42>
 800eaa6:	b118      	cbz	r0, 800eab0 <_fflush_r+0x14>
 800eaa8:	6983      	ldr	r3, [r0, #24]
 800eaaa:	b90b      	cbnz	r3, 800eab0 <_fflush_r+0x14>
 800eaac:	f000 f860 	bl	800eb70 <__sinit>
 800eab0:	4b0c      	ldr	r3, [pc, #48]	; (800eae4 <_fflush_r+0x48>)
 800eab2:	429c      	cmp	r4, r3
 800eab4:	d109      	bne.n	800eaca <_fflush_r+0x2e>
 800eab6:	686c      	ldr	r4, [r5, #4]
 800eab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eabc:	b17b      	cbz	r3, 800eade <_fflush_r+0x42>
 800eabe:	4621      	mov	r1, r4
 800eac0:	4628      	mov	r0, r5
 800eac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eac6:	f7ff bf63 	b.w	800e990 <__sflush_r>
 800eaca:	4b07      	ldr	r3, [pc, #28]	; (800eae8 <_fflush_r+0x4c>)
 800eacc:	429c      	cmp	r4, r3
 800eace:	d101      	bne.n	800ead4 <_fflush_r+0x38>
 800ead0:	68ac      	ldr	r4, [r5, #8]
 800ead2:	e7f1      	b.n	800eab8 <_fflush_r+0x1c>
 800ead4:	4b05      	ldr	r3, [pc, #20]	; (800eaec <_fflush_r+0x50>)
 800ead6:	429c      	cmp	r4, r3
 800ead8:	bf08      	it	eq
 800eada:	68ec      	ldreq	r4, [r5, #12]
 800eadc:	e7ec      	b.n	800eab8 <_fflush_r+0x1c>
 800eade:	2000      	movs	r0, #0
 800eae0:	bd38      	pop	{r3, r4, r5, pc}
 800eae2:	bf00      	nop
 800eae4:	08010118 	.word	0x08010118
 800eae8:	08010138 	.word	0x08010138
 800eaec:	080100f8 	.word	0x080100f8

0800eaf0 <std>:
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	b510      	push	{r4, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	e9c0 3300 	strd	r3, r3, [r0]
 800eafa:	6083      	str	r3, [r0, #8]
 800eafc:	8181      	strh	r1, [r0, #12]
 800eafe:	6643      	str	r3, [r0, #100]	; 0x64
 800eb00:	81c2      	strh	r2, [r0, #14]
 800eb02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb06:	6183      	str	r3, [r0, #24]
 800eb08:	4619      	mov	r1, r3
 800eb0a:	2208      	movs	r2, #8
 800eb0c:	305c      	adds	r0, #92	; 0x5c
 800eb0e:	f7fe fb3a 	bl	800d186 <memset>
 800eb12:	4b05      	ldr	r3, [pc, #20]	; (800eb28 <std+0x38>)
 800eb14:	6263      	str	r3, [r4, #36]	; 0x24
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <std+0x3c>)
 800eb18:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb1a:	4b05      	ldr	r3, [pc, #20]	; (800eb30 <std+0x40>)
 800eb1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb1e:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <std+0x44>)
 800eb20:	6224      	str	r4, [r4, #32]
 800eb22:	6323      	str	r3, [r4, #48]	; 0x30
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	bf00      	nop
 800eb28:	0800f9e1 	.word	0x0800f9e1
 800eb2c:	0800fa03 	.word	0x0800fa03
 800eb30:	0800fa3b 	.word	0x0800fa3b
 800eb34:	0800fa5f 	.word	0x0800fa5f

0800eb38 <_cleanup_r>:
 800eb38:	4901      	ldr	r1, [pc, #4]	; (800eb40 <_cleanup_r+0x8>)
 800eb3a:	f000 b885 	b.w	800ec48 <_fwalk_reent>
 800eb3e:	bf00      	nop
 800eb40:	0800ea9d 	.word	0x0800ea9d

0800eb44 <__sfmoreglue>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	1e4a      	subs	r2, r1, #1
 800eb48:	2568      	movs	r5, #104	; 0x68
 800eb4a:	4355      	muls	r5, r2
 800eb4c:	460e      	mov	r6, r1
 800eb4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb52:	f000 fc49 	bl	800f3e8 <_malloc_r>
 800eb56:	4604      	mov	r4, r0
 800eb58:	b140      	cbz	r0, 800eb6c <__sfmoreglue+0x28>
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb60:	300c      	adds	r0, #12
 800eb62:	60a0      	str	r0, [r4, #8]
 800eb64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb68:	f7fe fb0d 	bl	800d186 <memset>
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	bd70      	pop	{r4, r5, r6, pc}

0800eb70 <__sinit>:
 800eb70:	6983      	ldr	r3, [r0, #24]
 800eb72:	b510      	push	{r4, lr}
 800eb74:	4604      	mov	r4, r0
 800eb76:	bb33      	cbnz	r3, 800ebc6 <__sinit+0x56>
 800eb78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800eb7c:	6503      	str	r3, [r0, #80]	; 0x50
 800eb7e:	4b12      	ldr	r3, [pc, #72]	; (800ebc8 <__sinit+0x58>)
 800eb80:	4a12      	ldr	r2, [pc, #72]	; (800ebcc <__sinit+0x5c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	6282      	str	r2, [r0, #40]	; 0x28
 800eb86:	4298      	cmp	r0, r3
 800eb88:	bf04      	itt	eq
 800eb8a:	2301      	moveq	r3, #1
 800eb8c:	6183      	streq	r3, [r0, #24]
 800eb8e:	f000 f81f 	bl	800ebd0 <__sfp>
 800eb92:	6060      	str	r0, [r4, #4]
 800eb94:	4620      	mov	r0, r4
 800eb96:	f000 f81b 	bl	800ebd0 <__sfp>
 800eb9a:	60a0      	str	r0, [r4, #8]
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f000 f817 	bl	800ebd0 <__sfp>
 800eba2:	2200      	movs	r2, #0
 800eba4:	60e0      	str	r0, [r4, #12]
 800eba6:	2104      	movs	r1, #4
 800eba8:	6860      	ldr	r0, [r4, #4]
 800ebaa:	f7ff ffa1 	bl	800eaf0 <std>
 800ebae:	2201      	movs	r2, #1
 800ebb0:	2109      	movs	r1, #9
 800ebb2:	68a0      	ldr	r0, [r4, #8]
 800ebb4:	f7ff ff9c 	bl	800eaf0 <std>
 800ebb8:	2202      	movs	r2, #2
 800ebba:	2112      	movs	r1, #18
 800ebbc:	68e0      	ldr	r0, [r4, #12]
 800ebbe:	f7ff ff97 	bl	800eaf0 <std>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	61a3      	str	r3, [r4, #24]
 800ebc6:	bd10      	pop	{r4, pc}
 800ebc8:	080100b0 	.word	0x080100b0
 800ebcc:	0800eb39 	.word	0x0800eb39

0800ebd0 <__sfp>:
 800ebd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd2:	4b1b      	ldr	r3, [pc, #108]	; (800ec40 <__sfp+0x70>)
 800ebd4:	681e      	ldr	r6, [r3, #0]
 800ebd6:	69b3      	ldr	r3, [r6, #24]
 800ebd8:	4607      	mov	r7, r0
 800ebda:	b913      	cbnz	r3, 800ebe2 <__sfp+0x12>
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7ff ffc7 	bl	800eb70 <__sinit>
 800ebe2:	3648      	adds	r6, #72	; 0x48
 800ebe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	d503      	bpl.n	800ebf4 <__sfp+0x24>
 800ebec:	6833      	ldr	r3, [r6, #0]
 800ebee:	b133      	cbz	r3, 800ebfe <__sfp+0x2e>
 800ebf0:	6836      	ldr	r6, [r6, #0]
 800ebf2:	e7f7      	b.n	800ebe4 <__sfp+0x14>
 800ebf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebf8:	b16d      	cbz	r5, 800ec16 <__sfp+0x46>
 800ebfa:	3468      	adds	r4, #104	; 0x68
 800ebfc:	e7f4      	b.n	800ebe8 <__sfp+0x18>
 800ebfe:	2104      	movs	r1, #4
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7ff ff9f 	bl	800eb44 <__sfmoreglue>
 800ec06:	6030      	str	r0, [r6, #0]
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d1f1      	bne.n	800ebf0 <__sfp+0x20>
 800ec0c:	230c      	movs	r3, #12
 800ec0e:	603b      	str	r3, [r7, #0]
 800ec10:	4604      	mov	r4, r0
 800ec12:	4620      	mov	r0, r4
 800ec14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec16:	4b0b      	ldr	r3, [pc, #44]	; (800ec44 <__sfp+0x74>)
 800ec18:	6665      	str	r5, [r4, #100]	; 0x64
 800ec1a:	e9c4 5500 	strd	r5, r5, [r4]
 800ec1e:	60a5      	str	r5, [r4, #8]
 800ec20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ec24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ec28:	2208      	movs	r2, #8
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec30:	f7fe faa9 	bl	800d186 <memset>
 800ec34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec3c:	e7e9      	b.n	800ec12 <__sfp+0x42>
 800ec3e:	bf00      	nop
 800ec40:	080100b0 	.word	0x080100b0
 800ec44:	ffff0001 	.word	0xffff0001

0800ec48 <_fwalk_reent>:
 800ec48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	4689      	mov	r9, r1
 800ec50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec54:	2600      	movs	r6, #0
 800ec56:	b914      	cbnz	r4, 800ec5e <_fwalk_reent+0x16>
 800ec58:	4630      	mov	r0, r6
 800ec5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ec62:	3f01      	subs	r7, #1
 800ec64:	d501      	bpl.n	800ec6a <_fwalk_reent+0x22>
 800ec66:	6824      	ldr	r4, [r4, #0]
 800ec68:	e7f5      	b.n	800ec56 <_fwalk_reent+0xe>
 800ec6a:	89ab      	ldrh	r3, [r5, #12]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d907      	bls.n	800ec80 <_fwalk_reent+0x38>
 800ec70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec74:	3301      	adds	r3, #1
 800ec76:	d003      	beq.n	800ec80 <_fwalk_reent+0x38>
 800ec78:	4629      	mov	r1, r5
 800ec7a:	4640      	mov	r0, r8
 800ec7c:	47c8      	blx	r9
 800ec7e:	4306      	orrs	r6, r0
 800ec80:	3568      	adds	r5, #104	; 0x68
 800ec82:	e7ee      	b.n	800ec62 <_fwalk_reent+0x1a>

0800ec84 <_localeconv_r>:
 800ec84:	4b04      	ldr	r3, [pc, #16]	; (800ec98 <_localeconv_r+0x14>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	6a18      	ldr	r0, [r3, #32]
 800ec8a:	4b04      	ldr	r3, [pc, #16]	; (800ec9c <_localeconv_r+0x18>)
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	bf08      	it	eq
 800ec90:	4618      	moveq	r0, r3
 800ec92:	30f0      	adds	r0, #240	; 0xf0
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	20000120 	.word	0x20000120
 800ec9c:	20000184 	.word	0x20000184

0800eca0 <__swhatbuf_r>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	460e      	mov	r6, r1
 800eca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca8:	2900      	cmp	r1, #0
 800ecaa:	b096      	sub	sp, #88	; 0x58
 800ecac:	4614      	mov	r4, r2
 800ecae:	461d      	mov	r5, r3
 800ecb0:	da07      	bge.n	800ecc2 <__swhatbuf_r+0x22>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	602b      	str	r3, [r5, #0]
 800ecb6:	89b3      	ldrh	r3, [r6, #12]
 800ecb8:	061a      	lsls	r2, r3, #24
 800ecba:	d410      	bmi.n	800ecde <__swhatbuf_r+0x3e>
 800ecbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecc0:	e00e      	b.n	800ece0 <__swhatbuf_r+0x40>
 800ecc2:	466a      	mov	r2, sp
 800ecc4:	f000 fef2 	bl	800faac <_fstat_r>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	dbf2      	blt.n	800ecb2 <__swhatbuf_r+0x12>
 800eccc:	9a01      	ldr	r2, [sp, #4]
 800ecce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ecd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ecd6:	425a      	negs	r2, r3
 800ecd8:	415a      	adcs	r2, r3
 800ecda:	602a      	str	r2, [r5, #0]
 800ecdc:	e7ee      	b.n	800ecbc <__swhatbuf_r+0x1c>
 800ecde:	2340      	movs	r3, #64	; 0x40
 800ece0:	2000      	movs	r0, #0
 800ece2:	6023      	str	r3, [r4, #0]
 800ece4:	b016      	add	sp, #88	; 0x58
 800ece6:	bd70      	pop	{r4, r5, r6, pc}

0800ece8 <__smakebuf_r>:
 800ece8:	898b      	ldrh	r3, [r1, #12]
 800ecea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecec:	079d      	lsls	r5, r3, #30
 800ecee:	4606      	mov	r6, r0
 800ecf0:	460c      	mov	r4, r1
 800ecf2:	d507      	bpl.n	800ed04 <__smakebuf_r+0x1c>
 800ecf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	6123      	str	r3, [r4, #16]
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	6163      	str	r3, [r4, #20]
 800ed00:	b002      	add	sp, #8
 800ed02:	bd70      	pop	{r4, r5, r6, pc}
 800ed04:	ab01      	add	r3, sp, #4
 800ed06:	466a      	mov	r2, sp
 800ed08:	f7ff ffca 	bl	800eca0 <__swhatbuf_r>
 800ed0c:	9900      	ldr	r1, [sp, #0]
 800ed0e:	4605      	mov	r5, r0
 800ed10:	4630      	mov	r0, r6
 800ed12:	f000 fb69 	bl	800f3e8 <_malloc_r>
 800ed16:	b948      	cbnz	r0, 800ed2c <__smakebuf_r+0x44>
 800ed18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed1c:	059a      	lsls	r2, r3, #22
 800ed1e:	d4ef      	bmi.n	800ed00 <__smakebuf_r+0x18>
 800ed20:	f023 0303 	bic.w	r3, r3, #3
 800ed24:	f043 0302 	orr.w	r3, r3, #2
 800ed28:	81a3      	strh	r3, [r4, #12]
 800ed2a:	e7e3      	b.n	800ecf4 <__smakebuf_r+0xc>
 800ed2c:	4b0d      	ldr	r3, [pc, #52]	; (800ed64 <__smakebuf_r+0x7c>)
 800ed2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	6020      	str	r0, [r4, #0]
 800ed34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed38:	81a3      	strh	r3, [r4, #12]
 800ed3a:	9b00      	ldr	r3, [sp, #0]
 800ed3c:	6163      	str	r3, [r4, #20]
 800ed3e:	9b01      	ldr	r3, [sp, #4]
 800ed40:	6120      	str	r0, [r4, #16]
 800ed42:	b15b      	cbz	r3, 800ed5c <__smakebuf_r+0x74>
 800ed44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f000 fec1 	bl	800fad0 <_isatty_r>
 800ed4e:	b128      	cbz	r0, 800ed5c <__smakebuf_r+0x74>
 800ed50:	89a3      	ldrh	r3, [r4, #12]
 800ed52:	f023 0303 	bic.w	r3, r3, #3
 800ed56:	f043 0301 	orr.w	r3, r3, #1
 800ed5a:	81a3      	strh	r3, [r4, #12]
 800ed5c:	89a3      	ldrh	r3, [r4, #12]
 800ed5e:	431d      	orrs	r5, r3
 800ed60:	81a5      	strh	r5, [r4, #12]
 800ed62:	e7cd      	b.n	800ed00 <__smakebuf_r+0x18>
 800ed64:	0800eb39 	.word	0x0800eb39

0800ed68 <malloc>:
 800ed68:	4b02      	ldr	r3, [pc, #8]	; (800ed74 <malloc+0xc>)
 800ed6a:	4601      	mov	r1, r0
 800ed6c:	6818      	ldr	r0, [r3, #0]
 800ed6e:	f000 bb3b 	b.w	800f3e8 <_malloc_r>
 800ed72:	bf00      	nop
 800ed74:	20000120 	.word	0x20000120

0800ed78 <_Balloc>:
 800ed78:	b570      	push	{r4, r5, r6, lr}
 800ed7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	460e      	mov	r6, r1
 800ed80:	b93d      	cbnz	r5, 800ed92 <_Balloc+0x1a>
 800ed82:	2010      	movs	r0, #16
 800ed84:	f7ff fff0 	bl	800ed68 <malloc>
 800ed88:	6260      	str	r0, [r4, #36]	; 0x24
 800ed8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ed8e:	6005      	str	r5, [r0, #0]
 800ed90:	60c5      	str	r5, [r0, #12]
 800ed92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ed94:	68eb      	ldr	r3, [r5, #12]
 800ed96:	b183      	cbz	r3, 800edba <_Balloc+0x42>
 800ed98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eda0:	b9b8      	cbnz	r0, 800edd2 <_Balloc+0x5a>
 800eda2:	2101      	movs	r1, #1
 800eda4:	fa01 f506 	lsl.w	r5, r1, r6
 800eda8:	1d6a      	adds	r2, r5, #5
 800edaa:	0092      	lsls	r2, r2, #2
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fabf 	bl	800f330 <_calloc_r>
 800edb2:	b160      	cbz	r0, 800edce <_Balloc+0x56>
 800edb4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800edb8:	e00e      	b.n	800edd8 <_Balloc+0x60>
 800edba:	2221      	movs	r2, #33	; 0x21
 800edbc:	2104      	movs	r1, #4
 800edbe:	4620      	mov	r0, r4
 800edc0:	f000 fab6 	bl	800f330 <_calloc_r>
 800edc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edc6:	60e8      	str	r0, [r5, #12]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1e4      	bne.n	800ed98 <_Balloc+0x20>
 800edce:	2000      	movs	r0, #0
 800edd0:	bd70      	pop	{r4, r5, r6, pc}
 800edd2:	6802      	ldr	r2, [r0, #0]
 800edd4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800edd8:	2300      	movs	r3, #0
 800edda:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edde:	e7f7      	b.n	800edd0 <_Balloc+0x58>

0800ede0 <_Bfree>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ede4:	4606      	mov	r6, r0
 800ede6:	460d      	mov	r5, r1
 800ede8:	b93c      	cbnz	r4, 800edfa <_Bfree+0x1a>
 800edea:	2010      	movs	r0, #16
 800edec:	f7ff ffbc 	bl	800ed68 <malloc>
 800edf0:	6270      	str	r0, [r6, #36]	; 0x24
 800edf2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edf6:	6004      	str	r4, [r0, #0]
 800edf8:	60c4      	str	r4, [r0, #12]
 800edfa:	b13d      	cbz	r5, 800ee0c <_Bfree+0x2c>
 800edfc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800edfe:	686a      	ldr	r2, [r5, #4]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee06:	6029      	str	r1, [r5, #0]
 800ee08:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ee0c:	bd70      	pop	{r4, r5, r6, pc}

0800ee0e <__multadd>:
 800ee0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee12:	690d      	ldr	r5, [r1, #16]
 800ee14:	461f      	mov	r7, r3
 800ee16:	4606      	mov	r6, r0
 800ee18:	460c      	mov	r4, r1
 800ee1a:	f101 0c14 	add.w	ip, r1, #20
 800ee1e:	2300      	movs	r3, #0
 800ee20:	f8dc 0000 	ldr.w	r0, [ip]
 800ee24:	b281      	uxth	r1, r0
 800ee26:	fb02 7101 	mla	r1, r2, r1, r7
 800ee2a:	0c0f      	lsrs	r7, r1, #16
 800ee2c:	0c00      	lsrs	r0, r0, #16
 800ee2e:	fb02 7000 	mla	r0, r2, r0, r7
 800ee32:	b289      	uxth	r1, r1
 800ee34:	3301      	adds	r3, #1
 800ee36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ee3a:	429d      	cmp	r5, r3
 800ee3c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ee40:	f84c 1b04 	str.w	r1, [ip], #4
 800ee44:	dcec      	bgt.n	800ee20 <__multadd+0x12>
 800ee46:	b1d7      	cbz	r7, 800ee7e <__multadd+0x70>
 800ee48:	68a3      	ldr	r3, [r4, #8]
 800ee4a:	42ab      	cmp	r3, r5
 800ee4c:	dc12      	bgt.n	800ee74 <__multadd+0x66>
 800ee4e:	6861      	ldr	r1, [r4, #4]
 800ee50:	4630      	mov	r0, r6
 800ee52:	3101      	adds	r1, #1
 800ee54:	f7ff ff90 	bl	800ed78 <_Balloc>
 800ee58:	6922      	ldr	r2, [r4, #16]
 800ee5a:	3202      	adds	r2, #2
 800ee5c:	f104 010c 	add.w	r1, r4, #12
 800ee60:	4680      	mov	r8, r0
 800ee62:	0092      	lsls	r2, r2, #2
 800ee64:	300c      	adds	r0, #12
 800ee66:	f7fe f983 	bl	800d170 <memcpy>
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f7ff ffb7 	bl	800ede0 <_Bfree>
 800ee72:	4644      	mov	r4, r8
 800ee74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee78:	3501      	adds	r5, #1
 800ee7a:	615f      	str	r7, [r3, #20]
 800ee7c:	6125      	str	r5, [r4, #16]
 800ee7e:	4620      	mov	r0, r4
 800ee80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee84 <__hi0bits>:
 800ee84:	0c02      	lsrs	r2, r0, #16
 800ee86:	0412      	lsls	r2, r2, #16
 800ee88:	4603      	mov	r3, r0
 800ee8a:	b9b2      	cbnz	r2, 800eeba <__hi0bits+0x36>
 800ee8c:	0403      	lsls	r3, r0, #16
 800ee8e:	2010      	movs	r0, #16
 800ee90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ee94:	bf04      	itt	eq
 800ee96:	021b      	lsleq	r3, r3, #8
 800ee98:	3008      	addeq	r0, #8
 800ee9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ee9e:	bf04      	itt	eq
 800eea0:	011b      	lsleq	r3, r3, #4
 800eea2:	3004      	addeq	r0, #4
 800eea4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800eea8:	bf04      	itt	eq
 800eeaa:	009b      	lsleq	r3, r3, #2
 800eeac:	3002      	addeq	r0, #2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	db06      	blt.n	800eec0 <__hi0bits+0x3c>
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	d503      	bpl.n	800eebe <__hi0bits+0x3a>
 800eeb6:	3001      	adds	r0, #1
 800eeb8:	4770      	bx	lr
 800eeba:	2000      	movs	r0, #0
 800eebc:	e7e8      	b.n	800ee90 <__hi0bits+0xc>
 800eebe:	2020      	movs	r0, #32
 800eec0:	4770      	bx	lr

0800eec2 <__lo0bits>:
 800eec2:	6803      	ldr	r3, [r0, #0]
 800eec4:	f013 0207 	ands.w	r2, r3, #7
 800eec8:	4601      	mov	r1, r0
 800eeca:	d00b      	beq.n	800eee4 <__lo0bits+0x22>
 800eecc:	07da      	lsls	r2, r3, #31
 800eece:	d423      	bmi.n	800ef18 <__lo0bits+0x56>
 800eed0:	0798      	lsls	r0, r3, #30
 800eed2:	bf49      	itett	mi
 800eed4:	085b      	lsrmi	r3, r3, #1
 800eed6:	089b      	lsrpl	r3, r3, #2
 800eed8:	2001      	movmi	r0, #1
 800eeda:	600b      	strmi	r3, [r1, #0]
 800eedc:	bf5c      	itt	pl
 800eede:	600b      	strpl	r3, [r1, #0]
 800eee0:	2002      	movpl	r0, #2
 800eee2:	4770      	bx	lr
 800eee4:	b298      	uxth	r0, r3
 800eee6:	b9a8      	cbnz	r0, 800ef14 <__lo0bits+0x52>
 800eee8:	0c1b      	lsrs	r3, r3, #16
 800eeea:	2010      	movs	r0, #16
 800eeec:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eef0:	bf04      	itt	eq
 800eef2:	0a1b      	lsreq	r3, r3, #8
 800eef4:	3008      	addeq	r0, #8
 800eef6:	071a      	lsls	r2, r3, #28
 800eef8:	bf04      	itt	eq
 800eefa:	091b      	lsreq	r3, r3, #4
 800eefc:	3004      	addeq	r0, #4
 800eefe:	079a      	lsls	r2, r3, #30
 800ef00:	bf04      	itt	eq
 800ef02:	089b      	lsreq	r3, r3, #2
 800ef04:	3002      	addeq	r0, #2
 800ef06:	07da      	lsls	r2, r3, #31
 800ef08:	d402      	bmi.n	800ef10 <__lo0bits+0x4e>
 800ef0a:	085b      	lsrs	r3, r3, #1
 800ef0c:	d006      	beq.n	800ef1c <__lo0bits+0x5a>
 800ef0e:	3001      	adds	r0, #1
 800ef10:	600b      	str	r3, [r1, #0]
 800ef12:	4770      	bx	lr
 800ef14:	4610      	mov	r0, r2
 800ef16:	e7e9      	b.n	800eeec <__lo0bits+0x2a>
 800ef18:	2000      	movs	r0, #0
 800ef1a:	4770      	bx	lr
 800ef1c:	2020      	movs	r0, #32
 800ef1e:	4770      	bx	lr

0800ef20 <__i2b>:
 800ef20:	b510      	push	{r4, lr}
 800ef22:	460c      	mov	r4, r1
 800ef24:	2101      	movs	r1, #1
 800ef26:	f7ff ff27 	bl	800ed78 <_Balloc>
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	6144      	str	r4, [r0, #20]
 800ef2e:	6102      	str	r2, [r0, #16]
 800ef30:	bd10      	pop	{r4, pc}

0800ef32 <__multiply>:
 800ef32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef36:	4614      	mov	r4, r2
 800ef38:	690a      	ldr	r2, [r1, #16]
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	bfb8      	it	lt
 800ef40:	460b      	movlt	r3, r1
 800ef42:	4688      	mov	r8, r1
 800ef44:	bfbc      	itt	lt
 800ef46:	46a0      	movlt	r8, r4
 800ef48:	461c      	movlt	r4, r3
 800ef4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ef52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef5a:	eb07 0609 	add.w	r6, r7, r9
 800ef5e:	42b3      	cmp	r3, r6
 800ef60:	bfb8      	it	lt
 800ef62:	3101      	addlt	r1, #1
 800ef64:	f7ff ff08 	bl	800ed78 <_Balloc>
 800ef68:	f100 0514 	add.w	r5, r0, #20
 800ef6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ef70:	462b      	mov	r3, r5
 800ef72:	2200      	movs	r2, #0
 800ef74:	4573      	cmp	r3, lr
 800ef76:	d316      	bcc.n	800efa6 <__multiply+0x74>
 800ef78:	f104 0214 	add.w	r2, r4, #20
 800ef7c:	f108 0114 	add.w	r1, r8, #20
 800ef80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ef84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ef88:	9300      	str	r3, [sp, #0]
 800ef8a:	9b00      	ldr	r3, [sp, #0]
 800ef8c:	9201      	str	r2, [sp, #4]
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d80c      	bhi.n	800efac <__multiply+0x7a>
 800ef92:	2e00      	cmp	r6, #0
 800ef94:	dd03      	ble.n	800ef9e <__multiply+0x6c>
 800ef96:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d05d      	beq.n	800f05a <__multiply+0x128>
 800ef9e:	6106      	str	r6, [r0, #16]
 800efa0:	b003      	add	sp, #12
 800efa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa6:	f843 2b04 	str.w	r2, [r3], #4
 800efaa:	e7e3      	b.n	800ef74 <__multiply+0x42>
 800efac:	f8b2 b000 	ldrh.w	fp, [r2]
 800efb0:	f1bb 0f00 	cmp.w	fp, #0
 800efb4:	d023      	beq.n	800effe <__multiply+0xcc>
 800efb6:	4689      	mov	r9, r1
 800efb8:	46ac      	mov	ip, r5
 800efba:	f04f 0800 	mov.w	r8, #0
 800efbe:	f859 4b04 	ldr.w	r4, [r9], #4
 800efc2:	f8dc a000 	ldr.w	sl, [ip]
 800efc6:	b2a3      	uxth	r3, r4
 800efc8:	fa1f fa8a 	uxth.w	sl, sl
 800efcc:	fb0b a303 	mla	r3, fp, r3, sl
 800efd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800efd4:	f8dc 4000 	ldr.w	r4, [ip]
 800efd8:	4443      	add	r3, r8
 800efda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800efde:	fb0b 840a 	mla	r4, fp, sl, r8
 800efe2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800efe6:	46e2      	mov	sl, ip
 800efe8:	b29b      	uxth	r3, r3
 800efea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800efee:	454f      	cmp	r7, r9
 800eff0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eff4:	f84a 3b04 	str.w	r3, [sl], #4
 800eff8:	d82b      	bhi.n	800f052 <__multiply+0x120>
 800effa:	f8cc 8004 	str.w	r8, [ip, #4]
 800effe:	9b01      	ldr	r3, [sp, #4]
 800f000:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f004:	3204      	adds	r2, #4
 800f006:	f1ba 0f00 	cmp.w	sl, #0
 800f00a:	d020      	beq.n	800f04e <__multiply+0x11c>
 800f00c:	682b      	ldr	r3, [r5, #0]
 800f00e:	4689      	mov	r9, r1
 800f010:	46a8      	mov	r8, r5
 800f012:	f04f 0b00 	mov.w	fp, #0
 800f016:	f8b9 c000 	ldrh.w	ip, [r9]
 800f01a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f01e:	fb0a 440c 	mla	r4, sl, ip, r4
 800f022:	445c      	add	r4, fp
 800f024:	46c4      	mov	ip, r8
 800f026:	b29b      	uxth	r3, r3
 800f028:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f02c:	f84c 3b04 	str.w	r3, [ip], #4
 800f030:	f859 3b04 	ldr.w	r3, [r9], #4
 800f034:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f038:	0c1b      	lsrs	r3, r3, #16
 800f03a:	fb0a b303 	mla	r3, sl, r3, fp
 800f03e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f042:	454f      	cmp	r7, r9
 800f044:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f048:	d805      	bhi.n	800f056 <__multiply+0x124>
 800f04a:	f8c8 3004 	str.w	r3, [r8, #4]
 800f04e:	3504      	adds	r5, #4
 800f050:	e79b      	b.n	800ef8a <__multiply+0x58>
 800f052:	46d4      	mov	ip, sl
 800f054:	e7b3      	b.n	800efbe <__multiply+0x8c>
 800f056:	46e0      	mov	r8, ip
 800f058:	e7dd      	b.n	800f016 <__multiply+0xe4>
 800f05a:	3e01      	subs	r6, #1
 800f05c:	e799      	b.n	800ef92 <__multiply+0x60>
	...

0800f060 <__pow5mult>:
 800f060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f064:	4615      	mov	r5, r2
 800f066:	f012 0203 	ands.w	r2, r2, #3
 800f06a:	4606      	mov	r6, r0
 800f06c:	460f      	mov	r7, r1
 800f06e:	d007      	beq.n	800f080 <__pow5mult+0x20>
 800f070:	3a01      	subs	r2, #1
 800f072:	4c21      	ldr	r4, [pc, #132]	; (800f0f8 <__pow5mult+0x98>)
 800f074:	2300      	movs	r3, #0
 800f076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f07a:	f7ff fec8 	bl	800ee0e <__multadd>
 800f07e:	4607      	mov	r7, r0
 800f080:	10ad      	asrs	r5, r5, #2
 800f082:	d035      	beq.n	800f0f0 <__pow5mult+0x90>
 800f084:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f086:	b93c      	cbnz	r4, 800f098 <__pow5mult+0x38>
 800f088:	2010      	movs	r0, #16
 800f08a:	f7ff fe6d 	bl	800ed68 <malloc>
 800f08e:	6270      	str	r0, [r6, #36]	; 0x24
 800f090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f094:	6004      	str	r4, [r0, #0]
 800f096:	60c4      	str	r4, [r0, #12]
 800f098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f09c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f0a0:	b94c      	cbnz	r4, 800f0b6 <__pow5mult+0x56>
 800f0a2:	f240 2171 	movw	r1, #625	; 0x271
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	f7ff ff3a 	bl	800ef20 <__i2b>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	6003      	str	r3, [r0, #0]
 800f0b6:	f04f 0800 	mov.w	r8, #0
 800f0ba:	07eb      	lsls	r3, r5, #31
 800f0bc:	d50a      	bpl.n	800f0d4 <__pow5mult+0x74>
 800f0be:	4639      	mov	r1, r7
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	f7ff ff35 	bl	800ef32 <__multiply>
 800f0c8:	4639      	mov	r1, r7
 800f0ca:	4681      	mov	r9, r0
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f7ff fe87 	bl	800ede0 <_Bfree>
 800f0d2:	464f      	mov	r7, r9
 800f0d4:	106d      	asrs	r5, r5, #1
 800f0d6:	d00b      	beq.n	800f0f0 <__pow5mult+0x90>
 800f0d8:	6820      	ldr	r0, [r4, #0]
 800f0da:	b938      	cbnz	r0, 800f0ec <__pow5mult+0x8c>
 800f0dc:	4622      	mov	r2, r4
 800f0de:	4621      	mov	r1, r4
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7ff ff26 	bl	800ef32 <__multiply>
 800f0e6:	6020      	str	r0, [r4, #0]
 800f0e8:	f8c0 8000 	str.w	r8, [r0]
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	e7e4      	b.n	800f0ba <__pow5mult+0x5a>
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f6:	bf00      	nop
 800f0f8:	08010248 	.word	0x08010248

0800f0fc <__lshift>:
 800f0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f100:	460c      	mov	r4, r1
 800f102:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	6849      	ldr	r1, [r1, #4]
 800f10a:	eb0a 0903 	add.w	r9, sl, r3
 800f10e:	68a3      	ldr	r3, [r4, #8]
 800f110:	4607      	mov	r7, r0
 800f112:	4616      	mov	r6, r2
 800f114:	f109 0501 	add.w	r5, r9, #1
 800f118:	42ab      	cmp	r3, r5
 800f11a:	db32      	blt.n	800f182 <__lshift+0x86>
 800f11c:	4638      	mov	r0, r7
 800f11e:	f7ff fe2b 	bl	800ed78 <_Balloc>
 800f122:	2300      	movs	r3, #0
 800f124:	4680      	mov	r8, r0
 800f126:	f100 0114 	add.w	r1, r0, #20
 800f12a:	461a      	mov	r2, r3
 800f12c:	4553      	cmp	r3, sl
 800f12e:	db2b      	blt.n	800f188 <__lshift+0x8c>
 800f130:	6920      	ldr	r0, [r4, #16]
 800f132:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f136:	f104 0314 	add.w	r3, r4, #20
 800f13a:	f016 021f 	ands.w	r2, r6, #31
 800f13e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f142:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f146:	d025      	beq.n	800f194 <__lshift+0x98>
 800f148:	f1c2 0e20 	rsb	lr, r2, #32
 800f14c:	2000      	movs	r0, #0
 800f14e:	681e      	ldr	r6, [r3, #0]
 800f150:	468a      	mov	sl, r1
 800f152:	4096      	lsls	r6, r2
 800f154:	4330      	orrs	r0, r6
 800f156:	f84a 0b04 	str.w	r0, [sl], #4
 800f15a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f15e:	459c      	cmp	ip, r3
 800f160:	fa20 f00e 	lsr.w	r0, r0, lr
 800f164:	d814      	bhi.n	800f190 <__lshift+0x94>
 800f166:	6048      	str	r0, [r1, #4]
 800f168:	b108      	cbz	r0, 800f16e <__lshift+0x72>
 800f16a:	f109 0502 	add.w	r5, r9, #2
 800f16e:	3d01      	subs	r5, #1
 800f170:	4638      	mov	r0, r7
 800f172:	f8c8 5010 	str.w	r5, [r8, #16]
 800f176:	4621      	mov	r1, r4
 800f178:	f7ff fe32 	bl	800ede0 <_Bfree>
 800f17c:	4640      	mov	r0, r8
 800f17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f182:	3101      	adds	r1, #1
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	e7c7      	b.n	800f118 <__lshift+0x1c>
 800f188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f18c:	3301      	adds	r3, #1
 800f18e:	e7cd      	b.n	800f12c <__lshift+0x30>
 800f190:	4651      	mov	r1, sl
 800f192:	e7dc      	b.n	800f14e <__lshift+0x52>
 800f194:	3904      	subs	r1, #4
 800f196:	f853 2b04 	ldr.w	r2, [r3], #4
 800f19a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f19e:	459c      	cmp	ip, r3
 800f1a0:	d8f9      	bhi.n	800f196 <__lshift+0x9a>
 800f1a2:	e7e4      	b.n	800f16e <__lshift+0x72>

0800f1a4 <__mcmp>:
 800f1a4:	6903      	ldr	r3, [r0, #16]
 800f1a6:	690a      	ldr	r2, [r1, #16]
 800f1a8:	1a9b      	subs	r3, r3, r2
 800f1aa:	b530      	push	{r4, r5, lr}
 800f1ac:	d10c      	bne.n	800f1c8 <__mcmp+0x24>
 800f1ae:	0092      	lsls	r2, r2, #2
 800f1b0:	3014      	adds	r0, #20
 800f1b2:	3114      	adds	r1, #20
 800f1b4:	1884      	adds	r4, r0, r2
 800f1b6:	4411      	add	r1, r2
 800f1b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f1bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f1c0:	4295      	cmp	r5, r2
 800f1c2:	d003      	beq.n	800f1cc <__mcmp+0x28>
 800f1c4:	d305      	bcc.n	800f1d2 <__mcmp+0x2e>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	bd30      	pop	{r4, r5, pc}
 800f1cc:	42a0      	cmp	r0, r4
 800f1ce:	d3f3      	bcc.n	800f1b8 <__mcmp+0x14>
 800f1d0:	e7fa      	b.n	800f1c8 <__mcmp+0x24>
 800f1d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1d6:	e7f7      	b.n	800f1c8 <__mcmp+0x24>

0800f1d8 <__mdiff>:
 800f1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1dc:	460d      	mov	r5, r1
 800f1de:	4607      	mov	r7, r0
 800f1e0:	4611      	mov	r1, r2
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	4614      	mov	r4, r2
 800f1e6:	f7ff ffdd 	bl	800f1a4 <__mcmp>
 800f1ea:	1e06      	subs	r6, r0, #0
 800f1ec:	d108      	bne.n	800f200 <__mdiff+0x28>
 800f1ee:	4631      	mov	r1, r6
 800f1f0:	4638      	mov	r0, r7
 800f1f2:	f7ff fdc1 	bl	800ed78 <_Balloc>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f200:	bfa4      	itt	ge
 800f202:	4623      	movge	r3, r4
 800f204:	462c      	movge	r4, r5
 800f206:	4638      	mov	r0, r7
 800f208:	6861      	ldr	r1, [r4, #4]
 800f20a:	bfa6      	itte	ge
 800f20c:	461d      	movge	r5, r3
 800f20e:	2600      	movge	r6, #0
 800f210:	2601      	movlt	r6, #1
 800f212:	f7ff fdb1 	bl	800ed78 <_Balloc>
 800f216:	692b      	ldr	r3, [r5, #16]
 800f218:	60c6      	str	r6, [r0, #12]
 800f21a:	6926      	ldr	r6, [r4, #16]
 800f21c:	f105 0914 	add.w	r9, r5, #20
 800f220:	f104 0214 	add.w	r2, r4, #20
 800f224:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f228:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f22c:	f100 0514 	add.w	r5, r0, #20
 800f230:	f04f 0e00 	mov.w	lr, #0
 800f234:	f852 ab04 	ldr.w	sl, [r2], #4
 800f238:	f859 4b04 	ldr.w	r4, [r9], #4
 800f23c:	fa1e f18a 	uxtah	r1, lr, sl
 800f240:	b2a3      	uxth	r3, r4
 800f242:	1ac9      	subs	r1, r1, r3
 800f244:	0c23      	lsrs	r3, r4, #16
 800f246:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f24a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f24e:	b289      	uxth	r1, r1
 800f250:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f254:	45c8      	cmp	r8, r9
 800f256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f25a:	4694      	mov	ip, r2
 800f25c:	f845 3b04 	str.w	r3, [r5], #4
 800f260:	d8e8      	bhi.n	800f234 <__mdiff+0x5c>
 800f262:	45bc      	cmp	ip, r7
 800f264:	d304      	bcc.n	800f270 <__mdiff+0x98>
 800f266:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f26a:	b183      	cbz	r3, 800f28e <__mdiff+0xb6>
 800f26c:	6106      	str	r6, [r0, #16]
 800f26e:	e7c5      	b.n	800f1fc <__mdiff+0x24>
 800f270:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f274:	fa1e f381 	uxtah	r3, lr, r1
 800f278:	141a      	asrs	r2, r3, #16
 800f27a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f27e:	b29b      	uxth	r3, r3
 800f280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f284:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f288:	f845 3b04 	str.w	r3, [r5], #4
 800f28c:	e7e9      	b.n	800f262 <__mdiff+0x8a>
 800f28e:	3e01      	subs	r6, #1
 800f290:	e7e9      	b.n	800f266 <__mdiff+0x8e>

0800f292 <__d2b>:
 800f292:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f296:	460e      	mov	r6, r1
 800f298:	2101      	movs	r1, #1
 800f29a:	ec59 8b10 	vmov	r8, r9, d0
 800f29e:	4615      	mov	r5, r2
 800f2a0:	f7ff fd6a 	bl	800ed78 <_Balloc>
 800f2a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2ae:	bb34      	cbnz	r4, 800f2fe <__d2b+0x6c>
 800f2b0:	9301      	str	r3, [sp, #4]
 800f2b2:	f1b8 0300 	subs.w	r3, r8, #0
 800f2b6:	d027      	beq.n	800f308 <__d2b+0x76>
 800f2b8:	a802      	add	r0, sp, #8
 800f2ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f2be:	f7ff fe00 	bl	800eec2 <__lo0bits>
 800f2c2:	9900      	ldr	r1, [sp, #0]
 800f2c4:	b1f0      	cbz	r0, 800f304 <__d2b+0x72>
 800f2c6:	9a01      	ldr	r2, [sp, #4]
 800f2c8:	f1c0 0320 	rsb	r3, r0, #32
 800f2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d0:	430b      	orrs	r3, r1
 800f2d2:	40c2      	lsrs	r2, r0
 800f2d4:	617b      	str	r3, [r7, #20]
 800f2d6:	9201      	str	r2, [sp, #4]
 800f2d8:	9b01      	ldr	r3, [sp, #4]
 800f2da:	61bb      	str	r3, [r7, #24]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bf14      	ite	ne
 800f2e0:	2102      	movne	r1, #2
 800f2e2:	2101      	moveq	r1, #1
 800f2e4:	6139      	str	r1, [r7, #16]
 800f2e6:	b1c4      	cbz	r4, 800f31a <__d2b+0x88>
 800f2e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f2ec:	4404      	add	r4, r0
 800f2ee:	6034      	str	r4, [r6, #0]
 800f2f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f2f4:	6028      	str	r0, [r5, #0]
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	b003      	add	sp, #12
 800f2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f302:	e7d5      	b.n	800f2b0 <__d2b+0x1e>
 800f304:	6179      	str	r1, [r7, #20]
 800f306:	e7e7      	b.n	800f2d8 <__d2b+0x46>
 800f308:	a801      	add	r0, sp, #4
 800f30a:	f7ff fdda 	bl	800eec2 <__lo0bits>
 800f30e:	9b01      	ldr	r3, [sp, #4]
 800f310:	617b      	str	r3, [r7, #20]
 800f312:	2101      	movs	r1, #1
 800f314:	6139      	str	r1, [r7, #16]
 800f316:	3020      	adds	r0, #32
 800f318:	e7e5      	b.n	800f2e6 <__d2b+0x54>
 800f31a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f31e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f322:	6030      	str	r0, [r6, #0]
 800f324:	6918      	ldr	r0, [r3, #16]
 800f326:	f7ff fdad 	bl	800ee84 <__hi0bits>
 800f32a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f32e:	e7e1      	b.n	800f2f4 <__d2b+0x62>

0800f330 <_calloc_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	fb02 f401 	mul.w	r4, r2, r1
 800f336:	4621      	mov	r1, r4
 800f338:	f000 f856 	bl	800f3e8 <_malloc_r>
 800f33c:	4605      	mov	r5, r0
 800f33e:	b118      	cbz	r0, 800f348 <_calloc_r+0x18>
 800f340:	4622      	mov	r2, r4
 800f342:	2100      	movs	r1, #0
 800f344:	f7fd ff1f 	bl	800d186 <memset>
 800f348:	4628      	mov	r0, r5
 800f34a:	bd38      	pop	{r3, r4, r5, pc}

0800f34c <_free_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4605      	mov	r5, r0
 800f350:	2900      	cmp	r1, #0
 800f352:	d045      	beq.n	800f3e0 <_free_r+0x94>
 800f354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f358:	1f0c      	subs	r4, r1, #4
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	bfb8      	it	lt
 800f35e:	18e4      	addlt	r4, r4, r3
 800f360:	f000 fc03 	bl	800fb6a <__malloc_lock>
 800f364:	4a1f      	ldr	r2, [pc, #124]	; (800f3e4 <_free_r+0x98>)
 800f366:	6813      	ldr	r3, [r2, #0]
 800f368:	4610      	mov	r0, r2
 800f36a:	b933      	cbnz	r3, 800f37a <_free_r+0x2e>
 800f36c:	6063      	str	r3, [r4, #4]
 800f36e:	6014      	str	r4, [r2, #0]
 800f370:	4628      	mov	r0, r5
 800f372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f376:	f000 bbf9 	b.w	800fb6c <__malloc_unlock>
 800f37a:	42a3      	cmp	r3, r4
 800f37c:	d90c      	bls.n	800f398 <_free_r+0x4c>
 800f37e:	6821      	ldr	r1, [r4, #0]
 800f380:	1862      	adds	r2, r4, r1
 800f382:	4293      	cmp	r3, r2
 800f384:	bf04      	itt	eq
 800f386:	681a      	ldreq	r2, [r3, #0]
 800f388:	685b      	ldreq	r3, [r3, #4]
 800f38a:	6063      	str	r3, [r4, #4]
 800f38c:	bf04      	itt	eq
 800f38e:	1852      	addeq	r2, r2, r1
 800f390:	6022      	streq	r2, [r4, #0]
 800f392:	6004      	str	r4, [r0, #0]
 800f394:	e7ec      	b.n	800f370 <_free_r+0x24>
 800f396:	4613      	mov	r3, r2
 800f398:	685a      	ldr	r2, [r3, #4]
 800f39a:	b10a      	cbz	r2, 800f3a0 <_free_r+0x54>
 800f39c:	42a2      	cmp	r2, r4
 800f39e:	d9fa      	bls.n	800f396 <_free_r+0x4a>
 800f3a0:	6819      	ldr	r1, [r3, #0]
 800f3a2:	1858      	adds	r0, r3, r1
 800f3a4:	42a0      	cmp	r0, r4
 800f3a6:	d10b      	bne.n	800f3c0 <_free_r+0x74>
 800f3a8:	6820      	ldr	r0, [r4, #0]
 800f3aa:	4401      	add	r1, r0
 800f3ac:	1858      	adds	r0, r3, r1
 800f3ae:	4282      	cmp	r2, r0
 800f3b0:	6019      	str	r1, [r3, #0]
 800f3b2:	d1dd      	bne.n	800f370 <_free_r+0x24>
 800f3b4:	6810      	ldr	r0, [r2, #0]
 800f3b6:	6852      	ldr	r2, [r2, #4]
 800f3b8:	605a      	str	r2, [r3, #4]
 800f3ba:	4401      	add	r1, r0
 800f3bc:	6019      	str	r1, [r3, #0]
 800f3be:	e7d7      	b.n	800f370 <_free_r+0x24>
 800f3c0:	d902      	bls.n	800f3c8 <_free_r+0x7c>
 800f3c2:	230c      	movs	r3, #12
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	e7d3      	b.n	800f370 <_free_r+0x24>
 800f3c8:	6820      	ldr	r0, [r4, #0]
 800f3ca:	1821      	adds	r1, r4, r0
 800f3cc:	428a      	cmp	r2, r1
 800f3ce:	bf04      	itt	eq
 800f3d0:	6811      	ldreq	r1, [r2, #0]
 800f3d2:	6852      	ldreq	r2, [r2, #4]
 800f3d4:	6062      	str	r2, [r4, #4]
 800f3d6:	bf04      	itt	eq
 800f3d8:	1809      	addeq	r1, r1, r0
 800f3da:	6021      	streq	r1, [r4, #0]
 800f3dc:	605c      	str	r4, [r3, #4]
 800f3de:	e7c7      	b.n	800f370 <_free_r+0x24>
 800f3e0:	bd38      	pop	{r3, r4, r5, pc}
 800f3e2:	bf00      	nop
 800f3e4:	2000039c 	.word	0x2000039c

0800f3e8 <_malloc_r>:
 800f3e8:	b570      	push	{r4, r5, r6, lr}
 800f3ea:	1ccd      	adds	r5, r1, #3
 800f3ec:	f025 0503 	bic.w	r5, r5, #3
 800f3f0:	3508      	adds	r5, #8
 800f3f2:	2d0c      	cmp	r5, #12
 800f3f4:	bf38      	it	cc
 800f3f6:	250c      	movcc	r5, #12
 800f3f8:	2d00      	cmp	r5, #0
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	db01      	blt.n	800f402 <_malloc_r+0x1a>
 800f3fe:	42a9      	cmp	r1, r5
 800f400:	d903      	bls.n	800f40a <_malloc_r+0x22>
 800f402:	230c      	movs	r3, #12
 800f404:	6033      	str	r3, [r6, #0]
 800f406:	2000      	movs	r0, #0
 800f408:	bd70      	pop	{r4, r5, r6, pc}
 800f40a:	f000 fbae 	bl	800fb6a <__malloc_lock>
 800f40e:	4a21      	ldr	r2, [pc, #132]	; (800f494 <_malloc_r+0xac>)
 800f410:	6814      	ldr	r4, [r2, #0]
 800f412:	4621      	mov	r1, r4
 800f414:	b991      	cbnz	r1, 800f43c <_malloc_r+0x54>
 800f416:	4c20      	ldr	r4, [pc, #128]	; (800f498 <_malloc_r+0xb0>)
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	b91b      	cbnz	r3, 800f424 <_malloc_r+0x3c>
 800f41c:	4630      	mov	r0, r6
 800f41e:	f000 facf 	bl	800f9c0 <_sbrk_r>
 800f422:	6020      	str	r0, [r4, #0]
 800f424:	4629      	mov	r1, r5
 800f426:	4630      	mov	r0, r6
 800f428:	f000 faca 	bl	800f9c0 <_sbrk_r>
 800f42c:	1c43      	adds	r3, r0, #1
 800f42e:	d124      	bne.n	800f47a <_malloc_r+0x92>
 800f430:	230c      	movs	r3, #12
 800f432:	6033      	str	r3, [r6, #0]
 800f434:	4630      	mov	r0, r6
 800f436:	f000 fb99 	bl	800fb6c <__malloc_unlock>
 800f43a:	e7e4      	b.n	800f406 <_malloc_r+0x1e>
 800f43c:	680b      	ldr	r3, [r1, #0]
 800f43e:	1b5b      	subs	r3, r3, r5
 800f440:	d418      	bmi.n	800f474 <_malloc_r+0x8c>
 800f442:	2b0b      	cmp	r3, #11
 800f444:	d90f      	bls.n	800f466 <_malloc_r+0x7e>
 800f446:	600b      	str	r3, [r1, #0]
 800f448:	50cd      	str	r5, [r1, r3]
 800f44a:	18cc      	adds	r4, r1, r3
 800f44c:	4630      	mov	r0, r6
 800f44e:	f000 fb8d 	bl	800fb6c <__malloc_unlock>
 800f452:	f104 000b 	add.w	r0, r4, #11
 800f456:	1d23      	adds	r3, r4, #4
 800f458:	f020 0007 	bic.w	r0, r0, #7
 800f45c:	1ac3      	subs	r3, r0, r3
 800f45e:	d0d3      	beq.n	800f408 <_malloc_r+0x20>
 800f460:	425a      	negs	r2, r3
 800f462:	50e2      	str	r2, [r4, r3]
 800f464:	e7d0      	b.n	800f408 <_malloc_r+0x20>
 800f466:	428c      	cmp	r4, r1
 800f468:	684b      	ldr	r3, [r1, #4]
 800f46a:	bf16      	itet	ne
 800f46c:	6063      	strne	r3, [r4, #4]
 800f46e:	6013      	streq	r3, [r2, #0]
 800f470:	460c      	movne	r4, r1
 800f472:	e7eb      	b.n	800f44c <_malloc_r+0x64>
 800f474:	460c      	mov	r4, r1
 800f476:	6849      	ldr	r1, [r1, #4]
 800f478:	e7cc      	b.n	800f414 <_malloc_r+0x2c>
 800f47a:	1cc4      	adds	r4, r0, #3
 800f47c:	f024 0403 	bic.w	r4, r4, #3
 800f480:	42a0      	cmp	r0, r4
 800f482:	d005      	beq.n	800f490 <_malloc_r+0xa8>
 800f484:	1a21      	subs	r1, r4, r0
 800f486:	4630      	mov	r0, r6
 800f488:	f000 fa9a 	bl	800f9c0 <_sbrk_r>
 800f48c:	3001      	adds	r0, #1
 800f48e:	d0cf      	beq.n	800f430 <_malloc_r+0x48>
 800f490:	6025      	str	r5, [r4, #0]
 800f492:	e7db      	b.n	800f44c <_malloc_r+0x64>
 800f494:	2000039c 	.word	0x2000039c
 800f498:	200003a0 	.word	0x200003a0

0800f49c <__ssputs_r>:
 800f49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a0:	688e      	ldr	r6, [r1, #8]
 800f4a2:	429e      	cmp	r6, r3
 800f4a4:	4682      	mov	sl, r0
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	4690      	mov	r8, r2
 800f4aa:	4699      	mov	r9, r3
 800f4ac:	d837      	bhi.n	800f51e <__ssputs_r+0x82>
 800f4ae:	898a      	ldrh	r2, [r1, #12]
 800f4b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4b4:	d031      	beq.n	800f51a <__ssputs_r+0x7e>
 800f4b6:	6825      	ldr	r5, [r4, #0]
 800f4b8:	6909      	ldr	r1, [r1, #16]
 800f4ba:	1a6f      	subs	r7, r5, r1
 800f4bc:	6965      	ldr	r5, [r4, #20]
 800f4be:	2302      	movs	r3, #2
 800f4c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800f4c8:	f109 0301 	add.w	r3, r9, #1
 800f4cc:	443b      	add	r3, r7
 800f4ce:	429d      	cmp	r5, r3
 800f4d0:	bf38      	it	cc
 800f4d2:	461d      	movcc	r5, r3
 800f4d4:	0553      	lsls	r3, r2, #21
 800f4d6:	d530      	bpl.n	800f53a <__ssputs_r+0x9e>
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7ff ff85 	bl	800f3e8 <_malloc_r>
 800f4de:	4606      	mov	r6, r0
 800f4e0:	b950      	cbnz	r0, 800f4f8 <__ssputs_r+0x5c>
 800f4e2:	230c      	movs	r3, #12
 800f4e4:	f8ca 3000 	str.w	r3, [sl]
 800f4e8:	89a3      	ldrh	r3, [r4, #12]
 800f4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ee:	81a3      	strh	r3, [r4, #12]
 800f4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f8:	463a      	mov	r2, r7
 800f4fa:	6921      	ldr	r1, [r4, #16]
 800f4fc:	f7fd fe38 	bl	800d170 <memcpy>
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f50a:	81a3      	strh	r3, [r4, #12]
 800f50c:	6126      	str	r6, [r4, #16]
 800f50e:	6165      	str	r5, [r4, #20]
 800f510:	443e      	add	r6, r7
 800f512:	1bed      	subs	r5, r5, r7
 800f514:	6026      	str	r6, [r4, #0]
 800f516:	60a5      	str	r5, [r4, #8]
 800f518:	464e      	mov	r6, r9
 800f51a:	454e      	cmp	r6, r9
 800f51c:	d900      	bls.n	800f520 <__ssputs_r+0x84>
 800f51e:	464e      	mov	r6, r9
 800f520:	4632      	mov	r2, r6
 800f522:	4641      	mov	r1, r8
 800f524:	6820      	ldr	r0, [r4, #0]
 800f526:	f000 fb07 	bl	800fb38 <memmove>
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	1b9b      	subs	r3, r3, r6
 800f52e:	60a3      	str	r3, [r4, #8]
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	441e      	add	r6, r3
 800f534:	6026      	str	r6, [r4, #0]
 800f536:	2000      	movs	r0, #0
 800f538:	e7dc      	b.n	800f4f4 <__ssputs_r+0x58>
 800f53a:	462a      	mov	r2, r5
 800f53c:	f000 fb17 	bl	800fb6e <_realloc_r>
 800f540:	4606      	mov	r6, r0
 800f542:	2800      	cmp	r0, #0
 800f544:	d1e2      	bne.n	800f50c <__ssputs_r+0x70>
 800f546:	6921      	ldr	r1, [r4, #16]
 800f548:	4650      	mov	r0, sl
 800f54a:	f7ff feff 	bl	800f34c <_free_r>
 800f54e:	e7c8      	b.n	800f4e2 <__ssputs_r+0x46>

0800f550 <_svfiprintf_r>:
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	461d      	mov	r5, r3
 800f556:	898b      	ldrh	r3, [r1, #12]
 800f558:	061f      	lsls	r7, r3, #24
 800f55a:	b09d      	sub	sp, #116	; 0x74
 800f55c:	4680      	mov	r8, r0
 800f55e:	460c      	mov	r4, r1
 800f560:	4616      	mov	r6, r2
 800f562:	d50f      	bpl.n	800f584 <_svfiprintf_r+0x34>
 800f564:	690b      	ldr	r3, [r1, #16]
 800f566:	b96b      	cbnz	r3, 800f584 <_svfiprintf_r+0x34>
 800f568:	2140      	movs	r1, #64	; 0x40
 800f56a:	f7ff ff3d 	bl	800f3e8 <_malloc_r>
 800f56e:	6020      	str	r0, [r4, #0]
 800f570:	6120      	str	r0, [r4, #16]
 800f572:	b928      	cbnz	r0, 800f580 <_svfiprintf_r+0x30>
 800f574:	230c      	movs	r3, #12
 800f576:	f8c8 3000 	str.w	r3, [r8]
 800f57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f57e:	e0c8      	b.n	800f712 <_svfiprintf_r+0x1c2>
 800f580:	2340      	movs	r3, #64	; 0x40
 800f582:	6163      	str	r3, [r4, #20]
 800f584:	2300      	movs	r3, #0
 800f586:	9309      	str	r3, [sp, #36]	; 0x24
 800f588:	2320      	movs	r3, #32
 800f58a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f58e:	2330      	movs	r3, #48	; 0x30
 800f590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f594:	9503      	str	r5, [sp, #12]
 800f596:	f04f 0b01 	mov.w	fp, #1
 800f59a:	4637      	mov	r7, r6
 800f59c:	463d      	mov	r5, r7
 800f59e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5a2:	b10b      	cbz	r3, 800f5a8 <_svfiprintf_r+0x58>
 800f5a4:	2b25      	cmp	r3, #37	; 0x25
 800f5a6:	d13e      	bne.n	800f626 <_svfiprintf_r+0xd6>
 800f5a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800f5ac:	d00b      	beq.n	800f5c6 <_svfiprintf_r+0x76>
 800f5ae:	4653      	mov	r3, sl
 800f5b0:	4632      	mov	r2, r6
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	f7ff ff71 	bl	800f49c <__ssputs_r>
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	f000 80a4 	beq.w	800f708 <_svfiprintf_r+0x1b8>
 800f5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5c2:	4453      	add	r3, sl
 800f5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5c6:	783b      	ldrb	r3, [r7, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 809d 	beq.w	800f708 <_svfiprintf_r+0x1b8>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5d8:	9304      	str	r3, [sp, #16]
 800f5da:	9307      	str	r3, [sp, #28]
 800f5dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5e0:	931a      	str	r3, [sp, #104]	; 0x68
 800f5e2:	462f      	mov	r7, r5
 800f5e4:	2205      	movs	r2, #5
 800f5e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f5ea:	4850      	ldr	r0, [pc, #320]	; (800f72c <_svfiprintf_r+0x1dc>)
 800f5ec:	f7f0 fdf8 	bl	80001e0 <memchr>
 800f5f0:	9b04      	ldr	r3, [sp, #16]
 800f5f2:	b9d0      	cbnz	r0, 800f62a <_svfiprintf_r+0xda>
 800f5f4:	06d9      	lsls	r1, r3, #27
 800f5f6:	bf44      	itt	mi
 800f5f8:	2220      	movmi	r2, #32
 800f5fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f5fe:	071a      	lsls	r2, r3, #28
 800f600:	bf44      	itt	mi
 800f602:	222b      	movmi	r2, #43	; 0x2b
 800f604:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f608:	782a      	ldrb	r2, [r5, #0]
 800f60a:	2a2a      	cmp	r2, #42	; 0x2a
 800f60c:	d015      	beq.n	800f63a <_svfiprintf_r+0xea>
 800f60e:	9a07      	ldr	r2, [sp, #28]
 800f610:	462f      	mov	r7, r5
 800f612:	2000      	movs	r0, #0
 800f614:	250a      	movs	r5, #10
 800f616:	4639      	mov	r1, r7
 800f618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f61c:	3b30      	subs	r3, #48	; 0x30
 800f61e:	2b09      	cmp	r3, #9
 800f620:	d94d      	bls.n	800f6be <_svfiprintf_r+0x16e>
 800f622:	b1b8      	cbz	r0, 800f654 <_svfiprintf_r+0x104>
 800f624:	e00f      	b.n	800f646 <_svfiprintf_r+0xf6>
 800f626:	462f      	mov	r7, r5
 800f628:	e7b8      	b.n	800f59c <_svfiprintf_r+0x4c>
 800f62a:	4a40      	ldr	r2, [pc, #256]	; (800f72c <_svfiprintf_r+0x1dc>)
 800f62c:	1a80      	subs	r0, r0, r2
 800f62e:	fa0b f000 	lsl.w	r0, fp, r0
 800f632:	4318      	orrs	r0, r3
 800f634:	9004      	str	r0, [sp, #16]
 800f636:	463d      	mov	r5, r7
 800f638:	e7d3      	b.n	800f5e2 <_svfiprintf_r+0x92>
 800f63a:	9a03      	ldr	r2, [sp, #12]
 800f63c:	1d11      	adds	r1, r2, #4
 800f63e:	6812      	ldr	r2, [r2, #0]
 800f640:	9103      	str	r1, [sp, #12]
 800f642:	2a00      	cmp	r2, #0
 800f644:	db01      	blt.n	800f64a <_svfiprintf_r+0xfa>
 800f646:	9207      	str	r2, [sp, #28]
 800f648:	e004      	b.n	800f654 <_svfiprintf_r+0x104>
 800f64a:	4252      	negs	r2, r2
 800f64c:	f043 0302 	orr.w	r3, r3, #2
 800f650:	9207      	str	r2, [sp, #28]
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	783b      	ldrb	r3, [r7, #0]
 800f656:	2b2e      	cmp	r3, #46	; 0x2e
 800f658:	d10c      	bne.n	800f674 <_svfiprintf_r+0x124>
 800f65a:	787b      	ldrb	r3, [r7, #1]
 800f65c:	2b2a      	cmp	r3, #42	; 0x2a
 800f65e:	d133      	bne.n	800f6c8 <_svfiprintf_r+0x178>
 800f660:	9b03      	ldr	r3, [sp, #12]
 800f662:	1d1a      	adds	r2, r3, #4
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	9203      	str	r2, [sp, #12]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	bfb8      	it	lt
 800f66c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f670:	3702      	adds	r7, #2
 800f672:	9305      	str	r3, [sp, #20]
 800f674:	4d2e      	ldr	r5, [pc, #184]	; (800f730 <_svfiprintf_r+0x1e0>)
 800f676:	7839      	ldrb	r1, [r7, #0]
 800f678:	2203      	movs	r2, #3
 800f67a:	4628      	mov	r0, r5
 800f67c:	f7f0 fdb0 	bl	80001e0 <memchr>
 800f680:	b138      	cbz	r0, 800f692 <_svfiprintf_r+0x142>
 800f682:	2340      	movs	r3, #64	; 0x40
 800f684:	1b40      	subs	r0, r0, r5
 800f686:	fa03 f000 	lsl.w	r0, r3, r0
 800f68a:	9b04      	ldr	r3, [sp, #16]
 800f68c:	4303      	orrs	r3, r0
 800f68e:	3701      	adds	r7, #1
 800f690:	9304      	str	r3, [sp, #16]
 800f692:	7839      	ldrb	r1, [r7, #0]
 800f694:	4827      	ldr	r0, [pc, #156]	; (800f734 <_svfiprintf_r+0x1e4>)
 800f696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f69a:	2206      	movs	r2, #6
 800f69c:	1c7e      	adds	r6, r7, #1
 800f69e:	f7f0 fd9f 	bl	80001e0 <memchr>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d038      	beq.n	800f718 <_svfiprintf_r+0x1c8>
 800f6a6:	4b24      	ldr	r3, [pc, #144]	; (800f738 <_svfiprintf_r+0x1e8>)
 800f6a8:	bb13      	cbnz	r3, 800f6f0 <_svfiprintf_r+0x1a0>
 800f6aa:	9b03      	ldr	r3, [sp, #12]
 800f6ac:	3307      	adds	r3, #7
 800f6ae:	f023 0307 	bic.w	r3, r3, #7
 800f6b2:	3308      	adds	r3, #8
 800f6b4:	9303      	str	r3, [sp, #12]
 800f6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b8:	444b      	add	r3, r9
 800f6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f6bc:	e76d      	b.n	800f59a <_svfiprintf_r+0x4a>
 800f6be:	fb05 3202 	mla	r2, r5, r2, r3
 800f6c2:	2001      	movs	r0, #1
 800f6c4:	460f      	mov	r7, r1
 800f6c6:	e7a6      	b.n	800f616 <_svfiprintf_r+0xc6>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	3701      	adds	r7, #1
 800f6cc:	9305      	str	r3, [sp, #20]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	250a      	movs	r5, #10
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6d8:	3a30      	subs	r2, #48	; 0x30
 800f6da:	2a09      	cmp	r2, #9
 800f6dc:	d903      	bls.n	800f6e6 <_svfiprintf_r+0x196>
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0c8      	beq.n	800f674 <_svfiprintf_r+0x124>
 800f6e2:	9105      	str	r1, [sp, #20]
 800f6e4:	e7c6      	b.n	800f674 <_svfiprintf_r+0x124>
 800f6e6:	fb05 2101 	mla	r1, r5, r1, r2
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	4607      	mov	r7, r0
 800f6ee:	e7f0      	b.n	800f6d2 <_svfiprintf_r+0x182>
 800f6f0:	ab03      	add	r3, sp, #12
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	4b11      	ldr	r3, [pc, #68]	; (800f73c <_svfiprintf_r+0x1ec>)
 800f6f8:	a904      	add	r1, sp, #16
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	f7fd fde0 	bl	800d2c0 <_printf_float>
 800f700:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f704:	4681      	mov	r9, r0
 800f706:	d1d6      	bne.n	800f6b6 <_svfiprintf_r+0x166>
 800f708:	89a3      	ldrh	r3, [r4, #12]
 800f70a:	065b      	lsls	r3, r3, #25
 800f70c:	f53f af35 	bmi.w	800f57a <_svfiprintf_r+0x2a>
 800f710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f712:	b01d      	add	sp, #116	; 0x74
 800f714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f718:	ab03      	add	r3, sp, #12
 800f71a:	9300      	str	r3, [sp, #0]
 800f71c:	4622      	mov	r2, r4
 800f71e:	4b07      	ldr	r3, [pc, #28]	; (800f73c <_svfiprintf_r+0x1ec>)
 800f720:	a904      	add	r1, sp, #16
 800f722:	4640      	mov	r0, r8
 800f724:	f7fe f882 	bl	800d82c <_printf_i>
 800f728:	e7ea      	b.n	800f700 <_svfiprintf_r+0x1b0>
 800f72a:	bf00      	nop
 800f72c:	08010254 	.word	0x08010254
 800f730:	0801025a 	.word	0x0801025a
 800f734:	0801025e 	.word	0x0801025e
 800f738:	0800d2c1 	.word	0x0800d2c1
 800f73c:	0800f49d 	.word	0x0800f49d

0800f740 <__sfputc_r>:
 800f740:	6893      	ldr	r3, [r2, #8]
 800f742:	3b01      	subs	r3, #1
 800f744:	2b00      	cmp	r3, #0
 800f746:	b410      	push	{r4}
 800f748:	6093      	str	r3, [r2, #8]
 800f74a:	da08      	bge.n	800f75e <__sfputc_r+0x1e>
 800f74c:	6994      	ldr	r4, [r2, #24]
 800f74e:	42a3      	cmp	r3, r4
 800f750:	db01      	blt.n	800f756 <__sfputc_r+0x16>
 800f752:	290a      	cmp	r1, #10
 800f754:	d103      	bne.n	800f75e <__sfputc_r+0x1e>
 800f756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f75a:	f7fe ba15 	b.w	800db88 <__swbuf_r>
 800f75e:	6813      	ldr	r3, [r2, #0]
 800f760:	1c58      	adds	r0, r3, #1
 800f762:	6010      	str	r0, [r2, #0]
 800f764:	7019      	strb	r1, [r3, #0]
 800f766:	4608      	mov	r0, r1
 800f768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f76c:	4770      	bx	lr

0800f76e <__sfputs_r>:
 800f76e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f770:	4606      	mov	r6, r0
 800f772:	460f      	mov	r7, r1
 800f774:	4614      	mov	r4, r2
 800f776:	18d5      	adds	r5, r2, r3
 800f778:	42ac      	cmp	r4, r5
 800f77a:	d101      	bne.n	800f780 <__sfputs_r+0x12>
 800f77c:	2000      	movs	r0, #0
 800f77e:	e007      	b.n	800f790 <__sfputs_r+0x22>
 800f780:	463a      	mov	r2, r7
 800f782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f786:	4630      	mov	r0, r6
 800f788:	f7ff ffda 	bl	800f740 <__sfputc_r>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d1f3      	bne.n	800f778 <__sfputs_r+0xa>
 800f790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f794 <_vfiprintf_r>:
 800f794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f798:	460c      	mov	r4, r1
 800f79a:	b09d      	sub	sp, #116	; 0x74
 800f79c:	4617      	mov	r7, r2
 800f79e:	461d      	mov	r5, r3
 800f7a0:	4606      	mov	r6, r0
 800f7a2:	b118      	cbz	r0, 800f7ac <_vfiprintf_r+0x18>
 800f7a4:	6983      	ldr	r3, [r0, #24]
 800f7a6:	b90b      	cbnz	r3, 800f7ac <_vfiprintf_r+0x18>
 800f7a8:	f7ff f9e2 	bl	800eb70 <__sinit>
 800f7ac:	4b7c      	ldr	r3, [pc, #496]	; (800f9a0 <_vfiprintf_r+0x20c>)
 800f7ae:	429c      	cmp	r4, r3
 800f7b0:	d158      	bne.n	800f864 <_vfiprintf_r+0xd0>
 800f7b2:	6874      	ldr	r4, [r6, #4]
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	0718      	lsls	r0, r3, #28
 800f7b8:	d55e      	bpl.n	800f878 <_vfiprintf_r+0xe4>
 800f7ba:	6923      	ldr	r3, [r4, #16]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d05b      	beq.n	800f878 <_vfiprintf_r+0xe4>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c4:	2320      	movs	r3, #32
 800f7c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7ca:	2330      	movs	r3, #48	; 0x30
 800f7cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7d0:	9503      	str	r5, [sp, #12]
 800f7d2:	f04f 0b01 	mov.w	fp, #1
 800f7d6:	46b8      	mov	r8, r7
 800f7d8:	4645      	mov	r5, r8
 800f7da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f7de:	b10b      	cbz	r3, 800f7e4 <_vfiprintf_r+0x50>
 800f7e0:	2b25      	cmp	r3, #37	; 0x25
 800f7e2:	d154      	bne.n	800f88e <_vfiprintf_r+0xfa>
 800f7e4:	ebb8 0a07 	subs.w	sl, r8, r7
 800f7e8:	d00b      	beq.n	800f802 <_vfiprintf_r+0x6e>
 800f7ea:	4653      	mov	r3, sl
 800f7ec:	463a      	mov	r2, r7
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f7ff ffbc 	bl	800f76e <__sfputs_r>
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f000 80c2 	beq.w	800f980 <_vfiprintf_r+0x1ec>
 800f7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fe:	4453      	add	r3, sl
 800f800:	9309      	str	r3, [sp, #36]	; 0x24
 800f802:	f898 3000 	ldrb.w	r3, [r8]
 800f806:	2b00      	cmp	r3, #0
 800f808:	f000 80ba 	beq.w	800f980 <_vfiprintf_r+0x1ec>
 800f80c:	2300      	movs	r3, #0
 800f80e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f816:	9304      	str	r3, [sp, #16]
 800f818:	9307      	str	r3, [sp, #28]
 800f81a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f81e:	931a      	str	r3, [sp, #104]	; 0x68
 800f820:	46a8      	mov	r8, r5
 800f822:	2205      	movs	r2, #5
 800f824:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f828:	485e      	ldr	r0, [pc, #376]	; (800f9a4 <_vfiprintf_r+0x210>)
 800f82a:	f7f0 fcd9 	bl	80001e0 <memchr>
 800f82e:	9b04      	ldr	r3, [sp, #16]
 800f830:	bb78      	cbnz	r0, 800f892 <_vfiprintf_r+0xfe>
 800f832:	06d9      	lsls	r1, r3, #27
 800f834:	bf44      	itt	mi
 800f836:	2220      	movmi	r2, #32
 800f838:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f83c:	071a      	lsls	r2, r3, #28
 800f83e:	bf44      	itt	mi
 800f840:	222b      	movmi	r2, #43	; 0x2b
 800f842:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f846:	782a      	ldrb	r2, [r5, #0]
 800f848:	2a2a      	cmp	r2, #42	; 0x2a
 800f84a:	d02a      	beq.n	800f8a2 <_vfiprintf_r+0x10e>
 800f84c:	9a07      	ldr	r2, [sp, #28]
 800f84e:	46a8      	mov	r8, r5
 800f850:	2000      	movs	r0, #0
 800f852:	250a      	movs	r5, #10
 800f854:	4641      	mov	r1, r8
 800f856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f85a:	3b30      	subs	r3, #48	; 0x30
 800f85c:	2b09      	cmp	r3, #9
 800f85e:	d969      	bls.n	800f934 <_vfiprintf_r+0x1a0>
 800f860:	b360      	cbz	r0, 800f8bc <_vfiprintf_r+0x128>
 800f862:	e024      	b.n	800f8ae <_vfiprintf_r+0x11a>
 800f864:	4b50      	ldr	r3, [pc, #320]	; (800f9a8 <_vfiprintf_r+0x214>)
 800f866:	429c      	cmp	r4, r3
 800f868:	d101      	bne.n	800f86e <_vfiprintf_r+0xda>
 800f86a:	68b4      	ldr	r4, [r6, #8]
 800f86c:	e7a2      	b.n	800f7b4 <_vfiprintf_r+0x20>
 800f86e:	4b4f      	ldr	r3, [pc, #316]	; (800f9ac <_vfiprintf_r+0x218>)
 800f870:	429c      	cmp	r4, r3
 800f872:	bf08      	it	eq
 800f874:	68f4      	ldreq	r4, [r6, #12]
 800f876:	e79d      	b.n	800f7b4 <_vfiprintf_r+0x20>
 800f878:	4621      	mov	r1, r4
 800f87a:	4630      	mov	r0, r6
 800f87c:	f7fe f9d6 	bl	800dc2c <__swsetup_r>
 800f880:	2800      	cmp	r0, #0
 800f882:	d09d      	beq.n	800f7c0 <_vfiprintf_r+0x2c>
 800f884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f888:	b01d      	add	sp, #116	; 0x74
 800f88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88e:	46a8      	mov	r8, r5
 800f890:	e7a2      	b.n	800f7d8 <_vfiprintf_r+0x44>
 800f892:	4a44      	ldr	r2, [pc, #272]	; (800f9a4 <_vfiprintf_r+0x210>)
 800f894:	1a80      	subs	r0, r0, r2
 800f896:	fa0b f000 	lsl.w	r0, fp, r0
 800f89a:	4318      	orrs	r0, r3
 800f89c:	9004      	str	r0, [sp, #16]
 800f89e:	4645      	mov	r5, r8
 800f8a0:	e7be      	b.n	800f820 <_vfiprintf_r+0x8c>
 800f8a2:	9a03      	ldr	r2, [sp, #12]
 800f8a4:	1d11      	adds	r1, r2, #4
 800f8a6:	6812      	ldr	r2, [r2, #0]
 800f8a8:	9103      	str	r1, [sp, #12]
 800f8aa:	2a00      	cmp	r2, #0
 800f8ac:	db01      	blt.n	800f8b2 <_vfiprintf_r+0x11e>
 800f8ae:	9207      	str	r2, [sp, #28]
 800f8b0:	e004      	b.n	800f8bc <_vfiprintf_r+0x128>
 800f8b2:	4252      	negs	r2, r2
 800f8b4:	f043 0302 	orr.w	r3, r3, #2
 800f8b8:	9207      	str	r2, [sp, #28]
 800f8ba:	9304      	str	r3, [sp, #16]
 800f8bc:	f898 3000 	ldrb.w	r3, [r8]
 800f8c0:	2b2e      	cmp	r3, #46	; 0x2e
 800f8c2:	d10e      	bne.n	800f8e2 <_vfiprintf_r+0x14e>
 800f8c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800f8ca:	d138      	bne.n	800f93e <_vfiprintf_r+0x1aa>
 800f8cc:	9b03      	ldr	r3, [sp, #12]
 800f8ce:	1d1a      	adds	r2, r3, #4
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	9203      	str	r2, [sp, #12]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	bfb8      	it	lt
 800f8d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f8dc:	f108 0802 	add.w	r8, r8, #2
 800f8e0:	9305      	str	r3, [sp, #20]
 800f8e2:	4d33      	ldr	r5, [pc, #204]	; (800f9b0 <_vfiprintf_r+0x21c>)
 800f8e4:	f898 1000 	ldrb.w	r1, [r8]
 800f8e8:	2203      	movs	r2, #3
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7f0 fc78 	bl	80001e0 <memchr>
 800f8f0:	b140      	cbz	r0, 800f904 <_vfiprintf_r+0x170>
 800f8f2:	2340      	movs	r3, #64	; 0x40
 800f8f4:	1b40      	subs	r0, r0, r5
 800f8f6:	fa03 f000 	lsl.w	r0, r3, r0
 800f8fa:	9b04      	ldr	r3, [sp, #16]
 800f8fc:	4303      	orrs	r3, r0
 800f8fe:	f108 0801 	add.w	r8, r8, #1
 800f902:	9304      	str	r3, [sp, #16]
 800f904:	f898 1000 	ldrb.w	r1, [r8]
 800f908:	482a      	ldr	r0, [pc, #168]	; (800f9b4 <_vfiprintf_r+0x220>)
 800f90a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f90e:	2206      	movs	r2, #6
 800f910:	f108 0701 	add.w	r7, r8, #1
 800f914:	f7f0 fc64 	bl	80001e0 <memchr>
 800f918:	2800      	cmp	r0, #0
 800f91a:	d037      	beq.n	800f98c <_vfiprintf_r+0x1f8>
 800f91c:	4b26      	ldr	r3, [pc, #152]	; (800f9b8 <_vfiprintf_r+0x224>)
 800f91e:	bb1b      	cbnz	r3, 800f968 <_vfiprintf_r+0x1d4>
 800f920:	9b03      	ldr	r3, [sp, #12]
 800f922:	3307      	adds	r3, #7
 800f924:	f023 0307 	bic.w	r3, r3, #7
 800f928:	3308      	adds	r3, #8
 800f92a:	9303      	str	r3, [sp, #12]
 800f92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f92e:	444b      	add	r3, r9
 800f930:	9309      	str	r3, [sp, #36]	; 0x24
 800f932:	e750      	b.n	800f7d6 <_vfiprintf_r+0x42>
 800f934:	fb05 3202 	mla	r2, r5, r2, r3
 800f938:	2001      	movs	r0, #1
 800f93a:	4688      	mov	r8, r1
 800f93c:	e78a      	b.n	800f854 <_vfiprintf_r+0xc0>
 800f93e:	2300      	movs	r3, #0
 800f940:	f108 0801 	add.w	r8, r8, #1
 800f944:	9305      	str	r3, [sp, #20]
 800f946:	4619      	mov	r1, r3
 800f948:	250a      	movs	r5, #10
 800f94a:	4640      	mov	r0, r8
 800f94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f950:	3a30      	subs	r2, #48	; 0x30
 800f952:	2a09      	cmp	r2, #9
 800f954:	d903      	bls.n	800f95e <_vfiprintf_r+0x1ca>
 800f956:	2b00      	cmp	r3, #0
 800f958:	d0c3      	beq.n	800f8e2 <_vfiprintf_r+0x14e>
 800f95a:	9105      	str	r1, [sp, #20]
 800f95c:	e7c1      	b.n	800f8e2 <_vfiprintf_r+0x14e>
 800f95e:	fb05 2101 	mla	r1, r5, r1, r2
 800f962:	2301      	movs	r3, #1
 800f964:	4680      	mov	r8, r0
 800f966:	e7f0      	b.n	800f94a <_vfiprintf_r+0x1b6>
 800f968:	ab03      	add	r3, sp, #12
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	4622      	mov	r2, r4
 800f96e:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <_vfiprintf_r+0x228>)
 800f970:	a904      	add	r1, sp, #16
 800f972:	4630      	mov	r0, r6
 800f974:	f7fd fca4 	bl	800d2c0 <_printf_float>
 800f978:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f97c:	4681      	mov	r9, r0
 800f97e:	d1d5      	bne.n	800f92c <_vfiprintf_r+0x198>
 800f980:	89a3      	ldrh	r3, [r4, #12]
 800f982:	065b      	lsls	r3, r3, #25
 800f984:	f53f af7e 	bmi.w	800f884 <_vfiprintf_r+0xf0>
 800f988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f98a:	e77d      	b.n	800f888 <_vfiprintf_r+0xf4>
 800f98c:	ab03      	add	r3, sp, #12
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	4622      	mov	r2, r4
 800f992:	4b0a      	ldr	r3, [pc, #40]	; (800f9bc <_vfiprintf_r+0x228>)
 800f994:	a904      	add	r1, sp, #16
 800f996:	4630      	mov	r0, r6
 800f998:	f7fd ff48 	bl	800d82c <_printf_i>
 800f99c:	e7ec      	b.n	800f978 <_vfiprintf_r+0x1e4>
 800f99e:	bf00      	nop
 800f9a0:	08010118 	.word	0x08010118
 800f9a4:	08010254 	.word	0x08010254
 800f9a8:	08010138 	.word	0x08010138
 800f9ac:	080100f8 	.word	0x080100f8
 800f9b0:	0801025a 	.word	0x0801025a
 800f9b4:	0801025e 	.word	0x0801025e
 800f9b8:	0800d2c1 	.word	0x0800d2c1
 800f9bc:	0800f76f 	.word	0x0800f76f

0800f9c0 <_sbrk_r>:
 800f9c0:	b538      	push	{r3, r4, r5, lr}
 800f9c2:	4c06      	ldr	r4, [pc, #24]	; (800f9dc <_sbrk_r+0x1c>)
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	4608      	mov	r0, r1
 800f9ca:	6023      	str	r3, [r4, #0]
 800f9cc:	f7f3 f8d8 	bl	8002b80 <_sbrk>
 800f9d0:	1c43      	adds	r3, r0, #1
 800f9d2:	d102      	bne.n	800f9da <_sbrk_r+0x1a>
 800f9d4:	6823      	ldr	r3, [r4, #0]
 800f9d6:	b103      	cbz	r3, 800f9da <_sbrk_r+0x1a>
 800f9d8:	602b      	str	r3, [r5, #0]
 800f9da:	bd38      	pop	{r3, r4, r5, pc}
 800f9dc:	20005ce4 	.word	0x20005ce4

0800f9e0 <__sread>:
 800f9e0:	b510      	push	{r4, lr}
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9e8:	f000 f8e8 	bl	800fbbc <_read_r>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	bfab      	itete	ge
 800f9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800f9f4:	181b      	addge	r3, r3, r0
 800f9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9fa:	bfac      	ite	ge
 800f9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9fe:	81a3      	strhlt	r3, [r4, #12]
 800fa00:	bd10      	pop	{r4, pc}

0800fa02 <__swrite>:
 800fa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa06:	461f      	mov	r7, r3
 800fa08:	898b      	ldrh	r3, [r1, #12]
 800fa0a:	05db      	lsls	r3, r3, #23
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	460c      	mov	r4, r1
 800fa10:	4616      	mov	r6, r2
 800fa12:	d505      	bpl.n	800fa20 <__swrite+0x1e>
 800fa14:	2302      	movs	r3, #2
 800fa16:	2200      	movs	r2, #0
 800fa18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa1c:	f000 f868 	bl	800faf0 <_lseek_r>
 800fa20:	89a3      	ldrh	r3, [r4, #12]
 800fa22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa2a:	81a3      	strh	r3, [r4, #12]
 800fa2c:	4632      	mov	r2, r6
 800fa2e:	463b      	mov	r3, r7
 800fa30:	4628      	mov	r0, r5
 800fa32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa36:	f000 b817 	b.w	800fa68 <_write_r>

0800fa3a <__sseek>:
 800fa3a:	b510      	push	{r4, lr}
 800fa3c:	460c      	mov	r4, r1
 800fa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa42:	f000 f855 	bl	800faf0 <_lseek_r>
 800fa46:	1c43      	adds	r3, r0, #1
 800fa48:	89a3      	ldrh	r3, [r4, #12]
 800fa4a:	bf15      	itete	ne
 800fa4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa56:	81a3      	strheq	r3, [r4, #12]
 800fa58:	bf18      	it	ne
 800fa5a:	81a3      	strhne	r3, [r4, #12]
 800fa5c:	bd10      	pop	{r4, pc}

0800fa5e <__sclose>:
 800fa5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa62:	f000 b813 	b.w	800fa8c <_close_r>
	...

0800fa68 <_write_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4c07      	ldr	r4, [pc, #28]	; (800fa88 <_write_r+0x20>)
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	4608      	mov	r0, r1
 800fa70:	4611      	mov	r1, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	6022      	str	r2, [r4, #0]
 800fa76:	461a      	mov	r2, r3
 800fa78:	f7f3 f832 	bl	8002ae0 <_write>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_write_r+0x1e>
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_write_r+0x1e>
 800fa84:	602b      	str	r3, [r5, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	20005ce4 	.word	0x20005ce4

0800fa8c <_close_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4c06      	ldr	r4, [pc, #24]	; (800faa8 <_close_r+0x1c>)
 800fa90:	2300      	movs	r3, #0
 800fa92:	4605      	mov	r5, r0
 800fa94:	4608      	mov	r0, r1
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	f7f3 f83e 	bl	8002b18 <_close>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	d102      	bne.n	800faa6 <_close_r+0x1a>
 800faa0:	6823      	ldr	r3, [r4, #0]
 800faa2:	b103      	cbz	r3, 800faa6 <_close_r+0x1a>
 800faa4:	602b      	str	r3, [r5, #0]
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	20005ce4 	.word	0x20005ce4

0800faac <_fstat_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	4c07      	ldr	r4, [pc, #28]	; (800facc <_fstat_r+0x20>)
 800fab0:	2300      	movs	r3, #0
 800fab2:	4605      	mov	r5, r0
 800fab4:	4608      	mov	r0, r1
 800fab6:	4611      	mov	r1, r2
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	f7f3 f839 	bl	8002b30 <_fstat>
 800fabe:	1c43      	adds	r3, r0, #1
 800fac0:	d102      	bne.n	800fac8 <_fstat_r+0x1c>
 800fac2:	6823      	ldr	r3, [r4, #0]
 800fac4:	b103      	cbz	r3, 800fac8 <_fstat_r+0x1c>
 800fac6:	602b      	str	r3, [r5, #0]
 800fac8:	bd38      	pop	{r3, r4, r5, pc}
 800faca:	bf00      	nop
 800facc:	20005ce4 	.word	0x20005ce4

0800fad0 <_isatty_r>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4c06      	ldr	r4, [pc, #24]	; (800faec <_isatty_r+0x1c>)
 800fad4:	2300      	movs	r3, #0
 800fad6:	4605      	mov	r5, r0
 800fad8:	4608      	mov	r0, r1
 800fada:	6023      	str	r3, [r4, #0]
 800fadc:	f7f3 f838 	bl	8002b50 <_isatty>
 800fae0:	1c43      	adds	r3, r0, #1
 800fae2:	d102      	bne.n	800faea <_isatty_r+0x1a>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	b103      	cbz	r3, 800faea <_isatty_r+0x1a>
 800fae8:	602b      	str	r3, [r5, #0]
 800faea:	bd38      	pop	{r3, r4, r5, pc}
 800faec:	20005ce4 	.word	0x20005ce4

0800faf0 <_lseek_r>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4c07      	ldr	r4, [pc, #28]	; (800fb10 <_lseek_r+0x20>)
 800faf4:	4605      	mov	r5, r0
 800faf6:	4608      	mov	r0, r1
 800faf8:	4611      	mov	r1, r2
 800fafa:	2200      	movs	r2, #0
 800fafc:	6022      	str	r2, [r4, #0]
 800fafe:	461a      	mov	r2, r3
 800fb00:	f7f3 f831 	bl	8002b66 <_lseek>
 800fb04:	1c43      	adds	r3, r0, #1
 800fb06:	d102      	bne.n	800fb0e <_lseek_r+0x1e>
 800fb08:	6823      	ldr	r3, [r4, #0]
 800fb0a:	b103      	cbz	r3, 800fb0e <_lseek_r+0x1e>
 800fb0c:	602b      	str	r3, [r5, #0]
 800fb0e:	bd38      	pop	{r3, r4, r5, pc}
 800fb10:	20005ce4 	.word	0x20005ce4

0800fb14 <__ascii_mbtowc>:
 800fb14:	b082      	sub	sp, #8
 800fb16:	b901      	cbnz	r1, 800fb1a <__ascii_mbtowc+0x6>
 800fb18:	a901      	add	r1, sp, #4
 800fb1a:	b142      	cbz	r2, 800fb2e <__ascii_mbtowc+0x1a>
 800fb1c:	b14b      	cbz	r3, 800fb32 <__ascii_mbtowc+0x1e>
 800fb1e:	7813      	ldrb	r3, [r2, #0]
 800fb20:	600b      	str	r3, [r1, #0]
 800fb22:	7812      	ldrb	r2, [r2, #0]
 800fb24:	1c10      	adds	r0, r2, #0
 800fb26:	bf18      	it	ne
 800fb28:	2001      	movne	r0, #1
 800fb2a:	b002      	add	sp, #8
 800fb2c:	4770      	bx	lr
 800fb2e:	4610      	mov	r0, r2
 800fb30:	e7fb      	b.n	800fb2a <__ascii_mbtowc+0x16>
 800fb32:	f06f 0001 	mvn.w	r0, #1
 800fb36:	e7f8      	b.n	800fb2a <__ascii_mbtowc+0x16>

0800fb38 <memmove>:
 800fb38:	4288      	cmp	r0, r1
 800fb3a:	b510      	push	{r4, lr}
 800fb3c:	eb01 0302 	add.w	r3, r1, r2
 800fb40:	d807      	bhi.n	800fb52 <memmove+0x1a>
 800fb42:	1e42      	subs	r2, r0, #1
 800fb44:	4299      	cmp	r1, r3
 800fb46:	d00a      	beq.n	800fb5e <memmove+0x26>
 800fb48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fb50:	e7f8      	b.n	800fb44 <memmove+0xc>
 800fb52:	4283      	cmp	r3, r0
 800fb54:	d9f5      	bls.n	800fb42 <memmove+0xa>
 800fb56:	1881      	adds	r1, r0, r2
 800fb58:	1ad2      	subs	r2, r2, r3
 800fb5a:	42d3      	cmn	r3, r2
 800fb5c:	d100      	bne.n	800fb60 <memmove+0x28>
 800fb5e:	bd10      	pop	{r4, pc}
 800fb60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fb68:	e7f7      	b.n	800fb5a <memmove+0x22>

0800fb6a <__malloc_lock>:
 800fb6a:	4770      	bx	lr

0800fb6c <__malloc_unlock>:
 800fb6c:	4770      	bx	lr

0800fb6e <_realloc_r>:
 800fb6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb70:	4607      	mov	r7, r0
 800fb72:	4614      	mov	r4, r2
 800fb74:	460e      	mov	r6, r1
 800fb76:	b921      	cbnz	r1, 800fb82 <_realloc_r+0x14>
 800fb78:	4611      	mov	r1, r2
 800fb7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb7e:	f7ff bc33 	b.w	800f3e8 <_malloc_r>
 800fb82:	b922      	cbnz	r2, 800fb8e <_realloc_r+0x20>
 800fb84:	f7ff fbe2 	bl	800f34c <_free_r>
 800fb88:	4625      	mov	r5, r4
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb8e:	f000 f834 	bl	800fbfa <_malloc_usable_size_r>
 800fb92:	42a0      	cmp	r0, r4
 800fb94:	d20f      	bcs.n	800fbb6 <_realloc_r+0x48>
 800fb96:	4621      	mov	r1, r4
 800fb98:	4638      	mov	r0, r7
 800fb9a:	f7ff fc25 	bl	800f3e8 <_malloc_r>
 800fb9e:	4605      	mov	r5, r0
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0f2      	beq.n	800fb8a <_realloc_r+0x1c>
 800fba4:	4631      	mov	r1, r6
 800fba6:	4622      	mov	r2, r4
 800fba8:	f7fd fae2 	bl	800d170 <memcpy>
 800fbac:	4631      	mov	r1, r6
 800fbae:	4638      	mov	r0, r7
 800fbb0:	f7ff fbcc 	bl	800f34c <_free_r>
 800fbb4:	e7e9      	b.n	800fb8a <_realloc_r+0x1c>
 800fbb6:	4635      	mov	r5, r6
 800fbb8:	e7e7      	b.n	800fb8a <_realloc_r+0x1c>
	...

0800fbbc <_read_r>:
 800fbbc:	b538      	push	{r3, r4, r5, lr}
 800fbbe:	4c07      	ldr	r4, [pc, #28]	; (800fbdc <_read_r+0x20>)
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	4608      	mov	r0, r1
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	6022      	str	r2, [r4, #0]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	f7f2 ff6b 	bl	8002aa6 <_read>
 800fbd0:	1c43      	adds	r3, r0, #1
 800fbd2:	d102      	bne.n	800fbda <_read_r+0x1e>
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	b103      	cbz	r3, 800fbda <_read_r+0x1e>
 800fbd8:	602b      	str	r3, [r5, #0]
 800fbda:	bd38      	pop	{r3, r4, r5, pc}
 800fbdc:	20005ce4 	.word	0x20005ce4

0800fbe0 <__ascii_wctomb>:
 800fbe0:	b149      	cbz	r1, 800fbf6 <__ascii_wctomb+0x16>
 800fbe2:	2aff      	cmp	r2, #255	; 0xff
 800fbe4:	bf85      	ittet	hi
 800fbe6:	238a      	movhi	r3, #138	; 0x8a
 800fbe8:	6003      	strhi	r3, [r0, #0]
 800fbea:	700a      	strbls	r2, [r1, #0]
 800fbec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fbf0:	bf98      	it	ls
 800fbf2:	2001      	movls	r0, #1
 800fbf4:	4770      	bx	lr
 800fbf6:	4608      	mov	r0, r1
 800fbf8:	4770      	bx	lr

0800fbfa <_malloc_usable_size_r>:
 800fbfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbfe:	1f18      	subs	r0, r3, #4
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	bfbc      	itt	lt
 800fc04:	580b      	ldrlt	r3, [r1, r0]
 800fc06:	18c0      	addlt	r0, r0, r3
 800fc08:	4770      	bx	lr
	...

0800fc0c <_init>:
 800fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0e:	bf00      	nop
 800fc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc12:	bc08      	pop	{r3}
 800fc14:	469e      	mov	lr, r3
 800fc16:	4770      	bx	lr

0800fc18 <_fini>:
 800fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1a:	bf00      	nop
 800fc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc1e:	bc08      	pop	{r3}
 800fc20:	469e      	mov	lr, r3
 800fc22:	4770      	bx	lr
