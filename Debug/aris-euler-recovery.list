
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014eec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  08015080  08015080  00025080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ec8  08015ec8  00030328  2**0
                  CONTENTS
  4 .ARM          00000008  08015ec8  08015ec8  00025ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ed0  08015ed0  00030328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ed0  08015ed0  00025ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ed4  08015ed4  00025ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000328  20000000  08015ed8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016bec  20000328  08016200  00030328  2**2
                  ALLOC
 10 ._user_heap_stack 0000224c  20016f14  08016200  00036f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ca9  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ad3  00000000  00000000  00059001  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  0005ead8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00060258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a55  00000000  00000000  00061710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e3ae  00000000  00000000  00089165  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c98c1  00000000  00000000  000a7513  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d8  00000000  00000000  00170e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000328 	.word	0x20000328
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015064 	.word	0x08015064

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000032c 	.word	0x2000032c
 80001cc:	08015064 	.word	0x08015064

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <stay_alive>:
 */

#include "IO.h"
#include "adc.h"

void stay_alive(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STAY_ALIVE_GPIO_Port, STAY_ALIVE_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <stay_alive+0x14>)
 8000f92:	f008 f837 	bl	8009004 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <fire_HAWKs>:


void fire_HAWKs(uint8_t * armed){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <fire_HAWKs+0x1c>
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fb8:	f008 f824 	bl	8009004 <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <fire_HAWKs+0x30>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fcc:	f008 f81a 	bl	8009004 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000

08000fdc <turn_off_HAWKs>:

void turn_off_HAWKs(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000fe8:	f008 f80c 	bl	8009004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4802      	ldr	r0, [pc, #8]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000ff4:	f008 f806 	bl	8009004 <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <fire_TDs>:

void fire_TDs(uint8_t * armed){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <fire_TDs+0x1c>
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <fire_TDs+0x38>)
 8001018:	f007 fff4 	bl	8009004 <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <fire_TDs+0x30>
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <fire_TDs+0x38>)
 800102c:	f007 ffea 	bl	8009004 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <turn_off_TDs>:

void turn_off_TDs(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <turn_off_TDs+0x20>)
 8001048:	f007 ffdc 	bl	8009004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <turn_off_TDs+0x20>)
 8001054:	f007 ffd6 	bl	8009004 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <init_ADC>:

void init_ADC(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <init_ADC+0x18>)
 8001066:	f006 fdf5 	bl	8007c54 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 800106a:	2208      	movs	r2, #8
 800106c:	4903      	ldr	r1, [pc, #12]	; (800107c <init_ADC+0x1c>)
 800106e:	4802      	ldr	r0, [pc, #8]	; (8001078 <init_ADC+0x18>)
 8001070:	f006 fcfe 	bl	8007a70 <HAL_ADC_Start_DMA>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20004964 	.word	0x20004964
 800107c:	20000874 	.word	0x20000874

08001080 <read_ADC>:

void read_ADC(float * out){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8001088:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <read_ADC+0x230>)
 800108a:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 800108c:	4b89      	ldr	r3, [pc, #548]	; (80012b4 <read_ADC+0x234>)
 800108e:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001090:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <read_ADC+0x238>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109c:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 80010b2:	4b81      	ldr	r3, [pc, #516]	; (80012b8 <read_ADC+0x238>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010be:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <read_ADC+0x238>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3308      	adds	r3, #8
 80010ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <read_ADC+0x238>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	edd7 7a03 	vldr	s15, [r7, #12]
 800110a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110e:	ee17 0a90 	vmov	r0, s15
 8001112:	f7ff fa19 	bl	8000548 <__aeabi_f2d>
 8001116:	4603      	mov	r3, r0
 8001118:	460c      	mov	r4, r1
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	a15c      	add	r1, pc, #368	; (adr r1, 8001290 <read_ADC+0x210>)
 8001120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001124:	f7ff f8b0 	bl	8000288 <__aeabi_dsub>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4618      	mov	r0, r3
 800112e:	4621      	mov	r1, r4
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <read_ADC+0x23c>)
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	a355      	add	r3, pc, #340	; (adr r3, 8001298 <read_ADC+0x218>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fb80 	bl	800084c <__aeabi_ddiv>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	4618      	mov	r0, r3
 8001152:	4621      	mov	r1, r4
 8001154:	f7ff fd48 	bl	8000be8 <__aeabi_d2f>
 8001158:	4602      	mov	r2, r0
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330c      	adds	r3, #12
 800115e:	ee07 2a90 	vmov	s15, r2
 8001162:	eef1 7a67 	vneg.f32	s15, s15
 8001166:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <read_ADC+0x238>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001176:	edd7 7a03 	vldr	s15, [r7, #12]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	ee17 0a90 	vmov	r0, s15
 8001182:	f7ff f9e1 	bl	8000548 <__aeabi_f2d>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	461a      	mov	r2, r3
 800118c:	4623      	mov	r3, r4
 800118e:	a140      	add	r1, pc, #256	; (adr r1, 8001290 <read_ADC+0x210>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff f878 	bl	8000288 <__aeabi_dsub>
 8001198:	4603      	mov	r3, r0
 800119a:	460c      	mov	r4, r1
 800119c:	4618      	mov	r0, r3
 800119e:	4621      	mov	r1, r4
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b45      	ldr	r3, [pc, #276]	; (80012bc <read_ADC+0x23c>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	4618      	mov	r0, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	a339      	add	r3, pc, #228	; (adr r3, 8001298 <read_ADC+0x218>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fb48 	bl	800084c <__aeabi_ddiv>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fd10 	bl	8000be8 <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3310      	adds	r3, #16
 80011ce:	ee07 2a90 	vmov	s15, r2
 80011d2:	eef1 7a67 	vneg.f32	s15, s15
 80011d6:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <read_ADC+0x238>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3314      	adds	r3, #20
 80011f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <read_ADC+0x238>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3318      	adds	r3, #24
 8001216:	edd7 7a02 	vldr	s15, [r7, #8]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <read_ADC+0x238>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800122e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f7ff f985 	bl	8000548 <__aeabi_f2d>
 800123e:	a318      	add	r3, pc, #96	; (adr r3, 80012a0 <read_ADC+0x220>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	a315      	add	r3, pc, #84	; (adr r3, 80012a8 <read_ADC+0x228>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff faf9 	bl	800084c <__aeabi_ddiv>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	4618      	mov	r0, r3
 8001260:	4621      	mov	r1, r4
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <read_ADC+0x240>)
 8001268:	f7ff f810 	bl	800028c <__adddf3>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4619      	mov	r1, r3
 8001272:	4622      	mov	r2, r4
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f103 041c 	add.w	r4, r3, #28
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	f7ff fcb3 	bl	8000be8 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	6023      	str	r3, [r4, #0]

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	66666666 	.word	0x66666666
 8001294:	3ffa6666 	.word	0x3ffa6666
 8001298:	4189374c 	.word	0x4189374c
 800129c:	3fb0e560 	.word	0x3fb0e560
 80012a0:	851eb852 	.word	0x851eb852
 80012a4:	3fe851eb 	.word	0x3fe851eb
 80012a8:	47ae147b 	.word	0x47ae147b
 80012ac:	3f647ae1 	.word	0x3f647ae1
 80012b0:	3a533333 	.word	0x3a533333
 80012b4:	409b26ca 	.word	0x409b26ca
 80012b8:	20000874 	.word	0x20000874
 80012bc:	408f4000 	.word	0x408f4000
 80012c0:	40390000 	.word	0x40390000

080012c4 <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e007      	b.n	80012e2 <bufclear+0x1e>
	{
		buffer[i] = '\0';
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	dbf3      	blt.n	80012d2 <bufclear+0xe>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b09d      	sub	sp, #116	; 0x74
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	/* capacity related variables */
	FATFS *pfs;
	DWORD fre_clust;
	uint32_t total, free_space;

	if (DEBUG_PRINT == 1) printf("mounting SD card...\n");
 8001302:	486c      	ldr	r0, [pc, #432]	; (80014b4 <init_sd+0x1bc>)
 8001304:	f010 f844 	bl	8011390 <puts>

	FRESULT ret = f_mount(&fs, SDPath, 1);
 8001308:	2201      	movs	r2, #1
 800130a:	496b      	ldr	r1, [pc, #428]	; (80014b8 <init_sd+0x1c0>)
 800130c:	486b      	ldr	r0, [pc, #428]	; (80014bc <init_sd+0x1c4>)
 800130e:	f00e fa61 	bl	800f7d4 <f_mount>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 8001318:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800131c:	2b00      	cmp	r3, #0
 800131e:	d154      	bne.n	80013ca <init_sd+0xd2>
	{
		if (DEBUG_PRINT == 1) printf("mounted SD card\n");
 8001320:	4867      	ldr	r0, [pc, #412]	; (80014c0 <init_sd+0x1c8>)
 8001322:	f010 f835 	bl	8011390 <puts>
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
	  return 0;
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 8001326:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800132a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800132e:	4619      	mov	r1, r3
 8001330:	4861      	ldr	r0, [pc, #388]	; (80014b8 <init_sd+0x1c0>)
 8001332:	f00f f971 	bl	8010618 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	3b02      	subs	r3, #2
 800133c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800133e:	8952      	ldrh	r2, [r2, #10]
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8dd 	bl	8000504 <__aeabi_ui2d>
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <init_sd+0x1cc>)
 8001350:	f7ff f952 	bl	80005f8 <__aeabi_dmul>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	f7ff fc24 	bl	8000ba8 <__aeabi_d2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	667b      	str	r3, [r7, #100]	; 0x64
	if (DEBUG_PRINT == 1) printf("SD CARD Total Size: \t%lu\n",total);
 8001364:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001366:	4858      	ldr	r0, [pc, #352]	; (80014c8 <init_sd+0x1d0>)
 8001368:	f00f ff9e 	bl	80112a8 <iprintf>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800136c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800136e:	895b      	ldrh	r3, [r3, #10]
 8001370:	461a      	mov	r2, r3
 8001372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001374:	fb03 f302 	mul.w	r3, r3, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8c3 	bl	8000504 <__aeabi_ui2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <init_sd+0x1cc>)
 8001384:	f7ff f938 	bl	80005f8 <__aeabi_dmul>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4618      	mov	r0, r3
 800138e:	4621      	mov	r1, r4
 8001390:	f7ff fc0a 	bl	8000ba8 <__aeabi_d2uiz>
 8001394:	4603      	mov	r3, r0
 8001396:	663b      	str	r3, [r7, #96]	; 0x60
	if (DEBUG_PRINT == 1) printf("SD CARD Free Space: \t%lu\n",free_space);
 8001398:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800139a:	484c      	ldr	r0, [pc, #304]	; (80014cc <init_sd+0x1d4>)
 800139c:	f00f ff84 	bl	80112a8 <iprintf>

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t cnt2 = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4941      	ldr	r1, [pc, #260]	; (80014b8 <init_sd+0x1c0>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00f f880 	bl	80104b8 <f_opendir>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <init_sd+0x1d8>)
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <init_sd+0x1d8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d15b      	bne.n	8001480 <init_sd+0x188>
 80013c8:	e047      	b.n	800145a <init_sd+0x162>
		if (DEBUG_PRINT == 1) printf("no SD connection established\n");
 80013ca:	4842      	ldr	r0, [pc, #264]	; (80014d4 <init_sd+0x1dc>)
 80013cc:	f00f ffe0 	bl	8011390 <puts>
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
 80013d0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80013d4:	4619      	mov	r1, r3
 80013d6:	4840      	ldr	r0, [pc, #256]	; (80014d8 <init_sd+0x1e0>)
 80013d8:	f00f ff66 	bl	80112a8 <iprintf>
	  return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e064      	b.n	80014aa <init_sd+0x1b2>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
			{
				fn = Finfo.fname;
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	3309      	adds	r3, #9
 80013e6:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 80013e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b46      	cmp	r3, #70	; 0x46
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f8:	3301      	adds	r3, #1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b4c      	cmp	r3, #76	; 0x4c
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4013      	ands	r3, r2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <init_sd+0x12a>
				{
					if (DEBUG_PRINT == 1) printf("found flight log: %s \n",fn);
 800140e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001410:	4832      	ldr	r0, [pc, #200]	; (80014dc <init_sd+0x1e4>)
 8001412:	f00f ff49 	bl	80112a8 <iprintf>
					cnt1 ++;
 8001416:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800141a:	3301      	adds	r3, #1
 800141c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001420:	e01b      	b.n	800145a <init_sd+0x162>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 8001422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b4c      	cmp	r3, #76	; 0x4c
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2da      	uxtb	r2, r3
 8001430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001432:	3301      	adds	r3, #1
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b4f      	cmp	r3, #79	; 0x4f
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4013      	ands	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <init_sd+0x162>
				{
					if (DEBUG_PRINT == 1) printf("found log file: %s \n",fn);
 8001448:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800144a:	4825      	ldr	r0, [pc, #148]	; (80014e0 <init_sd+0x1e8>)
 800144c:	f00f ff2c 	bl	80112a8 <iprintf>
					cnt2 ++;
 8001450:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001454:	3301      	adds	r3, #1
 8001456:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f00f f89a 	bl	801059e <f_readdir>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <init_sd+0x1d8>)
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <init_sd+0x1d8>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <init_sd+0x188>
 800147a:	7d7b      	ldrb	r3, [r7, #21]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1af      	bne.n	80013e0 <init_sd+0xe8>
				}

			}
	}
	*file_count = cnt1;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001486:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800148e:	801a      	strh	r2, [r3, #0]
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th flight. \n", *file_count);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4813      	ldr	r0, [pc, #76]	; (80014e4 <init_sd+0x1ec>)
 8001498:	f00f ff06 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th log file. \n", *log_count);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <init_sd+0x1f0>)
 80014a4:	f00f ff00 	bl	80112a8 <iprintf>
	return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3774      	adds	r7, #116	; 0x74
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08015088 	.word	0x08015088
 80014b8:	20014ea8 	.word	0x20014ea8
 80014bc:	20000894 	.word	0x20000894
 80014c0:	0801509c 	.word	0x0801509c
 80014c4:	3fe00000 	.word	0x3fe00000
 80014c8:	080150d8 	.word	0x080150d8
 80014cc:	080150f4 	.word	0x080150f4
 80014d0:	20003930 	.word	0x20003930
 80014d4:	080150ac 	.word	0x080150ac
 80014d8:	080150cc 	.word	0x080150cc
 80014dc:	08015110 	.word	0x08015110
 80014e0:	08015128 	.word	0x08015128
 80014e4:	08015140 	.word	0x08015140
 80014e8:	08015160 	.word	0x08015160

080014ec <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0ee      	sub	sp, #440	; 0x1b8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	6018      	str	r0, [r3, #0]
 80014f6:	463b      	mov	r3, r7
 80014f8:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	220a      	movs	r2, #10
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	4848      	ldr	r0, [pc, #288]	; (8001624 <init_file+0x138>)
 8001502:	f00e f9ad 	bl	800f860 <f_open>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <init_file+0x13c>)
 800150c:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800150e:	4b46      	ldr	r3, [pc, #280]	; (8001628 <init_file+0x13c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <init_file+0x3a>
		if (DEBUG_PRINT == 1) printf("trying to open datalog file, error-code: %d \n",fresult);
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <init_file+0x13c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4843      	ldr	r0, [pc, #268]	; (800162c <init_file+0x140>)
 800151e:	f00f fec3 	bl	80112a8 <iprintf>
		return 0;
 8001522:	2300      	movs	r3, #0
 8001524:	e079      	b.n	800161a <init_file+0x12e>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State,MachTimer,FailSafeTimer,FailSafeMainTimer,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 8001526:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800152a:	4a41      	ldr	r2, [pc, #260]	; (8001630 <init_file+0x144>)
 800152c:	4618      	mov	r0, r3
 800152e:	4611      	mov	r1, r2
 8001530:	f240 1329 	movw	r3, #297	; 0x129
 8001534:	461a      	mov	r2, r3
 8001536:	f00f fa47 	bl	80109c8 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 800153a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <init_file+0x148>)
 8001540:	f240 1229 	movw	r2, #297	; 0x129
 8001544:	4837      	ldr	r0, [pc, #220]	; (8001624 <init_file+0x138>)
 8001546:	f00e fb57 	bl	800fbf8 <f_write>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <init_file+0x13c>)
 8001550:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 8001552:	4834      	ldr	r0, [pc, #208]	; (8001624 <init_file+0x138>)
 8001554:	f00e fd62 	bl	801001c <f_close>

	if (fresult != FR_OK){
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <init_file+0x13c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <init_file+0x84>
		if (DEBUG_PRINT == 1) printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <init_file+0x13c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	4834      	ldr	r0, [pc, #208]	; (8001638 <init_file+0x14c>)
 8001568:	f00f fe9e 	bl	80112a8 <iprintf>
		return 0;
 800156c:	2300      	movs	r3, #0
 800156e:	e054      	b.n	800161a <init_file+0x12e>
	}
	//bufclear();

	HAL_Delay(100);
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f006 fa17 	bl	80079a4 <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 8001576:	463b      	mov	r3, r7
 8001578:	2206      	movs	r2, #6
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	482f      	ldr	r0, [pc, #188]	; (800163c <init_file+0x150>)
 800157e:	f00e f96f 	bl	800f860 <f_open>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <init_file+0x13c>)
 8001588:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <init_file+0x13c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <init_file+0xb6>
		if (DEBUG_PRINT == 1) printf("trying to open setuplog file, error-code: %d \n",fresult);
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <init_file+0x13c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4829      	ldr	r0, [pc, #164]	; (8001640 <init_file+0x154>)
 800159a:	f00f fe85 	bl	80112a8 <iprintf>
		return 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	e03b      	b.n	800161a <init_file+0x12e>

	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	bw = 0;
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <init_file+0x148>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	char myLog[128];

	for (int i=0; i<128; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80015ae:	e00b      	b.n	80015c8 <init_file+0xdc>
	{
		myLog[i] = '\0';
 80015b0:	f107 0208 	add.w	r2, r7, #8
 80015b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015b8:	4413      	add	r3, r2
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<128; i++)
 80015be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015c2:	3301      	adds	r3, #1
 80015c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80015c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015cc:	2b7f      	cmp	r3, #127	; 0x7f
 80015ce:	ddef      	ble.n	80015b0 <init_file+0xc4>
	}

	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 80015d0:	f006 f9dc 	bl	800798c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	f107 0008 	add.w	r0, r7, #8
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4919      	ldr	r1, [pc, #100]	; (8001644 <init_file+0x158>)
 80015e0:	f00f fede 	bl	80113a0 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 80015e4:	f107 0108 	add.w	r1, r7, #8
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <init_file+0x148>)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <init_file+0x150>)
 80015ee:	f00e fb03 	bl	800fbf8 <f_write>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <init_file+0x13c>)
 80015f8:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <init_file+0x13c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <init_file+0x126>
		if (DEBUG_PRINT == 1) printf ("LOG FILE not created, error-code: %d \n",fresult);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <init_file+0x13c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <init_file+0x15c>)
 800160a:	f00f fe4d 	bl	80112a8 <iprintf>
		return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e003      	b.n	800161a <init_file+0x12e>
	}

	/* Close file */
	f_close(&log_file);
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <init_file+0x150>)
 8001614:	f00e fd02 	bl	801001c <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 8001618:	2301      	movs	r3, #1

}
 800161a:	4618      	mov	r0, r3
 800161c:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200018c8 	.word	0x200018c8
 8001628:	20003930 	.word	0x20003930
 800162c:	08015184 	.word	0x08015184
 8001630:	08015274 	.word	0x08015274
 8001634:	2000392c 	.word	0x2000392c
 8001638:	080151b4 	.word	0x080151b4
 800163c:	20003934 	.word	0x20003934
 8001640:	080151e0 	.word	0x080151e0
 8001644:	08015210 	.word	0x08015210
 8001648:	0801524c 	.word	0x0801524c

0800164c <write_to_SD>:


}


void write_to_SD(char * FILE_NAME, char * buffer){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001656:	2212      	movs	r2, #18
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	482d      	ldr	r0, [pc, #180]	; (8001710 <write_to_SD+0xc4>)
 800165c:	f00e f900 	bl	800f860 <f_open>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <write_to_SD+0xc8>)
 8001666:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <write_to_SD+0xc8>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d103      	bne.n	8001678 <write_to_SD+0x2c>
	{

		if (DEBUG_PRINT == 1) printf("opened file \n");
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <write_to_SD+0xcc>)
 8001672:	f00f fe8d 	bl	8011390 <puts>
 8001676:	e02e      	b.n	80016d6 <write_to_SD+0x8a>

	} else {

		if (DEBUG_PRINT == 1) printf("error opening file for writing\n");
 8001678:	4828      	ldr	r0, [pc, #160]	; (800171c <write_to_SD+0xd0>)
 800167a:	f00f fe89 	bl	8011390 <puts>
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <write_to_SD+0xc8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4826      	ldr	r0, [pc, #152]	; (8001720 <write_to_SD+0xd4>)
 8001686:	f00f fe0f 	bl	80112a8 <iprintf>

		fresult = f_mount(NULL, SDPath, 1);
 800168a:	2201      	movs	r2, #1
 800168c:	4925      	ldr	r1, [pc, #148]	; (8001724 <write_to_SD+0xd8>)
 800168e:	2000      	movs	r0, #0
 8001690:	f00e f8a0 	bl	800f7d4 <f_mount>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <write_to_SD+0xc8>)
 800169a:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <write_to_SD+0xc8>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <write_to_SD+0x5e>
 80016a4:	4820      	ldr	r0, [pc, #128]	; (8001728 <write_to_SD+0xdc>)
 80016a6:	f00f fe73 	bl	8011390 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	491d      	ldr	r1, [pc, #116]	; (8001724 <write_to_SD+0xd8>)
 80016ae:	481f      	ldr	r0, [pc, #124]	; (800172c <write_to_SD+0xe0>)
 80016b0:	f00e f890 	bl	800f7d4 <f_mount>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]
		if (ret == FR_OK)
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <write_to_SD+0x7a>
		{
			if (DEBUG_PRINT == 1) printf("mounted SD card\n");
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <write_to_SD+0xe4>)
 80016c0:	f00f fe66 	bl	8011390 <puts>
 80016c4:	e007      	b.n	80016d6 <write_to_SD+0x8a>
		} else {
			if (DEBUG_PRINT == 1) printf("no SD connection established\n");
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <write_to_SD+0xe8>)
 80016c8:	f00f fe62 	bl	8011390 <puts>
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <write_to_SD+0xd4>)
 80016d2:	f00f fde9 	bl	80112a8 <iprintf>
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <write_to_SD+0xc4>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <write_to_SD+0xc4>)
 80016de:	f00e fcc7 	bl	8010070 <f_lseek>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <write_to_SD+0xc8>)
 80016e8:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 80016ea:	4909      	ldr	r1, [pc, #36]	; (8001710 <write_to_SD+0xc4>)
 80016ec:	6838      	ldr	r0, [r7, #0]
 80016ee:	f00f f8c0 	bl	8010872 <f_puts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <write_to_SD+0xc8>)
 80016f8:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <write_to_SD+0xc4>)
 80016fc:	f00e fc8e 	bl	801001c <f_close>

	bufclear(buffer);
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f7ff fddf 	bl	80012c4 <bufclear>

}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200018c8 	.word	0x200018c8
 8001714:	20003930 	.word	0x20003930
 8001718:	080153f4 	.word	0x080153f4
 800171c:	08015404 	.word	0x08015404
 8001720:	080150cc 	.word	0x080150cc
 8001724:	20014ea8 	.word	0x20014ea8
 8001728:	08015424 	.word	0x08015424
 800172c:	20000894 	.word	0x20000894
 8001730:	0801509c 	.word	0x0801509c
 8001734:	080150ac 	.word	0x080150ac

08001738 <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001742:	2212      	movs	r2, #18
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	482d      	ldr	r0, [pc, #180]	; (80017fc <log_to_SD+0xc4>)
 8001748:	f00e f88a 	bl	800f860 <f_open>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <log_to_SD+0xc8>)
 8001752:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <log_to_SD+0xc8>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <log_to_SD+0x2c>
	{

		if (DEBUG_PRINT == 1) printf("opened file \n");
 800175c:	4829      	ldr	r0, [pc, #164]	; (8001804 <log_to_SD+0xcc>)
 800175e:	f00f fe17 	bl	8011390 <puts>
 8001762:	e02e      	b.n	80017c2 <log_to_SD+0x8a>

	} else {

		if (DEBUG_PRINT == 1) printf("error opening log file for writing\n");
 8001764:	4828      	ldr	r0, [pc, #160]	; (8001808 <log_to_SD+0xd0>)
 8001766:	f00f fe13 	bl	8011390 <puts>
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <log_to_SD+0xc8>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	4826      	ldr	r0, [pc, #152]	; (800180c <log_to_SD+0xd4>)
 8001772:	f00f fd99 	bl	80112a8 <iprintf>

		fresult = f_mount(NULL, SDPath, 1);
 8001776:	2201      	movs	r2, #1
 8001778:	4925      	ldr	r1, [pc, #148]	; (8001810 <log_to_SD+0xd8>)
 800177a:	2000      	movs	r0, #0
 800177c:	f00e f82a 	bl	800f7d4 <f_mount>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <log_to_SD+0xc8>)
 8001786:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <log_to_SD+0xc8>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <log_to_SD+0x5e>
 8001790:	4820      	ldr	r0, [pc, #128]	; (8001814 <log_to_SD+0xdc>)
 8001792:	f00f fdfd 	bl	8011390 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001796:	2201      	movs	r2, #1
 8001798:	491d      	ldr	r1, [pc, #116]	; (8001810 <log_to_SD+0xd8>)
 800179a:	481f      	ldr	r0, [pc, #124]	; (8001818 <log_to_SD+0xe0>)
 800179c:	f00e f81a 	bl	800f7d4 <f_mount>
 80017a0:	4603      	mov	r3, r0
 80017a2:	73fb      	strb	r3, [r7, #15]
		if (ret == FR_OK)
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <log_to_SD+0x7a>
		{
			if (DEBUG_PRINT == 1) printf("mounted SD card\n");
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <log_to_SD+0xe4>)
 80017ac:	f00f fdf0 	bl	8011390 <puts>
 80017b0:	e007      	b.n	80017c2 <log_to_SD+0x8a>
		} else {
			if (DEBUG_PRINT == 1) printf("no SD connection established\n");
 80017b2:	481b      	ldr	r0, [pc, #108]	; (8001820 <log_to_SD+0xe8>)
 80017b4:	f00f fdec 	bl	8011390 <puts>
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <log_to_SD+0xd4>)
 80017be:	f00f fd73 	bl	80112a8 <iprintf>
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <log_to_SD+0xc4>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <log_to_SD+0xc4>)
 80017ca:	f00e fc51 	bl	8010070 <f_lseek>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <log_to_SD+0xc8>)
 80017d4:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 80017d6:	4909      	ldr	r1, [pc, #36]	; (80017fc <log_to_SD+0xc4>)
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f00f f84a 	bl	8010872 <f_puts>
 80017de:	4603      	mov	r3, r0
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <log_to_SD+0xc8>)
 80017e4:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <log_to_SD+0xc4>)
 80017e8:	f00e fc18 	bl	801001c <f_close>

	bufclear(buffer);
 80017ec:	6838      	ldr	r0, [r7, #0]
 80017ee:	f7ff fd69 	bl	80012c4 <bufclear>

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20003934 	.word	0x20003934
 8001800:	20003930 	.word	0x20003930
 8001804:	080153f4 	.word	0x080153f4
 8001808:	08015448 	.word	0x08015448
 800180c:	080150cc 	.word	0x080150cc
 8001810:	20014ea8 	.word	0x20014ea8
 8001814:	08015424 	.word	0x08015424
 8001818:	20000894 	.word	0x20000894
 800181c:	0801509c 	.word	0x0801509c
 8001820:	080150ac 	.word	0x080150ac

08001824 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001836:	4b52      	ldr	r3, [pc, #328]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <MX_ADC1_Init+0x160>)
 800183a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <MX_ADC1_Init+0x15c>)
 800183e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001842:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001844:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800184a:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <MX_ADC1_Init+0x15c>)
 800184c:	2201      	movs	r2, #1
 800184e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001852:	2201      	movs	r2, #1
 8001854:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001856:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185e:	4b48      	ldr	r3, [pc, #288]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001860:	2200      	movs	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001864:	4b46      	ldr	r3, [pc, #280]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001866:	4a48      	ldr	r2, [pc, #288]	; (8001988 <MX_ADC1_Init+0x164>)
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186a:	4b45      	ldr	r3, [pc, #276]	; (8001980 <MX_ADC1_Init+0x15c>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001872:	2208      	movs	r2, #8
 8001874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001876:	4b42      	ldr	r3, [pc, #264]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800187e:	4b40      	ldr	r3, [pc, #256]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001880:	2201      	movs	r2, #1
 8001882:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001884:	483e      	ldr	r0, [pc, #248]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001886:	f006 f8af 	bl	80079e8 <HAL_ADC_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001890:	f000 fcaa 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800189c:	2307      	movs	r3, #7
 800189e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4619      	mov	r1, r3
 80018a4:	4836      	ldr	r0, [pc, #216]	; (8001980 <MX_ADC1_Init+0x15c>)
 80018a6:	f006 fa3d 	bl	8007d24 <HAL_ADC_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018b0:	f000 fc9a 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	4619      	mov	r1, r3
 80018c0:	482f      	ldr	r0, [pc, #188]	; (8001980 <MX_ADC1_Init+0x15c>)
 80018c2:	f006 fa2f 	bl	8007d24 <HAL_ADC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018cc:	f000 fc8c 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018d4:	2303      	movs	r3, #3
 80018d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4828      	ldr	r0, [pc, #160]	; (8001980 <MX_ADC1_Init+0x15c>)
 80018de:	f006 fa21 	bl	8007d24 <HAL_ADC_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80018e8:	f000 fc7e 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80018ec:	230a      	movs	r3, #10
 80018ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80018f0:	2304      	movs	r3, #4
 80018f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4821      	ldr	r0, [pc, #132]	; (8001980 <MX_ADC1_Init+0x15c>)
 80018fa:	f006 fa13 	bl	8007d24 <HAL_ADC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001904:	f000 fc70 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001908:	230b      	movs	r3, #11
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800190c:	2305      	movs	r3, #5
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	481a      	ldr	r0, [pc, #104]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001916:	f006 fa05 	bl	8007d24 <HAL_ADC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001920:	f000 fc62 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001924:	230c      	movs	r3, #12
 8001926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001928:	2306      	movs	r3, #6
 800192a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4813      	ldr	r0, [pc, #76]	; (8001980 <MX_ADC1_Init+0x15c>)
 8001932:	f006 f9f7 	bl	8007d24 <HAL_ADC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800193c:	f000 fc54 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001940:	230d      	movs	r3, #13
 8001942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001944:	2307      	movs	r3, #7
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_ADC1_Init+0x15c>)
 800194e:	f006 f9e9 	bl	8007d24 <HAL_ADC_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001958:	f000 fc46 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800195c:	2310      	movs	r3, #16
 800195e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001960:	2308      	movs	r3, #8
 8001962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_ADC1_Init+0x15c>)
 800196a:	f006 f9db 	bl	8007d24 <HAL_ADC_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001974:	f000 fc38 	bl	80021e8 <Error_Handler>
  }

}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20004964 	.word	0x20004964
 8001984:	40012000 	.word	0x40012000
 8001988:	0f000001 	.word	0x0f000001

0800198c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a3c      	ldr	r2, [pc, #240]	; (8001a9c <HAL_ADC_MspInit+0x110>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d171      	bne.n	8001a92 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a3a      	ldr	r2, [pc, #232]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a33      	ldr	r2, [pc, #204]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a2c      	ldr	r2, [pc, #176]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a02:	230f      	movs	r3, #15
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a06:	2303      	movs	r3, #3
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4823      	ldr	r0, [pc, #140]	; (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a16:	f007 f943 	bl	8008ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <HAL_ADC_MspInit+0x11c>)
 8001a2e:	f007 f937 	bl	8008ca0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a34:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_ADC_MspInit+0x124>)
 8001a36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a78:	f006 fd06 	bl	8008488 <HAL_DMA_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001a82:	f000 fbb1 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_ADC_MspInit+0x120>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	200049ac 	.word	0x200049ac
 8001ab0:	40026410 	.word	0x40026410

08001ab4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <DWT_Delay_us+0x3c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001ac2:	f008 ff9f 	bl	800aa04 <HAL_RCC_GetHCLKFreq>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <DWT_Delay_us+0x40>)
 8001aca:	fba3 2302 	umull	r2, r3, r3, r2
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001ad8:	bf00      	nop
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <DWT_Delay_us+0x3c>)
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3f8      	bcc.n	8001ada <DWT_Delay_us+0x26>
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	e0001000 	.word	0xe0001000
 8001af4:	431bde83 	.word	0x431bde83

08001af8 <play>:
float fourth = 512.0 / SF;
float half = 1024.0 / SF;


void play(float freq, float time)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b02:	edc7 0a00 	vstr	s1, [r7]
	float value = 0.0;
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
	while(value < time){
 8001b0c:	e01b      	b.n	8001b46 <play+0x4e>
		HAL_GPIO_TogglePin(BUZ_GPIO_Port, BUZ_Pin);
 8001b0e:	2120      	movs	r1, #32
 8001b10:	4816      	ldr	r0, [pc, #88]	; (8001b6c <play+0x74>)
 8001b12:	f007 fa90 	bl	8009036 <HAL_GPIO_TogglePin>
		DWT_Delay_us (1000*1000/freq);
 8001b16:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001b70 <play+0x78>
 8001b1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b26:	ee17 0a90 	vmov	r0, s15
 8001b2a:	f7ff ffc3 	bl	8001ab4 <DWT_Delay_us>
		value += 1000/freq;
 8001b2e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001b74 <play+0x7c>
 8001b32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b42:	edc7 7a03 	vstr	s15, [r7, #12]
	while(value < time){
 8001b46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b4a:	edd7 7a00 	vldr	s15, [r7]
 8001b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	d4da      	bmi.n	8001b0e <play+0x16>
	}
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <play+0x74>)
 8001b5e:	f007 fa51 	bl	8009004 <HAL_GPIO_WritePin>
};
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	49742400 	.word	0x49742400
 8001b74:	447a0000 	.word	0x447a0000

08001b78 <play_OK_sound>:

void play_OK_sound(){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	play(800,500);
 8001b7c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001bac <play_OK_sound+0x34>
 8001b80:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001bb0 <play_OK_sound+0x38>
 8001b84:	f7ff ffb8 	bl	8001af8 <play>
	play(1600,200);
 8001b88:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8001bb4 <play_OK_sound+0x3c>
 8001b8c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001bb8 <play_OK_sound+0x40>
 8001b90:	f7ff ffb2 	bl	8001af8 <play>
	HAL_Delay(50);
 8001b94:	2032      	movs	r0, #50	; 0x32
 8001b96:	f005 ff05 	bl	80079a4 <HAL_Delay>
	play(1600,1000);
 8001b9a:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001bbc <play_OK_sound+0x44>
 8001b9e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001bb8 <play_OK_sound+0x40>
 8001ba2:	f7ff ffa9 	bl	8001af8 <play>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	43fa0000 	.word	0x43fa0000
 8001bb0:	44480000 	.word	0x44480000
 8001bb4:	43480000 	.word	0x43480000
 8001bb8:	44c80000 	.word	0x44c80000
 8001bbc:	447a0000 	.word	0x447a0000

08001bc0 <play_FAIL_sound>:


void play_FAIL_sound(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	for (int i=0; i<20; i++){
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e00e      	b.n	8001bea <play_FAIL_sound+0x2a>
		play(400,20);
 8001bcc:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001bd0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001c24 <play_FAIL_sound+0x64>
 8001bd4:	f7ff ff90 	bl	8001af8 <play>
		play(600,20);
 8001bd8:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001bdc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001c28 <play_FAIL_sound+0x68>
 8001be0:	f7ff ff8a 	bl	8001af8 <play>
	for (int i=0; i<20; i++){
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b13      	cmp	r3, #19
 8001bee:	dded      	ble.n	8001bcc <play_FAIL_sound+0xc>
	}
	for (int i=0; i<20; i++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	e00e      	b.n	8001c14 <play_FAIL_sound+0x54>
		play(1600,20);
 8001bf6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001bfa:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001c2c <play_FAIL_sound+0x6c>
 8001bfe:	f7ff ff7b 	bl	8001af8 <play>
		play(1800,20);
 8001c02:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001c06:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001c30 <play_FAIL_sound+0x70>
 8001c0a:	f7ff ff75 	bl	8001af8 <play>
	for (int i=0; i<20; i++){
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b13      	cmp	r3, #19
 8001c18:	dded      	ble.n	8001bf6 <play_FAIL_sound+0x36>
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	43c80000 	.word	0x43c80000
 8001c28:	44160000 	.word	0x44160000
 8001c2c:	44c80000 	.word	0x44c80000
 8001c30:	44e10000 	.word	0x44e10000

08001c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_DMA_Init+0x5c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <MX_DMA_Init+0x5c>)
 8001c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_DMA_Init+0x5c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2038      	movs	r0, #56	; 0x38
 8001c5c:	f006 fbdd 	bl	800841a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c60:	2038      	movs	r0, #56	; 0x38
 8001c62:	f006 fbf6 	bl	8008452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	203b      	movs	r0, #59	; 0x3b
 8001c6c:	f006 fbd5 	bl	800841a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001c70:	203b      	movs	r0, #59	; 0x3b
 8001c72:	f006 fbee 	bl	8008452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2045      	movs	r0, #69	; 0x45
 8001c7c:	f006 fbcd 	bl	800841a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001c80:	2045      	movs	r0, #69	; 0x45
 8001c82:	f006 fbe6 	bl	8008452 <HAL_NVIC_EnableIRQ>

}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <DWT_Delay_Init+0x58>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	; (8001cec <DWT_Delay_Init+0x58>)
 8001c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <DWT_Delay_Init+0x58>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a10      	ldr	r2, [pc, #64]	; (8001cec <DWT_Delay_Init+0x58>)
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cae:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <DWT_Delay_Init+0x5c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <DWT_Delay_Init+0x5c>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <DWT_Delay_Init+0x5c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <DWT_Delay_Init+0x5c>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <DWT_Delay_Init+0x5c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001cce:	bf00      	nop
     __ASM volatile ("NOP");
 8001cd0:	bf00      	nop
  __ASM volatile ("NOP");
 8001cd2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <DWT_Delay_Init+0x5c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001ce0:	2301      	movs	r3, #1
  }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000edf0 	.word	0xe000edf0
 8001cf0:	e0001000 	.word	0xe0001000

08001cf4 <start_timer>:
 *      Author: linus
 */

#include "fs_timer.h"

void start_timer(struct timer_t * t, uint32_t * tick){
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	if (t->active == 0){
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7a1b      	ldrb	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <start_timer+0x26>
		t->end = *tick + t->value;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	441a      	add	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]
		t->active = 1;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	721a      	strb	r2, [r3, #8]
	}
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <check_timer>:

uint8_t check_timer(struct timer_t * t, uint32_t * tick){
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
	if ((*tick > t->end) && (t->active == 1)) {
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d908      	bls.n	8001d4e <check_timer+0x28>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7a1b      	ldrb	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d104      	bne.n	8001d4e <check_timer+0x28>
		t->active = 0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	721a      	strb	r2, [r3, #8]
		return 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <check_timer+0x2a>
	}
	return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a63      	ldr	r2, [pc, #396]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a55      	ldr	r2, [pc, #340]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a47      	ldr	r2, [pc, #284]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <MX_GPIO_Init+0x1ac>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2110      	movs	r1, #16
 8001e02:	4842      	ldr	r0, [pc, #264]	; (8001f0c <MX_GPIO_Init+0x1b0>)
 8001e04:	f007 f8fe 	bl	8009004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2120      	movs	r1, #32
 8001e0c:	4840      	ldr	r0, [pc, #256]	; (8001f10 <MX_GPIO_Init+0x1b4>)
 8001e0e:	f007 f8f9 	bl	8009004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001e12:	2200      	movs	r2, #0
 8001e14:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001e18:	483e      	ldr	r0, [pc, #248]	; (8001f14 <MX_GPIO_Init+0x1b8>)
 8001e1a:	f007 f8f3 	bl	8009004 <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001e24:	483c      	ldr	r0, [pc, #240]	; (8001f18 <MX_GPIO_Init+0x1bc>)
 8001e26:	f007 f8ed 	bl	8009004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4835      	ldr	r0, [pc, #212]	; (8001f14 <MX_GPIO_Init+0x1b8>)
 8001e3e:	f006 ff2f 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	482e      	ldr	r0, [pc, #184]	; (8001f10 <MX_GPIO_Init+0x1b4>)
 8001e58:	f006 ff22 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4826      	ldr	r0, [pc, #152]	; (8001f0c <MX_GPIO_Init+0x1b0>)
 8001e74:	f006 ff14 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4820      	ldr	r0, [pc, #128]	; (8001f10 <MX_GPIO_Init+0x1b4>)
 8001e90:	f006 ff06 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001e94:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001e98:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4819      	ldr	r0, [pc, #100]	; (8001f14 <MX_GPIO_Init+0x1b8>)
 8001eae:	f006 fef7 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 8001eb2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4813      	ldr	r0, [pc, #76]	; (8001f18 <MX_GPIO_Init+0x1bc>)
 8001ecc:	f006 fee8 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <MX_GPIO_Init+0x1c0>)
 8001ee4:	f006 fedc 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8001ee8:	2310      	movs	r3, #16
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <MX_GPIO_Init+0x1bc>)
 8001efc:	f006 fed0 	bl	8008ca0 <HAL_GPIO_Init>

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020c00 	.word	0x40020c00

08001f20 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <MX_I2C1_Init+0x54>)
 8001f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <MX_I2C1_Init+0x58>)
 8001f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <MX_I2C1_Init+0x50>)
 8001f5e:	f007 f885 	bl	800906c <HAL_I2C_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f68:	f000 f93e 	bl	80021e8 <Error_Handler>
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20004a0c 	.word	0x20004a0c
 8001f74:	40005400 	.word	0x40005400
 8001f78:	00061a80 	.word	0x00061a80

08001f7c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <MX_I2C2_Init+0x54>)
 8001f84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001f88:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <MX_I2C2_Init+0x58>)
 8001f8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <MX_I2C2_Init+0x50>)
 8001fba:	f007 f857 	bl	800906c <HAL_I2C_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fc4:	f000 f910 	bl	80021e8 <Error_Handler>
  }

}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20004a60 	.word	0x20004a60
 8001fd0:	40005800 	.word	0x40005800
 8001fd4:	000186a0 	.word	0x000186a0

08001fd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a32      	ldr	r2, [pc, #200]	; (80020c0 <HAL_I2C_MspInit+0xe8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12c      	bne.n	8002054 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a30      	ldr	r2, [pc, #192]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002016:	23c0      	movs	r3, #192	; 0xc0
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201a:	2312      	movs	r3, #18
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201e:	2301      	movs	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002026:	2304      	movs	r3, #4
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	4825      	ldr	r0, [pc, #148]	; (80020c8 <HAL_I2C_MspInit+0xf0>)
 8002032:	f006 fe35 	bl	8008ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 8002040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002052:	e031      	b.n	80020b8 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_I2C_MspInit+0xf4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12c      	bne.n	80020b8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800207a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800208c:	2304      	movs	r3, #4
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	480c      	ldr	r0, [pc, #48]	; (80020c8 <HAL_I2C_MspInit+0xf0>)
 8002098:	f006 fe02 	bl	8008ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 80020a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_I2C_MspInit+0xec>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3730      	adds	r7, #48	; 0x30
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40005800 	.word	0x40005800

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d4:	f005 fbf4 	bl	80078c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d8:	f000 f81c 	bl	8002114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020dc:	f7ff fe3e 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80020e0:	f7ff fda8 	bl	8001c34 <MX_DMA_Init>
  MX_I2C1_Init();
 80020e4:	f7ff ff1c 	bl	8001f20 <MX_I2C1_Init>
  MX_SPI2_Init();
 80020e8:	f001 fdf2 	bl	8003cd0 <MX_SPI2_Init>
  MX_ADC1_Init();
 80020ec:	f7ff fb9a 	bl	8001824 <MX_ADC1_Init>
  MX_I2C2_Init();
 80020f0:	f7ff ff44 	bl	8001f7c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80020f4:	f001 f868 	bl	80031c8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80020f8:	f001 fdb4 	bl	8003c64 <MX_SPI1_Init>
  MX_FATFS_Init();
 80020fc:	f00b fa58 	bl	800d5b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8002100:	f7fe ff6c 	bl	8000fdc <turn_off_HAWKs>
  turn_off_TDs();
 8002104:	f7fe ff9a 	bl	800103c <turn_off_TDs>

  schedulerinit();
 8002108:	f000 f944 	bl	8002394 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 800210c:	f000 fac0 	bl	8002690 <scheduler>
 8002110:	e7fc      	b.n	800210c <main+0x3c>
	...

08002114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b094      	sub	sp, #80	; 0x50
 8002118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211a:	f107 0320 	add.w	r3, r7, #32
 800211e:	2230      	movs	r2, #48	; 0x30
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f00e fc5b 	bl	80109de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <SystemClock_Config+0xcc>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <SystemClock_Config+0xcc>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002146:	6413      	str	r3, [r2, #64]	; 0x40
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <SystemClock_Config+0xcc>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <SystemClock_Config+0xd0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a21      	ldr	r2, [pc, #132]	; (80021e4 <SystemClock_Config+0xd0>)
 800215e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <SystemClock_Config+0xd0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002170:	2302      	movs	r3, #2
 8002172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002174:	2301      	movs	r3, #1
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002178:	2310      	movs	r3, #16
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217c:	2302      	movs	r3, #2
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002180:	2300      	movs	r3, #0
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002184:	2308      	movs	r3, #8
 8002186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002188:	23a8      	movs	r3, #168	; 0xa8
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800218c:	2302      	movs	r3, #2
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002190:	2307      	movs	r3, #7
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	4618      	mov	r0, r3
 800219a:	f008 f82b 	bl	800a1f4 <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021a4:	f000 f820 	bl	80021e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a8:	230f      	movs	r3, #15
 80021aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ac:	2302      	movs	r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2105      	movs	r1, #5
 80021c6:	4618      	mov	r0, r3
 80021c8:	f008 fa84 	bl	800a6d4 <HAL_RCC_ClockConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021d2:	f000 f809 	bl	80021e8 <Error_Handler>
  }
}
 80021d6:	bf00      	nop
 80021d8:	3750      	adds	r7, #80	; 0x50
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40007000 	.word	0x40007000

080021e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <getNextExecution>:
float Ay2[FAKE_FILE_LEN];
float Az2[FAKE_FILE_LEN];

float launch_detect_buffer[5] = {0.0};

uint32_t getNextExecution(task_t * task){
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4413      	add	r3, r2
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <launch_detect>:

uint8_t launch_detect(float * a1, float * a2){
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < 5; i++){
 800221e:	2301      	movs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e00d      	b.n	8002240 <launch_detect+0x2c>
		launch_detect_buffer[i-1] = launch_detect_buffer[i];
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3b01      	subs	r3, #1
 8002228:	4958      	ldr	r1, [pc, #352]	; (800238c <launch_detect+0x178>)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	440a      	add	r2, r1
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	4956      	ldr	r1, [pc, #344]	; (800238c <launch_detect+0x178>)
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < 5; i++){
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b04      	cmp	r3, #4
 8002244:	ddee      	ble.n	8002224 <launch_detect+0x10>
	}
	launch_detect_buffer[4] = (sqrt(a1[1]*a1[1] + a1[2]*a1[2] + a1[3]*a1[3]) + sqrt(a2[1]*a2[1] + a2[2]*a2[2] + a2[3]*a2[3])) / 2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	ed93 7a00 	vldr	s14, [r3]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3308      	adds	r3, #8
 800225e:	edd3 6a00 	vldr	s13, [r3]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3308      	adds	r3, #8
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	330c      	adds	r3, #12
 8002276:	edd3 6a00 	vldr	s13, [r3]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	330c      	adds	r3, #12
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	ee17 0a90 	vmov	r0, s15
 800228e:	f7fe f95b 	bl	8000548 <__aeabi_f2d>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
 8002296:	ec44 3b10 	vmov	d0, r3, r4
 800229a:	f011 fa57 	bl	801374c <sqrt>
 800229e:	ec55 4b10 	vmov	r4, r5, d0
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3304      	adds	r3, #4
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3304      	adds	r3, #4
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	3308      	adds	r3, #8
 80022ba:	edd3 6a00 	vldr	s13, [r3]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	3308      	adds	r3, #8
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	330c      	adds	r3, #12
 80022d2:	edd3 6a00 	vldr	s13, [r3]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	ee17 0a90 	vmov	r0, s15
 80022ea:	f7fe f92d 	bl	8000548 <__aeabi_f2d>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	ec43 2b10 	vmov	d0, r2, r3
 80022f6:	f011 fa29 	bl	801374c <sqrt>
 80022fa:	ec53 2b10 	vmov	r2, r3, d0
 80022fe:	4620      	mov	r0, r4
 8002300:	4629      	mov	r1, r5
 8002302:	f7fd ffc3 	bl	800028c <__adddf3>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	4618      	mov	r0, r3
 800230c:	4621      	mov	r1, r4
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002316:	f7fe fa99 	bl	800084c <__aeabi_ddiv>
 800231a:	4603      	mov	r3, r0
 800231c:	460c      	mov	r4, r1
 800231e:	4618      	mov	r0, r3
 8002320:	4621      	mov	r1, r4
 8002322:	f7fe fc61 	bl	8000be8 <__aeabi_d2f>
 8002326:	4602      	mov	r2, r0
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <launch_detect+0x178>)
 800232a:	611a      	str	r2, [r3, #16]
	float sum_a = 0;
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 5; i++){
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e00e      	b.n	8002356 <launch_detect+0x142>
		sum_a += launch_detect_buffer[i];
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <launch_detect+0x178>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ed97 7a04 	vldr	s14, [r7, #16]
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < 5; i++){
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b04      	cmp	r3, #4
 800235a:	dded      	ble.n	8002338 <launch_detect+0x124>
	}
	sum_a /= 5;
 800235c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002360:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002368:	edc7 7a04 	vstr	s15, [r7, #16]

	// if average of acceleration over 5 measurements is higher than 4G, launch has been detected.
	if (sum_a >= 40) return 1;
 800236c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002370:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002390 <launch_detect+0x17c>
 8002374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	db01      	blt.n	8002382 <launch_detect+0x16e>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <launch_detect+0x170>
	return 0;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	20000818 	.word	0x20000818
 8002390:	42200000 	.word	0x42200000

08002394 <schedulerinit>:

void schedulerinit () {
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af02      	add	r7, sp, #8

	//initialize all devices
	ms5607_init(&BARO1);
 800239a:	489c      	ldr	r0, [pc, #624]	; (800260c <schedulerinit+0x278>)
 800239c:	f002 fc0e 	bl	8004bbc <ms5607_init>
	ms5607_init(&BARO2);
 80023a0:	489b      	ldr	r0, [pc, #620]	; (8002610 <schedulerinit+0x27c>)
 80023a2:	f002 fc0b 	bl	8004bbc <ms5607_init>
	sht31_init(&TEMP);
 80023a6:	489b      	ldr	r0, [pc, #620]	; (8002614 <schedulerinit+0x280>)
 80023a8:	f002 ffb0 	bl	800530c <sht31_init>
	icm20601_init(&IMU1);
 80023ac:	489a      	ldr	r0, [pc, #616]	; (8002618 <schedulerinit+0x284>)
 80023ae:	f002 f95c 	bl	800466a <icm20601_init>
	icm20601_init(&IMU2);
 80023b2:	489a      	ldr	r0, [pc, #616]	; (800261c <schedulerinit+0x288>)
 80023b4:	f002 f959 	bl	800466a <icm20601_init>
	h3l_init(&ACCEL);
 80023b8:	4899      	ldr	r0, [pc, #612]	; (8002620 <schedulerinit+0x28c>)
 80023ba:	f001 fe91 	bl	80040e0 <h3l_init>
	init_ADC();
 80023be:	f7fe fe4f 	bl	8001060 <init_ADC>

	DWT_Delay_Init();
 80023c2:	f7ff fc67 	bl	8001c94 <DWT_Delay_Init>


	// cycle through LEDs

	turn_on(&STAT);
 80023c6:	4897      	ldr	r0, [pc, #604]	; (8002624 <schedulerinit+0x290>)
 80023c8:	f002 fbd8 	bl	8004b7c <turn_on>
	HAL_Delay(300);
 80023cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023d0:	f005 fae8 	bl	80079a4 <HAL_Delay>
	turn_on(&SAVE);
 80023d4:	4894      	ldr	r0, [pc, #592]	; (8002628 <schedulerinit+0x294>)
 80023d6:	f002 fbd1 	bl	8004b7c <turn_on>
	HAL_Delay(300);
 80023da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023de:	f005 fae1 	bl	80079a4 <HAL_Delay>
	turn_on(&PRGM);
 80023e2:	4892      	ldr	r0, [pc, #584]	; (800262c <schedulerinit+0x298>)
 80023e4:	f002 fbca 	bl	8004b7c <turn_on>
	HAL_Delay(300);
 80023e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023ec:	f005 fada 	bl	80079a4 <HAL_Delay>
	turn_on(&RDY);
 80023f0:	488f      	ldr	r0, [pc, #572]	; (8002630 <schedulerinit+0x29c>)
 80023f2:	f002 fbc3 	bl	8004b7c <turn_on>
	HAL_Delay(300);
 80023f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023fa:	f005 fad3 	bl	80079a4 <HAL_Delay>

	stay_alive();
 80023fe:	f7fe fdc3 	bl	8000f88 <stay_alive>

	turn_off(&STAT);
 8002402:	4888      	ldr	r0, [pc, #544]	; (8002624 <schedulerinit+0x290>)
 8002404:	f002 fbca 	bl	8004b9c <turn_off>
	turn_off(&SAVE);
 8002408:	4887      	ldr	r0, [pc, #540]	; (8002628 <schedulerinit+0x294>)
 800240a:	f002 fbc7 	bl	8004b9c <turn_off>
	turn_off(&PRGM);
 800240e:	4887      	ldr	r0, [pc, #540]	; (800262c <schedulerinit+0x298>)
 8002410:	f002 fbc4 	bl	8004b9c <turn_off>
	turn_off(&RDY);
 8002414:	4886      	ldr	r0, [pc, #536]	; (8002630 <schedulerinit+0x29c>)
 8002416:	f002 fbc1 	bl	8004b9c <turn_off>

	// initialize SD card
	turn_on(&SAVE);
 800241a:	4883      	ldr	r0, [pc, #524]	; (8002628 <schedulerinit+0x294>)
 800241c:	f002 fbae 	bl	8004b7c <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 8002420:	4984      	ldr	r1, [pc, #528]	; (8002634 <schedulerinit+0x2a0>)
 8002422:	4885      	ldr	r0, [pc, #532]	; (8002638 <schedulerinit+0x2a4>)
 8002424:	f7fe ff68 	bl	80012f8 <init_sd>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b83      	ldr	r3, [pc, #524]	; (800263c <schedulerinit+0x2a8>)
 800242e:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 8002430:	4b82      	ldr	r3, [pc, #520]	; (800263c <schedulerinit+0x2a8>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <schedulerinit+0xac>
		turn_off(&SAVE);
 8002438:	487b      	ldr	r0, [pc, #492]	; (8002628 <schedulerinit+0x294>)
 800243a:	f002 fbaf 	bl	8004b9c <turn_off>
 800243e:	e00b      	b.n	8002458 <schedulerinit+0xc4>
	} else {
		turn_on(&RDY);
 8002440:	487b      	ldr	r0, [pc, #492]	; (8002630 <schedulerinit+0x29c>)
 8002442:	f002 fb9b 	bl	8004b7c <turn_on>
		HAL_Delay(100);
 8002446:	2064      	movs	r0, #100	; 0x64
 8002448:	f005 faac 	bl	80079a4 <HAL_Delay>
		turn_off(&RDY);
 800244c:	4878      	ldr	r0, [pc, #480]	; (8002630 <schedulerinit+0x29c>)
 800244e:	f002 fba5 	bl	8004b9c <turn_off>
		HAL_Delay(100);
 8002452:	2064      	movs	r0, #100	; 0x64
 8002454:	f005 faa6 	bl	80079a4 <HAL_Delay>
	}
	if (DEBUG_PRINT == 1) printf("num_dat_file: %hu \n",num_dat_file);
 8002458:	4b77      	ldr	r3, [pc, #476]	; (8002638 <schedulerinit+0x2a4>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4878      	ldr	r0, [pc, #480]	; (8002640 <schedulerinit+0x2ac>)
 8002460:	f00e ff22 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("num_log_file: %hu \n",num_log_file);
 8002464:	4b73      	ldr	r3, [pc, #460]	; (8002634 <schedulerinit+0x2a0>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	4876      	ldr	r0, [pc, #472]	; (8002644 <schedulerinit+0x2b0>)
 800246c:	f00e ff1c 	bl	80112a8 <iprintf>

	num_log_file ++;
 8002470:	4b70      	ldr	r3, [pc, #448]	; (8002634 <schedulerinit+0x2a0>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <schedulerinit+0x2a0>)
 800247a:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 800247c:	4b6e      	ldr	r3, [pc, #440]	; (8002638 <schedulerinit+0x2a4>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <schedulerinit+0x2a4>)
 8002486:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 8002488:	4b6b      	ldr	r3, [pc, #428]	; (8002638 <schedulerinit+0x2a4>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	496e      	ldr	r1, [pc, #440]	; (8002648 <schedulerinit+0x2b4>)
 8002490:	486e      	ldr	r0, [pc, #440]	; (800264c <schedulerinit+0x2b8>)
 8002492:	f00e ff85 	bl	80113a0 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",FILE_NAME);
 8002496:	496d      	ldr	r1, [pc, #436]	; (800264c <schedulerinit+0x2b8>)
 8002498:	486d      	ldr	r0, [pc, #436]	; (8002650 <schedulerinit+0x2bc>)
 800249a:	f00e ff05 	bl	80112a8 <iprintf>

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 800249e:	4b65      	ldr	r3, [pc, #404]	; (8002634 <schedulerinit+0x2a0>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	496b      	ldr	r1, [pc, #428]	; (8002654 <schedulerinit+0x2c0>)
 80024a6:	486c      	ldr	r0, [pc, #432]	; (8002658 <schedulerinit+0x2c4>)
 80024a8:	f00e ff7a 	bl	80113a0 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",LOG_NAME);
 80024ac:	496a      	ldr	r1, [pc, #424]	; (8002658 <schedulerinit+0x2c4>)
 80024ae:	4868      	ldr	r0, [pc, #416]	; (8002650 <schedulerinit+0x2bc>)
 80024b0:	f00e fefa 	bl	80112a8 <iprintf>

	SD_state = init_file(FILE_NAME, LOG_NAME);
 80024b4:	4968      	ldr	r1, [pc, #416]	; (8002658 <schedulerinit+0x2c4>)
 80024b6:	4865      	ldr	r0, [pc, #404]	; (800264c <schedulerinit+0x2b8>)
 80024b8:	f7ff f818 	bl	80014ec <init_file>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <schedulerinit+0x2a8>)
 80024c2:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 80024c4:	4b5d      	ldr	r3, [pc, #372]	; (800263c <schedulerinit+0x2a8>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d103      	bne.n	80024d4 <schedulerinit+0x140>
		turn_off(&SAVE);
 80024cc:	4856      	ldr	r0, [pc, #344]	; (8002628 <schedulerinit+0x294>)
 80024ce:	f002 fb65 	bl	8004b9c <turn_off>
 80024d2:	e00b      	b.n	80024ec <schedulerinit+0x158>
	} else {
		turn_on(&RDY);
 80024d4:	4856      	ldr	r0, [pc, #344]	; (8002630 <schedulerinit+0x29c>)
 80024d6:	f002 fb51 	bl	8004b7c <turn_on>
		HAL_Delay(100);
 80024da:	2064      	movs	r0, #100	; 0x64
 80024dc:	f005 fa62 	bl	80079a4 <HAL_Delay>
		turn_off(&RDY);
 80024e0:	4853      	ldr	r0, [pc, #332]	; (8002630 <schedulerinit+0x29c>)
 80024e2:	f002 fb5b 	bl	8004b9c <turn_off>
		HAL_Delay(100);
 80024e6:	2064      	movs	r0, #100	; 0x64
 80024e8:	f005 fa5c 	bl	80079a4 <HAL_Delay>
	}
	turn_on(&RDY);
 80024ec:	4850      	ldr	r0, [pc, #320]	; (8002630 <schedulerinit+0x29c>)
 80024ee:	f002 fb45 	bl	8004b7c <turn_on>
	HAL_Delay(1000);
 80024f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f6:	f005 fa55 	bl	80079a4 <HAL_Delay>

	bufclear(buffer);
 80024fa:	4858      	ldr	r0, [pc, #352]	; (800265c <schedulerinit+0x2c8>)
 80024fc:	f7fe fee2 	bl	80012c4 <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 8002500:	f005 fa44 	bl	800798c <HAL_GetTick>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	4955      	ldr	r1, [pc, #340]	; (8002660 <schedulerinit+0x2cc>)
 800250a:	4854      	ldr	r0, [pc, #336]	; (800265c <schedulerinit+0x2c8>)
 800250c:	f00e ff48 	bl	80113a0 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 8002510:	4952      	ldr	r1, [pc, #328]	; (800265c <schedulerinit+0x2c8>)
 8002512:	4851      	ldr	r0, [pc, #324]	; (8002658 <schedulerinit+0x2c4>)
 8002514:	f7ff f910 	bl	8001738 <log_to_SD>
		read_from_SD("FDATAHE.CSV", TIME, P1, P2, Ax1, Ay1, Az1, Ax2, Ay2, Az2);
#endif

	// selftest

	read_ADC(adc_dat);
 8002518:	4852      	ldr	r0, [pc, #328]	; (8002664 <schedulerinit+0x2d0>)
 800251a:	f7fe fdb1 	bl	8001080 <read_ADC>
	V_TD1 = adc_dat[0];
 800251e:	4b51      	ldr	r3, [pc, #324]	; (8002664 <schedulerinit+0x2d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a51      	ldr	r2, [pc, #324]	; (8002668 <schedulerinit+0x2d4>)
 8002524:	6013      	str	r3, [r2, #0]
	V_TD2 = adc_dat[1];
 8002526:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <schedulerinit+0x2d0>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a50      	ldr	r2, [pc, #320]	; (800266c <schedulerinit+0x2d8>)
 800252c:	6013      	str	r3, [r2, #0]
	V_LDR = adc_dat[2];
 800252e:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <schedulerinit+0x2d0>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <schedulerinit+0x2dc>)
 8002534:	6013      	str	r3, [r2, #0]
	I_BAT1 = adc_dat[3];
 8002536:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <schedulerinit+0x2d0>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4a4e      	ldr	r2, [pc, #312]	; (8002674 <schedulerinit+0x2e0>)
 800253c:	6013      	str	r3, [r2, #0]
	I_BAT2 = adc_dat[4];
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <schedulerinit+0x2d0>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <schedulerinit+0x2e4>)
 8002544:	6013      	str	r3, [r2, #0]
	V_BAT1 = adc_dat[5];
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <schedulerinit+0x2d0>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4a4c      	ldr	r2, [pc, #304]	; (800267c <schedulerinit+0x2e8>)
 800254c:	6013      	str	r3, [r2, #0]
	V_BAT2 = adc_dat[6];
 800254e:	4b45      	ldr	r3, [pc, #276]	; (8002664 <schedulerinit+0x2d0>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a4b      	ldr	r2, [pc, #300]	; (8002680 <schedulerinit+0x2ec>)
 8002554:	6013      	str	r3, [r2, #0]
	t_cpu = adc_dat[7];
 8002556:	4b43      	ldr	r3, [pc, #268]	; (8002664 <schedulerinit+0x2d0>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <schedulerinit+0x2f0>)
 800255c:	6013      	str	r3, [r2, #0]

	selftest(V_TD1, V_TD2, V_BAT1, V_BAT2, V_LDR);
 800255e:	4b42      	ldr	r3, [pc, #264]	; (8002668 <schedulerinit+0x2d4>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <schedulerinit+0x2d8>)
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <schedulerinit+0x2e8>)
 800256c:	edd3 6a00 	vldr	s13, [r3]
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <schedulerinit+0x2ec>)
 8002572:	ed93 6a00 	vldr	s12, [r3]
 8002576:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <schedulerinit+0x2dc>)
 8002578:	edd3 5a00 	vldr	s11, [r3]
 800257c:	eeb0 2a65 	vmov.f32	s4, s11
 8002580:	eef0 1a46 	vmov.f32	s3, s12
 8002584:	eeb0 1a66 	vmov.f32	s2, s13
 8002588:	eef0 0a47 	vmov.f32	s1, s14
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	f001 fabc 	bl	8003b0c <selftest>

	// initialize state estimation with environment values

	float ground_pressure = 0;
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
	float ground_temperature = 0;
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
	uint8_t passed = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
	passed += config_baro(&TEMP, &BARO1, &BARO2, &ground_temperature, &ground_pressure);
 80025a4:	1d3a      	adds	r2, r7, #4
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	4a18      	ldr	r2, [pc, #96]	; (8002610 <schedulerinit+0x27c>)
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <schedulerinit+0x278>)
 80025b2:	4818      	ldr	r0, [pc, #96]	; (8002614 <schedulerinit+0x280>)
 80025b4:	f000 ffee 	bl	8003594 <config_baro>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	4413      	add	r3, r2
 80025c0:	73fb      	strb	r3, [r7, #15]
	passed += config_imu(&IMU1, &IMU2);
 80025c2:	4916      	ldr	r1, [pc, #88]	; (800261c <schedulerinit+0x288>)
 80025c4:	4814      	ldr	r0, [pc, #80]	; (8002618 <schedulerinit+0x284>)
 80025c6:	f001 f93f 	bl	8003848 <config_imu>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	4413      	add	r3, r2
 80025d2:	73fb      	strb	r3, [r7, #15]

	if (passed != 2){
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d002      	beq.n	80025e0 <schedulerinit+0x24c>
		// sound error
		if (IGNORE_ERRORS == 0){
			while (1){
				play_FAIL_sound();
 80025da:	f7ff faf1 	bl	8001bc0 <play_FAIL_sound>
 80025de:	e7fc      	b.n	80025da <schedulerinit+0x246>
			}
		}
	}
	play_OK_sound();
 80025e0:	f7ff faca 	bl	8001b78 <play_OK_sound>
		//ground_pressure = 86172.00;
		ground_pressure = 101327;
		ground_temperature = 20;
#endif

	reset_state_est_state(ground_pressure, ground_temperature, &state_est_state);
 80025e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80025ec:	4826      	ldr	r0, [pc, #152]	; (8002688 <schedulerinit+0x2f4>)
 80025ee:	eef0 0a47 	vmov.f32	s1, s14
 80025f2:	eeb0 0a67 	vmov.f32	s0, s15
 80025f6:	f004 fbbf 	bl	8006d78 <reset_state_est_state>
	t0 = HAL_GetTick();
 80025fa:	f005 f9c7 	bl	800798c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <schedulerinit+0x2f8>)
 8002602:	601a      	str	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	200000c4 	.word	0x200000c4
 8002610:	200000e4 	.word	0x200000e4
 8002614:	20000124 	.word	0x20000124
 8002618:	20000104 	.word	0x20000104
 800261c:	20000114 	.word	0x20000114
 8002620:	20000134 	.word	0x20000134
 8002624:	200000a4 	.word	0x200000a4
 8002628:	200000ac 	.word	0x200000ac
 800262c:	200000b4 	.word	0x200000b4
 8002630:	200000bc 	.word	0x200000bc
 8002634:	20000386 	.word	0x20000386
 8002638:	20000384 	.word	0x20000384
 800263c:	20000388 	.word	0x20000388
 8002640:	0801546c 	.word	0x0801546c
 8002644:	08015480 	.word	0x08015480
 8002648:	08015494 	.word	0x08015494
 800264c:	20014ca0 	.word	0x20014ca0
 8002650:	080154a0 	.word	0x080154a0
 8002654:	080154b0 	.word	0x080154b0
 8002658:	200082fc 	.word	0x200082fc
 800265c:	20012bfc 	.word	0x20012bfc
 8002660:	080154bc 	.word	0x080154bc
 8002664:	20013060 	.word	0x20013060
 8002668:	2000bb5c 	.word	0x2000bb5c
 800266c:	2000f3ac 	.word	0x2000f3ac
 8002670:	20013000 	.word	0x20013000
 8002674:	2000f3b0 	.word	0x2000f3b0
 8002678:	20013008 	.word	0x20013008
 800267c:	2001302c 	.word	0x2001302c
 8002680:	2000f3b8 	.word	0x2000f3b8
 8002684:	20004ab4 	.word	0x20004ab4
 8002688:	20000394 	.word	0x20000394
 800268c:	20013028 	.word	0x20013028

08002690 <scheduler>:

void scheduler (){
 8002690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002694:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8002698:	af48      	add	r7, sp, #288	; 0x120

	tick = HAL_GetTick();
 800269a:	f005 f977 	bl	800798c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <scheduler+0x128>)
 80026a2:	601a      	str	r2, [r3, #0]
		printf("FAKE DATA LINE %ld \n",counter);
#endif

	// TASK LED
	// cool light show! :)
	if(tick >= getNextExecution(&RDY_TASK)){
 80026a4:	4845      	ldr	r0, [pc, #276]	; (80027bc <scheduler+0x12c>)
 80026a6:	f7ff fda6 	bl	80021f6 <getNextExecution>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b42      	ldr	r3, [pc, #264]	; (80027b8 <scheduler+0x128>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d806      	bhi.n	80026c2 <scheduler+0x32>
		RDY_TASK.last_call = tick;
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <scheduler+0x128>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a40      	ldr	r2, [pc, #256]	; (80027bc <scheduler+0x12c>)
 80026ba:	6013      	str	r3, [r2, #0]
		toggle(&RDY);
 80026bc:	4840      	ldr	r0, [pc, #256]	; (80027c0 <scheduler+0x130>)
 80026be:	f002 fa4d 	bl	8004b5c <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 80026c2:	4840      	ldr	r0, [pc, #256]	; (80027c4 <scheduler+0x134>)
 80026c4:	f7ff fd97 	bl	80021f6 <getNextExecution>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <scheduler+0x128>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d806      	bhi.n	80026e0 <scheduler+0x50>
		SAVE_TASK.last_call = tick;
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <scheduler+0x128>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a3b      	ldr	r2, [pc, #236]	; (80027c4 <scheduler+0x134>)
 80026d8:	6013      	str	r3, [r2, #0]
		toggle(&SAVE);
 80026da:	483b      	ldr	r0, [pc, #236]	; (80027c8 <scheduler+0x138>)
 80026dc:	f002 fa3e 	bl	8004b5c <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 80026e0:	483a      	ldr	r0, [pc, #232]	; (80027cc <scheduler+0x13c>)
 80026e2:	f7ff fd88 	bl	80021f6 <getNextExecution>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <scheduler+0x128>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d806      	bhi.n	80026fe <scheduler+0x6e>
		STAT_TASK.last_call = tick;
 80026f0:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <scheduler+0x128>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a35      	ldr	r2, [pc, #212]	; (80027cc <scheduler+0x13c>)
 80026f6:	6013      	str	r3, [r2, #0]
		toggle(&STAT);
 80026f8:	4835      	ldr	r0, [pc, #212]	; (80027d0 <scheduler+0x140>)
 80026fa:	f002 fa2f 	bl	8004b5c <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 80026fe:	4835      	ldr	r0, [pc, #212]	; (80027d4 <scheduler+0x144>)
 8002700:	f7ff fd79 	bl	80021f6 <getNextExecution>
 8002704:	4602      	mov	r2, r0
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <scheduler+0x128>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d806      	bhi.n	800271c <scheduler+0x8c>
		PRGM_TASK.last_call = tick;
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <scheduler+0x128>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <scheduler+0x144>)
 8002714:	6013      	str	r3, [r2, #0]
		toggle(&PRGM);
 8002716:	4830      	ldr	r0, [pc, #192]	; (80027d8 <scheduler+0x148>)
 8002718:	f002 fa20 	bl	8004b5c <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 800271c:	482f      	ldr	r0, [pc, #188]	; (80027dc <scheduler+0x14c>)
 800271e:	f7ff fd6a 	bl	80021f6 <getNextExecution>
 8002722:	4602      	mov	r2, r0
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <scheduler+0x128>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d808      	bhi.n	800273e <scheduler+0xae>
		SHT_TASK.last_call = tick;
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <scheduler+0x128>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <scheduler+0x14c>)
 8002732:	6013      	str	r3, [r2, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <scheduler+0x150>)
 8002736:	492b      	ldr	r1, [pc, #172]	; (80027e4 <scheduler+0x154>)
 8002738:	482b      	ldr	r0, [pc, #172]	; (80027e8 <scheduler+0x158>)
 800273a:	f002 fe3d 	bl	80053b8 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 800273e:	482b      	ldr	r0, [pc, #172]	; (80027ec <scheduler+0x15c>)
 8002740:	f7ff fd59 	bl	80021f6 <getNextExecution>
 8002744:	4602      	mov	r2, r0
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <scheduler+0x128>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d860      	bhi.n	8002810 <scheduler+0x180>

		// TODO detect invalid values!

		switch(BARO_TASK.stage){
 800274e:	4b27      	ldr	r3, [pc, #156]	; (80027ec <scheduler+0x15c>)
 8002750:	7a1b      	ldrb	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <scheduler+0xcc>
 8002756:	2b01      	cmp	r3, #1
 8002758:	d010      	beq.n	800277c <scheduler+0xec>
 800275a:	e029      	b.n	80027b0 <scheduler+0x120>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 800275c:	4924      	ldr	r1, [pc, #144]	; (80027f0 <scheduler+0x160>)
 800275e:	4825      	ldr	r0, [pc, #148]	; (80027f4 <scheduler+0x164>)
 8002760:	f002 fada 	bl	8004d18 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 8002764:	4924      	ldr	r1, [pc, #144]	; (80027f8 <scheduler+0x168>)
 8002766:	4825      	ldr	r0, [pc, #148]	; (80027fc <scheduler+0x16c>)
 8002768:	f002 fad6 	bl	8004d18 <ms5607_prep_pressure>
				BARO_TASK.last_call = tick;
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <scheduler+0x128>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <scheduler+0x15c>)
 8002772:	6013      	str	r3, [r2, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <scheduler+0x15c>)
 8002776:	2201      	movs	r2, #1
 8002778:	721a      	strb	r2, [r3, #8]
				break;
 800277a:	e04a      	b.n	8002812 <scheduler+0x182>
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 800277c:	491c      	ldr	r1, [pc, #112]	; (80027f0 <scheduler+0x160>)
 800277e:	481d      	ldr	r0, [pc, #116]	; (80027f4 <scheduler+0x164>)
 8002780:	f002 fb13 	bl	8004daa <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 8002784:	491c      	ldr	r1, [pc, #112]	; (80027f8 <scheduler+0x168>)
 8002786:	481d      	ldr	r0, [pc, #116]	; (80027fc <scheduler+0x16c>)
 8002788:	f002 fb0f 	bl	8004daa <ms5607_read_pressure>
				BARO_TASK.last_call = tick;
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <scheduler+0x128>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <scheduler+0x15c>)
 8002792:	6013      	str	r3, [r2, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <scheduler+0x170>)
 8002796:	491b      	ldr	r1, [pc, #108]	; (8002804 <scheduler+0x174>)
 8002798:	4816      	ldr	r0, [pc, #88]	; (80027f4 <scheduler+0x164>)
 800279a:	f002 fb51 	bl	8004e40 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 800279e:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <scheduler+0x178>)
 80027a0:	491a      	ldr	r1, [pc, #104]	; (800280c <scheduler+0x17c>)
 80027a2:	4816      	ldr	r0, [pc, #88]	; (80027fc <scheduler+0x16c>)
 80027a4:	f002 fb4c 	bl	8004e40 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <scheduler+0x15c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	721a      	strb	r2, [r3, #8]
				break;
 80027ae:	e030      	b.n	8002812 <scheduler+0x182>
			default:
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <scheduler+0x15c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	721a      	strb	r2, [r3, #8]
				break;
 80027b6:	e02c      	b.n	8002812 <scheduler+0x182>
 80027b8:	20012ffc 	.word	0x20012ffc
 80027bc:	20000040 	.word	0x20000040
 80027c0:	200000bc 	.word	0x200000bc
 80027c4:	20000060 	.word	0x20000060
 80027c8:	200000ac 	.word	0x200000ac
 80027cc:	20000050 	.word	0x20000050
 80027d0:	200000a4 	.word	0x200000a4
 80027d4:	20000070 	.word	0x20000070
 80027d8:	200000b4 	.word	0x200000b4
 80027dc:	20000010 	.word	0x20000010
 80027e0:	2000f3b4 	.word	0x2000f3b4
 80027e4:	2001303c 	.word	0x2001303c
 80027e8:	20000124 	.word	0x20000124
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20013004 	.word	0x20013004
 80027f4:	200000c4 	.word	0x200000c4
 80027f8:	20004ab8 	.word	0x20004ab8
 80027fc:	200000e4 	.word	0x200000e4
 8002800:	2000037c 	.word	0x2000037c
 8002804:	20000374 	.word	0x20000374
 8002808:	20000380 	.word	0x20000380
 800280c:	20000378 	.word	0x20000378

		}
	}
 8002810:	bf00      	nop

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 8002812:	4891      	ldr	r0, [pc, #580]	; (8002a58 <scheduler+0x3c8>)
 8002814:	f7ff fcef 	bl	80021f6 <getNextExecution>
 8002818:	4602      	mov	r2, r0
 800281a:	4b90      	ldr	r3, [pc, #576]	; (8002a5c <scheduler+0x3cc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d80b      	bhi.n	800283a <scheduler+0x1aa>
		IMU_TASK.last_call = tick;
 8002822:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <scheduler+0x3cc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <scheduler+0x3c8>)
 8002828:	6013      	str	r3, [r2, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 800282a:	498d      	ldr	r1, [pc, #564]	; (8002a60 <scheduler+0x3d0>)
 800282c:	488d      	ldr	r0, [pc, #564]	; (8002a64 <scheduler+0x3d4>)
 800282e:	f002 f8bf 	bl	80049b0 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 8002832:	498d      	ldr	r1, [pc, #564]	; (8002a68 <scheduler+0x3d8>)
 8002834:	488d      	ldr	r0, [pc, #564]	; (8002a6c <scheduler+0x3dc>)
 8002836:	f002 f8bb 	bl	80049b0 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 800283a:	488d      	ldr	r0, [pc, #564]	; (8002a70 <scheduler+0x3e0>)
 800283c:	f7ff fcdb 	bl	80021f6 <getNextExecution>
 8002840:	4602      	mov	r2, r0
 8002842:	4b86      	ldr	r3, [pc, #536]	; (8002a5c <scheduler+0x3cc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d80b      	bhi.n	8002862 <scheduler+0x1d2>
		ACCEL_TASK.last_call = tick;
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <scheduler+0x3cc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a88      	ldr	r2, [pc, #544]	; (8002a70 <scheduler+0x3e0>)
 8002850:	6013      	str	r3, [r2, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 8002852:	4988      	ldr	r1, [pc, #544]	; (8002a74 <scheduler+0x3e4>)
 8002854:	4888      	ldr	r0, [pc, #544]	; (8002a78 <scheduler+0x3e8>)
 8002856:	f001 fc8d 	bl	8004174 <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 800285a:	4988      	ldr	r1, [pc, #544]	; (8002a7c <scheduler+0x3ec>)
 800285c:	4886      	ldr	r0, [pc, #536]	; (8002a78 <scheduler+0x3e8>)
 800285e:	f001 fd87 	bl	8004370 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 8002862:	4887      	ldr	r0, [pc, #540]	; (8002a80 <scheduler+0x3f0>)
 8002864:	f7ff fcc7 	bl	80021f6 <getNextExecution>
 8002868:	4602      	mov	r2, r0
 800286a:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <scheduler+0x3cc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d826      	bhi.n	80028c0 <scheduler+0x230>
		ADC_TASK.last_call = tick;
 8002872:	4b7a      	ldr	r3, [pc, #488]	; (8002a5c <scheduler+0x3cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a82      	ldr	r2, [pc, #520]	; (8002a80 <scheduler+0x3f0>)
 8002878:	6013      	str	r3, [r2, #0]
		read_ADC(adc_dat);
 800287a:	4882      	ldr	r0, [pc, #520]	; (8002a84 <scheduler+0x3f4>)
 800287c:	f7fe fc00 	bl	8001080 <read_ADC>
		V_TD1 = adc_dat[0];
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <scheduler+0x3f4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a80      	ldr	r2, [pc, #512]	; (8002a88 <scheduler+0x3f8>)
 8002886:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 8002888:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <scheduler+0x3f4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a7f      	ldr	r2, [pc, #508]	; (8002a8c <scheduler+0x3fc>)
 800288e:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 8002890:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <scheduler+0x3f4>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a7e      	ldr	r2, [pc, #504]	; (8002a90 <scheduler+0x400>)
 8002896:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 8002898:	4b7a      	ldr	r3, [pc, #488]	; (8002a84 <scheduler+0x3f4>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a7d      	ldr	r2, [pc, #500]	; (8002a94 <scheduler+0x404>)
 800289e:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 80028a0:	4b78      	ldr	r3, [pc, #480]	; (8002a84 <scheduler+0x3f4>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	4a7c      	ldr	r2, [pc, #496]	; (8002a98 <scheduler+0x408>)
 80028a6:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 80028a8:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <scheduler+0x3f4>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <scheduler+0x40c>)
 80028ae:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 80028b0:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <scheduler+0x3f4>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <scheduler+0x410>)
 80028b6:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 80028b8:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <scheduler+0x3f4>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	4a79      	ldr	r2, [pc, #484]	; (8002aa4 <scheduler+0x414>)
 80028be:	6013      	str	r3, [r2, #0]
		t_p2 = 20;
#endif


	// TASK STATE ESTIMATION
	if((tick >= getNextExecution(&STATE_EST_TASK)) || (FAKE_DATA == 1)){
 80028c0:	4879      	ldr	r0, [pc, #484]	; (8002aa8 <scheduler+0x418>)
 80028c2:	f7ff fc98 	bl	80021f6 <getNextExecution>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <scheduler+0x3cc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f200 810e 	bhi.w	8002aee <scheduler+0x45e>
		STATE_EST_TASK.last_call = tick;
 80028d2:	4b62      	ldr	r3, [pc, #392]	; (8002a5c <scheduler+0x3cc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a74      	ldr	r2, [pc, #464]	; (8002aa8 <scheduler+0x418>)
 80028d8:	6013      	str	r3, [r2, #0]

		// call state estimation

		// feed in sensor values
		state_est_state.state_est_meas.baro_data[0].pressure = p1;
 80028da:	4b74      	ldr	r3, [pc, #464]	; (8002aac <scheduler+0x41c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a74      	ldr	r2, [pc, #464]	; (8002ab0 <scheduler+0x420>)
 80028e0:	64d3      	str	r3, [r2, #76]	; 0x4c
		state_est_state.state_est_meas.baro_data[0].temperature = t_p1;
 80028e2:	4b74      	ldr	r3, [pc, #464]	; (8002ab4 <scheduler+0x424>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a72      	ldr	r2, [pc, #456]	; (8002ab0 <scheduler+0x420>)
 80028e8:	6513      	str	r3, [r2, #80]	; 0x50
		state_est_state.state_est_meas.baro_data[0].ts = tick;
 80028ea:	4b5c      	ldr	r3, [pc, #368]	; (8002a5c <scheduler+0x3cc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a70      	ldr	r2, [pc, #448]	; (8002ab0 <scheduler+0x420>)
 80028f0:	6553      	str	r3, [r2, #84]	; 0x54

		state_est_state.state_est_meas.imu_data[0].acc_x = -accel1_val[2];
 80028f2:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <scheduler+0x3d0>)
 80028f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80028f8:	eef1 7a67 	vneg.f32	s15, s15
 80028fc:	4b6c      	ldr	r3, [pc, #432]	; (8002ab0 <scheduler+0x420>)
 80028fe:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		state_est_state.state_est_meas.imu_data[0].ts = tick;
 8002902:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <scheduler+0x3cc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6a      	ldr	r2, [pc, #424]	; (8002ab0 <scheduler+0x420>)
 8002908:	67d3      	str	r3, [r2, #124]	; 0x7c

		state_est_state.state_est_meas.baro_data[1].pressure = p2;
 800290a:	4b6b      	ldr	r3, [pc, #428]	; (8002ab8 <scheduler+0x428>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a68      	ldr	r2, [pc, #416]	; (8002ab0 <scheduler+0x420>)
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
		state_est_state.state_est_meas.baro_data[1].temperature = t_p2;
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <scheduler+0x42c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a66      	ldr	r2, [pc, #408]	; (8002ab0 <scheduler+0x420>)
 8002918:	65d3      	str	r3, [r2, #92]	; 0x5c
		state_est_state.state_est_meas.baro_data[1].ts = tick;
 800291a:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <scheduler+0x3cc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <scheduler+0x420>)
 8002920:	6613      	str	r3, [r2, #96]	; 0x60

		state_est_state.state_est_meas.imu_data[1].acc_x = -accel2_val[2];
 8002922:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <scheduler+0x3d8>)
 8002924:	edd3 7a02 	vldr	s15, [r3, #8]
 8002928:	eef1 7a67 	vneg.f32	s15, s15
 800292c:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <scheduler+0x420>)
 800292e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		state_est_state.state_est_meas.imu_data[1].ts = tick;
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <scheduler+0x3cc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <scheduler+0x420>)
 8002938:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		state_est_step(tick, &state_est_state, true);
 800293c:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <scheduler+0x3cc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	495b      	ldr	r1, [pc, #364]	; (8002ab0 <scheduler+0x420>)
 8002944:	4618      	mov	r0, r3
 8002946:	f004 fa69 	bl	8006e1c <state_est_step>


		// timer start
		if ((state_est_state.flight_phase_detection.flight_phase == THRUSTING) || (launch_detect(accel1_val, accel2_val) == 1) ){
 800294a:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <scheduler+0x420>)
 800294c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002950:	2b03      	cmp	r3, #3
 8002952:	d006      	beq.n	8002962 <scheduler+0x2d2>
 8002954:	4944      	ldr	r1, [pc, #272]	; (8002a68 <scheduler+0x3d8>)
 8002956:	4842      	ldr	r0, [pc, #264]	; (8002a60 <scheduler+0x3d0>)
 8002958:	f7ff fc5c 	bl	8002214 <launch_detect>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10b      	bne.n	800297a <scheduler+0x2ea>
			// these functions will be called in each run, but timers are only started if they are inactive,
			// once they are active, the function call is ignored
			start_timer(&mach_timer, &tick);
 8002962:	493e      	ldr	r1, [pc, #248]	; (8002a5c <scheduler+0x3cc>)
 8002964:	4856      	ldr	r0, [pc, #344]	; (8002ac0 <scheduler+0x430>)
 8002966:	f7ff f9c5 	bl	8001cf4 <start_timer>
			start_timer(&fail_safe_timer, &tick);
 800296a:	493c      	ldr	r1, [pc, #240]	; (8002a5c <scheduler+0x3cc>)
 800296c:	4855      	ldr	r0, [pc, #340]	; (8002ac4 <scheduler+0x434>)
 800296e:	f7ff f9c1 	bl	8001cf4 <start_timer>
			start_timer(&fail_safe_timer_main, &tick);
 8002972:	493a      	ldr	r1, [pc, #232]	; (8002a5c <scheduler+0x3cc>)
 8002974:	4854      	ldr	r0, [pc, #336]	; (8002ac8 <scheduler+0x438>)
 8002976:	f7ff f9bd 	bl	8001cf4 <start_timer>
		}

		if ((tick > t0 + 30000) && (CHECK_FLAG == 0)){
 800297a:	4b54      	ldr	r3, [pc, #336]	; (8002acc <scheduler+0x43c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002982:	3330      	adds	r3, #48	; 0x30
 8002984:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <scheduler+0x3cc>)
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4293      	cmp	r3, r2
 800298a:	f080 80b0 	bcs.w	8002aee <scheduler+0x45e>
 800298e:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <scheduler+0x440>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 80ab 	bne.w	8002aee <scheduler+0x45e>

			// Perform sanity check of state estimation 30 seconds after bootup!
			// this is in steady state on the launchpad
			// TODO BUZZER SOUND

			uint8_t passed = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			float check_a = -accel1_val[2];
 800299e:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <scheduler+0x3d0>)
 80029a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029a4:	eef1 7a67 	vneg.f32	s15, s15
 80029a8:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
			float check_h = (float)state_est_state.state_est_data.position_world[2] / 1000.0;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <scheduler+0x420>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	ee07 3a90 	vmov	s15, r3
 80029b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b8:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002ad4 <scheduler+0x444>
 80029bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c0:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
			float check_v = (float)state_est_state.state_est_data.velocity_rocket[0] / 1000.0;
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <scheduler+0x420>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d0:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002ad4 <scheduler+0x444>
 80029d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d8:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 80029dc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80029e0:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80029e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fd69 	bl	80034c0 <state_est_sanity_check>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <scheduler+0x36c>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
 80029f4:	4838      	ldr	r0, [pc, #224]	; (8002ad8 <scheduler+0x448>)
 80029f6:	f00e fccb 	bl	8011390 <puts>
 80029fa:	e004      	b.n	8002a06 <scheduler+0x376>
			} else {
				passed ++;
 80029fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a00:	3301      	adds	r3, #1
 8002a02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			}
			check_a = -accel2_val[2];
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <scheduler+0x3d8>)
 8002a08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a0c:	eef1 7a67 	vneg.f32	s15, s15
 8002a10:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 8002a14:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002a18:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002a1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fd4d 	bl	80034c0 <state_est_sanity_check>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <scheduler+0x3a4>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
 8002a2c:	482a      	ldr	r0, [pc, #168]	; (8002ad8 <scheduler+0x448>)
 8002a2e:	f00e fcaf 	bl	8011390 <puts>
 8002a32:	e004      	b.n	8002a3e <scheduler+0x3ae>
			} else {
				passed ++;
 8002a34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			}
			CHECK_FLAG = 1;
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <scheduler+0x440>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
			if (passed != 2){
 8002a44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d049      	beq.n	8002ae0 <scheduler+0x450>
				// sound error
				if (IGNORE_ERRORS == 0){
					printf("state est checkup failed!\n");
 8002a4c:	4823      	ldr	r0, [pc, #140]	; (8002adc <scheduler+0x44c>)
 8002a4e:	f00e fc9f 	bl	8011390 <puts>
					while (1){
						play_FAIL_sound();
 8002a52:	f7ff f8b5 	bl	8001bc0 <play_FAIL_sound>
 8002a56:	e7fc      	b.n	8002a52 <scheduler+0x3c2>
 8002a58:	20000344 	.word	0x20000344
 8002a5c:	20012ffc 	.word	0x20012ffc
 8002a60:	20013044 	.word	0x20013044
 8002a64:	20000104 	.word	0x20000104
 8002a68:	2001300c 	.word	0x2001300c
 8002a6c:	20000114 	.word	0x20000114
 8002a70:	20000354 	.word	0x20000354
 8002a74:	2000bb48 	.word	0x2000bb48
 8002a78:	20000134 	.word	0x20000134
 8002a7c:	2000bb60 	.word	0x2000bb60
 8002a80:	20000020 	.word	0x20000020
 8002a84:	20013060 	.word	0x20013060
 8002a88:	2000bb5c 	.word	0x2000bb5c
 8002a8c:	2000f3ac 	.word	0x2000f3ac
 8002a90:	20013000 	.word	0x20013000
 8002a94:	2000f3b0 	.word	0x2000f3b0
 8002a98:	20013008 	.word	0x20013008
 8002a9c:	2001302c 	.word	0x2001302c
 8002aa0:	2000f3b8 	.word	0x2000f3b8
 8002aa4:	20004ab4 	.word	0x20004ab4
 8002aa8:	20000030 	.word	0x20000030
 8002aac:	20000374 	.word	0x20000374
 8002ab0:	20000394 	.word	0x20000394
 8002ab4:	2000037c 	.word	0x2000037c
 8002ab8:	20000378 	.word	0x20000378
 8002abc:	20000380 	.word	0x20000380
 8002ac0:	20000080 	.word	0x20000080
 8002ac4:	2000008c 	.word	0x2000008c
 8002ac8:	20000098 	.word	0x20000098
 8002acc:	20013028 	.word	0x20013028
 8002ad0:	20000810 	.word	0x20000810
 8002ad4:	447a0000 	.word	0x447a0000
 8002ad8:	080154d8 	.word	0x080154d8
 8002adc:	08015504 	.word	0x08015504
					}
				}
			}
			printf("state est ok\n");
 8002ae0:	4853      	ldr	r0, [pc, #332]	; (8002c30 <scheduler+0x5a0>)
 8002ae2:	f00e fc55 	bl	8011390 <puts>
			play_OK_sound();
 8002ae6:	f7ff f847 	bl	8001b78 <play_OK_sound>
			play_OK_sound();
 8002aea:	f7ff f845 	bl	8001b78 <play_OK_sound>

	}


	// if mach timer has passed, software arm the system
	if (check_timer(&mach_timer, &tick) == 1) armed = 1;
 8002aee:	4951      	ldr	r1, [pc, #324]	; (8002c34 <scheduler+0x5a4>)
 8002af0:	4851      	ldr	r0, [pc, #324]	; (8002c38 <scheduler+0x5a8>)
 8002af2:	f7ff f918 	bl	8001d26 <check_timer>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <scheduler+0x472>
 8002afc:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <scheduler+0x5ac>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer, &tick) == 1) {
 8002b02:	494c      	ldr	r1, [pc, #304]	; (8002c34 <scheduler+0x5a4>)
 8002b04:	484e      	ldr	r0, [pc, #312]	; (8002c40 <scheduler+0x5b0>)
 8002b06:	f7ff f90e 	bl	8001d26 <check_timer>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d117      	bne.n	8002b40 <scheduler+0x4b0>
		fire_HAWKs(&armed);
 8002b10:	484a      	ldr	r0, [pc, #296]	; (8002c3c <scheduler+0x5ac>)
 8002b12:	f7fe fa45 	bl	8000fa0 <fire_HAWKs>
		if (state_est_state.flight_phase_detection.flight_phase < DROGUE_DESCENT){
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <scheduler+0x5b4>)
 8002b18:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b1c:	2b07      	cmp	r3, #7
 8002b1e:	d80b      	bhi.n	8002b38 <scheduler+0x4a8>
			// TODO: ask maxi if is okay to override the flight phase
			// if the main fail_safe_timer for some reason ends before we're in DESCENT mode
			printf("TIMER FS OVERWRITING WITH DROGUE\n");
 8002b20:	4849      	ldr	r0, [pc, #292]	; (8002c48 <scheduler+0x5b8>)
 8002b22:	f00e fc35 	bl	8011390 <puts>
			// if fail_safe timer has initiated drogue, we need to adjust the second fail safe timer
			// since we spent some part of the descent in ballistic flight, thus falling faster than
			// with drogue exactly at apogee
			fail_safe_timer_main.end = HAL_GetTick() + FAIL_SAFE_MAIN_DELTA;
 8002b26:	f004 ff31 	bl	800798c <HAL_GetTick>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002b30:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002b34:	4a45      	ldr	r2, [pc, #276]	; (8002c4c <scheduler+0x5bc>)
 8002b36:	6053      	str	r3, [r2, #4]
		}
		state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
 8002b38:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <scheduler+0x5b4>)
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	}

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer_main, &tick) == 1) {
 8002b40:	493c      	ldr	r1, [pc, #240]	; (8002c34 <scheduler+0x5a4>)
 8002b42:	4842      	ldr	r0, [pc, #264]	; (8002c4c <scheduler+0x5bc>)
 8002b44:	f7ff f8ef 	bl	8001d26 <check_timer>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <scheduler+0x4ca>
		fire_HAWKs(&armed);
 8002b4e:	483b      	ldr	r0, [pc, #236]	; (8002c3c <scheduler+0x5ac>)
 8002b50:	f7fe fa26 	bl	8000fa0 <fire_HAWKs>
		fire_TDs(&armed);
 8002b54:	4839      	ldr	r0, [pc, #228]	; (8002c3c <scheduler+0x5ac>)
 8002b56:	f7fe fa53 	bl	8001000 <fire_TDs>
	}



	// act according to flight phase
	switch(state_est_state.flight_phase_detection.flight_phase){
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <scheduler+0x5b4>)
 8002b5c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b60:	3b01      	subs	r3, #1
 8002b62:	2b0a      	cmp	r3, #10
 8002b64:	d85a      	bhi.n	8002c1c <scheduler+0x58c>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <scheduler+0x4dc>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002c27 	.word	0x08002c27
 8002b70:	08002c27 	.word	0x08002c27
 8002b74:	08002c27 	.word	0x08002c27
 8002b78:	08002c27 	.word	0x08002c27
 8002b7c:	08002c27 	.word	0x08002c27
 8002b80:	08002c27 	.word	0x08002c27
 8002b84:	08002c27 	.word	0x08002c27
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002ba7 	.word	0x08002ba7
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002bd3 	.word	0x08002bd3
			break;
		case APOGEE_APPROACH:
			break;
		case DROGUE_DESCENT:
			// apogee
			fire_HAWKs(&armed);
 8002b98:	4828      	ldr	r0, [pc, #160]	; (8002c3c <scheduler+0x5ac>)
 8002b9a:	f7fe fa01 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <scheduler+0x5c0>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
			break;
 8002ba4:	e063      	b.n	8002c6e <scheduler+0x5de>
		case BALLISTIC_DESCENT:
			// oh-oh...
			fire_HAWKs(&armed);
 8002ba6:	4825      	ldr	r0, [pc, #148]	; (8002c3c <scheduler+0x5ac>)
 8002ba8:	f7fe f9fa 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <scheduler+0x5c0>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
			//state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
			break;
 8002bb2:	e05c      	b.n	8002c6e <scheduler+0x5de>
		case MAIN_DESCENT:
			// second event
			if (TD_fired == 0){
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <scheduler+0x5c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d136      	bne.n	8002c2a <scheduler+0x59a>
				fire_TDs(&armed);
 8002bbc:	481f      	ldr	r0, [pc, #124]	; (8002c3c <scheduler+0x5ac>)
 8002bbe:	f7fe fa1f 	bl	8001000 <fire_TDs>
				TD_fired = tick;
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <scheduler+0x5a4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <scheduler+0x5c4>)
 8002bc8:	6013      	str	r3, [r2, #0]
				event = TENDER;
 8002bca:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <scheduler+0x5c0>)
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002bd0:	e02b      	b.n	8002c2a <scheduler+0x59a>
		case TOUCHDOWN:
			if ((fail_safe_timer.active == 0) && (fail_safe_timer_main.active == 0)){
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <scheduler+0x5b0>)
 8002bd4:	7a1b      	ldrb	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d148      	bne.n	8002c6c <scheduler+0x5dc>
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <scheduler+0x5bc>)
 8002bdc:	7a1b      	ldrb	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d144      	bne.n	8002c6c <scheduler+0x5dc>
				fire_HAWKs(&armed);
 8002be2:	4816      	ldr	r0, [pc, #88]	; (8002c3c <scheduler+0x5ac>)
 8002be4:	f7fe f9dc 	bl	8000fa0 <fire_HAWKs>
				fire_TDs(&armed);
 8002be8:	4814      	ldr	r0, [pc, #80]	; (8002c3c <scheduler+0x5ac>)
 8002bea:	f7fe fa09 	bl	8001000 <fire_TDs>
				play(440,100);
 8002bee:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002c58 <scheduler+0x5c8>
 8002bf2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002c5c <scheduler+0x5cc>
 8002bf6:	f7fe ff7f 	bl	8001af8 <play>
				play(659.25,100);
 8002bfa:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002c58 <scheduler+0x5c8>
 8002bfe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002c60 <scheduler+0x5d0>
 8002c02:	f7fe ff79 	bl	8001af8 <play>
				play(880,200);
 8002c06:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002c64 <scheduler+0x5d4>
 8002c0a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002c68 <scheduler+0x5d8>
 8002c0e:	f7fe ff73 	bl	8001af8 <play>
				HAL_Delay(600);
 8002c12:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002c16:	f004 fec5 	bl	80079a4 <HAL_Delay>
			}
			break;
 8002c1a:	e027      	b.n	8002c6c <scheduler+0x5dc>
		default:
			state_est_state.flight_phase_detection.flight_phase = TOUCHDOWN;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <scheduler+0x5b4>)
 8002c1e:	220b      	movs	r2, #11
 8002c20:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			break;
 8002c24:	e023      	b.n	8002c6e <scheduler+0x5de>
			break;
 8002c26:	bf00      	nop
 8002c28:	e021      	b.n	8002c6e <scheduler+0x5de>
			break;
 8002c2a:	bf00      	nop
 8002c2c:	e01f      	b.n	8002c6e <scheduler+0x5de>
 8002c2e:	bf00      	nop
 8002c30:	08015520 	.word	0x08015520
 8002c34:	20012ffc 	.word	0x20012ffc
 8002c38:	20000080 	.word	0x20000080
 8002c3c:	20000389 	.word	0x20000389
 8002c40:	2000008c 	.word	0x2000008c
 8002c44:	20000394 	.word	0x20000394
 8002c48:	08015530 	.word	0x08015530
 8002c4c:	20000098 	.word	0x20000098
 8002c50:	2000038a 	.word	0x2000038a
 8002c54:	20000814 	.word	0x20000814
 8002c58:	42c80000 	.word	0x42c80000
 8002c5c:	43dc0000 	.word	0x43dc0000
 8002c60:	4424d000 	.word	0x4424d000
 8002c64:	43480000 	.word	0x43480000
 8002c68:	445c0000 	.word	0x445c0000
			break;
 8002c6c:	bf00      	nop
	}


	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 8002c6e:	489d      	ldr	r0, [pc, #628]	; (8002ee4 <scheduler+0x854>)
 8002c70:	f7ff fac1 	bl	80021f6 <getNextExecution>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b9c      	ldr	r3, [pc, #624]	; (8002ee8 <scheduler+0x858>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	f200 81f7 	bhi.w	800306e <scheduler+0x9de>
		LOG_TASK.last_call = tick;
 8002c80:	4b99      	ldr	r3, [pc, #612]	; (8002ee8 <scheduler+0x858>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a97      	ldr	r2, [pc, #604]	; (8002ee4 <scheduler+0x854>)
 8002c86:	6013      	str	r3, [r2, #0]
		flight_phase = state_est_state.flight_phase_detection.flight_phase;
 8002c88:	4b98      	ldr	r3, [pc, #608]	; (8002eec <scheduler+0x85c>)
 8002c8a:	f893 23f4 	ldrb.w	r2, [r3, #1012]	; 0x3f4
 8002c8e:	4b98      	ldr	r3, [pc, #608]	; (8002ef0 <scheduler+0x860>)
 8002c90:	701a      	strb	r2, [r3, #0]
		alt = (float)state_est_state.state_est_data.position_world[2] / 1000.0;
 8002c92:	4b96      	ldr	r3, [pc, #600]	; (8002eec <scheduler+0x85c>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c9e:	eddf 6a95 	vldr	s13, [pc, #596]	; 8002ef4 <scheduler+0x864>
 8002ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca6:	4b94      	ldr	r3, [pc, #592]	; (8002ef8 <scheduler+0x868>)
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
		// just for debugging
		//t_cpu = state_est_state.kf_state.y[0];
		velocity = (float)state_est_state.state_est_data.velocity_rocket[0] / 1000.0;
 8002cac:	4b8f      	ldr	r3, [pc, #572]	; (8002eec <scheduler+0x85c>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb8:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8002ef4 <scheduler+0x864>
 8002cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc0:	4b8e      	ldr	r3, [pc, #568]	; (8002efc <scheduler+0x86c>)
 8002cc2:	edc3 7a00 	vstr	s15, [r3]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <scheduler+0x858>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cce:	4b8c      	ldr	r3, [pc, #560]	; (8002f00 <scheduler+0x870>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002cd6:	4b8b      	ldr	r3, [pc, #556]	; (8002f04 <scheduler+0x874>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002cde:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <scheduler+0x860>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002ce6:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <scheduler+0x878>)
 8002ce8:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002cea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002cee:	4b87      	ldr	r3, [pc, #540]	; (8002f0c <scheduler+0x87c>)
 8002cf0:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002cf6:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <scheduler+0x880>)
 8002cf8:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002cfe:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <scheduler+0x868>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fc20 	bl	8000548 <__aeabi_f2d>
 8002d08:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 8002d0c:	4b7b      	ldr	r3, [pc, #492]	; (8002efc <scheduler+0x86c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc19 	bl	8000548 <__aeabi_f2d>
 8002d16:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002d1a:	4b7e      	ldr	r3, [pc, #504]	; (8002f14 <scheduler+0x884>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc12 	bl	8000548 <__aeabi_f2d>
 8002d24:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002d28:	4b7a      	ldr	r3, [pc, #488]	; (8002f14 <scheduler+0x884>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fc0b 	bl	8000548 <__aeabi_f2d>
 8002d32:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 8002d36:	4b78      	ldr	r3, [pc, #480]	; (8002f18 <scheduler+0x888>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fc04 	bl	8000548 <__aeabi_f2d>
 8002d40:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8002d44:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <scheduler+0x88c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fbfd 	bl	8000548 <__aeabi_f2d>
 8002d4e:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <scheduler+0x890>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fbf6 	bl	8000548 <__aeabi_f2d>
 8002d5c:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <scheduler+0x894>)
 8002d62:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fbef 	bl	8000548 <__aeabi_f2d>
 8002d6a:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002d6e:	4b6e      	ldr	r3, [pc, #440]	; (8002f28 <scheduler+0x898>)
 8002d70:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fbe8 	bl	8000548 <__aeabi_f2d>
 8002d78:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8002d7c:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <scheduler+0x89c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fbe1 	bl	8000548 <__aeabi_f2d>
 8002d86:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 8002d8a:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <scheduler+0x8a0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fbda 	bl	8000548 <__aeabi_f2d>
 8002d94:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002d98:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <scheduler+0x894>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fbd3 	bl	8000548 <__aeabi_f2d>
 8002da2:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <scheduler+0x894>)
 8002da8:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fbcc 	bl	8000548 <__aeabi_f2d>
 8002db0:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002db4:	4b5b      	ldr	r3, [pc, #364]	; (8002f24 <scheduler+0x894>)
 8002db6:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fbc5 	bl	8000548 <__aeabi_f2d>
 8002dbe:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002dc2:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <scheduler+0x894>)
 8002dc4:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fbbe 	bl	8000548 <__aeabi_f2d>
 8002dcc:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002dd0:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <scheduler+0x894>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fbb7 	bl	8000548 <__aeabi_f2d>
 8002dda:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002dde:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <scheduler+0x894>)
 8002de0:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbb0 	bl	8000548 <__aeabi_f2d>
 8002de8:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002dec:	4b4e      	ldr	r3, [pc, #312]	; (8002f28 <scheduler+0x898>)
 8002dee:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fba9 	bl	8000548 <__aeabi_f2d>
 8002df6:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002dfa:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <scheduler+0x898>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fba2 	bl	8000548 <__aeabi_f2d>
 8002e04:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e08:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <scheduler+0x898>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fb9b 	bl	8000548 <__aeabi_f2d>
 8002e12:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e16:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <scheduler+0x898>)
 8002e18:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fb94 	bl	8000548 <__aeabi_f2d>
 8002e20:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <scheduler+0x898>)
 8002e26:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fb8d 	bl	8000548 <__aeabi_f2d>
 8002e2e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <scheduler+0x898>)
 8002e34:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb86 	bl	8000548 <__aeabi_f2d>
 8002e3c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e40:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <scheduler+0x8a4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb7f 	bl	8000548 <__aeabi_f2d>
 8002e4a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <scheduler+0x8a4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb78 	bl	8000548 <__aeabi_f2d>
 8002e58:	e9c7 0108 	strd	r0, r1, [r7, #32]
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e5c:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <scheduler+0x8a4>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fb71 	bl	8000548 <__aeabi_f2d>
 8002e66:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <scheduler+0x8a8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb6a 	bl	8000548 <__aeabi_f2d>
 8002e74:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002e78:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <scheduler+0x8ac>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb63 	bl	8000548 <__aeabi_f2d>
 8002e82:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <scheduler+0x8b0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb5c 	bl	8000548 <__aeabi_f2d>
 8002e90:	e9c7 0100 	strd	r0, r1, [r7]
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <scheduler+0x8b4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb55 	bl	8000548 <__aeabi_f2d>
 8002e9e:	4682      	mov	sl, r0
 8002ea0:	468b      	mov	fp, r1
 8002ea2:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <scheduler+0x8b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb4e 	bl	8000548 <__aeabi_f2d>
 8002eac:	4680      	mov	r8, r0
 8002eae:	4689      	mov	r9, r1
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <scheduler+0x8bc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb47 	bl	8000548 <__aeabi_f2d>
 8002eba:	4605      	mov	r5, r0
 8002ebc:	460e      	mov	r6, r1
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <scheduler+0x8c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fb40 	bl	8000548 <__aeabi_f2d>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	e9cd 3446 	strd	r3, r4, [sp, #280]	; 0x118
 8002ed0:	e9cd 5644 	strd	r5, r6, [sp, #272]	; 0x110
 8002ed4:	e9cd 8942 	strd	r8, r9, [sp, #264]	; 0x108
 8002ed8:	e9cd ab40 	strd	sl, fp, [sp, #256]	; 0x100
 8002edc:	ed97 7b00 	vldr	d7, [r7]
 8002ee0:	e038      	b.n	8002f54 <scheduler+0x8c4>
 8002ee2:	bf00      	nop
 8002ee4:	20000364 	.word	0x20000364
 8002ee8:	20012ffc 	.word	0x20012ffc
 8002eec:	20000394 	.word	0x20000394
 8002ef0:	2000038b 	.word	0x2000038b
 8002ef4:	447a0000 	.word	0x447a0000
 8002ef8:	2000038c 	.word	0x2000038c
 8002efc:	20000390 	.word	0x20000390
 8002f00:	20000389 	.word	0x20000389
 8002f04:	2000038a 	.word	0x2000038a
 8002f08:	20000080 	.word	0x20000080
 8002f0c:	2000008c 	.word	0x2000008c
 8002f10:	20000098 	.word	0x20000098
 8002f14:	2001303c 	.word	0x2001303c
 8002f18:	20004ab4 	.word	0x20004ab4
 8002f1c:	2000037c 	.word	0x2000037c
 8002f20:	20000380 	.word	0x20000380
 8002f24:	20013044 	.word	0x20013044
 8002f28:	2001300c 	.word	0x2001300c
 8002f2c:	20000374 	.word	0x20000374
 8002f30:	20000378 	.word	0x20000378
 8002f34:	2000bb60 	.word	0x2000bb60
 8002f38:	2000f3b0 	.word	0x2000f3b0
 8002f3c:	20013008 	.word	0x20013008
 8002f40:	2001302c 	.word	0x2001302c
 8002f44:	2000f3b8 	.word	0x2000f3b8
 8002f48:	20013000 	.word	0x20013000
 8002f4c:	2000bb5c 	.word	0x2000bb5c
 8002f50:	2000f3ac 	.word	0x2000f3ac
 8002f54:	ed8d 7b3e 	vstr	d7, [sp, #248]	; 0xf8
 8002f58:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f5c:	ed8d 7b3c 	vstr	d7, [sp, #240]	; 0xf0
 8002f60:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f64:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 8002f68:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f6c:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8002f70:	ed97 7b08 	vldr	d7, [r7, #32]
 8002f74:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 8002f78:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002f7c:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8002f80:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002f84:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 8002f88:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002f8c:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8002f90:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002f94:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 8002f98:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002f9c:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 8002fa0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002fa4:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8002fa8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002fac:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8002fb0:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002fb4:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8002fb8:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002fbc:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8002fc0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002fc4:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8002fc8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002fcc:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002fd0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8002fd4:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8002fd8:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8002fdc:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002fe0:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8002fe4:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002fe8:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8002fec:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002ff0:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8002ff4:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002ff8:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8002ffc:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003000:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8003004:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003008:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 800300c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003010:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8003014:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003018:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 800301c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003020:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8003024:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003028:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 800302c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003030:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003034:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003038:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800303c:	9104      	str	r1, [sp, #16]
 800303e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003042:	9103      	str	r1, [sp, #12]
 8003044:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8003048:	9102      	str	r1, [sp, #8]
 800304a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800304e:	9101      	str	r1, [sp, #4]
 8003050:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8003054:	9100      	str	r1, [sp, #0]
 8003056:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800305a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800305e:	4943      	ldr	r1, [pc, #268]	; (800316c <scheduler+0xadc>)
 8003060:	4843      	ldr	r0, [pc, #268]	; (8003170 <scheduler+0xae0>)
 8003062:	f00e f99d 	bl	80113a0 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 8003066:	4942      	ldr	r1, [pc, #264]	; (8003170 <scheduler+0xae0>)
 8003068:	4842      	ldr	r0, [pc, #264]	; (8003174 <scheduler+0xae4>)
 800306a:	f7fe faef 	bl	800164c <write_to_SD>
	}

	if (DEBUG_PRINT == 1) printf("tick: %ld \n",tick);
 800306e:	4b42      	ldr	r3, [pc, #264]	; (8003178 <scheduler+0xae8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	4841      	ldr	r0, [pc, #260]	; (800317c <scheduler+0xaec>)
 8003076:	f00e f917 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("flight phase : %d \n",flight_phase);
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <scheduler+0xaf0>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
 8003080:	4840      	ldr	r0, [pc, #256]	; (8003184 <scheduler+0xaf4>)
 8003082:	f00e f911 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("armed : %d \n",armed);
 8003086:	4b40      	ldr	r3, [pc, #256]	; (8003188 <scheduler+0xaf8>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	483f      	ldr	r0, [pc, #252]	; (800318c <scheduler+0xafc>)
 800308e:	f00e f90b 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("event : %d \n",event);
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <scheduler+0xb00>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	483e      	ldr	r0, [pc, #248]	; (8003194 <scheduler+0xb04>)
 800309a:	f00e f905 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("alt: %ld \n",state_est_state.state_est_data.position_world[2]/1000);
 800309e:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <scheduler+0xb08>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	4a3e      	ldr	r2, [pc, #248]	; (800319c <scheduler+0xb0c>)
 80030a4:	fb82 1203 	smull	r1, r2, r2, r3
 80030a8:	1192      	asrs	r2, r2, #6
 80030aa:	17db      	asrs	r3, r3, #31
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	4619      	mov	r1, r3
 80030b0:	483b      	ldr	r0, [pc, #236]	; (80031a0 <scheduler+0xb10>)
 80030b2:	f00e f8f9 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("vel: %ld \n",state_est_state.state_est_data.velocity_rocket[0]/1000);
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <scheduler+0xb08>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	4a38      	ldr	r2, [pc, #224]	; (800319c <scheduler+0xb0c>)
 80030bc:	fb82 1203 	smull	r1, r2, r2, r3
 80030c0:	1192      	asrs	r2, r2, #6
 80030c2:	17db      	asrs	r3, r3, #31
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	4836      	ldr	r0, [pc, #216]	; (80031a4 <scheduler+0xb14>)
 80030ca:	f00e f8ed 	bl	80112a8 <iprintf>

	if (DEBUG_PRINT == 1) printf("ax1 = %4.2f \n",state_est_state.state_est_meas.imu_data[0].acc_x);
 80030ce:	4b32      	ldr	r3, [pc, #200]	; (8003198 <scheduler+0xb08>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa38 	bl	8000548 <__aeabi_f2d>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	461a      	mov	r2, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	4831      	ldr	r0, [pc, #196]	; (80031a8 <scheduler+0xb18>)
 80030e2:	f00e f8e1 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("ax2 = %4.2f \n",state_est_state.state_est_meas.imu_data[1].acc_x);
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <scheduler+0xb08>)
 80030e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa2b 	bl	8000548 <__aeabi_f2d>
 80030f2:	4603      	mov	r3, r0
 80030f4:	460c      	mov	r4, r1
 80030f6:	461a      	mov	r2, r3
 80030f8:	4623      	mov	r3, r4
 80030fa:	482c      	ldr	r0, [pc, #176]	; (80031ac <scheduler+0xb1c>)
 80030fc:	f00e f8d4 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("p1 = %4.2f \n",state_est_state.state_est_meas.baro_data[0].pressure);
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <scheduler+0xb08>)
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fa1f 	bl	8000548 <__aeabi_f2d>
 800310a:	4603      	mov	r3, r0
 800310c:	460c      	mov	r4, r1
 800310e:	461a      	mov	r2, r3
 8003110:	4623      	mov	r3, r4
 8003112:	4827      	ldr	r0, [pc, #156]	; (80031b0 <scheduler+0xb20>)
 8003114:	f00e f8c8 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("p2 = %4.2f \n",state_est_state.state_est_meas.baro_data[1].pressure);
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <scheduler+0xb08>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd fa13 	bl	8000548 <__aeabi_f2d>
 8003122:	4603      	mov	r3, r0
 8003124:	460c      	mov	r4, r1
 8003126:	461a      	mov	r2, r3
 8003128:	4623      	mov	r3, r4
 800312a:	4822      	ldr	r0, [pc, #136]	; (80031b4 <scheduler+0xb24>)
 800312c:	f00e f8bc 	bl	80112a8 <iprintf>
	//if (DEBUG_PRINT == 1) printf("p2 = %4.2f bar and t2 = %4.2f C \n",p2,t_p2);
	//if (DEBUG_PRINT == 1) printf("T = %4.2f C and H = %4.2f perc \n",t_val[0],t_val[1]);
	//if (DEBUG_PRINT == 1) printf("IMU1 T: %4.2f C \n", accel1_val[0]);
	//if (DEBUG_PRINT == 1) printf("IMU1 ax: %4.2f m/s2 \n", accel1_val[1]);
	if (DEBUG_PRINT == 1) printf("IMU1 ay: %4.2f m/s2 \n", accel1_val[2]);
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <scheduler+0xb28>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fa07 	bl	8000548 <__aeabi_f2d>
 800313a:	4603      	mov	r3, r0
 800313c:	460c      	mov	r4, r1
 800313e:	461a      	mov	r2, r3
 8003140:	4623      	mov	r3, r4
 8003142:	481e      	ldr	r0, [pc, #120]	; (80031bc <scheduler+0xb2c>)
 8003144:	f00e f8b0 	bl	80112a8 <iprintf>
	//if (DEBUG_PRINT == 1) printf("IMU1 az: %4.2f m/s2 \n", accel1_val[3]);
	//if (DEBUG_PRINT == 1) printf("IMU2 T: %4.2f C \n", accel2_val[0]);
	//if (DEBUG_PRINT == 1) printf("IMU2 ax: %4.2f m/s2 \n", accel2_val[1]);
	if (DEBUG_PRINT == 1) printf("IMU2 ay: %4.2f m/s2 \n", accel2_val[2]);
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <scheduler+0xb30>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f9fb 	bl	8000548 <__aeabi_f2d>
 8003152:	4603      	mov	r3, r0
 8003154:	460c      	mov	r4, r1
 8003156:	461a      	mov	r2, r3
 8003158:	4623      	mov	r3, r4
 800315a:	481a      	ldr	r0, [pc, #104]	; (80031c4 <scheduler+0xb34>)
 800315c:	f00e f8a4 	bl	80112a8 <iprintf>
	//if (DEBUG_PRINT == 1) printf("ACC ax: %4.2f m/s2 \n", accel[0]);
	//if (DEBUG_PRINT == 1) printf("ACC ay: %4.2f m/s2 \n", accel[1]);
	//if (DEBUG_PRINT == 1) printf("ACC az: %4.2f m/s2 \n", accel[2]);


}
 8003160:	bf00      	nop
 8003162:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003166:	46bd      	mov	sp, r7
 8003168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800316c:	08015554 	.word	0x08015554
 8003170:	20012bfc 	.word	0x20012bfc
 8003174:	20014ca0 	.word	0x20014ca0
 8003178:	20012ffc 	.word	0x20012ffc
 800317c:	08015658 	.word	0x08015658
 8003180:	2000038b 	.word	0x2000038b
 8003184:	08015664 	.word	0x08015664
 8003188:	20000389 	.word	0x20000389
 800318c:	08015678 	.word	0x08015678
 8003190:	2000038a 	.word	0x2000038a
 8003194:	08015688 	.word	0x08015688
 8003198:	20000394 	.word	0x20000394
 800319c:	10624dd3 	.word	0x10624dd3
 80031a0:	08015698 	.word	0x08015698
 80031a4:	080156a4 	.word	0x080156a4
 80031a8:	080156b0 	.word	0x080156b0
 80031ac:	080156c0 	.word	0x080156c0
 80031b0:	080156d0 	.word	0x080156d0
 80031b4:	080156e0 	.word	0x080156e0
 80031b8:	20013044 	.word	0x20013044
 80031bc:	080156f0 	.word	0x080156f0
 80031c0:	2001300c 	.word	0x2001300c
 80031c4:	08015708 	.word	0x08015708

080031c8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <MX_SDIO_SD_Init+0x38>)
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <MX_SDIO_SD_Init+0x3c>)
 80031d0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <MX_SDIO_SD_Init+0x38>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <MX_SDIO_SD_Init+0x38>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <MX_SDIO_SD_Init+0x38>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <MX_SDIO_SD_Init+0x38>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <MX_SDIO_SD_Init+0x38>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <MX_SDIO_SD_Init+0x38>)
 80031f2:	2203      	movs	r2, #3
 80031f4:	619a      	str	r2, [r3, #24]

}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20014d6c 	.word	0x20014d6c
 8003204:	40012c00 	.word	0x40012c00

08003208 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a68      	ldr	r2, [pc, #416]	; (80033c8 <HAL_SD_MspInit+0x1c0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	f040 80c9 	bne.w	80033be <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	4b66      	ldr	r3, [pc, #408]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 8003236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800323a:	6453      	str	r3, [r2, #68]	; 0x44
 800323c:	4b63      	ldr	r3, [pc, #396]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b5f      	ldr	r3, [pc, #380]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4a5e      	ldr	r2, [pc, #376]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
 8003258:	4b5c      	ldr	r3, [pc, #368]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4a57      	ldr	r2, [pc, #348]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 800326e:	f043 0308 	orr.w	r3, r3, #8
 8003272:	6313      	str	r3, [r2, #48]	; 0x30
 8003274:	4b55      	ldr	r3, [pc, #340]	; (80033cc <HAL_SD_MspInit+0x1c4>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003280:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003284:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328e:	2303      	movs	r3, #3
 8003290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003292:	230c      	movs	r3, #12
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	484c      	ldr	r0, [pc, #304]	; (80033d0 <HAL_SD_MspInit+0x1c8>)
 800329e:	f005 fcff 	bl	8008ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032a2:	2304      	movs	r3, #4
 80032a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032b2:	230c      	movs	r3, #12
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	4845      	ldr	r0, [pc, #276]	; (80033d4 <HAL_SD_MspInit+0x1cc>)
 80032be:	f005 fcef 	bl	8008ca0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80032c2:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032c4:	4a45      	ldr	r2, [pc, #276]	; (80033dc <HAL_SD_MspInit+0x1d4>)
 80032c6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ce:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032d0:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032dc:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032e2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032e4:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ea:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032ec:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032f2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80032f4:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032f6:	2220      	movs	r2, #32
 80032f8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 8003302:	2204      	movs	r2, #4
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 8003308:	2203      	movs	r2, #3
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 800330e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003314:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 8003316:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800331c:	482e      	ldr	r0, [pc, #184]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 800331e:	f005 f8b3 	bl	8008488 <HAL_DMA_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8003328:	f7fe ff5e 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
 8003332:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_SD_MspInit+0x1d0>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 800333a:	4a2a      	ldr	r2, [pc, #168]	; (80033e4 <HAL_SD_MspInit+0x1dc>)
 800333c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003344:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003352:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003358:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 800335c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003360:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003364:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003368:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 800336c:	2220      	movs	r2, #32
 800336e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003372:	2200      	movs	r2, #0
 8003374:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003378:	2204      	movs	r2, #4
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 800337e:	2203      	movs	r2, #3
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003384:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 800338c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003392:	4813      	ldr	r0, [pc, #76]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 8003394:	f005 f878 	bl	8008488 <HAL_DMA_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800339e:	f7fe ff23 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_SD_MspInit+0x1d8>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2100      	movs	r1, #0
 80033b2:	2031      	movs	r0, #49	; 0x31
 80033b4:	f005 f831 	bl	800841a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80033b8:	2031      	movs	r0, #49	; 0x31
 80033ba:	f005 f84a 	bl	8008452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80033be:	bf00      	nop
 80033c0:	3728      	adds	r7, #40	; 0x28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	20014cac 	.word	0x20014cac
 80033dc:	40026458 	.word	0x40026458
 80033e0:	20014d0c 	.word	0x20014d0c
 80033e4:	400264a0 	.word	0x400264a0

080033e8 <p_sanity_check>:

// TODO implement error sounds!!!!

// these sanity checks are performed during steady state on the launch pad.

uint8_t p_sanity_check(float * p){
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	// sanity check of the pressure value on the launchpad
	if ((*p < 110000) && (*p > 70000)) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800342c <p_sanity_check+0x44>
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d50b      	bpl.n	800341c <p_sanity_check+0x34>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003430 <p_sanity_check+0x48>
 800340e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003416:	dd01      	ble.n	800341c <p_sanity_check+0x34>
		return 1;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <p_sanity_check+0x36>
	} else {
		return 0;
 800341c:	2300      	movs	r3, #0
	}
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	47d6d800 	.word	0x47d6d800
 8003430:	4788b800 	.word	0x4788b800

08003434 <t_sanity_check>:

uint8_t t_sanity_check(float * t){
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	// sanity check of the temperature value on the launchpad
	if ((*t < 80) && (*t > 1)) {
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003478 <t_sanity_check+0x44>
 8003446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d50b      	bpl.n	8003468 <t_sanity_check+0x34>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800345a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003462:	dd01      	ble.n	8003468 <t_sanity_check+0x34>
		return 1;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <t_sanity_check+0x36>
	} else {
		return 0;
 8003468:	2300      	movs	r3, #0
	}
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	42a00000 	.word	0x42a00000

0800347c <a_sanity_check>:

uint8_t a_sanity_check(float * a){
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	// sanity check of the acceleration value on the launchpad
	if ((*a < 10) && (*a > 8)) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	d50b      	bpl.n	80034b0 <a_sanity_check+0x34>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80034a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034aa:	dd01      	ble.n	80034b0 <a_sanity_check+0x34>
		return 1;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <a_sanity_check+0x36>
	} else {
		return 0;
 80034b0:	2300      	movs	r3, #0
	}
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <state_est_sanity_check>:

uint8_t state_est_sanity_check(float * h, float * a, float * v){
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
	// sanity check of the altitude, velocity and acceleration value on the launchpad
	if (a_sanity_check(a) == 1){
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f7ff ffd5 	bl	800347c <a_sanity_check>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10d      	bne.n	80034f4 <state_est_sanity_check+0x34>
		if (DEBUG_PRINT == 1) printf("state est accel out of bounds. a = %4.2f \n",*a);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f833 	bl	8000548 <__aeabi_f2d>
 80034e2:	4603      	mov	r3, r0
 80034e4:	460c      	mov	r4, r1
 80034e6:	461a      	mov	r2, r3
 80034e8:	4623      	mov	r3, r4
 80034ea:	4827      	ldr	r0, [pc, #156]	; (8003588 <state_est_sanity_check+0xc8>)
 80034ec:	f00d fedc 	bl	80112a8 <iprintf>
		return 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e044      	b.n	800357e <state_est_sanity_check+0xbe>
	}

	if ((*h > 20) || (*h < -20)) {
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80034fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003506:	dc09      	bgt.n	800351c <state_est_sanity_check+0x5c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8003512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	d50d      	bpl.n	8003538 <state_est_sanity_check+0x78>
		if (DEBUG_PRINT == 1) printf("state est altitude out of bounds. h = %4.2f \n",*h);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f811 	bl	8000548 <__aeabi_f2d>
 8003526:	4603      	mov	r3, r0
 8003528:	460c      	mov	r4, r1
 800352a:	461a      	mov	r2, r3
 800352c:	4623      	mov	r3, r4
 800352e:	4817      	ldr	r0, [pc, #92]	; (800358c <state_est_sanity_check+0xcc>)
 8003530:	f00d feba 	bl	80112a8 <iprintf>
		return 0;
 8003534:	2300      	movs	r3, #0
 8003536:	e022      	b.n	800357e <state_est_sanity_check+0xbe>
	}

	if ((*v > 10) || (*v < -10)) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	dc09      	bgt.n	8003560 <state_est_sanity_check+0xa0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	d50d      	bpl.n	800357c <state_est_sanity_check+0xbc>
		if (DEBUG_PRINT == 1) printf("state est velocity out of bounds. v = %4.2f \n",*v);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc ffef 	bl	8000548 <__aeabi_f2d>
 800356a:	4603      	mov	r3, r0
 800356c:	460c      	mov	r4, r1
 800356e:	461a      	mov	r2, r3
 8003570:	4623      	mov	r3, r4
 8003572:	4807      	ldr	r0, [pc, #28]	; (8003590 <state_est_sanity_check+0xd0>)
 8003574:	f00d fe98 	bl	80112a8 <iprintf>
		return 0;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <state_est_sanity_check+0xbe>
	}

	return 1;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}
 8003586:	bf00      	nop
 8003588:	08015720 	.word	0x08015720
 800358c:	0801574c 	.word	0x0801574c
 8003590:	0801577c 	.word	0x0801577c

08003594 <config_baro>:

uint8_t config_baro(struct sht31_dev * t_dev, struct ms5607_dev * p1_dev, struct ms5607_dev * p2_dev, float * t, float * p){
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b093      	sub	sp, #76	; 0x4c
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]

	float t1_sum = 0;
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	float p1_sum = 0;
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
	float t2_sum = 0;
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
	float p2_sum = 0;
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
	float p1;
	float p2;
	float t1;
	float t2;
	// sample pressure/temperture 100 times
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
 80035be:	e053      	b.n	8003668 <config_baro+0xd4>
	{
		ms5607_prep_pressure(p1_dev, pbuf);
 80035c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c4:	4619      	mov	r1, r3
 80035c6:	68b8      	ldr	r0, [r7, #8]
 80035c8:	f001 fba6 	bl	8004d18 <ms5607_prep_pressure>
		ms5607_prep_pressure(p2_dev, pbuf);
 80035cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 fba0 	bl	8004d18 <ms5607_prep_pressure>
		HAL_Delay(5);
 80035d8:	2005      	movs	r0, #5
 80035da:	f004 f9e3 	bl	80079a4 <HAL_Delay>
		ms5607_read_pressure(p1_dev, pbuf);
 80035de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035e2:	4619      	mov	r1, r3
 80035e4:	68b8      	ldr	r0, [r7, #8]
 80035e6:	f001 fbe0 	bl	8004daa <ms5607_read_pressure>
		ms5607_read_pressure(p2_dev, pbuf);
 80035ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f001 fbda 	bl	8004daa <ms5607_read_pressure>
		ms5607_convert(p1_dev, &p1, &t1);
 80035f6:	f107 0214 	add.w	r2, r7, #20
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	4619      	mov	r1, r3
 8003600:	68b8      	ldr	r0, [r7, #8]
 8003602:	f001 fc1d 	bl	8004e40 <ms5607_convert>
		ms5607_convert(p2_dev, &p2, &t2);
 8003606:	f107 0210 	add.w	r2, r7, #16
 800360a:	f107 0318 	add.w	r3, r7, #24
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 fc15 	bl	8004e40 <ms5607_convert>
		if (i >= 10) {
 8003616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003618:	2b09      	cmp	r3, #9
 800361a:	dd1f      	ble.n	800365c <config_baro+0xc8>
			// ignore the first 10 values to let the barometer "warm" up
			t1_sum += t1;
 800361c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003620:	edd7 7a05 	vldr	s15, [r7, #20]
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			p1_sum += p1;
 800362c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003630:	edd7 7a07 	vldr	s15, [r7, #28]
 8003634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003638:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			t2_sum += t2;
 800363c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003640:	edd7 7a04 	vldr	s15, [r7, #16]
 8003644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003648:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			p2_sum += p2;
 800364c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003650:	edd7 7a06 	vldr	s15, [r7, #24]
 8003654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003658:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL + 5);
 800365c:	200f      	movs	r0, #15
 800365e:	f004 f9a1 	bl	80079a4 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003664:	3301      	adds	r3, #1
 8003666:	647b      	str	r3, [r7, #68]	; 0x44
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	2b6d      	cmp	r3, #109	; 0x6d
 800366c:	dda8      	ble.n	80035c0 <config_baro+0x2c>
	}
	p1_sum /= MAX_SETUP_SAMPLE;
 800366e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003672:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800381c <config_baro+0x288>
 8003676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800367a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	t1_sum /= MAX_SETUP_SAMPLE;
 800367e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003682:	eddf 6a66 	vldr	s13, [pc, #408]	; 800381c <config_baro+0x288>
 8003686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800368a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	p2_sum /= MAX_SETUP_SAMPLE;
 800368e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003692:	eddf 6a62 	vldr	s13, [pc, #392]	; 800381c <config_baro+0x288>
 8003696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800369a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	t2_sum /= MAX_SETUP_SAMPLE;
 800369e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80036a2:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800381c <config_baro+0x288>
 80036a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036aa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	printf("p1: %4.2f \n", p1_sum);
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc ff49 	bl	8000548 <__aeabi_f2d>
 80036b6:	4603      	mov	r3, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	461a      	mov	r2, r3
 80036bc:	4623      	mov	r3, r4
 80036be:	4858      	ldr	r0, [pc, #352]	; (8003820 <config_baro+0x28c>)
 80036c0:	f00d fdf2 	bl	80112a8 <iprintf>
	printf("p2: %4.2f \n", p2_sum);
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc ff3e 	bl	8000548 <__aeabi_f2d>
 80036cc:	4603      	mov	r3, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	461a      	mov	r2, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	4853      	ldr	r0, [pc, #332]	; (8003824 <config_baro+0x290>)
 80036d6:	f00d fde7 	bl	80112a8 <iprintf>
	printf("t1: %4.2f \n", t1_sum);
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fc ff33 	bl	8000548 <__aeabi_f2d>
 80036e2:	4603      	mov	r3, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	461a      	mov	r2, r3
 80036e8:	4623      	mov	r3, r4
 80036ea:	484f      	ldr	r0, [pc, #316]	; (8003828 <config_baro+0x294>)
 80036ec:	f00d fddc 	bl	80112a8 <iprintf>
	printf("t2: %4.2f \n", t2_sum);
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff28 	bl	8000548 <__aeabi_f2d>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	461a      	mov	r2, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	484a      	ldr	r0, [pc, #296]	; (800382c <config_baro+0x298>)
 8003702:	f00d fdd1 	bl	80112a8 <iprintf>

	if (!t_sanity_check(&t1_sum)){
 8003706:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fe92 	bl	8003434 <t_sanity_check>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <config_baro+0x18c>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 1 out of bounds. abort. \n");
 8003716:	4846      	ldr	r0, [pc, #280]	; (8003830 <config_baro+0x29c>)
 8003718:	f00d fe3a 	bl	8011390 <puts>
		return 0;
 800371c:	2300      	movs	r3, #0
 800371e:	e078      	b.n	8003812 <config_baro+0x27e>
	}
	if (!t_sanity_check(&t2_sum)){
 8003720:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fe85 	bl	8003434 <t_sanity_check>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <config_baro+0x1a6>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 2 out of bounds. abort. \n");
 8003730:	4840      	ldr	r0, [pc, #256]	; (8003834 <config_baro+0x2a0>)
 8003732:	f00d fe2d 	bl	8011390 <puts>
		return 0;
 8003736:	2300      	movs	r3, #0
 8003738:	e06b      	b.n	8003812 <config_baro+0x27e>
	}
	if (!p_sanity_check(&p1_sum)){
 800373a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fe52 	bl	80033e8 <p_sanity_check>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <config_baro+0x1c0>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 1 out of bounds. abort. \n");
 800374a:	483b      	ldr	r0, [pc, #236]	; (8003838 <config_baro+0x2a4>)
 800374c:	f00d fe20 	bl	8011390 <puts>
		return 0;
 8003750:	2300      	movs	r3, #0
 8003752:	e05e      	b.n	8003812 <config_baro+0x27e>
	}
	if (!p_sanity_check(&p2_sum)){
 8003754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fe45 	bl	80033e8 <p_sanity_check>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <config_baro+0x1da>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 2 out of bounds. abort. \n");
 8003764:	4835      	ldr	r0, [pc, #212]	; (800383c <config_baro+0x2a8>)
 8003766:	f00d fe13 	bl	8011390 <puts>
		return 0;
 800376a:	2300      	movs	r3, #0
 800376c:	e051      	b.n	8003812 <config_baro+0x27e>
	}

	// set as environement parameters
	*t = (t1_sum + t2_sum) / 2;
 800376e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003772:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800377a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800377e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	edc3 7a00 	vstr	s15, [r3]
	*p = (p1_sum + p2_sum) / 2;
 8003788:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800378c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003794:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800379e:	edc3 7a00 	vstr	s15, [r3]


	// sample SHT temperature 100 times

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	643b      	str	r3, [r7, #64]	; 0x40
 80037a6:	e018      	b.n	80037da <config_baro+0x246>
	{
		sht31_read(t_dev, sht_val, buf);
 80037a8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80037ac:	f107 0320 	add.w	r3, r7, #32
 80037b0:	4619      	mov	r1, r3
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f001 fe00 	bl	80053b8 <sht31_read>
		// ignore the first 10 measurements to let the SHT "warm" up
		if (i >= 10) t1_sum += sht_val[0];
 80037b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ba:	2b09      	cmp	r3, #9
 80037bc:	dd07      	ble.n	80037ce <config_baro+0x23a>
 80037be:	ed97 7a08 	vldr	s14, [r7, #32]
 80037c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80037c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 80037ce:	200a      	movs	r0, #10
 80037d0:	f004 f8e8 	bl	80079a4 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 80037d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d6:	3301      	adds	r3, #1
 80037d8:	643b      	str	r3, [r7, #64]	; 0x40
 80037da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037dc:	2b6d      	cmp	r3, #109	; 0x6d
 80037de:	dde3      	ble.n	80037a8 <config_baro+0x214>
		// if SHT is available, use SHT temperature value for environement
		*t = t1_sum;
	}
	*/

	if (DEBUG_PRINT == 1) printf("Config pressure = %4.2f \n",*p);
 80037e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc feaf 	bl	8000548 <__aeabi_f2d>
 80037ea:	4603      	mov	r3, r0
 80037ec:	460c      	mov	r4, r1
 80037ee:	461a      	mov	r2, r3
 80037f0:	4623      	mov	r3, r4
 80037f2:	4813      	ldr	r0, [pc, #76]	; (8003840 <config_baro+0x2ac>)
 80037f4:	f00d fd58 	bl	80112a8 <iprintf>
	if (DEBUG_PRINT == 1) printf("Config temp = %4.2f \n",*t);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc fea3 	bl	8000548 <__aeabi_f2d>
 8003802:	4603      	mov	r3, r0
 8003804:	460c      	mov	r4, r1
 8003806:	461a      	mov	r2, r3
 8003808:	4623      	mov	r3, r4
 800380a:	480e      	ldr	r0, [pc, #56]	; (8003844 <config_baro+0x2b0>)
 800380c:	f00d fd4c 	bl	80112a8 <iprintf>

	return 1;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	374c      	adds	r7, #76	; 0x4c
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}
 800381a:	bf00      	nop
 800381c:	42c80000 	.word	0x42c80000
 8003820:	080157ac 	.word	0x080157ac
 8003824:	080157b8 	.word	0x080157b8
 8003828:	080157c4 	.word	0x080157c4
 800382c:	080157d0 	.word	0x080157d0
 8003830:	080157dc 	.word	0x080157dc
 8003834:	0801580c 	.word	0x0801580c
 8003838:	0801583c 	.word	0x0801583c
 800383c:	08015868 	.word	0x08015868
 8003840:	08015894 	.word	0x08015894
 8003844:	080158b0 	.word	0x080158b0

08003848 <config_imu>:

uint8_t config_imu(struct icm20601_dev * a1_dev, struct icm20601_dev * a2_dev){
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b09b      	sub	sp, #108	; 0x6c
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	float a2_temp[7];

	float a1_sum[3];
	float a2_sum[3];

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	667b      	str	r3, [r7, #100]	; 0x64
 8003856:	e059      	b.n	800390c <config_imu+0xc4>
	{
		icm20601_read_data(a1_dev, a1_temp);
 8003858:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f001 f8a6 	bl	80049b0 <icm20601_read_data>
		icm20601_read_data(a2_dev, a2_temp);
 8003864:	f107 0320 	add.w	r3, r7, #32
 8003868:	4619      	mov	r1, r3
 800386a:	6838      	ldr	r0, [r7, #0]
 800386c:	f001 f8a0 	bl	80049b0 <icm20601_read_data>

		if (i >= 10) {
 8003870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003872:	2b09      	cmp	r3, #9
 8003874:	dd44      	ble.n	8003900 <config_imu+0xb8>
			// ignore the first 10 measurements to let the accelerometer "warm" up
			for (int j = 1; j < 4; j++){
 8003876:	2301      	movs	r3, #1
 8003878:	663b      	str	r3, [r7, #96]	; 0x60
 800387a:	e03e      	b.n	80038fa <config_imu+0xb2>
				a1_sum[j-1] += fabs(a1_temp[j]);
 800387c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800387e:	3b01      	subs	r3, #1
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003886:	4413      	add	r3, r2
 8003888:	3b54      	subs	r3, #84	; 0x54
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003896:	4413      	add	r3, r2
 8003898:	3b2c      	subs	r3, #44	; 0x2c
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eef0 7ae7 	vabs.f32	s15, s15
 80038a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a4:	3b01      	subs	r3, #1
 80038a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038b0:	4413      	add	r3, r2
 80038b2:	3b54      	subs	r3, #84	; 0x54
 80038b4:	edc3 7a00 	vstr	s15, [r3]
				a2_sum[j-1] += fabs(a2_temp[j]);
 80038b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ba:	3b01      	subs	r3, #1
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038c2:	4413      	add	r3, r2
 80038c4:	3b60      	subs	r3, #96	; 0x60
 80038c6:	ed93 7a00 	vldr	s14, [r3]
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038d2:	4413      	add	r3, r2
 80038d4:	3b48      	subs	r3, #72	; 0x48
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	eef0 7ae7 	vabs.f32	s15, s15
 80038de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e0:	3b01      	subs	r3, #1
 80038e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038ec:	4413      	add	r3, r2
 80038ee:	3b60      	subs	r3, #96	; 0x60
 80038f0:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 1; j < 4; j++){
 80038f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f6:	3301      	adds	r3, #1
 80038f8:	663b      	str	r3, [r7, #96]	; 0x60
 80038fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	ddbd      	ble.n	800387c <config_imu+0x34>
			}
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 8003900:	200a      	movs	r0, #10
 8003902:	f004 f84f 	bl	80079a4 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003908:	3301      	adds	r3, #1
 800390a:	667b      	str	r3, [r7, #100]	; 0x64
 800390c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800390e:	2b6d      	cmp	r3, #109	; 0x6d
 8003910:	dda2      	ble.n	8003858 <config_imu+0x10>
	}

	// assume rocket is in upright position, config axes accordingly
	uint8_t imu1_state = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t imu2_state = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t correct_axes = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	for (int j = 0; j < 3; j++){
 8003924:	2300      	movs	r3, #0
 8003926:	65bb      	str	r3, [r7, #88]	; 0x58
 8003928:	e06e      	b.n	8003a08 <config_imu+0x1c0>
		a1_sum[j] /= MAX_SETUP_SAMPLE;
 800392a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003932:	4413      	add	r3, r2
 8003934:	3b54      	subs	r3, #84	; 0x54
 8003936:	ed93 7a00 	vldr	s14, [r3]
 800393a:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8003af0 <config_imu+0x2a8>
 800393e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800394a:	4413      	add	r3, r2
 800394c:	3b54      	subs	r3, #84	; 0x54
 800394e:	edc3 7a00 	vstr	s15, [r3]
		a2_sum[j] /= MAX_SETUP_SAMPLE;
 8003952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800395a:	4413      	add	r3, r2
 800395c:	3b60      	subs	r3, #96	; 0x60
 800395e:	ed93 7a00 	vldr	s14, [r3]
 8003962:	eddf 6a63 	vldr	s13, [pc, #396]	; 8003af0 <config_imu+0x2a8>
 8003966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800396a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003972:	4413      	add	r3, r2
 8003974:	3b60      	subs	r3, #96	; 0x60
 8003976:	edc3 7a00 	vstr	s15, [r3]
		printf("IMU1 a-%d: %4.2f \n",j,a1_sum[j]);
 800397a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003982:	4413      	add	r3, r2
 8003984:	3b54      	subs	r3, #84	; 0x54
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fddd 	bl	8000548 <__aeabi_f2d>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	461a      	mov	r2, r3
 8003994:	4623      	mov	r3, r4
 8003996:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003998:	4856      	ldr	r0, [pc, #344]	; (8003af4 <config_imu+0x2ac>)
 800399a:	f00d fc85 	bl	80112a8 <iprintf>
		printf("IMU2 a-%d: %4.2f \n",j,a2_sum[j]);
 800399e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80039a6:	4413      	add	r3, r2
 80039a8:	3b60      	subs	r3, #96	; 0x60
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fc fdcb 	bl	8000548 <__aeabi_f2d>
 80039b2:	4603      	mov	r3, r0
 80039b4:	460c      	mov	r4, r1
 80039b6:	461a      	mov	r2, r3
 80039b8:	4623      	mov	r3, r4
 80039ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039bc:	484e      	ldr	r0, [pc, #312]	; (8003af8 <config_imu+0x2b0>)
 80039be:	f00d fc73 	bl	80112a8 <iprintf>
		if (a_sanity_check(&a1_sum[j]) == 1){
 80039c2:	f107 0214 	add.w	r2, r7, #20
 80039c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fd55 	bl	800347c <a_sanity_check>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d104      	bne.n	80039e2 <config_imu+0x19a>
			imu1_state ++;
 80039d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039dc:	3301      	adds	r3, #1
 80039de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (a_sanity_check(&a2_sum[j]) == 1){
 80039e2:	f107 0208 	add.w	r2, r7, #8
 80039e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fd45 	bl	800347c <a_sanity_check>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d104      	bne.n	8003a02 <config_imu+0x1ba>
			imu2_state ++;
 80039f8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80039fc:	3301      	adds	r3, #1
 80039fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for (int j = 0; j < 3; j++){
 8003a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a04:	3301      	adds	r3, #1
 8003a06:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	dd8d      	ble.n	800392a <config_imu+0xe2>
		}
	}

	if ((-a1_temp[2] > 7) && (-a1_temp[2] < 11)) correct_axes ++;
 8003a0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a12:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8003a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	d50d      	bpl.n	8003a3c <config_imu+0x1f4>
 8003a20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a24:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 8003a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a30:	dd04      	ble.n	8003a3c <config_imu+0x1f4>
 8003a32:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003a36:	3301      	adds	r3, #1
 8003a38:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	if ((-a2_temp[2] > 7) && (-a2_temp[2] < 11)) correct_axes ++;
 8003a3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a40:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8003a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	d50d      	bpl.n	8003a6a <config_imu+0x222>
 8003a4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a52:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 8003a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	dd04      	ble.n	8003a6a <config_imu+0x222>
 8003a60:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003a64:	3301      	adds	r3, #1
 8003a66:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	if ((imu1_state != 1) || (imu2_state != 1) || (correct_axes != 2)){
 8003a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <config_imu+0x23a>
 8003a72:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d103      	bne.n	8003a82 <config_imu+0x23a>
 8003a7a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d030      	beq.n	8003ae4 <config_imu+0x29c>
		if (DEBUG_PRINT == 1) printf("IMU axes out of bounds. abort. \n");
 8003a82:	481e      	ldr	r0, [pc, #120]	; (8003afc <config_imu+0x2b4>)
 8003a84:	f00d fc84 	bl	8011390 <puts>
		if (DEBUG_PRINT == 1) printf("IMU1: %d \n", imu1_state);
 8003a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	481c      	ldr	r0, [pc, #112]	; (8003b00 <config_imu+0x2b8>)
 8003a90:	f00d fc0a 	bl	80112a8 <iprintf>
		if (DEBUG_PRINT == 1) printf("IMU2: %d \n", imu2_state);
 8003a94:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003a98:	4619      	mov	r1, r3
 8003a9a:	481a      	ldr	r0, [pc, #104]	; (8003b04 <config_imu+0x2bc>)
 8003a9c:	f00d fc04 	bl	80112a8 <iprintf>
		if (DEBUG_PRINT == 1) printf("IMU ay: %4.2f \n", -a1_temp[2]);
 8003aa0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003aa4:	eef1 7a67 	vneg.f32	s15, s15
 8003aa8:	ee17 3a90 	vmov	r3, s15
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fd4b 	bl	8000548 <__aeabi_f2d>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4623      	mov	r3, r4
 8003aba:	4813      	ldr	r0, [pc, #76]	; (8003b08 <config_imu+0x2c0>)
 8003abc:	f00d fbf4 	bl	80112a8 <iprintf>
		if (DEBUG_PRINT == 1) printf("IMU ay: %4.2f \n", -a2_temp[2]);
 8003ac0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ac4:	eef1 7a67 	vneg.f32	s15, s15
 8003ac8:	ee17 3a90 	vmov	r3, s15
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fd3b 	bl	8000548 <__aeabi_f2d>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4623      	mov	r3, r4
 8003ada:	480b      	ldr	r0, [pc, #44]	; (8003b08 <config_imu+0x2c0>)
 8003adc:	f00d fbe4 	bl	80112a8 <iprintf>
		return 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <config_imu+0x29e>
	}
	return 1;
 8003ae4:	2301      	movs	r3, #1
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	376c      	adds	r7, #108	; 0x6c
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	bf00      	nop
 8003af0:	42c80000 	.word	0x42c80000
 8003af4:	080158c8 	.word	0x080158c8
 8003af8:	080158dc 	.word	0x080158dc
 8003afc:	080158f0 	.word	0x080158f0
 8003b00:	08015910 	.word	0x08015910
 8003b04:	0801591c 	.word	0x0801591c
 8003b08:	08015928 	.word	0x08015928

08003b0c <selftest>:

uint8_t selftest(float TD1, float TD2, float BAT1, float BAT2, float LDR){
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	ed87 0a05 	vstr	s0, [r7, #20]
 8003b16:	edc7 0a04 	vstr	s1, [r7, #16]
 8003b1a:	ed87 1a03 	vstr	s2, [r7, #12]
 8003b1e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003b22:	ed87 2a01 	vstr	s4, [r7, #4]

	//check TD voltage
	play(440,250);
 8003b26:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8003c50 <selftest+0x144>
 8003b2a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8003c54 <selftest+0x148>
 8003b2e:	f7fd ffe3 	bl	8001af8 <play>
	HAL_Delay(500);
 8003b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b36:	f003 ff35 	bl	80079a4 <HAL_Delay>
	if (TD1 < 9) {
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4a:	d510      	bpl.n	8003b6e <selftest+0x62>
		play(880,1000);
 8003b4c:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003c58 <selftest+0x14c>
 8003b50:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003c5c <selftest+0x150>
 8003b54:	f7fd ffd0 	bl	8001af8 <play>
		HAL_Delay(500);
 8003b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b5c:	f003 ff22 	bl	80079a4 <HAL_Delay>
		play(880,1000);
 8003b60:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8003c58 <selftest+0x14c>
 8003b64:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003c5c <selftest+0x150>
 8003b68:	f7fd ffc6 	bl	8001af8 <play>
 8003b6c:	e00f      	b.n	8003b8e <selftest+0x82>
	} else {
		play(440,500);
 8003b6e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8003c60 <selftest+0x154>
 8003b72:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003c54 <selftest+0x148>
 8003b76:	f7fd ffbf 	bl	8001af8 <play>
		HAL_Delay(500);
 8003b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b7e:	f003 ff11 	bl	80079a4 <HAL_Delay>
		play(880,500);
 8003b82:	eddf 0a37 	vldr	s1, [pc, #220]	; 8003c60 <selftest+0x154>
 8003b86:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003c5c <selftest+0x150>
 8003b8a:	f7fd ffb5 	bl	8001af8 <play>
	}

	HAL_Delay(1000);
 8003b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b92:	f003 ff07 	bl	80079a4 <HAL_Delay>

	play(440,250);
 8003b96:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8003c50 <selftest+0x144>
 8003b9a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003c54 <selftest+0x148>
 8003b9e:	f7fd ffab 	bl	8001af8 <play>
	HAL_Delay(250);
 8003ba2:	20fa      	movs	r0, #250	; 0xfa
 8003ba4:	f003 fefe 	bl	80079a4 <HAL_Delay>
	play(440,250);
 8003ba8:	eddf 0a29 	vldr	s1, [pc, #164]	; 8003c50 <selftest+0x144>
 8003bac:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003c54 <selftest+0x148>
 8003bb0:	f7fd ffa2 	bl	8001af8 <play>
	HAL_Delay(500);
 8003bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bb8:	f003 fef4 	bl	80079a4 <HAL_Delay>
	if (TD2 < 9) {
 8003bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bc0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	d510      	bpl.n	8003bf0 <selftest+0xe4>
		play(880,1000);
 8003bce:	eddf 0a22 	vldr	s1, [pc, #136]	; 8003c58 <selftest+0x14c>
 8003bd2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003c5c <selftest+0x150>
 8003bd6:	f7fd ff8f 	bl	8001af8 <play>
		HAL_Delay(500);
 8003bda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bde:	f003 fee1 	bl	80079a4 <HAL_Delay>
		play(880,1000);
 8003be2:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003c58 <selftest+0x14c>
 8003be6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003c5c <selftest+0x150>
 8003bea:	f7fd ff85 	bl	8001af8 <play>
 8003bee:	e00f      	b.n	8003c10 <selftest+0x104>
	} else {
		play(440,500);
 8003bf0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003c60 <selftest+0x154>
 8003bf4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003c54 <selftest+0x148>
 8003bf8:	f7fd ff7e 	bl	8001af8 <play>
		HAL_Delay(500);
 8003bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c00:	f003 fed0 	bl	80079a4 <HAL_Delay>
		play(880,500);
 8003c04:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003c60 <selftest+0x154>
 8003c08:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003c5c <selftest+0x150>
 8003c0c:	f7fd ff74 	bl	8001af8 <play>
	}

	HAL_Delay(1000);
 8003c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c14:	f003 fec6 	bl	80079a4 <HAL_Delay>

	//check battery power,
	if (BAT1 < 11){
 8003c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c1c:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	d501      	bpl.n	8003c2e <selftest+0x122>
		play_FAIL_sound();
 8003c2a:	f7fd ffc9 	bl	8001bc0 <play_FAIL_sound>
	}

	if (BAT2 < 11){
 8003c2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c32:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3e:	d501      	bpl.n	8003c44 <selftest+0x138>
		play_FAIL_sound();
 8003c40:	f7fd ffbe 	bl	8001bc0 <play_FAIL_sound>
	}
	//check LDR sensor

	return 1;
 8003c44:	2301      	movs	r3, #1
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	437a0000 	.word	0x437a0000
 8003c54:	43dc0000 	.word	0x43dc0000
 8003c58:	447a0000 	.word	0x447a0000
 8003c5c:	445c0000 	.word	0x445c0000
 8003c60:	43fa0000 	.word	0x43fa0000

08003c64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <MX_SPI1_Init+0x68>)
 8003c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003cb0:	220a      	movs	r2, #10
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003cb6:	f008 f9c3 	bl	800c040 <HAL_SPI_Init>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cc0:	f7fe fa92 	bl	80021e8 <Error_Handler>
  }

}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20014e48 	.word	0x20014e48
 8003ccc:	40013000 	.word	0x40013000

08003cd0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003cd6:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <MX_SPI2_Init+0x68>)
 8003cd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ce0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003d1c:	220a      	movs	r2, #10
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d20:	4804      	ldr	r0, [pc, #16]	; (8003d34 <MX_SPI2_Init+0x64>)
 8003d22:	f008 f98d 	bl	800c040 <HAL_SPI_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d2c:	f7fe fa5c 	bl	80021e8 <Error_Handler>
  }

}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20014df0 	.word	0x20014df0
 8003d38:	40003800 	.word	0x40003800

08003d3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 031c 	add.w	r3, r7, #28
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <HAL_SPI_MspInit+0xe8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d12c      	bne.n	8003db8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d96:	23e0      	movs	r3, #224	; 0xe0
 8003d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da2:	2303      	movs	r3, #3
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003da6:	2305      	movs	r3, #5
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003daa:	f107 031c 	add.w	r3, r7, #28
 8003dae:	4619      	mov	r1, r3
 8003db0:	481e      	ldr	r0, [pc, #120]	; (8003e2c <HAL_SPI_MspInit+0xf0>)
 8003db2:	f004 ff75 	bl	8008ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003db6:	e031      	b.n	8003e1c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d12c      	bne.n	8003e1c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <HAL_SPI_MspInit+0xec>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003dfa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e00:	2302      	movs	r3, #2
 8003e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e0c:	2305      	movs	r3, #5
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e10:	f107 031c 	add.w	r3, r7, #28
 8003e14:	4619      	mov	r1, r3
 8003e16:	4807      	ldr	r0, [pc, #28]	; (8003e34 <HAL_SPI_MspInit+0xf8>)
 8003e18:	f004 ff42 	bl	8008ca0 <HAL_GPIO_Init>
}
 8003e1c:	bf00      	nop
 8003e1e:	3730      	adds	r7, #48	; 0x30
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40013000 	.word	0x40013000
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	40003800 	.word	0x40003800
 8003e34:	40020400 	.word	0x40020400

08003e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800

08003e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e9a:	e7fe      	b.n	8003e9a <HardFault_Handler+0x4>

08003e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea0:	e7fe      	b.n	8003ea0 <MemManage_Handler+0x4>

08003ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ea6:	e7fe      	b.n	8003ea6 <BusFault_Handler+0x4>

08003ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <UsageFault_Handler+0x4>

08003eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003edc:	f003 fd42 	bl	8007964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <SDIO_IRQHandler+0x10>)
 8003eea:	f007 f815 	bl	800af18 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20014d6c 	.word	0x20014d6c

08003ef8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <DMA2_Stream0_IRQHandler+0x10>)
 8003efe:	f004 fc5b 	bl	80087b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200049ac 	.word	0x200049ac

08003f0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <DMA2_Stream3_IRQHandler+0x10>)
 8003f12:	f004 fc51 	bl	80087b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20014cac 	.word	0x20014cac

08003f20 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003f24:	4802      	ldr	r0, [pc, #8]	; (8003f30 <DMA2_Stream6_IRQHandler+0x10>)
 8003f26:	f004 fc47 	bl	80087b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20014d0c 	.word	0x20014d0c

08003f34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003f3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003f4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003f54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003f5c:	e000      	b.n	8003f60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003f5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003f60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f9      	beq.n	8003f5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003f6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003f74:	687b      	ldr	r3, [r7, #4]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e00a      	b.n	8003faa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f94:	f3af 8000 	nop.w
 8003f98:	4601      	mov	r1, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	60ba      	str	r2, [r7, #8]
 8003fa0:	b2ca      	uxtb	r2, r1
 8003fa2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	dbf0      	blt.n	8003f94 <_read+0x12>
	}

return len;
 8003fb2:	687b      	ldr	r3, [r7, #4]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e009      	b.n	8003fe2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	60ba      	str	r2, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ffac 	bl	8003f34 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	dbf1      	blt.n	8003fce <_write+0x12>
	}
	return len;
 8003fea:	687b      	ldr	r3, [r7, #4]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_close>:

int _close(int file)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	return -1;
 8003ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800401c:	605a      	str	r2, [r3, #4]
	return 0;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <_isatty>:

int _isatty(int file)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	return 1;
 8004034:	2301      	movs	r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
	return 0;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <_sbrk+0x50>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <_sbrk+0x16>
		heap_end = &end;
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <_sbrk+0x50>)
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <_sbrk+0x54>)
 8004070:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <_sbrk+0x50>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <_sbrk+0x50>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	466a      	mov	r2, sp
 8004082:	4293      	cmp	r3, r2
 8004084:	d907      	bls.n	8004096 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004086:	f00c fc75 	bl	8010974 <__errno>
 800408a:	4602      	mov	r2, r0
 800408c:	230c      	movs	r3, #12
 800408e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004094:	e006      	b.n	80040a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <_sbrk+0x50>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	4a03      	ldr	r2, [pc, #12]	; (80040ac <_sbrk+0x50>)
 80040a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2000082c 	.word	0x2000082c
 80040b0:	20016f18 	.word	0x20016f18

080040b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <SystemInit+0x28>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	4a07      	ldr	r2, [pc, #28]	; (80040dc <SystemInit+0x28>)
 80040c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <SystemInit+0x28>)
 80040ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040ce:	609a      	str	r2, [r3, #8]
#endif
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000ed00 	.word	0xe000ed00

080040e0 <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f005 fd47 	bl	8009b80 <HAL_I2C_GetState>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d003      	beq.n	8004100 <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 80040f8:	481a      	ldr	r0, [pc, #104]	; (8004164 <h3l_init+0x84>)
 80040fa:	f00d f949 	bl	8011390 <puts>
 80040fe:	e002      	b.n	8004106 <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8004100:	4819      	ldr	r0, [pc, #100]	; (8004168 <h3l_init+0x88>)
 8004102:	f00d f945 	bl	8011390 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6858      	ldr	r0, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b299      	uxth	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	7a1b      	ldrb	r3, [r3, #8]
 8004114:	220a      	movs	r2, #10
 8004116:	f005 fc05 	bl	8009924 <HAL_I2C_IsDeviceReady>
 800411a:	4603      	mov	r3, r0
 800411c:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 8004124:	4811      	ldr	r0, [pc, #68]	; (800416c <h3l_init+0x8c>)
 8004126:	f00d f933 	bl	8011390 <puts>
		printf("Errorcode: %d\n", _ret);
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	4619      	mov	r1, r3
 800412e:	4810      	ldr	r0, [pc, #64]	; (8004170 <h3l_init+0x90>)
 8004130:	f00d f8ba 	bl	80112a8 <iprintf>
		return 0;
 8004134:	2300      	movs	r3, #0
 8004136:	e010      	b.n	800415a <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8004138:	233f      	movs	r3, #63	; 0x3f
 800413a:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	461a      	mov	r2, r3
 8004140:	2120      	movs	r1, #32
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f9b0 	bl	80044a8 <h3l_write>


	PWR_CONF = 0b10000000;
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 800414c:	7bbb      	ldrb	r3, [r7, #14]
 800414e:	461a      	mov	r2, r3
 8004150:	2123      	movs	r1, #35	; 0x23
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9a8 	bl	80044a8 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8004158:	2301      	movs	r3, #1
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	08015938 	.word	0x08015938
 8004168:	08015948 	.word	0x08015948
 800416c:	08015958 	.word	0x08015958
 8004170:	08015968 	.word	0x08015968

08004174 <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b087      	sub	sp, #28
 8004178:	af02      	add	r7, sp, #8
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 800417e:	2328      	movs	r3, #40	; 0x28
 8004180:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6858      	ldr	r0, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b299      	uxth	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	7a1b      	ldrb	r3, [r3, #8]
 8004190:	f107 020f 	add.w	r2, r7, #15
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2301      	movs	r3, #1
 8004198:	f005 f8a0 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6858      	ldr	r0, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	b299      	uxth	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7a1b      	ldrb	r3, [r3, #8]
 80041aa:	f107 0208 	add.w	r2, r7, #8
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2301      	movs	r3, #1
 80041b2:	f005 f991 	bl	80094d8 <HAL_I2C_Master_Receive>
	reg = 0x29;
 80041b6:	2329      	movs	r3, #41	; 0x29
 80041b8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6858      	ldr	r0, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b299      	uxth	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7a1b      	ldrb	r3, [r3, #8]
 80041c8:	f107 020f 	add.w	r2, r7, #15
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2301      	movs	r3, #1
 80041d0:	f005 f884 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6858      	ldr	r0, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b299      	uxth	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7a1b      	ldrb	r3, [r3, #8]
 80041e2:	461c      	mov	r4, r3
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	9400      	str	r4, [sp, #0]
 80041ec:	2301      	movs	r3, #1
 80041ee:	f005 f973 	bl	80094d8 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 80041f2:	232a      	movs	r3, #42	; 0x2a
 80041f4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6858      	ldr	r0, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b299      	uxth	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7a1b      	ldrb	r3, [r3, #8]
 8004204:	f107 020f 	add.w	r2, r7, #15
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2301      	movs	r3, #1
 800420c:	f005 f866 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6858      	ldr	r0, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b299      	uxth	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7a1b      	ldrb	r3, [r3, #8]
 800421e:	461c      	mov	r4, r3
 8004220:	f107 0308 	add.w	r3, r7, #8
 8004224:	1c9a      	adds	r2, r3, #2
 8004226:	9400      	str	r4, [sp, #0]
 8004228:	2301      	movs	r3, #1
 800422a:	f005 f955 	bl	80094d8 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 800422e:	232b      	movs	r3, #43	; 0x2b
 8004230:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6858      	ldr	r0, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b299      	uxth	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	7a1b      	ldrb	r3, [r3, #8]
 8004240:	f107 020f 	add.w	r2, r7, #15
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2301      	movs	r3, #1
 8004248:	f005 f848 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6858      	ldr	r0, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b299      	uxth	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	7a1b      	ldrb	r3, [r3, #8]
 800425a:	461c      	mov	r4, r3
 800425c:	f107 0308 	add.w	r3, r7, #8
 8004260:	1cda      	adds	r2, r3, #3
 8004262:	9400      	str	r4, [sp, #0]
 8004264:	2301      	movs	r3, #1
 8004266:	f005 f937 	bl	80094d8 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 800426a:	232c      	movs	r3, #44	; 0x2c
 800426c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6858      	ldr	r0, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	b299      	uxth	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7a1b      	ldrb	r3, [r3, #8]
 800427c:	f107 020f 	add.w	r2, r7, #15
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2301      	movs	r3, #1
 8004284:	f005 f82a 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6858      	ldr	r0, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b299      	uxth	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7a1b      	ldrb	r3, [r3, #8]
 8004296:	461c      	mov	r4, r3
 8004298:	f107 0308 	add.w	r3, r7, #8
 800429c:	1d1a      	adds	r2, r3, #4
 800429e:	9400      	str	r4, [sp, #0]
 80042a0:	2301      	movs	r3, #1
 80042a2:	f005 f919 	bl	80094d8 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 80042a6:	232d      	movs	r3, #45	; 0x2d
 80042a8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6858      	ldr	r0, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b299      	uxth	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	7a1b      	ldrb	r3, [r3, #8]
 80042b8:	f107 020f 	add.w	r2, r7, #15
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2301      	movs	r3, #1
 80042c0:	f005 f80c 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6858      	ldr	r0, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b299      	uxth	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7a1b      	ldrb	r3, [r3, #8]
 80042d2:	461c      	mov	r4, r3
 80042d4:	f107 0308 	add.w	r3, r7, #8
 80042d8:	1d5a      	adds	r2, r3, #5
 80042da:	9400      	str	r4, [sp, #0]
 80042dc:	2301      	movs	r3, #1
 80042de:	f005 f8fb 	bl	80094d8 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 80042e2:	7a3b      	ldrb	r3, [r7, #8]
 80042e4:	b21a      	sxth	r2, r3
 80042e6:	7a7b      	ldrb	r3, [r7, #9]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	4313      	orrs	r3, r2
 80042ee:	b21a      	sxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 80042f4:	7abb      	ldrb	r3, [r7, #10]
 80042f6:	b21a      	sxth	r2, r3
 80042f8:	7afb      	ldrb	r3, [r7, #11]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	4313      	orrs	r3, r2
 8004300:	b21a      	sxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 8004306:	7b3b      	ldrb	r3, [r7, #12]
 8004308:	b21a      	sxth	r2, r3
 800430a:	7b7b      	ldrb	r3, [r7, #13]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	b21b      	sxth	r3, r3
 8004310:	4313      	orrs	r3, r2
 8004312:	b21a      	sxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800431e:	111b      	asrs	r3, r3, #4
 8004320:	b21a      	sxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800432c:	111b      	asrs	r3, r3, #4
 800432e:	b21a      	sxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800433a:	111b      	asrs	r3, r3, #4
 800433c:	b21a      	sxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	3302      	adds	r3, #2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8004356:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3304      	adds	r3, #4
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8004362:	801a      	strh	r2, [r3, #0]

};
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}
 800436c:	0000      	movs	r0, r0
	...

08004370 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004388:	ee17 0a90 	vmov	r0, s15
 800438c:	f7fc f8dc 	bl	8000548 <__aeabi_f2d>
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <h3l_convert+0x130>)
 8004396:	f7fc f92f 	bl	80005f8 <__aeabi_dmul>
 800439a:	4603      	mov	r3, r0
 800439c:	460c      	mov	r4, r1
 800439e:	4618      	mov	r0, r3
 80043a0:	4621      	mov	r1, r4
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <h3l_convert+0x134>)
 80043a8:	f7fc fa50 	bl	800084c <__aeabi_ddiv>
 80043ac:	4603      	mov	r3, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	4618      	mov	r0, r3
 80043b2:	4621      	mov	r1, r4
 80043b4:	a338      	add	r3, pc, #224	; (adr r3, 8004498 <h3l_convert+0x128>)
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f7fc f91d 	bl	80005f8 <__aeabi_dmul>
 80043be:	4603      	mov	r3, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	4618      	mov	r0, r3
 80043c4:	4621      	mov	r1, r4
 80043c6:	f7fc fc0f 	bl	8000be8 <__aeabi_d2f>
 80043ca:	4602      	mov	r2, r0
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043de:	ee17 0a90 	vmov	r0, s15
 80043e2:	f7fc f8b1 	bl	8000548 <__aeabi_f2d>
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <h3l_convert+0x130>)
 80043ec:	f7fc f904 	bl	80005f8 <__aeabi_dmul>
 80043f0:	4603      	mov	r3, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	4618      	mov	r0, r3
 80043f6:	4621      	mov	r1, r4
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <h3l_convert+0x134>)
 80043fe:	f7fc fa25 	bl	800084c <__aeabi_ddiv>
 8004402:	4603      	mov	r3, r0
 8004404:	460c      	mov	r4, r1
 8004406:	4618      	mov	r0, r3
 8004408:	4621      	mov	r1, r4
 800440a:	a323      	add	r3, pc, #140	; (adr r3, 8004498 <h3l_convert+0x128>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fc f8f2 	bl	80005f8 <__aeabi_dmul>
 8004414:	4603      	mov	r3, r0
 8004416:	460c      	mov	r4, r1
 8004418:	4619      	mov	r1, r3
 800441a:	4622      	mov	r2, r4
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	1d1c      	adds	r4, r3, #4
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	f7fc fbe0 	bl	8000be8 <__aeabi_d2f>
 8004428:	4603      	mov	r3, r0
 800442a:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443a:	ee17 0a90 	vmov	r0, s15
 800443e:	f7fc f883 	bl	8000548 <__aeabi_f2d>
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <h3l_convert+0x130>)
 8004448:	f7fc f8d6 	bl	80005f8 <__aeabi_dmul>
 800444c:	4603      	mov	r3, r0
 800444e:	460c      	mov	r4, r1
 8004450:	4618      	mov	r0, r3
 8004452:	4621      	mov	r1, r4
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <h3l_convert+0x134>)
 800445a:	f7fc f9f7 	bl	800084c <__aeabi_ddiv>
 800445e:	4603      	mov	r3, r0
 8004460:	460c      	mov	r4, r1
 8004462:	4618      	mov	r0, r3
 8004464:	4621      	mov	r1, r4
 8004466:	a30c      	add	r3, pc, #48	; (adr r3, 8004498 <h3l_convert+0x128>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fc f8c4 	bl	80005f8 <__aeabi_dmul>
 8004470:	4603      	mov	r3, r0
 8004472:	460c      	mov	r4, r1
 8004474:	4619      	mov	r1, r3
 8004476:	4622      	mov	r2, r4
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f103 0408 	add.w	r4, r3, #8
 800447e:	4608      	mov	r0, r1
 8004480:	4611      	mov	r1, r2
 8004482:	f7fc fbb1 	bl	8000be8 <__aeabi_d2f>
 8004486:	4603      	mov	r3, r0
 8004488:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	bf00      	nop
 8004494:	f3af 8000 	nop.w
 8004498:	51eb851f 	.word	0x51eb851f
 800449c:	40239eb8 	.word	0x40239eb8
 80044a0:	40488000 	.word	0x40488000
 80044a4:	408f4000 	.word	0x408f4000

080044a8 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
 80044b4:	4613      	mov	r3, r2
 80044b6:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 80044bc:	78bb      	ldrb	r3, [r7, #2]
 80044be:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6858      	ldr	r0, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b299      	uxth	r1, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7a1b      	ldrb	r3, [r3, #8]
 80044ce:	f107 020c 	add.w	r2, r7, #12
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2302      	movs	r3, #2
 80044d6:	f004 ff01 	bl	80092dc <HAL_I2C_Master_Transmit>

};
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d81a      	bhi.n	8004530 <_get_accel_sensitivity+0x4c>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <_get_accel_sensitivity+0x1c>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004511 	.word	0x08004511
 8004504:	08004519 	.word	0x08004519
 8004508:	08004521 	.word	0x08004521
 800450c:	08004529 	.word	0x08004529
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 8004510:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8004514:	60fb      	str	r3, [r7, #12]
    break;
 8004516:	e00b      	b.n	8004530 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 8004518:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800451c:	60fb      	str	r3, [r7, #12]
    break;
 800451e:	e007      	b.n	8004530 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 8004520:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8004524:	60fb      	str	r3, [r7, #12]
    break;
 8004526:	e003      	b.n	8004530 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 8004528:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800452c:	60fb      	str	r3, [r7, #12]
    break;
 800452e:	bf00      	nop
  }
  return f;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	ee07 3a90 	vmov	s15, r3
}
 8004536:	eeb0 0a67 	vmov.f32	s0, s15
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d816      	bhi.n	8004588 <_get_gyro_sensitivity+0x44>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <_get_gyro_sensitivity+0x1c>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	08004577 	.word	0x08004577
 8004568:	0800457d 	.word	0x0800457d
 800456c:	08004583 	.word	0x08004583
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <_get_gyro_sensitivity+0x58>)
 8004572:	60fb      	str	r3, [r7, #12]
	break;
 8004574:	e008      	b.n	8004588 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <_get_gyro_sensitivity+0x5c>)
 8004578:	60fb      	str	r3, [r7, #12]
    break;
 800457a:	e005      	b.n	8004588 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <_get_gyro_sensitivity+0x60>)
 800457e:	60fb      	str	r3, [r7, #12]
    break;
 8004580:	e002      	b.n	8004588 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <_get_gyro_sensitivity+0x64>)
 8004584:	60fb      	str	r3, [r7, #12]
    break;
 8004586:	bf00      	nop
  }
  return f;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	ee07 3a90 	vmov	s15, r3
}
 800458e:	eeb0 0a67 	vmov.f32	s0, s15
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	42830000 	.word	0x42830000
 80045a0:	42033333 	.word	0x42033333
 80045a4:	41833333 	.word	0x41833333
 80045a8:	41033333 	.word	0x41033333

080045ac <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	460b      	mov	r3, r1
 80045ba:	72fb      	strb	r3, [r7, #11]
 80045bc:	4613      	mov	r3, r2
 80045be:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 80045c0:	7afb      	ldrb	r3, [r7, #11]
 80045c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	889b      	ldrh	r3, [r3, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	4619      	mov	r1, r3
 80045d6:	f004 fd15 	bl	8009004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6898      	ldr	r0, [r3, #8]
 80045de:	f107 010b 	add.w	r1, r7, #11
 80045e2:	230a      	movs	r3, #10
 80045e4:	2201      	movs	r2, #1
 80045e6:	f007 fd8f 	bl	800c108 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6898      	ldr	r0, [r3, #8]
 80045ee:	893a      	ldrh	r2, [r7, #8]
 80045f0:	230a      	movs	r3, #10
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	f007 febc 	bl	800c370 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	889b      	ldrh	r3, [r3, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	4619      	mov	r1, r3
 8004604:	f004 fcfe 	bl	8009004 <HAL_GPIO_WritePin>
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	461a      	mov	r2, r3
 800461c:	460b      	mov	r3, r1
 800461e:	72fb      	strb	r3, [r7, #11]
 8004620:	4613      	mov	r3, r2
 8004622:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	889b      	ldrh	r3, [r3, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	4619      	mov	r1, r3
 8004630:	f004 fce8 	bl	8009004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6898      	ldr	r0, [r3, #8]
 8004638:	f107 010b 	add.w	r1, r7, #11
 800463c:	230a      	movs	r3, #10
 800463e:	2201      	movs	r2, #1
 8004640:	f007 fd62 	bl	800c108 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6898      	ldr	r0, [r3, #8]
 8004648:	893a      	ldrh	r2, [r7, #8]
 800464a:	230a      	movs	r3, #10
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	f007 fd5b 	bl	800c108 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	889b      	ldrh	r3, [r3, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	4619      	mov	r1, r3
 800465e:	f004 fcd1 	bl	8009004 <HAL_GPIO_WritePin>
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8004676:	2300      	movs	r3, #0
 8004678:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 800467a:	2381      	movs	r3, #129	; 0x81
 800467c:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 800467e:	f107 020f 	add.w	r2, r7, #15
 8004682:	2301      	movs	r3, #1
 8004684:	216b      	movs	r1, #107	; 0x6b
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffc2 	bl	8004610 <_icm_write_bytes>
	HAL_Delay(1);
 800468c:	2001      	movs	r0, #1
 800468e:	f003 f989 	bl	80079a4 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8004696:	f107 020f 	add.w	r2, r7, #15
 800469a:	2301      	movs	r3, #1
 800469c:	216b      	movs	r1, #107	; 0x6b
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ffb6 	bl	8004610 <_icm_write_bytes>
    HAL_Delay(1);
 80046a4:	2001      	movs	r0, #1
 80046a6:	f003 f97d 	bl	80079a4 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 80046aa:	f107 020c 	add.w	r2, r7, #12
 80046ae:	2301      	movs	r3, #1
 80046b0:	2175      	movs	r1, #117	; 0x75
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ff7a 	bl	80045ac <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 80046b8:	7b3b      	ldrb	r3, [r7, #12]
 80046ba:	2bac      	cmp	r3, #172	; 0xac
 80046bc:	d001      	beq.n	80046c2 <icm20601_init+0x58>
 80046be:	2300      	movs	r3, #0
 80046c0:	e093      	b.n	80047ea <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 80046c2:	233f      	movs	r3, #63	; 0x3f
 80046c4:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 80046c6:	f107 020f 	add.w	r2, r7, #15
 80046ca:	2301      	movs	r3, #1
 80046cc:	216c      	movs	r1, #108	; 0x6c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ff9e 	bl	8004610 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80046d8:	f107 020f 	add.w	r2, r7, #15
 80046dc:	2301      	movs	r3, #1
 80046de:	216a      	movs	r1, #106	; 0x6a
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ff95 	bl	8004610 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 80046e6:	2341      	movs	r3, #65	; 0x41
 80046e8:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80046ea:	f107 020f 	add.w	r2, r7, #15
 80046ee:	2301      	movs	r3, #1
 80046f0:	216a      	movs	r1, #106	; 0x6a
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff ff8c 	bl	8004610 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7b1b      	ldrb	r3, [r3, #12]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d102      	bne.n	8004706 <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8004700:	2308      	movs	r3, #8
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e002      	b.n	800470c <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7b1b      	ldrb	r3, [r3, #12]
 800470a:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 800470c:	f107 020f 	add.w	r2, r7, #15
 8004710:	2301      	movs	r3, #1
 8004712:	211d      	movs	r1, #29
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff7b 	bl	8004610 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	7b5b      	ldrb	r3, [r3, #13]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8004724:	f107 020f 	add.w	r2, r7, #15
 8004728:	2301      	movs	r3, #1
 800472a:	211c      	movs	r1, #28
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff6f 	bl	8004610 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7b9b      	ldrb	r3, [r3, #14]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d119      	bne.n	800476e <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 800473e:	f107 020f 	add.w	r2, r7, #15
 8004742:	2301      	movs	r3, #1
 8004744:	211a      	movs	r1, #26
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff ff62 	bl	8004610 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7bdb      	ldrb	r3, [r3, #15]
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	b25b      	sxtb	r3, r3
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	b25b      	sxtb	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 800475e:	f107 020f 	add.w	r2, r7, #15
 8004762:	2301      	movs	r3, #1
 8004764:	211b      	movs	r1, #27
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff ff52 	bl	8004610 <_icm_write_bytes>
 800476c:	e033      	b.n	80047d6 <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	7b9b      	ldrb	r3, [r3, #14]
 8004772:	2b09      	cmp	r3, #9
 8004774:	d119      	bne.n	80047aa <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 800477a:	f107 020f 	add.w	r2, r7, #15
 800477e:	2301      	movs	r3, #1
 8004780:	211a      	movs	r1, #26
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ff44 	bl	8004610 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	7bdb      	ldrb	r3, [r3, #15]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	b25b      	sxtb	r3, r3
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	b25b      	sxtb	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 800479a:	f107 020f 	add.w	r2, r7, #15
 800479e:	2301      	movs	r3, #1
 80047a0:	211b      	movs	r1, #27
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ff34 	bl	8004610 <_icm_write_bytes>
 80047a8:	e015      	b.n	80047d6 <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7b9b      	ldrb	r3, [r3, #14]
 80047ae:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80047b0:	f107 020f 	add.w	r2, r7, #15
 80047b4:	2301      	movs	r3, #1
 80047b6:	211a      	movs	r1, #26
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff29 	bl	8004610 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	7bdb      	ldrb	r3, [r3, #15]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80047c8:	f107 020f 	add.w	r2, r7, #15
 80047cc:	2301      	movs	r3, #1
 80047ce:	211b      	movs	r1, #27
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff1d 	bl	8004610 <_icm_write_bytes>
     }


    tmp = 0x00;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 80047da:	f107 020f 	add.w	r2, r7, #15
 80047de:	2301      	movs	r3, #1
 80047e0:	216c      	movs	r1, #108	; 0x6c
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ff14 	bl	8004610 <_icm_write_bytes>


    return 1;
 80047e8:	2301      	movs	r3, #1
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 80047fc:	f107 0308 	add.w	r3, r7, #8
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8004806:	f107 0208 	add.w	r2, r7, #8
 800480a:	2306      	movs	r3, #6
 800480c:	213b      	movs	r1, #59	; 0x3b
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fecc 	bl	80045ac <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8004814:	7a3b      	ldrb	r3, [r7, #8]
 8004816:	b21a      	sxth	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	b21a      	sxth	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	801a      	strh	r2, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004830:	7a7b      	ldrb	r3, [r7, #9]
 8004832:	b21b      	sxth	r3, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	b21a      	sxth	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 800483c:	7aba      	ldrb	r2, [r7, #10]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	3302      	adds	r3, #2
 8004842:	b212      	sxth	r2, r2
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	3302      	adds	r3, #2
 800484a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	3302      	adds	r3, #2
 8004854:	b212      	sxth	r2, r2
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	3302      	adds	r3, #2
 800485c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004860:	7afb      	ldrb	r3, [r7, #11]
 8004862:	b21a      	sxth	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	3302      	adds	r3, #2
 8004868:	430a      	orrs	r2, r1
 800486a:	b212      	sxth	r2, r2
 800486c:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 800486e:	7b3a      	ldrb	r2, [r7, #12]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	3304      	adds	r3, #4
 8004874:	b212      	sxth	r2, r2
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	3304      	adds	r3, #4
 800487c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004880:	021a      	lsls	r2, r3, #8
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	b212      	sxth	r2, r2
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	3304      	adds	r3, #4
 800488e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004892:	7b7b      	ldrb	r3, [r7, #13]
 8004894:	b21a      	sxth	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	3304      	adds	r3, #4
 800489a:	430a      	orrs	r2, r1
 800489c:	b212      	sxth	r2, r2
 800489e:	801a      	strh	r2, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 80048bc:	f107 0208 	add.w	r2, r7, #8
 80048c0:	2306      	movs	r3, #6
 80048c2:	2143      	movs	r1, #67	; 0x43
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fe71 	bl	80045ac <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 80048ca:	7a3b      	ldrb	r3, [r7, #8]
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	b21a      	sxth	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80048e6:	7a7b      	ldrb	r3, [r7, #9]
 80048e8:	b21b      	sxth	r3, r3
 80048ea:	4313      	orrs	r3, r2
 80048ec:	b21a      	sxth	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 80048f2:	7aba      	ldrb	r2, [r7, #10]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	3302      	adds	r3, #2
 80048f8:	b212      	sxth	r2, r2
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	3302      	adds	r3, #2
 8004900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3302      	adds	r3, #2
 800490a:	b212      	sxth	r2, r2
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	3302      	adds	r3, #2
 8004912:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	b21a      	sxth	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	3302      	adds	r3, #2
 800491e:	430a      	orrs	r2, r1
 8004920:	b212      	sxth	r2, r2
 8004922:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8004924:	7b3a      	ldrb	r2, [r7, #12]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3304      	adds	r3, #4
 800492a:	b212      	sxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	3304      	adds	r3, #4
 8004932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	3304      	adds	r3, #4
 800493c:	b212      	sxth	r2, r2
 800493e:	801a      	strh	r2, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	3304      	adds	r3, #4
 8004944:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004948:	7b7b      	ldrb	r3, [r7, #13]
 800494a:	b21a      	sxth	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	3304      	adds	r3, #4
 8004950:	430a      	orrs	r2, r1
 8004952:	b212      	sxth	r2, r2
 8004954:	801a      	strh	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8004968:	2300      	movs	r3, #0
 800496a:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 800496c:	f107 020c 	add.w	r2, r7, #12
 8004970:	2302      	movs	r3, #2
 8004972:	2141      	movs	r1, #65	; 0x41
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fe19 	bl	80045ac <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 800497a:	7b3b      	ldrb	r3, [r7, #12]
 800497c:	b21a      	sxth	r2, r3
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	b21a      	sxth	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004996:	7b7b      	ldrb	r3, [r7, #13]
 8004998:	b21b      	sxth	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	b21a      	sxth	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	801a      	strh	r2, [r3, #0]
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	0000      	movs	r0, r0
 80049ac:	0000      	movs	r0, r0
	...

080049b0 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 80049ba:	f107 0316 	add.w	r3, r7, #22
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ffcc 	bl	800495e <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 80049c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049d2:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <icm20601_read_data+0x1a8>)
 80049d4:	ed93 7a00 	vldr	s14, [r3]
 80049d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049dc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80049e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 80049ea:	f107 0310 	add.w	r3, r7, #16
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	7b5b      	ldrb	r3, [r3, #13]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fd73 	bl	80044e4 <_get_accel_sensitivity>
 80049fe:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 8004a02:	f107 0310 	add.w	r3, r7, #16
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fef2 	bl	80047f2 <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 8004a0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a22:	ee16 0a90 	vmov	r0, s13
 8004a26:	f7fb fd8f 	bl	8000548 <__aeabi_f2d>
 8004a2a:	a349      	add	r3, pc, #292	; (adr r3, 8004b50 <icm20601_read_data+0x1a0>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fde2 	bl	80005f8 <__aeabi_dmul>
 8004a34:	4603      	mov	r3, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1d1c      	adds	r4, r3, #4
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	f7fc f8d0 	bl	8000be8 <__aeabi_d2f>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8004a4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a60:	ee16 0a90 	vmov	r0, s13
 8004a64:	f7fb fd70 	bl	8000548 <__aeabi_f2d>
 8004a68:	a339      	add	r3, pc, #228	; (adr r3, 8004b50 <icm20601_read_data+0x1a0>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f7fb fdc3 	bl	80005f8 <__aeabi_dmul>
 8004a72:	4603      	mov	r3, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	4619      	mov	r1, r3
 8004a78:	4622      	mov	r2, r4
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f103 0408 	add.w	r4, r3, #8
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	f7fc f8b0 	bl	8000be8 <__aeabi_d2f>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 8004a8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a98:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004aa0:	ee16 0a90 	vmov	r0, s13
 8004aa4:	f7fb fd50 	bl	8000548 <__aeabi_f2d>
 8004aa8:	a329      	add	r3, pc, #164	; (adr r3, 8004b50 <icm20601_read_data+0x1a0>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fb fda3 	bl	80005f8 <__aeabi_dmul>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4622      	mov	r2, r4
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	f103 040c 	add.w	r4, r3, #12
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	f7fc f890 	bl	8000be8 <__aeabi_d2f>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 8004acc:	f107 0308 	add.w	r3, r7, #8
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->gyro_dps);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7bdb      	ldrb	r3, [r3, #15]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fd32 	bl	8004544 <_get_gyro_sensitivity>
 8004ae0:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fedc 	bl	80048a8 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 8004af0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3310      	adds	r3, #16
 8004b00:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b08:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 8004b0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b24:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8004b28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	3318      	adds	r3, #24
 8004b38:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b40:	edc3 7a00 	vstr	s15, [r3]
}
 8004b44:	bf00      	nop
 8004b46:	3724      	adds	r7, #36	; 0x24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	f3af 8000 	nop.w
 8004b50:	51eb851f 	.word	0x51eb851f
 8004b54:	40239eb8 	.word	0x40239eb8
 8004b58:	20000148 	.word	0x20000148

08004b5c <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	889b      	ldrh	r3, [r3, #4]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f004 fa61 	bl	8009036 <HAL_GPIO_TogglePin>
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <turn_on>:

void turn_on(struct LED_dev * ctrl){
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	889b      	ldrh	r3, [r3, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f004 fa38 	bl	8009004 <HAL_GPIO_WritePin>
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <turn_off>:

void turn_off(struct LED_dev * ctrl){
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	889b      	ldrh	r3, [r3, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f004 fa28 	bl	8009004 <HAL_GPIO_WritePin>
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <ms5607_init>:
#include <stdio.h>
#include <math.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f004 ffd9 	bl	8009b80 <HAL_I2C_GetState>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d003      	beq.n	8004bdc <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 8004bd4:	484a      	ldr	r0, [pc, #296]	; (8004d00 <ms5607_init+0x144>)
 8004bd6:	f00c fbdb 	bl	8011390 <puts>
 8004bda:	e002      	b.n	8004be2 <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 8004bdc:	4849      	ldr	r0, [pc, #292]	; (8004d04 <ms5607_init+0x148>)
 8004bde:	f00c fbd7 	bl	8011390 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6858      	ldr	r0, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	b299      	uxth	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	220a      	movs	r2, #10
 8004bf2:	f004 fe97 	bl	8009924 <HAL_I2C_IsDeviceReady>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 8004c00:	4841      	ldr	r0, [pc, #260]	; (8004d08 <ms5607_init+0x14c>)
 8004c02:	f00c fbc5 	bl	8011390 <puts>
		printf("Errorcode: %d\n", _ret);
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4840      	ldr	r0, [pc, #256]	; (8004d0c <ms5607_init+0x150>)
 8004c0c:	f00c fb4c 	bl	80112a8 <iprintf>
		return 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e070      	b.n	8004cf6 <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 8004c14:	231e      	movs	r3, #30
 8004c16:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6858      	ldr	r0, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b299      	uxth	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7a1b      	ldrb	r3, [r3, #8]
 8004c26:	f107 0210 	add.w	r2, r7, #16
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f004 fb55 	bl	80092dc <HAL_I2C_Master_Transmit>
 8004c32:	4603      	mov	r3, r0
 8004c34:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 8004c36:	2064      	movs	r0, #100	; 0x64
 8004c38:	f002 feb4 	bl	80079a4 <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e043      	b.n	8004cca <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 8004c42:	23a0      	movs	r3, #160	; 0xa0
 8004c44:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	4413      	add	r3, r2
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6858      	ldr	r0, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b299      	uxth	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7a1b      	ldrb	r3, [r3, #8]
 8004c64:	f107 020f 	add.w	r2, r7, #15
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f004 fb36 	bl	80092dc <HAL_I2C_Master_Transmit>
 8004c70:	4603      	mov	r3, r0
 8004c72:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 8004c74:	200f      	movs	r0, #15
 8004c76:	f002 fe95 	bl	80079a4 <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6858      	ldr	r0, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	b299      	uxth	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7a1b      	ldrb	r3, [r3, #8]
 8004c88:	f107 020c 	add.w	r2, r7, #12
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2302      	movs	r3, #2
 8004c90:	f004 fc22 	bl	80094d8 <HAL_I2C_Master_Receive>
 8004c94:	4603      	mov	r3, r0
 8004c96:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8004c98:	7b3b      	ldrb	r3, [r7, #12]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	b299      	uxth	r1, r3
 8004ca0:	7b7b      	ldrb	r3, [r7, #13]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	b291      	uxth	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8004cbe:	4814      	ldr	r0, [pc, #80]	; (8004d10 <ms5607_init+0x154>)
 8004cc0:	f00c fb66 	bl	8011390 <puts>
	for(int i = 1; i < 7; i++){
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	ddb8      	ble.n	8004c42 <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8004cd0:	4810      	ldr	r0, [pc, #64]	; (8004d14 <ms5607_init+0x158>)
 8004cd2:	f00c fb5d 	bl	8011390 <puts>

	buf[0] = 0x44;
 8004cd6:	2344      	movs	r3, #68	; 0x44
 8004cd8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6858      	ldr	r0, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b299      	uxth	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7a1b      	ldrb	r3, [r3, #8]
 8004ce8:	f107 020c 	add.w	r2, r7, #12
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f004 faf4 	bl	80092dc <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 8004cf4:	2301      	movs	r3, #1
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	08015978 	.word	0x08015978
 8004d04:	08015988 	.word	0x08015988
 8004d08:	08015998 	.word	0x08015998
 8004d0c:	080159a8 	.word	0x080159a8
 8004d10:	080159b8 	.word	0x080159b8
 8004d14:	080159d0 	.word	0x080159d0

08004d18 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8004d22:	2300      	movs	r3, #0
 8004d24:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6858      	ldr	r0, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b299      	uxth	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7a1b      	ldrb	r3, [r3, #8]
 8004d34:	f107 020c 	add.w	r2, r7, #12
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f004 face 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6858      	ldr	r0, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b299      	uxth	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7a1b      	ldrb	r3, [r3, #8]
 8004d4e:	f107 020c 	add.w	r2, r7, #12
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2303      	movs	r3, #3
 8004d56:	f004 fbbf 	bl	80094d8 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004d5a:	7b3b      	ldrb	r3, [r7, #12]
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	461a      	mov	r2, r3
 8004d60:	7b7b      	ldrb	r3, [r7, #13]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	4313      	orrs	r3, r2
 8004d66:	7bba      	ldrb	r2, [r7, #14]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8004d6e:	7b3a      	ldrb	r2, [r7, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	7b7a      	ldrb	r2, [r7, #13]
 8004d7a:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	3302      	adds	r3, #2
 8004d80:	7bba      	ldrb	r2, [r7, #14]
 8004d82:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 8004d84:	2354      	movs	r3, #84	; 0x54
 8004d86:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6858      	ldr	r0, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	b299      	uxth	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	7a1b      	ldrb	r3, [r3, #8]
 8004d96:	f107 020c 	add.w	r2, r7, #12
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f004 fa9d 	bl	80092dc <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af02      	add	r7, sp, #8
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8004db4:	2300      	movs	r3, #0
 8004db6:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6858      	ldr	r0, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b299      	uxth	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7a1b      	ldrb	r3, [r3, #8]
 8004dc6:	f107 020c 	add.w	r2, r7, #12
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f004 fa85 	bl	80092dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6858      	ldr	r0, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b299      	uxth	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7a1b      	ldrb	r3, [r3, #8]
 8004de0:	f107 020c 	add.w	r2, r7, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2303      	movs	r3, #3
 8004de8:	f004 fb76 	bl	80094d8 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004dec:	7b3b      	ldrb	r3, [r7, #12]
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	461a      	mov	r2, r3
 8004df2:	7b7b      	ldrb	r3, [r7, #13]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	4313      	orrs	r3, r2
 8004df8:	7bba      	ldrb	r2, [r7, #14]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	61da      	str	r2, [r3, #28]
	dat[0] = buf[0];
 8004e00:	7b3a      	ldrb	r2, [r7, #12]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	7b7a      	ldrb	r2, [r7, #13]
 8004e0c:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	3302      	adds	r3, #2
 8004e12:	7bba      	ldrb	r2, [r7, #14]
 8004e14:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 8004e16:	2344      	movs	r3, #68	; 0x44
 8004e18:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6858      	ldr	r0, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	b299      	uxth	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7a1b      	ldrb	r3, [r3, #8]
 8004e28:	f107 020c 	add.w	r2, r7, #12
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f004 fa54 	bl	80092dc <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	0000      	movs	r0, r0
	...

08004e40 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8004e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e44:	b092      	sub	sp, #72	; 0x48
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	895b      	ldrh	r3, [r3, #10]
 8004e52:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	899b      	ldrh	r3, [r3, #12]
 8004e58:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	89db      	ldrh	r3, [r3, #14]
 8004e5e:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8a1b      	ldrh	r3, [r3, #16]
 8004e64:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8a5b      	ldrh	r3, [r3, #18]
 8004e6a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8a9b      	ldrh	r3, [r3, #20]
 8004e70:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e88:	ee17 0a90 	vmov	r0, s15
 8004e8c:	f7fb fb5c 	bl	8000548 <__aeabi_f2d>
 8004e90:	4604      	mov	r4, r0
 8004e92:	460d      	mov	r5, r1
 8004e94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fb44 	bl	8000524 <__aeabi_i2d>
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	4bd9      	ldr	r3, [pc, #868]	; (8005208 <ms5607_convert+0x3c8>)
 8004ea2:	f7fb fba9 	bl	80005f8 <__aeabi_dmul>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4620      	mov	r0, r4
 8004eac:	4629      	mov	r1, r5
 8004eae:	f7fb f9eb 	bl	8000288 <__aeabi_dsub>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	4621      	mov	r1, r4
 8004eba:	f7fb fe95 	bl	8000be8 <__aeabi_d2f>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8004ec2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb fb2d 	bl	8000524 <__aeabi_i2d>
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004ed2:	f7fb fb91 	bl	80005f8 <__aeabi_dmul>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	460c      	mov	r4, r1
 8004eda:	4625      	mov	r5, r4
 8004edc:	461c      	mov	r4, r3
 8004ede:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ee8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef0:	ee17 0a90 	vmov	r0, s15
 8004ef4:	f7fb fb28 	bl	8000548 <__aeabi_f2d>
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	4bc3      	ldr	r3, [pc, #780]	; (800520c <ms5607_convert+0x3cc>)
 8004efe:	f7fb fca5 	bl	800084c <__aeabi_ddiv>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7fb f9bf 	bl	800028c <__adddf3>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	4618      	mov	r0, r3
 8004f14:	4621      	mov	r1, r4
 8004f16:	f7fb fe67 	bl	8000be8 <__aeabi_d2f>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 8004f1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fb faff 	bl	8000524 <__aeabi_i2d>
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	4bb9      	ldr	r3, [pc, #740]	; (8005210 <ms5607_convert+0x3d0>)
 8004f2c:	f7fb fb64 	bl	80005f8 <__aeabi_dmul>
 8004f30:	4603      	mov	r3, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	4625      	mov	r5, r4
 8004f36:	461c      	mov	r4, r3
 8004f38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	ee17 0a90 	vmov	r0, s15
 8004f4e:	f7fb fafb 	bl	8000548 <__aeabi_f2d>
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	4baf      	ldr	r3, [pc, #700]	; (8005214 <ms5607_convert+0x3d4>)
 8004f58:	f7fb fc78 	bl	800084c <__aeabi_ddiv>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4620      	mov	r0, r4
 8004f62:	4629      	mov	r1, r5
 8004f64:	f7fb f992 	bl	800028c <__adddf3>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	4621      	mov	r1, r4
 8004f70:	f7fb fe3a 	bl	8000be8 <__aeabi_d2f>
 8004f74:	4603      	mov	r3, r0
 8004f76:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8004f78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	ee17 0a90 	vmov	r0, s15
 8004f8e:	f7fb fadb 	bl	8000548 <__aeabi_f2d>
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	4ba0      	ldr	r3, [pc, #640]	; (8005218 <ms5607_convert+0x3d8>)
 8004f98:	f7fb fc58 	bl	800084c <__aeabi_ddiv>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	4b9c      	ldr	r3, [pc, #624]	; (800521c <ms5607_convert+0x3dc>)
 8004faa:	f7fb f96f 	bl	800028c <__adddf3>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	f7fb fe17 	bl	8000be8 <__aeabi_d2f>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd0:	ee17 0a90 	vmov	r0, s15
 8004fd4:	f7fb fab8 	bl	8000548 <__aeabi_f2d>
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	4b90      	ldr	r3, [pc, #576]	; (8005220 <ms5607_convert+0x3e0>)
 8004fde:	f7fb fc35 	bl	800084c <__aeabi_ddiv>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	4625      	mov	r5, r4
 8004fe8:	461c      	mov	r4, r3
 8004fea:	6a38      	ldr	r0, [r7, #32]
 8004fec:	f7fb faac 	bl	8000548 <__aeabi_f2d>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7fb f946 	bl	8000288 <__aeabi_dsub>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	4618      	mov	r0, r3
 8005002:	4621      	mov	r1, r4
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	4b86      	ldr	r3, [pc, #536]	; (8005224 <ms5607_convert+0x3e4>)
 800500a:	f7fb fc1f 	bl	800084c <__aeabi_ddiv>
 800500e:	4603      	mov	r3, r0
 8005010:	460c      	mov	r4, r1
 8005012:	4618      	mov	r0, r3
 8005014:	4621      	mov	r1, r4
 8005016:	f7fb fde7 	bl	8000be8 <__aeabi_d2f>
 800501a:	4603      	mov	r3, r0
 800501c:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	647b      	str	r3, [r7, #68]	; 0x44
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	643b      	str	r3, [r7, #64]	; 0x40
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8005030:	edd7 7a06 	vldr	s15, [r7, #24]
 8005034:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005228 <ms5607_convert+0x3e8>
 8005038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	f140 8104 	bpl.w	800524c <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 8005044:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005048:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800504c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005050:	eddf 6a76 	vldr	s13, [pc, #472]	; 800522c <ms5607_convert+0x3ec>
 8005054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005058:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 800505c:	69b8      	ldr	r0, [r7, #24]
 800505e:	f7fb fa73 	bl	8000548 <__aeabi_f2d>
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	4b6d      	ldr	r3, [pc, #436]	; (800521c <ms5607_convert+0x3dc>)
 8005068:	f7fb f90e 	bl	8000288 <__aeabi_dsub>
 800506c:	4603      	mov	r3, r0
 800506e:	460c      	mov	r4, r1
 8005070:	4618      	mov	r0, r3
 8005072:	4621      	mov	r1, r4
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	4b6d      	ldr	r3, [pc, #436]	; (8005230 <ms5607_convert+0x3f0>)
 800507a:	f7fb fabd 	bl	80005f8 <__aeabi_dmul>
 800507e:	4603      	mov	r3, r0
 8005080:	460c      	mov	r4, r1
 8005082:	4625      	mov	r5, r4
 8005084:	461c      	mov	r4, r3
 8005086:	69b8      	ldr	r0, [r7, #24]
 8005088:	f7fb fa5e 	bl	8000548 <__aeabi_f2d>
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	4b62      	ldr	r3, [pc, #392]	; (800521c <ms5607_convert+0x3dc>)
 8005092:	f7fb f8f9 	bl	8000288 <__aeabi_dsub>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4620      	mov	r0, r4
 800509c:	4629      	mov	r1, r5
 800509e:	f7fb faab 	bl	80005f8 <__aeabi_dmul>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	4618      	mov	r0, r3
 80050a8:	4621      	mov	r1, r4
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	4b61      	ldr	r3, [pc, #388]	; (8005234 <ms5607_convert+0x3f4>)
 80050b0:	f7fb fbcc 	bl	800084c <__aeabi_ddiv>
 80050b4:	4603      	mov	r3, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	4618      	mov	r0, r3
 80050ba:	4621      	mov	r1, r4
 80050bc:	f7fb fd94 	bl	8000be8 <__aeabi_d2f>
 80050c0:	4603      	mov	r3, r0
 80050c2:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 80050c4:	69b8      	ldr	r0, [r7, #24]
 80050c6:	f7fb fa3f 	bl	8000548 <__aeabi_f2d>
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	4b53      	ldr	r3, [pc, #332]	; (800521c <ms5607_convert+0x3dc>)
 80050d0:	f7fb f8da 	bl	8000288 <__aeabi_dsub>
 80050d4:	4603      	mov	r3, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	4618      	mov	r0, r3
 80050da:	4621      	mov	r1, r4
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	f7fb f8d4 	bl	800028c <__adddf3>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	4625      	mov	r5, r4
 80050ea:	461c      	mov	r4, r3
 80050ec:	69b8      	ldr	r0, [r7, #24]
 80050ee:	f7fb fa2b 	bl	8000548 <__aeabi_f2d>
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	4b49      	ldr	r3, [pc, #292]	; (800521c <ms5607_convert+0x3dc>)
 80050f8:	f7fb f8c6 	bl	8000288 <__aeabi_dsub>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb fa78 	bl	80005f8 <__aeabi_dmul>
 8005108:	4603      	mov	r3, r0
 800510a:	460c      	mov	r4, r1
 800510c:	4618      	mov	r0, r3
 800510e:	4621      	mov	r1, r4
 8005110:	f7fb fd6a 	bl	8000be8 <__aeabi_d2f>
 8005114:	4603      	mov	r3, r0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8005118:	edd7 7a06 	vldr	s15, [r7, #24]
 800511c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005238 <ms5607_convert+0x3f8>
 8005120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	f140 8090 	bpl.w	800524c <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 800512c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800512e:	f7fb fa0b 	bl	8000548 <__aeabi_f2d>
 8005132:	4604      	mov	r4, r0
 8005134:	460d      	mov	r5, r1
 8005136:	edd7 7a06 	vldr	s15, [r7, #24]
 800513a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800523c <ms5607_convert+0x3fc>
 800513e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005142:	ee17 0a90 	vmov	r0, s15
 8005146:	f7fb f9ff 	bl	8000548 <__aeabi_f2d>
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <ms5607_convert+0x400>)
 8005150:	f7fb fa52 	bl	80005f8 <__aeabi_dmul>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4690      	mov	r8, r2
 800515a:	4699      	mov	r9, r3
 800515c:	69b8      	ldr	r0, [r7, #24]
 800515e:	f7fb f9f3 	bl	8000548 <__aeabi_f2d>
 8005162:	a327      	add	r3, pc, #156	; (adr r3, 8005200 <ms5607_convert+0x3c0>)
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f7fb f890 	bl	800028c <__adddf3>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fb fa40 	bl	80005f8 <__aeabi_dmul>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4620      	mov	r0, r4
 800517e:	4629      	mov	r1, r5
 8005180:	f7fb f884 	bl	800028c <__adddf3>
 8005184:	4603      	mov	r3, r0
 8005186:	460c      	mov	r4, r1
 8005188:	4618      	mov	r0, r3
 800518a:	4621      	mov	r1, r4
 800518c:	f7fb fd2c 	bl	8000be8 <__aeabi_d2f>
 8005190:	4603      	mov	r3, r0
 8005192:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8005194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005196:	f7fb f9d7 	bl	8000548 <__aeabi_f2d>
 800519a:	4604      	mov	r4, r0
 800519c:	460d      	mov	r5, r1
 800519e:	edd7 7a06 	vldr	s15, [r7, #24]
 80051a2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800523c <ms5607_convert+0x3fc>
 80051a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051aa:	ee17 0a90 	vmov	r0, s15
 80051ae:	f7fb f9cb 	bl	8000548 <__aeabi_f2d>
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	4b23      	ldr	r3, [pc, #140]	; (8005244 <ms5607_convert+0x404>)
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4690      	mov	r8, r2
 80051c2:	4699      	mov	r9, r3
 80051c4:	69b8      	ldr	r0, [r7, #24]
 80051c6:	f7fb f9bf 	bl	8000548 <__aeabi_f2d>
 80051ca:	a30d      	add	r3, pc, #52	; (adr r3, 8005200 <ms5607_convert+0x3c0>)
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f7fb f85c 	bl	800028c <__adddf3>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4640      	mov	r0, r8
 80051da:	4649      	mov	r1, r9
 80051dc:	f7fb fa0c 	bl	80005f8 <__aeabi_dmul>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4620      	mov	r0, r4
 80051e6:	4629      	mov	r1, r5
 80051e8:	f7fb f850 	bl	800028c <__adddf3>
 80051ec:	4603      	mov	r3, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	4618      	mov	r0, r3
 80051f2:	4621      	mov	r1, r4
 80051f4:	f7fb fcf8 	bl	8000be8 <__aeabi_d2f>
 80051f8:	4603      	mov	r3, r0
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051fc:	e026      	b.n	800524c <ms5607_convert+0x40c>
 80051fe:	bf00      	nop
 8005200:	00000000 	.word	0x00000000
 8005204:	40977000 	.word	0x40977000
 8005208:	40700000 	.word	0x40700000
 800520c:	40500000 	.word	0x40500000
 8005210:	40f00000 	.word	0x40f00000
 8005214:	40600000 	.word	0x40600000
 8005218:	41600000 	.word	0x41600000
 800521c:	409f4000 	.word	0x409f4000
 8005220:	41400000 	.word	0x41400000
 8005224:	40e00000 	.word	0x40e00000
 8005228:	44fa0000 	.word	0x44fa0000
 800522c:	4f000000 	.word	0x4f000000
 8005230:	404e8000 	.word	0x404e8000
 8005234:	40300000 	.word	0x40300000
 8005238:	c4bb8000 	.word	0xc4bb8000
 800523c:	44bb8000 	.word	0x44bb8000
 8005240:	402e0000 	.word	0x402e0000
 8005244:	40200000 	.word	0x40200000
 8005248:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 800524c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005250:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005258:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 800525c:	ed97 7a08 	vldr	s14, [r7, #32]
 8005260:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005268:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 800526c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005270:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005278:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 800527c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005280:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8005248 <ms5607_convert+0x408>
 8005284:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005288:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005296:	edd7 7a07 	vldr	s15, [r7, #28]
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	ee17 0a90 	vmov	r0, s15
 80052a2:	f7fb f951 	bl	8000548 <__aeabi_f2d>
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	4b16      	ldr	r3, [pc, #88]	; (8005304 <ms5607_convert+0x4c4>)
 80052ac:	f7fb face 	bl	800084c <__aeabi_ddiv>
 80052b0:	4603      	mov	r3, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	4625      	mov	r5, r4
 80052b6:	461c      	mov	r4, r3
 80052b8:	6a38      	ldr	r0, [r7, #32]
 80052ba:	f7fb f945 	bl	8000548 <__aeabi_f2d>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7fa ffdf 	bl	8000288 <__aeabi_dsub>
 80052ca:	4603      	mov	r3, r0
 80052cc:	460c      	mov	r4, r1
 80052ce:	4618      	mov	r0, r3
 80052d0:	4621      	mov	r1, r4
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <ms5607_convert+0x4c8>)
 80052d8:	f7fb fab8 	bl	800084c <__aeabi_ddiv>
 80052dc:	4603      	mov	r3, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	4618      	mov	r0, r3
 80052e2:	4621      	mov	r1, r4
 80052e4:	f7fb fc80 	bl	8000be8 <__aeabi_d2f>
 80052e8:	4603      	mov	r3, r0
 80052ea:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	601a      	str	r2, [r3, #0]
	*p = pressure;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 80052f8:	bf00      	nop
 80052fa:	3748      	adds	r7, #72	; 0x48
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005302:	bf00      	nop
 8005304:	41400000 	.word	0x41400000
 8005308:	40e00000 	.word	0x40e00000

0800530c <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	f004 fc31 	bl	8009b80 <HAL_I2C_GetState>
 800531e:	4603      	mov	r3, r0
 8005320:	2b20      	cmp	r3, #32
 8005322:	d003      	beq.n	800532c <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8005324:	481f      	ldr	r0, [pc, #124]	; (80053a4 <sht31_init+0x98>)
 8005326:	f00c f833 	bl	8011390 <puts>
 800532a:	e002      	b.n	8005332 <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 800532c:	481e      	ldr	r0, [pc, #120]	; (80053a8 <sht31_init+0x9c>)
 800532e:	f00c f82f 	bl	8011390 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6858      	ldr	r0, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	b299      	uxth	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	7a1b      	ldrb	r3, [r3, #8]
 8005340:	220a      	movs	r2, #10
 8005342:	f004 faef 	bl	8009924 <HAL_I2C_IsDeviceReady>
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8005350:	4816      	ldr	r0, [pc, #88]	; (80053ac <sht31_init+0xa0>)
 8005352:	f00c f81d 	bl	8011390 <puts>
		printf("Errorcode: %d\n", _ret);
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	4619      	mov	r1, r3
 800535a:	4815      	ldr	r0, [pc, #84]	; (80053b0 <sht31_init+0xa4>)
 800535c:	f00b ffa4 	bl	80112a8 <iprintf>
		return 0;
 8005360:	2300      	movs	r3, #0
 8005362:	e01b      	b.n	800539c <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8005364:	4813      	ldr	r0, [pc, #76]	; (80053b4 <sht31_init+0xa8>)
 8005366:	f00c f813 	bl	8011390 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 800536a:	f242 4316 	movw	r3, #9238	; 0x2416
 800536e:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8005370:	89bb      	ldrh	r3, [r7, #12]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	b29b      	uxth	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 800537a:	89bb      	ldrh	r3, [r7, #12]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6858      	ldr	r0, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b299      	uxth	r1, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7a1b      	ldrb	r3, [r3, #8]
 800538e:	f107 0208 	add.w	r2, r7, #8
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2302      	movs	r3, #2
 8005396:	f003 ffa1 	bl	80092dc <HAL_I2C_Master_Transmit>
	return 1;
 800539a:	2301      	movs	r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	080159e4 	.word	0x080159e4
 80053a8:	080159f4 	.word	0x080159f4
 80053ac:	08015a04 	.word	0x08015a04
 80053b0:	08015a18 	.word	0x08015a18
 80053b4:	08015a28 	.word	0x08015a28

080053b8 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b08d      	sub	sp, #52	; 0x34
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6858      	ldr	r0, [r3, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b299      	uxth	r1, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	7a1b      	ldrb	r3, [r3, #8]
 80053d2:	f107 0214 	add.w	r2, r7, #20
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2306      	movs	r3, #6
 80053da:	f004 f87d 	bl	80094d8 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 80053de:	7d3b      	ldrb	r3, [r7, #20]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	b21a      	sxth	r2, r3
 80053e4:	7d7b      	ldrb	r3, [r7, #21]
 80053e6:	b21b      	sxth	r3, r3
 80053e8:	4313      	orrs	r3, r2
 80053ea:	b21b      	sxth	r3, r3
 80053ec:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	7e3b      	ldrb	r3, [r7, #24]
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b21b      	sxth	r3, r3
 80053fc:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 80053fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	ee17 0a90 	vmov	r0, s15
 800540c:	f7fb f89c 	bl	8000548 <__aeabi_f2d>
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <sht31_read+0x128>)
 8005416:	f7fb f8ef 	bl	80005f8 <__aeabi_dmul>
 800541a:	4603      	mov	r3, r0
 800541c:	460c      	mov	r4, r1
 800541e:	4618      	mov	r0, r3
 8005420:	4621      	mov	r1, r4
 8005422:	a32d      	add	r3, pc, #180	; (adr r3, 80054d8 <sht31_read+0x120>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fb fa10 	bl	800084c <__aeabi_ddiv>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	4618      	mov	r0, r3
 8005432:	4621      	mov	r1, r4
 8005434:	f7fb fbd8 	bl	8000be8 <__aeabi_d2f>
 8005438:	4603      	mov	r3, r0
 800543a:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 800543c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80054e4 <sht31_read+0x12c>
 800544a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544e:	ee17 0a90 	vmov	r0, s15
 8005452:	f7fb f879 	bl	8000548 <__aeabi_f2d>
 8005456:	a320      	add	r3, pc, #128	; (adr r3, 80054d8 <sht31_read+0x120>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fb f9f6 	bl	800084c <__aeabi_ddiv>
 8005460:	4603      	mov	r3, r0
 8005462:	460c      	mov	r4, r1
 8005464:	4618      	mov	r0, r3
 8005466:	4621      	mov	r1, r4
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <sht31_read+0x130>)
 800546e:	f7fa ff0b 	bl	8000288 <__aeabi_dsub>
 8005472:	4603      	mov	r3, r0
 8005474:	460c      	mov	r4, r1
 8005476:	4618      	mov	r0, r3
 8005478:	4621      	mov	r1, r4
 800547a:	f7fb fbb5 	bl	8000be8 <__aeabi_d2f>
 800547e:	4603      	mov	r3, r0
 8005480:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3304      	adds	r3, #4
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005494:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3302      	adds	r3, #2
 800549a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800549c:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 800549e:	f242 4316 	movw	r3, #9238	; 0x2416
 80054a2:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 80054a4:	8b7b      	ldrh	r3, [r7, #26]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 80054ae:	8b7b      	ldrh	r3, [r7, #26]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6858      	ldr	r0, [r3, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	b299      	uxth	r1, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	7a1b      	ldrb	r3, [r3, #8]
 80054c2:	f107 0214 	add.w	r2, r7, #20
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2302      	movs	r3, #2
 80054ca:	f003 ff07 	bl	80092dc <HAL_I2C_Master_Transmit>

};
 80054ce:	bf00      	nop
 80054d0:	372c      	adds	r7, #44	; 0x2c
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd90      	pop	{r4, r7, pc}
 80054d6:	bf00      	nop
 80054d8:	00000000 	.word	0x00000000
 80054dc:	40efffe0 	.word	0x40efffe0
 80054e0:	40590000 	.word	0x40590000
 80054e4:	432f0000 	.word	0x432f0000
 80054e8:	40468000 	.word	0x40468000

080054ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80054ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005524 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80054f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054f2:	e003      	b.n	80054fc <LoopCopyDataInit>

080054f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80054f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054fa:	3104      	adds	r1, #4

080054fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054fc:	480b      	ldr	r0, [pc, #44]	; (800552c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005500:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005502:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005504:	d3f6      	bcc.n	80054f4 <CopyDataInit>
  ldr  r2, =_sbss
 8005506:	4a0b      	ldr	r2, [pc, #44]	; (8005534 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005508:	e002      	b.n	8005510 <LoopFillZerobss>

0800550a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800550a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800550c:	f842 3b04 	str.w	r3, [r2], #4

08005510 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005512:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005514:	d3f9      	bcc.n	800550a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005516:	f7fe fdcd 	bl	80040b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800551a:	f00b fa31 	bl	8010980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800551e:	f7fc fdd7 	bl	80020d0 <main>
  bx  lr    
 8005522:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005524:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005528:	08015ed8 	.word	0x08015ed8
  ldr  r0, =_sdata
 800552c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005530:	20000328 	.word	0x20000328
  ldr  r2, =_sbss
 8005534:	20000328 	.word	0x20000328
  ldr  r3, = _ebss
 8005538:	20016f14 	.word	0x20016f14

0800553c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800553c:	e7fe      	b.n	800553c <ADC_IRQHandler>

0800553e <eye>:
#include "../../Inc/Util/math_utils.h"


void eye(int dim, float A[dim][dim]) {
 800553e:	b490      	push	{r4, r7}
 8005540:	b086      	sub	sp, #24
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	1e43      	subs	r3, r0, #1
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	4603      	mov	r3, r0
 8005550:	4619      	mov	r1, r3
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	f04f 0400 	mov.w	r4, #0
 800555e:	0154      	lsls	r4, r2, #5
 8005560:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005564:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	e02b      	b.n	80055c4 <eye+0x86>
        for(int j = 0; j < dim; j++){
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e021      	b.n	80055b6 <eye+0x78>
            if (i == j){
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	429a      	cmp	r2, r3
 8005578:	d10d      	bne.n	8005596 <eye+0x58>
				A[i][j] = 1;
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	fb03 f302 	mul.w	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	441a      	add	r2, r3
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e00c      	b.n	80055b0 <eye+0x72>
			} else {
				A[i][j] = 0;
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	fb03 f302 	mul.w	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	441a      	add	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3301      	adds	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	dbd9      	blt.n	8005572 <eye+0x34>
	for(int i = 0; i < dim; i++){
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	dbcf      	blt.n	800556c <eye+0x2e>
			}
        }
    }
}
 80055cc:	bf00      	nop
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc90      	pop	{r4, r7}
 80055d4:	4770      	bx	lr

080055d6 <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 80055d6:	b4b0      	push	{r4, r5, r7}
 80055d8:	b089      	sub	sp, #36	; 0x24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	68b8      	ldr	r0, [r7, #8]
 80055e6:	1e43      	subs	r3, r0, #1
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	4603      	mov	r3, r0
 80055ec:	4619      	mov	r1, r3
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	f04f 0400 	mov.w	r4, #0
 80055fa:	0154      	lsls	r4, r2, #5
 80055fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005600:	014b      	lsls	r3, r1, #5
 8005602:	68fd      	ldr	r5, [r7, #12]
 8005604:	1e6b      	subs	r3, r5, #1
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	462b      	mov	r3, r5
 800560a:	4619      	mov	r1, r3
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	f04f 0400 	mov.w	r4, #0
 8005618:	0154      	lsls	r4, r2, #5
 800561a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800561e:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	e022      	b.n	800566c <transpose+0x96>
		for(int j = 0; j < n; j++){
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	e018      	b.n	800565e <transpose+0x88>
			A_T[j][i] = A[i][j];
 800562c:	4602      	mov	r2, r0
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	fb03 f302 	mul.w	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	441a      	add	r2, r3
 800563a:	4629      	mov	r1, r5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	fb03 f301 	mul.w	r3, r3, r1
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	4419      	add	r1, r3
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	3301      	adds	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	dbe2      	blt.n	800562c <transpose+0x56>
	for(int i = 0; i < m; i++){
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3301      	adds	r3, #1
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	429a      	cmp	r2, r3
 8005672:	dbd8      	blt.n	8005626 <transpose+0x50>
		}
	}
}
 8005674:	bf00      	nop
 8005676:	3724      	adds	r7, #36	; 0x24
 8005678:	46bd      	mov	sp, r7
 800567a:	bcb0      	pop	{r4, r5, r7}
 800567c:	4770      	bx	lr

0800567e <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 800567e:	b480      	push	{r7}
 8005680:	b087      	sub	sp, #28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e016      	b.n	80056c0 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4413      	add	r3, r2
 800569a:	ed93 7a00 	vldr	s14, [r3]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	edd3 7a00 	vldr	s15, [r3]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	3301      	adds	r3, #1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	dbe4      	blt.n	8005692 <vecadd+0x14>
	}
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e016      	b.n	8005716 <vecsub+0x42>
		c[i] = a[i] - b[i];
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	4413      	add	r3, r2
 80056f0:	ed93 7a00 	vldr	s14, [r3]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	edd3 7a00 	vldr	s15, [r3]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	4413      	add	r3, r2
 8005708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800570c:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3301      	adds	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	429a      	cmp	r2, r3
 800571c:	dbe4      	blt.n	80056e8 <vecsub+0x14>
	}
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <matadd>:
    for(int i = 0; i < n; i++){
        b[i] = scalar * a[i];
    }
}

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 800572a:	b4f0      	push	{r4, r5, r6, r7}
 800572c:	b08a      	sub	sp, #40	; 0x28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	68b8      	ldr	r0, [r7, #8]
 800573a:	1e43      	subs	r3, r0, #1
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
 800573e:	4603      	mov	r3, r0
 8005740:	4619      	mov	r1, r3
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	f04f 0400 	mov.w	r4, #0
 800574e:	0154      	lsls	r4, r2, #5
 8005750:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005754:	014b      	lsls	r3, r1, #5
 8005756:	68bd      	ldr	r5, [r7, #8]
 8005758:	1e6b      	subs	r3, r5, #1
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	462b      	mov	r3, r5
 800575e:	4619      	mov	r1, r3
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	0154      	lsls	r4, r2, #5
 800576e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005772:	014b      	lsls	r3, r1, #5
 8005774:	68be      	ldr	r6, [r7, #8]
 8005776:	1e73      	subs	r3, r6, #1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	4633      	mov	r3, r6
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	f04f 0400 	mov.w	r4, #0
 800578a:	0154      	lsls	r4, r2, #5
 800578c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005790:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	e032      	b.n	80057fe <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8005798:	2300      	movs	r3, #0
 800579a:	623b      	str	r3, [r7, #32]
 800579c:	e028      	b.n	80057f0 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 800579e:	4602      	mov	r2, r0
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	fb03 f302 	mul.w	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	441a      	add	r2, r3
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	ed93 7a00 	vldr	s14, [r3]
 80057b6:	462a      	mov	r2, r5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	fb03 f302 	mul.w	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	441a      	add	r2, r3
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	edd3 7a00 	vldr	s15, [r3]
 80057ce:	4632      	mov	r2, r6
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	fb03 f302 	mul.w	r3, r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057da:	441a      	add	r2, r3
 80057dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	3301      	adds	r3, #1
 80057ee:	623b      	str	r3, [r7, #32]
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	dbd2      	blt.n	800579e <matadd+0x74>
	for(int i = 0; i < m; i++){
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	429a      	cmp	r2, r3
 8005804:	dbc8      	blt.n	8005798 <matadd+0x6e>
        }
    }
}
 8005806:	bf00      	nop
 8005808:	3728      	adds	r7, #40	; 0x28
 800580a:	46bd      	mov	sp, r7
 800580c:	bcf0      	pop	{r4, r5, r6, r7}
 800580e:	4770      	bx	lr

08005810 <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8005810:	b4f0      	push	{r4, r5, r6, r7}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	68b8      	ldr	r0, [r7, #8]
 8005820:	1e43      	subs	r3, r0, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	4603      	mov	r3, r0
 8005826:	4619      	mov	r1, r3
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	0154      	lsls	r4, r2, #5
 8005836:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800583a:	014b      	lsls	r3, r1, #5
 800583c:	68bd      	ldr	r5, [r7, #8]
 800583e:	1e6b      	subs	r3, r5, #1
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	462b      	mov	r3, r5
 8005844:	4619      	mov	r1, r3
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	f04f 0400 	mov.w	r4, #0
 8005852:	0154      	lsls	r4, r2, #5
 8005854:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005858:	014b      	lsls	r3, r1, #5
 800585a:	68be      	ldr	r6, [r7, #8]
 800585c:	1e73      	subs	r3, r6, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	4633      	mov	r3, r6
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	0154      	lsls	r4, r2, #5
 8005872:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005876:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8005878:	2300      	movs	r3, #0
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	e032      	b.n	80058e4 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 800587e:	2300      	movs	r3, #0
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	e028      	b.n	80058d6 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8005884:	4602      	mov	r2, r0
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	fb03 f302 	mul.w	r3, r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	441a      	add	r2, r3
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	ed93 7a00 	vldr	s14, [r3]
 800589c:	462a      	mov	r2, r5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	fb03 f302 	mul.w	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	441a      	add	r2, r3
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	edd3 7a00 	vldr	s15, [r3]
 80058b4:	4632      	mov	r2, r6
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	fb03 f302 	mul.w	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c0:	441a      	add	r2, r3
 80058c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	3301      	adds	r3, #1
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	dbd2      	blt.n	8005884 <matsub+0x74>
	for(int i = 0; i < m; i++){
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	3301      	adds	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	dbc8      	blt.n	800587e <matsub+0x6e>
        }
    }
}
 80058ec:	bf00      	nop
 80058ee:	3728      	adds	r7, #40	; 0x28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bcf0      	pop	{r4, r5, r6, r7}
 80058f4:	4770      	bx	lr

080058f6 <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 80058f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f8:	b08d      	sub	sp, #52	; 0x34
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6178      	str	r0, [r7, #20]
 80058fe:	6139      	str	r1, [r7, #16]
 8005900:	60fa      	str	r2, [r7, #12]
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	693e      	ldr	r6, [r7, #16]
 8005906:	1e73      	subs	r3, r6, #1
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	4633      	mov	r3, r6
 800590c:	4619      	mov	r1, r3
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	f04f 0400 	mov.w	r4, #0
 800591a:	0154      	lsls	r4, r2, #5
 800591c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005920:	014b      	lsls	r3, r1, #5
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	3b01      	subs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	4613      	mov	r3, r2
 800592e:	4619      	mov	r1, r3
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	0154      	lsls	r4, r2, #5
 800593e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005942:	014b      	lsls	r3, r1, #5
 8005944:	68fd      	ldr	r5, [r7, #12]
 8005946:	1e6b      	subs	r3, r5, #1
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	462b      	mov	r3, r5
 800594c:	4619      	mov	r1, r3
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	0154      	lsls	r4, r2, #5
 800595c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005960:	014b      	lsls	r3, r1, #5
	if (reset) {
 8005962:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	461a      	mov	r2, r3
 8005976:	2100      	movs	r1, #0
 8005978:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800597a:	f00b f830 	bl	80109de <memset>
	}
	for(int i = 0; i < m; i++){
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
 8005982:	e04a      	b.n	8005a1a <matmul+0x124>
        for(int j = 0; j < o; j++){
 8005984:	2300      	movs	r3, #0
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
 8005988:	e040      	b.n	8005a0c <matmul+0x116>
            for(int k = 0; k < n; k++){
 800598a:	2300      	movs	r3, #0
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800598e:	e036      	b.n	80059fe <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8005990:	4632      	mov	r2, r6
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	fb03 f302 	mul.w	r3, r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	441a      	add	r2, r3
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	ed93 7a00 	vldr	s14, [r3]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	fb03 f302 	mul.w	r3, r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b4:	441a      	add	r2, r3
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	edd3 7a00 	vldr	s15, [r3]
 80059c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c4:	462a      	mov	r2, r5
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	fb03 f302 	mul.w	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d0:	441a      	add	r2, r3
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	462a      	mov	r2, r5
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	fb03 f302 	mul.w	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059e8:	441a      	add	r2, r3
 80059ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	3301      	adds	r3, #1
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	dbc4      	blt.n	8005990 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	3301      	adds	r3, #1
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	dbba      	blt.n	800598a <matmul+0x94>
	for(int i = 0; i < m; i++){
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	3301      	adds	r3, #1
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	dbb0      	blt.n	8005984 <matmul+0x8e>
            }
        }
    }
}
 8005a22:	bf00      	nop
 8005a24:	3734      	adds	r7, #52	; 0x34
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a2a <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8005a2a:	b5b0      	push	{r4, r5, r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	68bd      	ldr	r5, [r7, #8]
 8005a3a:	1e6b      	subs	r3, r5, #1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	462b      	mov	r3, r5
 8005a40:	4619      	mov	r1, r3
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	0154      	lsls	r4, r2, #5
 8005a50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a54:	014b      	lsls	r3, r1, #5
	if (reset) {
 8005a56:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	461a      	mov	r2, r3
 8005a64:	2100      	movs	r1, #0
 8005a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a68:	f00a ffb9 	bl	80109de <memset>
	}
	for(int i = 0; i < m; i++){
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	e02e      	b.n	8005ad0 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e024      	b.n	8005ac2 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8005a78:	462a      	mov	r2, r5
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	fb03 f302 	mul.w	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	441a      	add	r2, r3
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	ed93 7a00 	vldr	s14, [r3]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	4413      	add	r3, r2
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	4413      	add	r3, r2
 8005aa8:	edd3 7a00 	vldr	s15, [r3]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab2:	4413      	add	r3, r2
 8005ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab8:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	dbd6      	blt.n	8005a78 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	3301      	adds	r3, #1
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	dbcc      	blt.n	8005a72 <matvecprod+0x48>
        }
    }
}
 8005ad8:	bf00      	nop
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bdb0      	pop	{r4, r5, r7, pc}

08005ae0 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int lower_triangular_inverse(int n, float *L) {
 8005ae0:	b480      	push	{r7}
 8005ae2:	b08b      	sub	sp, #44	; 0x2c
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
   int i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e01d      	b.n	8005b30 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	edd3 7a00 	vldr	s15, [r3]
 8005afa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b02:	d102      	bne.n	8005b0a <lower_triangular_inverse+0x2a>
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b08:	e076      	b.n	8005bf8 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	ed93 7a00 	vldr	s14, [r3]
 8005b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3301      	adds	r3, #1
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	dbdd      	blt.n	8005af4 <lower_triangular_inverse+0x14>
    }
    
    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8005b38:	2301      	movs	r3, #1
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	4413      	add	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e052      	b.n	8005bee <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8005b48:	2300      	movs	r3, #0
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e041      	b.n	8005bd6 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	e01b      	b.n	8005b9a <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4413      	add	r3, r2
 8005b6a:	ed93 7a00 	vldr	s14, [r3]
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	edd3 7a00 	vldr	s15, [r3]
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b86:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4413      	add	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	dbdf      	blt.n	8005b62 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4413      	add	r3, r2
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	eeb1 7a67 	vneg.f32	s14, s15
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4413      	add	r3, r2
 8005bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc2:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	dbb9      	blt.n	8005b52 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	3301      	adds	r3, #1
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4413      	add	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	dba8      	blt.n	8005b48 <lower_triangular_inverse+0x68>
        }
    }
    
    return 0;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	372c      	adds	r7, #44	; 0x2c
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int n, float A[n][n], float L[n][n]) {
 8005c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c08:	b08b      	sub	sp, #44	; 0x2c
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	68fe      	ldr	r6, [r7, #12]
 8005c14:	1e73      	subs	r3, r6, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	4633      	mov	r3, r6
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	f04f 0400 	mov.w	r4, #0
 8005c28:	0154      	lsls	r4, r2, #5
 8005c2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c2e:	014b      	lsls	r3, r1, #5
 8005c30:	68fd      	ldr	r5, [r7, #12]
 8005c32:	1e6b      	subs	r3, r5, #1
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	462b      	mov	r3, r5
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	0154      	lsls	r4, r2, #5
 8005c48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c4c:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f00a febe 	bl	80109de <memset>
    for (int i = 0; i < n; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e09f      	b.n	8005da8 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e093      	b.n	8005d96 <cholesky+0x192>
            float s = 0;
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
 8005c78:	e022      	b.n	8005cc0 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	fb03 f302 	mul.w	r3, r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	441a      	add	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	ed93 7a00 	vldr	s14, [r3]
 8005c92:	462a      	mov	r2, r5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	fb03 f302 	mul.w	r3, r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	441a      	add	r2, r3
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	edd3 7a00 	vldr	s15, [r3]
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	ed97 7a08 	vldr	s14, [r7, #32]
 8005cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb6:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	dbd8      	blt.n	8005c7a <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d116      	bne.n	8005cfe <cholesky+0xfa>
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	fb03 f302 	mul.w	r3, r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	441a      	add	r2, r3
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	ed93 7a00 	vldr	s14, [r3]
 8005ce8:	edd7 7a08 	vldr	s15, [r7, #32]
 8005cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf4:	f00d fee8 	bl	8013ac8 <sqrtf>
 8005cf8:	ee10 1a10 	vmov	r1, s0
 8005cfc:	e03d      	b.n	8005d7a <cholesky+0x176>
 8005cfe:	462a      	mov	r2, r5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	fb03 f302 	mul.w	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fa fc17 	bl	8000548 <__aeabi_f2d>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4623      	mov	r3, r4
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	4925      	ldr	r1, [pc, #148]	; (8005dbc <cholesky+0x1b8>)
 8005d28:	f7fa fd90 	bl	800084c <__aeabi_ddiv>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	4698      	mov	r8, r3
 8005d32:	46a1      	mov	r9, r4
 8005d34:	4632      	mov	r2, r6
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	fb03 f302 	mul.w	r3, r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	441a      	add	r2, r3
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	ed93 7a00 	vldr	s14, [r3]
 8005d4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d54:	ee17 0a90 	vmov	r0, s15
 8005d58:	f7fa fbf6 	bl	8000548 <__aeabi_f2d>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	4640      	mov	r0, r8
 8005d66:	4649      	mov	r1, r9
 8005d68:	f7fa fc46 	bl	80005f8 <__aeabi_dmul>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4618      	mov	r0, r3
 8005d72:	4621      	mov	r1, r4
 8005d74:	f7fa ff38 	bl	8000be8 <__aeabi_d2f>
 8005d78:	4601      	mov	r1, r0
 8005d7a:	462a      	mov	r2, r5
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	fb03 f302 	mul.w	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	441a      	add	r2, r3
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	f6ff af66 	blt.w	8005c6e <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3301      	adds	r3, #1
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	f6ff af5b 	blt.w	8005c68 <cholesky+0x64>
        }
}
 8005db2:	bf00      	nop
 8005db4:	372c      	adds	r7, #44	; 0x2c
 8005db6:	46bd      	mov	sp, r7
 8005db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dbc:	3ff00000 	.word	0x3ff00000

08005dc0 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int n, float A[n][n], float inverse[n][n], float lambda) {
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	b090      	sub	sp, #64	; 0x40
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	ed87 0a00 	vstr	s0, [r7]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1e5a      	subs	r2, r3, #1
 8005dd6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	f04f 0400 	mov.w	r4, #0
 8005de6:	0154      	lsls	r4, r2, #5
 8005de8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005dec:	014b      	lsls	r3, r1, #5
 8005dee:	68fd      	ldr	r5, [r7, #12]
 8005df0:	1e6b      	subs	r3, r5, #1
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df4:	462b      	mov	r3, r5
 8005df6:	4619      	mov	r1, r3
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	f04f 0400 	mov.w	r4, #0
 8005e04:	0154      	lsls	r4, r2, #5
 8005e06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e0a:	014b      	lsls	r3, r1, #5
 8005e0c:	466b      	mov	r3, sp
 8005e0e:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	68fe      	ldr	r6, [r7, #12]
 8005e14:	1e43      	subs	r3, r0, #1
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	f04f 0400 	mov.w	r4, #0
 8005e28:	0154      	lsls	r4, r2, #5
 8005e2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e2e:	014b      	lsls	r3, r1, #5
 8005e30:	4603      	mov	r3, r0
 8005e32:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8005e36:	1e73      	subs	r3, r6, #1
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	4633      	mov	r3, r6
 8005e44:	f04f 0400 	mov.w	r4, #0
 8005e48:	fb03 fe02 	mul.w	lr, r3, r2
 8005e4c:	fb01 fc04 	mul.w	ip, r1, r4
 8005e50:	44f4      	add	ip, lr
 8005e52:	fba1 3403 	umull	r3, r4, r1, r3
 8005e56:	eb0c 0204 	add.w	r2, ip, r4
 8005e5a:	4614      	mov	r4, r2
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	0162      	lsls	r2, r4, #5
 8005e66:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005e6a:	0159      	lsls	r1, r3, #5
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	4633      	mov	r3, r6
 8005e76:	f04f 0400 	mov.w	r4, #0
 8005e7a:	fb03 fe02 	mul.w	lr, r3, r2
 8005e7e:	fb01 fc04 	mul.w	ip, r1, r4
 8005e82:	44f4      	add	ip, lr
 8005e84:	fba1 3403 	umull	r3, r4, r1, r3
 8005e88:	eb0c 0204 	add.w	r2, ip, r4
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	f04f 0100 	mov.w	r1, #0
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	0162      	lsls	r2, r4, #5
 8005e98:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005e9c:	0159      	lsls	r1, r3, #5
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	3307      	adds	r3, #7
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	ebad 0d03 	sub.w	sp, sp, r3
 8005eb4:	466b      	mov	r3, sp
 8005eb6:	3303      	adds	r3, #3
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8005ebe:	69f8      	ldr	r0, [r7, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	f00a fd7b 	bl	80109c8 <memcpy>
    for (int i = 0; i < n; i++) {
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed6:	e022      	b.n	8005f1e <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda; 
 8005ed8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee0:	fb01 f103 	mul.w	r1, r1, r3
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	440b      	add	r3, r1
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	ed93 7a00 	vldr	s14, [r3]
 8005ef0:	edd7 6a00 	vldr	s13, [r7]
 8005ef4:	edd7 7a00 	vldr	s15, [r7]
 8005ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005efc:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f08:	fb01 f103 	mul.w	r1, r1, r3
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	440b      	add	r3, r1
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	dbd8      	blt.n	8005ed8 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	68fe      	ldr	r6, [r7, #12]
 8005f2a:	466b      	mov	r3, sp
 8005f2c:	469a      	mov	sl, r3
 8005f2e:	1e43      	subs	r3, r0, #1
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	4603      	mov	r3, r0
 8005f34:	4619      	mov	r1, r3
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	f04f 0400 	mov.w	r4, #0
 8005f42:	0154      	lsls	r4, r2, #5
 8005f44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f48:	014b      	lsls	r3, r1, #5
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8005f50:	1e73      	subs	r3, r6, #1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	4603      	mov	r3, r0
 8005f56:	4619      	mov	r1, r3
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	4633      	mov	r3, r6
 8005f5e:	f04f 0400 	mov.w	r4, #0
 8005f62:	fb03 fe02 	mul.w	lr, r3, r2
 8005f66:	fb01 fc04 	mul.w	ip, r1, r4
 8005f6a:	44f4      	add	ip, lr
 8005f6c:	fba1 3403 	umull	r3, r4, r1, r3
 8005f70:	eb0c 0204 	add.w	r2, ip, r4
 8005f74:	4614      	mov	r4, r2
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	0162      	lsls	r2, r4, #5
 8005f80:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005f84:	0159      	lsls	r1, r3, #5
 8005f86:	4603      	mov	r3, r0
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	4633      	mov	r3, r6
 8005f90:	f04f 0400 	mov.w	r4, #0
 8005f94:	fb03 fe02 	mul.w	lr, r3, r2
 8005f98:	fb01 fc04 	mul.w	ip, r1, r4
 8005f9c:	44f4      	add	ip, lr
 8005f9e:	fba1 3403 	umull	r3, r4, r1, r3
 8005fa2:	eb0c 0204 	add.w	r2, ip, r4
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	0162      	lsls	r2, r4, #5
 8005fb2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005fb6:	0159      	lsls	r1, r3, #5
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4632      	mov	r2, r6
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	3303      	adds	r3, #3
 8005fc4:	3307      	adds	r3, #7
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	ebad 0d03 	sub.w	sp, sp, r3
 8005fce:	466b      	mov	r3, sp
 8005fd0:	3303      	adds	r3, #3
 8005fd2:	089b      	lsrs	r3, r3, #2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff fe10 	bl	8005c04 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff fd79 	bl	8005ae0 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f00a fcee 	bl	80109de <memset>
    for(int i = 0; i < n; i++){
 8006002:	2300      	movs	r3, #0
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006006:	e04e      	b.n	80060a6 <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8006008:	2300      	movs	r3, #0
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
 800600c:	e044      	b.n	8006098 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 800600e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	4293      	cmp	r3, r2
 8006014:	bfb8      	it	lt
 8006016:	4613      	movlt	r3, r2
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
 800601a:	e036      	b.n	800608a <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 800601c:	462a      	mov	r2, r5
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	fb03 f302 	mul.w	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	441a      	add	r2, r3
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	ed93 7a00 	vldr	s14, [r3]
 8006034:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800603c:	fb01 f103 	mul.w	r1, r1, r3
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	440b      	add	r3, r1
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	edd3 6a00 	vldr	s13, [r3]
 800604c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006054:	fb01 f103 	mul.w	r1, r1, r3
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	440b      	add	r3, r1
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	edd3 7a00 	vldr	s15, [r3]
 8006064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006068:	462a      	mov	r2, r5
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	fb03 f302 	mul.w	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	441a      	add	r2, r3
 8006076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	3301      	adds	r3, #1
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
 800608a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	dbc4      	blt.n	800601c <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	3301      	adds	r3, #1
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	429a      	cmp	r2, r3
 800609e:	dbb6      	blt.n	800600e <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	3301      	adds	r3, #1
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	dbac      	blt.n	8006008 <cholesky_inverse+0x248>
 80060ae:	46d5      	mov	sp, sl
 80060b0:	46cd      	mov	sp, r9
            }
        }
    }
}
 80060b2:	bf00      	nop
 80060b4:	3740      	adds	r7, #64	; 0x40
 80060b6:	46bd      	mov	sp, r7
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060bc <init_env>:
#include "../Inc/env.h"

void init_env(env_t *env) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 80060c4:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80060c8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80060e4 <init_env+0x28>
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f80b 	bl	80060e8 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 80060d2:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f84e 	bl	8006178 <update_env>
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	47c5e680 	.word	0x47c5e680

080060e8 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80060f4:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 80060f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80060fc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006168 <calibrate_env+0x80>
 8006100:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	edc3 7a01 	vstr	s15, [r3, #4]
	env->p_g = p_g; //
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	601a      	str	r2, [r3, #0]
	env->rho_g = RHO_REFERENCE * ((env->p_g / PRESSURE_REFERENCE) * ((TEMPERATURE_REFERENCE+T_0) / env->T_g));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	edd3 7a00 	vldr	s15, [r3]
 8006116:	eddf 6a15 	vldr	s13, [pc, #84]	; 800616c <calibrate_env+0x84>
 800611a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	edd3 6a01 	vldr	s13, [r3, #4]
 8006124:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8006170 <calibrate_env+0x88>
 8006128:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800612c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006130:	ee17 0a90 	vmov	r0, s15
 8006134:	f7fa fa08 	bl	8000548 <__aeabi_f2d>
 8006138:	a309      	add	r3, pc, #36	; (adr r3, 8006160 <calibrate_env+0x78>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa fa5b 	bl	80005f8 <__aeabi_dmul>
 8006142:	4603      	mov	r3, r0
 8006144:	460c      	mov	r4, r1
 8006146:	4618      	mov	r0, r3
 8006148:	4621      	mov	r1, r4
 800614a:	f7fa fd4d 	bl	8000be8 <__aeabi_d2f>
 800614e:	4602      	mov	r2, r0
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	bd90      	pop	{r4, r7, pc}
 800615c:	f3af 8000 	nop.w
 8006160:	9999999a 	.word	0x9999999a
 8006164:	3ff39999 	.word	0x3ff39999
 8006168:	43889333 	.word	0x43889333
 800616c:	47c5e680 	.word	0x47c5e680
 8006170:	43901333 	.word	0x43901333
 8006174:	00000000 	.word	0x00000000

08006178 <update_env>:

void update_env(env_t *env, float T) {
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8006184:	edd7 7a00 	vldr	s15, [r7]
 8006188:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80061e0 <update_env+0x68>
 800618c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	edc3 7a03 	vstr	s15, [r3, #12]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa f9d4 	bl	8000548 <__aeabi_f2d>
 80061a0:	a30d      	add	r3, pc, #52	; (adr r3, 80061d8 <update_env+0x60>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa fa27 	bl	80005f8 <__aeabi_dmul>
 80061aa:	4603      	mov	r3, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	4618      	mov	r0, r3
 80061b0:	4621      	mov	r1, r4
 80061b2:	f7fa fd19 	bl	8000be8 <__aeabi_d2f>
 80061b6:	4603      	mov	r3, r0
 80061b8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80061bc:	ee00 3a10 	vmov	s0, r3
 80061c0:	f00d fb1e 	bl	8013800 <powf>
 80061c4:	eef0 7a40 	vmov.f32	s15, s0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd90      	pop	{r4, r7, pc}
 80061d6:	bf00      	nop
 80061d8:	d067f4fc 	.word	0xd067f4fc
 80061dc:	40791e18 	.word	0x40791e18
 80061e0:	43889333 	.word	0x43889333

080061e4 <mach_number>:

float mach_number(env_t *env, float V_x) {
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 80061f0:	edd7 7a00 	vldr	s15, [r7]
 80061f4:	eef0 6ae7 	vabs.f32	s13, s15
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80061fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006202:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	ee07 3a90 	vmov	s15, r3
}
 800620c:	eeb0 0a67 	vmov.f32	s0, s15
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	0000      	movs	r0, r0
 800621c:	0000      	movs	r0, r0
	...

08006220 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e043      	b.n	80062bc <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	4413      	add	r3, r2
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03a      	beq.n	80062b6 <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4618      	mov	r0, r3
 8006246:	f7fa f97f 	bl	8000548 <__aeabi_f2d>
 800624a:	a322      	add	r3, pc, #136	; (adr r3, 80062d4 <pressure2altitudeAGL+0xb4>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa fafc 	bl	800084c <__aeabi_ddiv>
 8006254:	4603      	mov	r3, r0
 8006256:	460c      	mov	r4, r1
 8006258:	4625      	mov	r5, r4
 800625a:	461c      	mov	r4, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	ed93 7a00 	vldr	s14, [r3]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	edd3 7a00 	vldr	s15, [r3]
 800626e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006272:	eddf 0a17 	vldr	s1, [pc, #92]	; 80062d0 <pressure2altitudeAGL+0xb0>
 8006276:	eeb0 0a66 	vmov.f32	s0, s13
 800627a:	f00d fac1 	bl	8013800 <powf>
 800627e:	eeb0 7a40 	vmov.f32	s14, s0
 8006282:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006286:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800628a:	ee17 0a90 	vmov	r0, s15
 800628e:	f7fa f95b 	bl	8000548 <__aeabi_f2d>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	f7fa f9ad 	bl	80005f8 <__aeabi_dmul>
 800629e:	4603      	mov	r3, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	4618      	mov	r0, r3
 80062a4:	4621      	mov	r1, r4
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ac:	18d4      	adds	r4, r2, r3
 80062ae:	f7fa fc9b 	bl	8000be8 <__aeabi_d2f>
 80062b2:	4603      	mov	r3, r0
 80062b4:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	3301      	adds	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	dbb7      	blt.n	8006234 <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80062c4:	bf00      	nop
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bdb0      	pop	{r4, r5, r7, pc}
 80062cc:	f3af 8000 	nop.w
 80062d0:	3e42c42c 	.word	0x3e42c42c
 80062d4:	76c8b439 	.word	0x76c8b439
 80062d8:	3f7a9fbe 	.word	0x3f7a9fbe
 80062dc:	00000000 	.word	0x00000000

080062e0 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 80062e0:	b5b0      	push	{r4, r5, r7, lr}
 80062e2:	ed2d 8b02 	vpush	{d8}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e047      	b.n	8006388 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	4413      	add	r3, r2
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d03e      	beq.n	8006382 <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	ed93 8a00 	vldr	s16, [r3]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4413      	add	r3, r2
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f7fa f917 	bl	8000548 <__aeabi_f2d>
 800631a:	a323      	add	r3, pc, #140	; (adr r3, 80063a8 <altitudeAGL2pressure+0xc8>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7fa f96a 	bl	80005f8 <__aeabi_dmul>
 8006324:	4603      	mov	r3, r0
 8006326:	460c      	mov	r4, r1
 8006328:	4625      	mov	r5, r4
 800632a:	461c      	mov	r4, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4618      	mov	r0, r3
 8006332:	f7fa f909 	bl	8000548 <__aeabi_f2d>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4620      	mov	r0, r4
 800633c:	4629      	mov	r1, r5
 800633e:	f7fa fa85 	bl	800084c <__aeabi_ddiv>
 8006342:	4603      	mov	r3, r0
 8006344:	460c      	mov	r4, r1
 8006346:	461a      	mov	r2, r3
 8006348:	4623      	mov	r3, r4
 800634a:	f04f 0000 	mov.w	r0, #0
 800634e:	4914      	ldr	r1, [pc, #80]	; (80063a0 <altitudeAGL2pressure+0xc0>)
 8006350:	f7f9 ff9a 	bl	8000288 <__aeabi_dsub>
 8006354:	4603      	mov	r3, r0
 8006356:	460c      	mov	r4, r1
 8006358:	4618      	mov	r0, r3
 800635a:	4621      	mov	r1, r4
 800635c:	f7fa fc44 	bl	8000be8 <__aeabi_d2f>
 8006360:	4603      	mov	r3, r0
 8006362:	eddf 0a10 	vldr	s1, [pc, #64]	; 80063a4 <altitudeAGL2pressure+0xc4>
 8006366:	ee00 3a10 	vmov	s0, r3
 800636a:	f00d fa49 	bl	8013800 <powf>
 800636e:	eef0 7a40 	vmov.f32	s15, s0
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006378:	4413      	add	r3, r2
 800637a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800637e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	3301      	adds	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	dbb3      	blt.n	80062f8 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	ecbd 8b02 	vpop	{d8}
 800639a:	bdb0      	pop	{r4, r5, r7, pc}
 800639c:	f3af 8000 	nop.w
 80063a0:	3ff00000 	.word	0x3ff00000
 80063a4:	40a83e1f 	.word	0x40a83e1f
 80063a8:	76c8b439 	.word	0x76c8b439
 80063ac:	3f7a9fbe 	.word	0x3f7a9fbe

080063b0 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fa f8c1 	bl	8000548 <__aeabi_f2d>
 80063c6:	a323      	add	r3, pc, #140	; (adr r3, 8006454 <altitude_gradient+0xa4>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7fa f914 	bl	80005f8 <__aeabi_dmul>
 80063d0:	4603      	mov	r3, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	4625      	mov	r5, r4
 80063d6:	461c      	mov	r4, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fa f8b3 	bl	8000548 <__aeabi_f2d>
 80063e2:	a31e      	add	r3, pc, #120	; (adr r3, 800645c <altitude_gradient+0xac>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7fa f906 	bl	80005f8 <__aeabi_dmul>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4620      	mov	r0, r4
 80063f2:	4629      	mov	r1, r5
 80063f4:	f7fa fa2a 	bl	800084c <__aeabi_ddiv>
 80063f8:	4603      	mov	r3, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	4625      	mov	r5, r4
 80063fe:	461c      	mov	r4, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	edd3 7a00 	vldr	s15, [r3]
 8006406:	ed97 7a00 	vldr	s14, [r7]
 800640a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800640e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006450 <altitude_gradient+0xa0>
 8006412:	eeb0 0a66 	vmov.f32	s0, s13
 8006416:	f00d f9f3 	bl	8013800 <powf>
 800641a:	ee10 3a10 	vmov	r3, s0
 800641e:	4618      	mov	r0, r3
 8006420:	f7fa f892 	bl	8000548 <__aeabi_f2d>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4620      	mov	r0, r4
 800642a:	4629      	mov	r1, r5
 800642c:	f7fa f8e4 	bl	80005f8 <__aeabi_dmul>
 8006430:	4603      	mov	r3, r0
 8006432:	460c      	mov	r4, r1
 8006434:	4618      	mov	r0, r3
 8006436:	4621      	mov	r1, r4
 8006438:	f7fa fbd6 	bl	8000be8 <__aeabi_d2f>
 800643c:	4603      	mov	r3, r0
 800643e:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	ee07 3a90 	vmov	s15, r3
}
 8006446:	eeb0 0a67 	vmov.f32	s0, s15
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bdb0      	pop	{r4, r5, r7, pc}
 8006450:	bf4f4ef5 	.word	0xbf4f4ef5
 8006454:	2725aefd 	.word	0x2725aefd
 8006458:	c071f0ed 	.word	0xc071f0ed
 800645c:	51eb851f 	.word	0x51eb851f
 8006460:	40239eb8 	.word	0x40239eb8
 8006464:	00000000 	.word	0x00000000

08006468 <detect_flight_phase>:
#include "../Inc/flight_phase_detection.h"

void detect_flight_phase(timestamp_t t, flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data)
{   
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
    /* timestamp_t t needs to be the tick time in [ms] */

    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	3b01      	subs	r3, #1
 800647a:	2b09      	cmp	r3, #9
 800647c:	f200 81d1 	bhi.w	8006822 <detect_flight_phase+0x3ba>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <detect_flight_phase+0x20>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064b1 	.word	0x080064b1
 800648c:	08006823 	.word	0x08006823
 8006490:	0800655b 	.word	0x0800655b
 8006494:	080065ad 	.word	0x080065ad
 8006498:	08006823 	.word	0x08006823
 800649c:	08006823 	.word	0x08006823
 80064a0:	080065ff 	.word	0x080065ff
 80064a4:	08006651 	.word	0x08006651
 80064a8:	08006735 	.word	0x08006735
 80064ac:	080066b3 	.word	0x080066b3
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > FPD_LIFTOFF_ACC_THRESH) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064bc:	eddf 6abf 	vldr	s13, [pc, #764]	; 80067bc <detect_flight_phase+0x354>
 80064c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064c4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80064c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d0:	dd18      	ble.n	8006504 <detect_flight_phase+0x9c>
                flight_phase_detection->safety_counter[0] += 1;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	3301      	adds	r3, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	b25a      	sxtb	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	f340 819b 	ble.w	8006826 <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2203      	movs	r2, #3
 80064f4:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2200      	movs	r2, #0
 80064fa:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	725a      	strb	r2, [r3, #9]
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 8006502:	e190      	b.n	8006826 <detect_flight_phase+0x3be>
            else if (((float)(state_est_data->position_world[2])) / 1000 > FPD_LIFTOFF_ALT_THRESH) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006510:	eddf 6aaa 	vldr	s13, [pc, #680]	; 80067bc <detect_flight_phase+0x354>
 8006514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006518:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80067b0 <detect_flight_phase+0x348>
 800651c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006524:	dc00      	bgt.n	8006528 <detect_flight_phase+0xc0>
        break;
 8006526:	e17e      	b.n	8006826 <detect_flight_phase+0x3be>
                flight_phase_detection->safety_counter[1] += 1;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	3301      	adds	r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	b25a      	sxtb	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006540:	2b03      	cmp	r3, #3
 8006542:	f340 8170 	ble.w	8006826 <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2203      	movs	r2, #3
 800654a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2200      	movs	r2, #0
 8006556:	725a      	strb	r2, [r3, #9]
        break;
 8006558:	e165      	b.n	8006826 <detect_flight_phase+0x3be>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006566:	eddf 6a95 	vldr	s13, [pc, #596]	; 80067bc <detect_flight_phase+0x354>
 800656a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800656e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006576:	d400      	bmi.n	800657a <detect_flight_phase+0x112>
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 8006578:	e157      	b.n	800682a <detect_flight_phase+0x3c2>
                flight_phase_detection->safety_counter[0] += 1;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	3301      	adds	r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	b25a      	sxtb	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006592:	2b03      	cmp	r3, #3
 8006594:	f340 8149 	ble.w	800682a <detect_flight_phase+0x3c2>
                    flight_phase_detection->flight_phase = COASTING;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2204      	movs	r2, #4
 800659c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2200      	movs	r2, #0
 80065a8:	725a      	strb	r2, [r3, #9]
        break;
 80065aa:	e13e      	b.n	800682a <detect_flight_phase+0x3c2>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #else
                if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065b8:	eddf 6a80 	vldr	s13, [pc, #512]	; 80067bc <detect_flight_phase+0x354>
 80065bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c8:	d400      	bmi.n	80065cc <detect_flight_phase+0x164>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #endif
        break;
 80065ca:	e130      	b.n	800682e <detect_flight_phase+0x3c6>
                    flight_phase_detection->safety_counter[0] += 1;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	3301      	adds	r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	b25a      	sxtb	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	721a      	strb	r2, [r3, #8]
                    if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	f340 8122 	ble.w	800682e <detect_flight_phase+0x3c6>
                        flight_phase_detection->flight_phase = DROGUE_DESCENT;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2208      	movs	r2, #8
 80065ee:	701a      	strb	r2, [r3, #0]
                        flight_phase_detection->safety_counter[0] = 0;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	721a      	strb	r2, [r3, #8]
                        flight_phase_detection->safety_counter[1] = 0;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2200      	movs	r2, #0
 80065fa:	725a      	strb	r2, [r3, #9]
        break;
 80065fc:	e117      	b.n	800682e <detect_flight_phase+0x3c6>
                }
            #endif
        break;

        case APOGEE_APPROACH:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800660a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80067bc <detect_flight_phase+0x354>
 800660e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661a:	d400      	bmi.n	800661e <detect_flight_phase+0x1b6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 800661c:	e109      	b.n	8006832 <detect_flight_phase+0x3ca>
                flight_phase_detection->safety_counter[0] += 1;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	3301      	adds	r3, #1
 8006628:	b2db      	uxtb	r3, r3
 800662a:	b25a      	sxtb	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006636:	2b03      	cmp	r3, #3
 8006638:	f340 80fb 	ble.w	8006832 <detect_flight_phase+0x3ca>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2208      	movs	r2, #8
 8006640:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2200      	movs	r2, #0
 8006646:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	725a      	strb	r2, [r3, #9]
        break;
 800664e:	e0f0      	b.n	8006832 <detect_flight_phase+0x3ca>

        case DROGUE_DESCENT:
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	ee07 3a90 	vmov	s15, r3
 8006658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800665c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80067bc <detect_flight_phase+0x354>
 8006660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006664:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80067b4 <detect_flight_phase+0x34c>
 8006668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800666c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006670:	d400      	bmi.n	8006674 <detect_flight_phase+0x20c>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 8006672:	e0e0      	b.n	8006836 <detect_flight_phase+0x3ce>
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80db 	beq.w	8006836 <detect_flight_phase+0x3ce>
                flight_phase_detection->safety_counter[0] += 1;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	3301      	adds	r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	b25a      	sxtb	r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006698:	2b03      	cmp	r3, #3
 800669a:	f340 80cc 	ble.w	8006836 <detect_flight_phase+0x3ce>
                    flight_phase_detection->flight_phase = MAIN_DESCENT;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	220a      	movs	r2, #10
 80066a2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2200      	movs	r2, #0
 80066a8:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	725a      	strb	r2, [r3, #9]
        break;
 80066b0:	e0c1      	b.n	8006836 <detect_flight_phase+0x3ce>
        
        case MAIN_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066be:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80067bc <detect_flight_phase+0x354>
 80066c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066c6:	eef0 7ae7 	vabs.f32	s15, s15
 80066ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d6:	d400      	bmi.n	80066da <detect_flight_phase+0x272>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 80066d8:	e0af      	b.n	800683a <detect_flight_phase+0x3d2>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066e6:	eddf 6a35 	vldr	s13, [pc, #212]	; 80067bc <detect_flight_phase+0x354>
 80066ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066ee:	eef0 7ae7 	vabs.f32	s15, s15
 80066f2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80067b8 <detect_flight_phase+0x350>
 80066f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	d400      	bmi.n	8006702 <detect_flight_phase+0x29a>
        break;
 8006700:	e09b      	b.n	800683a <detect_flight_phase+0x3d2>
                flight_phase_detection->safety_counter[0] += 1;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	3301      	adds	r3, #1
 800670c:	b2db      	uxtb	r3, r3
 800670e:	b25a      	sxtb	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800671a:	2b13      	cmp	r3, #19
 800671c:	f340 808d 	ble.w	800683a <detect_flight_phase+0x3d2>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	220b      	movs	r2, #11
 8006724:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2200      	movs	r2, #0
 800672a:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	725a      	strb	r2, [r3, #9]
        break;
 8006732:	e082      	b.n	800683a <detect_flight_phase+0x3d2>

        case BALLISTIC_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006740:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80067bc <detect_flight_phase+0x354>
 8006744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006748:	eef0 7ae7 	vabs.f32	s15, s15
 800674c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006758:	d536      	bpl.n	80067c8 <detect_flight_phase+0x360>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006766:	eddf 6a15 	vldr	s13, [pc, #84]	; 80067bc <detect_flight_phase+0x354>
 800676a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800676e:	eef0 7ae7 	vabs.f32	s15, s15
 8006772:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80067b8 <detect_flight_phase+0x350>
 8006776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677e:	d523      	bpl.n	80067c8 <detect_flight_phase+0x360>
                flight_phase_detection->safety_counter[0] += 1;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	3301      	adds	r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	b25a      	sxtb	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006798:	2b13      	cmp	r3, #19
 800679a:	dd41      	ble.n	8006820 <detect_flight_phase+0x3b8>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	220b      	movs	r2, #11
 80067a0:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 80067ae:	e037      	b.n	8006820 <detect_flight_phase+0x3b8>
 80067b0:	43160000 	.word	0x43160000
 80067b4:	43c80000 	.word	0x43c80000
 80067b8:	43480000 	.word	0x43480000
 80067bc:	447a0000 	.word	0x447a0000
 80067c0:	42700000 	.word	0x42700000
 80067c4:	49742400 	.word	0x49742400
                }
            }
            /* we assume a normal descent with parachute when the absolute velocity of the rocket in vertical direction is smaller than 40 m/s */
            else if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) < FPD_BALLISTIC_VEL_THRESH_LOW) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067d4:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 80067bc <detect_flight_phase+0x354>
 80067d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067dc:	eef0 7ae7 	vabs.f32	s15, s15
 80067e0:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80067c0 <detect_flight_phase+0x358>
 80067e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ec:	d400      	bmi.n	80067f0 <detect_flight_phase+0x388>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80067ee:	e026      	b.n	800683e <detect_flight_phase+0x3d6>
                flight_phase_detection->safety_counter[1] += 1;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	3301      	adds	r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	b25a      	sxtb	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006808:	2b03      	cmp	r3, #3
 800680a:	dd18      	ble.n	800683e <detect_flight_phase+0x3d6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2208      	movs	r2, #8
 8006810:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2200      	movs	r2, #0
 800681c:	725a      	strb	r2, [r3, #9]
        break;
 800681e:	e00e      	b.n	800683e <detect_flight_phase+0x3d6>
 8006820:	e00d      	b.n	800683e <detect_flight_phase+0x3d6>

        default:
        break;
 8006822:	bf00      	nop
 8006824:	e00c      	b.n	8006840 <detect_flight_phase+0x3d8>
        break;
 8006826:	bf00      	nop
 8006828:	e00a      	b.n	8006840 <detect_flight_phase+0x3d8>
        break;
 800682a:	bf00      	nop
 800682c:	e008      	b.n	8006840 <detect_flight_phase+0x3d8>
        break;
 800682e:	bf00      	nop
 8006830:	e006      	b.n	8006840 <detect_flight_phase+0x3d8>
        break;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <detect_flight_phase+0x3d8>
        break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <detect_flight_phase+0x3d8>
        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <detect_flight_phase+0x3d8>
        break;
 800683e:	bf00      	nop
    }

    flight_phase_detection->mach_number = (float)(state_est_data->mach_number) / 1000000;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800684c:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 80067c4 <detect_flight_phase+0x35c>
 8006850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	4618      	mov	r0, r3
 8006860:	f7f9 fe72 	bl	8000548 <__aeabi_f2d>
 8006864:	a312      	add	r3, pc, #72	; (adr r3, 80068b0 <detect_flight_phase+0x448>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f7fa f94b 	bl	8000b04 <__aeabi_dcmpge>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <detect_flight_phase+0x414>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2203      	movs	r2, #3
 8006878:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 800687a:	e013      	b.n	80068a4 <detect_flight_phase+0x43c>
    } else if (flight_phase_detection->mach_number >= 0.8)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4618      	mov	r0, r3
 8006882:	f7f9 fe61 	bl	8000548 <__aeabi_f2d>
 8006886:	a30c      	add	r3, pc, #48	; (adr r3, 80068b8 <detect_flight_phase+0x450>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7fa f93a 	bl	8000b04 <__aeabi_dcmpge>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <detect_flight_phase+0x436>
        flight_phase_detection->mach_regime = TRANSONIC;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2202      	movs	r2, #2
 800689a:	705a      	strb	r2, [r3, #1]
}
 800689c:	e002      	b.n	80068a4 <detect_flight_phase+0x43c>
        flight_phase_detection->mach_regime = SUBSONIC;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2201      	movs	r2, #1
 80068a2:	705a      	strb	r2, [r3, #1]
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	f3af 8000 	nop.w
 80068b0:	cccccccd 	.word	0xcccccccd
 80068b4:	3ff4cccc 	.word	0x3ff4cccc
 80068b8:	9999999a 	.word	0x9999999a
 80068bc:	3fe99999 	.word	0x3fe99999

080068c0 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	605a      	str	r2, [r3, #4]
    flight_phase_detection->safety_counter[0] = 0;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	721a      	strb	r2, [r3, #8]
    flight_phase_detection->safety_counter[1] = 0;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	725a      	strb	r2, [r3, #9]
    flight_phase_detection->t_bias_reset_start = -1;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	22ff      	movs	r2, #255	; 0xff
 80068ec:	729a      	strb	r2, [r3, #10]
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <reset_kf_state>:
#include "../Inc/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 80068fc:	b5b0      	push	{r4, r5, r7, lr}
 80068fe:	b0c8      	sub	sp, #288	; 0x120
 8006900:	af00      	add	r7, sp, #0
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	6018      	str	r0, [r3, #0]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{2.0E-4}, {2.0E-2}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 40) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 2.5E-2, 3.125E-4}, {0, 1.0E-0, 2.5E-2}, {0.0, 0.0, 1.0E-0}};
 8006906:	f107 030c 	add.w	r3, r7, #12
 800690a:	4a4b      	ldr	r2, [pc, #300]	; (8006a38 <reset_kf_state+0x13c>)
 800690c:	461c      	mov	r4, r3
 800690e:	4615      	mov	r5, r2
 8006910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{3.125E-4}, {2.5E-2}, {0.0}};
 800691c:	4a47      	ldr	r2, [pc, #284]	; (8006a3c <reset_kf_state+0x140>)
 800691e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006922:	ca07      	ldmia	r2, {r0, r1, r2}
 8006924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{3.125E-4}, {2.5E-2}, {0.0}};
 8006928:	4a44      	ldr	r2, [pc, #272]	; (8006a3c <reset_kf_state+0x140>)
 800692a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800692e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f107 010c 	add.w	r1, r7, #12
 800693c:	2224      	movs	r2, #36	; 0x24
 800693e:	4618      	mov	r0, r3
 8006940:	f00a f842 	bl	80109c8 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3348      	adds	r3, #72	; 0x48
 800694a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800694e:	220c      	movs	r2, #12
 8006950:	4618      	mov	r0, r3
 8006952:	f00a f839 	bl	80109c8 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3354      	adds	r3, #84	; 0x54
 800695c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006960:	220c      	movs	r2, #12
 8006962:	4618      	mov	r0, r3
 8006964:	f00a f830 	bl	80109c8 <memcpy>

        discretize(STATE_ESTIMATION_FREQUENCY, NUMBER_STATES, NUMBER_INPUTS, A, B, kf_state->Ad, kf_state->Bd);
        discretize(STATE_ESTIMATION_FREQUENCY, NUMBER_STATES, NUMBER_INPUTS, A, G, kf_state->Ad, kf_state->Gd);
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8006980:	4b2f      	ldr	r3, [pc, #188]	; (8006a40 <reset_kf_state+0x144>)
 8006982:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8006986:	461d      	mov	r5, r3
 8006988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800698a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800698c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800698e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	33c4      	adds	r3, #196	; 0xc4
 800699a:	f507 718a 	add.w	r1, r7, #276	; 0x114
 800699e:	220c      	movs	r2, #12
 80069a0:	4618      	mov	r0, r3
 80069a2:	f00a f811 	bl	80109c8 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	33d0      	adds	r3, #208	; 0xd0
 80069ac:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80069b0:	2224      	movs	r2, #36	; 0x24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f00a f808 	bl	80109c8 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	339c      	adds	r3, #156	; 0x9c
 80069be:	2204      	movs	r2, #4
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f00a f80b 	bl	80109de <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	33a0      	adds	r3, #160	; 0xa0
 80069ce:	2210      	movs	r2, #16
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f00a f803 	bl	80109de <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80069d8:	1d3b      	adds	r3, r7, #4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80069e0:	2208      	movs	r2, #8
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f009 fffa 	bl	80109de <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80069ea:	1d3b      	adds	r3, r7, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80069f2:	2202      	movs	r2, #2
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f009 fff1 	bl	80109de <memset>
    kf_state->num_z_active = 0;
 80069fc:	1d3b      	adds	r3, r7, #4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8006a06:	1d3b      	adds	r3, r7, #4
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3324      	adds	r3, #36	; 0x24
 8006a10:	2103      	movs	r1, #3
 8006a12:	2003      	movs	r0, #3
 8006a14:	f7fe fddf 	bl	80055d6 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8006a18:	1d3b      	adds	r3, r7, #4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006a20:	1d3b      	adds	r3, r7, #4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3360      	adds	r3, #96	; 0x60
 8006a26:	2101      	movs	r1, #1
 8006a28:	2003      	movs	r0, #3
 8006a2a:	f7fe fdd4 	bl	80055d6 <transpose>
}
 8006a2e:	bf00      	nop
 8006a30:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bdb0      	pop	{r4, r5, r7, pc}
 8006a38:	08015a3c 	.word	0x08015a3c
 8006a3c:	08015a60 	.word	0x08015a60
 8006a40:	08015a6c 	.word	0x08015a6c

08006a44 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af04      	add	r7, sp, #16
 8006a4a:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	33f4      	adds	r3, #244	; 0xf4
 8006a58:	2201      	movs	r2, #1
 8006a5a:	9201      	str	r2, [sp, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	4603      	mov	r3, r0
 8006a60:	460a      	mov	r2, r1
 8006a62:	2103      	movs	r1, #3
 8006a64:	2003      	movs	r0, #3
 8006a66:	f7fe ffe0 	bl	8005a2a <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	33f4      	adds	r3, #244	; 0xf4
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	9201      	str	r2, [sp, #4]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4603      	mov	r3, r0
 8006a82:	460a      	mov	r2, r1
 8006a84:	2101      	movs	r1, #1
 8006a86:	2003      	movs	r0, #3
 8006a88:	f7fe ffcf 	bl	8005a2a <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	33d0      	adds	r3, #208	; 0xd0
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8006a98:	2101      	movs	r1, #1
 8006a9a:	9102      	str	r1, [sp, #8]
 8006a9c:	9201      	str	r2, [sp, #4]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	2103      	movs	r1, #3
 8006aa6:	2003      	movs	r0, #3
 8006aa8:	f7fe ff25 	bl	80058f6 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	339c      	adds	r3, #156	; 0x9c
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8006abc:	2101      	movs	r1, #1
 8006abe:	9102      	str	r1, [sp, #8]
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	2101      	movs	r1, #1
 8006aca:	2003      	movs	r0, #3
 8006acc:	f7fe ff13 	bl	80058f6 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3324      	adds	r3, #36	; 0x24
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	9102      	str	r1, [sp, #8]
 8006ae4:	9201      	str	r2, [sp, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2203      	movs	r2, #3
 8006aec:	2103      	movs	r1, #3
 8006aee:	2003      	movs	r0, #3
 8006af0:	f7fe ff01 	bl	80058f6 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3360      	adds	r3, #96	; 0x60
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006b04:	2100      	movs	r1, #0
 8006b06:	9102      	str	r1, [sp, #8]
 8006b08:	9201      	str	r2, [sp, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2203      	movs	r2, #3
 8006b10:	2101      	movs	r1, #1
 8006b12:	2003      	movs	r0, #3
 8006b14:	f7fe feef 	bl	80058f6 <matmul>
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	336c      	adds	r3, #108	; 0x6c
 8006b2c:	2218      	movs	r2, #24
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f009 ff54 	bl	80109de <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	e021      	b.n	8006b80 <select_kf_observation_matrices+0x60>
        if (kf_state->z_active[i]) {
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4613      	mov	r3, r2
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	336c      	adds	r3, #108	; 0x6c
 8006b5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e00a      	b.n	8006b7a <select_kf_observation_matrices+0x5a>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	33a0      	adds	r3, #160	; 0xa0
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	ddda      	ble.n	8006b3c <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3384      	adds	r3, #132	; 0x84
 8006b90:	2103      	movs	r1, #3
 8006b92:	2002      	movs	r0, #2
 8006b94:	f7fe fd1f 	bl	80055d6 <transpose>
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af04      	add	r7, sp, #16
 8006ba6:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bba:	2201      	movs	r2, #1
 8006bbc:	9201      	str	r2, [sp, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	460a      	mov	r2, r1
 8006bc4:	2103      	movs	r1, #3
 8006bc6:	2002      	movs	r0, #2
 8006bc8:	f7fe ff2f 	bl	8005a2a <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bde:	2002      	movs	r0, #2
 8006be0:	f7fe fd78 	bl	80056d4 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	9102      	str	r1, [sp, #8]
 8006bfa:	9201      	str	r2, [sp, #4]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2203      	movs	r2, #3
 8006c02:	2103      	movs	r1, #3
 8006c04:	2002      	movs	r0, #2
 8006c06:	f7fe fe76 	bl	80058f6 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3384      	adds	r3, #132	; 0x84
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	9102      	str	r1, [sp, #8]
 8006c1e:	9201      	str	r2, [sp, #4]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	4603      	mov	r3, r0
 8006c24:	2202      	movs	r2, #2
 8006c26:	2103      	movs	r1, #3
 8006c28:	2002      	movs	r0, #2
 8006c2a:	f7fe fe64 	bl	80058f6 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	460b      	mov	r3, r1
 8006c44:	2102      	movs	r1, #2
 8006c46:	2002      	movs	r0, #2
 8006c48:	f7fe fd6f 	bl	800572a <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c52:	2210      	movs	r2, #16
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f009 fec1 	bl	80109de <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c68:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8006d74 <kf_update+0x1d4>
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2002      	movs	r0, #2
 8006c70:	f7ff f8a6 	bl	8005dc0 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3384      	adds	r3, #132	; 0x84
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 8006c84:	2101      	movs	r1, #1
 8006c86:	9102      	str	r1, [sp, #8]
 8006c88:	9201      	str	r2, [sp, #4]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2202      	movs	r2, #2
 8006c90:	2103      	movs	r1, #3
 8006c92:	2003      	movs	r0, #3
 8006c94:	f7fe fe2f 	bl	80058f6 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8006caa:	2101      	movs	r1, #1
 8006cac:	9102      	str	r1, [sp, #8]
 8006cae:	9201      	str	r2, [sp, #4]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	2003      	movs	r0, #3
 8006cba:	f7fe fe1c 	bl	80058f6 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	33c4      	adds	r3, #196	; 0xc4
 8006cce:	2201      	movs	r2, #1
 8006cd0:	9201      	str	r2, [sp, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	2102      	movs	r1, #2
 8006cda:	2003      	movs	r0, #3
 8006cdc:	f7fe fea5 	bl	8005a2a <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	33c4      	adds	r3, #196	; 0xc4
 8006cf0:	2003      	movs	r0, #3
 8006cf2:	f7fe fcc4 	bl	800567e <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	2003      	movs	r0, #3
 8006d00:	f7fe fc1d 	bl	800553e <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	336c      	adds	r3, #108	; 0x6c
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8006d14:	2101      	movs	r1, #1
 8006d16:	9102      	str	r1, [sp, #8]
 8006d18:	9201      	str	r2, [sp, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2203      	movs	r2, #3
 8006d20:	2102      	movs	r1, #2
 8006d22:	2003      	movs	r0, #3
 8006d24:	f7fe fde7 	bl	80058f6 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f503 710e 	add.w	r1, r3, #568	; 0x238
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	2103      	movs	r1, #3
 8006d40:	2003      	movs	r0, #3
 8006d42:	f7fe fd65 	bl	8005810 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	32d0      	adds	r2, #208	; 0xd0
 8006d56:	2101      	movs	r1, #1
 8006d58:	9102      	str	r1, [sp, #8]
 8006d5a:	9201      	str	r2, [sp, #4]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2203      	movs	r2, #3
 8006d62:	2103      	movs	r1, #3
 8006d64:	2003      	movs	r0, #3
 8006d66:	f7fe fdc6 	bl	80058f6 <matmul>
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	38d1b717 	.word	0x38d1b717

08006d78 <reset_state_est_state>:
#include "../Inc/state_est.h"

void reset_state_est_state(float p_g, float T_g, state_est_state_t *state_est_state) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006d82:	edc7 0a02 	vstr	s1, [r7, #8]
 8006d86:	6078      	str	r0, [r7, #4]
    reset_flight_phase_detection(&state_est_state->flight_phase_detection);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff fd96 	bl	80068c0 <reset_flight_phase_detection>

    memset(&state_est_state->state_est_data, 0, sizeof(state_est_state->state_est_data));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	224c      	movs	r2, #76	; 0x4c
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f009 fe1f 	bl	80109de <memset>
    memset(&state_est_state->state_est_meas, 0, sizeof(state_est_state->state_est_meas));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	334c      	adds	r3, #76	; 0x4c
 8006da4:	2254      	movs	r2, #84	; 0x54
 8006da6:	2100      	movs	r1, #0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f009 fe18 	bl	80109de <memset>
    memset(&state_est_state->state_est_meas_prior, 0, sizeof(state_est_state->state_est_meas_prior));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	33a0      	adds	r3, #160	; 0xa0
 8006db2:	2254      	movs	r2, #84	; 0x54
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f009 fe11 	bl	80109de <memset>

    init_env(&state_est_state->env);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff f97a 	bl	80060bc <init_env>
    calibrate_env(&state_est_state->env, p_g, T_g);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8006dce:	edd7 0a02 	vldr	s1, [r7, #8]
 8006dd2:	ed97 0a03 	vldr	s0, [r7, #12]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff f986 	bl	80060e8 <calibrate_env>
    update_env(&state_est_state->env, T_g);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8006de2:	ed97 0a02 	vldr	s0, [r7, #8]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff f9c6 	bl	8006178 <update_env>

	reset_kf_state(&state_est_state->kf_state);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	33f4      	adds	r3, #244	; 0xf4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fd83 	bl	80068fc <reset_kf_state>
    update_state_est_data(state_est_state);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f8dc 	bl	8006fb4 <update_state_est_data>
    #if defined(USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION) && USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION == true
        memset(&state_est_state->baro_roll_mem, 0, sizeof(state_est_state->baro_roll_mem));
    #endif

    #if USE_STATE_EST_DESCENT == false
        memset(&state_est_state->altitude_mav_mem, 0, sizeof(state_est_state->altitude_mav_mem));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e02:	227c      	movs	r2, #124	; 0x7c
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f009 fde9 	bl	80109de <memset>
    #endif

	select_noise_models(state_est_state);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb37 	bl	8007480 <select_noise_models>
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <state_est_step>:

void state_est_step(timestamp_t t, state_est_state_t *state_est_state, bool bool_detect_flight_phase) {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	71fb      	strb	r3, [r7, #7]
    /* process measurements */
	process_measurements(t, state_est_state);
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f927 	bl	8007080 <process_measurements>

	/* select noise models (dependent on detected flight phase and updated temperature in environment) */
	select_noise_models(state_est_state);
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 fb24 	bl	8007480 <select_noise_models>
	
	kf_prediction(&state_est_state->kf_state);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	33f4      	adds	r3, #244	; 0xf4
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fe01 	bl	8006a44 <kf_prediction>

	if (state_est_state->kf_state.num_z_active > 0) {
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dd0a      	ble.n	8006e62 <state_est_step+0x46>
		select_kf_observation_matrices(&state_est_state->kf_state);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	33f4      	adds	r3, #244	; 0xf4
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fe65 	bl	8006b20 <select_kf_observation_matrices>
		kf_update(&state_est_state->kf_state);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	33f4      	adds	r3, #244	; 0xf4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fea0 	bl	8006ba0 <kf_update>
 8006e60:	e009      	b.n	8006e76 <state_est_step+0x5a>
	} else {
		memcpy(&state_est_state->kf_state.x_est, &state_est_state->kf_state.x_priori, sizeof(state_est_state->kf_state.x_priori));
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006e6e:	220c      	movs	r2, #12
 8006e70:	4619      	mov	r1, r3
 8006e72:	f009 fda9 	bl	80109c8 <memcpy>
	}

	update_state_est_data(state_est_state);
 8006e76:	68b8      	ldr	r0, [r7, #8]
 8006e78:	f000 f89c 	bl	8006fb4 <update_state_est_data>

    #if USE_STATE_EST_DESCENT == false
        /* during drogue and main descent, the 1D state estimation might work badly,
           thus we are computing the altitude and vertical velocity solely from the barometric data */
        
    	if ((state_est_state->flight_phase_detection.flight_phase == DROGUE_DESCENT || 
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d004      	beq.n	8006e90 <state_est_step+0x74>
            state_est_state->flight_phase_detection.flight_phase == MAIN_DESCENT) && 
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
    	if ((state_est_state->flight_phase_detection.flight_phase == DROGUE_DESCENT || 
 8006e8c:	2b0a      	cmp	r3, #10
 8006e8e:	d175      	bne.n	8006f7c <state_est_step+0x160>
            state_est_state->state_est_data.altitude_raw_active == true){
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
            state_est_state->flight_phase_detection.flight_phase == MAIN_DESCENT) && 
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d070      	beq.n	8006f7c <state_est_step+0x160>
        
            int alt_mav_mem_length = state_est_state->altitude_mav_mem.memory_length;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006ea0:	61bb      	str	r3, [r7, #24]
            float alt_mav_delta = state_est_state->altitude_mav_mem.avg_values[0] - state_est_state->altitude_mav_mem.avg_values[alt_mav_mem_length-1];
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8006ea8:	ed93 7a00 	vldr	s14, [r3]
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	3304      	adds	r3, #4
 8006ebc:	edd3 7a00 	vldr	s15, [r3]
 8006ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ec4:	edc7 7a05 	vstr	s15, [r7, #20]
            float alt_mav_dt = (float)(state_est_state->altitude_mav_mem.timestamps[0] - state_est_state->altitude_mav_mem.timestamps[alt_mav_mem_length-1]) / 1000;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ee8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006fac <state_est_step+0x190>
 8006eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ef0:	edc7 7a04 	vstr	s15, [r7, #16]

            float velocity = 0;
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	61fb      	str	r3, [r7, #28]
            if (alt_mav_mem_length > 1){
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	dd07      	ble.n	8006f10 <state_est_step+0xf4>
                velocity = alt_mav_delta / alt_mav_dt;
 8006f00:	edd7 6a05 	vldr	s13, [r7, #20]
 8006f04:	ed97 7a04 	vldr	s14, [r7, #16]
 8006f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0c:	edc7 7a07 	vstr	s15, [r7, #28]
            }

			state_est_state->state_est_data.position_world[2] = state_est_state->state_est_data.altitude_raw;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	609a      	str	r2, [r3, #8]
			state_est_state->state_est_data.velocity_rocket[0] = (int32_t)(velocity * 1000);
 8006f18:	edd7 7a07 	vldr	s15, [r7, #28]
 8006f1c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006fac <state_est_step+0x190>
 8006f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f28:	ee17 2a90 	vmov	r2, s15
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	60da      	str	r2, [r3, #12]
			state_est_state->state_est_data.velocity_world[2] = (int32_t)(velocity * 1000);
 8006f30:	edd7 7a07 	vldr	s15, [r7, #28]
 8006f34:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006fac <state_est_step+0x190>
 8006f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f40:	ee17 2a90 	vmov	r2, s15
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	62da      	str	r2, [r3, #44]	; 0x2c
			state_est_state->state_est_data.acceleration_rocket[0] = 0;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	619a      	str	r2, [r3, #24]
			state_est_state->state_est_data.acceleration_world[2] = 0;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	639a      	str	r2, [r3, #56]	; 0x38
			state_est_state->state_est_data.mach_number = (int32_t)(mach_number(&state_est_state->env, velocity) * 1000000);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8006f5a:	ed97 0a07 	vldr	s0, [r7, #28]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff f940 	bl	80061e4 <mach_number>
 8006f64:	eeb0 7a40 	vmov.f32	s14, s0
 8006f68:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006fb0 <state_est_step+0x194>
 8006f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f74:	ee17 2a90 	vmov	r2, s15
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    	}
    #endif

    if (bool_detect_flight_phase){
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <state_est_step+0x176>
        detect_flight_phase(t, &state_est_state->flight_phase_detection, &state_est_state->state_est_data);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fa6b 	bl	8006468 <detect_flight_phase>
    }

	/* set measurement prior to measurements from completed state estimation step */
	memcpy(&state_est_state->state_est_meas_prior, &state_est_state->state_est_meas, sizeof(state_est_state->state_est_meas));
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	334c      	adds	r3, #76	; 0x4c
 8006f9c:	2254      	movs	r2, #84	; 0x54
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	f009 fd12 	bl	80109c8 <memcpy>
}
 8006fa4:	bf00      	nop
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	447a0000 	.word	0x447a0000
 8006fb0:	49742400 	.word	0x49742400

08006fb4 <update_state_est_data>:

void update_state_est_data(state_est_state_t *state_est_state) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
    state_est_state->state_est_data.position_world[2] = (int32_t)(state_est_state->kf_state.x_est[0] * 1000);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8006fc2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007074 <update_state_est_data+0xc0>
 8006fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fce:	ee17 2a90 	vmov	r2, s15
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	609a      	str	r2, [r3, #8]
    state_est_state->state_est_data.velocity_rocket[0] = (int32_t)(state_est_state->kf_state.x_est[1] * 1000);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006fdc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007074 <update_state_est_data+0xc0>
 8006fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fe8:	ee17 2a90 	vmov	r2, s15
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	60da      	str	r2, [r3, #12]
    state_est_state->state_est_data.velocity_world[2] = (int32_t)(state_est_state->kf_state.x_est[1] * 1000);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006ff6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007074 <update_state_est_data+0xc0>
 8006ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007002:	ee17 2a90 	vmov	r2, s15
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_state->state_est_data.acceleration_rocket[0] = (int32_t)(state_est_state->kf_state.u[0] * 1000);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8007010:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007074 <update_state_est_data+0xc0>
 8007014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800701c:	ee17 2a90 	vmov	r2, s15
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	619a      	str	r2, [r3, #24]
    state_est_state->state_est_data.acceleration_world[2] = (int32_t)(state_est_state->kf_state.u[0] * 1000);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 800702a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8007074 <update_state_est_data+0xc0>
 800702e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007036:	ee17 2a90 	vmov	r2, s15
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
    state_est_state->state_est_data.mach_number = (int32_t)(mach_number(&state_est_state->env, state_est_state->kf_state.x_est[1]) * 1000000);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 800704a:	eeb0 0a67 	vmov.f32	s0, s15
 800704e:	4610      	mov	r0, r2
 8007050:	f7ff f8c8 	bl	80061e4 <mach_number>
 8007054:	eeb0 7a40 	vmov.f32	s14, s0
 8007058:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007078 <update_state_est_data+0xc4>
 800705c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007064:	ee17 2a90 	vmov	r2, s15
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	447a0000 	.word	0x447a0000
 8007078:	49742400 	.word	0x49742400
 800707c:	00000000 	.word	0x00000000

08007080 <process_measurements>:

void process_measurements(timestamp_t t, state_est_state_t *state_est_state) {
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b099      	sub	sp, #100	; 0x64
 8007084:	af02      	add	r7, sp, #8
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
    bool temp_meas_active[NUM_BARO];
    float acc_x_meas[NUM_IMU];
    bool acc_x_meas_active[NUM_IMU];

    /* barometer */
    for (int i = 0; i < NUM_BARO; i++){
 800708a:	2300      	movs	r3, #0
 800708c:	657b      	str	r3, [r7, #84]	; 0x54
 800708e:	e06f      	b.n	8007170 <process_measurements+0xf0>
        if (state_est_state->state_est_meas.baro_data[i].ts > state_est_state->state_est_meas_prior.baro_data[i].ts) {
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007094:	4613      	mov	r3, r2
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3354      	adds	r3, #84	; 0x54
 80070a0:	6819      	ldr	r1, [r3, #0]
 80070a2:	6838      	ldr	r0, [r7, #0]
 80070a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4403      	add	r3, r0
 80070b0:	33a8      	adds	r3, #168	; 0xa8
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4299      	cmp	r1, r3
 80070b6:	d939      	bls.n	800712c <process_measurements+0xac>
            state_est_state->kf_state.z[i] = state_est_state->state_est_meas.baro_data[i].pressure;
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	334c      	adds	r3, #76	; 0x4c
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ce:	338e      	adds	r3, #142	; 0x8e
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	3304      	adds	r3, #4
 80070d6:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = true;
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070dc:	4413      	add	r3, r2
 80070de:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_state->state_est_meas.baro_data[i].temperature;
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ea:	4613      	mov	r3, r2
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	3350      	adds	r3, #80	; 0x50
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007100:	440b      	add	r3, r1
 8007102:	3b3c      	subs	r3, #60	; 0x3c
 8007104:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8007106:	f107 0218 	add.w	r2, r7, #24
 800710a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800710c:	4413      	add	r3, r2
 800710e:	2201      	movs	r2, #1
 8007110:	701a      	strb	r2, [r3, #0]

            /* deactivate all barometer measurements if we are transsonic or supersonic */
            if (state_est_state->flight_phase_detection.mach_regime != SUBSONIC) {
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	f893 33f5 	ldrb.w	r3, [r3, #1013]	; 0x3f5
 8007118:	2b01      	cmp	r3, #1
 800711a:	d026      	beq.n	800716a <process_measurements+0xea>
                state_est_state->kf_state.z_active[i] = false;
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007120:	4413      	add	r3, r2
 8007122:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e01e      	b.n	800716a <process_measurements+0xea>
                        state_est_state->state_est_meas.airbrake_extension > BIAS_RESET_AIRBRAKE_EXTENSION_THRESH)) {
                    state_est_state->kf_state.z_active[i] = false;
                }
            #endif
        } else {
            state_est_state->kf_state.z[i] = 0;
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007130:	338e      	adds	r3, #142	; 0x8e
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	3304      	adds	r3, #4
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = false;
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007142:	4413      	add	r3, r2
 8007144:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 800714c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007154:	4413      	add	r3, r2
 8007156:	3b3c      	subs	r3, #60	; 0x3c
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 800715e:	f107 0218 	add.w	r2, r7, #24
 8007162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007164:	4413      	add	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_BARO; i++){
 800716a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800716c:	3301      	adds	r3, #1
 800716e:	657b      	str	r3, [r7, #84]	; 0x54
 8007170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007172:	2b01      	cmp	r3, #1
 8007174:	dd8c      	ble.n	8007090 <process_measurements+0x10>
        }
    }

    /* IMU */
    for (int i = 0; i < NUM_IMU; i++){
 8007176:	2300      	movs	r3, #0
 8007178:	653b      	str	r3, [r7, #80]	; 0x50
 800717a:	e03c      	b.n	80071f6 <process_measurements+0x176>
        if (state_est_state->state_est_meas.imu_data[i].ts > state_est_state->state_est_meas_prior.imu_data[i].ts) {
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007180:	4613      	mov	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	337c      	adds	r3, #124	; 0x7c
 800718c:	6819      	ldr	r1, [r3, #0]
 800718e:	6838      	ldr	r0, [r7, #0]
 8007190:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4403      	add	r3, r0
 800719c:	33d0      	adds	r3, #208	; 0xd0
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4299      	cmp	r1, r3
 80071a2:	d916      	bls.n	80071d2 <process_measurements+0x152>
            acc_x_meas[i] = state_est_state->state_est_meas.imu_data[i].acc_x;
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071a8:	4613      	mov	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	3370      	adds	r3, #112	; 0x70
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80071be:	440b      	add	r3, r1
 80071c0:	3b48      	subs	r3, #72	; 0x48
 80071c2:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 80071c4:	f107 020c 	add.w	r2, r7, #12
 80071c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ca:	4413      	add	r3, r2
 80071cc:	2201      	movs	r2, #1
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	e00e      	b.n	80071f0 <process_measurements+0x170>
        } else {
            acc_x_meas[i] = 0;
 80071d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80071da:	4413      	add	r3, r2
 80071dc:	3b48      	subs	r3, #72	; 0x48
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 80071e4:	f107 020c 	add.w	r2, r7, #12
 80071e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ea:	4413      	add	r3, r2
 80071ec:	2200      	movs	r2, #0
 80071ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_IMU; i++){
 80071f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f2:	3301      	adds	r3, #1
 80071f4:	653b      	str	r3, [r7, #80]	; 0x50
 80071f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	ddbf      	ble.n	800717c <process_measurements+0xfc>
        if (state_est_state->baro_roll_mem.memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, &state_est_state->baro_roll_mem);
    #else
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007208:	461a      	mov	r2, r3
 800720a:	2002      	movs	r0, #2
 800720c:	f000 fa00 	bl	8007610 <sensor_elimination_by_stdev>
    #endif

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUM_BARO, temp_meas, temp_meas_active);
 8007210:	f107 0218 	add.w	r2, r7, #24
 8007214:	f107 031c 	add.w	r3, r7, #28
 8007218:	4619      	mov	r1, r3
 800721a:	2002      	movs	r0, #2
 800721c:	f000 f9f8 	bl	8007610 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUM_IMU, acc_x_meas, acc_x_meas_active);
 8007220:	f107 020c 	add.w	r2, r7, #12
 8007224:	f107 0310 	add.w	r3, r7, #16
 8007228:	4619      	mov	r1, r3
 800722a:	2002      	movs	r0, #2
 800722c:	f000 f9f0 	bl	8007610 <sensor_elimination_by_stdev>

    /* update num_z_active */
    state_est_state->kf_state.num_z_active = 0;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	64fb      	str	r3, [r7, #76]	; 0x4c
    int num_acc_x_meas_active = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	64bb      	str	r3, [r7, #72]	; 0x48

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	647b      	str	r3, [r7, #68]	; 0x44
    int num_temp_meas_active = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	643b      	str	r3, [r7, #64]	; 0x40
    
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800724c:	2300      	movs	r3, #0
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007250:	e011      	b.n	8007276 <process_measurements+0x1f6>
        if (state_est_state->kf_state.z_active[i]){
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007256:	4413      	add	r3, r2
 8007258:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <process_measurements+0x1f0>
            state_est_state->kf_state.num_z_active += 1;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007272:	3301      	adds	r3, #1
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007278:	2b01      	cmp	r3, #1
 800727a:	ddea      	ble.n	8007252 <process_measurements+0x1d2>
        }
    }
    for (int i = 0; i < NUM_BARO; i++){
 800727c:	2300      	movs	r3, #0
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007280:	e020      	b.n	80072c4 <process_measurements+0x244>
        if (temp_meas[i]) {
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800728a:	4413      	add	r3, r2
 800728c:	3b3c      	subs	r3, #60	; 0x3c
 800728e:	edd3 7a00 	vldr	s15, [r3]
 8007292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729a:	d010      	beq.n	80072be <process_measurements+0x23e>
            temp_meas_mean += temp_meas[i];
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80072a4:	4413      	add	r3, r2
 80072a6:	3b3c      	subs	r3, #60	; 0x3c
 80072a8:	edd3 7a00 	vldr	s15, [r3]
 80072ac:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80072b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            num_temp_meas_active += 1;
 80072b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ba:	3301      	adds	r3, #1
 80072bc:	643b      	str	r3, [r7, #64]	; 0x40
    for (int i = 0; i < NUM_BARO; i++){
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	3301      	adds	r3, #1
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	dddb      	ble.n	8007282 <process_measurements+0x202>
        }
    }
    for (int i = 0; i < NUM_IMU; i++){
 80072ca:	2300      	movs	r3, #0
 80072cc:	637b      	str	r3, [r7, #52]	; 0x34
 80072ce:	e01a      	b.n	8007306 <process_measurements+0x286>
        if (acc_x_meas_active[i]) {
 80072d0:	f107 020c 	add.w	r2, r7, #12
 80072d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d6:	4413      	add	r3, r2
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d010      	beq.n	8007300 <process_measurements+0x280>
            u += acc_x_meas[i];
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80072e6:	4413      	add	r3, r2
 80072e8:	3b48      	subs	r3, #72	; 0x48
 80072ea:	edd3 7a00 	vldr	s15, [r3]
 80072ee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80072f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072f6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            num_acc_x_meas_active += 1;
 80072fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fc:	3301      	adds	r3, #1
 80072fe:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < NUM_IMU; i++){
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	3301      	adds	r3, #1
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
 8007306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007308:	2b01      	cmp	r3, #1
 800730a:	dde1      	ble.n	80072d0 <process_measurements+0x250>
        }
    }

    pressure2altitudeAGL(&state_est_state->env, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, state_est_state->kf_state.z);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	f503 7121 	add.w	r1, r3, #644	; 0x284
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	460b      	mov	r3, r1
 8007328:	2102      	movs	r1, #2
 800732a:	f7fe ff79 	bl	8006220 <pressure2altitudeAGL>

    /* compute the mean raw altitude from all barometer measurements */
    int num_alt_meas_active = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	633b      	str	r3, [r7, #48]	; 0x30
    float alt_mean = 0;
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007338:	2300      	movs	r3, #0
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
 800733c:	e01b      	b.n	8007376 <process_measurements+0x2f6>
        if (state_est_state->kf_state.z_active[i]){
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	4413      	add	r3, r2
 8007344:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d010      	beq.n	8007370 <process_measurements+0x2f0>
            num_alt_meas_active += 1;
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	3301      	adds	r3, #1
 8007352:	633b      	str	r3, [r7, #48]	; 0x30
            alt_mean += state_est_state->kf_state.z[i];
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	338e      	adds	r3, #142	; 0x8e
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	3304      	adds	r3, #4
 8007360:	edd3 7a00 	vldr	s15, [r3]
 8007364:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800736c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	3301      	adds	r3, #1
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	2b01      	cmp	r3, #1
 800737a:	dde0      	ble.n	800733e <process_measurements+0x2be>
        }
    }
    if (num_alt_meas_active > 0) {
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	2b00      	cmp	r3, #0
 8007380:	dd1b      	ble.n	80073ba <process_measurements+0x33a>
        alt_mean /= num_alt_meas_active;
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800738c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007394:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        state_est_state->state_est_data.altitude_raw = (int32_t)(alt_mean * 1000);
 8007398:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800739c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007478 <process_measurements+0x3f8>
 80073a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073a8:	ee17 2a90 	vmov	r2, s15
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40
        state_est_state->state_est_data.altitude_raw_active = true;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b8:	e003      	b.n	80073c2 <process_measurements+0x342>
    } else {  
        state_est_state->state_est_data.altitude_raw_active = false;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }

    #if USE_STATE_EST_DESCENT == false
        /* during drogue and main descent, the 1D state estimation might work badly,
           thus we are computing the altitude and vertical velocity solely from the barometric data */
    	float altitude_avg = update_mav(&state_est_state->altitude_mav_mem, t, 
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073ce:	461a      	mov	r2, r3
 80073d0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	f000 f9ef 	bl	80077b8 <update_mav>
 80073da:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
                                        alt_mean, state_est_state->state_est_data.altitude_raw_active);
    #endif

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 80073de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dd1c      	ble.n	800741e <process_measurements+0x39e>
        u /= num_acc_x_meas_active;
 80073e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073ee:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80073f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073f6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        /* gravity compensation for accelerometer */
        state_est_state->kf_state.u[0] = u - GRAVITATION;
 80073fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80073fc:	f7f9 f8a4 	bl	8000548 <__aeabi_f2d>
 8007400:	a31b      	add	r3, pc, #108	; (adr r3, 8007470 <process_measurements+0x3f0>)
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f7f8 ff3f 	bl	8000288 <__aeabi_dsub>
 800740a:	4603      	mov	r3, r0
 800740c:	460c      	mov	r4, r1
 800740e:	4618      	mov	r0, r3
 8007410:	4621      	mov	r1, r4
 8007412:	f7f9 fbe9 	bl	8000be8 <__aeabi_d2f>
 8007416:	4602      	mov	r2, r0
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }
    
    if (num_temp_meas_active > 0){
 800741e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	dd12      	ble.n	800744a <process_measurements+0x3ca>
        temp_meas_mean /= num_temp_meas_active;
 8007424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800742e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8007432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007436:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        update_env(&state_est_state->env, temp_meas_mean);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007440:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fe97 	bl	8006178 <update_env>
    }

    /* airbrake extension tracking feedback */
    state_est_state->state_est_data.airbrake_extension = (int32_t)(state_est_state->state_est_meas.airbrake_extension * 1000000);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007450:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800747c <process_measurements+0x3fc>
 8007454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800745c:	ee17 2a90 	vmov	r2, s15
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	649a      	str	r2, [r3, #72]	; 0x48
} 
 8007464:	bf00      	nop
 8007466:	375c      	adds	r7, #92	; 0x5c
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}
 800746c:	f3af 8000 	nop.w
 8007470:	51eb851f 	.word	0x51eb851f
 8007474:	40239eb8 	.word	0x40239eb8
 8007478:	447a0000 	.word	0x447a0000
 800747c:	49742400 	.word	0x49742400

08007480 <select_noise_models>:

void select_noise_models(state_est_state_t *state_est_state) {
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b08f      	sub	sp, #60	; 0x3c
 8007484:	af02      	add	r7, sp, #8
 8007486:	6078      	str	r0, [r7, #4]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (state_est_state->flight_phase_detection.flight_phase) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800748e:	3b01      	subs	r3, #1
 8007490:	2b0a      	cmp	r3, #10
 8007492:	d832      	bhi.n	80074fa <select_noise_models+0x7a>
 8007494:	a201      	add	r2, pc, #4	; (adr r2, 800749c <select_noise_models+0x1c>)
 8007496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749a:	bf00      	nop
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	080074c9 	.word	0x080074c9
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	080074dd 	.word	0x080074dd
 80074b0:	080074dd 	.word	0x080074dd
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074e7 	.word	0x080074e7
 80074bc:	080074f1 	.word	0x080074f1
 80074c0:	080074e7 	.word	0x080074e7
 80074c4:	080074c9 	.word	0x080074c9
        case AIRBRAKE_TEST:
        case TOUCHDOWN:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 80074c8:	4b49      	ldr	r3, [pc, #292]	; (80075f0 <select_noise_models+0x170>)
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 1.869;
 80074cc:	4b49      	ldr	r3, [pc, #292]	; (80075f4 <select_noise_models+0x174>)
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80074d0:	e013      	b.n	80074fa <select_noise_models+0x7a>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 80074d2:	4b49      	ldr	r3, [pc, #292]	; (80075f8 <select_noise_models+0x178>)
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 13.000;
 80074d6:	4b49      	ldr	r3, [pc, #292]	; (80075fc <select_noise_models+0x17c>)
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80074da:	e00e      	b.n	80074fa <select_noise_models+0x7a>
        case BIAS_RESET:
        case APOGEE_APPROACH:
        case CONTROL:
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 80074dc:	4b48      	ldr	r3, [pc, #288]	; (8007600 <select_noise_models+0x180>)
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 7.380;
 80074e0:	4b48      	ldr	r3, [pc, #288]	; (8007604 <select_noise_models+0x184>)
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80074e4:	e009      	b.n	80074fa <select_noise_models+0x7a>
        case DROGUE_DESCENT:
        case MAIN_DESCENT:
            accelerometer_x_stdev = 1.955133;
 80074e6:	4b48      	ldr	r3, [pc, #288]	; (8007608 <select_noise_models+0x188>)
 80074e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 3.896;
 80074ea:	4b48      	ldr	r3, [pc, #288]	; (800760c <select_noise_models+0x18c>)
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80074ee:	e004      	b.n	80074fa <select_noise_models+0x7a>
        case BALLISTIC_DESCENT:
            accelerometer_x_stdev = 0.61803;
 80074f0:	4b43      	ldr	r3, [pc, #268]	; (8007600 <select_noise_models+0x180>)
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 7.380;
 80074f4:	4b43      	ldr	r3, [pc, #268]	; (8007604 <select_noise_models+0x184>)
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80074f8:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
 80074fe:	e01b      	b.n	8007538 <select_noise_models+0xb8>
        state_est_state->kf_state.Q[i][i] = pow(accelerometer_x_stdev, 2);
 8007500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007502:	f7f9 f821 	bl	8000548 <__aeabi_f2d>
 8007506:	4603      	mov	r3, r0
 8007508:	460c      	mov	r4, r1
 800750a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80075e8 <select_noise_models+0x168>
 800750e:	ec44 3b10 	vmov	d0, r3, r4
 8007512:	f00b ffab 	bl	801346c <pow>
 8007516:	ec54 3b10 	vmov	r3, r4, d0
 800751a:	4618      	mov	r0, r3
 800751c:	4621      	mov	r1, r4
 800751e:	f7f9 fb63 	bl	8000be8 <__aeabi_d2f>
 8007522:	4601      	mov	r1, r0
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	3331      	adds	r3, #49	; 0x31
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	3308      	adds	r3, #8
 8007530:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	3301      	adds	r3, #1
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	dde0      	ble.n	8007500 <select_noise_models+0x80>
    }

    float p[1];
    float h[1] = {state_est_state->kf_state.x_est[0]};
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007544:	613b      	str	r3, [r7, #16]
    bool h_active[1] = {true};
 8007546:	2301      	movs	r3, #1
 8007548:	733b      	strb	r3, [r7, #12]
    altitudeAGL2pressure(&state_est_state->env, 1, h, h_active, p);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8007550:	f107 010c 	add.w	r1, r7, #12
 8007554:	f107 0210 	add.w	r2, r7, #16
 8007558:	f107 0314 	add.w	r3, r7, #20
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	460b      	mov	r3, r1
 8007560:	2101      	movs	r1, #1
 8007562:	f7fe febd 	bl	80062e0 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(&state_est_state->env, p[0]);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800756c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007570:	eeb0 0a67 	vmov.f32	s0, s15
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe ff1b 	bl	80063b0 <altitude_gradient>
 800757a:	ed87 0a07 	vstr	s0, [r7, #28]
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 800757e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007582:	edd7 7a07 	vldr	s15, [r7, #28]
 8007586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758a:	eef0 7ae7 	vabs.f32	s15, s15
 800758e:	edc7 7a06 	vstr	s15, [r7, #24]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007592:	2300      	movs	r3, #0
 8007594:	623b      	str	r3, [r7, #32]
 8007596:	e01d      	b.n	80075d4 <select_noise_models+0x154>
        state_est_state->kf_state.R[i][i] = pow(altitude_stdev, 2);
 8007598:	69b8      	ldr	r0, [r7, #24]
 800759a:	f7f8 ffd5 	bl	8000548 <__aeabi_f2d>
 800759e:	4603      	mov	r3, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80075e8 <select_noise_models+0x168>
 80075a6:	ec44 3b10 	vmov	d0, r3, r4
 80075aa:	f00b ff5f 	bl	801346c <pow>
 80075ae:	ec54 3b10 	vmov	r3, r4, d0
 80075b2:	4618      	mov	r0, r3
 80075b4:	4621      	mov	r1, r4
 80075b6:	f7f9 fb17 	bl	8000be8 <__aeabi_d2f>
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	6a3a      	ldr	r2, [r7, #32]
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80075cc:	6018      	str	r0, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	3301      	adds	r3, #1
 80075d2:	623b      	str	r3, [r7, #32]
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	ddde      	ble.n	8007598 <select_noise_models+0x118>
    }

    #if defined(USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION) && USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION == true
        state_est_state->baro_roll_mem.noise_stdev = barometer_stdev;
    #endif
}
 80075da:	bf00      	nop
 80075dc:	3734      	adds	r7, #52	; 0x34
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd90      	pop	{r4, r7, pc}
 80075e2:	bf00      	nop
 80075e4:	f3af 8000 	nop.w
 80075e8:	00000000 	.word	0x00000000
 80075ec:	40000000 	.word	0x40000000
 80075f0:	3c97e316 	.word	0x3c97e316
 80075f4:	3fef3b64 	.word	0x3fef3b64
 80075f8:	3fa01965 	.word	0x3fa01965
 80075fc:	41500000 	.word	0x41500000
 8007600:	3f1e3737 	.word	0x3f1e3737
 8007604:	40ec28f6 	.word	0x40ec28f6
 8007608:	3ffa41cc 	.word	0x3ffa41cc
 800760c:	40795810 	.word	0x40795810

08007610 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int n, float measurements[n], bool measurement_active[n]) {
 8007610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007612:	b08b      	sub	sp, #44	; 0x2c
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
 800762a:	e017      	b.n	800765c <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4413      	add	r3, r2
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00e      	beq.n	8007656 <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	3301      	adds	r3, #1
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	4413      	add	r3, r2
 8007646:	edd3 7a00 	vldr	s15, [r3]
 800764a:	ed97 7a08 	vldr	s14, [r7, #32]
 800764e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007652:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3301      	adds	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	429a      	cmp	r2, r3
 8007662:	dbe3      	blt.n	800762c <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	2b00      	cmp	r3, #0
 8007668:	dd0a      	ble.n	8007680 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007674:	edd7 6a08 	vldr	s13, [r7, #32]
 8007678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	e033      	b.n	80076f4 <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d02a      	beq.n	80076ee <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	4413      	add	r3, r2
 80076a0:	ed93 7a00 	vldr	s14, [r3]
 80076a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80076a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ac:	ee17 0a90 	vmov	r0, s15
 80076b0:	f7f8 ff4a 	bl	8000548 <__aeabi_f2d>
 80076b4:	4603      	mov	r3, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80077b0 <sensor_elimination_by_stdev+0x1a0>
 80076bc:	ec44 3b10 	vmov	d0, r3, r4
 80076c0:	f00b fed4 	bl	801346c <pow>
 80076c4:	ec56 5b10 	vmov	r5, r6, d0
 80076c8:	69b8      	ldr	r0, [r7, #24]
 80076ca:	f7f8 ff3d 	bl	8000548 <__aeabi_f2d>
 80076ce:	4603      	mov	r3, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	461a      	mov	r2, r3
 80076d4:	4623      	mov	r3, r4
 80076d6:	4628      	mov	r0, r5
 80076d8:	4631      	mov	r1, r6
 80076da:	f7f8 fdd7 	bl	800028c <__adddf3>
 80076de:	4603      	mov	r3, r0
 80076e0:	460c      	mov	r4, r1
 80076e2:	4618      	mov	r0, r3
 80076e4:	4621      	mov	r1, r4
 80076e6:	f7f9 fa7f 	bl	8000be8 <__aeabi_d2f>
 80076ea:	4603      	mov	r3, r0
 80076ec:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	3301      	adds	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	dbc7      	blt.n	800768c <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dd1a      	ble.n	8007738 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800770c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007710:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007714:	ee16 0a90 	vmov	r0, s13
 8007718:	f7f8 ff16 	bl	8000548 <__aeabi_f2d>
 800771c:	4603      	mov	r3, r0
 800771e:	460c      	mov	r4, r1
 8007720:	ec44 3b10 	vmov	d0, r3, r4
 8007724:	f00c f812 	bl	801374c <sqrt>
 8007728:	ec54 3b10 	vmov	r3, r4, d0
 800772c:	4618      	mov	r0, r3
 800772e:	4621      	mov	r1, r4
 8007730:	f7f9 fa5a 	bl	8000be8 <__aeabi_d2f>
 8007734:	4603      	mov	r3, r0
 8007736:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8007738:	2300      	movs	r3, #0
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	e02f      	b.n	800779e <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d026      	beq.n	8007798 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	ed93 7a00 	vldr	s14, [r3]
 8007756:	edd7 7a08 	vldr	s15, [r7, #32]
 800775a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800775e:	eef0 7ae7 	vabs.f32	s15, s15
 8007762:	ee17 0a90 	vmov	r0, s15
 8007766:	f7f8 feef 	bl	8000548 <__aeabi_f2d>
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	69b8      	ldr	r0, [r7, #24]
 8007770:	f7f8 feea 	bl	8000548 <__aeabi_f2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	f7f8 fd88 	bl	800028c <__adddf3>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4620      	mov	r0, r4
 8007782:	4629      	mov	r1, r5
 8007784:	f7f9 f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	3301      	adds	r3, #1
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	dbcb      	blt.n	800773e <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 80077a6:	bf00      	nop
 80077a8:	372c      	adds	r7, #44	; 0x2c
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ae:	bf00      	nop
 80077b0:	00000000 	.word	0x00000000
 80077b4:	40000000 	.word	0x40000000

080077b8 <update_mav>:
        extrapolation_rolling_memory->memory_length += num_active;
    }

}

float update_mav(mav_memory_t *mav_memory, timestamp_t t, float measurement, bool measurement_active) {
 80077b8:	b480      	push	{r7}
 80077ba:	b089      	sub	sp, #36	; 0x24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	70fb      	strb	r3, [r7, #3]
    if (measurement_active == true) {
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d06b      	beq.n	80078a8 <update_mav+0xf0>
        if (mav_memory->memory_length < MAX_LENGTH_MOVING_AVERAGE) {
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b09      	cmp	r3, #9
 80077d6:	dc04      	bgt.n	80077e2 <update_mav+0x2a>
            mav_memory->memory_length += 1;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]
        }

        for (int i=(mav_memory->memory_length-1); i > 0; i--) {
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	e02b      	b.n	8007844 <update_mav+0x8c>
		    mav_memory->timestamps[i] = mav_memory->timestamps[i-1];
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68f9      	ldr	r1, [r7, #12]
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	605a      	str	r2, [r3, #4]
            mav_memory->values[i] = mav_memory->values[i-1];
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	3b01      	subs	r3, #1
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	330a      	adds	r3, #10
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	3304      	adds	r3, #4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	330a      	adds	r3, #10
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	3304      	adds	r3, #4
 800781e:	601a      	str	r2, [r3, #0]
            mav_memory->avg_values[i] = mav_memory->avg_values[i-1];
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3b01      	subs	r3, #1
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	3314      	adds	r3, #20
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	3304      	adds	r3, #4
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68f9      	ldr	r1, [r7, #12]
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	3314      	adds	r3, #20
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	3304      	adds	r3, #4
 800783c:	601a      	str	r2, [r3, #0]
        for (int i=(mav_memory->memory_length-1); i > 0; i--) {
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	3b01      	subs	r3, #1
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	dcd0      	bgt.n	80077ec <update_mav+0x34>
        }
        
        mav_memory->timestamps[0] = t;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	605a      	str	r2, [r3, #4]
        mav_memory->values[0] = measurement;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	62da      	str	r2, [r3, #44]	; 0x2c

        float values_sum = 0;
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	61bb      	str	r3, [r7, #24]
        for (int i=0; i < mav_memory->memory_length; i++) {
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	e010      	b.n	8007884 <update_mav+0xcc>
            values_sum += mav_memory->values[i];
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	330a      	adds	r3, #10
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	3304      	adds	r3, #4
 800786e:	edd3 7a00 	vldr	s15, [r3]
 8007872:	ed97 7a06 	vldr	s14, [r7, #24]
 8007876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800787a:	edc7 7a06 	vstr	s15, [r7, #24]
        for (int i=0; i < mav_memory->memory_length; i++) {
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	3301      	adds	r3, #1
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	429a      	cmp	r2, r3
 800788c:	dbe9      	blt.n	8007862 <update_mav+0xaa>
        }

        mav_memory->avg_values[0] = values_sum / (float)mav_memory->memory_length;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800789a:	edd7 6a06 	vldr	s13, [r7, #24]
 800789e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    } 

    return mav_memory->avg_values[0];
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	ee07 3a90 	vmov	s15, r3
}
 80078b0:	eeb0 0a67 	vmov.f32	s0, s15
 80078b4:	3724      	adds	r7, #36	; 0x24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <HAL_Init+0x40>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a0d      	ldr	r2, [pc, #52]	; (8007900 <HAL_Init+0x40>)
 80078ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <HAL_Init+0x40>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a0a      	ldr	r2, [pc, #40]	; (8007900 <HAL_Init+0x40>)
 80078d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078dc:	4b08      	ldr	r3, [pc, #32]	; (8007900 <HAL_Init+0x40>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a07      	ldr	r2, [pc, #28]	; (8007900 <HAL_Init+0x40>)
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078e8:	2003      	movs	r0, #3
 80078ea:	f000 fd8b 	bl	8008404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80078ee:	2000      	movs	r0, #0
 80078f0:	f000 f808 	bl	8007904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80078f4:	f7fc faa0 	bl	8003e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40023c00 	.word	0x40023c00

08007904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800790c:	4b12      	ldr	r3, [pc, #72]	; (8007958 <HAL_InitTick+0x54>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	4b12      	ldr	r3, [pc, #72]	; (800795c <HAL_InitTick+0x58>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800791a:	fbb3 f3f1 	udiv	r3, r3, r1
 800791e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fda3 	bl	800846e <HAL_SYSTICK_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e00e      	b.n	8007950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b0f      	cmp	r3, #15
 8007936:	d80a      	bhi.n	800794e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007938:	2200      	movs	r2, #0
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007940:	f000 fd6b 	bl	800841a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007944:	4a06      	ldr	r2, [pc, #24]	; (8007960 <HAL_InitTick+0x5c>)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000144 	.word	0x20000144
 800795c:	20000150 	.word	0x20000150
 8007960:	2000014c 	.word	0x2000014c

08007964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007968:	4b06      	ldr	r3, [pc, #24]	; (8007984 <HAL_IncTick+0x20>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	4b06      	ldr	r3, [pc, #24]	; (8007988 <HAL_IncTick+0x24>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4413      	add	r3, r2
 8007974:	4a04      	ldr	r2, [pc, #16]	; (8007988 <HAL_IncTick+0x24>)
 8007976:	6013      	str	r3, [r2, #0]
}
 8007978:	bf00      	nop
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000150 	.word	0x20000150
 8007988:	20014ea0 	.word	0x20014ea0

0800798c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  return uwTick;
 8007990:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <HAL_GetTick+0x14>)
 8007992:	681b      	ldr	r3, [r3, #0]
}
 8007994:	4618      	mov	r0, r3
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20014ea0 	.word	0x20014ea0

080079a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079ac:	f7ff ffee 	bl	800798c <HAL_GetTick>
 80079b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079bc:	d005      	beq.n	80079ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_Delay+0x40>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80079ca:	bf00      	nop
 80079cc:	f7ff ffde 	bl	800798c <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d8f7      	bhi.n	80079cc <HAL_Delay+0x28>
  {
  }
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20000150 	.word	0x20000150

080079e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e033      	b.n	8007a66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7f9 ffc0 	bl	800198c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d118      	bne.n	8007a58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a2e:	f023 0302 	bic.w	r3, r3, #2
 8007a32:	f043 0202 	orr.w	r2, r3, #2
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa94 	bl	8007f68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	f043 0201 	orr.w	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	641a      	str	r2, [r3, #64]	; 0x40
 8007a56:	e001      	b.n	8007a5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <HAL_ADC_Start_DMA+0x1e>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e0cc      	b.n	8007c28 <HAL_ADC_Start_DMA+0x1b8>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d018      	beq.n	8007ad6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007ab4:	4b5e      	ldr	r3, [pc, #376]	; (8007c30 <HAL_ADC_Start_DMA+0x1c0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a5e      	ldr	r2, [pc, #376]	; (8007c34 <HAL_ADC_Start_DMA+0x1c4>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	0c9a      	lsrs	r2, r3, #18
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007ac8:	e002      	b.n	8007ad0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f9      	bne.n	8007aca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	f040 80a0 	bne.w	8007c26 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b24:	d106      	bne.n	8007b34 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	f023 0206 	bic.w	r2, r3, #6
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	645a      	str	r2, [r3, #68]	; 0x44
 8007b32:	e002      	b.n	8007b3a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b42:	4b3d      	ldr	r3, [pc, #244]	; (8007c38 <HAL_ADC_Start_DMA+0x1c8>)
 8007b44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	4a3c      	ldr	r2, [pc, #240]	; (8007c3c <HAL_ADC_Start_DMA+0x1cc>)
 8007b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	4a3b      	ldr	r2, [pc, #236]	; (8007c40 <HAL_ADC_Start_DMA+0x1d0>)
 8007b54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	4a3a      	ldr	r2, [pc, #232]	; (8007c44 <HAL_ADC_Start_DMA+0x1d4>)
 8007b5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007b66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007b76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	334c      	adds	r3, #76	; 0x4c
 8007b92:	4619      	mov	r1, r3
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f000 fd24 	bl	80085e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d12a      	bne.n	8007bfe <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <HAL_ADC_Start_DMA+0x1d8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d015      	beq.n	8007bde <HAL_ADC_Start_DMA+0x16e>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a25      	ldr	r2, [pc, #148]	; (8007c4c <HAL_ADC_Start_DMA+0x1dc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d105      	bne.n	8007bc8 <HAL_ADC_Start_DMA+0x158>
 8007bbc:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <HAL_ADC_Start_DMA+0x1c8>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 031f 	and.w	r3, r3, #31
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <HAL_ADC_Start_DMA+0x1e0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d129      	bne.n	8007c26 <HAL_ADC_Start_DMA+0x1b6>
 8007bd2:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <HAL_ADC_Start_DMA+0x1c8>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	2b0f      	cmp	r3, #15
 8007bdc:	d823      	bhi.n	8007c26 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d11c      	bne.n	8007c26 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007bfa:	609a      	str	r2, [r3, #8]
 8007bfc:	e013      	b.n	8007c26 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <HAL_ADC_Start_DMA+0x1d8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d10e      	bne.n	8007c26 <HAL_ADC_Start_DMA+0x1b6>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d107      	bne.n	8007c26 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c24:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000144 	.word	0x20000144
 8007c34:	431bde83 	.word	0x431bde83
 8007c38:	40012300 	.word	0x40012300
 8007c3c:	08008161 	.word	0x08008161
 8007c40:	0800821b 	.word	0x0800821b
 8007c44:	08008237 	.word	0x08008237
 8007c48:	40012000 	.word	0x40012000
 8007c4c:	40012100 	.word	0x40012100
 8007c50:	40012200 	.word	0x40012200

08007c54 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_ADC_Stop_DMA+0x1a>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e038      	b.n	8007ce0 <HAL_ADC_Stop_DMA+0x8c>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0201 	bic.w	r2, r2, #1
 8007c84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d120      	bne.n	8007cd6 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fcf3 	bl	8008694 <HAL_DMA_Abort>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007cc0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007cca:	f023 0301 	bic.w	r3, r3, #1
 8007cce:	f043 0201 	orr.w	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_ADC_ConfigChannel+0x1c>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e105      	b.n	8007f4c <HAL_ADC_ConfigChannel+0x228>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b09      	cmp	r3, #9
 8007d4e:	d925      	bls.n	8007d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68d9      	ldr	r1, [r3, #12]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4613      	mov	r3, r2
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	4413      	add	r3, r2
 8007d64:	3b1e      	subs	r3, #30
 8007d66:	2207      	movs	r2, #7
 8007d68:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6c:	43da      	mvns	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	400a      	ands	r2, r1
 8007d74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68d9      	ldr	r1, [r3, #12]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	4618      	mov	r0, r3
 8007d88:	4603      	mov	r3, r0
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	4403      	add	r3, r0
 8007d8e:	3b1e      	subs	r3, #30
 8007d90:	409a      	lsls	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e022      	b.n	8007de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6919      	ldr	r1, [r3, #16]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	4613      	mov	r3, r2
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	4413      	add	r3, r2
 8007db0:	2207      	movs	r2, #7
 8007db2:	fa02 f303 	lsl.w	r3, r2, r3
 8007db6:	43da      	mvns	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	400a      	ands	r2, r1
 8007dbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6919      	ldr	r1, [r3, #16]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	4403      	add	r3, r0
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b06      	cmp	r3, #6
 8007de8:	d824      	bhi.n	8007e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	3b05      	subs	r3, #5
 8007dfc:	221f      	movs	r2, #31
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	43da      	mvns	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	400a      	ands	r2, r1
 8007e0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	4618      	mov	r0, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	3b05      	subs	r3, #5
 8007e26:	fa00 f203 	lsl.w	r2, r0, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	635a      	str	r2, [r3, #52]	; 0x34
 8007e32:	e04c      	b.n	8007ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b0c      	cmp	r3, #12
 8007e3a:	d824      	bhi.n	8007e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3b23      	subs	r3, #35	; 0x23
 8007e4e:	221f      	movs	r2, #31
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	43da      	mvns	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	400a      	ands	r2, r1
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	3b23      	subs	r3, #35	; 0x23
 8007e78:	fa00 f203 	lsl.w	r2, r0, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30
 8007e84:	e023      	b.n	8007ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	3b41      	subs	r3, #65	; 0x41
 8007e98:	221f      	movs	r2, #31
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	43da      	mvns	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	400a      	ands	r2, r1
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3b41      	subs	r3, #65	; 0x41
 8007ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ece:	4b22      	ldr	r3, [pc, #136]	; (8007f58 <HAL_ADC_ConfigChannel+0x234>)
 8007ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a21      	ldr	r2, [pc, #132]	; (8007f5c <HAL_ADC_ConfigChannel+0x238>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d109      	bne.n	8007ef0 <HAL_ADC_ConfigChannel+0x1cc>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b12      	cmp	r3, #18
 8007ee2:	d105      	bne.n	8007ef0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a19      	ldr	r2, [pc, #100]	; (8007f5c <HAL_ADC_ConfigChannel+0x238>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d123      	bne.n	8007f42 <HAL_ADC_ConfigChannel+0x21e>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b10      	cmp	r3, #16
 8007f00:	d003      	beq.n	8007f0a <HAL_ADC_ConfigChannel+0x1e6>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b11      	cmp	r3, #17
 8007f08:	d11b      	bne.n	8007f42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d111      	bne.n	8007f42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <HAL_ADC_ConfigChannel+0x23c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a10      	ldr	r2, [pc, #64]	; (8007f64 <HAL_ADC_ConfigChannel+0x240>)
 8007f24:	fba2 2303 	umull	r2, r3, r2, r3
 8007f28:	0c9a      	lsrs	r2, r3, #18
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007f34:	e002      	b.n	8007f3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f9      	bne.n	8007f36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	40012300 	.word	0x40012300
 8007f5c:	40012000 	.word	0x40012000
 8007f60:	20000144 	.word	0x20000144
 8007f64:	431bde83 	.word	0x431bde83

08007f68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f70:	4b79      	ldr	r3, [pc, #484]	; (8008158 <ADC_Init+0x1f0>)
 8007f72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6859      	ldr	r1, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	021a      	lsls	r2, r3, #8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6859      	ldr	r1, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6899      	ldr	r1, [r3, #8]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffa:	4a58      	ldr	r2, [pc, #352]	; (800815c <ADC_Init+0x1f4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d022      	beq.n	8008046 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800800e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6899      	ldr	r1, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6899      	ldr	r1, [r3, #8]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	e00f      	b.n	8008066 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008064:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0202 	bic.w	r2, r2, #2
 8008074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6899      	ldr	r1, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	7e1b      	ldrb	r3, [r3, #24]
 8008080:	005a      	lsls	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01b      	beq.n	80080cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80080b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6859      	ldr	r1, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	3b01      	subs	r3, #1
 80080c0:	035a      	lsls	r2, r3, #13
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
 80080ca:	e007      	b.n	80080dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80080ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	051a      	lsls	r2, r3, #20
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6899      	ldr	r1, [r3, #8]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800811e:	025a      	lsls	r2, r3, #9
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008136:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6899      	ldr	r1, [r3, #8]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	029a      	lsls	r2, r3, #10
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	609a      	str	r2, [r3, #8]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	40012300 	.word	0x40012300
 800815c:	0f000001 	.word	0x0f000001

08008160 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008176:	2b00      	cmp	r3, #0
 8008178:	d13c      	bne.n	80081f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d12b      	bne.n	80081ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008198:	2b00      	cmp	r3, #0
 800819a:	d127      	bne.n	80081ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d006      	beq.n	80081b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d119      	bne.n	80081ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0220 	bic.w	r2, r2, #32
 80081c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	f043 0201 	orr.w	r2, r3, #1
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff fd7b 	bl	8007ce8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80081f2:	e00e      	b.n	8008212 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fd85 	bl	8007d10 <HAL_ADC_ErrorCallback>
}
 8008206:	e004      	b.n	8008212 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff fd67 	bl	8007cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2240      	movs	r2, #64	; 0x40
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824e:	f043 0204 	orr.w	r2, r3, #4
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff fd5a 	bl	8007d10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <__NVIC_SetPriorityGrouping>:
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <__NVIC_SetPriorityGrouping+0x44>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008280:	4013      	ands	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800828c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008296:	4a04      	ldr	r2, [pc, #16]	; (80082a8 <__NVIC_SetPriorityGrouping+0x44>)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	60d3      	str	r3, [r2, #12]
}
 800829c:	bf00      	nop
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	e000ed00 	.word	0xe000ed00

080082ac <__NVIC_GetPriorityGrouping>:
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <__NVIC_GetPriorityGrouping+0x18>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	f003 0307 	and.w	r3, r3, #7
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	e000ed00 	.word	0xe000ed00

080082c8 <__NVIC_EnableIRQ>:
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	db0b      	blt.n	80082f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	f003 021f 	and.w	r2, r3, #31
 80082e0:	4907      	ldr	r1, [pc, #28]	; (8008300 <__NVIC_EnableIRQ+0x38>)
 80082e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	2001      	movs	r0, #1
 80082ea:	fa00 f202 	lsl.w	r2, r0, r2
 80082ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e100 	.word	0xe000e100

08008304 <__NVIC_SetPriority>:
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008314:	2b00      	cmp	r3, #0
 8008316:	db0a      	blt.n	800832e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	b2da      	uxtb	r2, r3
 800831c:	490c      	ldr	r1, [pc, #48]	; (8008350 <__NVIC_SetPriority+0x4c>)
 800831e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008322:	0112      	lsls	r2, r2, #4
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	440b      	add	r3, r1
 8008328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800832c:	e00a      	b.n	8008344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	b2da      	uxtb	r2, r3
 8008332:	4908      	ldr	r1, [pc, #32]	; (8008354 <__NVIC_SetPriority+0x50>)
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	3b04      	subs	r3, #4
 800833c:	0112      	lsls	r2, r2, #4
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	440b      	add	r3, r1
 8008342:	761a      	strb	r2, [r3, #24]
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	e000e100 	.word	0xe000e100
 8008354:	e000ed00 	.word	0xe000ed00

08008358 <NVIC_EncodePriority>:
{
 8008358:	b480      	push	{r7}
 800835a:	b089      	sub	sp, #36	; 0x24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f1c3 0307 	rsb	r3, r3, #7
 8008372:	2b04      	cmp	r3, #4
 8008374:	bf28      	it	cs
 8008376:	2304      	movcs	r3, #4
 8008378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	3304      	adds	r3, #4
 800837e:	2b06      	cmp	r3, #6
 8008380:	d902      	bls.n	8008388 <NVIC_EncodePriority+0x30>
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	3b03      	subs	r3, #3
 8008386:	e000      	b.n	800838a <NVIC_EncodePriority+0x32>
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800838c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	fa02 f303 	lsl.w	r3, r2, r3
 8008396:	43da      	mvns	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	401a      	ands	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	fa01 f303 	lsl.w	r3, r1, r3
 80083aa:	43d9      	mvns	r1, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083b0:	4313      	orrs	r3, r2
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3724      	adds	r7, #36	; 0x24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <SysTick_Config>:
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083d0:	d301      	bcc.n	80083d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80083d2:	2301      	movs	r3, #1
 80083d4:	e00f      	b.n	80083f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083d6:	4a0a      	ldr	r2, [pc, #40]	; (8008400 <SysTick_Config+0x40>)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3b01      	subs	r3, #1
 80083dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083de:	210f      	movs	r1, #15
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e4:	f7ff ff8e 	bl	8008304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <SysTick_Config+0x40>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083ee:	4b04      	ldr	r3, [pc, #16]	; (8008400 <SysTick_Config+0x40>)
 80083f0:	2207      	movs	r2, #7
 80083f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	e000e010 	.word	0xe000e010

08008404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff ff29 	bl	8008264 <__NVIC_SetPriorityGrouping>
}
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800841a:	b580      	push	{r7, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
 8008420:	4603      	mov	r3, r0
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
 8008426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800842c:	f7ff ff3e 	bl	80082ac <__NVIC_GetPriorityGrouping>
 8008430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	f7ff ff8e 	bl	8008358 <NVIC_EncodePriority>
 800843c:	4602      	mov	r2, r0
 800843e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ff5d 	bl	8008304 <__NVIC_SetPriority>
}
 800844a:	bf00      	nop
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	4603      	mov	r3, r0
 800845a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800845c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff ff31 	bl	80082c8 <__NVIC_EnableIRQ>
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff ffa2 	bl	80083c0 <SysTick_Config>
 800847c:	4603      	mov	r3, r0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008494:	f7ff fa7a 	bl	800798c <HAL_GetTick>
 8008498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e099      	b.n	80085d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0201 	bic.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084c4:	e00f      	b.n	80084e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084c6:	f7ff fa61 	bl	800798c <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	d908      	bls.n	80084e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2203      	movs	r2, #3
 80084de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e078      	b.n	80085d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e8      	bne.n	80084c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4b38      	ldr	r3, [pc, #224]	; (80085e0 <HAL_DMA_Init+0x158>)
 8008500:	4013      	ands	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800851e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800852a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	2b04      	cmp	r3, #4
 800853e:	d107      	bne.n	8008550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	4313      	orrs	r3, r2
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b04      	cmp	r3, #4
 8008578:	d117      	bne.n	80085aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4313      	orrs	r3, r2
 8008582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fb0d 	bl	8008bac <DMA_CheckFifoParam>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2240      	movs	r2, #64	; 0x40
 800859c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80085a6:	2301      	movs	r3, #1
 80085a8:	e016      	b.n	80085d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fac4 	bl	8008b40 <DMA_CalcBaseAndBitshift>
 80085b8:	4603      	mov	r3, r0
 80085ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c0:	223f      	movs	r2, #63	; 0x3f
 80085c2:	409a      	lsls	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	f010803f 	.word	0xf010803f

080085e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <HAL_DMA_Start_IT+0x26>
 8008606:	2302      	movs	r3, #2
 8008608:	e040      	b.n	800868c <HAL_DMA_Start_IT+0xa8>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b01      	cmp	r3, #1
 800861c:	d12f      	bne.n	800867e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2202      	movs	r2, #2
 8008622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fa56 	bl	8008ae4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800863c:	223f      	movs	r2, #63	; 0x3f
 800863e:	409a      	lsls	r2, r3
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0216 	orr.w	r2, r2, #22
 8008652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f042 0208 	orr.w	r2, r2, #8
 800866a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0201 	orr.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e005      	b.n	800868a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008686:	2302      	movs	r3, #2
 8008688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80086a2:	f7ff f973 	bl	800798c <HAL_GetTick>
 80086a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d008      	beq.n	80086c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2280      	movs	r2, #128	; 0x80
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e052      	b.n	800876c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0216 	bic.w	r2, r2, #22
 80086d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <HAL_DMA_Abort+0x62>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0208 	bic.w	r2, r2, #8
 8008704:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0201 	bic.w	r2, r2, #1
 8008714:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008716:	e013      	b.n	8008740 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008718:	f7ff f938 	bl	800798c <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b05      	cmp	r3, #5
 8008724:	d90c      	bls.n	8008740 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2203      	movs	r2, #3
 8008738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e015      	b.n	800876c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e4      	bne.n	8008718 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008752:	223f      	movs	r2, #63	; 0x3f
 8008754:	409a      	lsls	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d004      	beq.n	8008792 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2280      	movs	r2, #128	; 0x80
 800878c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e00c      	b.n	80087ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2205      	movs	r2, #5
 8008796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80087c4:	4b92      	ldr	r3, [pc, #584]	; (8008a10 <HAL_DMA_IRQHandler+0x258>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a92      	ldr	r2, [pc, #584]	; (8008a14 <HAL_DMA_IRQHandler+0x25c>)
 80087ca:	fba2 2303 	umull	r2, r3, r2, r3
 80087ce:	0a9b      	lsrs	r3, r3, #10
 80087d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e2:	2208      	movs	r2, #8
 80087e4:	409a      	lsls	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4013      	ands	r3, r2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01a      	beq.n	8008824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d013      	beq.n	8008824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0204 	bic.w	r2, r2, #4
 800880a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008810:	2208      	movs	r2, #8
 8008812:	409a      	lsls	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881c:	f043 0201 	orr.w	r2, r3, #1
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008828:	2201      	movs	r2, #1
 800882a:	409a      	lsls	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4013      	ands	r3, r2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d012      	beq.n	800885a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008846:	2201      	movs	r2, #1
 8008848:	409a      	lsls	r2, r3
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	f043 0202 	orr.w	r2, r3, #2
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885e:	2204      	movs	r2, #4
 8008860:	409a      	lsls	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4013      	ands	r3, r2
 8008866:	2b00      	cmp	r3, #0
 8008868:	d012      	beq.n	8008890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887c:	2204      	movs	r2, #4
 800887e:	409a      	lsls	r2, r3
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008888:	f043 0204 	orr.w	r2, r3, #4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008894:	2210      	movs	r2, #16
 8008896:	409a      	lsls	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4013      	ands	r3, r2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d043      	beq.n	8008928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d03c      	beq.n	8008928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b2:	2210      	movs	r2, #16
 80088b4:	409a      	lsls	r2, r3
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d018      	beq.n	80088fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d108      	bne.n	80088e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d024      	beq.n	8008928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
 80088e6:	e01f      	b.n	8008928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01b      	beq.n	8008928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	4798      	blx	r3
 80088f8:	e016      	b.n	8008928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008904:	2b00      	cmp	r3, #0
 8008906:	d107      	bne.n	8008918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0208 	bic.w	r2, r2, #8
 8008916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892c:	2220      	movs	r2, #32
 800892e:	409a      	lsls	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4013      	ands	r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 808e 	beq.w	8008a56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8086 	beq.w	8008a56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800894e:	2220      	movs	r2, #32
 8008950:	409a      	lsls	r2, r3
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b05      	cmp	r3, #5
 8008960:	d136      	bne.n	80089d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0216 	bic.w	r2, r2, #22
 8008970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695a      	ldr	r2, [r3, #20]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <HAL_DMA_IRQHandler+0x1da>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800898e:	2b00      	cmp	r3, #0
 8008990:	d007      	beq.n	80089a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0208 	bic.w	r2, r2, #8
 80089a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a6:	223f      	movs	r2, #63	; 0x3f
 80089a8:	409a      	lsls	r2, r3
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d07d      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
        }
        return;
 80089ce:	e078      	b.n	8008ac2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d01c      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d108      	bne.n	80089fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d030      	beq.n	8008a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
 80089fc:	e02b      	b.n	8008a56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d027      	beq.n	8008a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
 8008a0e:	e022      	b.n	8008a56 <HAL_DMA_IRQHandler+0x29e>
 8008a10:	20000144 	.word	0x20000144
 8008a14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10f      	bne.n	8008a46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0210 	bic.w	r2, r2, #16
 8008a34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d032      	beq.n	8008ac4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d022      	beq.n	8008ab0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2205      	movs	r2, #5
 8008a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 0201 	bic.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60bb      	str	r3, [r7, #8]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d307      	bcc.n	8008a9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f2      	bne.n	8008a82 <HAL_DMA_IRQHandler+0x2ca>
 8008a9c:	e000      	b.n	8008aa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008a9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
 8008ac0:	e000      	b.n	8008ac4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008ac2:	bf00      	nop
    }
  }
}
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop

08008acc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b40      	cmp	r3, #64	; 0x40
 8008b10:	d108      	bne.n	8008b24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b22:	e007      	b.n	8008b34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	60da      	str	r2, [r3, #12]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	3b10      	subs	r3, #16
 8008b50:	4a14      	ldr	r2, [pc, #80]	; (8008ba4 <DMA_CalcBaseAndBitshift+0x64>)
 8008b52:	fba2 2303 	umull	r2, r3, r2, r3
 8008b56:	091b      	lsrs	r3, r3, #4
 8008b58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b5a:	4a13      	ldr	r2, [pc, #76]	; (8008ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d909      	bls.n	8008b82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8008b80:	e007      	b.n	8008b92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b8a:	f023 0303 	bic.w	r3, r3, #3
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	aaaaaaab 	.word	0xaaaaaaab
 8008ba8:	08015aec 	.word	0x08015aec

08008bac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d11f      	bne.n	8008c06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d855      	bhi.n	8008c78 <DMA_CheckFifoParam+0xcc>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <DMA_CheckFifoParam+0x28>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008be5 	.word	0x08008be5
 8008bd8:	08008bf7 	.word	0x08008bf7
 8008bdc:	08008be5 	.word	0x08008be5
 8008be0:	08008c79 	.word	0x08008c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d045      	beq.n	8008c7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bf4:	e042      	b.n	8008c7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bfe:	d13f      	bne.n	8008c80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c04:	e03c      	b.n	8008c80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0e:	d121      	bne.n	8008c54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d836      	bhi.n	8008c84 <DMA_CheckFifoParam+0xd8>
 8008c16:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <DMA_CheckFifoParam+0x70>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c2d 	.word	0x08008c2d
 8008c20:	08008c33 	.word	0x08008c33
 8008c24:	08008c2d 	.word	0x08008c2d
 8008c28:	08008c45 	.word	0x08008c45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c30:	e02f      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d024      	beq.n	8008c88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c42:	e021      	b.n	8008c88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c4c:	d11e      	bne.n	8008c8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c52:	e01b      	b.n	8008c8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d902      	bls.n	8008c60 <DMA_CheckFifoParam+0xb4>
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d003      	beq.n	8008c66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c5e:	e018      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
      break;
 8008c64:	e015      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00e      	beq.n	8008c90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
      break;
 8008c76:	e00b      	b.n	8008c90 <DMA_CheckFifoParam+0xe4>
      break;
 8008c78:	bf00      	nop
 8008c7a:	e00a      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      break;
 8008c7c:	bf00      	nop
 8008c7e:	e008      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      break;
 8008c80:	bf00      	nop
 8008c82:	e006      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      break;
 8008c84:	bf00      	nop
 8008c86:	e004      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      break;
 8008c88:	bf00      	nop
 8008c8a:	e002      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      break;   
 8008c8c:	bf00      	nop
 8008c8e:	e000      	b.n	8008c92 <DMA_CheckFifoParam+0xe6>
      break;
 8008c90:	bf00      	nop
    }
  } 
  
  return status; 
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b089      	sub	sp, #36	; 0x24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	e16b      	b.n	8008f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	f040 815a 	bne.w	8008f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d00b      	beq.n	8008cfa <HAL_GPIO_Init+0x5a>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d007      	beq.n	8008cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008cee:	2b11      	cmp	r3, #17
 8008cf0:	d003      	beq.n	8008cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2b12      	cmp	r3, #18
 8008cf8:	d130      	bne.n	8008d5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	2203      	movs	r2, #3
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d30:	2201      	movs	r2, #1
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	091b      	lsrs	r3, r3, #4
 8008d46:	f003 0201 	and.w	r2, r3, #1
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	2203      	movs	r2, #3
 8008d68:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6c:	43db      	mvns	r3, r3
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	4013      	ands	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d003      	beq.n	8008d9c <HAL_GPIO_Init+0xfc>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b12      	cmp	r3, #18
 8008d9a:	d123      	bne.n	8008de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	08da      	lsrs	r2, r3, #3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3208      	adds	r2, #8
 8008da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	220f      	movs	r2, #15
 8008db4:	fa02 f303 	lsl.w	r3, r2, r3
 8008db8:	43db      	mvns	r3, r3
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	691a      	ldr	r2, [r3, #16]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	08da      	lsrs	r2, r3, #3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3208      	adds	r2, #8
 8008dde:	69b9      	ldr	r1, [r7, #24]
 8008de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	2203      	movs	r2, #3
 8008df0:	fa02 f303 	lsl.w	r3, r2, r3
 8008df4:	43db      	mvns	r3, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f003 0203 	and.w	r2, r3, #3
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80b4 	beq.w	8008f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	4b5f      	ldr	r3, [pc, #380]	; (8008fa8 <HAL_GPIO_Init+0x308>)
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	4a5e      	ldr	r2, [pc, #376]	; (8008fa8 <HAL_GPIO_Init+0x308>)
 8008e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e34:	6453      	str	r3, [r2, #68]	; 0x44
 8008e36:	4b5c      	ldr	r3, [pc, #368]	; (8008fa8 <HAL_GPIO_Init+0x308>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e42:	4a5a      	ldr	r2, [pc, #360]	; (8008fac <HAL_GPIO_Init+0x30c>)
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	089b      	lsrs	r3, r3, #2
 8008e48:	3302      	adds	r3, #2
 8008e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	220f      	movs	r2, #15
 8008e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	4013      	ands	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a51      	ldr	r2, [pc, #324]	; (8008fb0 <HAL_GPIO_Init+0x310>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d02b      	beq.n	8008ec6 <HAL_GPIO_Init+0x226>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a50      	ldr	r2, [pc, #320]	; (8008fb4 <HAL_GPIO_Init+0x314>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d025      	beq.n	8008ec2 <HAL_GPIO_Init+0x222>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a4f      	ldr	r2, [pc, #316]	; (8008fb8 <HAL_GPIO_Init+0x318>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d01f      	beq.n	8008ebe <HAL_GPIO_Init+0x21e>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a4e      	ldr	r2, [pc, #312]	; (8008fbc <HAL_GPIO_Init+0x31c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d019      	beq.n	8008eba <HAL_GPIO_Init+0x21a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a4d      	ldr	r2, [pc, #308]	; (8008fc0 <HAL_GPIO_Init+0x320>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d013      	beq.n	8008eb6 <HAL_GPIO_Init+0x216>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a4c      	ldr	r2, [pc, #304]	; (8008fc4 <HAL_GPIO_Init+0x324>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00d      	beq.n	8008eb2 <HAL_GPIO_Init+0x212>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a4b      	ldr	r2, [pc, #300]	; (8008fc8 <HAL_GPIO_Init+0x328>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d007      	beq.n	8008eae <HAL_GPIO_Init+0x20e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a4a      	ldr	r2, [pc, #296]	; (8008fcc <HAL_GPIO_Init+0x32c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d101      	bne.n	8008eaa <HAL_GPIO_Init+0x20a>
 8008ea6:	2307      	movs	r3, #7
 8008ea8:	e00e      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eaa:	2308      	movs	r3, #8
 8008eac:	e00c      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eae:	2306      	movs	r3, #6
 8008eb0:	e00a      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eb2:	2305      	movs	r3, #5
 8008eb4:	e008      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	e006      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e004      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e002      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	f002 0203 	and.w	r2, r2, #3
 8008ece:	0092      	lsls	r2, r2, #2
 8008ed0:	4093      	lsls	r3, r2
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ed8:	4934      	ldr	r1, [pc, #208]	; (8008fac <HAL_GPIO_Init+0x30c>)
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	089b      	lsrs	r3, r3, #2
 8008ede:	3302      	adds	r3, #2
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ee6:	4b3a      	ldr	r3, [pc, #232]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f0a:	4a31      	ldr	r2, [pc, #196]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008f10:	4b2f      	ldr	r3, [pc, #188]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f34:	4a26      	ldr	r2, [pc, #152]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f3a:	4b25      	ldr	r3, [pc, #148]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	43db      	mvns	r3, r3
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	4013      	ands	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f5e:	4a1c      	ldr	r2, [pc, #112]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f64:	4b1a      	ldr	r3, [pc, #104]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	4013      	ands	r3, r2
 8008f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f88:	4a11      	ldr	r2, [pc, #68]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	3301      	adds	r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b0f      	cmp	r3, #15
 8008f98:	f67f ae90 	bls.w	8008cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	3724      	adds	r7, #36	; 0x24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	40013800 	.word	0x40013800
 8008fb0:	40020000 	.word	0x40020000
 8008fb4:	40020400 	.word	0x40020400
 8008fb8:	40020800 	.word	0x40020800
 8008fbc:	40020c00 	.word	0x40020c00
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	40021400 	.word	0x40021400
 8008fc8:	40021800 	.word	0x40021800
 8008fcc:	40021c00 	.word	0x40021c00
 8008fd0:	40013c00 	.word	0x40013c00

08008fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	887b      	ldrh	r3, [r7, #2]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
 8008ff0:	e001      	b.n	8008ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	807b      	strh	r3, [r7, #2]
 8009010:	4613      	mov	r3, r2
 8009012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009014:	787b      	ldrb	r3, [r7, #1]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800901a:	887a      	ldrh	r2, [r7, #2]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009020:	e003      	b.n	800902a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009022:	887b      	ldrh	r3, [r7, #2]
 8009024:	041a      	lsls	r2, r3, #16
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	619a      	str	r2, [r3, #24]
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695a      	ldr	r2, [r3, #20]
 8009046:	887b      	ldrh	r3, [r7, #2]
 8009048:	401a      	ands	r2, r3
 800904a:	887b      	ldrh	r3, [r7, #2]
 800904c:	429a      	cmp	r2, r3
 800904e:	d104      	bne.n	800905a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009050:	887b      	ldrh	r3, [r7, #2]
 8009052:	041a      	lsls	r2, r3, #16
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009058:	e002      	b.n	8009060 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800905a:	887a      	ldrh	r2, [r7, #2]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	619a      	str	r2, [r3, #24]
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e11f      	b.n	80092be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7f8 ffa0 	bl	8001fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2224      	movs	r2, #36	; 0x24
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0201 	bic.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80090d0:	f001 fca4 	bl	800aa1c <HAL_RCC_GetPCLK1Freq>
 80090d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	4a7b      	ldr	r2, [pc, #492]	; (80092c8 <HAL_I2C_Init+0x25c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d807      	bhi.n	80090f0 <HAL_I2C_Init+0x84>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a7a      	ldr	r2, [pc, #488]	; (80092cc <HAL_I2C_Init+0x260>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	bf94      	ite	ls
 80090e8:	2301      	movls	r3, #1
 80090ea:	2300      	movhi	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	e006      	b.n	80090fe <HAL_I2C_Init+0x92>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a77      	ldr	r2, [pc, #476]	; (80092d0 <HAL_I2C_Init+0x264>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	bf94      	ite	ls
 80090f8:	2301      	movls	r3, #1
 80090fa:	2300      	movhi	r3, #0
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e0db      	b.n	80092be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4a72      	ldr	r2, [pc, #456]	; (80092d4 <HAL_I2C_Init+0x268>)
 800910a:	fba2 2303 	umull	r2, r3, r2, r3
 800910e:	0c9b      	lsrs	r3, r3, #18
 8009110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4a64      	ldr	r2, [pc, #400]	; (80092c8 <HAL_I2C_Init+0x25c>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d802      	bhi.n	8009140 <HAL_I2C_Init+0xd4>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3301      	adds	r3, #1
 800913e:	e009      	b.n	8009154 <HAL_I2C_Init+0xe8>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009146:	fb02 f303 	mul.w	r3, r2, r3
 800914a:	4a63      	ldr	r2, [pc, #396]	; (80092d8 <HAL_I2C_Init+0x26c>)
 800914c:	fba2 2303 	umull	r2, r3, r2, r3
 8009150:	099b      	lsrs	r3, r3, #6
 8009152:	3301      	adds	r3, #1
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6812      	ldr	r2, [r2, #0]
 8009158:	430b      	orrs	r3, r1
 800915a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009166:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	4956      	ldr	r1, [pc, #344]	; (80092c8 <HAL_I2C_Init+0x25c>)
 8009170:	428b      	cmp	r3, r1
 8009172:	d80d      	bhi.n	8009190 <HAL_I2C_Init+0x124>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	1e59      	subs	r1, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009182:	3301      	adds	r3, #1
 8009184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009188:	2b04      	cmp	r3, #4
 800918a:	bf38      	it	cc
 800918c:	2304      	movcc	r3, #4
 800918e:	e04f      	b.n	8009230 <HAL_I2C_Init+0x1c4>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d111      	bne.n	80091bc <HAL_I2C_Init+0x150>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	1e58      	subs	r0, r3, #1
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6859      	ldr	r1, [r3, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	440b      	add	r3, r1
 80091a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80091aa:	3301      	adds	r3, #1
 80091ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	bf0c      	ite	eq
 80091b4:	2301      	moveq	r3, #1
 80091b6:	2300      	movne	r3, #0
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	e012      	b.n	80091e2 <HAL_I2C_Init+0x176>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	1e58      	subs	r0, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6859      	ldr	r1, [r3, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	0099      	lsls	r1, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80091d2:	3301      	adds	r3, #1
 80091d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf0c      	ite	eq
 80091dc:	2301      	moveq	r3, #1
 80091de:	2300      	movne	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <HAL_I2C_Init+0x17e>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e022      	b.n	8009230 <HAL_I2C_Init+0x1c4>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10e      	bne.n	8009210 <HAL_I2C_Init+0x1a4>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1e58      	subs	r0, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6859      	ldr	r1, [r3, #4]
 80091fa:	460b      	mov	r3, r1
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	440b      	add	r3, r1
 8009200:	fbb0 f3f3 	udiv	r3, r0, r3
 8009204:	3301      	adds	r3, #1
 8009206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800920a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920e:	e00f      	b.n	8009230 <HAL_I2C_Init+0x1c4>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1e58      	subs	r0, r3, #1
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6859      	ldr	r1, [r3, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	0099      	lsls	r1, r3, #2
 8009220:	440b      	add	r3, r1
 8009222:	fbb0 f3f3 	udiv	r3, r0, r3
 8009226:	3301      	adds	r3, #1
 8009228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	6809      	ldr	r1, [r1, #0]
 8009234:	4313      	orrs	r3, r2
 8009236:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	69da      	ldr	r2, [r3, #28]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	431a      	orrs	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800925e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6911      	ldr	r1, [r2, #16]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68d2      	ldr	r2, [r2, #12]
 800926a:	4311      	orrs	r1, r2
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6812      	ldr	r2, [r2, #0]
 8009270:	430b      	orrs	r3, r1
 8009272:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	695a      	ldr	r2, [r3, #20]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	000186a0 	.word	0x000186a0
 80092cc:	001e847f 	.word	0x001e847f
 80092d0:	003d08ff 	.word	0x003d08ff
 80092d4:	431bde83 	.word	0x431bde83
 80092d8:	10624dd3 	.word	0x10624dd3

080092dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af02      	add	r7, sp, #8
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	607a      	str	r2, [r7, #4]
 80092e6:	461a      	mov	r2, r3
 80092e8:	460b      	mov	r3, r1
 80092ea:	817b      	strh	r3, [r7, #10]
 80092ec:	4613      	mov	r3, r2
 80092ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092f0:	f7fe fb4c 	bl	800798c <HAL_GetTick>
 80092f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b20      	cmp	r3, #32
 8009300:	f040 80e0 	bne.w	80094c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	2319      	movs	r3, #25
 800930a:	2201      	movs	r2, #1
 800930c:	4970      	ldr	r1, [pc, #448]	; (80094d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 fd92 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800931a:	2302      	movs	r3, #2
 800931c:	e0d3      	b.n	80094c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <HAL_I2C_Master_Transmit+0x50>
 8009328:	2302      	movs	r3, #2
 800932a:	e0cc      	b.n	80094c6 <HAL_I2C_Master_Transmit+0x1ea>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b01      	cmp	r3, #1
 8009340:	d007      	beq.n	8009352 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 0201 	orr.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009360:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2221      	movs	r2, #33	; 0x21
 8009366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2210      	movs	r2, #16
 800936e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	893a      	ldrh	r2, [r7, #8]
 8009382:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009388:	b29a      	uxth	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4a50      	ldr	r2, [pc, #320]	; (80094d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8009392:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009394:	8979      	ldrh	r1, [r7, #10]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6a3a      	ldr	r2, [r7, #32]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 fbfe 	bl	8009b9c <I2C_MasterRequestWrite>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e08d      	b.n	80094c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093aa:	2300      	movs	r3, #0
 80093ac:	613b      	str	r3, [r7, #16]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	613b      	str	r3, [r7, #16]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	613b      	str	r3, [r7, #16]
 80093be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80093c0:	e066      	b.n	8009490 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	6a39      	ldr	r1, [r7, #32]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fe0c 	bl	8009fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00d      	beq.n	80093ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d107      	bne.n	80093ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e06b      	b.n	80094c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009416:	3b01      	subs	r3, #1
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b04      	cmp	r3, #4
 800942a:	d11b      	bne.n	8009464 <HAL_I2C_Master_Transmit+0x188>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d017      	beq.n	8009464 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	781a      	ldrb	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944e:	b29b      	uxth	r3, r3
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945c:	3b01      	subs	r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	6a39      	ldr	r1, [r7, #32]
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 fdfc 	bl	800a066 <I2C_WaitOnBTFFlagUntilTimeout>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00d      	beq.n	8009490 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009478:	2b04      	cmp	r3, #4
 800947a:	d107      	bne.n	800948c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800948a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e01a      	b.n	80094c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009494:	2b00      	cmp	r3, #0
 8009496:	d194      	bne.n	80093c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2220      	movs	r2, #32
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e000      	b.n	80094c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80094c4:	2302      	movs	r3, #2
  }
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	00100002 	.word	0x00100002
 80094d4:	ffff0000 	.word	0xffff0000

080094d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08c      	sub	sp, #48	; 0x30
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	461a      	mov	r2, r3
 80094e4:	460b      	mov	r3, r1
 80094e6:	817b      	strh	r3, [r7, #10]
 80094e8:	4613      	mov	r3, r2
 80094ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094ec:	f7fe fa4e 	bl	800798c <HAL_GetTick>
 80094f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	f040 820b 	bne.w	8009916 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	2319      	movs	r3, #25
 8009506:	2201      	movs	r2, #1
 8009508:	497c      	ldr	r1, [pc, #496]	; (80096fc <HAL_I2C_Master_Receive+0x224>)
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fc94 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009516:	2302      	movs	r3, #2
 8009518:	e1fe      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_I2C_Master_Receive+0x50>
 8009524:	2302      	movs	r3, #2
 8009526:	e1f7      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b01      	cmp	r3, #1
 800953c:	d007      	beq.n	800954e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0201 	orr.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800955c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2222      	movs	r2, #34	; 0x22
 8009562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2210      	movs	r2, #16
 800956a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	893a      	ldrh	r2, [r7, #8]
 800957e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4a5c      	ldr	r2, [pc, #368]	; (8009700 <HAL_I2C_Master_Receive+0x228>)
 800958e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009590:	8979      	ldrh	r1, [r7, #10]
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fb82 	bl	8009ca0 <I2C_MasterRequestRead>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e1b8      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d113      	bne.n	80095d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ae:	2300      	movs	r3, #0
 80095b0:	623b      	str	r3, [r7, #32]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	623b      	str	r3, [r7, #32]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	623b      	str	r3, [r7, #32]
 80095c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e18c      	b.n	80098f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d11b      	bne.n	8009616 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ee:	2300      	movs	r3, #0
 80095f0:	61fb      	str	r3, [r7, #28]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	61fb      	str	r3, [r7, #28]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	61fb      	str	r3, [r7, #28]
 8009602:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e16c      	b.n	80098f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961a:	2b02      	cmp	r3, #2
 800961c:	d11b      	bne.n	8009656 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800962c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800963c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800963e:	2300      	movs	r3, #0
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	61bb      	str	r3, [r7, #24]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	61bb      	str	r3, [r7, #24]
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	e14c      	b.n	80098f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009666:	2300      	movs	r3, #0
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	617b      	str	r3, [r7, #20]
 800967a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800967c:	e138      	b.n	80098f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009682:	2b03      	cmp	r3, #3
 8009684:	f200 80f1 	bhi.w	800986a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968c:	2b01      	cmp	r3, #1
 800968e:	d123      	bne.n	80096d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 fd27 	bl	800a0e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e139      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c0:	3b01      	subs	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096d6:	e10b      	b.n	80098f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d14e      	bne.n	800977e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	2200      	movs	r2, #0
 80096e8:	4906      	ldr	r1, [pc, #24]	; (8009704 <HAL_I2C_Master_Receive+0x22c>)
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 fba4 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d008      	beq.n	8009708 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e10e      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
 80096fa:	bf00      	nop
 80096fc:	00100002 	.word	0x00100002
 8009700:	ffff0000 	.word	0xffff0000
 8009704:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691a      	ldr	r2, [r3, #16]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	b2d2      	uxtb	r2, r2
 8009724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009734:	3b01      	subs	r3, #1
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009740:	b29b      	uxth	r3, r3
 8009742:	3b01      	subs	r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	b2d2      	uxtb	r2, r2
 8009756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009772:	b29b      	uxth	r3, r3
 8009774:	3b01      	subs	r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800977c:	e0b8      	b.n	80098f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2200      	movs	r2, #0
 8009786:	4966      	ldr	r1, [pc, #408]	; (8009920 <HAL_I2C_Master_Receive+0x448>)
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fb55 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e0bf      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691a      	ldr	r2, [r3, #16]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	2200      	movs	r2, #0
 80097e2:	494f      	ldr	r1, [pc, #316]	; (8009920 <HAL_I2C_Master_Receive+0x448>)
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 fb27 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e091      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691a      	ldr	r2, [r3, #16]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	b2d2      	uxtb	r2, r2
 8009810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009820:	3b01      	subs	r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	b2d2      	uxtb	r2, r2
 8009842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009852:	3b01      	subs	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009868:	e042      	b.n	80098f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800986a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 fc3a 	bl	800a0e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e04c      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	b2d2      	uxtb	r2, r2
 800988a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989a:	3b01      	subs	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f003 0304 	and.w	r3, r3, #4
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d118      	bne.n	80098f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	691a      	ldr	r2, [r3, #16]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	b2d2      	uxtb	r2, r2
 80098ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098da:	3b01      	subs	r3, #1
 80098dc:	b29a      	uxth	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f47f aec2 	bne.w	800967e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	e000      	b.n	8009918 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009916:	2302      	movs	r3, #2
  }
}
 8009918:	4618      	mov	r0, r3
 800991a:	3728      	adds	r7, #40	; 0x28
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	00010004 	.word	0x00010004

08009924 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	; 0x28
 8009928:	af02      	add	r7, sp, #8
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	460b      	mov	r3, r1
 8009932:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009934:	f7fe f82a 	bl	800798c <HAL_GetTick>
 8009938:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800993a:	2301      	movs	r3, #1
 800993c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b20      	cmp	r3, #32
 8009948:	f040 8110 	bne.w	8009b6c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	2319      	movs	r3, #25
 8009952:	2201      	movs	r2, #1
 8009954:	4988      	ldr	r1, [pc, #544]	; (8009b78 <HAL_I2C_IsDeviceReady+0x254>)
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fa6e 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009962:	2302      	movs	r3, #2
 8009964:	e103      	b.n	8009b6e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_I2C_IsDeviceReady+0x50>
 8009970:	2302      	movs	r3, #2
 8009972:	e0fc      	b.n	8009b6e <HAL_I2C_IsDeviceReady+0x24a>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b01      	cmp	r3, #1
 8009988:	d007      	beq.n	800999a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0201 	orr.w	r2, r2, #1
 8009998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2224      	movs	r2, #36	; 0x24
 80099ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4a70      	ldr	r2, [pc, #448]	; (8009b7c <HAL_I2C_IsDeviceReady+0x258>)
 80099bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fa2c 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00c      	beq.n	8009a00 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099fa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e0b6      	b.n	8009b6e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a00:	897b      	ldrh	r3, [r7, #10]
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a0e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009a10:	f7fd ffbc 	bl	800798c <HAL_GetTick>
 8009a14:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	f003 0302 	and.w	r3, r3, #2
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	bf0c      	ite	eq
 8009a24:	2301      	moveq	r3, #1
 8009a26:	2300      	movne	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2301      	moveq	r3, #1
 8009a3e:	2300      	movne	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009a44:	e025      	b.n	8009a92 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a46:	f7fd ffa1 	bl	800798c <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d302      	bcc.n	8009a5c <HAL_I2C_IsDeviceReady+0x138>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d103      	bne.n	8009a64 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	22a0      	movs	r2, #160	; 0xa0
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	bf0c      	ite	eq
 8009a72:	2301      	moveq	r3, #1
 8009a74:	2300      	movne	r3, #0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a88:	bf0c      	ite	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	2300      	movne	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2ba0      	cmp	r3, #160	; 0xa0
 8009a9c:	d005      	beq.n	8009aaa <HAL_I2C_IsDeviceReady+0x186>
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <HAL_I2C_IsDeviceReady+0x186>
 8009aa4:	7dbb      	ldrb	r3, [r7, #22]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0cd      	beq.n	8009a46 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d129      	bne.n	8009b14 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ace:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	613b      	str	r3, [r7, #16]
 8009ae4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	2319      	movs	r3, #25
 8009aec:	2201      	movs	r2, #1
 8009aee:	4922      	ldr	r1, [pc, #136]	; (8009b78 <HAL_I2C_IsDeviceReady+0x254>)
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 f9a1 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e036      	b.n	8009b6e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	e02c      	b.n	8009b6e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b22:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b2c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	2319      	movs	r3, #25
 8009b34:	2201      	movs	r2, #1
 8009b36:	4910      	ldr	r1, [pc, #64]	; (8009b78 <HAL_I2C_IsDeviceReady+0x254>)
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f97d 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e012      	b.n	8009b6e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	f4ff af33 	bcc.w	80099be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e000      	b.n	8009b6e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8009b6c:	2302      	movs	r3, #2
  }
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3720      	adds	r7, #32
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	00100002 	.word	0x00100002
 8009b7c:	ffff0000 	.word	0xffff0000

08009b80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b8e:	b2db      	uxtb	r3, r3
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d006      	beq.n	8009bc6 <I2C_MasterRequestWrite+0x2a>
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d003      	beq.n	8009bc6 <I2C_MasterRequestWrite+0x2a>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bc4:	d108      	bne.n	8009bd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	e00b      	b.n	8009bf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	2b12      	cmp	r3, #18
 8009bde:	d107      	bne.n	8009bf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f91b 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e035      	b.n	8009c8e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c2a:	d108      	bne.n	8009c3e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c2c:	897b      	ldrh	r3, [r7, #10]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	461a      	mov	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c3a:	611a      	str	r2, [r3, #16]
 8009c3c:	e01b      	b.n	8009c76 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009c3e:	897b      	ldrh	r3, [r7, #10]
 8009c40:	11db      	asrs	r3, r3, #7
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	f003 0306 	and.w	r3, r3, #6
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	f063 030f 	orn	r3, r3, #15
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	490f      	ldr	r1, [pc, #60]	; (8009c98 <I2C_MasterRequestWrite+0xfc>)
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 f942 	bl	8009ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e010      	b.n	8009c8e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009c6c:	897b      	ldrh	r3, [r7, #10]
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	4908      	ldr	r1, [pc, #32]	; (8009c9c <I2C_MasterRequestWrite+0x100>)
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f932 	bl	8009ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e000      	b.n	8009c8e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	00010008 	.word	0x00010008
 8009c9c:	00010002 	.word	0x00010002

08009ca0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af02      	add	r7, sp, #8
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	607a      	str	r2, [r7, #4]
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	460b      	mov	r3, r1
 8009cae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d006      	beq.n	8009cda <I2C_MasterRequestRead+0x3a>
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d003      	beq.n	8009cda <I2C_MasterRequestRead+0x3a>
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cd8:	d108      	bne.n	8009cec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	e00b      	b.n	8009d04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf0:	2b11      	cmp	r3, #17
 8009cf2:	d107      	bne.n	8009d04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f891 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00c      	beq.n	8009d36 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e078      	b.n	8009e28 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d3e:	d108      	bne.n	8009d52 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009d40:	897b      	ldrh	r3, [r7, #10]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	f043 0301 	orr.w	r3, r3, #1
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	611a      	str	r2, [r3, #16]
 8009d50:	e05e      	b.n	8009e10 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d52:	897b      	ldrh	r3, [r7, #10]
 8009d54:	11db      	asrs	r3, r3, #7
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 0306 	and.w	r3, r3, #6
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f063 030f 	orn	r3, r3, #15
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	4930      	ldr	r1, [pc, #192]	; (8009e30 <I2C_MasterRequestRead+0x190>)
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f8b8 	bl	8009ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e053      	b.n	8009e28 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009d80:	897b      	ldrh	r3, [r7, #10]
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	4929      	ldr	r1, [pc, #164]	; (8009e34 <I2C_MasterRequestRead+0x194>)
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f8a8 	bl	8009ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e043      	b.n	8009e28 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009da0:	2300      	movs	r3, #0
 8009da2:	613b      	str	r3, [r7, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	613b      	str	r3, [r7, #16]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	613b      	str	r3, [r7, #16]
 8009db4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dc4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 f830 	bl	8009e38 <I2C_WaitOnFlagUntilTimeout>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009df2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e017      	b.n	8009e28 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009df8:	897b      	ldrh	r3, [r7, #10]
 8009dfa:	11db      	asrs	r3, r3, #7
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	f003 0306 	and.w	r3, r3, #6
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	f063 030e 	orn	r3, r3, #14
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	4907      	ldr	r1, [pc, #28]	; (8009e34 <I2C_MasterRequestRead+0x194>)
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 f865 	bl	8009ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	00010008 	.word	0x00010008
 8009e34:	00010002 	.word	0x00010002

08009e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	4613      	mov	r3, r2
 8009e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e48:	e025      	b.n	8009e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e50:	d021      	beq.n	8009e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e52:	f7fd fd9b 	bl	800798c <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d302      	bcc.n	8009e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d116      	bne.n	8009e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f043 0220 	orr.w	r2, r3, #32
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e023      	b.n	8009ede <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	0c1b      	lsrs	r3, r3, #16
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d10d      	bne.n	8009ebc <I2C_WaitOnFlagUntilTimeout+0x84>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	43da      	mvns	r2, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf0c      	ite	eq
 8009eb2:	2301      	moveq	r3, #1
 8009eb4:	2300      	movne	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	e00c      	b.n	8009ed6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	43da      	mvns	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bf0c      	ite	eq
 8009ece:	2301      	moveq	r3, #1
 8009ed0:	2300      	movne	r3, #0
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d0b6      	beq.n	8009e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
 8009ef2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ef4:	e051      	b.n	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f04:	d123      	bne.n	8009f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	f043 0204 	orr.w	r2, r3, #4
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e046      	b.n	8009fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f54:	d021      	beq.n	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f56:	f7fd fd19 	bl	800798c <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d302      	bcc.n	8009f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d116      	bne.n	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2220      	movs	r2, #32
 8009f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	f043 0220 	orr.w	r2, r3, #32
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e020      	b.n	8009fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d10c      	bne.n	8009fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	43da      	mvns	r2, r3
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	4013      	ands	r3, r2
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bf14      	ite	ne
 8009fb6:	2301      	movne	r3, #1
 8009fb8:	2300      	moveq	r3, #0
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	e00b      	b.n	8009fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	43da      	mvns	r2, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bf14      	ite	ne
 8009fd0:	2301      	movne	r3, #1
 8009fd2:	2300      	moveq	r3, #0
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d18d      	bne.n	8009ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ff0:	e02d      	b.n	800a04e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f8ce 	bl	800a194 <I2C_IsAcknowledgeFailed>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e02d      	b.n	800a05e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a008:	d021      	beq.n	800a04e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a00a:	f7fd fcbf 	bl	800798c <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	d302      	bcc.n	800a020 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d116      	bne.n	800a04e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2220      	movs	r2, #32
 800a02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	f043 0220 	orr.w	r2, r3, #32
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e007      	b.n	800a05e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a058:	2b80      	cmp	r3, #128	; 0x80
 800a05a:	d1ca      	bne.n	8009ff2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a072:	e02d      	b.n	800a0d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f88d 	bl	800a194 <I2C_IsAcknowledgeFailed>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e02d      	b.n	800a0e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a08a:	d021      	beq.n	800a0d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a08c:	f7fd fc7e 	bl	800798c <HAL_GetTick>
 800a090:	4602      	mov	r2, r0
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d302      	bcc.n	800a0a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d116      	bne.n	800a0d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0bc:	f043 0220 	orr.w	r2, r3, #32
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e007      	b.n	800a0e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	f003 0304 	and.w	r3, r3, #4
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d1ca      	bne.n	800a074 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0f4:	e042      	b.n	800a17c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	f003 0310 	and.w	r3, r3, #16
 800a100:	2b10      	cmp	r3, #16
 800a102:	d119      	bne.n	800a138 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f06f 0210 	mvn.w	r2, #16
 800a10c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2220      	movs	r2, #32
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e029      	b.n	800a18c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a138:	f7fd fc28 	bl	800798c <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	429a      	cmp	r2, r3
 800a146:	d302      	bcc.n	800a14e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d116      	bne.n	800a17c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2220      	movs	r2, #32
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a168:	f043 0220 	orr.w	r2, r3, #32
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e007      	b.n	800a18c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	d1b5      	bne.n	800a0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1aa:	d11b      	bne.n	800a1e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	f043 0204 	orr.w	r2, r3, #4
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
	...

0800a1f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e25b      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d075      	beq.n	800a2fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a212:	4ba3      	ldr	r3, [pc, #652]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f003 030c 	and.w	r3, r3, #12
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d00c      	beq.n	800a238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a21e:	4ba0      	ldr	r3, [pc, #640]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a226:	2b08      	cmp	r3, #8
 800a228:	d112      	bne.n	800a250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a22a:	4b9d      	ldr	r3, [pc, #628]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a236:	d10b      	bne.n	800a250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a238:	4b99      	ldr	r3, [pc, #612]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d05b      	beq.n	800a2fc <HAL_RCC_OscConfig+0x108>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d157      	bne.n	800a2fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e236      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a258:	d106      	bne.n	800a268 <HAL_RCC_OscConfig+0x74>
 800a25a:	4b91      	ldr	r3, [pc, #580]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a90      	ldr	r2, [pc, #576]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	e01d      	b.n	800a2a4 <HAL_RCC_OscConfig+0xb0>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a270:	d10c      	bne.n	800a28c <HAL_RCC_OscConfig+0x98>
 800a272:	4b8b      	ldr	r3, [pc, #556]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a8a      	ldr	r2, [pc, #552]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a27c:	6013      	str	r3, [r2, #0]
 800a27e:	4b88      	ldr	r3, [pc, #544]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a87      	ldr	r2, [pc, #540]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	e00b      	b.n	800a2a4 <HAL_RCC_OscConfig+0xb0>
 800a28c:	4b84      	ldr	r3, [pc, #528]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a83      	ldr	r2, [pc, #524]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	4b81      	ldr	r3, [pc, #516]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a80      	ldr	r2, [pc, #512]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a29e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d013      	beq.n	800a2d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2ac:	f7fd fb6e 	bl	800798c <HAL_GetTick>
 800a2b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2b2:	e008      	b.n	800a2c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2b4:	f7fd fb6a 	bl	800798c <HAL_GetTick>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	2b64      	cmp	r3, #100	; 0x64
 800a2c0:	d901      	bls.n	800a2c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e1fb      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2c6:	4b76      	ldr	r3, [pc, #472]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0f0      	beq.n	800a2b4 <HAL_RCC_OscConfig+0xc0>
 800a2d2:	e014      	b.n	800a2fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2d4:	f7fd fb5a 	bl	800798c <HAL_GetTick>
 800a2d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2da:	e008      	b.n	800a2ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2dc:	f7fd fb56 	bl	800798c <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b64      	cmp	r3, #100	; 0x64
 800a2e8:	d901      	bls.n	800a2ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e1e7      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2ee:	4b6c      	ldr	r3, [pc, #432]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1f0      	bne.n	800a2dc <HAL_RCC_OscConfig+0xe8>
 800a2fa:	e000      	b.n	800a2fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d063      	beq.n	800a3d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a30a:	4b65      	ldr	r3, [pc, #404]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f003 030c 	and.w	r3, r3, #12
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00b      	beq.n	800a32e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a316:	4b62      	ldr	r3, [pc, #392]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a31e:	2b08      	cmp	r3, #8
 800a320:	d11c      	bne.n	800a35c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a322:	4b5f      	ldr	r3, [pc, #380]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d116      	bne.n	800a35c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a32e:	4b5c      	ldr	r3, [pc, #368]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d005      	beq.n	800a346 <HAL_RCC_OscConfig+0x152>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d001      	beq.n	800a346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e1bb      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a346:	4b56      	ldr	r3, [pc, #344]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	00db      	lsls	r3, r3, #3
 800a354:	4952      	ldr	r1, [pc, #328]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a356:	4313      	orrs	r3, r2
 800a358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a35a:	e03a      	b.n	800a3d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d020      	beq.n	800a3a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a364:	4b4f      	ldr	r3, [pc, #316]	; (800a4a4 <HAL_RCC_OscConfig+0x2b0>)
 800a366:	2201      	movs	r2, #1
 800a368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a36a:	f7fd fb0f 	bl	800798c <HAL_GetTick>
 800a36e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a370:	e008      	b.n	800a384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a372:	f7fd fb0b 	bl	800798c <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d901      	bls.n	800a384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e19c      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a384:	4b46      	ldr	r3, [pc, #280]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d0f0      	beq.n	800a372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a390:	4b43      	ldr	r3, [pc, #268]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4940      	ldr	r1, [pc, #256]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	600b      	str	r3, [r1, #0]
 800a3a4:	e015      	b.n	800a3d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3a6:	4b3f      	ldr	r3, [pc, #252]	; (800a4a4 <HAL_RCC_OscConfig+0x2b0>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ac:	f7fd faee 	bl	800798c <HAL_GetTick>
 800a3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3b2:	e008      	b.n	800a3c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a3b4:	f7fd faea 	bl	800798c <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d901      	bls.n	800a3c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e17b      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3c6:	4b36      	ldr	r3, [pc, #216]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1f0      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0308 	and.w	r3, r3, #8
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d030      	beq.n	800a440 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d016      	beq.n	800a414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3e6:	4b30      	ldr	r3, [pc, #192]	; (800a4a8 <HAL_RCC_OscConfig+0x2b4>)
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ec:	f7fd face 	bl	800798c <HAL_GetTick>
 800a3f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3f2:	e008      	b.n	800a406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3f4:	f7fd faca 	bl	800798c <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d901      	bls.n	800a406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e15b      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a406:	4b26      	ldr	r3, [pc, #152]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0f0      	beq.n	800a3f4 <HAL_RCC_OscConfig+0x200>
 800a412:	e015      	b.n	800a440 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a414:	4b24      	ldr	r3, [pc, #144]	; (800a4a8 <HAL_RCC_OscConfig+0x2b4>)
 800a416:	2200      	movs	r2, #0
 800a418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a41a:	f7fd fab7 	bl	800798c <HAL_GetTick>
 800a41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a420:	e008      	b.n	800a434 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a422:	f7fd fab3 	bl	800798c <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d901      	bls.n	800a434 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e144      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a434:	4b1a      	ldr	r3, [pc, #104]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1f0      	bne.n	800a422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 80a0 	beq.w	800a58e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a452:	4b13      	ldr	r3, [pc, #76]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10f      	bne.n	800a47e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]
 800a462:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	4a0e      	ldr	r2, [pc, #56]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a46c:	6413      	str	r3, [r2, #64]	; 0x40
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <HAL_RCC_OscConfig+0x2ac>)
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a476:	60bb      	str	r3, [r7, #8]
 800a478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a47a:	2301      	movs	r3, #1
 800a47c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <HAL_RCC_OscConfig+0x2b8>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a486:	2b00      	cmp	r3, #0
 800a488:	d121      	bne.n	800a4ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a48a:	4b08      	ldr	r3, [pc, #32]	; (800a4ac <HAL_RCC_OscConfig+0x2b8>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a07      	ldr	r2, [pc, #28]	; (800a4ac <HAL_RCC_OscConfig+0x2b8>)
 800a490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a496:	f7fd fa79 	bl	800798c <HAL_GetTick>
 800a49a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a49c:	e011      	b.n	800a4c2 <HAL_RCC_OscConfig+0x2ce>
 800a49e:	bf00      	nop
 800a4a0:	40023800 	.word	0x40023800
 800a4a4:	42470000 	.word	0x42470000
 800a4a8:	42470e80 	.word	0x42470e80
 800a4ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4b0:	f7fd fa6c 	bl	800798c <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d901      	bls.n	800a4c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e0fd      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4c2:	4b81      	ldr	r3, [pc, #516]	; (800a6c8 <HAL_RCC_OscConfig+0x4d4>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0f0      	beq.n	800a4b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d106      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x2f0>
 800a4d6:	4b7d      	ldr	r3, [pc, #500]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4da:	4a7c      	ldr	r2, [pc, #496]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a4dc:	f043 0301 	orr.w	r3, r3, #1
 800a4e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e2:	e01c      	b.n	800a51e <HAL_RCC_OscConfig+0x32a>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	2b05      	cmp	r3, #5
 800a4ea:	d10c      	bne.n	800a506 <HAL_RCC_OscConfig+0x312>
 800a4ec:	4b77      	ldr	r3, [pc, #476]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f0:	4a76      	ldr	r2, [pc, #472]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a4f2:	f043 0304 	orr.w	r3, r3, #4
 800a4f6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f8:	4b74      	ldr	r3, [pc, #464]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fc:	4a73      	ldr	r2, [pc, #460]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a4fe:	f043 0301 	orr.w	r3, r3, #1
 800a502:	6713      	str	r3, [r2, #112]	; 0x70
 800a504:	e00b      	b.n	800a51e <HAL_RCC_OscConfig+0x32a>
 800a506:	4b71      	ldr	r3, [pc, #452]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50a:	4a70      	ldr	r2, [pc, #448]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a50c:	f023 0301 	bic.w	r3, r3, #1
 800a510:	6713      	str	r3, [r2, #112]	; 0x70
 800a512:	4b6e      	ldr	r3, [pc, #440]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a516:	4a6d      	ldr	r2, [pc, #436]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a518:	f023 0304 	bic.w	r3, r3, #4
 800a51c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d015      	beq.n	800a552 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a526:	f7fd fa31 	bl	800798c <HAL_GetTick>
 800a52a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a52c:	e00a      	b.n	800a544 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a52e:	f7fd fa2d 	bl	800798c <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	f241 3288 	movw	r2, #5000	; 0x1388
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d901      	bls.n	800a544 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e0bc      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a544:	4b61      	ldr	r3, [pc, #388]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0ee      	beq.n	800a52e <HAL_RCC_OscConfig+0x33a>
 800a550:	e014      	b.n	800a57c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a552:	f7fd fa1b 	bl	800798c <HAL_GetTick>
 800a556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a558:	e00a      	b.n	800a570 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a55a:	f7fd fa17 	bl	800798c <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	f241 3288 	movw	r2, #5000	; 0x1388
 800a568:	4293      	cmp	r3, r2
 800a56a:	d901      	bls.n	800a570 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e0a6      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a570:	4b56      	ldr	r3, [pc, #344]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1ee      	bne.n	800a55a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d105      	bne.n	800a58e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a582:	4b52      	ldr	r3, [pc, #328]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	4a51      	ldr	r2, [pc, #324]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a58c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 8092 	beq.w	800a6bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a598:	4b4c      	ldr	r3, [pc, #304]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f003 030c 	and.w	r3, r3, #12
 800a5a0:	2b08      	cmp	r3, #8
 800a5a2:	d05c      	beq.n	800a65e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d141      	bne.n	800a630 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5ac:	4b48      	ldr	r3, [pc, #288]	; (800a6d0 <HAL_RCC_OscConfig+0x4dc>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5b2:	f7fd f9eb 	bl	800798c <HAL_GetTick>
 800a5b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5b8:	e008      	b.n	800a5cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5ba:	f7fd f9e7 	bl	800798c <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d901      	bls.n	800a5cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e078      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5cc:	4b3f      	ldr	r3, [pc, #252]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1f0      	bne.n	800a5ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	69da      	ldr	r2, [r3, #28]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	019b      	lsls	r3, r3, #6
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ee:	085b      	lsrs	r3, r3, #1
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	041b      	lsls	r3, r3, #16
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fa:	061b      	lsls	r3, r3, #24
 800a5fc:	4933      	ldr	r1, [pc, #204]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a602:	4b33      	ldr	r3, [pc, #204]	; (800a6d0 <HAL_RCC_OscConfig+0x4dc>)
 800a604:	2201      	movs	r2, #1
 800a606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a608:	f7fd f9c0 	bl	800798c <HAL_GetTick>
 800a60c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a60e:	e008      	b.n	800a622 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a610:	f7fd f9bc 	bl	800798c <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d901      	bls.n	800a622 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e04d      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a622:	4b2a      	ldr	r3, [pc, #168]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0f0      	beq.n	800a610 <HAL_RCC_OscConfig+0x41c>
 800a62e:	e045      	b.n	800a6bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a630:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <HAL_RCC_OscConfig+0x4dc>)
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a636:	f7fd f9a9 	bl	800798c <HAL_GetTick>
 800a63a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a63c:	e008      	b.n	800a650 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a63e:	f7fd f9a5 	bl	800798c <HAL_GetTick>
 800a642:	4602      	mov	r2, r0
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	1ad3      	subs	r3, r2, r3
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d901      	bls.n	800a650 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e036      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a650:	4b1e      	ldr	r3, [pc, #120]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1f0      	bne.n	800a63e <HAL_RCC_OscConfig+0x44a>
 800a65c:	e02e      	b.n	800a6bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d101      	bne.n	800a66a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e029      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a66a:	4b18      	ldr	r3, [pc, #96]	; (800a6cc <HAL_RCC_OscConfig+0x4d8>)
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d11c      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a688:	429a      	cmp	r2, r3
 800a68a:	d115      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a692:	4013      	ands	r3, r2
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a698:	4293      	cmp	r3, r2
 800a69a:	d10d      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d106      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d001      	beq.n	800a6bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e000      	b.n	800a6be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	40007000 	.word	0x40007000
 800a6cc:	40023800 	.word	0x40023800
 800a6d0:	42470060 	.word	0x42470060

0800a6d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e0cc      	b.n	800a882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a6e8:	4b68      	ldr	r3, [pc, #416]	; (800a88c <HAL_RCC_ClockConfig+0x1b8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 030f 	and.w	r3, r3, #15
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d90c      	bls.n	800a710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6f6:	4b65      	ldr	r3, [pc, #404]	; (800a88c <HAL_RCC_ClockConfig+0x1b8>)
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	b2d2      	uxtb	r2, r2
 800a6fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6fe:	4b63      	ldr	r3, [pc, #396]	; (800a88c <HAL_RCC_ClockConfig+0x1b8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 030f 	and.w	r3, r3, #15
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d001      	beq.n	800a710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e0b8      	b.n	800a882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d020      	beq.n	800a75e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a728:	4b59      	ldr	r3, [pc, #356]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	4a58      	ldr	r2, [pc, #352]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a72e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0308 	and.w	r3, r3, #8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a740:	4b53      	ldr	r3, [pc, #332]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	4a52      	ldr	r2, [pc, #328]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a74a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a74c:	4b50      	ldr	r3, [pc, #320]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	494d      	ldr	r1, [pc, #308]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	d044      	beq.n	800a7f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d107      	bne.n	800a782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a772:	4b47      	ldr	r3, [pc, #284]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d119      	bne.n	800a7b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e07f      	b.n	800a882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2b02      	cmp	r3, #2
 800a788:	d003      	beq.n	800a792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a78e:	2b03      	cmp	r3, #3
 800a790:	d107      	bne.n	800a7a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a792:	4b3f      	ldr	r3, [pc, #252]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d109      	bne.n	800a7b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e06f      	b.n	800a882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7a2:	4b3b      	ldr	r3, [pc, #236]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e067      	b.n	800a882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7b2:	4b37      	ldr	r3, [pc, #220]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f023 0203 	bic.w	r2, r3, #3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	4934      	ldr	r1, [pc, #208]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a7c4:	f7fd f8e2 	bl	800798c <HAL_GetTick>
 800a7c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7ca:	e00a      	b.n	800a7e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7cc:	f7fd f8de 	bl	800798c <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d901      	bls.n	800a7e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e04f      	b.n	800a882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7e2:	4b2b      	ldr	r3, [pc, #172]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f003 020c 	and.w	r2, r3, #12
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d1eb      	bne.n	800a7cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a7f4:	4b25      	ldr	r3, [pc, #148]	; (800a88c <HAL_RCC_ClockConfig+0x1b8>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 030f 	and.w	r3, r3, #15
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d20c      	bcs.n	800a81c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a802:	4b22      	ldr	r3, [pc, #136]	; (800a88c <HAL_RCC_ClockConfig+0x1b8>)
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a80a:	4b20      	ldr	r3, [pc, #128]	; (800a88c <HAL_RCC_ClockConfig+0x1b8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 030f 	and.w	r3, r3, #15
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d001      	beq.n	800a81c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e032      	b.n	800a882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b00      	cmp	r3, #0
 800a826:	d008      	beq.n	800a83a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a828:	4b19      	ldr	r3, [pc, #100]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	4916      	ldr	r1, [pc, #88]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a836:	4313      	orrs	r3, r2
 800a838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0308 	and.w	r3, r3, #8
 800a842:	2b00      	cmp	r3, #0
 800a844:	d009      	beq.n	800a85a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a846:	4b12      	ldr	r3, [pc, #72]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	490e      	ldr	r1, [pc, #56]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a856:	4313      	orrs	r3, r2
 800a858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a85a:	f000 f821 	bl	800a8a0 <HAL_RCC_GetSysClockFreq>
 800a85e:	4601      	mov	r1, r0
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <HAL_RCC_ClockConfig+0x1bc>)
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	091b      	lsrs	r3, r3, #4
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	4a0a      	ldr	r2, [pc, #40]	; (800a894 <HAL_RCC_ClockConfig+0x1c0>)
 800a86c:	5cd3      	ldrb	r3, [r2, r3]
 800a86e:	fa21 f303 	lsr.w	r3, r1, r3
 800a872:	4a09      	ldr	r2, [pc, #36]	; (800a898 <HAL_RCC_ClockConfig+0x1c4>)
 800a874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <HAL_RCC_ClockConfig+0x1c8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fd f842 	bl	8007904 <HAL_InitTick>

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	40023c00 	.word	0x40023c00
 800a890:	40023800 	.word	0x40023800
 800a894:	08015ad4 	.word	0x08015ad4
 800a898:	20000144 	.word	0x20000144
 800a89c:	2000014c 	.word	0x2000014c

0800a8a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	607b      	str	r3, [r7, #4]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8b6:	4b50      	ldr	r3, [pc, #320]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f003 030c 	and.w	r3, r3, #12
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d007      	beq.n	800a8d2 <HAL_RCC_GetSysClockFreq+0x32>
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d008      	beq.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x38>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f040 808d 	bne.w	800a9e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8cc:	4b4b      	ldr	r3, [pc, #300]	; (800a9fc <HAL_RCC_GetSysClockFreq+0x15c>)
 800a8ce:	60bb      	str	r3, [r7, #8]
       break;
 800a8d0:	e08c      	b.n	800a9ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8d2:	4b4b      	ldr	r3, [pc, #300]	; (800aa00 <HAL_RCC_GetSysClockFreq+0x160>)
 800a8d4:	60bb      	str	r3, [r7, #8]
      break;
 800a8d6:	e089      	b.n	800a9ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8d8:	4b47      	ldr	r3, [pc, #284]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8e2:	4b45      	ldr	r3, [pc, #276]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d023      	beq.n	800a936 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8ee:	4b42      	ldr	r3, [pc, #264]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	099b      	lsrs	r3, r3, #6
 800a8f4:	f04f 0400 	mov.w	r4, #0
 800a8f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a8fc:	f04f 0200 	mov.w	r2, #0
 800a900:	ea03 0501 	and.w	r5, r3, r1
 800a904:	ea04 0602 	and.w	r6, r4, r2
 800a908:	4a3d      	ldr	r2, [pc, #244]	; (800aa00 <HAL_RCC_GetSysClockFreq+0x160>)
 800a90a:	fb02 f106 	mul.w	r1, r2, r6
 800a90e:	2200      	movs	r2, #0
 800a910:	fb02 f205 	mul.w	r2, r2, r5
 800a914:	440a      	add	r2, r1
 800a916:	493a      	ldr	r1, [pc, #232]	; (800aa00 <HAL_RCC_GetSysClockFreq+0x160>)
 800a918:	fba5 0101 	umull	r0, r1, r5, r1
 800a91c:	1853      	adds	r3, r2, r1
 800a91e:	4619      	mov	r1, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	461a      	mov	r2, r3
 800a928:	4623      	mov	r3, r4
 800a92a:	f7f6 f9ad 	bl	8000c88 <__aeabi_uldivmod>
 800a92e:	4603      	mov	r3, r0
 800a930:	460c      	mov	r4, r1
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e049      	b.n	800a9ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a936:	4b30      	ldr	r3, [pc, #192]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x158>)
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	099b      	lsrs	r3, r3, #6
 800a93c:	f04f 0400 	mov.w	r4, #0
 800a940:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	ea03 0501 	and.w	r5, r3, r1
 800a94c:	ea04 0602 	and.w	r6, r4, r2
 800a950:	4629      	mov	r1, r5
 800a952:	4632      	mov	r2, r6
 800a954:	f04f 0300 	mov.w	r3, #0
 800a958:	f04f 0400 	mov.w	r4, #0
 800a95c:	0154      	lsls	r4, r2, #5
 800a95e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a962:	014b      	lsls	r3, r1, #5
 800a964:	4619      	mov	r1, r3
 800a966:	4622      	mov	r2, r4
 800a968:	1b49      	subs	r1, r1, r5
 800a96a:	eb62 0206 	sbc.w	r2, r2, r6
 800a96e:	f04f 0300 	mov.w	r3, #0
 800a972:	f04f 0400 	mov.w	r4, #0
 800a976:	0194      	lsls	r4, r2, #6
 800a978:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a97c:	018b      	lsls	r3, r1, #6
 800a97e:	1a5b      	subs	r3, r3, r1
 800a980:	eb64 0402 	sbc.w	r4, r4, r2
 800a984:	f04f 0100 	mov.w	r1, #0
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	00e2      	lsls	r2, r4, #3
 800a98e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a992:	00d9      	lsls	r1, r3, #3
 800a994:	460b      	mov	r3, r1
 800a996:	4614      	mov	r4, r2
 800a998:	195b      	adds	r3, r3, r5
 800a99a:	eb44 0406 	adc.w	r4, r4, r6
 800a99e:	f04f 0100 	mov.w	r1, #0
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	02a2      	lsls	r2, r4, #10
 800a9a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a9ac:	0299      	lsls	r1, r3, #10
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f04f 0400 	mov.w	r4, #0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	4623      	mov	r3, r4
 800a9c0:	f7f6 f962 	bl	8000c88 <__aeabi_uldivmod>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9ca:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x158>)
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	0c1b      	lsrs	r3, r3, #16
 800a9d0:	f003 0303 	and.w	r3, r3, #3
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e2:	60bb      	str	r3, [r7, #8]
      break;
 800a9e4:	e002      	b.n	800a9ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a9e6:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <HAL_RCC_GetSysClockFreq+0x15c>)
 800a9e8:	60bb      	str	r3, [r7, #8]
      break;
 800a9ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40023800 	.word	0x40023800
 800a9fc:	00f42400 	.word	0x00f42400
 800aa00:	017d7840 	.word	0x017d7840

0800aa04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa08:	4b03      	ldr	r3, [pc, #12]	; (800aa18 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	20000144 	.word	0x20000144

0800aa1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa20:	f7ff fff0 	bl	800aa04 <HAL_RCC_GetHCLKFreq>
 800aa24:	4601      	mov	r1, r0
 800aa26:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	0a9b      	lsrs	r3, r3, #10
 800aa2c:	f003 0307 	and.w	r3, r3, #7
 800aa30:	4a03      	ldr	r2, [pc, #12]	; (800aa40 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa32:	5cd3      	ldrb	r3, [r2, r3]
 800aa34:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	40023800 	.word	0x40023800
 800aa40:	08015ae4 	.word	0x08015ae4

0800aa44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e022      	b.n	800aa9c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d105      	bne.n	800aa6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f7f8 fbcd 	bl	8003208 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2203      	movs	r2, #3
 800aa72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f814 	bl	800aaa4 <HAL_SD_InitCard>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e00a      	b.n	800aa9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aaa4:	b5b0      	push	{r4, r5, r7, lr}
 800aaa6:	b08e      	sub	sp, #56	; 0x38
 800aaa8:	af04      	add	r7, sp, #16
 800aaaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800aab4:	2300      	movs	r3, #0
 800aab6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800aac0:	2376      	movs	r3, #118	; 0x76
 800aac2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681d      	ldr	r5, [r3, #0]
 800aac8:	466c      	mov	r4, sp
 800aaca:	f107 0314 	add.w	r3, r7, #20
 800aace:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aad6:	f107 0308 	add.w	r3, r7, #8
 800aada:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aadc:	4628      	mov	r0, r5
 800aade:	f002 f803 	bl	800cae8 <SDIO_Init>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800aae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e031      	b.n	800ab58 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800aaf4:	4b1a      	ldr	r3, [pc, #104]	; (800ab60 <HAL_SD_InitCard+0xbc>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f002 f83b 	bl	800cb7a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ab04:	4b16      	ldr	r3, [pc, #88]	; (800ab60 <HAL_SD_InitCard+0xbc>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 ffdc 	bl	800bac8 <SD_PowerON>
 800ab10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00b      	beq.n	800ab30 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	431a      	orrs	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e013      	b.n	800ab58 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fefb 	bl	800b92c <SD_InitCard>
 800ab36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00b      	beq.n	800ab56 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e000      	b.n	800ab58 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3728      	adds	r7, #40	; 0x28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ab60:	422580a0 	.word	0x422580a0

0800ab64 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08c      	sub	sp, #48	; 0x30
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d107      	bne.n	800ab8c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e0c9      	b.n	800ad20 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	f040 80c2 	bne.w	800ad1e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abaa:	429a      	cmp	r2, r3
 800abac:	d907      	bls.n	800abbe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e0b0      	b.n	800ad20 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2203      	movs	r2, #3
 800abc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	6812      	ldr	r2, [r2, #0]
 800abd8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800abdc:	f043 0302 	orr.w	r3, r3, #2
 800abe0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	4a50      	ldr	r2, [pc, #320]	; (800ad28 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800abe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	4a4f      	ldr	r2, [pc, #316]	; (800ad2c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800abf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf6:	2200      	movs	r2, #0
 800abf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3380      	adds	r3, #128	; 0x80
 800ac04:	4619      	mov	r1, r3
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	025b      	lsls	r3, r3, #9
 800ac0c:	089b      	lsrs	r3, r3, #2
 800ac0e:	f7fd fce9 	bl	80085e4 <HAL_DMA_Start_IT>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d017      	beq.n	800ac48 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ac26:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a40      	ldr	r2, [pc, #256]	; (800ad30 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ac2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e06b      	b.n	800ad20 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ac48:	4b3a      	ldr	r3, [pc, #232]	; (800ad34 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d002      	beq.n	800ac5c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	025b      	lsls	r3, r3, #9
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac64:	4618      	mov	r0, r3
 800ac66:	f002 f81b 	bl	800cca0 <SDMMC_CmdBlockLength>
 800ac6a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00f      	beq.n	800ac92 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a2e      	ldr	r2, [pc, #184]	; (800ad30 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ac78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac80:	431a      	orrs	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e046      	b.n	800ad20 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac96:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	025b      	lsls	r3, r3, #9
 800ac9c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ac9e:	2390      	movs	r3, #144	; 0x90
 800aca0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aca2:	2302      	movs	r3, #2
 800aca4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800acaa:	2301      	movs	r3, #1
 800acac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f107 0210 	add.w	r2, r7, #16
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 ffc5 	bl	800cc48 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d90a      	bls.n	800acda <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2282      	movs	r2, #130	; 0x82
 800acc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acd0:	4618      	mov	r0, r3
 800acd2:	f002 f829 	bl	800cd28 <SDMMC_CmdReadMultiBlock>
 800acd6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800acd8:	e009      	b.n	800acee <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2281      	movs	r2, #129	; 0x81
 800acde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ace6:	4618      	mov	r0, r3
 800ace8:	f001 fffc 	bl	800cce4 <SDMMC_CmdReadSingleBlock>
 800acec:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d012      	beq.n	800ad1a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a0d      	ldr	r2, [pc, #52]	; (800ad30 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	431a      	orrs	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e002      	b.n	800ad20 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e000      	b.n	800ad20 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800ad1e:	2302      	movs	r3, #2
  }
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3730      	adds	r7, #48	; 0x30
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	0800b73b 	.word	0x0800b73b
 800ad2c:	0800b7ad 	.word	0x0800b7ad
 800ad30:	004005ff 	.word	0x004005ff
 800ad34:	4225858c 	.word	0x4225858c

0800ad38 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08c      	sub	sp, #48	; 0x30
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d107      	bne.n	800ad60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e0ce      	b.n	800aefe <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	f040 80c7 	bne.w	800aefc <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	441a      	add	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d907      	bls.n	800ad92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e0b5      	b.n	800aefe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2203      	movs	r2, #3
 800ad96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	6812      	ldr	r2, [r2, #0]
 800adac:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800adb0:	f043 0302 	orr.w	r3, r3, #2
 800adb4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adba:	4a53      	ldr	r2, [pc, #332]	; (800af08 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800adbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc2:	4a52      	ldr	r2, [pc, #328]	; (800af0c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800adc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adca:	2200      	movs	r2, #0
 800adcc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add2:	2b01      	cmp	r3, #1
 800add4:	d002      	beq.n	800addc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	025b      	lsls	r3, r3, #9
 800adda:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ade4:	4618      	mov	r0, r3
 800ade6:	f001 ff5b 	bl	800cca0 <SDMMC_CmdBlockLength>
 800adea:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00f      	beq.n	800ae12 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a46      	ldr	r2, [pc, #280]	; (800af10 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800adf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	431a      	orrs	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e075      	b.n	800aefe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d90a      	bls.n	800ae2e <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	22a0      	movs	r2, #160	; 0xa0
 800ae1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae24:	4618      	mov	r0, r3
 800ae26:	f001 ffc3 	bl	800cdb0 <SDMMC_CmdWriteMultiBlock>
 800ae2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae2c:	e009      	b.n	800ae42 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2290      	movs	r2, #144	; 0x90
 800ae32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 ff96 	bl	800cd6c <SDMMC_CmdWriteSingleBlock>
 800ae40:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d012      	beq.n	800ae6e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a30      	ldr	r2, [pc, #192]	; (800af10 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800ae4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae56:	431a      	orrs	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e047      	b.n	800aefe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ae6e:	4b29      	ldr	r3, [pc, #164]	; (800af14 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ae78:	68b9      	ldr	r1, [r7, #8]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3380      	adds	r3, #128	; 0x80
 800ae80:	461a      	mov	r2, r3
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	025b      	lsls	r3, r3, #9
 800ae86:	089b      	lsrs	r3, r3, #2
 800ae88:	f7fd fbac 	bl	80085e4 <HAL_DMA_Start_IT>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d01c      	beq.n	800aecc <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	6812      	ldr	r2, [r2, #0]
 800ae9c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800aea0:	f023 0302 	bic.w	r3, r3, #2
 800aea4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a19      	ldr	r2, [pc, #100]	; (800af10 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e018      	b.n	800aefe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aed0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	025b      	lsls	r3, r3, #9
 800aed6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aed8:	2390      	movs	r3, #144	; 0x90
 800aeda:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800aedc:	2300      	movs	r3, #0
 800aede:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f107 0210 	add.w	r2, r7, #16
 800aef0:	4611      	mov	r1, r2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 fea8 	bl	800cc48 <SDIO_ConfigData>

      return HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e000      	b.n	800aefe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800aefc:	2302      	movs	r3, #2
  }
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3730      	adds	r7, #48	; 0x30
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	0800b711 	.word	0x0800b711
 800af0c:	0800b7ad 	.word	0x0800b7ad
 800af10:	004005ff 	.word	0x004005ff
 800af14:	4225858c 	.word	0x4225858c

0800af18 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af24:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d008      	beq.n	800af46 <HAL_SD_IRQHandler+0x2e>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f003 0308 	and.w	r3, r3, #8
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 ffd8 	bl	800bef4 <SD_Read_IT>
 800af44:	e165      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 808f 	beq.w	800b074 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af5e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	6812      	ldr	r2, [r2, #0]
 800af6a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800af6e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800af72:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f022 0201 	bic.w	r2, r2, #1
 800af82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f003 0308 	and.w	r3, r3, #8
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d039      	beq.n	800b002 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f003 0302 	and.w	r3, r3, #2
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <HAL_SD_IRQHandler+0x8a>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f003 0320 	and.w	r3, r3, #32
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d011      	beq.n	800afc6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 ff24 	bl	800cdf4 <SDMMC_CmdStopTransfer>
 800afac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d008      	beq.n	800afc6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	431a      	orrs	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f92f 	bl	800b224 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f240 523a 	movw	r2, #1338	; 0x53a
 800afce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d104      	bne.n	800aff2 <HAL_SD_IRQHandler+0xda>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f002 fb82 	bl	800d6fc <HAL_SD_RxCpltCallback>
 800aff8:	e10b      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f002 fb74 	bl	800d6e8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b000:	e107      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 8102 	beq.w	800b212 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f003 0320 	and.w	r3, r3, #32
 800b014:	2b00      	cmp	r3, #0
 800b016:	d011      	beq.n	800b03c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f001 fee9 	bl	800cdf4 <SDMMC_CmdStopTransfer>
 800b022:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d008      	beq.n	800b03c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	431a      	orrs	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8f4 	bl	800b224 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	f040 80e5 	bne.w	800b212 <HAL_SD_IRQHandler+0x2fa>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f040 80df 	bne.w	800b212 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0208 	bic.w	r2, r2, #8
 800b062:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f002 fb3b 	bl	800d6e8 <HAL_SD_TxCpltCallback>
}
 800b072:	e0ce      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d008      	beq.n	800b094 <HAL_SD_IRQHandler+0x17c>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f003 0308 	and.w	r3, r3, #8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 ff82 	bl	800bf96 <SD_Write_IT>
 800b092:	e0be      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b09a:	f240 233a 	movw	r3, #570	; 0x23a
 800b09e:	4013      	ands	r3, r2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 80b6 	beq.w	800b212 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	f043 0202 	orr.w	r2, r3, #2
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	f043 0208 	orr.w	r2, r3, #8
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e0:	f003 0320 	and.w	r3, r3, #32
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ec:	f043 0220 	orr.w	r2, r3, #32
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	f003 0310 	and.w	r3, r3, #16
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	f043 0210 	orr.w	r2, r3, #16
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d005      	beq.n	800b128 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b120:	f043 0208 	orr.w	r2, r3, #8
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f240 723a 	movw	r2, #1850	; 0x73a
 800b130:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	6812      	ldr	r2, [r2, #0]
 800b13c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800b140:	f023 0302 	bic.w	r3, r3, #2
 800b144:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 fe52 	bl	800cdf4 <SDMMC_CmdStopTransfer>
 800b150:	4602      	mov	r2, r0
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	431a      	orrs	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00a      	beq.n	800b17c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f855 	bl	800b224 <HAL_SD_ErrorCallback>
}
 800b17a:	e04a      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d045      	beq.n	800b212 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f003 0310 	and.w	r3, r3, #16
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d104      	bne.n	800b19a <HAL_SD_IRQHandler+0x282>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	2b00      	cmp	r3, #0
 800b198:	d011      	beq.n	800b1be <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b19e:	4a1f      	ldr	r2, [pc, #124]	; (800b21c <HAL_SD_IRQHandler+0x304>)
 800b1a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fd fae4 	bl	8008774 <HAL_DMA_Abort_IT>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d02f      	beq.n	800b212 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 fb4a 	bl	800b850 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b1bc:	e029      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d104      	bne.n	800b1d2 <HAL_SD_IRQHandler+0x2ba>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d011      	beq.n	800b1f6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	4a12      	ldr	r2, [pc, #72]	; (800b220 <HAL_SD_IRQHandler+0x308>)
 800b1d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fd fac8 	bl	8008774 <HAL_DMA_Abort_IT>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d013      	beq.n	800b212 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fb65 	bl	800b8be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b1f4:	e00d      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f002 fa62 	bl	800d6d4 <HAL_SD_AbortCallback>
}
 800b210:	e7ff      	b.n	800b212 <HAL_SD_IRQHandler+0x2fa>
 800b212:	bf00      	nop
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	0800b851 	.word	0x0800b851
 800b220:	0800b8bf 	.word	0x0800b8bf

0800b224 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b246:	0f9b      	lsrs	r3, r3, #30
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b252:	0e9b      	lsrs	r3, r3, #26
 800b254:	b2db      	uxtb	r3, r3
 800b256:	f003 030f 	and.w	r3, r3, #15
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b264:	0e1b      	lsrs	r3, r3, #24
 800b266:	b2db      	uxtb	r3, r3
 800b268:	f003 0303 	and.w	r3, r3, #3
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b276:	0c1b      	lsrs	r3, r3, #16
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b282:	0a1b      	lsrs	r3, r3, #8
 800b284:	b2da      	uxtb	r2, r3
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b298:	0d1b      	lsrs	r3, r3, #20
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2a4:	0c1b      	lsrs	r3, r3, #16
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	f003 030f 	and.w	r3, r3, #15
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2b6:	0bdb      	lsrs	r3, r3, #15
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2c8:	0b9b      	lsrs	r3, r3, #14
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2da:	0b5b      	lsrs	r3, r3, #13
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2ec:	0b1b      	lsrs	r3, r3, #12
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b304:	2b00      	cmp	r3, #0
 800b306:	d163      	bne.n	800b3d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b30c:	009a      	lsls	r2, r3, #2
 800b30e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b312:	4013      	ands	r3, r2
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b318:	0f92      	lsrs	r2, r2, #30
 800b31a:	431a      	orrs	r2, r3
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b324:	0edb      	lsrs	r3, r3, #27
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f003 0307 	and.w	r3, r3, #7
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b336:	0e1b      	lsrs	r3, r3, #24
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	f003 0307 	and.w	r3, r3, #7
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b348:	0d5b      	lsrs	r3, r3, #21
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	f003 0307 	and.w	r3, r3, #7
 800b350:	b2da      	uxtb	r2, r3
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b35a:	0c9b      	lsrs	r3, r3, #18
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	f003 0307 	and.w	r3, r3, #7
 800b362:	b2da      	uxtb	r2, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b36c:	0bdb      	lsrs	r3, r3, #15
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f003 0307 	and.w	r3, r3, #7
 800b374:	b2da      	uxtb	r2, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	7e1b      	ldrb	r3, [r3, #24]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	f003 0307 	and.w	r3, r3, #7
 800b38e:	3302      	adds	r3, #2
 800b390:	2201      	movs	r2, #1
 800b392:	fa02 f303 	lsl.w	r3, r2, r3
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b39a:	fb02 f203 	mul.w	r2, r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	7a1b      	ldrb	r3, [r3, #8]
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 030f 	and.w	r3, r3, #15
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	409a      	lsls	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b3bc:	0a52      	lsrs	r2, r2, #9
 800b3be:	fb02 f203 	mul.w	r2, r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3cc:	661a      	str	r2, [r3, #96]	; 0x60
 800b3ce:	e031      	b.n	800b434 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d11d      	bne.n	800b414 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3dc:	041b      	lsls	r3, r3, #16
 800b3de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3e6:	0c1b      	lsrs	r3, r3, #16
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	029a      	lsls	r2, r3, #10
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b408:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	661a      	str	r2, [r3, #96]	; 0x60
 800b412:	e00f      	b.n	800b434 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a58      	ldr	r2, [pc, #352]	; (800b57c <HAL_SD_GetCardCSD+0x344>)
 800b41a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b420:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e09d      	b.n	800b570 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b438:	0b9b      	lsrs	r3, r3, #14
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44a:	09db      	lsrs	r3, r3, #7
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b452:	b2da      	uxtb	r2, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b462:	b2da      	uxtb	r2, r3
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46c:	0fdb      	lsrs	r3, r3, #31
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b478:	0f5b      	lsrs	r3, r3, #29
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	f003 0303 	and.w	r3, r3, #3
 800b480:	b2da      	uxtb	r2, r3
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b48a:	0e9b      	lsrs	r3, r3, #26
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	f003 0307 	and.w	r3, r3, #7
 800b492:	b2da      	uxtb	r2, r3
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b49c:	0d9b      	lsrs	r3, r3, #22
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	f003 030f 	and.w	r3, r3, #15
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ae:	0d5b      	lsrs	r3, r3, #21
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ca:	0c1b      	lsrs	r3, r3, #16
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4de:	0bdb      	lsrs	r3, r3, #15
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f2:	0b9b      	lsrs	r3, r3, #14
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b506:	0b5b      	lsrs	r3, r3, #13
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b51a:	0b1b      	lsrs	r3, r3, #12
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	b2da      	uxtb	r2, r3
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52e:	0a9b      	lsrs	r3, r3, #10
 800b530:	b2db      	uxtb	r3, r3
 800b532:	f003 0303 	and.w	r3, r3, #3
 800b536:	b2da      	uxtb	r2, r3
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b542:	0a1b      	lsrs	r3, r3, #8
 800b544:	b2db      	uxtb	r3, r3
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b556:	085b      	lsrs	r3, r3, #1
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	004005ff 	.word	0x004005ff

0800b580 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b5d8:	b5b0      	push	{r4, r5, r7, lr}
 800b5da:	b08e      	sub	sp, #56	; 0x38
 800b5dc:	af04      	add	r7, sp, #16
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2203      	movs	r2, #3
 800b5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d02e      	beq.n	800b650 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f8:	d106      	bne.n	800b608 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	639a      	str	r2, [r3, #56]	; 0x38
 800b606:	e029      	b.n	800b65c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b60e:	d10a      	bne.n	800b626 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fb0f 	bl	800bc34 <SD_WideBus_Enable>
 800b616:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	431a      	orrs	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	639a      	str	r2, [r3, #56]	; 0x38
 800b624:	e01a      	b.n	800b65c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fb4c 	bl	800bcca <SD_WideBus_Disable>
 800b632:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	431a      	orrs	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38
 800b640:	e00c      	b.n	800b65c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b646:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	639a      	str	r2, [r3, #56]	; 0x38
 800b64e:	e005      	b.n	800b65c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b660:	2b00      	cmp	r3, #0
 800b662:	d009      	beq.n	800b678 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a18      	ldr	r2, [pc, #96]	; (800b6cc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b66a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e024      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681d      	ldr	r5, [r3, #0]
 800b69e:	466c      	mov	r4, sp
 800b6a0:	f107 0318 	add.w	r3, r7, #24
 800b6a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b6ac:	f107 030c 	add.w	r3, r7, #12
 800b6b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f001 fa18 	bl	800cae8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3728      	adds	r7, #40	; 0x28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	004005ff 	.word	0x004005ff

0800b6d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b6dc:	f107 030c 	add.w	r3, r7, #12
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fa7e 	bl	800bbe4 <SD_SendStatus>
 800b6e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d005      	beq.n	800b6fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	0a5b      	lsrs	r3, r3, #9
 800b700:	f003 030f 	and.w	r3, r3, #15
 800b704:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b706:	693b      	ldr	r3, [r7, #16]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b72c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b72e:	bf00      	nop
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74c:	2b82      	cmp	r3, #130	; 0x82
 800b74e:	d111      	bne.n	800b774 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	f001 fb4d 	bl	800cdf4 <SDMMC_CmdStopTransfer>
 800b75a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d008      	beq.n	800b774 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	431a      	orrs	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7ff fd58 	bl	800b224 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f022 0208 	bic.w	r2, r2, #8
 800b782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f240 523a 	movw	r2, #1338	; 0x53a
 800b78c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f001 ffad 	bl	800d6fc <HAL_SD_RxCpltCallback>
#endif
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7fd f986 	bl	8008acc <HAL_DMA_GetError>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d03e      	beq.n	800b844 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d002      	beq.n	800b7e2 <SD_DMAError+0x36>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d12d      	bne.n	800b83e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a19      	ldr	r2, [pc, #100]	; (800b84c <SD_DMAError+0xa0>)
 800b7e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b7f8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b806:	6978      	ldr	r0, [r7, #20]
 800b808:	f7ff ff62 	bl	800b6d0 <HAL_SD_GetCardState>
 800b80c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b06      	cmp	r3, #6
 800b812:	d002      	beq.n	800b81a <SD_DMAError+0x6e>
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2b05      	cmp	r3, #5
 800b818:	d10a      	bne.n	800b830 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fae8 	bl	800cdf4 <SDMMC_CmdStopTransfer>
 800b824:	4602      	mov	r2, r0
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	431a      	orrs	r2, r3
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2200      	movs	r2, #0
 800b83c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b83e:	6978      	ldr	r0, [r7, #20]
 800b840:	f7ff fcf0 	bl	800b224 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b844:	bf00      	nop
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	004005ff 	.word	0x004005ff

0800b850 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f240 523a 	movw	r2, #1338	; 0x53a
 800b866:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f7ff ff31 	bl	800b6d0 <HAL_SD_GetCardState>
 800b86e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b06      	cmp	r3, #6
 800b882:	d002      	beq.n	800b88a <SD_DMATxAbort+0x3a>
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	2b05      	cmp	r3, #5
 800b888:	d10a      	bne.n	800b8a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	f001 fab0 	bl	800cdf4 <SDMMC_CmdStopTransfer>
 800b894:	4602      	mov	r2, r0
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89a:	431a      	orrs	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f001 ff13 	bl	800d6d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b8ae:	e002      	b.n	800b8b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff fcb7 	bl	800b224 <HAL_SD_ErrorCallback>
}
 800b8b6:	bf00      	nop
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b8d4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f7ff fefa 	bl	800b6d0 <HAL_SD_GetCardState>
 800b8dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b06      	cmp	r3, #6
 800b8f0:	d002      	beq.n	800b8f8 <SD_DMARxAbort+0x3a>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b05      	cmp	r3, #5
 800b8f6:	d10a      	bne.n	800b90e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f001 fa79 	bl	800cdf4 <SDMMC_CmdStopTransfer>
 800b902:	4602      	mov	r2, r0
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b908:	431a      	orrs	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b912:	2b00      	cmp	r3, #0
 800b914:	d103      	bne.n	800b91e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f001 fedc 	bl	800d6d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b91c:	e002      	b.n	800b924 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff fc80 	bl	800b224 <HAL_SD_ErrorCallback>
}
 800b924:	bf00      	nop
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b92c:	b5b0      	push	{r4, r5, r7, lr}
 800b92e:	b094      	sub	sp, #80	; 0x50
 800b930:	af04      	add	r7, sp, #16
 800b932:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b934:	2301      	movs	r3, #1
 800b936:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f001 f92b 	bl	800cb98 <SDIO_GetPowerState>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d102      	bne.n	800b94e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b948:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b94c:	e0b7      	b.n	800babe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b952:	2b03      	cmp	r3, #3
 800b954:	d02f      	beq.n	800b9b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f001 fb54 	bl	800d008 <SDMMC_CmdSendCID>
 800b960:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <SD_InitCard+0x40>
    {
      return errorstate;
 800b968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96a:	e0a8      	b.n	800babe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f001 f955 	bl	800cc22 <SDIO_GetResponse>
 800b978:	4602      	mov	r2, r0
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2104      	movs	r1, #4
 800b984:	4618      	mov	r0, r3
 800b986:	f001 f94c 	bl	800cc22 <SDIO_GetResponse>
 800b98a:	4602      	mov	r2, r0
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2108      	movs	r1, #8
 800b996:	4618      	mov	r0, r3
 800b998:	f001 f943 	bl	800cc22 <SDIO_GetResponse>
 800b99c:	4602      	mov	r2, r0
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	210c      	movs	r1, #12
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 f93a 	bl	800cc22 <SDIO_GetResponse>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d00d      	beq.n	800b9da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f107 020e 	add.w	r2, r7, #14
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 fb5a 	bl	800d082 <SDMMC_CmdSetRelAdd>
 800b9ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <SD_InitCard+0xae>
    {
      return errorstate;
 800b9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d8:	e071      	b.n	800babe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d036      	beq.n	800ba50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b9e2:	89fb      	ldrh	r3, [r7, #14]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f2:	041b      	lsls	r3, r3, #16
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	f001 fb24 	bl	800d044 <SDMMC_CmdSendCSD>
 800b9fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ba04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba06:	e05a      	b.n	800babe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f001 f907 	bl	800cc22 <SDIO_GetResponse>
 800ba14:	4602      	mov	r2, r0
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2104      	movs	r1, #4
 800ba20:	4618      	mov	r0, r3
 800ba22:	f001 f8fe 	bl	800cc22 <SDIO_GetResponse>
 800ba26:	4602      	mov	r2, r0
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2108      	movs	r1, #8
 800ba32:	4618      	mov	r0, r3
 800ba34:	f001 f8f5 	bl	800cc22 <SDIO_GetResponse>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	210c      	movs	r1, #12
 800ba44:	4618      	mov	r0, r3
 800ba46:	f001 f8ec 	bl	800cc22 <SDIO_GetResponse>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2104      	movs	r1, #4
 800ba56:	4618      	mov	r0, r3
 800ba58:	f001 f8e3 	bl	800cc22 <SDIO_GetResponse>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	0d1a      	lsrs	r2, r3, #20
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ba64:	f107 0310 	add.w	r3, r7, #16
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7ff fbe4 	bl	800b238 <HAL_SD_GetCardCSD>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba7a:	e020      	b.n	800babe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6819      	ldr	r1, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba84:	041b      	lsls	r3, r3, #16
 800ba86:	f04f 0400 	mov.w	r4, #0
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4623      	mov	r3, r4
 800ba8e:	4608      	mov	r0, r1
 800ba90:	f001 f9d2 	bl	800ce38 <SDMMC_CmdSelDesel>
 800ba94:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <SD_InitCard+0x174>
  {
    return errorstate;
 800ba9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba9e:	e00e      	b.n	800babe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681d      	ldr	r5, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	466c      	mov	r4, sp
 800baa8:	f103 0210 	add.w	r2, r3, #16
 800baac:	ca07      	ldmia	r2, {r0, r1, r2}
 800baae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bab2:	3304      	adds	r3, #4
 800bab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bab6:	4628      	mov	r0, r5
 800bab8:	f001 f816 	bl	800cae8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3740      	adds	r7, #64	; 0x40
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bac8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bad0:	2300      	movs	r3, #0
 800bad2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]
 800bad8:	2300      	movs	r3, #0
 800bada:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 f9cc 	bl	800ce7e <SDMMC_CmdGoIdleState>
 800bae6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	e072      	b.n	800bbd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f001 f9df 	bl	800ceba <SDMMC_CmdOperCond>
 800bafc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00d      	beq.n	800bb20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f001 f9b5 	bl	800ce7e <SDMMC_CmdGoIdleState>
 800bb14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <SD_PowerON+0x5e>
    {
      return errorstate;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	e05b      	b.n	800bbd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d137      	bne.n	800bb9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2100      	movs	r1, #0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f9df 	bl	800cef8 <SDMMC_CmdAppCommand>
 800bb3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d02d      	beq.n	800bb9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb46:	e047      	b.n	800bbd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f001 f9d2 	bl	800cef8 <SDMMC_CmdAppCommand>
 800bb54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <SD_PowerON+0x98>
    {
      return errorstate;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	e03b      	b.n	800bbd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	491e      	ldr	r1, [pc, #120]	; (800bbe0 <SD_PowerON+0x118>)
 800bb66:	4618      	mov	r0, r3
 800bb68:	f001 f9e8 	bl	800cf3c <SDMMC_CmdAppOperCommand>
 800bb6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb78:	e02e      	b.n	800bbd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2100      	movs	r1, #0
 800bb80:	4618      	mov	r0, r3
 800bb82:	f001 f84e 	bl	800cc22 <SDIO_GetResponse>
 800bb86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	0fdb      	lsrs	r3, r3, #31
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d101      	bne.n	800bb94 <SD_PowerON+0xcc>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e000      	b.n	800bb96 <SD_PowerON+0xce>
 800bb94:	2300      	movs	r3, #0
 800bb96:	613b      	str	r3, [r7, #16]

    count++;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d802      	bhi.n	800bbae <SD_PowerON+0xe6>
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0cc      	beq.n	800bb48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d902      	bls.n	800bbbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bbb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbbc:	e00c      	b.n	800bbd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d003      	beq.n	800bbd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	645a      	str	r2, [r3, #68]	; 0x44
 800bbce:	e002      	b.n	800bbd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	c1100000 	.word	0xc1100000

0800bbe4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bbf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbf8:	e018      	b.n	800bc2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc02:	041b      	lsls	r3, r3, #16
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	f001 fa5c 	bl	800d0c4 <SDMMC_CmdSendStatus>
 800bc0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	e009      	b.n	800bc2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 ffff 	bl	800cc22 <SDIO_GetResponse>
 800bc24:	4602      	mov	r2, r0
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	2300      	movs	r3, #0
 800bc42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2100      	movs	r1, #0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 ffe9 	bl	800cc22 <SDIO_GetResponse>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc5a:	d102      	bne.n	800bc62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc60:	e02f      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bc62:	f107 030c 	add.w	r3, r7, #12
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f879 	bl	800bd60 <SD_FindSCR>
 800bc6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	e023      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d01c      	beq.n	800bcbe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc8c:	041b      	lsls	r3, r3, #16
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4610      	mov	r0, r2
 800bc92:	f001 f931 	bl	800cef8 <SDMMC_CmdAppCommand>
 800bc96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	e00f      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2102      	movs	r1, #2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f001 f96a 	bl	800cf82 <SDMMC_CmdBusWidth>
 800bcae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	e003      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e001      	b.n	800bcc2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bcbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b086      	sub	sp, #24
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 ff9e 	bl	800cc22 <SDIO_GetResponse>
 800bce6:	4603      	mov	r3, r0
 800bce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcf0:	d102      	bne.n	800bcf8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bcf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcf6:	e02f      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bcf8:	f107 030c 	add.w	r3, r7, #12
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f82e 	bl	800bd60 <SD_FindSCR>
 800bd04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	e023      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d01c      	beq.n	800bd54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd22:	041b      	lsls	r3, r3, #16
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f001 f8e6 	bl	800cef8 <SDMMC_CmdAppCommand>
 800bd2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	e00f      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f001 f91f 	bl	800cf82 <SDMMC_CmdBusWidth>
 800bd44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	e003      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	e001      	b.n	800bd58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bd60:	b590      	push	{r4, r7, lr}
 800bd62:	b08f      	sub	sp, #60	; 0x3c
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bd6a:	f7fb fe0f 	bl	800798c <HAL_GetTick>
 800bd6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bd70:	2300      	movs	r3, #0
 800bd72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bd74:	2300      	movs	r3, #0
 800bd76:	60bb      	str	r3, [r7, #8]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2108      	movs	r1, #8
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 ff8a 	bl	800cca0 <SDMMC_CmdBlockLength>
 800bd8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	e0a9      	b.n	800beec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bda0:	041b      	lsls	r3, r3, #16
 800bda2:	4619      	mov	r1, r3
 800bda4:	4610      	mov	r0, r2
 800bda6:	f001 f8a7 	bl	800cef8 <SDMMC_CmdAppCommand>
 800bdaa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	e09a      	b.n	800beec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bdb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bdbc:	2308      	movs	r3, #8
 800bdbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bdc0:	2330      	movs	r3, #48	; 0x30
 800bdc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f107 0210 	add.w	r2, r7, #16
 800bdd8:	4611      	mov	r1, r2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 ff34 	bl	800cc48 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f001 f8ee 	bl	800cfc6 <SDMMC_CmdSendSCR>
 800bdea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d022      	beq.n	800be38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	e07a      	b.n	800beec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00e      	beq.n	800be22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6819      	ldr	r1, [r3, #0]
 800be08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	f107 0208 	add.w	r2, r7, #8
 800be10:	18d4      	adds	r4, r2, r3
 800be12:	4608      	mov	r0, r1
 800be14:	f000 fe93 	bl	800cb3e <SDIO_ReadFIFO>
 800be18:	4603      	mov	r3, r0
 800be1a:	6023      	str	r3, [r4, #0]
      index++;
 800be1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1e:	3301      	adds	r3, #1
 800be20:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be22:	f7fb fdb3 	bl	800798c <HAL_GetTick>
 800be26:	4602      	mov	r2, r0
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be30:	d102      	bne.n	800be38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800be32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be36:	e059      	b.n	800beec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be3e:	f240 432a 	movw	r3, #1066	; 0x42a
 800be42:	4013      	ands	r3, r2
 800be44:	2b00      	cmp	r3, #0
 800be46:	d0d6      	beq.n	800bdf6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4e:	f003 0308 	and.w	r3, r3, #8
 800be52:	2b00      	cmp	r3, #0
 800be54:	d005      	beq.n	800be62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2208      	movs	r2, #8
 800be5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800be5e:	2308      	movs	r3, #8
 800be60:	e044      	b.n	800beec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d005      	beq.n	800be7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2202      	movs	r2, #2
 800be76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800be78:	2302      	movs	r3, #2
 800be7a:	e037      	b.n	800beec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be82:	f003 0320 	and.w	r3, r3, #32
 800be86:	2b00      	cmp	r3, #0
 800be88:	d005      	beq.n	800be96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2220      	movs	r2, #32
 800be90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800be92:	2320      	movs	r3, #32
 800be94:	e02a      	b.n	800beec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f240 523a 	movw	r2, #1338	; 0x53a
 800be9e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	061a      	lsls	r2, r3, #24
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	021b      	lsls	r3, r3, #8
 800bea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800beac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800beb6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	0e1b      	lsrs	r3, r3, #24
 800bebc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec0:	601a      	str	r2, [r3, #0]
    scr++;
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	3304      	adds	r3, #4
 800bec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	061a      	lsls	r2, r3, #24
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	021b      	lsls	r3, r3, #8
 800bed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bed4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	0a1b      	lsrs	r3, r3, #8
 800beda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bede:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	0e1b      	lsrs	r3, r3, #24
 800bee4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	373c      	adds	r7, #60	; 0x3c
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd90      	pop	{r4, r7, pc}

0800bef4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf00:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf06:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d03f      	beq.n	800bf8e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
 800bf12:	e033      	b.n	800bf7c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 fe10 	bl	800cb3e <SDIO_ReadFIFO>
 800bf1e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	0a1b      	lsrs	r3, r3, #8
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3301      	adds	r3, #1
 800bf42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	0c1b      	lsrs	r3, r3, #16
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	3301      	adds	r3, #1
 800bf58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	0e1b      	lsrs	r3, r3, #24
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	3b01      	subs	r3, #1
 800bf74:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	617b      	str	r3, [r7, #20]
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2b07      	cmp	r3, #7
 800bf80:	d9c8      	bls.n	800bf14 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bf8e:	bf00      	nop
 800bf90:	3718      	adds	r7, #24
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b086      	sub	sp, #24
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a1b      	ldr	r3, [r3, #32]
 800bfa2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d043      	beq.n	800c038 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
 800bfb4:	e037      	b.n	800c026 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	021a      	lsls	r2, r3, #8
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	041a      	lsls	r2, r3, #16
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	3301      	adds	r3, #1
 800bff0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	061a      	lsls	r2, r3, #24
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	4313      	orrs	r3, r2
 800c002:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3301      	adds	r3, #1
 800c008:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f107 0208 	add.w	r2, r7, #8
 800c018:	4611      	mov	r1, r2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 fd9c 	bl	800cb58 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	3301      	adds	r3, #1
 800c024:	617b      	str	r3, [r7, #20]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2b07      	cmp	r3, #7
 800c02a:	d9c4      	bls.n	800bfb6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c038:	bf00      	nop
 800c03a:	3718      	adds	r7, #24
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e056      	b.n	800c100 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d106      	bne.n	800c072 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7f7 fe65 	bl	8003d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2202      	movs	r2, #2
 800c076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c088:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	431a      	orrs	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	ea42 0103 	orr.w	r1, r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	0c1b      	lsrs	r3, r3, #16
 800c0d0:	f003 0104 	and.w	r1, r3, #4
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	430a      	orrs	r2, r1
 800c0de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	69da      	ldr	r2, [r3, #28]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	603b      	str	r3, [r7, #0]
 800c114:	4613      	mov	r3, r2
 800c116:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c122:	2b01      	cmp	r3, #1
 800c124:	d101      	bne.n	800c12a <HAL_SPI_Transmit+0x22>
 800c126:	2302      	movs	r3, #2
 800c128:	e11e      	b.n	800c368 <HAL_SPI_Transmit+0x260>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c132:	f7fb fc2b 	bl	800798c <HAL_GetTick>
 800c136:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c138:	88fb      	ldrh	r3, [r7, #6]
 800c13a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b01      	cmp	r3, #1
 800c146:	d002      	beq.n	800c14e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c148:	2302      	movs	r3, #2
 800c14a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c14c:	e103      	b.n	800c356 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <HAL_SPI_Transmit+0x52>
 800c154:	88fb      	ldrh	r3, [r7, #6]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d102      	bne.n	800c160 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c15e:	e0fa      	b.n	800c356 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2203      	movs	r2, #3
 800c164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	88fa      	ldrh	r2, [r7, #6]
 800c178:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	88fa      	ldrh	r2, [r7, #6]
 800c17e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1a6:	d107      	bne.n	800c1b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c2:	2b40      	cmp	r3, #64	; 0x40
 800c1c4:	d007      	beq.n	800c1d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1de:	d14b      	bne.n	800c278 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <HAL_SPI_Transmit+0xe6>
 800c1e8:	8afb      	ldrh	r3, [r7, #22]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d13e      	bne.n	800c26c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f2:	881a      	ldrh	r2, [r3, #0]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	1c9a      	adds	r2, r3, #2
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c208:	b29b      	uxth	r3, r3
 800c20a:	3b01      	subs	r3, #1
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c212:	e02b      	b.n	800c26c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f003 0302 	and.w	r3, r3, #2
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d112      	bne.n	800c248 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c226:	881a      	ldrh	r2, [r3, #0]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c232:	1c9a      	adds	r2, r3, #2
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	3b01      	subs	r3, #1
 800c240:	b29a      	uxth	r2, r3
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	86da      	strh	r2, [r3, #54]	; 0x36
 800c246:	e011      	b.n	800c26c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c248:	f7fb fba0 	bl	800798c <HAL_GetTick>
 800c24c:	4602      	mov	r2, r0
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d803      	bhi.n	800c260 <HAL_SPI_Transmit+0x158>
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c25e:	d102      	bne.n	800c266 <HAL_SPI_Transmit+0x15e>
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d102      	bne.n	800c26c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c266:	2303      	movs	r3, #3
 800c268:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c26a:	e074      	b.n	800c356 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c270:	b29b      	uxth	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1ce      	bne.n	800c214 <HAL_SPI_Transmit+0x10c>
 800c276:	e04c      	b.n	800c312 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <HAL_SPI_Transmit+0x17e>
 800c280:	8afb      	ldrh	r3, [r7, #22]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d140      	bne.n	800c308 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	330c      	adds	r3, #12
 800c290:	7812      	ldrb	r2, [r2, #0]
 800c292:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c2ac:	e02c      	b.n	800c308 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f003 0302 	and.w	r3, r3, #2
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d113      	bne.n	800c2e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	330c      	adds	r3, #12
 800c2c6:	7812      	ldrb	r2, [r2, #0]
 800c2c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	86da      	strh	r2, [r3, #54]	; 0x36
 800c2e2:	e011      	b.n	800c308 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2e4:	f7fb fb52 	bl	800798c <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d803      	bhi.n	800c2fc <HAL_SPI_Transmit+0x1f4>
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2fa:	d102      	bne.n	800c302 <HAL_SPI_Transmit+0x1fa>
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c306:	e026      	b.n	800c356 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1cd      	bne.n	800c2ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 fba4 	bl	800ca64 <SPI_EndRxTxTransaction>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2220      	movs	r2, #32
 800c326:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c330:	2300      	movs	r3, #0
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	613b      	str	r3, [r7, #16]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	613b      	str	r3, [r7, #16]
 800c344:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	77fb      	strb	r3, [r7, #31]
 800c352:	e000      	b.n	800c356 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c354:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c366:	7ffb      	ldrb	r3, [r7, #31]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af02      	add	r7, sp, #8
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	603b      	str	r3, [r7, #0]
 800c37c:	4613      	mov	r3, r2
 800c37e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c38c:	d112      	bne.n	800c3b4 <HAL_SPI_Receive+0x44>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10e      	bne.n	800c3b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2204      	movs	r2, #4
 800c39a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c39e:	88fa      	ldrh	r2, [r7, #6]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f000 f8e9 	bl	800c582 <HAL_SPI_TransmitReceive>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	e0e2      	b.n	800c57a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d101      	bne.n	800c3c2 <HAL_SPI_Receive+0x52>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e0db      	b.n	800c57a <HAL_SPI_Receive+0x20a>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3ca:	f7fb fadf 	bl	800798c <HAL_GetTick>
 800c3ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d002      	beq.n	800c3e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c3dc:	2302      	movs	r3, #2
 800c3de:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c3e0:	e0c2      	b.n	800c568 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <HAL_SPI_Receive+0x7e>
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d102      	bne.n	800c3f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c3f2:	e0b9      	b.n	800c568 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2204      	movs	r2, #4
 800c3f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2200      	movs	r2, #0
 800c400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	88fa      	ldrh	r2, [r7, #6]
 800c40c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	88fa      	ldrh	r2, [r7, #6]
 800c412:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2200      	movs	r2, #0
 800c41e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c43a:	d107      	bne.n	800c44c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c44a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c456:	2b40      	cmp	r3, #64	; 0x40
 800c458:	d007      	beq.n	800c46a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c468:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d162      	bne.n	800c538 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c472:	e02e      	b.n	800c4d2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d115      	bne.n	800c4ae <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f103 020c 	add.w	r2, r3, #12
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	b2d2      	uxtb	r2, r2
 800c492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c4ac:	e011      	b.n	800c4d2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4ae:	f7fb fa6d 	bl	800798c <HAL_GetTick>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	683a      	ldr	r2, [r7, #0]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d803      	bhi.n	800c4c6 <HAL_SPI_Receive+0x156>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4c4:	d102      	bne.n	800c4cc <HAL_SPI_Receive+0x15c>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c4d0:	e04a      	b.n	800c568 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1cb      	bne.n	800c474 <HAL_SPI_Receive+0x104>
 800c4dc:	e031      	b.n	800c542 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f003 0301 	and.w	r3, r3, #1
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d113      	bne.n	800c514 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68da      	ldr	r2, [r3, #12]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	b292      	uxth	r2, r2
 800c4f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fe:	1c9a      	adds	r2, r3, #2
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c508:	b29b      	uxth	r3, r3
 800c50a:	3b01      	subs	r3, #1
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c512:	e011      	b.n	800c538 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c514:	f7fb fa3a 	bl	800798c <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d803      	bhi.n	800c52c <HAL_SPI_Receive+0x1bc>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c52a:	d102      	bne.n	800c532 <HAL_SPI_Receive+0x1c2>
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c532:	2303      	movs	r3, #3
 800c534:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c536:	e017      	b.n	800c568 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1cd      	bne.n	800c4de <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f000 fa27 	bl	800c99a <SPI_EndRxTransaction>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d002      	beq.n	800c558 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2220      	movs	r2, #32
 800c556:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	75fb      	strb	r3, [r7, #23]
 800c564:	e000      	b.n	800c568 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c566:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c578:	7dfb      	ldrb	r3, [r7, #23]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b08c      	sub	sp, #48	; 0x30
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	607a      	str	r2, [r7, #4]
 800c58e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c590:	2301      	movs	r3, #1
 800c592:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d101      	bne.n	800c5a8 <HAL_SPI_TransmitReceive+0x26>
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	e18a      	b.n	800c8be <HAL_SPI_TransmitReceive+0x33c>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5b0:	f7fb f9ec 	bl	800798c <HAL_GetTick>
 800c5b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c5c6:	887b      	ldrh	r3, [r7, #2]
 800c5c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c5ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d00f      	beq.n	800c5f2 <HAL_SPI_TransmitReceive+0x70>
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5d8:	d107      	bne.n	800c5ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d103      	bne.n	800c5ea <HAL_SPI_TransmitReceive+0x68>
 800c5e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c5e6:	2b04      	cmp	r3, #4
 800c5e8:	d003      	beq.n	800c5f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c5f0:	e15b      	b.n	800c8aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <HAL_SPI_TransmitReceive+0x82>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d002      	beq.n	800c604 <HAL_SPI_TransmitReceive+0x82>
 800c5fe:	887b      	ldrh	r3, [r7, #2]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c60a:	e14e      	b.n	800c8aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b04      	cmp	r3, #4
 800c616:	d003      	beq.n	800c620 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2205      	movs	r2, #5
 800c61c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	887a      	ldrh	r2, [r7, #2]
 800c630:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	887a      	ldrh	r2, [r7, #2]
 800c636:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	887a      	ldrh	r2, [r7, #2]
 800c642:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	887a      	ldrh	r2, [r7, #2]
 800c648:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d007      	beq.n	800c674 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c67c:	d178      	bne.n	800c770 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <HAL_SPI_TransmitReceive+0x10a>
 800c686:	8b7b      	ldrh	r3, [r7, #26]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d166      	bne.n	800c75a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c690:	881a      	ldrh	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69c:	1c9a      	adds	r2, r3, #2
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6b0:	e053      	b.n	800c75a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f003 0302 	and.w	r3, r3, #2
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d11b      	bne.n	800c6f8 <HAL_SPI_TransmitReceive+0x176>
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d016      	beq.n	800c6f8 <HAL_SPI_TransmitReceive+0x176>
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d113      	bne.n	800c6f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d4:	881a      	ldrh	r2, [r3, #0]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e0:	1c9a      	adds	r2, r3, #2
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b01      	cmp	r3, #1
 800c704:	d119      	bne.n	800c73a <HAL_SPI_TransmitReceive+0x1b8>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d014      	beq.n	800c73a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71a:	b292      	uxth	r2, r2
 800c71c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	1c9a      	adds	r2, r3, #2
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	3b01      	subs	r3, #1
 800c730:	b29a      	uxth	r2, r3
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c736:	2301      	movs	r3, #1
 800c738:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c73a:	f7fb f927 	bl	800798c <HAL_GetTick>
 800c73e:	4602      	mov	r2, r0
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c746:	429a      	cmp	r2, r3
 800c748:	d807      	bhi.n	800c75a <HAL_SPI_TransmitReceive+0x1d8>
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c750:	d003      	beq.n	800c75a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c758:	e0a7      	b.n	800c8aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c75e:	b29b      	uxth	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1a6      	bne.n	800c6b2 <HAL_SPI_TransmitReceive+0x130>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c768:	b29b      	uxth	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1a1      	bne.n	800c6b2 <HAL_SPI_TransmitReceive+0x130>
 800c76e:	e07c      	b.n	800c86a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <HAL_SPI_TransmitReceive+0x1fc>
 800c778:	8b7b      	ldrh	r3, [r7, #26]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d16b      	bne.n	800c856 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	330c      	adds	r3, #12
 800c788:	7812      	ldrb	r2, [r2, #0]
 800c78a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	3b01      	subs	r3, #1
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7a4:	e057      	b.n	800c856 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f003 0302 	and.w	r3, r3, #2
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d11c      	bne.n	800c7ee <HAL_SPI_TransmitReceive+0x26c>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d017      	beq.n	800c7ee <HAL_SPI_TransmitReceive+0x26c>
 800c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d114      	bne.n	800c7ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	330c      	adds	r3, #12
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d119      	bne.n	800c830 <HAL_SPI_TransmitReceive+0x2ae>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c800:	b29b      	uxth	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	d014      	beq.n	800c830 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68da      	ldr	r2, [r3, #12]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c810:	b2d2      	uxtb	r2, r2
 800c812:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c818:	1c5a      	adds	r2, r3, #1
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c822:	b29b      	uxth	r3, r3
 800c824:	3b01      	subs	r3, #1
 800c826:	b29a      	uxth	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c82c:	2301      	movs	r3, #1
 800c82e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c830:	f7fb f8ac 	bl	800798c <HAL_GetTick>
 800c834:	4602      	mov	r2, r0
 800c836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d803      	bhi.n	800c848 <HAL_SPI_TransmitReceive+0x2c6>
 800c840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c846:	d102      	bne.n	800c84e <HAL_SPI_TransmitReceive+0x2cc>
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d103      	bne.n	800c856 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c84e:	2303      	movs	r3, #3
 800c850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c854:	e029      	b.n	800c8aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1a2      	bne.n	800c7a6 <HAL_SPI_TransmitReceive+0x224>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c864:	b29b      	uxth	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d19d      	bne.n	800c7a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f000 f8f8 	bl	800ca64 <SPI_EndRxTxTransaction>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d006      	beq.n	800c888 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2220      	movs	r2, #32
 800c884:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c886:	e010      	b.n	800c8aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10b      	bne.n	800c8a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c890:	2300      	movs	r3, #0
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	e000      	b.n	800c8aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c8a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c8ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3730      	adds	r7, #48	; 0x30
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	60f8      	str	r0, [r7, #12]
 800c8ce:	60b9      	str	r1, [r7, #8]
 800c8d0:	603b      	str	r3, [r7, #0]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8d6:	e04c      	b.n	800c972 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8de:	d048      	beq.n	800c972 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c8e0:	f7fb f854 	bl	800798c <HAL_GetTick>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d902      	bls.n	800c8f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d13d      	bne.n	800c972 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c904:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c90e:	d111      	bne.n	800c934 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c918:	d004      	beq.n	800c924 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c922:	d107      	bne.n	800c934 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c93c:	d10f      	bne.n	800c95e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c94c:	601a      	str	r2, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c95c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2201      	movs	r2, #1
 800c962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c96e:	2303      	movs	r3, #3
 800c970:	e00f      	b.n	800c992 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689a      	ldr	r2, [r3, #8]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	4013      	ands	r3, r2
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	429a      	cmp	r2, r3
 800c980:	bf0c      	ite	eq
 800c982:	2301      	moveq	r3, #1
 800c984:	2300      	movne	r3, #0
 800c986:	b2db      	uxtb	r3, r3
 800c988:	461a      	mov	r2, r3
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d1a3      	bne.n	800c8d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b086      	sub	sp, #24
 800c99e:	af02      	add	r7, sp, #8
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9ae:	d111      	bne.n	800c9d4 <SPI_EndRxTransaction+0x3a>
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9b8:	d004      	beq.n	800c9c4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9c2:	d107      	bne.n	800c9d4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9d2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9dc:	d12a      	bne.n	800ca34 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9e6:	d012      	beq.n	800ca0e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	2180      	movs	r1, #128	; 0x80
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff ff67 	bl	800c8c6 <SPI_WaitFlagStateUntilTimeout>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d02d      	beq.n	800ca5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca02:	f043 0220 	orr.w	r2, r3, #32
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	e026      	b.n	800ca5c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2200      	movs	r2, #0
 800ca16:	2101      	movs	r1, #1
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f7ff ff54 	bl	800c8c6 <SPI_WaitFlagStateUntilTimeout>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d01a      	beq.n	800ca5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca28:	f043 0220 	orr.w	r2, r3, #32
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ca30:	2303      	movs	r3, #3
 800ca32:	e013      	b.n	800ca5c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f7ff ff41 	bl	800c8c6 <SPI_WaitFlagStateUntilTimeout>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d007      	beq.n	800ca5a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4e:	f043 0220 	orr.w	r2, r3, #32
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ca56:	2303      	movs	r3, #3
 800ca58:	e000      	b.n	800ca5c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af02      	add	r7, sp, #8
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ca70:	4b1b      	ldr	r3, [pc, #108]	; (800cae0 <SPI_EndRxTxTransaction+0x7c>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a1b      	ldr	r2, [pc, #108]	; (800cae4 <SPI_EndRxTxTransaction+0x80>)
 800ca76:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7a:	0d5b      	lsrs	r3, r3, #21
 800ca7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca80:	fb02 f303 	mul.w	r3, r2, r3
 800ca84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca8e:	d112      	bne.n	800cab6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2200      	movs	r2, #0
 800ca98:	2180      	movs	r1, #128	; 0x80
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f7ff ff13 	bl	800c8c6 <SPI_WaitFlagStateUntilTimeout>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d016      	beq.n	800cad4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caaa:	f043 0220 	orr.w	r2, r3, #32
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e00f      	b.n	800cad6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00a      	beq.n	800cad2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cacc:	2b80      	cmp	r3, #128	; 0x80
 800cace:	d0f2      	beq.n	800cab6 <SPI_EndRxTxTransaction+0x52>
 800cad0:	e000      	b.n	800cad4 <SPI_EndRxTxTransaction+0x70>
        break;
 800cad2:	bf00      	nop
  }

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20000144 	.word	0x20000144
 800cae4:	165e9f81 	.word	0x165e9f81

0800cae8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cae8:	b084      	sub	sp, #16
 800caea:	b480      	push	{r7}
 800caec:	b085      	sub	sp, #20
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	f107 001c 	add.w	r0, r7, #28
 800caf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cafe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cb00:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cb02:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cb06:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cb0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cb0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cb12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cb22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	431a      	orrs	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	b004      	add	sp, #16
 800cb3c:	4770      	bx	lr

0800cb3e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b083      	sub	sp, #12
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr

0800cb7a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b082      	sub	sp, #8
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2203      	movs	r2, #3
 800cb86:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cb88:	2002      	movs	r0, #2
 800cb8a:	f7fa ff0b 	bl	80079a4 <HAL_Delay>
  
  return HAL_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 0303 	and.w	r3, r3, #3
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cbd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cbde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cbee:	f023 030f 	bic.w	r3, r3, #15
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	b2db      	uxtb	r3, r3
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cc22:	b480      	push	{r7}
 800cc24:	b085      	sub	sp, #20
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3314      	adds	r3, #20
 800cc30:	461a      	mov	r2, r3
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	4413      	add	r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
}  
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc6e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cc74:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cc7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc86:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0

}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ccae:	2310      	movs	r3, #16
 800ccb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccb2:	2340      	movs	r3, #64	; 0x40
 800ccb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccc0:	f107 0308 	add.w	r3, r7, #8
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ff74 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cccc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccd0:	2110      	movs	r1, #16
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fa40 	bl	800d158 <SDMMC_GetCmdResp1>
 800ccd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccda:	69fb      	ldr	r3, [r7, #28]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3720      	adds	r7, #32
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b088      	sub	sp, #32
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ccf2:	2311      	movs	r3, #17
 800ccf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccf6:	2340      	movs	r3, #64	; 0x40
 800ccf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd04:	f107 0308 	add.w	r3, r7, #8
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff ff52 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd14:	2111      	movs	r1, #17
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fa1e 	bl	800d158 <SDMMC_GetCmdResp1>
 800cd1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd1e:	69fb      	ldr	r3, [r7, #28]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3720      	adds	r7, #32
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cd36:	2312      	movs	r3, #18
 800cd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd3a:	2340      	movs	r3, #64	; 0x40
 800cd3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd48:	f107 0308 	add.w	r3, r7, #8
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7ff ff30 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd58:	2112      	movs	r1, #18
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f9fc 	bl	800d158 <SDMMC_GetCmdResp1>
 800cd60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd62:	69fb      	ldr	r3, [r7, #28]
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3720      	adds	r7, #32
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd7a:	2318      	movs	r3, #24
 800cd7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd7e:	2340      	movs	r3, #64	; 0x40
 800cd80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd8c:	f107 0308 	add.w	r3, r7, #8
 800cd90:	4619      	mov	r1, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff ff0e 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd98:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd9c:	2118      	movs	r1, #24
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f9da 	bl	800d158 <SDMMC_GetCmdResp1>
 800cda4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cda6:	69fb      	ldr	r3, [r7, #28]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3720      	adds	r7, #32
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b088      	sub	sp, #32
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cdbe:	2319      	movs	r3, #25
 800cdc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdc2:	2340      	movs	r3, #64	; 0x40
 800cdc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdd0:	f107 0308 	add.w	r3, r7, #8
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff feec 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde0:	2119      	movs	r1, #25
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f9b8 	bl	800d158 <SDMMC_GetCmdResp1>
 800cde8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdea:	69fb      	ldr	r3, [r7, #28]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3720      	adds	r7, #32
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ce00:	230c      	movs	r3, #12
 800ce02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce04:	2340      	movs	r3, #64	; 0x40
 800ce06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce12:	f107 0308 	add.w	r3, r7, #8
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fecb 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ce1e:	4a05      	ldr	r2, [pc, #20]	; (800ce34 <SDMMC_CmdStopTransfer+0x40>)
 800ce20:	210c      	movs	r1, #12
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f998 	bl	800d158 <SDMMC_GetCmdResp1>
 800ce28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce2a:	69fb      	ldr	r3, [r7, #28]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3720      	adds	r7, #32
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	05f5e100 	.word	0x05f5e100

0800ce38 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08a      	sub	sp, #40	; 0x28
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce48:	2307      	movs	r3, #7
 800ce4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce4c:	2340      	movs	r3, #64	; 0x40
 800ce4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce50:	2300      	movs	r3, #0
 800ce52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce58:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce5a:	f107 0310 	add.w	r3, r7, #16
 800ce5e:	4619      	mov	r1, r3
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7ff fea7 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ce66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce6a:	2107      	movs	r1, #7
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 f973 	bl	800d158 <SDMMC_GetCmdResp1>
 800ce72:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3728      	adds	r7, #40	; 0x28
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b088      	sub	sp, #32
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce92:	2300      	movs	r3, #0
 800ce94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce9c:	f107 0308 	add.w	r3, r7, #8
 800cea0:	4619      	mov	r1, r3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7ff fe86 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f92d 	bl	800d108 <SDMMC_GetCmdError>
 800ceae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceb0:	69fb      	ldr	r3, [r7, #28]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3720      	adds	r7, #32
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b088      	sub	sp, #32
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cec2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cec8:	2308      	movs	r3, #8
 800ceca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cecc:	2340      	movs	r3, #64	; 0x40
 800cece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ced0:	2300      	movs	r3, #0
 800ced2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ced4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ced8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ceda:	f107 0308 	add.w	r3, r7, #8
 800cede:	4619      	mov	r1, r3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff fe67 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fb16 	bl	800d518 <SDMMC_GetCmdResp7>
 800ceec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceee:	69fb      	ldr	r3, [r7, #28]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3720      	adds	r7, #32
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b088      	sub	sp, #32
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf06:	2337      	movs	r3, #55	; 0x37
 800cf08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf0a:	2340      	movs	r3, #64	; 0x40
 800cf0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf18:	f107 0308 	add.w	r3, r7, #8
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7ff fe48 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cf24:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf28:	2137      	movs	r1, #55	; 0x37
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f914 	bl	800d158 <SDMMC_GetCmdResp1>
 800cf30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf32:	69fb      	ldr	r3, [r7, #28]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3720      	adds	r7, #32
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b088      	sub	sp, #32
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf52:	2329      	movs	r3, #41	; 0x29
 800cf54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf56:	2340      	movs	r3, #64	; 0x40
 800cf58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf64:	f107 0308 	add.w	r3, r7, #8
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff fe22 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fa23 	bl	800d3bc <SDMMC_GetCmdResp3>
 800cf76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf78:	69fb      	ldr	r3, [r7, #28]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3720      	adds	r7, #32
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b088      	sub	sp, #32
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cf90:	2306      	movs	r3, #6
 800cf92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf94:	2340      	movs	r3, #64	; 0x40
 800cf96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfa2:	f107 0308 	add.w	r3, r7, #8
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff fe03 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cfae:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb2:	2106      	movs	r1, #6
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f8cf 	bl	800d158 <SDMMC_GetCmdResp1>
 800cfba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfbc:	69fb      	ldr	r3, [r7, #28]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3720      	adds	r7, #32
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b088      	sub	sp, #32
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cfd2:	2333      	movs	r3, #51	; 0x33
 800cfd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfd6:	2340      	movs	r3, #64	; 0x40
 800cfd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfe4:	f107 0308 	add.w	r3, r7, #8
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff fde2 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cff0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cff4:	2133      	movs	r1, #51	; 0x33
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f8ae 	bl	800d158 <SDMMC_GetCmdResp1>
 800cffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cffe:	69fb      	ldr	r3, [r7, #28]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3720      	adds	r7, #32
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d010:	2300      	movs	r3, #0
 800d012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d014:	2302      	movs	r3, #2
 800d016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d018:	23c0      	movs	r3, #192	; 0xc0
 800d01a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d01c:	2300      	movs	r3, #0
 800d01e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d024:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d026:	f107 0308 	add.w	r3, r7, #8
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff fdc1 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f97c 	bl	800d330 <SDMMC_GetCmdResp2>
 800d038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d03a:	69fb      	ldr	r3, [r7, #28]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d052:	2309      	movs	r3, #9
 800d054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d056:	23c0      	movs	r3, #192	; 0xc0
 800d058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d05a:	2300      	movs	r3, #0
 800d05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d062:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d064:	f107 0308 	add.w	r3, r7, #8
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff fda2 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 f95d 	bl	800d330 <SDMMC_GetCmdResp2>
 800d076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d078:	69fb      	ldr	r3, [r7, #28]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3720      	adds	r7, #32
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b088      	sub	sp, #32
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d08c:	2300      	movs	r3, #0
 800d08e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d090:	2303      	movs	r3, #3
 800d092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d094:	2340      	movs	r3, #64	; 0x40
 800d096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d098:	2300      	movs	r3, #0
 800d09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0a2:	f107 0308 	add.w	r3, r7, #8
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7ff fd83 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	2103      	movs	r1, #3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f9bc 	bl	800d430 <SDMMC_GetCmdResp6>
 800d0b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0ba:	69fb      	ldr	r3, [r7, #28]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3720      	adds	r7, #32
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b088      	sub	sp, #32
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0d2:	230d      	movs	r3, #13
 800d0d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0d6:	2340      	movs	r3, #64	; 0x40
 800d0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0e4:	f107 0308 	add.w	r3, r7, #8
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fd62 	bl	800cbb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0f4:	210d      	movs	r1, #13
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f82e 	bl	800d158 <SDMMC_GetCmdResp1>
 800d0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3720      	adds	r7, #32
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d108:	b490      	push	{r4, r7}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d110:	4b0f      	ldr	r3, [pc, #60]	; (800d150 <SDMMC_GetCmdError+0x48>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a0f      	ldr	r2, [pc, #60]	; (800d154 <SDMMC_GetCmdError+0x4c>)
 800d116:	fba2 2303 	umull	r2, r3, r2, r3
 800d11a:	0a5b      	lsrs	r3, r3, #9
 800d11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d120:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d124:	4623      	mov	r3, r4
 800d126:	1e5c      	subs	r4, r3, #1
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d12c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d130:	e009      	b.n	800d146 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d0f2      	beq.n	800d124 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	22c5      	movs	r2, #197	; 0xc5
 800d142:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bc90      	pop	{r4, r7}
 800d14e:	4770      	bx	lr
 800d150:	20000144 	.word	0x20000144
 800d154:	10624dd3 	.word	0x10624dd3

0800d158 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d158:	b590      	push	{r4, r7, lr}
 800d15a:	b087      	sub	sp, #28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	460b      	mov	r3, r1
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d166:	4b6f      	ldr	r3, [pc, #444]	; (800d324 <SDMMC_GetCmdResp1+0x1cc>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a6f      	ldr	r2, [pc, #444]	; (800d328 <SDMMC_GetCmdResp1+0x1d0>)
 800d16c:	fba2 2303 	umull	r2, r3, r2, r3
 800d170:	0a5b      	lsrs	r3, r3, #9
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d178:	4623      	mov	r3, r4
 800d17a:	1e5c      	subs	r4, r3, #1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d102      	bne.n	800d186 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d184:	e0c9      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0f0      	beq.n	800d178 <SDMMC_GetCmdResp1+0x20>
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1eb      	bne.n	800d178 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2204      	movs	r2, #4
 800d1b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1b2:	2304      	movs	r3, #4
 800d1b4:	e0b1      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d004      	beq.n	800d1cc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e0a6      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	22c5      	movs	r2, #197	; 0xc5
 800d1d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff fd18 	bl	800cc08 <SDIO_GetCommandResponse>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	461a      	mov	r2, r3
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d001      	beq.n	800d1e6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e099      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7ff fd1a 	bl	800cc22 <SDIO_GetResponse>
 800d1ee:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d1f0:	693a      	ldr	r2, [r7, #16]
 800d1f2:	4b4e      	ldr	r3, [pc, #312]	; (800d32c <SDMMC_GetCmdResp1+0x1d4>)
 800d1f4:	4013      	ands	r3, r2
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e08d      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	da02      	bge.n	800d20a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d208:	e087      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d214:	2340      	movs	r3, #64	; 0x40
 800d216:	e080      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d222:	2380      	movs	r3, #128	; 0x80
 800d224:	e079      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d230:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d234:	e071      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d240:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d244:	e069      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d254:	e061      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d264:	e059      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d274:	e051      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d284:	e049      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d294:	e041      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d2a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2a4:	e039      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d2b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d2b4:	e031      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d2c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d2c4:	e029      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d002      	beq.n	800d2d6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d2d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2d4:	e021      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d002      	beq.n	800d2e6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d2e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d2e4:	e019      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d2f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d2f4:	e011      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d300:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d304:	e009      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	f003 0308 	and.w	r3, r3, #8
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d310:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d314:	e001      	b.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	371c      	adds	r7, #28
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd90      	pop	{r4, r7, pc}
 800d322:	bf00      	nop
 800d324:	20000144 	.word	0x20000144
 800d328:	10624dd3 	.word	0x10624dd3
 800d32c:	fdffe008 	.word	0xfdffe008

0800d330 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d330:	b490      	push	{r4, r7}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d338:	4b1e      	ldr	r3, [pc, #120]	; (800d3b4 <SDMMC_GetCmdResp2+0x84>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a1e      	ldr	r2, [pc, #120]	; (800d3b8 <SDMMC_GetCmdResp2+0x88>)
 800d33e:	fba2 2303 	umull	r2, r3, r2, r3
 800d342:	0a5b      	lsrs	r3, r3, #9
 800d344:	f241 3288 	movw	r2, #5000	; 0x1388
 800d348:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d34c:	4623      	mov	r3, r4
 800d34e:	1e5c      	subs	r4, r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	d102      	bne.n	800d35a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d358:	e026      	b.n	800d3a8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0f0      	beq.n	800d34c <SDMMC_GetCmdResp2+0x1c>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1eb      	bne.n	800d34c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	f003 0304 	and.w	r3, r3, #4
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d004      	beq.n	800d38a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2204      	movs	r2, #4
 800d384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d386:	2304      	movs	r3, #4
 800d388:	e00e      	b.n	800d3a8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	2b00      	cmp	r3, #0
 800d394:	d004      	beq.n	800d3a0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e003      	b.n	800d3a8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	22c5      	movs	r2, #197	; 0xc5
 800d3a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bc90      	pop	{r4, r7}
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	20000144 	.word	0x20000144
 800d3b8:	10624dd3 	.word	0x10624dd3

0800d3bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d3bc:	b490      	push	{r4, r7}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3c4:	4b18      	ldr	r3, [pc, #96]	; (800d428 <SDMMC_GetCmdResp3+0x6c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a18      	ldr	r2, [pc, #96]	; (800d42c <SDMMC_GetCmdResp3+0x70>)
 800d3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ce:	0a5b      	lsrs	r3, r3, #9
 800d3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d3d8:	4623      	mov	r3, r4
 800d3da:	1e5c      	subs	r4, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d102      	bne.n	800d3e6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3e4:	e01b      	b.n	800d41e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d0f0      	beq.n	800d3d8 <SDMMC_GetCmdResp3+0x1c>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1eb      	bne.n	800d3d8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d404:	f003 0304 	and.w	r3, r3, #4
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d004      	beq.n	800d416 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2204      	movs	r2, #4
 800d410:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d412:	2304      	movs	r3, #4
 800d414:	e003      	b.n	800d41e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	22c5      	movs	r2, #197	; 0xc5
 800d41a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bc90      	pop	{r4, r7}
 800d426:	4770      	bx	lr
 800d428:	20000144 	.word	0x20000144
 800d42c:	10624dd3 	.word	0x10624dd3

0800d430 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	460b      	mov	r3, r1
 800d43a:	607a      	str	r2, [r7, #4]
 800d43c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d43e:	4b34      	ldr	r3, [pc, #208]	; (800d510 <SDMMC_GetCmdResp6+0xe0>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a34      	ldr	r2, [pc, #208]	; (800d514 <SDMMC_GetCmdResp6+0xe4>)
 800d444:	fba2 2303 	umull	r2, r3, r2, r3
 800d448:	0a5b      	lsrs	r3, r3, #9
 800d44a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d44e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d452:	4623      	mov	r3, r4
 800d454:	1e5c      	subs	r4, r3, #1
 800d456:	2b00      	cmp	r3, #0
 800d458:	d102      	bne.n	800d460 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d45a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d45e:	e052      	b.n	800d506 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d464:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d0f0      	beq.n	800d452 <SDMMC_GetCmdResp6+0x22>
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1eb      	bne.n	800d452 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47e:	f003 0304 	and.w	r3, r3, #4
 800d482:	2b00      	cmp	r3, #0
 800d484:	d004      	beq.n	800d490 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2204      	movs	r2, #4
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d48c:	2304      	movs	r3, #4
 800d48e:	e03a      	b.n	800d506 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d004      	beq.n	800d4a6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e02f      	b.n	800d506 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7ff fbae 	bl	800cc08 <SDIO_GetCommandResponse>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	7afb      	ldrb	r3, [r7, #11]
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d001      	beq.n	800d4ba <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e025      	b.n	800d506 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	22c5      	movs	r2, #197	; 0xc5
 800d4be:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff fbad 	bl	800cc22 <SDIO_GetResponse>
 800d4c8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d106      	bne.n	800d4e2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	0c1b      	lsrs	r3, r3, #16
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	e011      	b.n	800d506 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4f0:	e009      	b.n	800d506 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d500:	e001      	b.n	800d506 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d506:	4618      	mov	r0, r3
 800d508:	371c      	adds	r7, #28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd90      	pop	{r4, r7, pc}
 800d50e:	bf00      	nop
 800d510:	20000144 	.word	0x20000144
 800d514:	10624dd3 	.word	0x10624dd3

0800d518 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d518:	b490      	push	{r4, r7}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d520:	4b21      	ldr	r3, [pc, #132]	; (800d5a8 <SDMMC_GetCmdResp7+0x90>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a21      	ldr	r2, [pc, #132]	; (800d5ac <SDMMC_GetCmdResp7+0x94>)
 800d526:	fba2 2303 	umull	r2, r3, r2, r3
 800d52a:	0a5b      	lsrs	r3, r3, #9
 800d52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d530:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d534:	4623      	mov	r3, r4
 800d536:	1e5c      	subs	r4, r3, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d102      	bne.n	800d542 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d53c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d540:	e02c      	b.n	800d59c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d546:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d0f0      	beq.n	800d534 <SDMMC_GetCmdResp7+0x1c>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1eb      	bne.n	800d534 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d560:	f003 0304 	and.w	r3, r3, #4
 800d564:	2b00      	cmp	r3, #0
 800d566:	d004      	beq.n	800d572 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2204      	movs	r2, #4
 800d56c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d56e:	2304      	movs	r3, #4
 800d570:	e014      	b.n	800d59c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d004      	beq.n	800d588 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d584:	2301      	movs	r3, #1
 800d586:	e009      	b.n	800d59c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d590:	2b00      	cmp	r3, #0
 800d592:	d002      	beq.n	800d59a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2240      	movs	r2, #64	; 0x40
 800d598:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d59a:	2300      	movs	r3, #0
  
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bc90      	pop	{r4, r7}
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20000144 	.word	0x20000144
 800d5ac:	10624dd3 	.word	0x10624dd3

0800d5b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d5b4:	4904      	ldr	r1, [pc, #16]	; (800d5c8 <MX_FATFS_Init+0x18>)
 800d5b6:	4805      	ldr	r0, [pc, #20]	; (800d5cc <MX_FATFS_Init+0x1c>)
 800d5b8:	f003 f9cc 	bl	8010954 <FATFS_LinkDriver>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	461a      	mov	r2, r3
 800d5c0:	4b03      	ldr	r3, [pc, #12]	; (800d5d0 <MX_FATFS_Init+0x20>)
 800d5c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d5c4:	bf00      	nop
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20014ea8 	.word	0x20014ea8
 800d5cc:	08015af4 	.word	0x08015af4
 800d5d0:	20014ea4 	.word	0x20014ea4

0800d5d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d5d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5ee:	f000 f896 	bl	800d71e <BSP_SD_IsDetected>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d001      	beq.n	800d5fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e012      	b.n	800d622 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d5fc:	480b      	ldr	r0, [pc, #44]	; (800d62c <BSP_SD_Init+0x48>)
 800d5fe:	f7fd fa21 	bl	800aa44 <HAL_SD_Init>
 800d602:	4603      	mov	r3, r0
 800d604:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d109      	bne.n	800d620 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d60c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d610:	4806      	ldr	r0, [pc, #24]	; (800d62c <BSP_SD_Init+0x48>)
 800d612:	f7fd ffe1 	bl	800b5d8 <HAL_SD_ConfigWideBusOperation>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d620:	79fb      	ldrb	r3, [r7, #7]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	20014d6c 	.word	0x20014d6c

0800d630 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	68f9      	ldr	r1, [r7, #12]
 800d646:	4806      	ldr	r0, [pc, #24]	; (800d660 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d648:	f7fd fa8c 	bl	800ab64 <HAL_SD_ReadBlocks_DMA>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d001      	beq.n	800d656 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d656:	7dfb      	ldrb	r3, [r7, #23]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20014d6c 	.word	0x20014d6c

0800d664 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b086      	sub	sp, #24
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	68f9      	ldr	r1, [r7, #12]
 800d67a:	4806      	ldr	r0, [pc, #24]	; (800d694 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d67c:	f7fd fb5c 	bl	800ad38 <HAL_SD_WriteBlocks_DMA>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3718      	adds	r7, #24
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20014d6c 	.word	0x20014d6c

0800d698 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d69c:	4805      	ldr	r0, [pc, #20]	; (800d6b4 <BSP_SD_GetCardState+0x1c>)
 800d69e:	f7fe f817 	bl	800b6d0 <HAL_SD_GetCardState>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b04      	cmp	r3, #4
 800d6a6:	bf14      	ite	ne
 800d6a8:	2301      	movne	r3, #1
 800d6aa:	2300      	moveq	r3, #0
 800d6ac:	b2db      	uxtb	r3, r3
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20014d6c 	.word	0x20014d6c

0800d6b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	4803      	ldr	r0, [pc, #12]	; (800d6d0 <BSP_SD_GetCardInfo+0x18>)
 800d6c4:	f7fd ff5c 	bl	800b580 <HAL_SD_GetCardInfo>
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20014d6c 	.word	0x20014d6c

0800d6d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d6dc:	f000 f818 	bl	800d710 <BSP_SD_AbortCallback>
}
 800d6e0:	bf00      	nop
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d6f0:	f000 f9aa 	bl	800da48 <BSP_SD_WriteCpltCallback>
}
 800d6f4:	bf00      	nop
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d704:	f000 f9ac 	bl	800da60 <BSP_SD_ReadCpltCallback>
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d710:	b480      	push	{r7}
 800d712:	af00      	add	r7, sp, #0

}
 800d714:	bf00      	nop
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b082      	sub	sp, #8
 800d722:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d724:	2301      	movs	r3, #1
 800d726:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d728:	f000 f80c 	bl	800d744 <BSP_PlatformIsDetected>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d732:	2300      	movs	r3, #0
 800d734:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	b2db      	uxtb	r3, r3
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d74a:	2301      	movs	r3, #1
 800d74c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d74e:	2101      	movs	r1, #1
 800d750:	4807      	ldr	r0, [pc, #28]	; (800d770 <BSP_PlatformIsDetected+0x2c>)
 800d752:	f7fb fc3f 	bl	8008fd4 <HAL_GPIO_ReadPin>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d75c:	2300      	movs	r3, #0
 800d75e:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 800d760:	2301      	movs	r3, #1
 800d762:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 800d764:	79fb      	ldrb	r3, [r7, #7]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	40020c00 	.word	0x40020c00

0800d774 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d77c:	f7fa f906 	bl	800798c <HAL_GetTick>
 800d780:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d782:	e006      	b.n	800d792 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d784:	f7ff ff88 	bl	800d698 <BSP_SD_GetCardState>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	e009      	b.n	800d7a6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d792:	f7fa f8fb 	bl	800798c <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d8f0      	bhi.n	800d784 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d7a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
	...

0800d7b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d7ba:	4b0b      	ldr	r3, [pc, #44]	; (800d7e8 <SD_CheckStatus+0x38>)
 800d7bc:	2201      	movs	r2, #1
 800d7be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d7c0:	f7ff ff6a 	bl	800d698 <BSP_SD_GetCardState>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d107      	bne.n	800d7da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d7ca:	4b07      	ldr	r3, [pc, #28]	; (800d7e8 <SD_CheckStatus+0x38>)
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f023 0301 	bic.w	r3, r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <SD_CheckStatus+0x38>)
 800d7d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d7da:	4b03      	ldr	r3, [pc, #12]	; (800d7e8 <SD_CheckStatus+0x38>)
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	b2db      	uxtb	r3, r3
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	20000151 	.word	0x20000151

0800d7ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d7f6:	f7ff fef5 	bl	800d5e4 <BSP_SD_Init>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d107      	bne.n	800d810 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d800:	79fb      	ldrb	r3, [r7, #7]
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff ffd4 	bl	800d7b0 <SD_CheckStatus>
 800d808:	4603      	mov	r3, r0
 800d80a:	461a      	mov	r2, r3
 800d80c:	4b04      	ldr	r3, [pc, #16]	; (800d820 <SD_initialize+0x34>)
 800d80e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d810:	4b03      	ldr	r3, [pc, #12]	; (800d820 <SD_initialize+0x34>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	b2db      	uxtb	r3, r3
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	20000151 	.word	0x20000151

0800d824 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d82e:	79fb      	ldrb	r3, [r7, #7]
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff ffbd 	bl	800d7b0 <SD_CheckStatus>
 800d836:	4603      	mov	r3, r0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d850:	2301      	movs	r3, #1
 800d852:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d854:	f247 5030 	movw	r0, #30000	; 0x7530
 800d858:	f7ff ff8c 	bl	800d774 <SD_CheckStatusWithTimeout>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	da01      	bge.n	800d866 <SD_read+0x26>
  {
    return res;
 800d862:	7dfb      	ldrb	r3, [r7, #23]
 800d864:	e03b      	b.n	800d8de <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d866:	683a      	ldr	r2, [r7, #0]
 800d868:	6879      	ldr	r1, [r7, #4]
 800d86a:	68b8      	ldr	r0, [r7, #8]
 800d86c:	f7ff fee0 	bl	800d630 <BSP_SD_ReadBlocks_DMA>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d132      	bne.n	800d8dc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d876:	4b1c      	ldr	r3, [pc, #112]	; (800d8e8 <SD_read+0xa8>)
 800d878:	2200      	movs	r2, #0
 800d87a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d87c:	f7fa f886 	bl	800798c <HAL_GetTick>
 800d880:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d882:	bf00      	nop
 800d884:	4b18      	ldr	r3, [pc, #96]	; (800d8e8 <SD_read+0xa8>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d108      	bne.n	800d89e <SD_read+0x5e>
 800d88c:	f7fa f87e 	bl	800798c <HAL_GetTick>
 800d890:	4602      	mov	r2, r0
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	f247 522f 	movw	r2, #29999	; 0x752f
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d9f2      	bls.n	800d884 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d89e:	4b12      	ldr	r3, [pc, #72]	; (800d8e8 <SD_read+0xa8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d102      	bne.n	800d8ac <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	75fb      	strb	r3, [r7, #23]
 800d8aa:	e017      	b.n	800d8dc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d8ac:	4b0e      	ldr	r3, [pc, #56]	; (800d8e8 <SD_read+0xa8>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d8b2:	f7fa f86b 	bl	800798c <HAL_GetTick>
 800d8b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d8b8:	e007      	b.n	800d8ca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d8ba:	f7ff feed 	bl	800d698 <BSP_SD_GetCardState>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d102      	bne.n	800d8ca <SD_read+0x8a>
          {
            res = RES_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d8c8:	e008      	b.n	800d8dc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d8ca:	f7fa f85f 	bl	800798c <HAL_GetTick>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d9ee      	bls.n	800d8ba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d8dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3718      	adds	r7, #24
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000834 	.word	0x20000834

0800d8ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60b9      	str	r1, [r7, #8]
 800d8f4:	607a      	str	r2, [r7, #4]
 800d8f6:	603b      	str	r3, [r7, #0]
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d900:	4b24      	ldr	r3, [pc, #144]	; (800d994 <SD_write+0xa8>)
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d906:	f247 5030 	movw	r0, #30000	; 0x7530
 800d90a:	f7ff ff33 	bl	800d774 <SD_CheckStatusWithTimeout>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	da01      	bge.n	800d918 <SD_write+0x2c>
  {
    return res;
 800d914:	7dfb      	ldrb	r3, [r7, #23]
 800d916:	e038      	b.n	800d98a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	6879      	ldr	r1, [r7, #4]
 800d91c:	68b8      	ldr	r0, [r7, #8]
 800d91e:	f7ff fea1 	bl	800d664 <BSP_SD_WriteBlocks_DMA>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d12f      	bne.n	800d988 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d928:	f7fa f830 	bl	800798c <HAL_GetTick>
 800d92c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d92e:	bf00      	nop
 800d930:	4b18      	ldr	r3, [pc, #96]	; (800d994 <SD_write+0xa8>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d108      	bne.n	800d94a <SD_write+0x5e>
 800d938:	f7fa f828 	bl	800798c <HAL_GetTick>
 800d93c:	4602      	mov	r2, r0
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	f247 522f 	movw	r2, #29999	; 0x752f
 800d946:	4293      	cmp	r3, r2
 800d948:	d9f2      	bls.n	800d930 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d94a:	4b12      	ldr	r3, [pc, #72]	; (800d994 <SD_write+0xa8>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d102      	bne.n	800d958 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	75fb      	strb	r3, [r7, #23]
 800d956:	e017      	b.n	800d988 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d958:	4b0e      	ldr	r3, [pc, #56]	; (800d994 <SD_write+0xa8>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d95e:	f7fa f815 	bl	800798c <HAL_GetTick>
 800d962:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d964:	e007      	b.n	800d976 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d966:	f7ff fe97 	bl	800d698 <BSP_SD_GetCardState>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d102      	bne.n	800d976 <SD_write+0x8a>
          {
            res = RES_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	75fb      	strb	r3, [r7, #23]
            break;
 800d974:	e008      	b.n	800d988 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d976:	f7fa f809 	bl	800798c <HAL_GetTick>
 800d97a:	4602      	mov	r2, r0
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	1ad3      	subs	r3, r2, r3
 800d980:	f247 522f 	movw	r2, #29999	; 0x752f
 800d984:	4293      	cmp	r3, r2
 800d986:	d9ee      	bls.n	800d966 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d988:	7dfb      	ldrb	r3, [r7, #23]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	20000830 	.word	0x20000830

0800d998 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08c      	sub	sp, #48	; 0x30
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	4603      	mov	r3, r0
 800d9a0:	603a      	str	r2, [r7, #0]
 800d9a2:	71fb      	strb	r3, [r7, #7]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d9ae:	4b25      	ldr	r3, [pc, #148]	; (800da44 <SD_ioctl+0xac>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d001      	beq.n	800d9c0 <SD_ioctl+0x28>
 800d9bc:	2303      	movs	r3, #3
 800d9be:	e03c      	b.n	800da3a <SD_ioctl+0xa2>

  switch (cmd)
 800d9c0:	79bb      	ldrb	r3, [r7, #6]
 800d9c2:	2b03      	cmp	r3, #3
 800d9c4:	d834      	bhi.n	800da30 <SD_ioctl+0x98>
 800d9c6:	a201      	add	r2, pc, #4	; (adr r2, 800d9cc <SD_ioctl+0x34>)
 800d9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9cc:	0800d9dd 	.word	0x0800d9dd
 800d9d0:	0800d9e5 	.word	0x0800d9e5
 800d9d4:	0800d9fd 	.word	0x0800d9fd
 800d9d8:	0800da17 	.word	0x0800da17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d9e2:	e028      	b.n	800da36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d9e4:	f107 030c 	add.w	r3, r7, #12
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7ff fe65 	bl	800d6b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d9fa:	e01c      	b.n	800da36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d9fc:	f107 030c 	add.w	r3, r7, #12
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fe59 	bl	800d6b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	b29a      	uxth	r2, r3
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da14:	e00f      	b.n	800da36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800da16:	f107 030c 	add.w	r3, r7, #12
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff fe4c 	bl	800d6b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	0a5a      	lsrs	r2, r3, #9
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da2e:	e002      	b.n	800da36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800da30:	2304      	movs	r3, #4
 800da32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800da36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3730      	adds	r7, #48	; 0x30
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20000151 	.word	0x20000151

0800da48 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800da48:	b480      	push	{r7}
 800da4a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800da4c:	4b03      	ldr	r3, [pc, #12]	; (800da5c <BSP_SD_WriteCpltCallback+0x14>)
 800da4e:	2201      	movs	r2, #1
 800da50:	601a      	str	r2, [r3, #0]
}
 800da52:	bf00      	nop
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	20000830 	.word	0x20000830

0800da60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800da60:	b480      	push	{r7}
 800da62:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800da64:	4b03      	ldr	r3, [pc, #12]	; (800da74 <BSP_SD_ReadCpltCallback+0x14>)
 800da66:	2201      	movs	r2, #1
 800da68:	601a      	str	r2, [r3, #0]
}
 800da6a:	bf00      	nop
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	20000834 	.word	0x20000834

0800da78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	4603      	mov	r3, r0
 800da80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800da82:	79fb      	ldrb	r3, [r7, #7]
 800da84:	4a08      	ldr	r2, [pc, #32]	; (800daa8 <disk_status+0x30>)
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	79fa      	ldrb	r2, [r7, #7]
 800da90:	4905      	ldr	r1, [pc, #20]	; (800daa8 <disk_status+0x30>)
 800da92:	440a      	add	r2, r1
 800da94:	7a12      	ldrb	r2, [r2, #8]
 800da96:	4610      	mov	r0, r2
 800da98:	4798      	blx	r3
 800da9a:	4603      	mov	r3, r0
 800da9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	20000860 	.word	0x20000860

0800daac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800daba:	79fb      	ldrb	r3, [r7, #7]
 800dabc:	4a0d      	ldr	r2, [pc, #52]	; (800daf4 <disk_initialize+0x48>)
 800dabe:	5cd3      	ldrb	r3, [r2, r3]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d111      	bne.n	800dae8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dac4:	79fb      	ldrb	r3, [r7, #7]
 800dac6:	4a0b      	ldr	r2, [pc, #44]	; (800daf4 <disk_initialize+0x48>)
 800dac8:	2101      	movs	r1, #1
 800daca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	4a09      	ldr	r2, [pc, #36]	; (800daf4 <disk_initialize+0x48>)
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	4413      	add	r3, r2
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	79fa      	ldrb	r2, [r7, #7]
 800dada:	4906      	ldr	r1, [pc, #24]	; (800daf4 <disk_initialize+0x48>)
 800dadc:	440a      	add	r2, r1
 800dade:	7a12      	ldrb	r2, [r2, #8]
 800dae0:	4610      	mov	r0, r2
 800dae2:	4798      	blx	r3
 800dae4:	4603      	mov	r3, r0
 800dae6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	20000860 	.word	0x20000860

0800daf8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800daf8:	b590      	push	{r4, r7, lr}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60b9      	str	r1, [r7, #8]
 800db00:	607a      	str	r2, [r7, #4]
 800db02:	603b      	str	r3, [r7, #0]
 800db04:	4603      	mov	r3, r0
 800db06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800db08:	7bfb      	ldrb	r3, [r7, #15]
 800db0a:	4a0a      	ldr	r2, [pc, #40]	; (800db34 <disk_read+0x3c>)
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4413      	add	r3, r2
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	689c      	ldr	r4, [r3, #8]
 800db14:	7bfb      	ldrb	r3, [r7, #15]
 800db16:	4a07      	ldr	r2, [pc, #28]	; (800db34 <disk_read+0x3c>)
 800db18:	4413      	add	r3, r2
 800db1a:	7a18      	ldrb	r0, [r3, #8]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	68b9      	ldr	r1, [r7, #8]
 800db22:	47a0      	blx	r4
 800db24:	4603      	mov	r3, r0
 800db26:	75fb      	strb	r3, [r7, #23]
  return res;
 800db28:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	371c      	adds	r7, #28
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd90      	pop	{r4, r7, pc}
 800db32:	bf00      	nop
 800db34:	20000860 	.word	0x20000860

0800db38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60b9      	str	r1, [r7, #8]
 800db40:	607a      	str	r2, [r7, #4]
 800db42:	603b      	str	r3, [r7, #0]
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800db48:	7bfb      	ldrb	r3, [r7, #15]
 800db4a:	4a0a      	ldr	r2, [pc, #40]	; (800db74 <disk_write+0x3c>)
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4413      	add	r3, r2
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	68dc      	ldr	r4, [r3, #12]
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	4a07      	ldr	r2, [pc, #28]	; (800db74 <disk_write+0x3c>)
 800db58:	4413      	add	r3, r2
 800db5a:	7a18      	ldrb	r0, [r3, #8]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	68b9      	ldr	r1, [r7, #8]
 800db62:	47a0      	blx	r4
 800db64:	4603      	mov	r3, r0
 800db66:	75fb      	strb	r3, [r7, #23]
  return res;
 800db68:	7dfb      	ldrb	r3, [r7, #23]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	371c      	adds	r7, #28
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd90      	pop	{r4, r7, pc}
 800db72:	bf00      	nop
 800db74:	20000860 	.word	0x20000860

0800db78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	603a      	str	r2, [r7, #0]
 800db82:	71fb      	strb	r3, [r7, #7]
 800db84:	460b      	mov	r3, r1
 800db86:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	4a09      	ldr	r2, [pc, #36]	; (800dbb0 <disk_ioctl+0x38>)
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	79fa      	ldrb	r2, [r7, #7]
 800db96:	4906      	ldr	r1, [pc, #24]	; (800dbb0 <disk_ioctl+0x38>)
 800db98:	440a      	add	r2, r1
 800db9a:	7a10      	ldrb	r0, [r2, #8]
 800db9c:	79b9      	ldrb	r1, [r7, #6]
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	4798      	blx	r3
 800dba2:	4603      	mov	r3, r0
 800dba4:	73fb      	strb	r3, [r7, #15]
  return res;
 800dba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	20000860 	.word	0x20000860

0800dbb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dbc4:	89fb      	ldrh	r3, [r7, #14]
 800dbc6:	021b      	lsls	r3, r3, #8
 800dbc8:	b21a      	sxth	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b21b      	sxth	r3, r3
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	b21b      	sxth	r3, r3
 800dbd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dbd6:	89fb      	ldrh	r3, [r7, #14]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	3303      	adds	r3, #3
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	021b      	lsls	r3, r3, #8
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	3202      	adds	r2, #2
 800dbfc:	7812      	ldrb	r2, [r2, #0]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	021b      	lsls	r3, r3, #8
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	3201      	adds	r2, #1
 800dc0a:	7812      	ldrb	r2, [r2, #0]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	021b      	lsls	r3, r3, #8
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	7812      	ldrb	r2, [r2, #0]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	60fb      	str	r3, [r7, #12]
	return rv;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3714      	adds	r7, #20
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	460b      	mov	r3, r1
 800dc34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	1c5a      	adds	r2, r3, #1
 800dc3a:	607a      	str	r2, [r7, #4]
 800dc3c:	887a      	ldrh	r2, [r7, #2]
 800dc3e:	b2d2      	uxtb	r2, r2
 800dc40:	701a      	strb	r2, [r3, #0]
 800dc42:	887b      	ldrh	r3, [r7, #2]
 800dc44:	0a1b      	lsrs	r3, r3, #8
 800dc46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	607a      	str	r2, [r7, #4]
 800dc4e:	887a      	ldrh	r2, [r7, #2]
 800dc50:	b2d2      	uxtb	r2, r2
 800dc52:	701a      	strb	r2, [r3, #0]
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	b2d2      	uxtb	r2, r2
 800dc74:	701a      	strb	r2, [r3, #0]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	0a1b      	lsrs	r3, r3, #8
 800dc7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	607a      	str	r2, [r7, #4]
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	b2d2      	uxtb	r2, r2
 800dc86:	701a      	strb	r2, [r3, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	0a1b      	lsrs	r3, r3, #8
 800dc8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	1c5a      	adds	r2, r3, #1
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	b2d2      	uxtb	r2, r2
 800dc98:	701a      	strb	r2, [r3, #0]
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	0a1b      	lsrs	r3, r3, #8
 800dc9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	607a      	str	r2, [r7, #4]
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	b2d2      	uxtb	r2, r2
 800dcaa:	701a      	strb	r2, [r3, #0]
}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dcb8:	b480      	push	{r7}
 800dcba:	b087      	sub	sp, #28
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00d      	beq.n	800dcee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	1c53      	adds	r3, r2, #1
 800dcd6:	613b      	str	r3, [r7, #16]
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	1c59      	adds	r1, r3, #1
 800dcdc:	6179      	str	r1, [r7, #20]
 800dcde:	7812      	ldrb	r2, [r2, #0]
 800dce0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	3b01      	subs	r3, #1
 800dce6:	607b      	str	r3, [r7, #4]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1f1      	bne.n	800dcd2 <mem_cpy+0x1a>
	}
}
 800dcee:	bf00      	nop
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dcfa:	b480      	push	{r7}
 800dcfc:	b087      	sub	sp, #28
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	60f8      	str	r0, [r7, #12]
 800dd02:	60b9      	str	r1, [r7, #8]
 800dd04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	617a      	str	r2, [r7, #20]
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	b2d2      	uxtb	r2, r2
 800dd14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	607b      	str	r3, [r7, #4]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1f3      	bne.n	800dd0a <mem_set+0x10>
}
 800dd22:	bf00      	nop
 800dd24:	371c      	adds	r7, #28
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr

0800dd2e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dd2e:	b480      	push	{r7}
 800dd30:	b089      	sub	sp, #36	; 0x24
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	60f8      	str	r0, [r7, #12]
 800dd36:	60b9      	str	r1, [r7, #8]
 800dd38:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	61fb      	str	r3, [r7, #28]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	61fa      	str	r2, [r7, #28]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	61ba      	str	r2, [r7, #24]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	1acb      	subs	r3, r1, r3
 800dd5a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	607b      	str	r3, [r7, #4]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <mem_cmp+0x40>
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d0eb      	beq.n	800dd46 <mem_cmp+0x18>

	return r;
 800dd6e:	697b      	ldr	r3, [r7, #20]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3724      	adds	r7, #36	; 0x24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dd86:	e002      	b.n	800dd8e <chk_chr+0x12>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	607b      	str	r3, [r7, #4]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d005      	beq.n	800dda2 <chk_chr+0x26>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d1f2      	bne.n	800dd88 <chk_chr+0xc>
	return *str;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	781b      	ldrb	r3, [r3, #0]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
	...

0800ddb4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	60bb      	str	r3, [r7, #8]
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	60fb      	str	r3, [r7, #12]
 800ddc6:	e029      	b.n	800de1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ddc8:	4a27      	ldr	r2, [pc, #156]	; (800de68 <chk_lock+0xb4>)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	011b      	lsls	r3, r3, #4
 800ddce:	4413      	add	r3, r2
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d01d      	beq.n	800de12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ddd6:	4a24      	ldr	r2, [pc, #144]	; (800de68 <chk_lock+0xb4>)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	011b      	lsls	r3, r3, #4
 800dddc:	4413      	add	r3, r2
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d116      	bne.n	800de16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dde8:	4a1f      	ldr	r2, [pc, #124]	; (800de68 <chk_lock+0xb4>)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	011b      	lsls	r3, r3, #4
 800ddee:	4413      	add	r3, r2
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d10c      	bne.n	800de16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ddfc:	4a1a      	ldr	r2, [pc, #104]	; (800de68 <chk_lock+0xb4>)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	011b      	lsls	r3, r3, #4
 800de02:	4413      	add	r3, r2
 800de04:	3308      	adds	r3, #8
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d102      	bne.n	800de16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800de10:	e007      	b.n	800de22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800de12:	2301      	movs	r3, #1
 800de14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	3301      	adds	r3, #1
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d9d2      	bls.n	800ddc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b02      	cmp	r3, #2
 800de26:	d109      	bne.n	800de3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d102      	bne.n	800de34 <chk_lock+0x80>
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d101      	bne.n	800de38 <chk_lock+0x84>
 800de34:	2300      	movs	r3, #0
 800de36:	e010      	b.n	800de5a <chk_lock+0xa6>
 800de38:	2312      	movs	r3, #18
 800de3a:	e00e      	b.n	800de5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d108      	bne.n	800de54 <chk_lock+0xa0>
 800de42:	4a09      	ldr	r2, [pc, #36]	; (800de68 <chk_lock+0xb4>)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	011b      	lsls	r3, r3, #4
 800de48:	4413      	add	r3, r2
 800de4a:	330c      	adds	r3, #12
 800de4c:	881b      	ldrh	r3, [r3, #0]
 800de4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de52:	d101      	bne.n	800de58 <chk_lock+0xa4>
 800de54:	2310      	movs	r3, #16
 800de56:	e000      	b.n	800de5a <chk_lock+0xa6>
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3714      	adds	r7, #20
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	20000840 	.word	0x20000840

0800de6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800de72:	2300      	movs	r3, #0
 800de74:	607b      	str	r3, [r7, #4]
 800de76:	e002      	b.n	800de7e <enq_lock+0x12>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3301      	adds	r3, #1
 800de7c:	607b      	str	r3, [r7, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d806      	bhi.n	800de92 <enq_lock+0x26>
 800de84:	4a09      	ldr	r2, [pc, #36]	; (800deac <enq_lock+0x40>)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	011b      	lsls	r3, r3, #4
 800de8a:	4413      	add	r3, r2
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1f2      	bne.n	800de78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b02      	cmp	r3, #2
 800de96:	bf14      	ite	ne
 800de98:	2301      	movne	r3, #1
 800de9a:	2300      	moveq	r3, #0
 800de9c:	b2db      	uxtb	r3, r3
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	20000840 	.word	0x20000840

0800deb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800deba:	2300      	movs	r3, #0
 800debc:	60fb      	str	r3, [r7, #12]
 800debe:	e01f      	b.n	800df00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dec0:	4a41      	ldr	r2, [pc, #260]	; (800dfc8 <inc_lock+0x118>)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	4413      	add	r3, r2
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d113      	bne.n	800defa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ded2:	4a3d      	ldr	r2, [pc, #244]	; (800dfc8 <inc_lock+0x118>)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	011b      	lsls	r3, r3, #4
 800ded8:	4413      	add	r3, r2
 800deda:	3304      	adds	r3, #4
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d109      	bne.n	800defa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dee6:	4a38      	ldr	r2, [pc, #224]	; (800dfc8 <inc_lock+0x118>)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	011b      	lsls	r3, r3, #4
 800deec:	4413      	add	r3, r2
 800deee:	3308      	adds	r3, #8
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800def6:	429a      	cmp	r2, r3
 800def8:	d006      	beq.n	800df08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3301      	adds	r3, #1
 800defe:	60fb      	str	r3, [r7, #12]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b01      	cmp	r3, #1
 800df04:	d9dc      	bls.n	800dec0 <inc_lock+0x10>
 800df06:	e000      	b.n	800df0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800df08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d132      	bne.n	800df76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	e002      	b.n	800df1c <inc_lock+0x6c>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	3301      	adds	r3, #1
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d806      	bhi.n	800df30 <inc_lock+0x80>
 800df22:	4a29      	ldr	r2, [pc, #164]	; (800dfc8 <inc_lock+0x118>)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	011b      	lsls	r3, r3, #4
 800df28:	4413      	add	r3, r2
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1f2      	bne.n	800df16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b02      	cmp	r3, #2
 800df34:	d101      	bne.n	800df3a <inc_lock+0x8a>
 800df36:	2300      	movs	r3, #0
 800df38:	e040      	b.n	800dfbc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	4922      	ldr	r1, [pc, #136]	; (800dfc8 <inc_lock+0x118>)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	011b      	lsls	r3, r3, #4
 800df44:	440b      	add	r3, r1
 800df46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689a      	ldr	r2, [r3, #8]
 800df4c:	491e      	ldr	r1, [pc, #120]	; (800dfc8 <inc_lock+0x118>)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	011b      	lsls	r3, r3, #4
 800df52:	440b      	add	r3, r1
 800df54:	3304      	adds	r3, #4
 800df56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	695a      	ldr	r2, [r3, #20]
 800df5c:	491a      	ldr	r1, [pc, #104]	; (800dfc8 <inc_lock+0x118>)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	011b      	lsls	r3, r3, #4
 800df62:	440b      	add	r3, r1
 800df64:	3308      	adds	r3, #8
 800df66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800df68:	4a17      	ldr	r2, [pc, #92]	; (800dfc8 <inc_lock+0x118>)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	011b      	lsls	r3, r3, #4
 800df6e:	4413      	add	r3, r2
 800df70:	330c      	adds	r3, #12
 800df72:	2200      	movs	r2, #0
 800df74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d009      	beq.n	800df90 <inc_lock+0xe0>
 800df7c:	4a12      	ldr	r2, [pc, #72]	; (800dfc8 <inc_lock+0x118>)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	011b      	lsls	r3, r3, #4
 800df82:	4413      	add	r3, r2
 800df84:	330c      	adds	r3, #12
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <inc_lock+0xe0>
 800df8c:	2300      	movs	r3, #0
 800df8e:	e015      	b.n	800dfbc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d108      	bne.n	800dfa8 <inc_lock+0xf8>
 800df96:	4a0c      	ldr	r2, [pc, #48]	; (800dfc8 <inc_lock+0x118>)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	011b      	lsls	r3, r3, #4
 800df9c:	4413      	add	r3, r2
 800df9e:	330c      	adds	r3, #12
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	e001      	b.n	800dfac <inc_lock+0xfc>
 800dfa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfac:	4906      	ldr	r1, [pc, #24]	; (800dfc8 <inc_lock+0x118>)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	011b      	lsls	r3, r3, #4
 800dfb2:	440b      	add	r3, r1
 800dfb4:	330c      	adds	r3, #12
 800dfb6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	3301      	adds	r3, #1
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3714      	adds	r7, #20
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	20000840 	.word	0x20000840

0800dfcc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	607b      	str	r3, [r7, #4]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d825      	bhi.n	800e02c <dec_lock+0x60>
		n = Files[i].ctr;
 800dfe0:	4a17      	ldr	r2, [pc, #92]	; (800e040 <dec_lock+0x74>)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	011b      	lsls	r3, r3, #4
 800dfe6:	4413      	add	r3, r2
 800dfe8:	330c      	adds	r3, #12
 800dfea:	881b      	ldrh	r3, [r3, #0]
 800dfec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dfee:	89fb      	ldrh	r3, [r7, #14]
 800dff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dff4:	d101      	bne.n	800dffa <dec_lock+0x2e>
 800dff6:	2300      	movs	r3, #0
 800dff8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dffa:	89fb      	ldrh	r3, [r7, #14]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d002      	beq.n	800e006 <dec_lock+0x3a>
 800e000:	89fb      	ldrh	r3, [r7, #14]
 800e002:	3b01      	subs	r3, #1
 800e004:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e006:	4a0e      	ldr	r2, [pc, #56]	; (800e040 <dec_lock+0x74>)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	011b      	lsls	r3, r3, #4
 800e00c:	4413      	add	r3, r2
 800e00e:	330c      	adds	r3, #12
 800e010:	89fa      	ldrh	r2, [r7, #14]
 800e012:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e014:	89fb      	ldrh	r3, [r7, #14]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d105      	bne.n	800e026 <dec_lock+0x5a>
 800e01a:	4a09      	ldr	r2, [pc, #36]	; (800e040 <dec_lock+0x74>)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	4413      	add	r3, r2
 800e022:	2200      	movs	r2, #0
 800e024:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e026:	2300      	movs	r3, #0
 800e028:	737b      	strb	r3, [r7, #13]
 800e02a:	e001      	b.n	800e030 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e02c:	2302      	movs	r3, #2
 800e02e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e030:	7b7b      	ldrb	r3, [r7, #13]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3714      	adds	r7, #20
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	20000840 	.word	0x20000840

0800e044 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e04c:	2300      	movs	r3, #0
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	e010      	b.n	800e074 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e052:	4a0d      	ldr	r2, [pc, #52]	; (800e088 <clear_lock+0x44>)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	011b      	lsls	r3, r3, #4
 800e058:	4413      	add	r3, r2
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d105      	bne.n	800e06e <clear_lock+0x2a>
 800e062:	4a09      	ldr	r2, [pc, #36]	; (800e088 <clear_lock+0x44>)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	011b      	lsls	r3, r3, #4
 800e068:	4413      	add	r3, r2
 800e06a:	2200      	movs	r2, #0
 800e06c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3301      	adds	r3, #1
 800e072:	60fb      	str	r3, [r7, #12]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d9eb      	bls.n	800e052 <clear_lock+0xe>
	}
}
 800e07a:	bf00      	nop
 800e07c:	3714      	adds	r7, #20
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	20000840 	.word	0x20000840

0800e08c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e094:	2300      	movs	r3, #0
 800e096:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	78db      	ldrb	r3, [r3, #3]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d034      	beq.n	800e10a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7858      	ldrb	r0, [r3, #1]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	f7ff fd40 	bl	800db38 <disk_write>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	73fb      	strb	r3, [r7, #15]
 800e0c2:	e022      	b.n	800e10a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	1ad2      	subs	r2, r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	69db      	ldr	r3, [r3, #28]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d217      	bcs.n	800e10a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	789b      	ldrb	r3, [r3, #2]
 800e0de:	613b      	str	r3, [r7, #16]
 800e0e0:	e010      	b.n	800e104 <sync_window+0x78>
					wsect += fs->fsize;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	69db      	ldr	r3, [r3, #28]
 800e0e6:	697a      	ldr	r2, [r7, #20]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	7858      	ldrb	r0, [r3, #1]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	697a      	ldr	r2, [r7, #20]
 800e0fa:	f7ff fd1d 	bl	800db38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	3b01      	subs	r3, #1
 800e102:	613b      	str	r3, [r7, #16]
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d8eb      	bhi.n	800e0e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3718      	adds	r7, #24
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d01b      	beq.n	800e164 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff ffad 	bl	800e08c <sync_window>
 800e132:	4603      	mov	r3, r0
 800e134:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d113      	bne.n	800e164 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	7858      	ldrb	r0, [r3, #1]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e146:	2301      	movs	r3, #1
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	f7ff fcd5 	bl	800daf8 <disk_read>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d004      	beq.n	800e15e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e158:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e15a:	2301      	movs	r3, #1
 800e15c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	683a      	ldr	r2, [r7, #0]
 800e162:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e164:	7bfb      	ldrb	r3, [r7, #15]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
	...

0800e170 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7ff ff87 	bl	800e08c <sync_window>
 800e17e:	4603      	mov	r3, r0
 800e180:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e182:	7bfb      	ldrb	r3, [r7, #15]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d159      	bne.n	800e23c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b03      	cmp	r3, #3
 800e18e:	d149      	bne.n	800e224 <sync_fs+0xb4>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	791b      	ldrb	r3, [r3, #4]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d145      	bne.n	800e224 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	899b      	ldrh	r3, [r3, #12]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	f7ff fda8 	bl	800dcfa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3334      	adds	r3, #52	; 0x34
 800e1ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1b2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7ff fd37 	bl	800dc2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	3334      	adds	r3, #52	; 0x34
 800e1c0:	4921      	ldr	r1, [pc, #132]	; (800e248 <sync_fs+0xd8>)
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff fd4c 	bl	800dc60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3334      	adds	r3, #52	; 0x34
 800e1cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e1d0:	491e      	ldr	r1, [pc, #120]	; (800e24c <sync_fs+0xdc>)
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7ff fd44 	bl	800dc60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	3334      	adds	r3, #52	; 0x34
 800e1dc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7ff fd3a 	bl	800dc60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3334      	adds	r3, #52	; 0x34
 800e1f0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	f7ff fd30 	bl	800dc60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a1b      	ldr	r3, [r3, #32]
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	7858      	ldrb	r0, [r3, #1]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e218:	2301      	movs	r3, #1
 800e21a:	f7ff fc8d 	bl	800db38 <disk_write>
			fs->fsi_flag = 0;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	785b      	ldrb	r3, [r3, #1]
 800e228:	2200      	movs	r2, #0
 800e22a:	2100      	movs	r1, #0
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7ff fca3 	bl	800db78 <disk_ioctl>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <sync_fs+0xcc>
 800e238:	2301      	movs	r3, #1
 800e23a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	41615252 	.word	0x41615252
 800e24c:	61417272 	.word	0x61417272

0800e250 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e250:	b480      	push	{r7}
 800e252:	b083      	sub	sp, #12
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	3b02      	subs	r3, #2
 800e25e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	3b02      	subs	r3, #2
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d301      	bcc.n	800e270 <clust2sect+0x20>
 800e26c:	2300      	movs	r3, #0
 800e26e:	e008      	b.n	800e282 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	895b      	ldrh	r3, [r3, #10]
 800e274:	461a      	mov	r2, r3
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	fb03 f202 	mul.w	r2, r3, r2
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	4413      	add	r3, r2
}
 800e282:	4618      	mov	r0, r3
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b086      	sub	sp, #24
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d904      	bls.n	800e2ae <get_fat+0x20>
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	699b      	ldr	r3, [r3, #24]
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d302      	bcc.n	800e2b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	617b      	str	r3, [r7, #20]
 800e2b2:	e0b7      	b.n	800e424 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	2b02      	cmp	r3, #2
 800e2c0:	d05a      	beq.n	800e378 <get_fat+0xea>
 800e2c2:	2b03      	cmp	r3, #3
 800e2c4:	d07d      	beq.n	800e3c2 <get_fat+0x134>
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	f040 80a2 	bne.w	800e410 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	085b      	lsrs	r3, r3, #1
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	899b      	ldrh	r3, [r3, #12]
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2ea:	4413      	add	r3, r2
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6938      	ldr	r0, [r7, #16]
 800e2f0:	f7ff ff10 	bl	800e114 <move_window>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f040 808d 	bne.w	800e416 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	1c5a      	adds	r2, r3, #1
 800e300:	60fa      	str	r2, [r7, #12]
 800e302:	693a      	ldr	r2, [r7, #16]
 800e304:	8992      	ldrh	r2, [r2, #12]
 800e306:	fbb3 f1f2 	udiv	r1, r3, r2
 800e30a:	fb02 f201 	mul.w	r2, r2, r1
 800e30e:	1a9b      	subs	r3, r3, r2
 800e310:	693a      	ldr	r2, [r7, #16]
 800e312:	4413      	add	r3, r2
 800e314:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e318:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	899b      	ldrh	r3, [r3, #12]
 800e322:	4619      	mov	r1, r3
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	fbb3 f3f1 	udiv	r3, r3, r1
 800e32a:	4413      	add	r3, r2
 800e32c:	4619      	mov	r1, r3
 800e32e:	6938      	ldr	r0, [r7, #16]
 800e330:	f7ff fef0 	bl	800e114 <move_window>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d16f      	bne.n	800e41a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	899b      	ldrh	r3, [r3, #12]
 800e33e:	461a      	mov	r2, r3
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	fbb3 f1f2 	udiv	r1, r3, r2
 800e346:	fb02 f201 	mul.w	r2, r2, r1
 800e34a:	1a9b      	subs	r3, r3, r2
 800e34c:	693a      	ldr	r2, [r7, #16]
 800e34e:	4413      	add	r3, r2
 800e350:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e354:	021b      	lsls	r3, r3, #8
 800e356:	461a      	mov	r2, r3
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	4313      	orrs	r3, r2
 800e35c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	f003 0301 	and.w	r3, r3, #1
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <get_fat+0xe0>
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	091b      	lsrs	r3, r3, #4
 800e36c:	e002      	b.n	800e374 <get_fat+0xe6>
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e374:	617b      	str	r3, [r7, #20]
			break;
 800e376:	e055      	b.n	800e424 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	899b      	ldrh	r3, [r3, #12]
 800e380:	085b      	lsrs	r3, r3, #1
 800e382:	b29b      	uxth	r3, r3
 800e384:	4619      	mov	r1, r3
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	fbb3 f3f1 	udiv	r3, r3, r1
 800e38c:	4413      	add	r3, r2
 800e38e:	4619      	mov	r1, r3
 800e390:	6938      	ldr	r0, [r7, #16]
 800e392:	f7ff febf 	bl	800e114 <move_window>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d140      	bne.n	800e41e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	8992      	ldrh	r2, [r2, #12]
 800e3aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3ae:	fb02 f200 	mul.w	r2, r2, r0
 800e3b2:	1a9b      	subs	r3, r3, r2
 800e3b4:	440b      	add	r3, r1
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7ff fbfc 	bl	800dbb4 <ld_word>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	617b      	str	r3, [r7, #20]
			break;
 800e3c0:	e030      	b.n	800e424 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	899b      	ldrh	r3, [r3, #12]
 800e3ca:	089b      	lsrs	r3, r3, #2
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3d6:	4413      	add	r3, r2
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6938      	ldr	r0, [r7, #16]
 800e3dc:	f7ff fe9a 	bl	800e114 <move_window>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d11d      	bne.n	800e422 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	8992      	ldrh	r2, [r2, #12]
 800e3f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3f8:	fb02 f200 	mul.w	r2, r2, r0
 800e3fc:	1a9b      	subs	r3, r3, r2
 800e3fe:	440b      	add	r3, r1
 800e400:	4618      	mov	r0, r3
 800e402:	f7ff fbef 	bl	800dbe4 <ld_dword>
 800e406:	4603      	mov	r3, r0
 800e408:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e40c:	617b      	str	r3, [r7, #20]
			break;
 800e40e:	e009      	b.n	800e424 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e410:	2301      	movs	r3, #1
 800e412:	617b      	str	r3, [r7, #20]
 800e414:	e006      	b.n	800e424 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e416:	bf00      	nop
 800e418:	e004      	b.n	800e424 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e41a:	bf00      	nop
 800e41c:	e002      	b.n	800e424 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e41e:	bf00      	nop
 800e420:	e000      	b.n	800e424 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e422:	bf00      	nop
		}
	}

	return val;
 800e424:	697b      	ldr	r3, [r7, #20]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3718      	adds	r7, #24
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e42e:	b590      	push	{r4, r7, lr}
 800e430:	b089      	sub	sp, #36	; 0x24
 800e432:	af00      	add	r7, sp, #0
 800e434:	60f8      	str	r0, [r7, #12]
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e43a:	2302      	movs	r3, #2
 800e43c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b01      	cmp	r3, #1
 800e442:	f240 8106 	bls.w	800e652 <put_fat+0x224>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	68ba      	ldr	r2, [r7, #8]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	f080 8100 	bcs.w	800e652 <put_fat+0x224>
		switch (fs->fs_type) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	2b02      	cmp	r3, #2
 800e458:	f000 8088 	beq.w	800e56c <put_fat+0x13e>
 800e45c:	2b03      	cmp	r3, #3
 800e45e:	f000 80b0 	beq.w	800e5c2 <put_fat+0x194>
 800e462:	2b01      	cmp	r3, #1
 800e464:	f040 80f5 	bne.w	800e652 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	61bb      	str	r3, [r7, #24]
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	085b      	lsrs	r3, r3, #1
 800e470:	69ba      	ldr	r2, [r7, #24]
 800e472:	4413      	add	r3, r2
 800e474:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	899b      	ldrh	r3, [r3, #12]
 800e47e:	4619      	mov	r1, r3
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	fbb3 f3f1 	udiv	r3, r3, r1
 800e486:	4413      	add	r3, r2
 800e488:	4619      	mov	r1, r3
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7ff fe42 	bl	800e114 <move_window>
 800e490:	4603      	mov	r3, r0
 800e492:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e494:	7ffb      	ldrb	r3, [r7, #31]
 800e496:	2b00      	cmp	r3, #0
 800e498:	f040 80d4 	bne.w	800e644 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	1c5a      	adds	r2, r3, #1
 800e4a6:	61ba      	str	r2, [r7, #24]
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	8992      	ldrh	r2, [r2, #12]
 800e4ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800e4b0:	fb02 f200 	mul.w	r2, r2, r0
 800e4b4:	1a9b      	subs	r3, r3, r2
 800e4b6:	440b      	add	r3, r1
 800e4b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	f003 0301 	and.w	r3, r3, #1
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00d      	beq.n	800e4e0 <put_fat+0xb2>
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	b25b      	sxtb	r3, r3
 800e4ca:	f003 030f 	and.w	r3, r3, #15
 800e4ce:	b25a      	sxtb	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	011b      	lsls	r3, r3, #4
 800e4d6:	b25b      	sxtb	r3, r3
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	b25b      	sxtb	r3, r3
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	e001      	b.n	800e4e4 <put_fat+0xb6>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	697a      	ldr	r2, [r7, #20]
 800e4e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	899b      	ldrh	r3, [r3, #12]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4fe:	4413      	add	r3, r2
 800e500:	4619      	mov	r1, r3
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f7ff fe06 	bl	800e114 <move_window>
 800e508:	4603      	mov	r3, r0
 800e50a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e50c:	7ffb      	ldrb	r3, [r7, #31]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f040 809a 	bne.w	800e648 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	899b      	ldrh	r3, [r3, #12]
 800e51e:	461a      	mov	r2, r3
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	fbb3 f0f2 	udiv	r0, r3, r2
 800e526:	fb02 f200 	mul.w	r2, r2, r0
 800e52a:	1a9b      	subs	r3, r3, r2
 800e52c:	440b      	add	r3, r1
 800e52e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	f003 0301 	and.w	r3, r3, #1
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <put_fat+0x114>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	091b      	lsrs	r3, r3, #4
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	e00e      	b.n	800e560 <put_fat+0x132>
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	b25b      	sxtb	r3, r3
 800e548:	f023 030f 	bic.w	r3, r3, #15
 800e54c:	b25a      	sxtb	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	0a1b      	lsrs	r3, r3, #8
 800e552:	b25b      	sxtb	r3, r3
 800e554:	f003 030f 	and.w	r3, r3, #15
 800e558:	b25b      	sxtb	r3, r3
 800e55a:	4313      	orrs	r3, r2
 800e55c:	b25b      	sxtb	r3, r3
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2201      	movs	r2, #1
 800e568:	70da      	strb	r2, [r3, #3]
			break;
 800e56a:	e072      	b.n	800e652 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	899b      	ldrh	r3, [r3, #12]
 800e574:	085b      	lsrs	r3, r3, #1
 800e576:	b29b      	uxth	r3, r3
 800e578:	4619      	mov	r1, r3
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e580:	4413      	add	r3, r2
 800e582:	4619      	mov	r1, r3
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f7ff fdc5 	bl	800e114 <move_window>
 800e58a:	4603      	mov	r3, r0
 800e58c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e58e:	7ffb      	ldrb	r3, [r7, #31]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d15b      	bne.n	800e64c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	005b      	lsls	r3, r3, #1
 800e59e:	68fa      	ldr	r2, [r7, #12]
 800e5a0:	8992      	ldrh	r2, [r2, #12]
 800e5a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5a6:	fb02 f200 	mul.w	r2, r2, r0
 800e5aa:	1a9b      	subs	r3, r3, r2
 800e5ac:	440b      	add	r3, r1
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	b292      	uxth	r2, r2
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7ff fb38 	bl	800dc2a <st_word>
			fs->wflag = 1;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	70da      	strb	r2, [r3, #3]
			break;
 800e5c0:	e047      	b.n	800e652 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	899b      	ldrh	r3, [r3, #12]
 800e5ca:	089b      	lsrs	r3, r3, #2
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5d6:	4413      	add	r3, r2
 800e5d8:	4619      	mov	r1, r3
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f7ff fd9a 	bl	800e114 <move_window>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e5e4:	7ffb      	ldrb	r3, [r7, #31]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d132      	bne.n	800e650 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	8992      	ldrh	r2, [r2, #12]
 800e5fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800e602:	fb02 f200 	mul.w	r2, r2, r0
 800e606:	1a9b      	subs	r3, r3, r2
 800e608:	440b      	add	r3, r1
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff faea 	bl	800dbe4 <ld_dword>
 800e610:	4603      	mov	r3, r0
 800e612:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e616:	4323      	orrs	r3, r4
 800e618:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	8992      	ldrh	r2, [r2, #12]
 800e628:	fbb3 f0f2 	udiv	r0, r3, r2
 800e62c:	fb02 f200 	mul.w	r2, r2, r0
 800e630:	1a9b      	subs	r3, r3, r2
 800e632:	440b      	add	r3, r1
 800e634:	6879      	ldr	r1, [r7, #4]
 800e636:	4618      	mov	r0, r3
 800e638:	f7ff fb12 	bl	800dc60 <st_dword>
			fs->wflag = 1;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2201      	movs	r2, #1
 800e640:	70da      	strb	r2, [r3, #3]
			break;
 800e642:	e006      	b.n	800e652 <put_fat+0x224>
			if (res != FR_OK) break;
 800e644:	bf00      	nop
 800e646:	e004      	b.n	800e652 <put_fat+0x224>
			if (res != FR_OK) break;
 800e648:	bf00      	nop
 800e64a:	e002      	b.n	800e652 <put_fat+0x224>
			if (res != FR_OK) break;
 800e64c:	bf00      	nop
 800e64e:	e000      	b.n	800e652 <put_fat+0x224>
			if (res != FR_OK) break;
 800e650:	bf00      	nop
		}
	}
	return res;
 800e652:	7ffb      	ldrb	r3, [r7, #31]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3724      	adds	r7, #36	; 0x24
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd90      	pop	{r4, r7, pc}

0800e65c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b088      	sub	sp, #32
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d904      	bls.n	800e682 <remove_chain+0x26>
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d301      	bcc.n	800e686 <remove_chain+0x2a>
 800e682:	2302      	movs	r3, #2
 800e684:	e04b      	b.n	800e71e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00c      	beq.n	800e6a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e68c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e690:	6879      	ldr	r1, [r7, #4]
 800e692:	69b8      	ldr	r0, [r7, #24]
 800e694:	f7ff fecb 	bl	800e42e <put_fat>
 800e698:	4603      	mov	r3, r0
 800e69a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e69c:	7ffb      	ldrb	r3, [r7, #31]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <remove_chain+0x4a>
 800e6a2:	7ffb      	ldrb	r3, [r7, #31]
 800e6a4:	e03b      	b.n	800e71e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e6a6:	68b9      	ldr	r1, [r7, #8]
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7ff fdf0 	bl	800e28e <get_fat>
 800e6ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d031      	beq.n	800e71a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d101      	bne.n	800e6c0 <remove_chain+0x64>
 800e6bc:	2302      	movs	r3, #2
 800e6be:	e02e      	b.n	800e71e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6c6:	d101      	bne.n	800e6cc <remove_chain+0x70>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e028      	b.n	800e71e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	69b8      	ldr	r0, [r7, #24]
 800e6d2:	f7ff feac 	bl	800e42e <put_fat>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e6da:	7ffb      	ldrb	r3, [r7, #31]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <remove_chain+0x88>
 800e6e0:	7ffb      	ldrb	r3, [r7, #31]
 800e6e2:	e01c      	b.n	800e71e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	695a      	ldr	r2, [r3, #20]
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	3b02      	subs	r3, #2
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d20b      	bcs.n	800e70a <remove_chain+0xae>
			fs->free_clst++;
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	791b      	ldrb	r3, [r3, #4]
 800e700:	f043 0301 	orr.w	r3, r3, #1
 800e704:	b2da      	uxtb	r2, r3
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	699b      	ldr	r3, [r3, #24]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	429a      	cmp	r2, r3
 800e716:	d3c6      	bcc.n	800e6a6 <remove_chain+0x4a>
 800e718:	e000      	b.n	800e71c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e71a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3720      	adds	r7, #32
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e726:	b580      	push	{r7, lr}
 800e728:	b088      	sub	sp, #32
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10d      	bne.n	800e758 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	691b      	ldr	r3, [r3, #16]
 800e740:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d004      	beq.n	800e752 <create_chain+0x2c>
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	69ba      	ldr	r2, [r7, #24]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d31b      	bcc.n	800e78a <create_chain+0x64>
 800e752:	2301      	movs	r3, #1
 800e754:	61bb      	str	r3, [r7, #24]
 800e756:	e018      	b.n	800e78a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff fd97 	bl	800e28e <get_fat>
 800e760:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d801      	bhi.n	800e76c <create_chain+0x46>
 800e768:	2301      	movs	r3, #1
 800e76a:	e070      	b.n	800e84e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e772:	d101      	bne.n	800e778 <create_chain+0x52>
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	e06a      	b.n	800e84e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d201      	bcs.n	800e786 <create_chain+0x60>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	e063      	b.n	800e84e <create_chain+0x128>
		scl = clst;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	3301      	adds	r3, #1
 800e792:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	69fa      	ldr	r2, [r7, #28]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d307      	bcc.n	800e7ae <create_chain+0x88>
				ncl = 2;
 800e79e:	2302      	movs	r3, #2
 800e7a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e7a2:	69fa      	ldr	r2, [r7, #28]
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d901      	bls.n	800e7ae <create_chain+0x88>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	e04f      	b.n	800e84e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e7ae:	69f9      	ldr	r1, [r7, #28]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff fd6c 	bl	800e28e <get_fat>
 800e7b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00e      	beq.n	800e7dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d003      	beq.n	800e7cc <create_chain+0xa6>
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7ca:	d101      	bne.n	800e7d0 <create_chain+0xaa>
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	e03e      	b.n	800e84e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e7d0:	69fa      	ldr	r2, [r7, #28]
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d1da      	bne.n	800e78e <create_chain+0x68>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	e038      	b.n	800e84e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e7dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7e2:	69f9      	ldr	r1, [r7, #28]
 800e7e4:	6938      	ldr	r0, [r7, #16]
 800e7e6:	f7ff fe22 	bl	800e42e <put_fat>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e7ee:	7dfb      	ldrb	r3, [r7, #23]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d109      	bne.n	800e808 <create_chain+0xe2>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d006      	beq.n	800e808 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e7fa:	69fa      	ldr	r2, [r7, #28]
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	6938      	ldr	r0, [r7, #16]
 800e800:	f7ff fe15 	bl	800e42e <put_fat>
 800e804:	4603      	mov	r3, r0
 800e806:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e808:	7dfb      	ldrb	r3, [r7, #23]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d116      	bne.n	800e83c <create_chain+0x116>
		fs->last_clst = ncl;
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	69fa      	ldr	r2, [r7, #28]
 800e812:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	695a      	ldr	r2, [r3, #20]
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	3b02      	subs	r3, #2
 800e81e:	429a      	cmp	r2, r3
 800e820:	d804      	bhi.n	800e82c <create_chain+0x106>
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	1e5a      	subs	r2, r3, #1
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	791b      	ldrb	r3, [r3, #4]
 800e830:	f043 0301 	orr.w	r3, r3, #1
 800e834:	b2da      	uxtb	r2, r3
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	711a      	strb	r2, [r3, #4]
 800e83a:	e007      	b.n	800e84c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d102      	bne.n	800e848 <create_chain+0x122>
 800e842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e846:	e000      	b.n	800e84a <create_chain+0x124>
 800e848:	2301      	movs	r3, #1
 800e84a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e84c:	69fb      	ldr	r3, [r7, #28]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3720      	adds	r7, #32
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e856:	b480      	push	{r7}
 800e858:	b087      	sub	sp, #28
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e86a:	3304      	adds	r3, #4
 800e86c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	899b      	ldrh	r3, [r3, #12]
 800e872:	461a      	mov	r2, r3
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	fbb3 f3f2 	udiv	r3, r3, r2
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	8952      	ldrh	r2, [r2, #10]
 800e87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e882:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	1d1a      	adds	r2, r3, #4
 800e888:	613a      	str	r2, [r7, #16]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <clmt_clust+0x42>
 800e894:	2300      	movs	r3, #0
 800e896:	e010      	b.n	800e8ba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e898:	697a      	ldr	r2, [r7, #20]
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d307      	bcc.n	800e8b0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e8a0:	697a      	ldr	r2, [r7, #20]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	1ad3      	subs	r3, r2, r3
 800e8a6:	617b      	str	r3, [r7, #20]
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e8ae:	e7e9      	b.n	800e884 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e8b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	4413      	add	r3, r2
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	371c      	adds	r7, #28
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr

0800e8c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b086      	sub	sp, #24
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
 800e8ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8dc:	d204      	bcs.n	800e8e8 <dir_sdi+0x22>
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	f003 031f 	and.w	r3, r3, #31
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <dir_sdi+0x26>
		return FR_INT_ERR;
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	e071      	b.n	800e9d0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <dir_sdi+0x46>
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	2b02      	cmp	r3, #2
 800e904:	d902      	bls.n	800e90c <dir_sdi+0x46>
		clst = fs->dirbase;
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10c      	bne.n	800e92c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	095b      	lsrs	r3, r3, #5
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	8912      	ldrh	r2, [r2, #8]
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d301      	bcc.n	800e922 <dir_sdi+0x5c>
 800e91e:	2302      	movs	r3, #2
 800e920:	e056      	b.n	800e9d0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	61da      	str	r2, [r3, #28]
 800e92a:	e02d      	b.n	800e988 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	895b      	ldrh	r3, [r3, #10]
 800e930:	461a      	mov	r2, r3
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	899b      	ldrh	r3, [r3, #12]
 800e936:	fb03 f302 	mul.w	r3, r3, r2
 800e93a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e93c:	e019      	b.n	800e972 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6979      	ldr	r1, [r7, #20]
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fca3 	bl	800e28e <get_fat>
 800e948:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e950:	d101      	bne.n	800e956 <dir_sdi+0x90>
 800e952:	2301      	movs	r3, #1
 800e954:	e03c      	b.n	800e9d0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d904      	bls.n	800e966 <dir_sdi+0xa0>
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	429a      	cmp	r2, r3
 800e964:	d301      	bcc.n	800e96a <dir_sdi+0xa4>
 800e966:	2302      	movs	r3, #2
 800e968:	e032      	b.n	800e9d0 <dir_sdi+0x10a>
			ofs -= csz;
 800e96a:	683a      	ldr	r2, [r7, #0]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	429a      	cmp	r2, r3
 800e978:	d2e1      	bcs.n	800e93e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e97a:	6979      	ldr	r1, [r7, #20]
 800e97c:	6938      	ldr	r0, [r7, #16]
 800e97e:	f7ff fc67 	bl	800e250 <clust2sect>
 800e982:	4602      	mov	r2, r0
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	697a      	ldr	r2, [r7, #20]
 800e98c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	69db      	ldr	r3, [r3, #28]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <dir_sdi+0xd4>
 800e996:	2302      	movs	r3, #2
 800e998:	e01a      	b.n	800e9d0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	69da      	ldr	r2, [r3, #28]
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	899b      	ldrh	r3, [r3, #12]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9aa:	441a      	add	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	899b      	ldrh	r3, [r3, #12]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9c2:	fb02 f200 	mul.w	r2, r2, r0
 800e9c6:	1a9b      	subs	r3, r3, r2
 800e9c8:	18ca      	adds	r2, r1, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3718      	adds	r7, #24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b086      	sub	sp, #24
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	695b      	ldr	r3, [r3, #20]
 800e9ec:	3320      	adds	r3, #32
 800e9ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	69db      	ldr	r3, [r3, #28]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d003      	beq.n	800ea00 <dir_next+0x28>
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e9fe:	d301      	bcc.n	800ea04 <dir_next+0x2c>
 800ea00:	2304      	movs	r3, #4
 800ea02:	e0bb      	b.n	800eb7c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	899b      	ldrh	r3, [r3, #12]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea10:	fb02 f201 	mul.w	r2, r2, r1
 800ea14:	1a9b      	subs	r3, r3, r2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f040 809d 	bne.w	800eb56 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	699b      	ldr	r3, [r3, #24]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10b      	bne.n	800ea46 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	095b      	lsrs	r3, r3, #5
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	8912      	ldrh	r2, [r2, #8]
 800ea36:	4293      	cmp	r3, r2
 800ea38:	f0c0 808d 	bcc.w	800eb56 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	61da      	str	r2, [r3, #28]
 800ea42:	2304      	movs	r3, #4
 800ea44:	e09a      	b.n	800eb7c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	899b      	ldrh	r3, [r3, #12]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	8952      	ldrh	r2, [r2, #10]
 800ea56:	3a01      	subs	r2, #1
 800ea58:	4013      	ands	r3, r2
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d17b      	bne.n	800eb56 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	699b      	ldr	r3, [r3, #24]
 800ea64:	4619      	mov	r1, r3
 800ea66:	4610      	mov	r0, r2
 800ea68:	f7ff fc11 	bl	800e28e <get_fat>
 800ea6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d801      	bhi.n	800ea78 <dir_next+0xa0>
 800ea74:	2302      	movs	r3, #2
 800ea76:	e081      	b.n	800eb7c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea7e:	d101      	bne.n	800ea84 <dir_next+0xac>
 800ea80:	2301      	movs	r3, #1
 800ea82:	e07b      	b.n	800eb7c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d359      	bcc.n	800eb42 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d104      	bne.n	800ea9e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	61da      	str	r2, [r3, #28]
 800ea9a:	2304      	movs	r3, #4
 800ea9c:	e06e      	b.n	800eb7c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4610      	mov	r0, r2
 800eaa8:	f7ff fe3d 	bl	800e726 <create_chain>
 800eaac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <dir_next+0xe0>
 800eab4:	2307      	movs	r3, #7
 800eab6:	e061      	b.n	800eb7c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d101      	bne.n	800eac2 <dir_next+0xea>
 800eabe:	2302      	movs	r3, #2
 800eac0:	e05c      	b.n	800eb7c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eac8:	d101      	bne.n	800eace <dir_next+0xf6>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e056      	b.n	800eb7c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff fadc 	bl	800e08c <sync_window>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <dir_next+0x106>
 800eada:	2301      	movs	r3, #1
 800eadc:	e04e      	b.n	800eb7c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	899b      	ldrh	r3, [r3, #12]
 800eae8:	461a      	mov	r2, r3
 800eaea:	2100      	movs	r1, #0
 800eaec:	f7ff f905 	bl	800dcfa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	613b      	str	r3, [r7, #16]
 800eaf4:	6979      	ldr	r1, [r7, #20]
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7ff fbaa 	bl	800e250 <clust2sect>
 800eafc:	4602      	mov	r2, r0
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	631a      	str	r2, [r3, #48]	; 0x30
 800eb02:	e012      	b.n	800eb2a <dir_next+0x152>
						fs->wflag = 1;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2201      	movs	r2, #1
 800eb08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f7ff fabe 	bl	800e08c <sync_window>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <dir_next+0x142>
 800eb16:	2301      	movs	r3, #1
 800eb18:	e030      	b.n	800eb7c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	613b      	str	r3, [r7, #16]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb24:	1c5a      	adds	r2, r3, #1
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	631a      	str	r2, [r3, #48]	; 0x30
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	895b      	ldrh	r3, [r3, #10]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d3e6      	bcc.n	800eb04 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	1ad2      	subs	r2, r2, r3
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	697a      	ldr	r2, [r7, #20]
 800eb46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eb48:	6979      	ldr	r1, [r7, #20]
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f7ff fb80 	bl	800e250 <clust2sect>
 800eb50:	4602      	mov	r2, r0
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	899b      	ldrh	r3, [r3, #12]
 800eb66:	461a      	mov	r2, r3
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb6e:	fb02 f200 	mul.w	r2, r2, r0
 800eb72:	1a9b      	subs	r3, r3, r2
 800eb74:	18ca      	adds	r2, r1, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800eb94:	2100      	movs	r1, #0
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff fe95 	bl	800e8c6 <dir_sdi>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eba0:	7dfb      	ldrb	r3, [r7, #23]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d12b      	bne.n	800ebfe <dir_alloc+0x7a>
		n = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	4619      	mov	r1, r3
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f7ff faaf 	bl	800e114 <move_window>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ebba:	7dfb      	ldrb	r3, [r7, #23]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d11d      	bne.n	800ebfc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	2be5      	cmp	r3, #229	; 0xe5
 800ebc8:	d004      	beq.n	800ebd4 <dir_alloc+0x50>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d107      	bne.n	800ebe4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	613b      	str	r3, [r7, #16]
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d102      	bne.n	800ebe8 <dir_alloc+0x64>
 800ebe2:	e00c      	b.n	800ebfe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ebe8:	2101      	movs	r1, #1
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7ff fef4 	bl	800e9d8 <dir_next>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ebf4:	7dfb      	ldrb	r3, [r7, #23]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d0d7      	beq.n	800ebaa <dir_alloc+0x26>
 800ebfa:	e000      	b.n	800ebfe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ebfc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	2b04      	cmp	r3, #4
 800ec02:	d101      	bne.n	800ec08 <dir_alloc+0x84>
 800ec04:	2307      	movs	r3, #7
 800ec06:	75fb      	strb	r3, [r7, #23]
	return res;
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b084      	sub	sp, #16
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
 800ec1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	331a      	adds	r3, #26
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7fe ffc7 	bl	800dbb4 <ld_word>
 800ec26:	4603      	mov	r3, r0
 800ec28:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	d109      	bne.n	800ec46 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	3314      	adds	r3, #20
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe ffbc 	bl	800dbb4 <ld_word>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	041b      	lsls	r3, r3, #16
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	4313      	orrs	r3, r2
 800ec44:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ec46:	68fb      	ldr	r3, [r7, #12]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	331a      	adds	r3, #26
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	b292      	uxth	r2, r2
 800ec64:	4611      	mov	r1, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fe ffdf 	bl	800dc2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	d109      	bne.n	800ec88 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	f103 0214 	add.w	r2, r3, #20
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	0c1b      	lsrs	r3, r3, #16
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	4619      	mov	r1, r3
 800ec82:	4610      	mov	r0, r2
 800ec84:	f7fe ffd1 	bl	800dc2a <st_word>
	}
}
 800ec88:	bf00      	nop
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ec9a:	2304      	movs	r3, #4
 800ec9c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800eca4:	e03c      	b.n	800ed20 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	69db      	ldr	r3, [r3, #28]
 800ecaa:	4619      	mov	r1, r3
 800ecac:	6938      	ldr	r0, [r7, #16]
 800ecae:	f7ff fa31 	bl	800e114 <move_window>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d136      	bne.n	800ed2a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a1b      	ldr	r3, [r3, #32]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800ecc4:	7bfb      	ldrb	r3, [r7, #15]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d102      	bne.n	800ecd0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ecca:	2304      	movs	r3, #4
 800eccc:	75fb      	strb	r3, [r7, #23]
 800ecce:	e031      	b.n	800ed34 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a1b      	ldr	r3, [r3, #32]
 800ecd4:	330b      	adds	r3, #11
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecdc:	73bb      	strb	r3, [r7, #14]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	7bba      	ldrb	r2, [r7, #14]
 800ece2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	2be5      	cmp	r3, #229	; 0xe5
 800ece8:	d011      	beq.n	800ed0e <dir_read+0x7e>
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	2b2e      	cmp	r3, #46	; 0x2e
 800ecee:	d00e      	beq.n	800ed0e <dir_read+0x7e>
 800ecf0:	7bbb      	ldrb	r3, [r7, #14]
 800ecf2:	2b0f      	cmp	r3, #15
 800ecf4:	d00b      	beq.n	800ed0e <dir_read+0x7e>
 800ecf6:	7bbb      	ldrb	r3, [r7, #14]
 800ecf8:	f023 0320 	bic.w	r3, r3, #32
 800ecfc:	2b08      	cmp	r3, #8
 800ecfe:	bf0c      	ite	eq
 800ed00:	2301      	moveq	r3, #1
 800ed02:	2300      	movne	r3, #0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	461a      	mov	r2, r3
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d00f      	beq.n	800ed2e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ed0e:	2100      	movs	r1, #0
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7ff fe61 	bl	800e9d8 <dir_next>
 800ed16:	4603      	mov	r3, r0
 800ed18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ed1a:	7dfb      	ldrb	r3, [r7, #23]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d108      	bne.n	800ed32 <dir_read+0xa2>
	while (dp->sect) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	69db      	ldr	r3, [r3, #28]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d1be      	bne.n	800eca6 <dir_read+0x16>
 800ed28:	e004      	b.n	800ed34 <dir_read+0xa4>
		if (res != FR_OK) break;
 800ed2a:	bf00      	nop
 800ed2c:	e002      	b.n	800ed34 <dir_read+0xa4>
				break;
 800ed2e:	bf00      	nop
 800ed30:	e000      	b.n	800ed34 <dir_read+0xa4>
		if (res != FR_OK) break;
 800ed32:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <dir_read+0xb0>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	61da      	str	r2, [r3, #28]
	return res;
 800ed40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3718      	adds	r7, #24
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b086      	sub	sp, #24
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ed58:	2100      	movs	r1, #0
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7ff fdb3 	bl	800e8c6 <dir_sdi>
 800ed60:	4603      	mov	r3, r0
 800ed62:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ed64:	7dfb      	ldrb	r3, [r7, #23]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d001      	beq.n	800ed6e <dir_find+0x24>
 800ed6a:	7dfb      	ldrb	r3, [r7, #23]
 800ed6c:	e03e      	b.n	800edec <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	69db      	ldr	r3, [r3, #28]
 800ed72:	4619      	mov	r1, r3
 800ed74:	6938      	ldr	r0, [r7, #16]
 800ed76:	f7ff f9cd 	bl	800e114 <move_window>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d12f      	bne.n	800ede4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a1b      	ldr	r3, [r3, #32]
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ed8c:	7bfb      	ldrb	r3, [r7, #15]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d102      	bne.n	800ed98 <dir_find+0x4e>
 800ed92:	2304      	movs	r3, #4
 800ed94:	75fb      	strb	r3, [r7, #23]
 800ed96:	e028      	b.n	800edea <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6a1b      	ldr	r3, [r3, #32]
 800ed9c:	330b      	adds	r3, #11
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eda4:	b2da      	uxtb	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	330b      	adds	r3, #11
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	f003 0308 	and.w	r3, r3, #8
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d10a      	bne.n	800edd0 <dir_find+0x86>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a18      	ldr	r0, [r3, #32]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	3324      	adds	r3, #36	; 0x24
 800edc2:	220b      	movs	r2, #11
 800edc4:	4619      	mov	r1, r3
 800edc6:	f7fe ffb2 	bl	800dd2e <mem_cmp>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00b      	beq.n	800ede8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800edd0:	2100      	movs	r1, #0
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7ff fe00 	bl	800e9d8 <dir_next>
 800edd8:	4603      	mov	r3, r0
 800edda:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eddc:	7dfb      	ldrb	r3, [r7, #23]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d0c5      	beq.n	800ed6e <dir_find+0x24>
 800ede2:	e002      	b.n	800edea <dir_find+0xa0>
		if (res != FR_OK) break;
 800ede4:	bf00      	nop
 800ede6:	e000      	b.n	800edea <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ede8:	bf00      	nop

	return res;
 800edea:	7dfb      	ldrb	r3, [r7, #23]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3718      	adds	r7, #24
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ee02:	2101      	movs	r1, #1
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7ff febd 	bl	800eb84 <dir_alloc>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ee0e:	7bfb      	ldrb	r3, [r7, #15]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d11c      	bne.n	800ee4e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	69db      	ldr	r3, [r3, #28]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	68b8      	ldr	r0, [r7, #8]
 800ee1c:	f7ff f97a 	bl	800e114 <move_window>
 800ee20:	4603      	mov	r3, r0
 800ee22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ee24:	7bfb      	ldrb	r3, [r7, #15]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d111      	bne.n	800ee4e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	2220      	movs	r2, #32
 800ee30:	2100      	movs	r1, #0
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fe ff61 	bl	800dcfa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a18      	ldr	r0, [r3, #32]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3324      	adds	r3, #36	; 0x24
 800ee40:	220b      	movs	r2, #11
 800ee42:	4619      	mov	r1, r3
 800ee44:	f7fe ff38 	bl	800dcb8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	2200      	movs	r2, #0
 800ee66:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d04e      	beq.n	800ef0e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ee70:	2300      	movs	r3, #0
 800ee72:	613b      	str	r3, [r7, #16]
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ee78:	e021      	b.n	800eebe <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a1a      	ldr	r2, [r3, #32]
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	1c59      	adds	r1, r3, #1
 800ee82:	6179      	str	r1, [r7, #20]
 800ee84:	4413      	add	r3, r2
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
 800ee8c:	2b20      	cmp	r3, #32
 800ee8e:	d100      	bne.n	800ee92 <get_fileinfo+0x3a>
 800ee90:	e015      	b.n	800eebe <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	2b05      	cmp	r3, #5
 800ee96:	d101      	bne.n	800ee9c <get_fileinfo+0x44>
 800ee98:	23e5      	movs	r3, #229	; 0xe5
 800ee9a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2b09      	cmp	r3, #9
 800eea0:	d106      	bne.n	800eeb0 <get_fileinfo+0x58>
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	1c5a      	adds	r2, r3, #1
 800eea6:	613a      	str	r2, [r7, #16]
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	4413      	add	r3, r2
 800eeac:	222e      	movs	r2, #46	; 0x2e
 800eeae:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	1c5a      	adds	r2, r3, #1
 800eeb4:	613a      	str	r2, [r7, #16]
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	4413      	add	r3, r2
 800eeba:	7bfa      	ldrb	r2, [r7, #15]
 800eebc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	2b0a      	cmp	r3, #10
 800eec2:	d9da      	bls.n	800ee7a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800eec4:	683a      	ldr	r2, [r7, #0]
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	4413      	add	r3, r2
 800eeca:	3309      	adds	r3, #9
 800eecc:	2200      	movs	r2, #0
 800eece:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6a1b      	ldr	r3, [r3, #32]
 800eed4:	7ada      	ldrb	r2, [r3, #11]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	331c      	adds	r3, #28
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fe fe7f 	bl	800dbe4 <ld_dword>
 800eee6:	4602      	mov	r2, r0
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a1b      	ldr	r3, [r3, #32]
 800eef0:	3316      	adds	r3, #22
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fe fe76 	bl	800dbe4 <ld_dword>
 800eef8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	80da      	strh	r2, [r3, #6]
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	0c1b      	lsrs	r3, r3, #16
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	809a      	strh	r2, [r3, #4]
 800ef0c:	e000      	b.n	800ef10 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ef0e:	bf00      	nop
}
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
	...

0800ef18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b088      	sub	sp, #32
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	60fb      	str	r3, [r7, #12]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3324      	adds	r3, #36	; 0x24
 800ef2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ef2e:	220b      	movs	r2, #11
 800ef30:	2120      	movs	r1, #32
 800ef32:	68b8      	ldr	r0, [r7, #8]
 800ef34:	f7fe fee1 	bl	800dcfa <mem_set>
	si = i = 0; ni = 8;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	613b      	str	r3, [r7, #16]
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	617b      	str	r3, [r7, #20]
 800ef40:	2308      	movs	r3, #8
 800ef42:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	1c5a      	adds	r2, r3, #1
 800ef48:	617a      	str	r2, [r7, #20]
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ef52:	7ffb      	ldrb	r3, [r7, #31]
 800ef54:	2b20      	cmp	r3, #32
 800ef56:	d94e      	bls.n	800eff6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ef58:	7ffb      	ldrb	r3, [r7, #31]
 800ef5a:	2b2f      	cmp	r3, #47	; 0x2f
 800ef5c:	d006      	beq.n	800ef6c <create_name+0x54>
 800ef5e:	7ffb      	ldrb	r3, [r7, #31]
 800ef60:	2b5c      	cmp	r3, #92	; 0x5c
 800ef62:	d110      	bne.n	800ef86 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef64:	e002      	b.n	800ef6c <create_name+0x54>
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	617b      	str	r3, [r7, #20]
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	4413      	add	r3, r2
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b2f      	cmp	r3, #47	; 0x2f
 800ef76:	d0f6      	beq.n	800ef66 <create_name+0x4e>
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	2b5c      	cmp	r3, #92	; 0x5c
 800ef82:	d0f0      	beq.n	800ef66 <create_name+0x4e>
			break;
 800ef84:	e038      	b.n	800eff8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ef86:	7ffb      	ldrb	r3, [r7, #31]
 800ef88:	2b2e      	cmp	r3, #46	; 0x2e
 800ef8a:	d003      	beq.n	800ef94 <create_name+0x7c>
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d30c      	bcc.n	800efae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	2b0b      	cmp	r3, #11
 800ef98:	d002      	beq.n	800efa0 <create_name+0x88>
 800ef9a:	7ffb      	ldrb	r3, [r7, #31]
 800ef9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef9e:	d001      	beq.n	800efa4 <create_name+0x8c>
 800efa0:	2306      	movs	r3, #6
 800efa2:	e044      	b.n	800f02e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800efa4:	2308      	movs	r3, #8
 800efa6:	613b      	str	r3, [r7, #16]
 800efa8:	230b      	movs	r3, #11
 800efaa:	61bb      	str	r3, [r7, #24]
			continue;
 800efac:	e022      	b.n	800eff4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800efae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	da04      	bge.n	800efc0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800efb6:	7ffb      	ldrb	r3, [r7, #31]
 800efb8:	3b80      	subs	r3, #128	; 0x80
 800efba:	4a1f      	ldr	r2, [pc, #124]	; (800f038 <create_name+0x120>)
 800efbc:	5cd3      	ldrb	r3, [r2, r3]
 800efbe:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800efc0:	7ffb      	ldrb	r3, [r7, #31]
 800efc2:	4619      	mov	r1, r3
 800efc4:	481d      	ldr	r0, [pc, #116]	; (800f03c <create_name+0x124>)
 800efc6:	f7fe fed9 	bl	800dd7c <chk_chr>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d001      	beq.n	800efd4 <create_name+0xbc>
 800efd0:	2306      	movs	r3, #6
 800efd2:	e02c      	b.n	800f02e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800efd4:	7ffb      	ldrb	r3, [r7, #31]
 800efd6:	2b60      	cmp	r3, #96	; 0x60
 800efd8:	d905      	bls.n	800efe6 <create_name+0xce>
 800efda:	7ffb      	ldrb	r3, [r7, #31]
 800efdc:	2b7a      	cmp	r3, #122	; 0x7a
 800efde:	d802      	bhi.n	800efe6 <create_name+0xce>
 800efe0:	7ffb      	ldrb	r3, [r7, #31]
 800efe2:	3b20      	subs	r3, #32
 800efe4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	613a      	str	r2, [r7, #16]
 800efec:	68ba      	ldr	r2, [r7, #8]
 800efee:	4413      	add	r3, r2
 800eff0:	7ffa      	ldrb	r2, [r7, #31]
 800eff2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800eff4:	e7a6      	b.n	800ef44 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eff6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	441a      	add	r2, r3
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d101      	bne.n	800f00c <create_name+0xf4>
 800f008:	2306      	movs	r3, #6
 800f00a:	e010      	b.n	800f02e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2be5      	cmp	r3, #229	; 0xe5
 800f012:	d102      	bne.n	800f01a <create_name+0x102>
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	2205      	movs	r2, #5
 800f018:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f01a:	7ffb      	ldrb	r3, [r7, #31]
 800f01c:	2b20      	cmp	r3, #32
 800f01e:	d801      	bhi.n	800f024 <create_name+0x10c>
 800f020:	2204      	movs	r2, #4
 800f022:	e000      	b.n	800f026 <create_name+0x10e>
 800f024:	2200      	movs	r2, #0
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	330b      	adds	r3, #11
 800f02a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f02c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3720      	adds	r7, #32
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	08015b08 	.word	0x08015b08
 800f03c:	08015a90 	.word	0x08015a90

0800f040 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f054:	e002      	b.n	800f05c <follow_path+0x1c>
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	3301      	adds	r3, #1
 800f05a:	603b      	str	r3, [r7, #0]
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b2f      	cmp	r3, #47	; 0x2f
 800f062:	d0f8      	beq.n	800f056 <follow_path+0x16>
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	2b5c      	cmp	r3, #92	; 0x5c
 800f06a:	d0f4      	beq.n	800f056 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	2200      	movs	r2, #0
 800f070:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	2b1f      	cmp	r3, #31
 800f078:	d80a      	bhi.n	800f090 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2280      	movs	r2, #128	; 0x80
 800f07e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f082:	2100      	movs	r1, #0
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff fc1e 	bl	800e8c6 <dir_sdi>
 800f08a:	4603      	mov	r3, r0
 800f08c:	75fb      	strb	r3, [r7, #23]
 800f08e:	e048      	b.n	800f122 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f090:	463b      	mov	r3, r7
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7ff ff3f 	bl	800ef18 <create_name>
 800f09a:	4603      	mov	r3, r0
 800f09c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f09e:	7dfb      	ldrb	r3, [r7, #23]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d139      	bne.n	800f118 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f7ff fe50 	bl	800ed4a <dir_find>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f0b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00a      	beq.n	800f0d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f0bc:	7dfb      	ldrb	r3, [r7, #23]
 800f0be:	2b04      	cmp	r3, #4
 800f0c0:	d12c      	bne.n	800f11c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f0c2:	7afb      	ldrb	r3, [r7, #11]
 800f0c4:	f003 0304 	and.w	r3, r3, #4
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d127      	bne.n	800f11c <follow_path+0xdc>
 800f0cc:	2305      	movs	r3, #5
 800f0ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f0d0:	e024      	b.n	800f11c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f0d2:	7afb      	ldrb	r3, [r7, #11]
 800f0d4:	f003 0304 	and.w	r3, r3, #4
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d121      	bne.n	800f120 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	799b      	ldrb	r3, [r3, #6]
 800f0e0:	f003 0310 	and.w	r3, r3, #16
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f0e8:	2305      	movs	r3, #5
 800f0ea:	75fb      	strb	r3, [r7, #23]
 800f0ec:	e019      	b.n	800f122 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	8992      	ldrh	r2, [r2, #12]
 800f0fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800f100:	fb02 f200 	mul.w	r2, r2, r0
 800f104:	1a9b      	subs	r3, r3, r2
 800f106:	440b      	add	r3, r1
 800f108:	4619      	mov	r1, r3
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f7ff fd81 	bl	800ec12 <ld_clust>
 800f110:	4602      	mov	r2, r0
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f116:	e7bb      	b.n	800f090 <follow_path+0x50>
			if (res != FR_OK) break;
 800f118:	bf00      	nop
 800f11a:	e002      	b.n	800f122 <follow_path+0xe2>
				break;
 800f11c:	bf00      	nop
 800f11e:	e000      	b.n	800f122 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f120:	bf00      	nop
			}
		}
	}

	return res;
 800f122:	7dfb      	ldrb	r3, [r7, #23]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3718      	adds	r7, #24
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f138:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d031      	beq.n	800f1a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	617b      	str	r3, [r7, #20]
 800f148:	e002      	b.n	800f150 <get_ldnumber+0x24>
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	3301      	adds	r3, #1
 800f14e:	617b      	str	r3, [r7, #20]
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b20      	cmp	r3, #32
 800f156:	d903      	bls.n	800f160 <get_ldnumber+0x34>
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b3a      	cmp	r3, #58	; 0x3a
 800f15e:	d1f4      	bne.n	800f14a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	2b3a      	cmp	r3, #58	; 0x3a
 800f166:	d11c      	bne.n	800f1a2 <get_ldnumber+0x76>
			tp = *path;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	1c5a      	adds	r2, r3, #1
 800f172:	60fa      	str	r2, [r7, #12]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	3b30      	subs	r3, #48	; 0x30
 800f178:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	2b09      	cmp	r3, #9
 800f17e:	d80e      	bhi.n	800f19e <get_ldnumber+0x72>
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	429a      	cmp	r2, r3
 800f186:	d10a      	bne.n	800f19e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d107      	bne.n	800f19e <get_ldnumber+0x72>
					vol = (int)i;
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	3301      	adds	r3, #1
 800f196:	617b      	str	r3, [r7, #20]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	e002      	b.n	800f1a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f1a6:	693b      	ldr	r3, [r7, #16]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	371c      	adds	r7, #28
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	70da      	strb	r2, [r3, #3]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1ca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7fe ffa0 	bl	800e114 <move_window>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d001      	beq.n	800f1de <check_fs+0x2a>
 800f1da:	2304      	movs	r3, #4
 800f1dc:	e038      	b.n	800f250 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	3334      	adds	r3, #52	; 0x34
 800f1e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7fe fce4 	bl	800dbb4 <ld_word>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d001      	beq.n	800f1fc <check_fs+0x48>
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e029      	b.n	800f250 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f202:	2be9      	cmp	r3, #233	; 0xe9
 800f204:	d009      	beq.n	800f21a <check_fs+0x66>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f20c:	2beb      	cmp	r3, #235	; 0xeb
 800f20e:	d11e      	bne.n	800f24e <check_fs+0x9a>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f216:	2b90      	cmp	r3, #144	; 0x90
 800f218:	d119      	bne.n	800f24e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	3334      	adds	r3, #52	; 0x34
 800f21e:	3336      	adds	r3, #54	; 0x36
 800f220:	4618      	mov	r0, r3
 800f222:	f7fe fcdf 	bl	800dbe4 <ld_dword>
 800f226:	4603      	mov	r3, r0
 800f228:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f22c:	4a0a      	ldr	r2, [pc, #40]	; (800f258 <check_fs+0xa4>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d101      	bne.n	800f236 <check_fs+0x82>
 800f232:	2300      	movs	r3, #0
 800f234:	e00c      	b.n	800f250 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	3334      	adds	r3, #52	; 0x34
 800f23a:	3352      	adds	r3, #82	; 0x52
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fe fcd1 	bl	800dbe4 <ld_dword>
 800f242:	4602      	mov	r2, r0
 800f244:	4b05      	ldr	r3, [pc, #20]	; (800f25c <check_fs+0xa8>)
 800f246:	429a      	cmp	r2, r3
 800f248:	d101      	bne.n	800f24e <check_fs+0x9a>
 800f24a:	2300      	movs	r3, #0
 800f24c:	e000      	b.n	800f250 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f24e:	2302      	movs	r3, #2
}
 800f250:	4618      	mov	r0, r3
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	00544146 	.word	0x00544146
 800f25c:	33544146 	.word	0x33544146

0800f260 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b096      	sub	sp, #88	; 0x58
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	4613      	mov	r3, r2
 800f26c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	2200      	movs	r2, #0
 800f272:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7ff ff59 	bl	800f12c <get_ldnumber>
 800f27a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f27e:	2b00      	cmp	r3, #0
 800f280:	da01      	bge.n	800f286 <find_volume+0x26>
 800f282:	230b      	movs	r3, #11
 800f284:	e265      	b.n	800f752 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f286:	4ab0      	ldr	r2, [pc, #704]	; (800f548 <find_volume+0x2e8>)
 800f288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f28e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f292:	2b00      	cmp	r3, #0
 800f294:	d101      	bne.n	800f29a <find_volume+0x3a>
 800f296:	230c      	movs	r3, #12
 800f298:	e25b      	b.n	800f752 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f29e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f2a0:	79fb      	ldrb	r3, [r7, #7]
 800f2a2:	f023 0301 	bic.w	r3, r3, #1
 800f2a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d01a      	beq.n	800f2e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	785b      	ldrb	r3, [r3, #1]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fe fbdf 	bl	800da78 <disk_status>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f2c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2c4:	f003 0301 	and.w	r3, r3, #1
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10c      	bne.n	800f2e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f2cc:	79fb      	ldrb	r3, [r7, #7]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d007      	beq.n	800f2e2 <find_volume+0x82>
 800f2d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2d6:	f003 0304 	and.w	r3, r3, #4
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f2de:	230a      	movs	r3, #10
 800f2e0:	e237      	b.n	800f752 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	e235      	b.n	800f752 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ee:	b2da      	uxtb	r2, r3
 800f2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f6:	785b      	ldrb	r3, [r3, #1]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fe fbd7 	bl	800daac <disk_initialize>
 800f2fe:	4603      	mov	r3, r0
 800f300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f308:	f003 0301 	and.w	r3, r3, #1
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d001      	beq.n	800f314 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f310:	2303      	movs	r3, #3
 800f312:	e21e      	b.n	800f752 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f314:	79fb      	ldrb	r3, [r7, #7]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d007      	beq.n	800f32a <find_volume+0xca>
 800f31a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f31e:	f003 0304 	and.w	r3, r3, #4
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f326:	230a      	movs	r3, #10
 800f328:	e213      	b.n	800f752 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32c:	7858      	ldrb	r0, [r3, #1]
 800f32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f330:	330c      	adds	r3, #12
 800f332:	461a      	mov	r2, r3
 800f334:	2102      	movs	r1, #2
 800f336:	f7fe fc1f 	bl	800db78 <disk_ioctl>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <find_volume+0xe4>
 800f340:	2301      	movs	r3, #1
 800f342:	e206      	b.n	800f752 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f346:	899b      	ldrh	r3, [r3, #12]
 800f348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f34c:	d80d      	bhi.n	800f36a <find_volume+0x10a>
 800f34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f350:	899b      	ldrh	r3, [r3, #12]
 800f352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f356:	d308      	bcc.n	800f36a <find_volume+0x10a>
 800f358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35a:	899b      	ldrh	r3, [r3, #12]
 800f35c:	461a      	mov	r2, r3
 800f35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f360:	899b      	ldrh	r3, [r3, #12]
 800f362:	3b01      	subs	r3, #1
 800f364:	4013      	ands	r3, r2
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <find_volume+0x10e>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e1f1      	b.n	800f752 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f372:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f376:	f7ff ff1d 	bl	800f1b4 <check_fs>
 800f37a:	4603      	mov	r3, r0
 800f37c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f380:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f384:	2b02      	cmp	r3, #2
 800f386:	d14b      	bne.n	800f420 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f388:	2300      	movs	r3, #0
 800f38a:	643b      	str	r3, [r7, #64]	; 0x40
 800f38c:	e01f      	b.n	800f3ce <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f396:	011b      	lsls	r3, r3, #4
 800f398:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f39c:	4413      	add	r3, r2
 800f39e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d006      	beq.n	800f3b8 <find_volume+0x158>
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	3308      	adds	r3, #8
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe fc18 	bl	800dbe4 <ld_dword>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	e000      	b.n	800f3ba <find_volume+0x15a>
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f3c2:	440b      	add	r3, r1
 800f3c4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	643b      	str	r3, [r7, #64]	; 0x40
 800f3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d9dc      	bls.n	800f38e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <find_volume+0x184>
 800f3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3ec:	4413      	add	r3, r2
 800f3ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f3f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d005      	beq.n	800f406 <find_volume+0x1a6>
 800f3fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f3fe:	f7ff fed9 	bl	800f1b4 <check_fs>
 800f402:	4603      	mov	r3, r0
 800f404:	e000      	b.n	800f408 <find_volume+0x1a8>
 800f406:	2303      	movs	r3, #3
 800f408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f40c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f410:	2b01      	cmp	r3, #1
 800f412:	d905      	bls.n	800f420 <find_volume+0x1c0>
 800f414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f416:	3301      	adds	r3, #1
 800f418:	643b      	str	r3, [r7, #64]	; 0x40
 800f41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f41c:	2b03      	cmp	r3, #3
 800f41e:	d9e1      	bls.n	800f3e4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f424:	2b04      	cmp	r3, #4
 800f426:	d101      	bne.n	800f42c <find_volume+0x1cc>
 800f428:	2301      	movs	r3, #1
 800f42a:	e192      	b.n	800f752 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f42c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f430:	2b01      	cmp	r3, #1
 800f432:	d901      	bls.n	800f438 <find_volume+0x1d8>
 800f434:	230d      	movs	r3, #13
 800f436:	e18c      	b.n	800f752 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	3334      	adds	r3, #52	; 0x34
 800f43c:	330b      	adds	r3, #11
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fe fbb8 	bl	800dbb4 <ld_word>
 800f444:	4603      	mov	r3, r0
 800f446:	461a      	mov	r2, r3
 800f448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44a:	899b      	ldrh	r3, [r3, #12]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d001      	beq.n	800f454 <find_volume+0x1f4>
 800f450:	230d      	movs	r3, #13
 800f452:	e17e      	b.n	800f752 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	3334      	adds	r3, #52	; 0x34
 800f458:	3316      	adds	r3, #22
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fe fbaa 	bl	800dbb4 <ld_word>
 800f460:	4603      	mov	r3, r0
 800f462:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f466:	2b00      	cmp	r3, #0
 800f468:	d106      	bne.n	800f478 <find_volume+0x218>
 800f46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46c:	3334      	adds	r3, #52	; 0x34
 800f46e:	3324      	adds	r3, #36	; 0x24
 800f470:	4618      	mov	r0, r3
 800f472:	f7fe fbb7 	bl	800dbe4 <ld_dword>
 800f476:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f47c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f486:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48a:	789b      	ldrb	r3, [r3, #2]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d005      	beq.n	800f49c <find_volume+0x23c>
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	789b      	ldrb	r3, [r3, #2]
 800f494:	2b02      	cmp	r3, #2
 800f496:	d001      	beq.n	800f49c <find_volume+0x23c>
 800f498:	230d      	movs	r3, #13
 800f49a:	e15a      	b.n	800f752 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	789b      	ldrb	r3, [r3, #2]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a4:	fb02 f303 	mul.w	r3, r2, r3
 800f4a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b8:	895b      	ldrh	r3, [r3, #10]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d008      	beq.n	800f4d0 <find_volume+0x270>
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	895b      	ldrh	r3, [r3, #10]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c6:	895b      	ldrh	r3, [r3, #10]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <find_volume+0x274>
 800f4d0:	230d      	movs	r3, #13
 800f4d2:	e13e      	b.n	800f752 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	3334      	adds	r3, #52	; 0x34
 800f4d8:	3311      	adds	r3, #17
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fb6a 	bl	800dbb4 <ld_word>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	891b      	ldrh	r3, [r3, #8]
 800f4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4ee:	8992      	ldrh	r2, [r2, #12]
 800f4f0:	0952      	lsrs	r2, r2, #5
 800f4f2:	b292      	uxth	r2, r2
 800f4f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4f8:	fb02 f201 	mul.w	r2, r2, r1
 800f4fc:	1a9b      	subs	r3, r3, r2
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <find_volume+0x2a8>
 800f504:	230d      	movs	r3, #13
 800f506:	e124      	b.n	800f752 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50a:	3334      	adds	r3, #52	; 0x34
 800f50c:	3313      	adds	r3, #19
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fe fb50 	bl	800dbb4 <ld_word>
 800f514:	4603      	mov	r3, r0
 800f516:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d106      	bne.n	800f52c <find_volume+0x2cc>
 800f51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f520:	3334      	adds	r3, #52	; 0x34
 800f522:	3320      	adds	r3, #32
 800f524:	4618      	mov	r0, r3
 800f526:	f7fe fb5d 	bl	800dbe4 <ld_dword>
 800f52a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52e:	3334      	adds	r3, #52	; 0x34
 800f530:	330e      	adds	r3, #14
 800f532:	4618      	mov	r0, r3
 800f534:	f7fe fb3e 	bl	800dbb4 <ld_word>
 800f538:	4603      	mov	r3, r0
 800f53a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f53c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d104      	bne.n	800f54c <find_volume+0x2ec>
 800f542:	230d      	movs	r3, #13
 800f544:	e105      	b.n	800f752 <find_volume+0x4f2>
 800f546:	bf00      	nop
 800f548:	20000838 	.word	0x20000838

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f54c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f550:	4413      	add	r3, r2
 800f552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f554:	8911      	ldrh	r1, [r2, #8]
 800f556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f558:	8992      	ldrh	r2, [r2, #12]
 800f55a:	0952      	lsrs	r2, r2, #5
 800f55c:	b292      	uxth	r2, r2
 800f55e:	fbb1 f2f2 	udiv	r2, r1, r2
 800f562:	b292      	uxth	r2, r2
 800f564:	4413      	add	r3, r2
 800f566:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d201      	bcs.n	800f574 <find_volume+0x314>
 800f570:	230d      	movs	r3, #13
 800f572:	e0ee      	b.n	800f752 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f57c:	8952      	ldrh	r2, [r2, #10]
 800f57e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f582:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	2b00      	cmp	r3, #0
 800f588:	d101      	bne.n	800f58e <find_volume+0x32e>
 800f58a:	230d      	movs	r3, #13
 800f58c:	e0e1      	b.n	800f752 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f58e:	2303      	movs	r3, #3
 800f590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d802      	bhi.n	800f5a4 <find_volume+0x344>
 800f59e:	2302      	movs	r3, #2
 800f5a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d802      	bhi.n	800f5b4 <find_volume+0x354>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	1c9a      	adds	r2, r3, #2
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5c0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f5c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c6:	441a      	add	r2, r3
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f5cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d0:	441a      	add	r2, r3
 800f5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f5d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5da:	2b03      	cmp	r3, #3
 800f5dc:	d11e      	bne.n	800f61c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	3334      	adds	r3, #52	; 0x34
 800f5e2:	332a      	adds	r3, #42	; 0x2a
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fe fae5 	bl	800dbb4 <ld_word>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d001      	beq.n	800f5f4 <find_volume+0x394>
 800f5f0:	230d      	movs	r3, #13
 800f5f2:	e0ae      	b.n	800f752 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f6:	891b      	ldrh	r3, [r3, #8]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <find_volume+0x3a0>
 800f5fc:	230d      	movs	r3, #13
 800f5fe:	e0a8      	b.n	800f752 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	3334      	adds	r3, #52	; 0x34
 800f604:	332c      	adds	r3, #44	; 0x2c
 800f606:	4618      	mov	r0, r3
 800f608:	f7fe faec 	bl	800dbe4 <ld_dword>
 800f60c:	4602      	mov	r2, r0
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f614:	699b      	ldr	r3, [r3, #24]
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	647b      	str	r3, [r7, #68]	; 0x44
 800f61a:	e01f      	b.n	800f65c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	891b      	ldrh	r3, [r3, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d101      	bne.n	800f628 <find_volume+0x3c8>
 800f624:	230d      	movs	r3, #13
 800f626:	e094      	b.n	800f752 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f62e:	441a      	add	r2, r3
 800f630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f632:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f634:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f638:	2b02      	cmp	r3, #2
 800f63a:	d103      	bne.n	800f644 <find_volume+0x3e4>
 800f63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63e:	699b      	ldr	r3, [r3, #24]
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	e00a      	b.n	800f65a <find_volume+0x3fa>
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	699a      	ldr	r2, [r3, #24]
 800f648:	4613      	mov	r3, r2
 800f64a:	005b      	lsls	r3, r3, #1
 800f64c:	4413      	add	r3, r2
 800f64e:	085a      	lsrs	r2, r3, #1
 800f650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f652:	699b      	ldr	r3, [r3, #24]
 800f654:	f003 0301 	and.w	r3, r3, #1
 800f658:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f65a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65e:	69da      	ldr	r2, [r3, #28]
 800f660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f662:	899b      	ldrh	r3, [r3, #12]
 800f664:	4619      	mov	r1, r3
 800f666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f668:	440b      	add	r3, r1
 800f66a:	3b01      	subs	r3, #1
 800f66c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f66e:	8989      	ldrh	r1, [r1, #12]
 800f670:	fbb3 f3f1 	udiv	r3, r3, r1
 800f674:	429a      	cmp	r2, r3
 800f676:	d201      	bcs.n	800f67c <find_volume+0x41c>
 800f678:	230d      	movs	r3, #13
 800f67a:	e06a      	b.n	800f752 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f682:	615a      	str	r2, [r3, #20]
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	695a      	ldr	r2, [r3, #20]
 800f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	2280      	movs	r2, #128	; 0x80
 800f690:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f696:	2b03      	cmp	r3, #3
 800f698:	d149      	bne.n	800f72e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69c:	3334      	adds	r3, #52	; 0x34
 800f69e:	3330      	adds	r3, #48	; 0x30
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fe fa87 	bl	800dbb4 <ld_word>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d140      	bne.n	800f72e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6b4:	f7fe fd2e 	bl	800e114 <move_window>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d137      	bne.n	800f72e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c6:	3334      	adds	r3, #52	; 0x34
 800f6c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe fa71 	bl	800dbb4 <ld_word>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d127      	bne.n	800f72e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	3334      	adds	r3, #52	; 0x34
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fa7e 	bl	800dbe4 <ld_dword>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	4b1c      	ldr	r3, [pc, #112]	; (800f75c <find_volume+0x4fc>)
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d11e      	bne.n	800f72e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f2:	3334      	adds	r3, #52	; 0x34
 800f6f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fe fa73 	bl	800dbe4 <ld_dword>
 800f6fe:	4602      	mov	r2, r0
 800f700:	4b17      	ldr	r3, [pc, #92]	; (800f760 <find_volume+0x500>)
 800f702:	429a      	cmp	r2, r3
 800f704:	d113      	bne.n	800f72e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f708:	3334      	adds	r3, #52	; 0x34
 800f70a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fe fa68 	bl	800dbe4 <ld_dword>
 800f714:	4602      	mov	r2, r0
 800f716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f718:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71c:	3334      	adds	r3, #52	; 0x34
 800f71e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fa5e 	bl	800dbe4 <ld_dword>
 800f728:	4602      	mov	r2, r0
 800f72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f730:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f734:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f736:	4b0b      	ldr	r3, [pc, #44]	; (800f764 <find_volume+0x504>)
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	3301      	adds	r3, #1
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	4b09      	ldr	r3, [pc, #36]	; (800f764 <find_volume+0x504>)
 800f740:	801a      	strh	r2, [r3, #0]
 800f742:	4b08      	ldr	r3, [pc, #32]	; (800f764 <find_volume+0x504>)
 800f744:	881a      	ldrh	r2, [r3, #0]
 800f746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f748:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f74a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f74c:	f7fe fc7a 	bl	800e044 <clear_lock>
#endif
	return FR_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3758      	adds	r7, #88	; 0x58
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	41615252 	.word	0x41615252
 800f760:	61417272 	.word	0x61417272
 800f764:	2000083c 	.word	0x2000083c

0800f768 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f772:	2309      	movs	r3, #9
 800f774:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d01c      	beq.n	800f7b6 <validate+0x4e>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d018      	beq.n	800f7b6 <validate+0x4e>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d013      	beq.n	800f7b6 <validate+0x4e>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	889a      	ldrh	r2, [r3, #4]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	88db      	ldrh	r3, [r3, #6]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d10c      	bne.n	800f7b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	785b      	ldrb	r3, [r3, #1]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fe f968 	bl	800da78 <disk_status>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	f003 0301 	and.w	r3, r3, #1
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d101      	bne.n	800f7b6 <validate+0x4e>
			res = FR_OK;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f7b6:	7bfb      	ldrb	r3, [r7, #15]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d102      	bne.n	800f7c2 <validate+0x5a>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	e000      	b.n	800f7c4 <validate+0x5c>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	683a      	ldr	r2, [r7, #0]
 800f7c6:	6013      	str	r3, [r2, #0]
	return res;
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3710      	adds	r7, #16
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
	...

0800f7d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b088      	sub	sp, #32
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	4613      	mov	r3, r2
 800f7e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f7e6:	f107 0310 	add.w	r3, r7, #16
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7ff fc9e 	bl	800f12c <get_ldnumber>
 800f7f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	da01      	bge.n	800f7fc <f_mount+0x28>
 800f7f8:	230b      	movs	r3, #11
 800f7fa:	e02b      	b.n	800f854 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f7fc:	4a17      	ldr	r2, [pc, #92]	; (800f85c <f_mount+0x88>)
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f804:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d005      	beq.n	800f818 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f80c:	69b8      	ldr	r0, [r7, #24]
 800f80e:	f7fe fc19 	bl	800e044 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	2200      	movs	r2, #0
 800f816:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d002      	beq.n	800f824 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	490d      	ldr	r1, [pc, #52]	; (800f85c <f_mount+0x88>)
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <f_mount+0x66>
 800f834:	79fb      	ldrb	r3, [r7, #7]
 800f836:	2b01      	cmp	r3, #1
 800f838:	d001      	beq.n	800f83e <f_mount+0x6a>
 800f83a:	2300      	movs	r3, #0
 800f83c:	e00a      	b.n	800f854 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f83e:	f107 010c 	add.w	r1, r7, #12
 800f842:	f107 0308 	add.w	r3, r7, #8
 800f846:	2200      	movs	r2, #0
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff fd09 	bl	800f260 <find_volume>
 800f84e:	4603      	mov	r3, r0
 800f850:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f852:	7dfb      	ldrb	r3, [r7, #23]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3720      	adds	r7, #32
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20000838 	.word	0x20000838

0800f860 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b098      	sub	sp, #96	; 0x60
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	4613      	mov	r3, r2
 800f86c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d101      	bne.n	800f878 <f_open+0x18>
 800f874:	2309      	movs	r3, #9
 800f876:	e1bb      	b.n	800fbf0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f87e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f880:	79fa      	ldrb	r2, [r7, #7]
 800f882:	f107 0110 	add.w	r1, r7, #16
 800f886:	f107 0308 	add.w	r3, r7, #8
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7ff fce8 	bl	800f260 <find_volume>
 800f890:	4603      	mov	r3, r0
 800f892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f040 819f 	bne.w	800fbde <f_open+0x37e>
		dj.obj.fs = fs;
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	f107 0314 	add.w	r3, r7, #20
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff fbc7 	bl	800f040 <follow_path>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d11a      	bne.n	800f8f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f8c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f8c4:	b25b      	sxtb	r3, r3
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	da03      	bge.n	800f8d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f8ca:	2306      	movs	r3, #6
 800f8cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f8d0:	e011      	b.n	800f8f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	f023 0301 	bic.w	r3, r3, #1
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	bf14      	ite	ne
 800f8dc:	2301      	movne	r3, #1
 800f8de:	2300      	moveq	r3, #0
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	f107 0314 	add.w	r3, r7, #20
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fe fa62 	bl	800ddb4 <chk_lock>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f8f6:	79fb      	ldrb	r3, [r7, #7]
 800f8f8:	f003 031c 	and.w	r3, r3, #28
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d07f      	beq.n	800fa00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f904:	2b00      	cmp	r3, #0
 800f906:	d017      	beq.n	800f938 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	d10e      	bne.n	800f92e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f910:	f7fe faac 	bl	800de6c <enq_lock>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d006      	beq.n	800f928 <f_open+0xc8>
 800f91a:	f107 0314 	add.w	r3, r7, #20
 800f91e:	4618      	mov	r0, r3
 800f920:	f7ff fa68 	bl	800edf4 <dir_register>
 800f924:	4603      	mov	r3, r0
 800f926:	e000      	b.n	800f92a <f_open+0xca>
 800f928:	2312      	movs	r3, #18
 800f92a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f92e:	79fb      	ldrb	r3, [r7, #7]
 800f930:	f043 0308 	orr.w	r3, r3, #8
 800f934:	71fb      	strb	r3, [r7, #7]
 800f936:	e010      	b.n	800f95a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f938:	7ebb      	ldrb	r3, [r7, #26]
 800f93a:	f003 0311 	and.w	r3, r3, #17
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d003      	beq.n	800f94a <f_open+0xea>
					res = FR_DENIED;
 800f942:	2307      	movs	r3, #7
 800f944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f948:	e007      	b.n	800f95a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f94a:	79fb      	ldrb	r3, [r7, #7]
 800f94c:	f003 0304 	and.w	r3, r3, #4
 800f950:	2b00      	cmp	r3, #0
 800f952:	d002      	beq.n	800f95a <f_open+0xfa>
 800f954:	2308      	movs	r3, #8
 800f956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f95a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d168      	bne.n	800fa34 <f_open+0x1d4>
 800f962:	79fb      	ldrb	r3, [r7, #7]
 800f964:	f003 0308 	and.w	r3, r3, #8
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d063      	beq.n	800fa34 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f96c:	f7fd fe32 	bl	800d5d4 <get_fattime>
 800f970:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f974:	330e      	adds	r3, #14
 800f976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fe f971 	bl	800dc60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f980:	3316      	adds	r3, #22
 800f982:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f984:	4618      	mov	r0, r3
 800f986:	f7fe f96b 	bl	800dc60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98c:	330b      	adds	r3, #11
 800f98e:	2220      	movs	r2, #32
 800f990:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f996:	4611      	mov	r1, r2
 800f998:	4618      	mov	r0, r3
 800f99a:	f7ff f93a 	bl	800ec12 <ld_clust>
 800f99e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7ff f952 	bl	800ec50 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ae:	331c      	adds	r3, #28
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fe f954 	bl	800dc60 <st_dword>
					fs->wflag = 1;
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d037      	beq.n	800fa34 <f_open+0x1d4>
						dw = fs->winsect;
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f9ca:	f107 0314 	add.w	r3, r7, #20
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fe fe42 	bl	800e65c <remove_chain>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f9de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d126      	bne.n	800fa34 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fe fb92 	bl	800e114 <move_window>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9fa:	3a01      	subs	r2, #1
 800f9fc:	611a      	str	r2, [r3, #16]
 800f9fe:	e019      	b.n	800fa34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fa00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d115      	bne.n	800fa34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fa08:	7ebb      	ldrb	r3, [r7, #26]
 800fa0a:	f003 0310 	and.w	r3, r3, #16
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d003      	beq.n	800fa1a <f_open+0x1ba>
					res = FR_NO_FILE;
 800fa12:	2304      	movs	r3, #4
 800fa14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fa18:	e00c      	b.n	800fa34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fa1a:	79fb      	ldrb	r3, [r7, #7]
 800fa1c:	f003 0302 	and.w	r3, r3, #2
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d007      	beq.n	800fa34 <f_open+0x1d4>
 800fa24:	7ebb      	ldrb	r3, [r7, #26]
 800fa26:	f003 0301 	and.w	r3, r3, #1
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d002      	beq.n	800fa34 <f_open+0x1d4>
						res = FR_DENIED;
 800fa2e:	2307      	movs	r3, #7
 800fa30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fa34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d128      	bne.n	800fa8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fa3c:	79fb      	ldrb	r3, [r7, #7]
 800fa3e:	f003 0308 	and.w	r3, r3, #8
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d003      	beq.n	800fa4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fa46:	79fb      	ldrb	r3, [r7, #7]
 800fa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fa56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa5c:	79fb      	ldrb	r3, [r7, #7]
 800fa5e:	f023 0301 	bic.w	r3, r3, #1
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	bf14      	ite	ne
 800fa66:	2301      	movne	r3, #1
 800fa68:	2300      	moveq	r3, #0
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	f107 0314 	add.w	r3, r7, #20
 800fa72:	4611      	mov	r1, r2
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe fa1b 	bl	800deb0 <inc_lock>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	691b      	ldr	r3, [r3, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d102      	bne.n	800fa8e <f_open+0x22e>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fa8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f040 80a3 	bne.w	800fbde <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7ff f8b7 	bl	800ec12 <ld_clust>
 800faa4:	4602      	mov	r2, r0
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800faaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faac:	331c      	adds	r3, #28
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe f898 	bl	800dbe4 <ld_dword>
 800fab4:	4602      	mov	r2, r0
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	88da      	ldrh	r2, [r3, #6]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	79fa      	ldrb	r2, [r7, #7]
 800fad2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2200      	movs	r2, #0
 800fad8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2200      	movs	r2, #0
 800fae4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	3330      	adds	r3, #48	; 0x30
 800faea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800faee:	2100      	movs	r1, #0
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe f902 	bl	800dcfa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800faf6:	79fb      	ldrb	r3, [r7, #7]
 800faf8:	f003 0320 	and.w	r3, r3, #32
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d06e      	beq.n	800fbde <f_open+0x37e>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d06a      	beq.n	800fbde <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	68da      	ldr	r2, [r3, #12]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	895b      	ldrh	r3, [r3, #10]
 800fb14:	461a      	mov	r2, r3
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	899b      	ldrh	r3, [r3, #12]
 800fb1a:	fb03 f302 	mul.w	r3, r3, r2
 800fb1e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	657b      	str	r3, [r7, #84]	; 0x54
 800fb2c:	e016      	b.n	800fb5c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fe fbab 	bl	800e28e <get_fat>
 800fb38:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fb3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d802      	bhi.n	800fb46 <f_open+0x2e6>
 800fb40:	2302      	movs	r3, #2
 800fb42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fb46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb4c:	d102      	bne.n	800fb54 <f_open+0x2f4>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	657b      	str	r3, [r7, #84]	; 0x54
 800fb5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d103      	bne.n	800fb6c <f_open+0x30c>
 800fb64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d8e0      	bhi.n	800fb2e <f_open+0x2ce>
				}
				fp->clust = clst;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fb72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d131      	bne.n	800fbde <f_open+0x37e>
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	899b      	ldrh	r3, [r3, #12]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb82:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb86:	fb02 f201 	mul.w	r2, r2, r1
 800fb8a:	1a9b      	subs	r3, r3, r2
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d026      	beq.n	800fbde <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fe fb5b 	bl	800e250 <clust2sect>
 800fb9a:	6478      	str	r0, [r7, #68]	; 0x44
 800fb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d103      	bne.n	800fbaa <f_open+0x34a>
						res = FR_INT_ERR;
 800fba2:	2302      	movs	r3, #2
 800fba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fba8:	e019      	b.n	800fbde <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	899b      	ldrh	r3, [r3, #12]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fbb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbb8:	441a      	add	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	7858      	ldrb	r0, [r3, #1]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6a1a      	ldr	r2, [r3, #32]
 800fbcc:	2301      	movs	r3, #1
 800fbce:	f7fd ff93 	bl	800daf8 <disk_read>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d002      	beq.n	800fbde <f_open+0x37e>
 800fbd8:	2301      	movs	r3, #1
 800fbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fbde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d002      	beq.n	800fbec <f_open+0x38c>
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fbec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3760      	adds	r7, #96	; 0x60
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b08c      	sub	sp, #48	; 0x30
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
 800fc04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f107 0210 	add.w	r2, r7, #16
 800fc16:	4611      	mov	r1, r2
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7ff fda5 	bl	800f768 <validate>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fc24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d107      	bne.n	800fc3c <f_write+0x44>
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	7d5b      	ldrb	r3, [r3, #21]
 800fc30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fc34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d002      	beq.n	800fc42 <f_write+0x4a>
 800fc3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc40:	e16a      	b.n	800ff18 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	7d1b      	ldrb	r3, [r3, #20]
 800fc46:	f003 0302 	and.w	r3, r3, #2
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d101      	bne.n	800fc52 <f_write+0x5a>
 800fc4e:	2307      	movs	r3, #7
 800fc50:	e162      	b.n	800ff18 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	699a      	ldr	r2, [r3, #24]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	441a      	add	r2, r3
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	699b      	ldr	r3, [r3, #24]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	f080 814c 	bcs.w	800fefc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	699b      	ldr	r3, [r3, #24]
 800fc68:	43db      	mvns	r3, r3
 800fc6a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fc6c:	e146      	b.n	800fefc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	699b      	ldr	r3, [r3, #24]
 800fc72:	693a      	ldr	r2, [r7, #16]
 800fc74:	8992      	ldrh	r2, [r2, #12]
 800fc76:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc7a:	fb02 f201 	mul.w	r2, r2, r1
 800fc7e:	1a9b      	subs	r3, r3, r2
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f040 80f1 	bne.w	800fe68 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	699b      	ldr	r3, [r3, #24]
 800fc8a:	693a      	ldr	r2, [r7, #16]
 800fc8c:	8992      	ldrh	r2, [r2, #12]
 800fc8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	8952      	ldrh	r2, [r2, #10]
 800fc96:	3a01      	subs	r2, #1
 800fc98:	4013      	ands	r3, r2
 800fc9a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d143      	bne.n	800fd2a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	699b      	ldr	r3, [r3, #24]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d10c      	bne.n	800fcc4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	689b      	ldr	r3, [r3, #8]
 800fcae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d11a      	bne.n	800fcec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2100      	movs	r1, #0
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fe fd33 	bl	800e726 <create_chain>
 800fcc0:	62b8      	str	r0, [r7, #40]	; 0x28
 800fcc2:	e013      	b.n	800fcec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d007      	beq.n	800fcdc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7fe fdbf 	bl	800e856 <clmt_clust>
 800fcd8:	62b8      	str	r0, [r7, #40]	; 0x28
 800fcda:	e007      	b.n	800fcec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	4619      	mov	r1, r3
 800fce4:	4610      	mov	r0, r2
 800fce6:	f7fe fd1e 	bl	800e726 <create_chain>
 800fcea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 8109 	beq.w	800ff06 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d104      	bne.n	800fd04 <f_write+0x10c>
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2202      	movs	r2, #2
 800fcfe:	755a      	strb	r2, [r3, #21]
 800fd00:	2302      	movs	r3, #2
 800fd02:	e109      	b.n	800ff18 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd0a:	d104      	bne.n	800fd16 <f_write+0x11e>
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	755a      	strb	r2, [r3, #21]
 800fd12:	2301      	movs	r3, #1
 800fd14:	e100      	b.n	800ff18 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d102      	bne.n	800fd2a <f_write+0x132>
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	7d1b      	ldrb	r3, [r3, #20]
 800fd2e:	b25b      	sxtb	r3, r3
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	da18      	bge.n	800fd66 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	7858      	ldrb	r0, [r3, #1]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	6a1a      	ldr	r2, [r3, #32]
 800fd42:	2301      	movs	r3, #1
 800fd44:	f7fd fef8 	bl	800db38 <disk_write>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d004      	beq.n	800fd58 <f_write+0x160>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2201      	movs	r2, #1
 800fd52:	755a      	strb	r2, [r3, #21]
 800fd54:	2301      	movs	r3, #1
 800fd56:	e0df      	b.n	800ff18 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	7d1b      	ldrb	r3, [r3, #20]
 800fd5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd60:	b2da      	uxtb	r2, r3
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fd66:	693a      	ldr	r2, [r7, #16]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	69db      	ldr	r3, [r3, #28]
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	4610      	mov	r0, r2
 800fd70:	f7fe fa6e 	bl	800e250 <clust2sect>
 800fd74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d104      	bne.n	800fd86 <f_write+0x18e>
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2202      	movs	r2, #2
 800fd80:	755a      	strb	r2, [r3, #21]
 800fd82:	2302      	movs	r3, #2
 800fd84:	e0c8      	b.n	800ff18 <f_write+0x320>
			sect += csect;
 800fd86:	697a      	ldr	r2, [r7, #20]
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	899b      	ldrh	r3, [r3, #12]
 800fd92:	461a      	mov	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fd9c:	6a3b      	ldr	r3, [r7, #32]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d043      	beq.n	800fe2a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fda2:	69ba      	ldr	r2, [r7, #24]
 800fda4:	6a3b      	ldr	r3, [r7, #32]
 800fda6:	4413      	add	r3, r2
 800fda8:	693a      	ldr	r2, [r7, #16]
 800fdaa:	8952      	ldrh	r2, [r2, #10]
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d905      	bls.n	800fdbc <f_write+0x1c4>
					cc = fs->csize - csect;
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	895b      	ldrh	r3, [r3, #10]
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	7858      	ldrb	r0, [r3, #1]
 800fdc0:	6a3b      	ldr	r3, [r7, #32]
 800fdc2:	697a      	ldr	r2, [r7, #20]
 800fdc4:	69f9      	ldr	r1, [r7, #28]
 800fdc6:	f7fd feb7 	bl	800db38 <disk_write>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d004      	beq.n	800fdda <f_write+0x1e2>
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	755a      	strb	r2, [r3, #21]
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e09e      	b.n	800ff18 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6a1a      	ldr	r2, [r3, #32]
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	6a3a      	ldr	r2, [r7, #32]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d918      	bls.n	800fe1a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6a1a      	ldr	r2, [r3, #32]
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	693a      	ldr	r2, [r7, #16]
 800fdf8:	8992      	ldrh	r2, [r2, #12]
 800fdfa:	fb02 f303 	mul.w	r3, r2, r3
 800fdfe:	69fa      	ldr	r2, [r7, #28]
 800fe00:	18d1      	adds	r1, r2, r3
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	899b      	ldrh	r3, [r3, #12]
 800fe06:	461a      	mov	r2, r3
 800fe08:	f7fd ff56 	bl	800dcb8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	7d1b      	ldrb	r3, [r3, #20]
 800fe10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	899b      	ldrh	r3, [r3, #12]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	6a3b      	ldr	r3, [r7, #32]
 800fe22:	fb02 f303 	mul.w	r3, r2, r3
 800fe26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fe28:	e04b      	b.n	800fec2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6a1b      	ldr	r3, [r3, #32]
 800fe2e:	697a      	ldr	r2, [r7, #20]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d016      	beq.n	800fe62 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	699a      	ldr	r2, [r3, #24]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d210      	bcs.n	800fe62 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	7858      	ldrb	r0, [r3, #1]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	f7fd fe53 	bl	800daf8 <disk_read>
 800fe52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d004      	beq.n	800fe62 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	755a      	strb	r2, [r3, #21]
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e05a      	b.n	800ff18 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	697a      	ldr	r2, [r7, #20]
 800fe66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	899b      	ldrh	r3, [r3, #12]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	699b      	ldr	r3, [r3, #24]
 800fe72:	693a      	ldr	r2, [r7, #16]
 800fe74:	8992      	ldrh	r2, [r2, #12]
 800fe76:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe7a:	fb02 f201 	mul.w	r2, r2, r1
 800fe7e:	1a9b      	subs	r3, r3, r2
 800fe80:	1ac3      	subs	r3, r0, r3
 800fe82:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fe84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d901      	bls.n	800fe90 <f_write+0x298>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	699b      	ldr	r3, [r3, #24]
 800fe9a:	693a      	ldr	r2, [r7, #16]
 800fe9c:	8992      	ldrh	r2, [r2, #12]
 800fe9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fea2:	fb02 f200 	mul.w	r2, r2, r0
 800fea6:	1a9b      	subs	r3, r3, r2
 800fea8:	440b      	add	r3, r1
 800feaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feac:	69f9      	ldr	r1, [r7, #28]
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fd ff02 	bl	800dcb8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	7d1b      	ldrb	r3, [r3, #20]
 800feb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800febc:	b2da      	uxtb	r2, r3
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fec2:	69fa      	ldr	r2, [r7, #28]
 800fec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec6:	4413      	add	r3, r2
 800fec8:	61fb      	str	r3, [r7, #28]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	699a      	ldr	r2, [r3, #24]
 800fece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed0:	441a      	add	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	619a      	str	r2, [r3, #24]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	68da      	ldr	r2, [r3, #12]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	699b      	ldr	r3, [r3, #24]
 800fede:	429a      	cmp	r2, r3
 800fee0:	bf38      	it	cc
 800fee2:	461a      	movcc	r2, r3
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	60da      	str	r2, [r3, #12]
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feee:	441a      	add	r2, r3
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f47f aeb5 	bne.w	800fc6e <f_write+0x76>
 800ff04:	e000      	b.n	800ff08 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ff06:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	7d1b      	ldrb	r3, [r3, #20]
 800ff0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3730      	adds	r7, #48	; 0x30
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b086      	sub	sp, #24
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f107 0208 	add.w	r2, r7, #8
 800ff2e:	4611      	mov	r1, r2
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7ff fc19 	bl	800f768 <validate>
 800ff36:	4603      	mov	r3, r0
 800ff38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff3a:	7dfb      	ldrb	r3, [r7, #23]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d168      	bne.n	8010012 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	7d1b      	ldrb	r3, [r3, #20]
 800ff44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d062      	beq.n	8010012 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	7d1b      	ldrb	r3, [r3, #20]
 800ff50:	b25b      	sxtb	r3, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	da15      	bge.n	800ff82 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	7858      	ldrb	r0, [r3, #1]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a1a      	ldr	r2, [r3, #32]
 800ff64:	2301      	movs	r3, #1
 800ff66:	f7fd fde7 	bl	800db38 <disk_write>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d001      	beq.n	800ff74 <f_sync+0x54>
 800ff70:	2301      	movs	r3, #1
 800ff72:	e04f      	b.n	8010014 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	7d1b      	ldrb	r3, [r3, #20]
 800ff78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff7c:	b2da      	uxtb	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ff82:	f7fd fb27 	bl	800d5d4 <get_fattime>
 800ff86:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8e:	4619      	mov	r1, r3
 800ff90:	4610      	mov	r0, r2
 800ff92:	f7fe f8bf 	bl	800e114 <move_window>
 800ff96:	4603      	mov	r3, r0
 800ff98:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ff9a:	7dfb      	ldrb	r3, [r7, #23]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d138      	bne.n	8010012 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	330b      	adds	r3, #11
 800ffaa:	781a      	ldrb	r2, [r3, #0]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	330b      	adds	r3, #11
 800ffb0:	f042 0220 	orr.w	r2, r2, #32
 800ffb4:	b2d2      	uxtb	r2, r2
 800ffb6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6818      	ldr	r0, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	68f9      	ldr	r1, [r7, #12]
 800ffc4:	f7fe fe44 	bl	800ec50 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f103 021c 	add.w	r2, r3, #28
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4610      	mov	r0, r2
 800ffd6:	f7fd fe43 	bl	800dc60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	3316      	adds	r3, #22
 800ffde:	6939      	ldr	r1, [r7, #16]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fd fe3d 	bl	800dc60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	3312      	adds	r3, #18
 800ffea:	2100      	movs	r1, #0
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fd fe1c 	bl	800dc2a <st_word>
					fs->wflag = 1;
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2201      	movs	r2, #1
 800fff6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fe f8b8 	bl	800e170 <sync_fs>
 8010000:	4603      	mov	r3, r0
 8010002:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	7d1b      	ldrb	r3, [r3, #20]
 8010008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801000c:	b2da      	uxtb	r2, r3
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010012:	7dfb      	ldrb	r3, [r7, #23]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3718      	adds	r7, #24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff ff7b 	bl	800ff20 <f_sync>
 801002a:	4603      	mov	r3, r0
 801002c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d118      	bne.n	8010066 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f107 0208 	add.w	r2, r7, #8
 801003a:	4611      	mov	r1, r2
 801003c:	4618      	mov	r0, r3
 801003e:	f7ff fb93 	bl	800f768 <validate>
 8010042:	4603      	mov	r3, r0
 8010044:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d10c      	bne.n	8010066 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	4618      	mov	r0, r3
 8010052:	f7fd ffbb 	bl	800dfcc <dec_lock>
 8010056:	4603      	mov	r3, r0
 8010058:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801005a:	7bfb      	ldrb	r3, [r7, #15]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d102      	bne.n	8010066 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010066:	7bfb      	ldrb	r3, [r7, #15]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3710      	adds	r7, #16
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b090      	sub	sp, #64	; 0x40
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f107 0208 	add.w	r2, r7, #8
 8010080:	4611      	mov	r1, r2
 8010082:	4618      	mov	r0, r3
 8010084:	f7ff fb70 	bl	800f768 <validate>
 8010088:	4603      	mov	r3, r0
 801008a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801008e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010092:	2b00      	cmp	r3, #0
 8010094:	d103      	bne.n	801009e <f_lseek+0x2e>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	7d5b      	ldrb	r3, [r3, #21]
 801009a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801009e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <f_lseek+0x3c>
 80100a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100aa:	e201      	b.n	80104b0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 80d9 	beq.w	8010268 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100bc:	d15a      	bne.n	8010174 <f_lseek+0x104>
			tbl = fp->cltbl;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c6:	1d1a      	adds	r2, r3, #4
 80100c8:	627a      	str	r2, [r7, #36]	; 0x24
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	617b      	str	r3, [r7, #20]
 80100ce:	2302      	movs	r3, #2
 80100d0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	689b      	ldr	r3, [r3, #8]
 80100d6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d03a      	beq.n	8010154 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80100de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e0:	613b      	str	r3, [r7, #16]
 80100e2:	2300      	movs	r3, #0
 80100e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e8:	3302      	adds	r3, #2
 80100ea:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f2:	3301      	adds	r3, #1
 80100f4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fe f8c7 	bl	800e28e <get_fat>
 8010100:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	2b01      	cmp	r3, #1
 8010106:	d804      	bhi.n	8010112 <f_lseek+0xa2>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2202      	movs	r2, #2
 801010c:	755a      	strb	r2, [r3, #21]
 801010e:	2302      	movs	r3, #2
 8010110:	e1ce      	b.n	80104b0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010118:	d104      	bne.n	8010124 <f_lseek+0xb4>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2201      	movs	r2, #1
 801011e:	755a      	strb	r2, [r3, #21]
 8010120:	2301      	movs	r3, #1
 8010122:	e1c5      	b.n	80104b0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	3301      	adds	r3, #1
 8010128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801012a:	429a      	cmp	r2, r3
 801012c:	d0de      	beq.n	80100ec <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801012e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	429a      	cmp	r2, r3
 8010134:	d809      	bhi.n	801014a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010138:	1d1a      	adds	r2, r3, #4
 801013a:	627a      	str	r2, [r7, #36]	; 0x24
 801013c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	1d1a      	adds	r2, r3, #4
 8010144:	627a      	str	r2, [r7, #36]	; 0x24
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	699b      	ldr	r3, [r3, #24]
 801014e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010150:	429a      	cmp	r2, r3
 8010152:	d3c4      	bcc.n	80100de <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801015a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801015c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	429a      	cmp	r2, r3
 8010162:	d803      	bhi.n	801016c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	2200      	movs	r2, #0
 8010168:	601a      	str	r2, [r3, #0]
 801016a:	e19f      	b.n	80104ac <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801016c:	2311      	movs	r3, #17
 801016e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010172:	e19b      	b.n	80104ac <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	429a      	cmp	r2, r3
 801017c:	d902      	bls.n	8010184 <f_lseek+0x114>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 818d 	beq.w	80104ac <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	3b01      	subs	r3, #1
 8010196:	4619      	mov	r1, r3
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7fe fb5c 	bl	800e856 <clmt_clust>
 801019e:	4602      	mov	r2, r0
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	69db      	ldr	r3, [r3, #28]
 80101aa:	4619      	mov	r1, r3
 80101ac:	4610      	mov	r0, r2
 80101ae:	f7fe f84f 	bl	800e250 <clust2sect>
 80101b2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d104      	bne.n	80101c4 <f_lseek+0x154>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2202      	movs	r2, #2
 80101be:	755a      	strb	r2, [r3, #21]
 80101c0:	2302      	movs	r3, #2
 80101c2:	e175      	b.n	80104b0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	8992      	ldrh	r2, [r2, #12]
 80101cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80101d0:	68ba      	ldr	r2, [r7, #8]
 80101d2:	8952      	ldrh	r2, [r2, #10]
 80101d4:	3a01      	subs	r2, #1
 80101d6:	4013      	ands	r3, r2
 80101d8:	69ba      	ldr	r2, [r7, #24]
 80101da:	4413      	add	r3, r2
 80101dc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	699b      	ldr	r3, [r3, #24]
 80101e2:	68ba      	ldr	r2, [r7, #8]
 80101e4:	8992      	ldrh	r2, [r2, #12]
 80101e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80101ea:	fb02 f201 	mul.w	r2, r2, r1
 80101ee:	1a9b      	subs	r3, r3, r2
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f000 815b 	beq.w	80104ac <f_lseek+0x43c>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a1b      	ldr	r3, [r3, #32]
 80101fa:	69ba      	ldr	r2, [r7, #24]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	f000 8155 	beq.w	80104ac <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	7d1b      	ldrb	r3, [r3, #20]
 8010206:	b25b      	sxtb	r3, r3
 8010208:	2b00      	cmp	r3, #0
 801020a:	da18      	bge.n	801023e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	7858      	ldrb	r0, [r3, #1]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6a1a      	ldr	r2, [r3, #32]
 801021a:	2301      	movs	r3, #1
 801021c:	f7fd fc8c 	bl	800db38 <disk_write>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d004      	beq.n	8010230 <f_lseek+0x1c0>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	755a      	strb	r2, [r3, #21]
 801022c:	2301      	movs	r3, #1
 801022e:	e13f      	b.n	80104b0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	7d1b      	ldrb	r3, [r3, #20]
 8010234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010238:	b2da      	uxtb	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	7858      	ldrb	r0, [r3, #1]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010248:	2301      	movs	r3, #1
 801024a:	69ba      	ldr	r2, [r7, #24]
 801024c:	f7fd fc54 	bl	800daf8 <disk_read>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <f_lseek+0x1f0>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2201      	movs	r2, #1
 801025a:	755a      	strb	r2, [r3, #21]
 801025c:	2301      	movs	r3, #1
 801025e:	e127      	b.n	80104b0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	69ba      	ldr	r2, [r7, #24]
 8010264:	621a      	str	r2, [r3, #32]
 8010266:	e121      	b.n	80104ac <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	683a      	ldr	r2, [r7, #0]
 801026e:	429a      	cmp	r2, r3
 8010270:	d908      	bls.n	8010284 <f_lseek+0x214>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	7d1b      	ldrb	r3, [r3, #20]
 8010276:	f003 0302 	and.w	r3, r3, #2
 801027a:	2b00      	cmp	r3, #0
 801027c:	d102      	bne.n	8010284 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	699b      	ldr	r3, [r3, #24]
 8010288:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801028a:	2300      	movs	r3, #0
 801028c:	637b      	str	r3, [r7, #52]	; 0x34
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010292:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 80b5 	beq.w	8010406 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	895b      	ldrh	r3, [r3, #10]
 80102a0:	461a      	mov	r2, r3
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	899b      	ldrh	r3, [r3, #12]
 80102a6:	fb03 f302 	mul.w	r3, r3, r2
 80102aa:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80102ac:	6a3b      	ldr	r3, [r7, #32]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d01b      	beq.n	80102ea <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	1e5a      	subs	r2, r3, #1
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80102bc:	6a3b      	ldr	r3, [r7, #32]
 80102be:	1e59      	subs	r1, r3, #1
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d30f      	bcc.n	80102ea <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	1e5a      	subs	r2, r3, #1
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	425b      	negs	r3, r3
 80102d2:	401a      	ands	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	699b      	ldr	r3, [r3, #24]
 80102dc:	683a      	ldr	r2, [r7, #0]
 80102de:	1ad3      	subs	r3, r2, r3
 80102e0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	69db      	ldr	r3, [r3, #28]
 80102e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80102e8:	e022      	b.n	8010330 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80102f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d119      	bne.n	801032a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2100      	movs	r1, #0
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fe fa13 	bl	800e726 <create_chain>
 8010300:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010304:	2b01      	cmp	r3, #1
 8010306:	d104      	bne.n	8010312 <f_lseek+0x2a2>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2202      	movs	r2, #2
 801030c:	755a      	strb	r2, [r3, #21]
 801030e:	2302      	movs	r3, #2
 8010310:	e0ce      	b.n	80104b0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010318:	d104      	bne.n	8010324 <f_lseek+0x2b4>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2201      	movs	r2, #1
 801031e:	755a      	strb	r2, [r3, #21]
 8010320:	2301      	movs	r3, #1
 8010322:	e0c5      	b.n	80104b0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010328:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801032e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010332:	2b00      	cmp	r3, #0
 8010334:	d067      	beq.n	8010406 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010336:	e03a      	b.n	80103ae <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010338:	683a      	ldr	r2, [r7, #0]
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	603b      	str	r3, [r7, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	699a      	ldr	r2, [r3, #24]
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	441a      	add	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	7d1b      	ldrb	r3, [r3, #20]
 8010350:	f003 0302 	and.w	r3, r3, #2
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00b      	beq.n	8010370 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801035c:	4618      	mov	r0, r3
 801035e:	f7fe f9e2 	bl	800e726 <create_chain>
 8010362:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010366:	2b00      	cmp	r3, #0
 8010368:	d108      	bne.n	801037c <f_lseek+0x30c>
							ofs = 0; break;
 801036a:	2300      	movs	r3, #0
 801036c:	603b      	str	r3, [r7, #0]
 801036e:	e022      	b.n	80103b6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010374:	4618      	mov	r0, r3
 8010376:	f7fd ff8a 	bl	800e28e <get_fat>
 801037a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801037c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010382:	d104      	bne.n	801038e <f_lseek+0x31e>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2201      	movs	r2, #1
 8010388:	755a      	strb	r2, [r3, #21]
 801038a:	2301      	movs	r3, #1
 801038c:	e090      	b.n	80104b0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801038e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010390:	2b01      	cmp	r3, #1
 8010392:	d904      	bls.n	801039e <f_lseek+0x32e>
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	699b      	ldr	r3, [r3, #24]
 8010398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801039a:	429a      	cmp	r2, r3
 801039c:	d304      	bcc.n	80103a8 <f_lseek+0x338>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2202      	movs	r2, #2
 80103a2:	755a      	strb	r2, [r3, #21]
 80103a4:	2302      	movs	r3, #2
 80103a6:	e083      	b.n	80104b0 <f_lseek+0x440>
					fp->clust = clst;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103ac:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80103ae:	683a      	ldr	r2, [r7, #0]
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d8c0      	bhi.n	8010338 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	699a      	ldr	r2, [r3, #24]
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	441a      	add	r2, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	899b      	ldrh	r3, [r3, #12]
 80103c6:	461a      	mov	r2, r3
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80103ce:	fb02 f201 	mul.w	r2, r2, r1
 80103d2:	1a9b      	subs	r3, r3, r2
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d016      	beq.n	8010406 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fd ff37 	bl	800e250 <clust2sect>
 80103e2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80103e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d104      	bne.n	80103f4 <f_lseek+0x384>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2202      	movs	r2, #2
 80103ee:	755a      	strb	r2, [r3, #21]
 80103f0:	2302      	movs	r3, #2
 80103f2:	e05d      	b.n	80104b0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	899b      	ldrh	r3, [r3, #12]
 80103f8:	461a      	mov	r2, r3
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010402:	4413      	add	r3, r2
 8010404:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	699a      	ldr	r2, [r3, #24]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	429a      	cmp	r2, r3
 8010410:	d90a      	bls.n	8010428 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	699a      	ldr	r2, [r3, #24]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	7d1b      	ldrb	r3, [r3, #20]
 801041e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010422:	b2da      	uxtb	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	8992      	ldrh	r2, [r2, #12]
 8010430:	fbb3 f1f2 	udiv	r1, r3, r2
 8010434:	fb02 f201 	mul.w	r2, r2, r1
 8010438:	1a9b      	subs	r3, r3, r2
 801043a:	2b00      	cmp	r3, #0
 801043c:	d036      	beq.n	80104ac <f_lseek+0x43c>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a1b      	ldr	r3, [r3, #32]
 8010442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010444:	429a      	cmp	r2, r3
 8010446:	d031      	beq.n	80104ac <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	7d1b      	ldrb	r3, [r3, #20]
 801044c:	b25b      	sxtb	r3, r3
 801044e:	2b00      	cmp	r3, #0
 8010450:	da18      	bge.n	8010484 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	7858      	ldrb	r0, [r3, #1]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6a1a      	ldr	r2, [r3, #32]
 8010460:	2301      	movs	r3, #1
 8010462:	f7fd fb69 	bl	800db38 <disk_write>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d004      	beq.n	8010476 <f_lseek+0x406>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2201      	movs	r2, #1
 8010470:	755a      	strb	r2, [r3, #21]
 8010472:	2301      	movs	r3, #1
 8010474:	e01c      	b.n	80104b0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7d1b      	ldrb	r3, [r3, #20]
 801047a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801047e:	b2da      	uxtb	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	7858      	ldrb	r0, [r3, #1]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801048e:	2301      	movs	r3, #1
 8010490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010492:	f7fd fb31 	bl	800daf8 <disk_read>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d004      	beq.n	80104a6 <f_lseek+0x436>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2201      	movs	r2, #1
 80104a0:	755a      	strb	r2, [r3, #21]
 80104a2:	2301      	movs	r3, #1
 80104a4:	e004      	b.n	80104b0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104aa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80104ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3740      	adds	r7, #64	; 0x40
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b086      	sub	sp, #24
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <f_opendir+0x14>
 80104c8:	2309      	movs	r3, #9
 80104ca:	e064      	b.n	8010596 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80104d0:	f107 010c 	add.w	r1, r7, #12
 80104d4:	463b      	mov	r3, r7
 80104d6:	2200      	movs	r2, #0
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe fec1 	bl	800f260 <find_volume>
 80104de:	4603      	mov	r3, r0
 80104e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80104e2:	7dfb      	ldrb	r3, [r7, #23]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d14f      	bne.n	8010588 <f_opendir+0xd0>
		obj->fs = fs;
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	4619      	mov	r1, r3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f7fe fda4 	bl	800f040 <follow_path>
 80104f8:	4603      	mov	r3, r0
 80104fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80104fc:	7dfb      	ldrb	r3, [r7, #23]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d13d      	bne.n	801057e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010508:	b25b      	sxtb	r3, r3
 801050a:	2b00      	cmp	r3, #0
 801050c:	db12      	blt.n	8010534 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	799b      	ldrb	r3, [r3, #6]
 8010512:	f003 0310 	and.w	r3, r3, #16
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00a      	beq.n	8010530 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801051a:	68fa      	ldr	r2, [r7, #12]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a1b      	ldr	r3, [r3, #32]
 8010520:	4619      	mov	r1, r3
 8010522:	4610      	mov	r0, r2
 8010524:	f7fe fb75 	bl	800ec12 <ld_clust>
 8010528:	4602      	mov	r2, r0
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	609a      	str	r2, [r3, #8]
 801052e:	e001      	b.n	8010534 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010530:	2305      	movs	r3, #5
 8010532:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010534:	7dfb      	ldrb	r3, [r7, #23]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d121      	bne.n	801057e <f_opendir+0xc6>
				obj->id = fs->id;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	88da      	ldrh	r2, [r3, #6]
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010542:	2100      	movs	r1, #0
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7fe f9be 	bl	800e8c6 <dir_sdi>
 801054a:	4603      	mov	r3, r0
 801054c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801054e:	7dfb      	ldrb	r3, [r7, #23]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d114      	bne.n	801057e <f_opendir+0xc6>
					if (obj->sclust) {
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	689b      	ldr	r3, [r3, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00d      	beq.n	8010578 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801055c:	2100      	movs	r1, #0
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7fd fca6 	bl	800deb0 <inc_lock>
 8010564:	4602      	mov	r2, r0
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	691b      	ldr	r3, [r3, #16]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d105      	bne.n	801057e <f_opendir+0xc6>
 8010572:	2312      	movs	r3, #18
 8010574:	75fb      	strb	r3, [r7, #23]
 8010576:	e002      	b.n	801057e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	2200      	movs	r2, #0
 801057c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801057e:	7dfb      	ldrb	r3, [r7, #23]
 8010580:	2b04      	cmp	r3, #4
 8010582:	d101      	bne.n	8010588 <f_opendir+0xd0>
 8010584:	2305      	movs	r3, #5
 8010586:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010588:	7dfb      	ldrb	r3, [r7, #23]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d002      	beq.n	8010594 <f_opendir+0xdc>
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010594:	7dfb      	ldrb	r3, [r7, #23]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3718      	adds	r7, #24
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b084      	sub	sp, #16
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f107 0208 	add.w	r2, r7, #8
 80105ae:	4611      	mov	r1, r2
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff f8d9 	bl	800f768 <validate>
 80105b6:	4603      	mov	r3, r0
 80105b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80105ba:	7bfb      	ldrb	r3, [r7, #15]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d126      	bne.n	801060e <f_readdir+0x70>
		if (!fno) {
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d106      	bne.n	80105d4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80105c6:	2100      	movs	r1, #0
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7fe f97c 	bl	800e8c6 <dir_sdi>
 80105ce:	4603      	mov	r3, r0
 80105d0:	73fb      	strb	r3, [r7, #15]
 80105d2:	e01c      	b.n	801060e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80105d4:	2100      	movs	r1, #0
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f7fe fb5a 	bl	800ec90 <dir_read>
 80105dc:	4603      	mov	r3, r0
 80105de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
 80105e2:	2b04      	cmp	r3, #4
 80105e4:	d101      	bne.n	80105ea <f_readdir+0x4c>
 80105e6:	2300      	movs	r3, #0
 80105e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80105ea:	7bfb      	ldrb	r3, [r7, #15]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d10e      	bne.n	801060e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80105f0:	6839      	ldr	r1, [r7, #0]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7fe fc30 	bl	800ee58 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80105f8:	2100      	movs	r1, #0
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7fe f9ec 	bl	800e9d8 <dir_next>
 8010600:	4603      	mov	r3, r0
 8010602:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010604:	7bfb      	ldrb	r3, [r7, #15]
 8010606:	2b04      	cmp	r3, #4
 8010608:	d101      	bne.n	801060e <f_readdir+0x70>
 801060a:	2300      	movs	r3, #0
 801060c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b092      	sub	sp, #72	; 0x48
 801061c:	af00      	add	r7, sp, #0
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010624:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010628:	f107 030c 	add.w	r3, r7, #12
 801062c:	2200      	movs	r2, #0
 801062e:	4618      	mov	r0, r3
 8010630:	f7fe fe16 	bl	800f260 <find_volume>
 8010634:	4603      	mov	r3, r0
 8010636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801063a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801063e:	2b00      	cmp	r3, #0
 8010640:	f040 8099 	bne.w	8010776 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801064a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064c:	695a      	ldr	r2, [r3, #20]
 801064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	3b02      	subs	r3, #2
 8010654:	429a      	cmp	r2, r3
 8010656:	d804      	bhi.n	8010662 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065a:	695a      	ldr	r2, [r3, #20]
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	e089      	b.n	8010776 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010662:	2300      	movs	r3, #0
 8010664:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	2b01      	cmp	r3, #1
 801066c:	d128      	bne.n	80106c0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801066e:	2302      	movs	r3, #2
 8010670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010674:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010676:	f107 0314 	add.w	r3, r7, #20
 801067a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801067c:	4618      	mov	r0, r3
 801067e:	f7fd fe06 	bl	800e28e <get_fat>
 8010682:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801068a:	d103      	bne.n	8010694 <f_getfree+0x7c>
 801068c:	2301      	movs	r3, #1
 801068e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010692:	e063      	b.n	801075c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	2b01      	cmp	r3, #1
 8010698:	d103      	bne.n	80106a2 <f_getfree+0x8a>
 801069a:	2302      	movs	r3, #2
 801069c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80106a0:	e05c      	b.n	801075c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80106a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d102      	bne.n	80106ae <f_getfree+0x96>
 80106a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106aa:	3301      	adds	r3, #1
 80106ac:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80106ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106b0:	3301      	adds	r3, #1
 80106b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d3db      	bcc.n	8010676 <f_getfree+0x5e>
 80106be:	e04d      	b.n	801075c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80106c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c2:	699b      	ldr	r3, [r3, #24]
 80106c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ca:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80106cc:	2300      	movs	r3, #0
 80106ce:	637b      	str	r3, [r7, #52]	; 0x34
 80106d0:	2300      	movs	r3, #0
 80106d2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80106d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d113      	bne.n	8010702 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80106da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80106e2:	4619      	mov	r1, r3
 80106e4:	f7fd fd16 	bl	800e114 <move_window>
 80106e8:	4603      	mov	r3, r0
 80106ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80106ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d131      	bne.n	801075a <f_getfree+0x142>
							p = fs->win;
 80106f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f8:	3334      	adds	r3, #52	; 0x34
 80106fa:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80106fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fe:	899b      	ldrh	r3, [r3, #12]
 8010700:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	2b02      	cmp	r3, #2
 8010708:	d10f      	bne.n	801072a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801070a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801070c:	f7fd fa52 	bl	800dbb4 <ld_word>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d102      	bne.n	801071c <f_getfree+0x104>
 8010716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010718:	3301      	adds	r3, #1
 801071a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801071c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071e:	3302      	adds	r3, #2
 8010720:	633b      	str	r3, [r7, #48]	; 0x30
 8010722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010724:	3b02      	subs	r3, #2
 8010726:	637b      	str	r3, [r7, #52]	; 0x34
 8010728:	e010      	b.n	801074c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801072a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801072c:	f7fd fa5a 	bl	800dbe4 <ld_dword>
 8010730:	4603      	mov	r3, r0
 8010732:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010736:	2b00      	cmp	r3, #0
 8010738:	d102      	bne.n	8010740 <f_getfree+0x128>
 801073a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801073c:	3301      	adds	r3, #1
 801073e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010742:	3304      	adds	r3, #4
 8010744:	633b      	str	r3, [r7, #48]	; 0x30
 8010746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010748:	3b04      	subs	r3, #4
 801074a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801074c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801074e:	3b01      	subs	r3, #1
 8010750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010754:	2b00      	cmp	r3, #0
 8010756:	d1bd      	bne.n	80106d4 <f_getfree+0xbc>
 8010758:	e000      	b.n	801075c <f_getfree+0x144>
							if (res != FR_OK) break;
 801075a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010760:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010766:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076a:	791a      	ldrb	r2, [r3, #4]
 801076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076e:	f042 0201 	orr.w	r2, r2, #1
 8010772:	b2d2      	uxtb	r2, r2
 8010774:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010776:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801077a:	4618      	mov	r0, r3
 801077c:	3748      	adds	r7, #72	; 0x48
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b084      	sub	sp, #16
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	460b      	mov	r3, r1
 801078c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801078e:	78fb      	ldrb	r3, [r7, #3]
 8010790:	2b0a      	cmp	r3, #10
 8010792:	d103      	bne.n	801079c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010794:	210d      	movs	r1, #13
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff fff3 	bl	8010782 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	db25      	blt.n	80107f4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	60fa      	str	r2, [r7, #12]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	4413      	add	r3, r2
 80107b2:	78fa      	ldrb	r2, [r7, #3]
 80107b4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b3c      	cmp	r3, #60	; 0x3c
 80107ba:	dd12      	ble.n	80107e2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6818      	ldr	r0, [r3, #0]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f103 010c 	add.w	r1, r3, #12
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	f107 0308 	add.w	r3, r7, #8
 80107cc:	f7ff fa14 	bl	800fbf8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80107d0:	68ba      	ldr	r2, [r7, #8]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d101      	bne.n	80107dc <putc_bfd+0x5a>
 80107d8:	2300      	movs	r3, #0
 80107da:	e001      	b.n	80107e0 <putc_bfd+0x5e>
 80107dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107e0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	1c5a      	adds	r2, r3, #1
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	609a      	str	r2, [r3, #8]
 80107f2:	e000      	b.n	80107f6 <putc_bfd+0x74>
	if (i < 0) return;
 80107f4:	bf00      	nop
}
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	db17      	blt.n	801083c <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6818      	ldr	r0, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f103 010c 	add.w	r1, r3, #12
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	461a      	mov	r2, r3
 801081c:	f107 030c 	add.w	r3, r7, #12
 8010820:	f7ff f9ea 	bl	800fbf8 <f_write>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d108      	bne.n	801083c <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	461a      	mov	r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	429a      	cmp	r2, r3
 8010834:	d102      	bne.n	801083c <putc_flush+0x40>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	e001      	b.n	8010840 <putc_flush+0x44>
	return EOF;
 801083c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010840:	4618      	mov	r0, r3
 8010842:	3710      	adds	r7, #16
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	683a      	ldr	r2, [r7, #0]
 8010856:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	605a      	str	r2, [r3, #4]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	685a      	ldr	r2, [r3, #4]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	609a      	str	r2, [r3, #8]
}
 8010866:	bf00      	nop
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b096      	sub	sp, #88	; 0x58
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801087c:	f107 030c 	add.w	r3, r7, #12
 8010880:	6839      	ldr	r1, [r7, #0]
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff ffe0 	bl	8010848 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8010888:	e009      	b.n	801089e <f_puts+0x2c>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	1c5a      	adds	r2, r3, #1
 801088e:	607a      	str	r2, [r7, #4]
 8010890:	781a      	ldrb	r2, [r3, #0]
 8010892:	f107 030c 	add.w	r3, r7, #12
 8010896:	4611      	mov	r1, r2
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff ff72 	bl	8010782 <putc_bfd>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d1f1      	bne.n	801088a <f_puts+0x18>
	return putc_flush(&pb);
 80108a6:	f107 030c 	add.w	r3, r7, #12
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7ff ffa6 	bl	80107fc <putc_flush>
 80108b0:	4603      	mov	r3, r0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3758      	adds	r7, #88	; 0x58
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
	...

080108bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108bc:	b480      	push	{r7}
 80108be:	b087      	sub	sp, #28
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	4613      	mov	r3, r2
 80108c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108ca:	2301      	movs	r3, #1
 80108cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80108d2:	4b1f      	ldr	r3, [pc, #124]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108d4:	7a5b      	ldrb	r3, [r3, #9]
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d131      	bne.n	8010940 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108dc:	4b1c      	ldr	r3, [pc, #112]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108de:	7a5b      	ldrb	r3, [r3, #9]
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	461a      	mov	r2, r3
 80108e4:	4b1a      	ldr	r3, [pc, #104]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108e6:	2100      	movs	r1, #0
 80108e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80108ea:	4b19      	ldr	r3, [pc, #100]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108ec:	7a5b      	ldrb	r3, [r3, #9]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	4a17      	ldr	r2, [pc, #92]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	4413      	add	r3, r2
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80108fa:	4b15      	ldr	r3, [pc, #84]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 80108fc:	7a5b      	ldrb	r3, [r3, #9]
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	461a      	mov	r2, r3
 8010902:	4b13      	ldr	r3, [pc, #76]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 8010904:	4413      	add	r3, r2
 8010906:	79fa      	ldrb	r2, [r7, #7]
 8010908:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801090a:	4b11      	ldr	r3, [pc, #68]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 801090c:	7a5b      	ldrb	r3, [r3, #9]
 801090e:	b2db      	uxtb	r3, r3
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	b2d1      	uxtb	r1, r2
 8010914:	4a0e      	ldr	r2, [pc, #56]	; (8010950 <FATFS_LinkDriverEx+0x94>)
 8010916:	7251      	strb	r1, [r2, #9]
 8010918:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801091a:	7dbb      	ldrb	r3, [r7, #22]
 801091c:	3330      	adds	r3, #48	; 0x30
 801091e:	b2da      	uxtb	r2, r3
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	3301      	adds	r3, #1
 8010928:	223a      	movs	r2, #58	; 0x3a
 801092a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	3302      	adds	r3, #2
 8010930:	222f      	movs	r2, #47	; 0x2f
 8010932:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	3303      	adds	r3, #3
 8010938:	2200      	movs	r2, #0
 801093a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801093c:	2300      	movs	r3, #0
 801093e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010940:	7dfb      	ldrb	r3, [r7, #23]
}
 8010942:	4618      	mov	r0, r3
 8010944:	371c      	adds	r7, #28
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	20000860 	.word	0x20000860

08010954 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801095e:	2200      	movs	r2, #0
 8010960:	6839      	ldr	r1, [r7, #0]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff ffaa 	bl	80108bc <FATFS_LinkDriverEx>
 8010968:	4603      	mov	r3, r0
}
 801096a:	4618      	mov	r0, r3
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
	...

08010974 <__errno>:
 8010974:	4b01      	ldr	r3, [pc, #4]	; (801097c <__errno+0x8>)
 8010976:	6818      	ldr	r0, [r3, #0]
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	20000154 	.word	0x20000154

08010980 <__libc_init_array>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	4e0d      	ldr	r6, [pc, #52]	; (80109b8 <__libc_init_array+0x38>)
 8010984:	4c0d      	ldr	r4, [pc, #52]	; (80109bc <__libc_init_array+0x3c>)
 8010986:	1ba4      	subs	r4, r4, r6
 8010988:	10a4      	asrs	r4, r4, #2
 801098a:	2500      	movs	r5, #0
 801098c:	42a5      	cmp	r5, r4
 801098e:	d109      	bne.n	80109a4 <__libc_init_array+0x24>
 8010990:	4e0b      	ldr	r6, [pc, #44]	; (80109c0 <__libc_init_array+0x40>)
 8010992:	4c0c      	ldr	r4, [pc, #48]	; (80109c4 <__libc_init_array+0x44>)
 8010994:	f004 fb66 	bl	8015064 <_init>
 8010998:	1ba4      	subs	r4, r4, r6
 801099a:	10a4      	asrs	r4, r4, #2
 801099c:	2500      	movs	r5, #0
 801099e:	42a5      	cmp	r5, r4
 80109a0:	d105      	bne.n	80109ae <__libc_init_array+0x2e>
 80109a2:	bd70      	pop	{r4, r5, r6, pc}
 80109a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80109a8:	4798      	blx	r3
 80109aa:	3501      	adds	r5, #1
 80109ac:	e7ee      	b.n	801098c <__libc_init_array+0xc>
 80109ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80109b2:	4798      	blx	r3
 80109b4:	3501      	adds	r5, #1
 80109b6:	e7f2      	b.n	801099e <__libc_init_array+0x1e>
 80109b8:	08015ed0 	.word	0x08015ed0
 80109bc:	08015ed0 	.word	0x08015ed0
 80109c0:	08015ed0 	.word	0x08015ed0
 80109c4:	08015ed4 	.word	0x08015ed4

080109c8 <memcpy>:
 80109c8:	b510      	push	{r4, lr}
 80109ca:	1e43      	subs	r3, r0, #1
 80109cc:	440a      	add	r2, r1
 80109ce:	4291      	cmp	r1, r2
 80109d0:	d100      	bne.n	80109d4 <memcpy+0xc>
 80109d2:	bd10      	pop	{r4, pc}
 80109d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109dc:	e7f7      	b.n	80109ce <memcpy+0x6>

080109de <memset>:
 80109de:	4402      	add	r2, r0
 80109e0:	4603      	mov	r3, r0
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d100      	bne.n	80109e8 <memset+0xa>
 80109e6:	4770      	bx	lr
 80109e8:	f803 1b01 	strb.w	r1, [r3], #1
 80109ec:	e7f9      	b.n	80109e2 <memset+0x4>

080109ee <__cvt>:
 80109ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109f2:	ec55 4b10 	vmov	r4, r5, d0
 80109f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80109f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80109fc:	2d00      	cmp	r5, #0
 80109fe:	460e      	mov	r6, r1
 8010a00:	4691      	mov	r9, r2
 8010a02:	4619      	mov	r1, r3
 8010a04:	bfb8      	it	lt
 8010a06:	4622      	movlt	r2, r4
 8010a08:	462b      	mov	r3, r5
 8010a0a:	f027 0720 	bic.w	r7, r7, #32
 8010a0e:	bfbb      	ittet	lt
 8010a10:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010a14:	461d      	movlt	r5, r3
 8010a16:	2300      	movge	r3, #0
 8010a18:	232d      	movlt	r3, #45	; 0x2d
 8010a1a:	bfb8      	it	lt
 8010a1c:	4614      	movlt	r4, r2
 8010a1e:	2f46      	cmp	r7, #70	; 0x46
 8010a20:	700b      	strb	r3, [r1, #0]
 8010a22:	d004      	beq.n	8010a2e <__cvt+0x40>
 8010a24:	2f45      	cmp	r7, #69	; 0x45
 8010a26:	d100      	bne.n	8010a2a <__cvt+0x3c>
 8010a28:	3601      	adds	r6, #1
 8010a2a:	2102      	movs	r1, #2
 8010a2c:	e000      	b.n	8010a30 <__cvt+0x42>
 8010a2e:	2103      	movs	r1, #3
 8010a30:	ab03      	add	r3, sp, #12
 8010a32:	9301      	str	r3, [sp, #4]
 8010a34:	ab02      	add	r3, sp, #8
 8010a36:	9300      	str	r3, [sp, #0]
 8010a38:	4632      	mov	r2, r6
 8010a3a:	4653      	mov	r3, sl
 8010a3c:	ec45 4b10 	vmov	d0, r4, r5
 8010a40:	f000 fe1a 	bl	8011678 <_dtoa_r>
 8010a44:	2f47      	cmp	r7, #71	; 0x47
 8010a46:	4680      	mov	r8, r0
 8010a48:	d102      	bne.n	8010a50 <__cvt+0x62>
 8010a4a:	f019 0f01 	tst.w	r9, #1
 8010a4e:	d026      	beq.n	8010a9e <__cvt+0xb0>
 8010a50:	2f46      	cmp	r7, #70	; 0x46
 8010a52:	eb08 0906 	add.w	r9, r8, r6
 8010a56:	d111      	bne.n	8010a7c <__cvt+0x8e>
 8010a58:	f898 3000 	ldrb.w	r3, [r8]
 8010a5c:	2b30      	cmp	r3, #48	; 0x30
 8010a5e:	d10a      	bne.n	8010a76 <__cvt+0x88>
 8010a60:	2200      	movs	r2, #0
 8010a62:	2300      	movs	r3, #0
 8010a64:	4620      	mov	r0, r4
 8010a66:	4629      	mov	r1, r5
 8010a68:	f7f0 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a6c:	b918      	cbnz	r0, 8010a76 <__cvt+0x88>
 8010a6e:	f1c6 0601 	rsb	r6, r6, #1
 8010a72:	f8ca 6000 	str.w	r6, [sl]
 8010a76:	f8da 3000 	ldr.w	r3, [sl]
 8010a7a:	4499      	add	r9, r3
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2300      	movs	r3, #0
 8010a80:	4620      	mov	r0, r4
 8010a82:	4629      	mov	r1, r5
 8010a84:	f7f0 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a88:	b938      	cbnz	r0, 8010a9a <__cvt+0xac>
 8010a8a:	2230      	movs	r2, #48	; 0x30
 8010a8c:	9b03      	ldr	r3, [sp, #12]
 8010a8e:	454b      	cmp	r3, r9
 8010a90:	d205      	bcs.n	8010a9e <__cvt+0xb0>
 8010a92:	1c59      	adds	r1, r3, #1
 8010a94:	9103      	str	r1, [sp, #12]
 8010a96:	701a      	strb	r2, [r3, #0]
 8010a98:	e7f8      	b.n	8010a8c <__cvt+0x9e>
 8010a9a:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a9e:	9b03      	ldr	r3, [sp, #12]
 8010aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010aa2:	eba3 0308 	sub.w	r3, r3, r8
 8010aa6:	4640      	mov	r0, r8
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	b004      	add	sp, #16
 8010aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010ab0 <__exponent>:
 8010ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ab2:	2900      	cmp	r1, #0
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	bfba      	itte	lt
 8010ab8:	4249      	neglt	r1, r1
 8010aba:	232d      	movlt	r3, #45	; 0x2d
 8010abc:	232b      	movge	r3, #43	; 0x2b
 8010abe:	2909      	cmp	r1, #9
 8010ac0:	f804 2b02 	strb.w	r2, [r4], #2
 8010ac4:	7043      	strb	r3, [r0, #1]
 8010ac6:	dd20      	ble.n	8010b0a <__exponent+0x5a>
 8010ac8:	f10d 0307 	add.w	r3, sp, #7
 8010acc:	461f      	mov	r7, r3
 8010ace:	260a      	movs	r6, #10
 8010ad0:	fb91 f5f6 	sdiv	r5, r1, r6
 8010ad4:	fb06 1115 	mls	r1, r6, r5, r1
 8010ad8:	3130      	adds	r1, #48	; 0x30
 8010ada:	2d09      	cmp	r5, #9
 8010adc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010ae0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8010ae4:	4629      	mov	r1, r5
 8010ae6:	dc09      	bgt.n	8010afc <__exponent+0x4c>
 8010ae8:	3130      	adds	r1, #48	; 0x30
 8010aea:	3b02      	subs	r3, #2
 8010aec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010af0:	42bb      	cmp	r3, r7
 8010af2:	4622      	mov	r2, r4
 8010af4:	d304      	bcc.n	8010b00 <__exponent+0x50>
 8010af6:	1a10      	subs	r0, r2, r0
 8010af8:	b003      	add	sp, #12
 8010afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010afc:	4613      	mov	r3, r2
 8010afe:	e7e7      	b.n	8010ad0 <__exponent+0x20>
 8010b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b04:	f804 2b01 	strb.w	r2, [r4], #1
 8010b08:	e7f2      	b.n	8010af0 <__exponent+0x40>
 8010b0a:	2330      	movs	r3, #48	; 0x30
 8010b0c:	4419      	add	r1, r3
 8010b0e:	7083      	strb	r3, [r0, #2]
 8010b10:	1d02      	adds	r2, r0, #4
 8010b12:	70c1      	strb	r1, [r0, #3]
 8010b14:	e7ef      	b.n	8010af6 <__exponent+0x46>
	...

08010b18 <_printf_float>:
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	b08d      	sub	sp, #52	; 0x34
 8010b1e:	460c      	mov	r4, r1
 8010b20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010b24:	4616      	mov	r6, r2
 8010b26:	461f      	mov	r7, r3
 8010b28:	4605      	mov	r5, r0
 8010b2a:	f001 fcd7 	bl	80124dc <_localeconv_r>
 8010b2e:	6803      	ldr	r3, [r0, #0]
 8010b30:	9304      	str	r3, [sp, #16]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ef fb4c 	bl	80001d0 <strlen>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8010b40:	9005      	str	r0, [sp, #20]
 8010b42:	3307      	adds	r3, #7
 8010b44:	f023 0307 	bic.w	r3, r3, #7
 8010b48:	f103 0208 	add.w	r2, r3, #8
 8010b4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010b50:	f8d4 b000 	ldr.w	fp, [r4]
 8010b54:	f8c8 2000 	str.w	r2, [r8]
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010b60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010b64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010b68:	9307      	str	r3, [sp, #28]
 8010b6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8010b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b72:	4ba7      	ldr	r3, [pc, #668]	; (8010e10 <_printf_float+0x2f8>)
 8010b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b78:	f7ef ffd8 	bl	8000b2c <__aeabi_dcmpun>
 8010b7c:	bb70      	cbnz	r0, 8010bdc <_printf_float+0xc4>
 8010b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b82:	4ba3      	ldr	r3, [pc, #652]	; (8010e10 <_printf_float+0x2f8>)
 8010b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b88:	f7ef ffb2 	bl	8000af0 <__aeabi_dcmple>
 8010b8c:	bb30      	cbnz	r0, 8010bdc <_printf_float+0xc4>
 8010b8e:	2200      	movs	r2, #0
 8010b90:	2300      	movs	r3, #0
 8010b92:	4640      	mov	r0, r8
 8010b94:	4649      	mov	r1, r9
 8010b96:	f7ef ffa1 	bl	8000adc <__aeabi_dcmplt>
 8010b9a:	b110      	cbz	r0, 8010ba2 <_printf_float+0x8a>
 8010b9c:	232d      	movs	r3, #45	; 0x2d
 8010b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ba2:	4a9c      	ldr	r2, [pc, #624]	; (8010e14 <_printf_float+0x2fc>)
 8010ba4:	4b9c      	ldr	r3, [pc, #624]	; (8010e18 <_printf_float+0x300>)
 8010ba6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010baa:	bf8c      	ite	hi
 8010bac:	4690      	movhi	r8, r2
 8010bae:	4698      	movls	r8, r3
 8010bb0:	2303      	movs	r3, #3
 8010bb2:	f02b 0204 	bic.w	r2, fp, #4
 8010bb6:	6123      	str	r3, [r4, #16]
 8010bb8:	6022      	str	r2, [r4, #0]
 8010bba:	f04f 0900 	mov.w	r9, #0
 8010bbe:	9700      	str	r7, [sp, #0]
 8010bc0:	4633      	mov	r3, r6
 8010bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8010bc4:	4621      	mov	r1, r4
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f000 f9e6 	bl	8010f98 <_printf_common>
 8010bcc:	3001      	adds	r0, #1
 8010bce:	f040 808d 	bne.w	8010cec <_printf_float+0x1d4>
 8010bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bd6:	b00d      	add	sp, #52	; 0x34
 8010bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bdc:	4642      	mov	r2, r8
 8010bde:	464b      	mov	r3, r9
 8010be0:	4640      	mov	r0, r8
 8010be2:	4649      	mov	r1, r9
 8010be4:	f7ef ffa2 	bl	8000b2c <__aeabi_dcmpun>
 8010be8:	b110      	cbz	r0, 8010bf0 <_printf_float+0xd8>
 8010bea:	4a8c      	ldr	r2, [pc, #560]	; (8010e1c <_printf_float+0x304>)
 8010bec:	4b8c      	ldr	r3, [pc, #560]	; (8010e20 <_printf_float+0x308>)
 8010bee:	e7da      	b.n	8010ba6 <_printf_float+0x8e>
 8010bf0:	6861      	ldr	r1, [r4, #4]
 8010bf2:	1c4b      	adds	r3, r1, #1
 8010bf4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010bf8:	a80a      	add	r0, sp, #40	; 0x28
 8010bfa:	d13e      	bne.n	8010c7a <_printf_float+0x162>
 8010bfc:	2306      	movs	r3, #6
 8010bfe:	6063      	str	r3, [r4, #4]
 8010c00:	2300      	movs	r3, #0
 8010c02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010c06:	ab09      	add	r3, sp, #36	; 0x24
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	ec49 8b10 	vmov	d0, r8, r9
 8010c0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c12:	6022      	str	r2, [r4, #0]
 8010c14:	f8cd a004 	str.w	sl, [sp, #4]
 8010c18:	6861      	ldr	r1, [r4, #4]
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	f7ff fee7 	bl	80109ee <__cvt>
 8010c20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010c24:	2b47      	cmp	r3, #71	; 0x47
 8010c26:	4680      	mov	r8, r0
 8010c28:	d109      	bne.n	8010c3e <_printf_float+0x126>
 8010c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c2c:	1cd8      	adds	r0, r3, #3
 8010c2e:	db02      	blt.n	8010c36 <_printf_float+0x11e>
 8010c30:	6862      	ldr	r2, [r4, #4]
 8010c32:	4293      	cmp	r3, r2
 8010c34:	dd47      	ble.n	8010cc6 <_printf_float+0x1ae>
 8010c36:	f1aa 0a02 	sub.w	sl, sl, #2
 8010c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8010c3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c44:	d824      	bhi.n	8010c90 <_printf_float+0x178>
 8010c46:	3901      	subs	r1, #1
 8010c48:	4652      	mov	r2, sl
 8010c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c4e:	9109      	str	r1, [sp, #36]	; 0x24
 8010c50:	f7ff ff2e 	bl	8010ab0 <__exponent>
 8010c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c56:	1813      	adds	r3, r2, r0
 8010c58:	2a01      	cmp	r2, #1
 8010c5a:	4681      	mov	r9, r0
 8010c5c:	6123      	str	r3, [r4, #16]
 8010c5e:	dc02      	bgt.n	8010c66 <_printf_float+0x14e>
 8010c60:	6822      	ldr	r2, [r4, #0]
 8010c62:	07d1      	lsls	r1, r2, #31
 8010c64:	d501      	bpl.n	8010c6a <_printf_float+0x152>
 8010c66:	3301      	adds	r3, #1
 8010c68:	6123      	str	r3, [r4, #16]
 8010c6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d0a5      	beq.n	8010bbe <_printf_float+0xa6>
 8010c72:	232d      	movs	r3, #45	; 0x2d
 8010c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c78:	e7a1      	b.n	8010bbe <_printf_float+0xa6>
 8010c7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010c7e:	f000 8177 	beq.w	8010f70 <_printf_float+0x458>
 8010c82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010c86:	d1bb      	bne.n	8010c00 <_printf_float+0xe8>
 8010c88:	2900      	cmp	r1, #0
 8010c8a:	d1b9      	bne.n	8010c00 <_printf_float+0xe8>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e7b6      	b.n	8010bfe <_printf_float+0xe6>
 8010c90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010c94:	d119      	bne.n	8010cca <_printf_float+0x1b2>
 8010c96:	2900      	cmp	r1, #0
 8010c98:	6863      	ldr	r3, [r4, #4]
 8010c9a:	dd0c      	ble.n	8010cb6 <_printf_float+0x19e>
 8010c9c:	6121      	str	r1, [r4, #16]
 8010c9e:	b913      	cbnz	r3, 8010ca6 <_printf_float+0x18e>
 8010ca0:	6822      	ldr	r2, [r4, #0]
 8010ca2:	07d2      	lsls	r2, r2, #31
 8010ca4:	d502      	bpl.n	8010cac <_printf_float+0x194>
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	440b      	add	r3, r1
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cae:	65a3      	str	r3, [r4, #88]	; 0x58
 8010cb0:	f04f 0900 	mov.w	r9, #0
 8010cb4:	e7d9      	b.n	8010c6a <_printf_float+0x152>
 8010cb6:	b913      	cbnz	r3, 8010cbe <_printf_float+0x1a6>
 8010cb8:	6822      	ldr	r2, [r4, #0]
 8010cba:	07d0      	lsls	r0, r2, #31
 8010cbc:	d501      	bpl.n	8010cc2 <_printf_float+0x1aa>
 8010cbe:	3302      	adds	r3, #2
 8010cc0:	e7f3      	b.n	8010caa <_printf_float+0x192>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e7f1      	b.n	8010caa <_printf_float+0x192>
 8010cc6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010cca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	db05      	blt.n	8010cde <_printf_float+0x1c6>
 8010cd2:	6822      	ldr	r2, [r4, #0]
 8010cd4:	6123      	str	r3, [r4, #16]
 8010cd6:	07d1      	lsls	r1, r2, #31
 8010cd8:	d5e8      	bpl.n	8010cac <_printf_float+0x194>
 8010cda:	3301      	adds	r3, #1
 8010cdc:	e7e5      	b.n	8010caa <_printf_float+0x192>
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	bfd4      	ite	le
 8010ce2:	f1c3 0302 	rsble	r3, r3, #2
 8010ce6:	2301      	movgt	r3, #1
 8010ce8:	4413      	add	r3, r2
 8010cea:	e7de      	b.n	8010caa <_printf_float+0x192>
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	055a      	lsls	r2, r3, #21
 8010cf0:	d407      	bmi.n	8010d02 <_printf_float+0x1ea>
 8010cf2:	6923      	ldr	r3, [r4, #16]
 8010cf4:	4642      	mov	r2, r8
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	47b8      	blx	r7
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	d12b      	bne.n	8010d58 <_printf_float+0x240>
 8010d00:	e767      	b.n	8010bd2 <_printf_float+0xba>
 8010d02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010d06:	f240 80dc 	bls.w	8010ec2 <_printf_float+0x3aa>
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d12:	f7ef fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d033      	beq.n	8010d82 <_printf_float+0x26a>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	4a41      	ldr	r2, [pc, #260]	; (8010e24 <_printf_float+0x30c>)
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4628      	mov	r0, r5
 8010d22:	47b8      	blx	r7
 8010d24:	3001      	adds	r0, #1
 8010d26:	f43f af54 	beq.w	8010bd2 <_printf_float+0xba>
 8010d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	db02      	blt.n	8010d38 <_printf_float+0x220>
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	07d8      	lsls	r0, r3, #31
 8010d36:	d50f      	bpl.n	8010d58 <_printf_float+0x240>
 8010d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d3c:	4631      	mov	r1, r6
 8010d3e:	4628      	mov	r0, r5
 8010d40:	47b8      	blx	r7
 8010d42:	3001      	adds	r0, #1
 8010d44:	f43f af45 	beq.w	8010bd2 <_printf_float+0xba>
 8010d48:	f04f 0800 	mov.w	r8, #0
 8010d4c:	f104 091a 	add.w	r9, r4, #26
 8010d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d52:	3b01      	subs	r3, #1
 8010d54:	4543      	cmp	r3, r8
 8010d56:	dc09      	bgt.n	8010d6c <_printf_float+0x254>
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	079b      	lsls	r3, r3, #30
 8010d5c:	f100 8103 	bmi.w	8010f66 <_printf_float+0x44e>
 8010d60:	68e0      	ldr	r0, [r4, #12]
 8010d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d64:	4298      	cmp	r0, r3
 8010d66:	bfb8      	it	lt
 8010d68:	4618      	movlt	r0, r3
 8010d6a:	e734      	b.n	8010bd6 <_printf_float+0xbe>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	464a      	mov	r2, r9
 8010d70:	4631      	mov	r1, r6
 8010d72:	4628      	mov	r0, r5
 8010d74:	47b8      	blx	r7
 8010d76:	3001      	adds	r0, #1
 8010d78:	f43f af2b 	beq.w	8010bd2 <_printf_float+0xba>
 8010d7c:	f108 0801 	add.w	r8, r8, #1
 8010d80:	e7e6      	b.n	8010d50 <_printf_float+0x238>
 8010d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dc2b      	bgt.n	8010de0 <_printf_float+0x2c8>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	4a26      	ldr	r2, [pc, #152]	; (8010e24 <_printf_float+0x30c>)
 8010d8c:	4631      	mov	r1, r6
 8010d8e:	4628      	mov	r0, r5
 8010d90:	47b8      	blx	r7
 8010d92:	3001      	adds	r0, #1
 8010d94:	f43f af1d 	beq.w	8010bd2 <_printf_float+0xba>
 8010d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9a:	b923      	cbnz	r3, 8010da6 <_printf_float+0x28e>
 8010d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d9e:	b913      	cbnz	r3, 8010da6 <_printf_float+0x28e>
 8010da0:	6823      	ldr	r3, [r4, #0]
 8010da2:	07d9      	lsls	r1, r3, #31
 8010da4:	d5d8      	bpl.n	8010d58 <_printf_float+0x240>
 8010da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010daa:	4631      	mov	r1, r6
 8010dac:	4628      	mov	r0, r5
 8010dae:	47b8      	blx	r7
 8010db0:	3001      	adds	r0, #1
 8010db2:	f43f af0e 	beq.w	8010bd2 <_printf_float+0xba>
 8010db6:	f04f 0900 	mov.w	r9, #0
 8010dba:	f104 0a1a 	add.w	sl, r4, #26
 8010dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc0:	425b      	negs	r3, r3
 8010dc2:	454b      	cmp	r3, r9
 8010dc4:	dc01      	bgt.n	8010dca <_printf_float+0x2b2>
 8010dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dc8:	e794      	b.n	8010cf4 <_printf_float+0x1dc>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	4652      	mov	r2, sl
 8010dce:	4631      	mov	r1, r6
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	47b8      	blx	r7
 8010dd4:	3001      	adds	r0, #1
 8010dd6:	f43f aefc 	beq.w	8010bd2 <_printf_float+0xba>
 8010dda:	f109 0901 	add.w	r9, r9, #1
 8010dde:	e7ee      	b.n	8010dbe <_printf_float+0x2a6>
 8010de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010de4:	429a      	cmp	r2, r3
 8010de6:	bfa8      	it	ge
 8010de8:	461a      	movge	r2, r3
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	4691      	mov	r9, r2
 8010dee:	dd07      	ble.n	8010e00 <_printf_float+0x2e8>
 8010df0:	4613      	mov	r3, r2
 8010df2:	4631      	mov	r1, r6
 8010df4:	4642      	mov	r2, r8
 8010df6:	4628      	mov	r0, r5
 8010df8:	47b8      	blx	r7
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	f43f aee9 	beq.w	8010bd2 <_printf_float+0xba>
 8010e00:	f104 031a 	add.w	r3, r4, #26
 8010e04:	f04f 0b00 	mov.w	fp, #0
 8010e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e0c:	9306      	str	r3, [sp, #24]
 8010e0e:	e015      	b.n	8010e3c <_printf_float+0x324>
 8010e10:	7fefffff 	.word	0x7fefffff
 8010e14:	08015b90 	.word	0x08015b90
 8010e18:	08015b8c 	.word	0x08015b8c
 8010e1c:	08015b98 	.word	0x08015b98
 8010e20:	08015b94 	.word	0x08015b94
 8010e24:	08015b9c 	.word	0x08015b9c
 8010e28:	2301      	movs	r3, #1
 8010e2a:	9a06      	ldr	r2, [sp, #24]
 8010e2c:	4631      	mov	r1, r6
 8010e2e:	4628      	mov	r0, r5
 8010e30:	47b8      	blx	r7
 8010e32:	3001      	adds	r0, #1
 8010e34:	f43f aecd 	beq.w	8010bd2 <_printf_float+0xba>
 8010e38:	f10b 0b01 	add.w	fp, fp, #1
 8010e3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010e40:	ebaa 0309 	sub.w	r3, sl, r9
 8010e44:	455b      	cmp	r3, fp
 8010e46:	dcef      	bgt.n	8010e28 <_printf_float+0x310>
 8010e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	44d0      	add	r8, sl
 8010e50:	db15      	blt.n	8010e7e <_printf_float+0x366>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	07da      	lsls	r2, r3, #31
 8010e56:	d412      	bmi.n	8010e7e <_printf_float+0x366>
 8010e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e5c:	eba3 020a 	sub.w	r2, r3, sl
 8010e60:	eba3 0a01 	sub.w	sl, r3, r1
 8010e64:	4592      	cmp	sl, r2
 8010e66:	bfa8      	it	ge
 8010e68:	4692      	movge	sl, r2
 8010e6a:	f1ba 0f00 	cmp.w	sl, #0
 8010e6e:	dc0e      	bgt.n	8010e8e <_printf_float+0x376>
 8010e70:	f04f 0800 	mov.w	r8, #0
 8010e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e78:	f104 091a 	add.w	r9, r4, #26
 8010e7c:	e019      	b.n	8010eb2 <_printf_float+0x39a>
 8010e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e82:	4631      	mov	r1, r6
 8010e84:	4628      	mov	r0, r5
 8010e86:	47b8      	blx	r7
 8010e88:	3001      	adds	r0, #1
 8010e8a:	d1e5      	bne.n	8010e58 <_printf_float+0x340>
 8010e8c:	e6a1      	b.n	8010bd2 <_printf_float+0xba>
 8010e8e:	4653      	mov	r3, sl
 8010e90:	4642      	mov	r2, r8
 8010e92:	4631      	mov	r1, r6
 8010e94:	4628      	mov	r0, r5
 8010e96:	47b8      	blx	r7
 8010e98:	3001      	adds	r0, #1
 8010e9a:	d1e9      	bne.n	8010e70 <_printf_float+0x358>
 8010e9c:	e699      	b.n	8010bd2 <_printf_float+0xba>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	464a      	mov	r2, r9
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	47b8      	blx	r7
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	f43f ae92 	beq.w	8010bd2 <_printf_float+0xba>
 8010eae:	f108 0801 	add.w	r8, r8, #1
 8010eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010eb6:	1a9b      	subs	r3, r3, r2
 8010eb8:	eba3 030a 	sub.w	r3, r3, sl
 8010ebc:	4543      	cmp	r3, r8
 8010ebe:	dcee      	bgt.n	8010e9e <_printf_float+0x386>
 8010ec0:	e74a      	b.n	8010d58 <_printf_float+0x240>
 8010ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ec4:	2a01      	cmp	r2, #1
 8010ec6:	dc01      	bgt.n	8010ecc <_printf_float+0x3b4>
 8010ec8:	07db      	lsls	r3, r3, #31
 8010eca:	d53a      	bpl.n	8010f42 <_printf_float+0x42a>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	4642      	mov	r2, r8
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	47b8      	blx	r7
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	f43f ae7b 	beq.w	8010bd2 <_printf_float+0xba>
 8010edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ee0:	4631      	mov	r1, r6
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	47b8      	blx	r7
 8010ee6:	3001      	adds	r0, #1
 8010ee8:	f108 0801 	add.w	r8, r8, #1
 8010eec:	f43f ae71 	beq.w	8010bd2 <_printf_float+0xba>
 8010ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010efc:	2300      	movs	r3, #0
 8010efe:	f7ef fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f02:	b9c8      	cbnz	r0, 8010f38 <_printf_float+0x420>
 8010f04:	4653      	mov	r3, sl
 8010f06:	4642      	mov	r2, r8
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	47b8      	blx	r7
 8010f0e:	3001      	adds	r0, #1
 8010f10:	d10e      	bne.n	8010f30 <_printf_float+0x418>
 8010f12:	e65e      	b.n	8010bd2 <_printf_float+0xba>
 8010f14:	2301      	movs	r3, #1
 8010f16:	4652      	mov	r2, sl
 8010f18:	4631      	mov	r1, r6
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	47b8      	blx	r7
 8010f1e:	3001      	adds	r0, #1
 8010f20:	f43f ae57 	beq.w	8010bd2 <_printf_float+0xba>
 8010f24:	f108 0801 	add.w	r8, r8, #1
 8010f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f2a:	3b01      	subs	r3, #1
 8010f2c:	4543      	cmp	r3, r8
 8010f2e:	dcf1      	bgt.n	8010f14 <_printf_float+0x3fc>
 8010f30:	464b      	mov	r3, r9
 8010f32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f36:	e6de      	b.n	8010cf6 <_printf_float+0x1de>
 8010f38:	f04f 0800 	mov.w	r8, #0
 8010f3c:	f104 0a1a 	add.w	sl, r4, #26
 8010f40:	e7f2      	b.n	8010f28 <_printf_float+0x410>
 8010f42:	2301      	movs	r3, #1
 8010f44:	e7df      	b.n	8010f06 <_printf_float+0x3ee>
 8010f46:	2301      	movs	r3, #1
 8010f48:	464a      	mov	r2, r9
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	47b8      	blx	r7
 8010f50:	3001      	adds	r0, #1
 8010f52:	f43f ae3e 	beq.w	8010bd2 <_printf_float+0xba>
 8010f56:	f108 0801 	add.w	r8, r8, #1
 8010f5a:	68e3      	ldr	r3, [r4, #12]
 8010f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	4543      	cmp	r3, r8
 8010f62:	dcf0      	bgt.n	8010f46 <_printf_float+0x42e>
 8010f64:	e6fc      	b.n	8010d60 <_printf_float+0x248>
 8010f66:	f04f 0800 	mov.w	r8, #0
 8010f6a:	f104 0919 	add.w	r9, r4, #25
 8010f6e:	e7f4      	b.n	8010f5a <_printf_float+0x442>
 8010f70:	2900      	cmp	r1, #0
 8010f72:	f43f ae8b 	beq.w	8010c8c <_printf_float+0x174>
 8010f76:	2300      	movs	r3, #0
 8010f78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010f7c:	ab09      	add	r3, sp, #36	; 0x24
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	ec49 8b10 	vmov	d0, r8, r9
 8010f84:	6022      	str	r2, [r4, #0]
 8010f86:	f8cd a004 	str.w	sl, [sp, #4]
 8010f8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f7ff fd2d 	bl	80109ee <__cvt>
 8010f94:	4680      	mov	r8, r0
 8010f96:	e648      	b.n	8010c2a <_printf_float+0x112>

08010f98 <_printf_common>:
 8010f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f9c:	4691      	mov	r9, r2
 8010f9e:	461f      	mov	r7, r3
 8010fa0:	688a      	ldr	r2, [r1, #8]
 8010fa2:	690b      	ldr	r3, [r1, #16]
 8010fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	bfb8      	it	lt
 8010fac:	4613      	movlt	r3, r2
 8010fae:	f8c9 3000 	str.w	r3, [r9]
 8010fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010fb6:	4606      	mov	r6, r0
 8010fb8:	460c      	mov	r4, r1
 8010fba:	b112      	cbz	r2, 8010fc2 <_printf_common+0x2a>
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	f8c9 3000 	str.w	r3, [r9]
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	0699      	lsls	r1, r3, #26
 8010fc6:	bf42      	ittt	mi
 8010fc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010fcc:	3302      	addmi	r3, #2
 8010fce:	f8c9 3000 	strmi.w	r3, [r9]
 8010fd2:	6825      	ldr	r5, [r4, #0]
 8010fd4:	f015 0506 	ands.w	r5, r5, #6
 8010fd8:	d107      	bne.n	8010fea <_printf_common+0x52>
 8010fda:	f104 0a19 	add.w	sl, r4, #25
 8010fde:	68e3      	ldr	r3, [r4, #12]
 8010fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8010fe4:	1a9b      	subs	r3, r3, r2
 8010fe6:	42ab      	cmp	r3, r5
 8010fe8:	dc28      	bgt.n	801103c <_printf_common+0xa4>
 8010fea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010fee:	6822      	ldr	r2, [r4, #0]
 8010ff0:	3300      	adds	r3, #0
 8010ff2:	bf18      	it	ne
 8010ff4:	2301      	movne	r3, #1
 8010ff6:	0692      	lsls	r2, r2, #26
 8010ff8:	d42d      	bmi.n	8011056 <_printf_common+0xbe>
 8010ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ffe:	4639      	mov	r1, r7
 8011000:	4630      	mov	r0, r6
 8011002:	47c0      	blx	r8
 8011004:	3001      	adds	r0, #1
 8011006:	d020      	beq.n	801104a <_printf_common+0xb2>
 8011008:	6823      	ldr	r3, [r4, #0]
 801100a:	68e5      	ldr	r5, [r4, #12]
 801100c:	f8d9 2000 	ldr.w	r2, [r9]
 8011010:	f003 0306 	and.w	r3, r3, #6
 8011014:	2b04      	cmp	r3, #4
 8011016:	bf08      	it	eq
 8011018:	1aad      	subeq	r5, r5, r2
 801101a:	68a3      	ldr	r3, [r4, #8]
 801101c:	6922      	ldr	r2, [r4, #16]
 801101e:	bf0c      	ite	eq
 8011020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011024:	2500      	movne	r5, #0
 8011026:	4293      	cmp	r3, r2
 8011028:	bfc4      	itt	gt
 801102a:	1a9b      	subgt	r3, r3, r2
 801102c:	18ed      	addgt	r5, r5, r3
 801102e:	f04f 0900 	mov.w	r9, #0
 8011032:	341a      	adds	r4, #26
 8011034:	454d      	cmp	r5, r9
 8011036:	d11a      	bne.n	801106e <_printf_common+0xd6>
 8011038:	2000      	movs	r0, #0
 801103a:	e008      	b.n	801104e <_printf_common+0xb6>
 801103c:	2301      	movs	r3, #1
 801103e:	4652      	mov	r2, sl
 8011040:	4639      	mov	r1, r7
 8011042:	4630      	mov	r0, r6
 8011044:	47c0      	blx	r8
 8011046:	3001      	adds	r0, #1
 8011048:	d103      	bne.n	8011052 <_printf_common+0xba>
 801104a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011052:	3501      	adds	r5, #1
 8011054:	e7c3      	b.n	8010fde <_printf_common+0x46>
 8011056:	18e1      	adds	r1, r4, r3
 8011058:	1c5a      	adds	r2, r3, #1
 801105a:	2030      	movs	r0, #48	; 0x30
 801105c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011060:	4422      	add	r2, r4
 8011062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801106a:	3302      	adds	r3, #2
 801106c:	e7c5      	b.n	8010ffa <_printf_common+0x62>
 801106e:	2301      	movs	r3, #1
 8011070:	4622      	mov	r2, r4
 8011072:	4639      	mov	r1, r7
 8011074:	4630      	mov	r0, r6
 8011076:	47c0      	blx	r8
 8011078:	3001      	adds	r0, #1
 801107a:	d0e6      	beq.n	801104a <_printf_common+0xb2>
 801107c:	f109 0901 	add.w	r9, r9, #1
 8011080:	e7d8      	b.n	8011034 <_printf_common+0x9c>
	...

08011084 <_printf_i>:
 8011084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801108c:	460c      	mov	r4, r1
 801108e:	7e09      	ldrb	r1, [r1, #24]
 8011090:	b085      	sub	sp, #20
 8011092:	296e      	cmp	r1, #110	; 0x6e
 8011094:	4617      	mov	r7, r2
 8011096:	4606      	mov	r6, r0
 8011098:	4698      	mov	r8, r3
 801109a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801109c:	f000 80b3 	beq.w	8011206 <_printf_i+0x182>
 80110a0:	d822      	bhi.n	80110e8 <_printf_i+0x64>
 80110a2:	2963      	cmp	r1, #99	; 0x63
 80110a4:	d036      	beq.n	8011114 <_printf_i+0x90>
 80110a6:	d80a      	bhi.n	80110be <_printf_i+0x3a>
 80110a8:	2900      	cmp	r1, #0
 80110aa:	f000 80b9 	beq.w	8011220 <_printf_i+0x19c>
 80110ae:	2958      	cmp	r1, #88	; 0x58
 80110b0:	f000 8083 	beq.w	80111ba <_printf_i+0x136>
 80110b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80110bc:	e032      	b.n	8011124 <_printf_i+0xa0>
 80110be:	2964      	cmp	r1, #100	; 0x64
 80110c0:	d001      	beq.n	80110c6 <_printf_i+0x42>
 80110c2:	2969      	cmp	r1, #105	; 0x69
 80110c4:	d1f6      	bne.n	80110b4 <_printf_i+0x30>
 80110c6:	6820      	ldr	r0, [r4, #0]
 80110c8:	6813      	ldr	r3, [r2, #0]
 80110ca:	0605      	lsls	r5, r0, #24
 80110cc:	f103 0104 	add.w	r1, r3, #4
 80110d0:	d52a      	bpl.n	8011128 <_printf_i+0xa4>
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	6011      	str	r1, [r2, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	da03      	bge.n	80110e2 <_printf_i+0x5e>
 80110da:	222d      	movs	r2, #45	; 0x2d
 80110dc:	425b      	negs	r3, r3
 80110de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80110e2:	486f      	ldr	r0, [pc, #444]	; (80112a0 <_printf_i+0x21c>)
 80110e4:	220a      	movs	r2, #10
 80110e6:	e039      	b.n	801115c <_printf_i+0xd8>
 80110e8:	2973      	cmp	r1, #115	; 0x73
 80110ea:	f000 809d 	beq.w	8011228 <_printf_i+0x1a4>
 80110ee:	d808      	bhi.n	8011102 <_printf_i+0x7e>
 80110f0:	296f      	cmp	r1, #111	; 0x6f
 80110f2:	d020      	beq.n	8011136 <_printf_i+0xb2>
 80110f4:	2970      	cmp	r1, #112	; 0x70
 80110f6:	d1dd      	bne.n	80110b4 <_printf_i+0x30>
 80110f8:	6823      	ldr	r3, [r4, #0]
 80110fa:	f043 0320 	orr.w	r3, r3, #32
 80110fe:	6023      	str	r3, [r4, #0]
 8011100:	e003      	b.n	801110a <_printf_i+0x86>
 8011102:	2975      	cmp	r1, #117	; 0x75
 8011104:	d017      	beq.n	8011136 <_printf_i+0xb2>
 8011106:	2978      	cmp	r1, #120	; 0x78
 8011108:	d1d4      	bne.n	80110b4 <_printf_i+0x30>
 801110a:	2378      	movs	r3, #120	; 0x78
 801110c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011110:	4864      	ldr	r0, [pc, #400]	; (80112a4 <_printf_i+0x220>)
 8011112:	e055      	b.n	80111c0 <_printf_i+0x13c>
 8011114:	6813      	ldr	r3, [r2, #0]
 8011116:	1d19      	adds	r1, r3, #4
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	6011      	str	r1, [r2, #0]
 801111c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011124:	2301      	movs	r3, #1
 8011126:	e08c      	b.n	8011242 <_printf_i+0x1be>
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	6011      	str	r1, [r2, #0]
 801112c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011130:	bf18      	it	ne
 8011132:	b21b      	sxthne	r3, r3
 8011134:	e7cf      	b.n	80110d6 <_printf_i+0x52>
 8011136:	6813      	ldr	r3, [r2, #0]
 8011138:	6825      	ldr	r5, [r4, #0]
 801113a:	1d18      	adds	r0, r3, #4
 801113c:	6010      	str	r0, [r2, #0]
 801113e:	0628      	lsls	r0, r5, #24
 8011140:	d501      	bpl.n	8011146 <_printf_i+0xc2>
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	e002      	b.n	801114c <_printf_i+0xc8>
 8011146:	0668      	lsls	r0, r5, #25
 8011148:	d5fb      	bpl.n	8011142 <_printf_i+0xbe>
 801114a:	881b      	ldrh	r3, [r3, #0]
 801114c:	4854      	ldr	r0, [pc, #336]	; (80112a0 <_printf_i+0x21c>)
 801114e:	296f      	cmp	r1, #111	; 0x6f
 8011150:	bf14      	ite	ne
 8011152:	220a      	movne	r2, #10
 8011154:	2208      	moveq	r2, #8
 8011156:	2100      	movs	r1, #0
 8011158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801115c:	6865      	ldr	r5, [r4, #4]
 801115e:	60a5      	str	r5, [r4, #8]
 8011160:	2d00      	cmp	r5, #0
 8011162:	f2c0 8095 	blt.w	8011290 <_printf_i+0x20c>
 8011166:	6821      	ldr	r1, [r4, #0]
 8011168:	f021 0104 	bic.w	r1, r1, #4
 801116c:	6021      	str	r1, [r4, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d13d      	bne.n	80111ee <_printf_i+0x16a>
 8011172:	2d00      	cmp	r5, #0
 8011174:	f040 808e 	bne.w	8011294 <_printf_i+0x210>
 8011178:	4665      	mov	r5, ip
 801117a:	2a08      	cmp	r2, #8
 801117c:	d10b      	bne.n	8011196 <_printf_i+0x112>
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	07db      	lsls	r3, r3, #31
 8011182:	d508      	bpl.n	8011196 <_printf_i+0x112>
 8011184:	6923      	ldr	r3, [r4, #16]
 8011186:	6862      	ldr	r2, [r4, #4]
 8011188:	429a      	cmp	r2, r3
 801118a:	bfde      	ittt	le
 801118c:	2330      	movle	r3, #48	; 0x30
 801118e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011192:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011196:	ebac 0305 	sub.w	r3, ip, r5
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	f8cd 8000 	str.w	r8, [sp]
 80111a0:	463b      	mov	r3, r7
 80111a2:	aa03      	add	r2, sp, #12
 80111a4:	4621      	mov	r1, r4
 80111a6:	4630      	mov	r0, r6
 80111a8:	f7ff fef6 	bl	8010f98 <_printf_common>
 80111ac:	3001      	adds	r0, #1
 80111ae:	d14d      	bne.n	801124c <_printf_i+0x1c8>
 80111b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111b4:	b005      	add	sp, #20
 80111b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ba:	4839      	ldr	r0, [pc, #228]	; (80112a0 <_printf_i+0x21c>)
 80111bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80111c0:	6813      	ldr	r3, [r2, #0]
 80111c2:	6821      	ldr	r1, [r4, #0]
 80111c4:	1d1d      	adds	r5, r3, #4
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	6015      	str	r5, [r2, #0]
 80111ca:	060a      	lsls	r2, r1, #24
 80111cc:	d50b      	bpl.n	80111e6 <_printf_i+0x162>
 80111ce:	07ca      	lsls	r2, r1, #31
 80111d0:	bf44      	itt	mi
 80111d2:	f041 0120 	orrmi.w	r1, r1, #32
 80111d6:	6021      	strmi	r1, [r4, #0]
 80111d8:	b91b      	cbnz	r3, 80111e2 <_printf_i+0x15e>
 80111da:	6822      	ldr	r2, [r4, #0]
 80111dc:	f022 0220 	bic.w	r2, r2, #32
 80111e0:	6022      	str	r2, [r4, #0]
 80111e2:	2210      	movs	r2, #16
 80111e4:	e7b7      	b.n	8011156 <_printf_i+0xd2>
 80111e6:	064d      	lsls	r5, r1, #25
 80111e8:	bf48      	it	mi
 80111ea:	b29b      	uxthmi	r3, r3
 80111ec:	e7ef      	b.n	80111ce <_printf_i+0x14a>
 80111ee:	4665      	mov	r5, ip
 80111f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80111f4:	fb02 3311 	mls	r3, r2, r1, r3
 80111f8:	5cc3      	ldrb	r3, [r0, r3]
 80111fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80111fe:	460b      	mov	r3, r1
 8011200:	2900      	cmp	r1, #0
 8011202:	d1f5      	bne.n	80111f0 <_printf_i+0x16c>
 8011204:	e7b9      	b.n	801117a <_printf_i+0xf6>
 8011206:	6813      	ldr	r3, [r2, #0]
 8011208:	6825      	ldr	r5, [r4, #0]
 801120a:	6961      	ldr	r1, [r4, #20]
 801120c:	1d18      	adds	r0, r3, #4
 801120e:	6010      	str	r0, [r2, #0]
 8011210:	0628      	lsls	r0, r5, #24
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	d501      	bpl.n	801121a <_printf_i+0x196>
 8011216:	6019      	str	r1, [r3, #0]
 8011218:	e002      	b.n	8011220 <_printf_i+0x19c>
 801121a:	066a      	lsls	r2, r5, #25
 801121c:	d5fb      	bpl.n	8011216 <_printf_i+0x192>
 801121e:	8019      	strh	r1, [r3, #0]
 8011220:	2300      	movs	r3, #0
 8011222:	6123      	str	r3, [r4, #16]
 8011224:	4665      	mov	r5, ip
 8011226:	e7b9      	b.n	801119c <_printf_i+0x118>
 8011228:	6813      	ldr	r3, [r2, #0]
 801122a:	1d19      	adds	r1, r3, #4
 801122c:	6011      	str	r1, [r2, #0]
 801122e:	681d      	ldr	r5, [r3, #0]
 8011230:	6862      	ldr	r2, [r4, #4]
 8011232:	2100      	movs	r1, #0
 8011234:	4628      	mov	r0, r5
 8011236:	f7ee ffd3 	bl	80001e0 <memchr>
 801123a:	b108      	cbz	r0, 8011240 <_printf_i+0x1bc>
 801123c:	1b40      	subs	r0, r0, r5
 801123e:	6060      	str	r0, [r4, #4]
 8011240:	6863      	ldr	r3, [r4, #4]
 8011242:	6123      	str	r3, [r4, #16]
 8011244:	2300      	movs	r3, #0
 8011246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801124a:	e7a7      	b.n	801119c <_printf_i+0x118>
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	462a      	mov	r2, r5
 8011250:	4639      	mov	r1, r7
 8011252:	4630      	mov	r0, r6
 8011254:	47c0      	blx	r8
 8011256:	3001      	adds	r0, #1
 8011258:	d0aa      	beq.n	80111b0 <_printf_i+0x12c>
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	079b      	lsls	r3, r3, #30
 801125e:	d413      	bmi.n	8011288 <_printf_i+0x204>
 8011260:	68e0      	ldr	r0, [r4, #12]
 8011262:	9b03      	ldr	r3, [sp, #12]
 8011264:	4298      	cmp	r0, r3
 8011266:	bfb8      	it	lt
 8011268:	4618      	movlt	r0, r3
 801126a:	e7a3      	b.n	80111b4 <_printf_i+0x130>
 801126c:	2301      	movs	r3, #1
 801126e:	464a      	mov	r2, r9
 8011270:	4639      	mov	r1, r7
 8011272:	4630      	mov	r0, r6
 8011274:	47c0      	blx	r8
 8011276:	3001      	adds	r0, #1
 8011278:	d09a      	beq.n	80111b0 <_printf_i+0x12c>
 801127a:	3501      	adds	r5, #1
 801127c:	68e3      	ldr	r3, [r4, #12]
 801127e:	9a03      	ldr	r2, [sp, #12]
 8011280:	1a9b      	subs	r3, r3, r2
 8011282:	42ab      	cmp	r3, r5
 8011284:	dcf2      	bgt.n	801126c <_printf_i+0x1e8>
 8011286:	e7eb      	b.n	8011260 <_printf_i+0x1dc>
 8011288:	2500      	movs	r5, #0
 801128a:	f104 0919 	add.w	r9, r4, #25
 801128e:	e7f5      	b.n	801127c <_printf_i+0x1f8>
 8011290:	2b00      	cmp	r3, #0
 8011292:	d1ac      	bne.n	80111ee <_printf_i+0x16a>
 8011294:	7803      	ldrb	r3, [r0, #0]
 8011296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801129a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801129e:	e76c      	b.n	801117a <_printf_i+0xf6>
 80112a0:	08015b9e 	.word	0x08015b9e
 80112a4:	08015baf 	.word	0x08015baf

080112a8 <iprintf>:
 80112a8:	b40f      	push	{r0, r1, r2, r3}
 80112aa:	4b0a      	ldr	r3, [pc, #40]	; (80112d4 <iprintf+0x2c>)
 80112ac:	b513      	push	{r0, r1, r4, lr}
 80112ae:	681c      	ldr	r4, [r3, #0]
 80112b0:	b124      	cbz	r4, 80112bc <iprintf+0x14>
 80112b2:	69a3      	ldr	r3, [r4, #24]
 80112b4:	b913      	cbnz	r3, 80112bc <iprintf+0x14>
 80112b6:	4620      	mov	r0, r4
 80112b8:	f001 f886 	bl	80123c8 <__sinit>
 80112bc:	ab05      	add	r3, sp, #20
 80112be:	9a04      	ldr	r2, [sp, #16]
 80112c0:	68a1      	ldr	r1, [r4, #8]
 80112c2:	9301      	str	r3, [sp, #4]
 80112c4:	4620      	mov	r0, r4
 80112c6:	f001 fea3 	bl	8013010 <_vfiprintf_r>
 80112ca:	b002      	add	sp, #8
 80112cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112d0:	b004      	add	sp, #16
 80112d2:	4770      	bx	lr
 80112d4:	20000154 	.word	0x20000154

080112d8 <_puts_r>:
 80112d8:	b570      	push	{r4, r5, r6, lr}
 80112da:	460e      	mov	r6, r1
 80112dc:	4605      	mov	r5, r0
 80112de:	b118      	cbz	r0, 80112e8 <_puts_r+0x10>
 80112e0:	6983      	ldr	r3, [r0, #24]
 80112e2:	b90b      	cbnz	r3, 80112e8 <_puts_r+0x10>
 80112e4:	f001 f870 	bl	80123c8 <__sinit>
 80112e8:	69ab      	ldr	r3, [r5, #24]
 80112ea:	68ac      	ldr	r4, [r5, #8]
 80112ec:	b913      	cbnz	r3, 80112f4 <_puts_r+0x1c>
 80112ee:	4628      	mov	r0, r5
 80112f0:	f001 f86a 	bl	80123c8 <__sinit>
 80112f4:	4b23      	ldr	r3, [pc, #140]	; (8011384 <_puts_r+0xac>)
 80112f6:	429c      	cmp	r4, r3
 80112f8:	d117      	bne.n	801132a <_puts_r+0x52>
 80112fa:	686c      	ldr	r4, [r5, #4]
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	071b      	lsls	r3, r3, #28
 8011300:	d51d      	bpl.n	801133e <_puts_r+0x66>
 8011302:	6923      	ldr	r3, [r4, #16]
 8011304:	b1db      	cbz	r3, 801133e <_puts_r+0x66>
 8011306:	3e01      	subs	r6, #1
 8011308:	68a3      	ldr	r3, [r4, #8]
 801130a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801130e:	3b01      	subs	r3, #1
 8011310:	60a3      	str	r3, [r4, #8]
 8011312:	b9e9      	cbnz	r1, 8011350 <_puts_r+0x78>
 8011314:	2b00      	cmp	r3, #0
 8011316:	da2e      	bge.n	8011376 <_puts_r+0x9e>
 8011318:	4622      	mov	r2, r4
 801131a:	210a      	movs	r1, #10
 801131c:	4628      	mov	r0, r5
 801131e:	f000 f85f 	bl	80113e0 <__swbuf_r>
 8011322:	3001      	adds	r0, #1
 8011324:	d011      	beq.n	801134a <_puts_r+0x72>
 8011326:	200a      	movs	r0, #10
 8011328:	e011      	b.n	801134e <_puts_r+0x76>
 801132a:	4b17      	ldr	r3, [pc, #92]	; (8011388 <_puts_r+0xb0>)
 801132c:	429c      	cmp	r4, r3
 801132e:	d101      	bne.n	8011334 <_puts_r+0x5c>
 8011330:	68ac      	ldr	r4, [r5, #8]
 8011332:	e7e3      	b.n	80112fc <_puts_r+0x24>
 8011334:	4b15      	ldr	r3, [pc, #84]	; (801138c <_puts_r+0xb4>)
 8011336:	429c      	cmp	r4, r3
 8011338:	bf08      	it	eq
 801133a:	68ec      	ldreq	r4, [r5, #12]
 801133c:	e7de      	b.n	80112fc <_puts_r+0x24>
 801133e:	4621      	mov	r1, r4
 8011340:	4628      	mov	r0, r5
 8011342:	f000 f89f 	bl	8011484 <__swsetup_r>
 8011346:	2800      	cmp	r0, #0
 8011348:	d0dd      	beq.n	8011306 <_puts_r+0x2e>
 801134a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	2b00      	cmp	r3, #0
 8011352:	da04      	bge.n	801135e <_puts_r+0x86>
 8011354:	69a2      	ldr	r2, [r4, #24]
 8011356:	429a      	cmp	r2, r3
 8011358:	dc06      	bgt.n	8011368 <_puts_r+0x90>
 801135a:	290a      	cmp	r1, #10
 801135c:	d004      	beq.n	8011368 <_puts_r+0x90>
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	1c5a      	adds	r2, r3, #1
 8011362:	6022      	str	r2, [r4, #0]
 8011364:	7019      	strb	r1, [r3, #0]
 8011366:	e7cf      	b.n	8011308 <_puts_r+0x30>
 8011368:	4622      	mov	r2, r4
 801136a:	4628      	mov	r0, r5
 801136c:	f000 f838 	bl	80113e0 <__swbuf_r>
 8011370:	3001      	adds	r0, #1
 8011372:	d1c9      	bne.n	8011308 <_puts_r+0x30>
 8011374:	e7e9      	b.n	801134a <_puts_r+0x72>
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	200a      	movs	r0, #10
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	6022      	str	r2, [r4, #0]
 801137e:	7018      	strb	r0, [r3, #0]
 8011380:	e7e5      	b.n	801134e <_puts_r+0x76>
 8011382:	bf00      	nop
 8011384:	08015bf0 	.word	0x08015bf0
 8011388:	08015c10 	.word	0x08015c10
 801138c:	08015bd0 	.word	0x08015bd0

08011390 <puts>:
 8011390:	4b02      	ldr	r3, [pc, #8]	; (801139c <puts+0xc>)
 8011392:	4601      	mov	r1, r0
 8011394:	6818      	ldr	r0, [r3, #0]
 8011396:	f7ff bf9f 	b.w	80112d8 <_puts_r>
 801139a:	bf00      	nop
 801139c:	20000154 	.word	0x20000154

080113a0 <siprintf>:
 80113a0:	b40e      	push	{r1, r2, r3}
 80113a2:	b500      	push	{lr}
 80113a4:	b09c      	sub	sp, #112	; 0x70
 80113a6:	ab1d      	add	r3, sp, #116	; 0x74
 80113a8:	9002      	str	r0, [sp, #8]
 80113aa:	9006      	str	r0, [sp, #24]
 80113ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113b0:	4809      	ldr	r0, [pc, #36]	; (80113d8 <siprintf+0x38>)
 80113b2:	9107      	str	r1, [sp, #28]
 80113b4:	9104      	str	r1, [sp, #16]
 80113b6:	4909      	ldr	r1, [pc, #36]	; (80113dc <siprintf+0x3c>)
 80113b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80113bc:	9105      	str	r1, [sp, #20]
 80113be:	6800      	ldr	r0, [r0, #0]
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	a902      	add	r1, sp, #8
 80113c4:	f001 fd02 	bl	8012dcc <_svfiprintf_r>
 80113c8:	9b02      	ldr	r3, [sp, #8]
 80113ca:	2200      	movs	r2, #0
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	b01c      	add	sp, #112	; 0x70
 80113d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80113d4:	b003      	add	sp, #12
 80113d6:	4770      	bx	lr
 80113d8:	20000154 	.word	0x20000154
 80113dc:	ffff0208 	.word	0xffff0208

080113e0 <__swbuf_r>:
 80113e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113e2:	460e      	mov	r6, r1
 80113e4:	4614      	mov	r4, r2
 80113e6:	4605      	mov	r5, r0
 80113e8:	b118      	cbz	r0, 80113f2 <__swbuf_r+0x12>
 80113ea:	6983      	ldr	r3, [r0, #24]
 80113ec:	b90b      	cbnz	r3, 80113f2 <__swbuf_r+0x12>
 80113ee:	f000 ffeb 	bl	80123c8 <__sinit>
 80113f2:	4b21      	ldr	r3, [pc, #132]	; (8011478 <__swbuf_r+0x98>)
 80113f4:	429c      	cmp	r4, r3
 80113f6:	d12a      	bne.n	801144e <__swbuf_r+0x6e>
 80113f8:	686c      	ldr	r4, [r5, #4]
 80113fa:	69a3      	ldr	r3, [r4, #24]
 80113fc:	60a3      	str	r3, [r4, #8]
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	071a      	lsls	r2, r3, #28
 8011402:	d52e      	bpl.n	8011462 <__swbuf_r+0x82>
 8011404:	6923      	ldr	r3, [r4, #16]
 8011406:	b363      	cbz	r3, 8011462 <__swbuf_r+0x82>
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	6820      	ldr	r0, [r4, #0]
 801140c:	1ac0      	subs	r0, r0, r3
 801140e:	6963      	ldr	r3, [r4, #20]
 8011410:	b2f6      	uxtb	r6, r6
 8011412:	4283      	cmp	r3, r0
 8011414:	4637      	mov	r7, r6
 8011416:	dc04      	bgt.n	8011422 <__swbuf_r+0x42>
 8011418:	4621      	mov	r1, r4
 801141a:	4628      	mov	r0, r5
 801141c:	f000 ff6a 	bl	80122f4 <_fflush_r>
 8011420:	bb28      	cbnz	r0, 801146e <__swbuf_r+0x8e>
 8011422:	68a3      	ldr	r3, [r4, #8]
 8011424:	3b01      	subs	r3, #1
 8011426:	60a3      	str	r3, [r4, #8]
 8011428:	6823      	ldr	r3, [r4, #0]
 801142a:	1c5a      	adds	r2, r3, #1
 801142c:	6022      	str	r2, [r4, #0]
 801142e:	701e      	strb	r6, [r3, #0]
 8011430:	6963      	ldr	r3, [r4, #20]
 8011432:	3001      	adds	r0, #1
 8011434:	4283      	cmp	r3, r0
 8011436:	d004      	beq.n	8011442 <__swbuf_r+0x62>
 8011438:	89a3      	ldrh	r3, [r4, #12]
 801143a:	07db      	lsls	r3, r3, #31
 801143c:	d519      	bpl.n	8011472 <__swbuf_r+0x92>
 801143e:	2e0a      	cmp	r6, #10
 8011440:	d117      	bne.n	8011472 <__swbuf_r+0x92>
 8011442:	4621      	mov	r1, r4
 8011444:	4628      	mov	r0, r5
 8011446:	f000 ff55 	bl	80122f4 <_fflush_r>
 801144a:	b190      	cbz	r0, 8011472 <__swbuf_r+0x92>
 801144c:	e00f      	b.n	801146e <__swbuf_r+0x8e>
 801144e:	4b0b      	ldr	r3, [pc, #44]	; (801147c <__swbuf_r+0x9c>)
 8011450:	429c      	cmp	r4, r3
 8011452:	d101      	bne.n	8011458 <__swbuf_r+0x78>
 8011454:	68ac      	ldr	r4, [r5, #8]
 8011456:	e7d0      	b.n	80113fa <__swbuf_r+0x1a>
 8011458:	4b09      	ldr	r3, [pc, #36]	; (8011480 <__swbuf_r+0xa0>)
 801145a:	429c      	cmp	r4, r3
 801145c:	bf08      	it	eq
 801145e:	68ec      	ldreq	r4, [r5, #12]
 8011460:	e7cb      	b.n	80113fa <__swbuf_r+0x1a>
 8011462:	4621      	mov	r1, r4
 8011464:	4628      	mov	r0, r5
 8011466:	f000 f80d 	bl	8011484 <__swsetup_r>
 801146a:	2800      	cmp	r0, #0
 801146c:	d0cc      	beq.n	8011408 <__swbuf_r+0x28>
 801146e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011472:	4638      	mov	r0, r7
 8011474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011476:	bf00      	nop
 8011478:	08015bf0 	.word	0x08015bf0
 801147c:	08015c10 	.word	0x08015c10
 8011480:	08015bd0 	.word	0x08015bd0

08011484 <__swsetup_r>:
 8011484:	4b32      	ldr	r3, [pc, #200]	; (8011550 <__swsetup_r+0xcc>)
 8011486:	b570      	push	{r4, r5, r6, lr}
 8011488:	681d      	ldr	r5, [r3, #0]
 801148a:	4606      	mov	r6, r0
 801148c:	460c      	mov	r4, r1
 801148e:	b125      	cbz	r5, 801149a <__swsetup_r+0x16>
 8011490:	69ab      	ldr	r3, [r5, #24]
 8011492:	b913      	cbnz	r3, 801149a <__swsetup_r+0x16>
 8011494:	4628      	mov	r0, r5
 8011496:	f000 ff97 	bl	80123c8 <__sinit>
 801149a:	4b2e      	ldr	r3, [pc, #184]	; (8011554 <__swsetup_r+0xd0>)
 801149c:	429c      	cmp	r4, r3
 801149e:	d10f      	bne.n	80114c0 <__swsetup_r+0x3c>
 80114a0:	686c      	ldr	r4, [r5, #4]
 80114a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	0715      	lsls	r5, r2, #28
 80114aa:	d42c      	bmi.n	8011506 <__swsetup_r+0x82>
 80114ac:	06d0      	lsls	r0, r2, #27
 80114ae:	d411      	bmi.n	80114d4 <__swsetup_r+0x50>
 80114b0:	2209      	movs	r2, #9
 80114b2:	6032      	str	r2, [r6, #0]
 80114b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114b8:	81a3      	strh	r3, [r4, #12]
 80114ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114be:	e03e      	b.n	801153e <__swsetup_r+0xba>
 80114c0:	4b25      	ldr	r3, [pc, #148]	; (8011558 <__swsetup_r+0xd4>)
 80114c2:	429c      	cmp	r4, r3
 80114c4:	d101      	bne.n	80114ca <__swsetup_r+0x46>
 80114c6:	68ac      	ldr	r4, [r5, #8]
 80114c8:	e7eb      	b.n	80114a2 <__swsetup_r+0x1e>
 80114ca:	4b24      	ldr	r3, [pc, #144]	; (801155c <__swsetup_r+0xd8>)
 80114cc:	429c      	cmp	r4, r3
 80114ce:	bf08      	it	eq
 80114d0:	68ec      	ldreq	r4, [r5, #12]
 80114d2:	e7e6      	b.n	80114a2 <__swsetup_r+0x1e>
 80114d4:	0751      	lsls	r1, r2, #29
 80114d6:	d512      	bpl.n	80114fe <__swsetup_r+0x7a>
 80114d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114da:	b141      	cbz	r1, 80114ee <__swsetup_r+0x6a>
 80114dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114e0:	4299      	cmp	r1, r3
 80114e2:	d002      	beq.n	80114ea <__swsetup_r+0x66>
 80114e4:	4630      	mov	r0, r6
 80114e6:	f001 fb6f 	bl	8012bc8 <_free_r>
 80114ea:	2300      	movs	r3, #0
 80114ec:	6363      	str	r3, [r4, #52]	; 0x34
 80114ee:	89a3      	ldrh	r3, [r4, #12]
 80114f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114f4:	81a3      	strh	r3, [r4, #12]
 80114f6:	2300      	movs	r3, #0
 80114f8:	6063      	str	r3, [r4, #4]
 80114fa:	6923      	ldr	r3, [r4, #16]
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	89a3      	ldrh	r3, [r4, #12]
 8011500:	f043 0308 	orr.w	r3, r3, #8
 8011504:	81a3      	strh	r3, [r4, #12]
 8011506:	6923      	ldr	r3, [r4, #16]
 8011508:	b94b      	cbnz	r3, 801151e <__swsetup_r+0x9a>
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011514:	d003      	beq.n	801151e <__swsetup_r+0x9a>
 8011516:	4621      	mov	r1, r4
 8011518:	4630      	mov	r0, r6
 801151a:	f001 f811 	bl	8012540 <__smakebuf_r>
 801151e:	89a2      	ldrh	r2, [r4, #12]
 8011520:	f012 0301 	ands.w	r3, r2, #1
 8011524:	d00c      	beq.n	8011540 <__swsetup_r+0xbc>
 8011526:	2300      	movs	r3, #0
 8011528:	60a3      	str	r3, [r4, #8]
 801152a:	6963      	ldr	r3, [r4, #20]
 801152c:	425b      	negs	r3, r3
 801152e:	61a3      	str	r3, [r4, #24]
 8011530:	6923      	ldr	r3, [r4, #16]
 8011532:	b953      	cbnz	r3, 801154a <__swsetup_r+0xc6>
 8011534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011538:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801153c:	d1ba      	bne.n	80114b4 <__swsetup_r+0x30>
 801153e:	bd70      	pop	{r4, r5, r6, pc}
 8011540:	0792      	lsls	r2, r2, #30
 8011542:	bf58      	it	pl
 8011544:	6963      	ldrpl	r3, [r4, #20]
 8011546:	60a3      	str	r3, [r4, #8]
 8011548:	e7f2      	b.n	8011530 <__swsetup_r+0xac>
 801154a:	2000      	movs	r0, #0
 801154c:	e7f7      	b.n	801153e <__swsetup_r+0xba>
 801154e:	bf00      	nop
 8011550:	20000154 	.word	0x20000154
 8011554:	08015bf0 	.word	0x08015bf0
 8011558:	08015c10 	.word	0x08015c10
 801155c:	08015bd0 	.word	0x08015bd0

08011560 <quorem>:
 8011560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011564:	6903      	ldr	r3, [r0, #16]
 8011566:	690c      	ldr	r4, [r1, #16]
 8011568:	42a3      	cmp	r3, r4
 801156a:	4680      	mov	r8, r0
 801156c:	f2c0 8082 	blt.w	8011674 <quorem+0x114>
 8011570:	3c01      	subs	r4, #1
 8011572:	f101 0714 	add.w	r7, r1, #20
 8011576:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801157a:	f100 0614 	add.w	r6, r0, #20
 801157e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011582:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011586:	eb06 030c 	add.w	r3, r6, ip
 801158a:	3501      	adds	r5, #1
 801158c:	eb07 090c 	add.w	r9, r7, ip
 8011590:	9301      	str	r3, [sp, #4]
 8011592:	fbb0 f5f5 	udiv	r5, r0, r5
 8011596:	b395      	cbz	r5, 80115fe <quorem+0x9e>
 8011598:	f04f 0a00 	mov.w	sl, #0
 801159c:	4638      	mov	r0, r7
 801159e:	46b6      	mov	lr, r6
 80115a0:	46d3      	mov	fp, sl
 80115a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80115a6:	b293      	uxth	r3, r2
 80115a8:	fb05 a303 	mla	r3, r5, r3, sl
 80115ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	ebab 0303 	sub.w	r3, fp, r3
 80115b6:	0c12      	lsrs	r2, r2, #16
 80115b8:	f8de b000 	ldr.w	fp, [lr]
 80115bc:	fb05 a202 	mla	r2, r5, r2, sl
 80115c0:	fa13 f38b 	uxtah	r3, r3, fp
 80115c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80115c8:	fa1f fb82 	uxth.w	fp, r2
 80115cc:	f8de 2000 	ldr.w	r2, [lr]
 80115d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80115d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115d8:	b29b      	uxth	r3, r3
 80115da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115de:	4581      	cmp	r9, r0
 80115e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80115e4:	f84e 3b04 	str.w	r3, [lr], #4
 80115e8:	d2db      	bcs.n	80115a2 <quorem+0x42>
 80115ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80115ee:	b933      	cbnz	r3, 80115fe <quorem+0x9e>
 80115f0:	9b01      	ldr	r3, [sp, #4]
 80115f2:	3b04      	subs	r3, #4
 80115f4:	429e      	cmp	r6, r3
 80115f6:	461a      	mov	r2, r3
 80115f8:	d330      	bcc.n	801165c <quorem+0xfc>
 80115fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80115fe:	4640      	mov	r0, r8
 8011600:	f001 fa0e 	bl	8012a20 <__mcmp>
 8011604:	2800      	cmp	r0, #0
 8011606:	db25      	blt.n	8011654 <quorem+0xf4>
 8011608:	3501      	adds	r5, #1
 801160a:	4630      	mov	r0, r6
 801160c:	f04f 0c00 	mov.w	ip, #0
 8011610:	f857 2b04 	ldr.w	r2, [r7], #4
 8011614:	f8d0 e000 	ldr.w	lr, [r0]
 8011618:	b293      	uxth	r3, r2
 801161a:	ebac 0303 	sub.w	r3, ip, r3
 801161e:	0c12      	lsrs	r2, r2, #16
 8011620:	fa13 f38e 	uxtah	r3, r3, lr
 8011624:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801162c:	b29b      	uxth	r3, r3
 801162e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011632:	45b9      	cmp	r9, r7
 8011634:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011638:	f840 3b04 	str.w	r3, [r0], #4
 801163c:	d2e8      	bcs.n	8011610 <quorem+0xb0>
 801163e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011642:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011646:	b92a      	cbnz	r2, 8011654 <quorem+0xf4>
 8011648:	3b04      	subs	r3, #4
 801164a:	429e      	cmp	r6, r3
 801164c:	461a      	mov	r2, r3
 801164e:	d30b      	bcc.n	8011668 <quorem+0x108>
 8011650:	f8c8 4010 	str.w	r4, [r8, #16]
 8011654:	4628      	mov	r0, r5
 8011656:	b003      	add	sp, #12
 8011658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165c:	6812      	ldr	r2, [r2, #0]
 801165e:	3b04      	subs	r3, #4
 8011660:	2a00      	cmp	r2, #0
 8011662:	d1ca      	bne.n	80115fa <quorem+0x9a>
 8011664:	3c01      	subs	r4, #1
 8011666:	e7c5      	b.n	80115f4 <quorem+0x94>
 8011668:	6812      	ldr	r2, [r2, #0]
 801166a:	3b04      	subs	r3, #4
 801166c:	2a00      	cmp	r2, #0
 801166e:	d1ef      	bne.n	8011650 <quorem+0xf0>
 8011670:	3c01      	subs	r4, #1
 8011672:	e7ea      	b.n	801164a <quorem+0xea>
 8011674:	2000      	movs	r0, #0
 8011676:	e7ee      	b.n	8011656 <quorem+0xf6>

08011678 <_dtoa_r>:
 8011678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	ec57 6b10 	vmov	r6, r7, d0
 8011680:	b097      	sub	sp, #92	; 0x5c
 8011682:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011684:	9106      	str	r1, [sp, #24]
 8011686:	4604      	mov	r4, r0
 8011688:	920b      	str	r2, [sp, #44]	; 0x2c
 801168a:	9312      	str	r3, [sp, #72]	; 0x48
 801168c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011690:	e9cd 6700 	strd	r6, r7, [sp]
 8011694:	b93d      	cbnz	r5, 80116a6 <_dtoa_r+0x2e>
 8011696:	2010      	movs	r0, #16
 8011698:	f000 ff92 	bl	80125c0 <malloc>
 801169c:	6260      	str	r0, [r4, #36]	; 0x24
 801169e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80116a2:	6005      	str	r5, [r0, #0]
 80116a4:	60c5      	str	r5, [r0, #12]
 80116a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116a8:	6819      	ldr	r1, [r3, #0]
 80116aa:	b151      	cbz	r1, 80116c2 <_dtoa_r+0x4a>
 80116ac:	685a      	ldr	r2, [r3, #4]
 80116ae:	604a      	str	r2, [r1, #4]
 80116b0:	2301      	movs	r3, #1
 80116b2:	4093      	lsls	r3, r2
 80116b4:	608b      	str	r3, [r1, #8]
 80116b6:	4620      	mov	r0, r4
 80116b8:	f000 ffd0 	bl	801265c <_Bfree>
 80116bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116be:	2200      	movs	r2, #0
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	1e3b      	subs	r3, r7, #0
 80116c4:	bfbb      	ittet	lt
 80116c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80116ca:	9301      	strlt	r3, [sp, #4]
 80116cc:	2300      	movge	r3, #0
 80116ce:	2201      	movlt	r2, #1
 80116d0:	bfac      	ite	ge
 80116d2:	f8c8 3000 	strge.w	r3, [r8]
 80116d6:	f8c8 2000 	strlt.w	r2, [r8]
 80116da:	4baf      	ldr	r3, [pc, #700]	; (8011998 <_dtoa_r+0x320>)
 80116dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80116e0:	ea33 0308 	bics.w	r3, r3, r8
 80116e4:	d114      	bne.n	8011710 <_dtoa_r+0x98>
 80116e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80116e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	9b00      	ldr	r3, [sp, #0]
 80116f0:	b923      	cbnz	r3, 80116fc <_dtoa_r+0x84>
 80116f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f000 8542 	beq.w	8012180 <_dtoa_r+0xb08>
 80116fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80119ac <_dtoa_r+0x334>
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 8544 	beq.w	8012190 <_dtoa_r+0xb18>
 8011708:	f10b 0303 	add.w	r3, fp, #3
 801170c:	f000 bd3e 	b.w	801218c <_dtoa_r+0xb14>
 8011710:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011714:	2200      	movs	r2, #0
 8011716:	2300      	movs	r3, #0
 8011718:	4630      	mov	r0, r6
 801171a:	4639      	mov	r1, r7
 801171c:	f7ef f9d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011720:	4681      	mov	r9, r0
 8011722:	b168      	cbz	r0, 8011740 <_dtoa_r+0xc8>
 8011724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011726:	2301      	movs	r3, #1
 8011728:	6013      	str	r3, [r2, #0]
 801172a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 8524 	beq.w	801217a <_dtoa_r+0xb02>
 8011732:	4b9a      	ldr	r3, [pc, #616]	; (801199c <_dtoa_r+0x324>)
 8011734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011736:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801173a:	6013      	str	r3, [r2, #0]
 801173c:	f000 bd28 	b.w	8012190 <_dtoa_r+0xb18>
 8011740:	aa14      	add	r2, sp, #80	; 0x50
 8011742:	a915      	add	r1, sp, #84	; 0x54
 8011744:	ec47 6b10 	vmov	d0, r6, r7
 8011748:	4620      	mov	r0, r4
 801174a:	f001 f9e0 	bl	8012b0e <__d2b>
 801174e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011752:	9004      	str	r0, [sp, #16]
 8011754:	2d00      	cmp	r5, #0
 8011756:	d07c      	beq.n	8011852 <_dtoa_r+0x1da>
 8011758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801175c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011760:	46b2      	mov	sl, r6
 8011762:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8011766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801176a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801176e:	2200      	movs	r2, #0
 8011770:	4b8b      	ldr	r3, [pc, #556]	; (80119a0 <_dtoa_r+0x328>)
 8011772:	4650      	mov	r0, sl
 8011774:	4659      	mov	r1, fp
 8011776:	f7ee fd87 	bl	8000288 <__aeabi_dsub>
 801177a:	a381      	add	r3, pc, #516	; (adr r3, 8011980 <_dtoa_r+0x308>)
 801177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011780:	f7ee ff3a 	bl	80005f8 <__aeabi_dmul>
 8011784:	a380      	add	r3, pc, #512	; (adr r3, 8011988 <_dtoa_r+0x310>)
 8011786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178a:	f7ee fd7f 	bl	800028c <__adddf3>
 801178e:	4606      	mov	r6, r0
 8011790:	4628      	mov	r0, r5
 8011792:	460f      	mov	r7, r1
 8011794:	f7ee fec6 	bl	8000524 <__aeabi_i2d>
 8011798:	a37d      	add	r3, pc, #500	; (adr r3, 8011990 <_dtoa_r+0x318>)
 801179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179e:	f7ee ff2b 	bl	80005f8 <__aeabi_dmul>
 80117a2:	4602      	mov	r2, r0
 80117a4:	460b      	mov	r3, r1
 80117a6:	4630      	mov	r0, r6
 80117a8:	4639      	mov	r1, r7
 80117aa:	f7ee fd6f 	bl	800028c <__adddf3>
 80117ae:	4606      	mov	r6, r0
 80117b0:	460f      	mov	r7, r1
 80117b2:	f7ef f9d1 	bl	8000b58 <__aeabi_d2iz>
 80117b6:	2200      	movs	r2, #0
 80117b8:	4682      	mov	sl, r0
 80117ba:	2300      	movs	r3, #0
 80117bc:	4630      	mov	r0, r6
 80117be:	4639      	mov	r1, r7
 80117c0:	f7ef f98c 	bl	8000adc <__aeabi_dcmplt>
 80117c4:	b148      	cbz	r0, 80117da <_dtoa_r+0x162>
 80117c6:	4650      	mov	r0, sl
 80117c8:	f7ee feac 	bl	8000524 <__aeabi_i2d>
 80117cc:	4632      	mov	r2, r6
 80117ce:	463b      	mov	r3, r7
 80117d0:	f7ef f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 80117d4:	b908      	cbnz	r0, 80117da <_dtoa_r+0x162>
 80117d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80117da:	f1ba 0f16 	cmp.w	sl, #22
 80117de:	d859      	bhi.n	8011894 <_dtoa_r+0x21c>
 80117e0:	4970      	ldr	r1, [pc, #448]	; (80119a4 <_dtoa_r+0x32c>)
 80117e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80117e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117ee:	f7ef f993 	bl	8000b18 <__aeabi_dcmpgt>
 80117f2:	2800      	cmp	r0, #0
 80117f4:	d050      	beq.n	8011898 <_dtoa_r+0x220>
 80117f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80117fa:	2300      	movs	r3, #0
 80117fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80117fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011800:	1b5d      	subs	r5, r3, r5
 8011802:	f1b5 0801 	subs.w	r8, r5, #1
 8011806:	bf49      	itett	mi
 8011808:	f1c5 0301 	rsbmi	r3, r5, #1
 801180c:	2300      	movpl	r3, #0
 801180e:	9305      	strmi	r3, [sp, #20]
 8011810:	f04f 0800 	movmi.w	r8, #0
 8011814:	bf58      	it	pl
 8011816:	9305      	strpl	r3, [sp, #20]
 8011818:	f1ba 0f00 	cmp.w	sl, #0
 801181c:	db3e      	blt.n	801189c <_dtoa_r+0x224>
 801181e:	2300      	movs	r3, #0
 8011820:	44d0      	add	r8, sl
 8011822:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011826:	9307      	str	r3, [sp, #28]
 8011828:	9b06      	ldr	r3, [sp, #24]
 801182a:	2b09      	cmp	r3, #9
 801182c:	f200 8090 	bhi.w	8011950 <_dtoa_r+0x2d8>
 8011830:	2b05      	cmp	r3, #5
 8011832:	bfc4      	itt	gt
 8011834:	3b04      	subgt	r3, #4
 8011836:	9306      	strgt	r3, [sp, #24]
 8011838:	9b06      	ldr	r3, [sp, #24]
 801183a:	f1a3 0302 	sub.w	r3, r3, #2
 801183e:	bfcc      	ite	gt
 8011840:	2500      	movgt	r5, #0
 8011842:	2501      	movle	r5, #1
 8011844:	2b03      	cmp	r3, #3
 8011846:	f200 808f 	bhi.w	8011968 <_dtoa_r+0x2f0>
 801184a:	e8df f003 	tbb	[pc, r3]
 801184e:	7f7d      	.short	0x7f7d
 8011850:	7131      	.short	0x7131
 8011852:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8011856:	441d      	add	r5, r3
 8011858:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801185c:	2820      	cmp	r0, #32
 801185e:	dd13      	ble.n	8011888 <_dtoa_r+0x210>
 8011860:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011864:	9b00      	ldr	r3, [sp, #0]
 8011866:	fa08 f800 	lsl.w	r8, r8, r0
 801186a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801186e:	fa23 f000 	lsr.w	r0, r3, r0
 8011872:	ea48 0000 	orr.w	r0, r8, r0
 8011876:	f7ee fe45 	bl	8000504 <__aeabi_ui2d>
 801187a:	2301      	movs	r3, #1
 801187c:	4682      	mov	sl, r0
 801187e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8011882:	3d01      	subs	r5, #1
 8011884:	9313      	str	r3, [sp, #76]	; 0x4c
 8011886:	e772      	b.n	801176e <_dtoa_r+0xf6>
 8011888:	9b00      	ldr	r3, [sp, #0]
 801188a:	f1c0 0020 	rsb	r0, r0, #32
 801188e:	fa03 f000 	lsl.w	r0, r3, r0
 8011892:	e7f0      	b.n	8011876 <_dtoa_r+0x1fe>
 8011894:	2301      	movs	r3, #1
 8011896:	e7b1      	b.n	80117fc <_dtoa_r+0x184>
 8011898:	900f      	str	r0, [sp, #60]	; 0x3c
 801189a:	e7b0      	b.n	80117fe <_dtoa_r+0x186>
 801189c:	9b05      	ldr	r3, [sp, #20]
 801189e:	eba3 030a 	sub.w	r3, r3, sl
 80118a2:	9305      	str	r3, [sp, #20]
 80118a4:	f1ca 0300 	rsb	r3, sl, #0
 80118a8:	9307      	str	r3, [sp, #28]
 80118aa:	2300      	movs	r3, #0
 80118ac:	930e      	str	r3, [sp, #56]	; 0x38
 80118ae:	e7bb      	b.n	8011828 <_dtoa_r+0x1b0>
 80118b0:	2301      	movs	r3, #1
 80118b2:	930a      	str	r3, [sp, #40]	; 0x28
 80118b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	dd59      	ble.n	801196e <_dtoa_r+0x2f6>
 80118ba:	9302      	str	r3, [sp, #8]
 80118bc:	4699      	mov	r9, r3
 80118be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80118c0:	2200      	movs	r2, #0
 80118c2:	6072      	str	r2, [r6, #4]
 80118c4:	2204      	movs	r2, #4
 80118c6:	f102 0014 	add.w	r0, r2, #20
 80118ca:	4298      	cmp	r0, r3
 80118cc:	6871      	ldr	r1, [r6, #4]
 80118ce:	d953      	bls.n	8011978 <_dtoa_r+0x300>
 80118d0:	4620      	mov	r0, r4
 80118d2:	f000 fe8f 	bl	80125f4 <_Balloc>
 80118d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118d8:	6030      	str	r0, [r6, #0]
 80118da:	f1b9 0f0e 	cmp.w	r9, #14
 80118de:	f8d3 b000 	ldr.w	fp, [r3]
 80118e2:	f200 80e6 	bhi.w	8011ab2 <_dtoa_r+0x43a>
 80118e6:	2d00      	cmp	r5, #0
 80118e8:	f000 80e3 	beq.w	8011ab2 <_dtoa_r+0x43a>
 80118ec:	ed9d 7b00 	vldr	d7, [sp]
 80118f0:	f1ba 0f00 	cmp.w	sl, #0
 80118f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80118f8:	dd74      	ble.n	80119e4 <_dtoa_r+0x36c>
 80118fa:	4a2a      	ldr	r2, [pc, #168]	; (80119a4 <_dtoa_r+0x32c>)
 80118fc:	f00a 030f 	and.w	r3, sl, #15
 8011900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011904:	ed93 7b00 	vldr	d7, [r3]
 8011908:	ea4f 162a 	mov.w	r6, sl, asr #4
 801190c:	06f0      	lsls	r0, r6, #27
 801190e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011912:	d565      	bpl.n	80119e0 <_dtoa_r+0x368>
 8011914:	4b24      	ldr	r3, [pc, #144]	; (80119a8 <_dtoa_r+0x330>)
 8011916:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801191a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801191e:	f7ee ff95 	bl	800084c <__aeabi_ddiv>
 8011922:	e9cd 0100 	strd	r0, r1, [sp]
 8011926:	f006 060f 	and.w	r6, r6, #15
 801192a:	2503      	movs	r5, #3
 801192c:	4f1e      	ldr	r7, [pc, #120]	; (80119a8 <_dtoa_r+0x330>)
 801192e:	e04c      	b.n	80119ca <_dtoa_r+0x352>
 8011930:	2301      	movs	r3, #1
 8011932:	930a      	str	r3, [sp, #40]	; 0x28
 8011934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011936:	4453      	add	r3, sl
 8011938:	f103 0901 	add.w	r9, r3, #1
 801193c:	9302      	str	r3, [sp, #8]
 801193e:	464b      	mov	r3, r9
 8011940:	2b01      	cmp	r3, #1
 8011942:	bfb8      	it	lt
 8011944:	2301      	movlt	r3, #1
 8011946:	e7ba      	b.n	80118be <_dtoa_r+0x246>
 8011948:	2300      	movs	r3, #0
 801194a:	e7b2      	b.n	80118b2 <_dtoa_r+0x23a>
 801194c:	2300      	movs	r3, #0
 801194e:	e7f0      	b.n	8011932 <_dtoa_r+0x2ba>
 8011950:	2501      	movs	r5, #1
 8011952:	2300      	movs	r3, #0
 8011954:	9306      	str	r3, [sp, #24]
 8011956:	950a      	str	r5, [sp, #40]	; 0x28
 8011958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801195c:	9302      	str	r3, [sp, #8]
 801195e:	4699      	mov	r9, r3
 8011960:	2200      	movs	r2, #0
 8011962:	2312      	movs	r3, #18
 8011964:	920b      	str	r2, [sp, #44]	; 0x2c
 8011966:	e7aa      	b.n	80118be <_dtoa_r+0x246>
 8011968:	2301      	movs	r3, #1
 801196a:	930a      	str	r3, [sp, #40]	; 0x28
 801196c:	e7f4      	b.n	8011958 <_dtoa_r+0x2e0>
 801196e:	2301      	movs	r3, #1
 8011970:	9302      	str	r3, [sp, #8]
 8011972:	4699      	mov	r9, r3
 8011974:	461a      	mov	r2, r3
 8011976:	e7f5      	b.n	8011964 <_dtoa_r+0x2ec>
 8011978:	3101      	adds	r1, #1
 801197a:	6071      	str	r1, [r6, #4]
 801197c:	0052      	lsls	r2, r2, #1
 801197e:	e7a2      	b.n	80118c6 <_dtoa_r+0x24e>
 8011980:	636f4361 	.word	0x636f4361
 8011984:	3fd287a7 	.word	0x3fd287a7
 8011988:	8b60c8b3 	.word	0x8b60c8b3
 801198c:	3fc68a28 	.word	0x3fc68a28
 8011990:	509f79fb 	.word	0x509f79fb
 8011994:	3fd34413 	.word	0x3fd34413
 8011998:	7ff00000 	.word	0x7ff00000
 801199c:	08015b9d 	.word	0x08015b9d
 80119a0:	3ff80000 	.word	0x3ff80000
 80119a4:	08015c68 	.word	0x08015c68
 80119a8:	08015c40 	.word	0x08015c40
 80119ac:	08015bc9 	.word	0x08015bc9
 80119b0:	07f1      	lsls	r1, r6, #31
 80119b2:	d508      	bpl.n	80119c6 <_dtoa_r+0x34e>
 80119b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80119b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119bc:	f7ee fe1c 	bl	80005f8 <__aeabi_dmul>
 80119c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119c4:	3501      	adds	r5, #1
 80119c6:	1076      	asrs	r6, r6, #1
 80119c8:	3708      	adds	r7, #8
 80119ca:	2e00      	cmp	r6, #0
 80119cc:	d1f0      	bne.n	80119b0 <_dtoa_r+0x338>
 80119ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80119d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119d6:	f7ee ff39 	bl	800084c <__aeabi_ddiv>
 80119da:	e9cd 0100 	strd	r0, r1, [sp]
 80119de:	e01a      	b.n	8011a16 <_dtoa_r+0x39e>
 80119e0:	2502      	movs	r5, #2
 80119e2:	e7a3      	b.n	801192c <_dtoa_r+0x2b4>
 80119e4:	f000 80a0 	beq.w	8011b28 <_dtoa_r+0x4b0>
 80119e8:	f1ca 0600 	rsb	r6, sl, #0
 80119ec:	4b9f      	ldr	r3, [pc, #636]	; (8011c6c <_dtoa_r+0x5f4>)
 80119ee:	4fa0      	ldr	r7, [pc, #640]	; (8011c70 <_dtoa_r+0x5f8>)
 80119f0:	f006 020f 	and.w	r2, r6, #15
 80119f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011a00:	f7ee fdfa 	bl	80005f8 <__aeabi_dmul>
 8011a04:	e9cd 0100 	strd	r0, r1, [sp]
 8011a08:	1136      	asrs	r6, r6, #4
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	2502      	movs	r5, #2
 8011a0e:	2e00      	cmp	r6, #0
 8011a10:	d17f      	bne.n	8011b12 <_dtoa_r+0x49a>
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d1e1      	bne.n	80119da <_dtoa_r+0x362>
 8011a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	f000 8087 	beq.w	8011b2c <_dtoa_r+0x4b4>
 8011a1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011a22:	2200      	movs	r2, #0
 8011a24:	4b93      	ldr	r3, [pc, #588]	; (8011c74 <_dtoa_r+0x5fc>)
 8011a26:	4630      	mov	r0, r6
 8011a28:	4639      	mov	r1, r7
 8011a2a:	f7ef f857 	bl	8000adc <__aeabi_dcmplt>
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d07c      	beq.n	8011b2c <_dtoa_r+0x4b4>
 8011a32:	f1b9 0f00 	cmp.w	r9, #0
 8011a36:	d079      	beq.n	8011b2c <_dtoa_r+0x4b4>
 8011a38:	9b02      	ldr	r3, [sp, #8]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	dd35      	ble.n	8011aaa <_dtoa_r+0x432>
 8011a3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011a42:	9308      	str	r3, [sp, #32]
 8011a44:	4639      	mov	r1, r7
 8011a46:	2200      	movs	r2, #0
 8011a48:	4b8b      	ldr	r3, [pc, #556]	; (8011c78 <_dtoa_r+0x600>)
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f7ee fdd4 	bl	80005f8 <__aeabi_dmul>
 8011a50:	e9cd 0100 	strd	r0, r1, [sp]
 8011a54:	9f02      	ldr	r7, [sp, #8]
 8011a56:	3501      	adds	r5, #1
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7ee fd63 	bl	8000524 <__aeabi_i2d>
 8011a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a62:	f7ee fdc9 	bl	80005f8 <__aeabi_dmul>
 8011a66:	2200      	movs	r2, #0
 8011a68:	4b84      	ldr	r3, [pc, #528]	; (8011c7c <_dtoa_r+0x604>)
 8011a6a:	f7ee fc0f 	bl	800028c <__adddf3>
 8011a6e:	4605      	mov	r5, r0
 8011a70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011a74:	2f00      	cmp	r7, #0
 8011a76:	d15d      	bne.n	8011b34 <_dtoa_r+0x4bc>
 8011a78:	2200      	movs	r2, #0
 8011a7a:	4b81      	ldr	r3, [pc, #516]	; (8011c80 <_dtoa_r+0x608>)
 8011a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a80:	f7ee fc02 	bl	8000288 <__aeabi_dsub>
 8011a84:	462a      	mov	r2, r5
 8011a86:	4633      	mov	r3, r6
 8011a88:	e9cd 0100 	strd	r0, r1, [sp]
 8011a8c:	f7ef f844 	bl	8000b18 <__aeabi_dcmpgt>
 8011a90:	2800      	cmp	r0, #0
 8011a92:	f040 8288 	bne.w	8011fa6 <_dtoa_r+0x92e>
 8011a96:	462a      	mov	r2, r5
 8011a98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011aa0:	f7ef f81c 	bl	8000adc <__aeabi_dcmplt>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	f040 827c 	bne.w	8011fa2 <_dtoa_r+0x92a>
 8011aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011aae:	e9cd 2300 	strd	r2, r3, [sp]
 8011ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	f2c0 8150 	blt.w	8011d5a <_dtoa_r+0x6e2>
 8011aba:	f1ba 0f0e 	cmp.w	sl, #14
 8011abe:	f300 814c 	bgt.w	8011d5a <_dtoa_r+0x6e2>
 8011ac2:	4b6a      	ldr	r3, [pc, #424]	; (8011c6c <_dtoa_r+0x5f4>)
 8011ac4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011ac8:	ed93 7b00 	vldr	d7, [r3]
 8011acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ad4:	f280 80d8 	bge.w	8011c88 <_dtoa_r+0x610>
 8011ad8:	f1b9 0f00 	cmp.w	r9, #0
 8011adc:	f300 80d4 	bgt.w	8011c88 <_dtoa_r+0x610>
 8011ae0:	f040 825e 	bne.w	8011fa0 <_dtoa_r+0x928>
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	4b66      	ldr	r3, [pc, #408]	; (8011c80 <_dtoa_r+0x608>)
 8011ae8:	ec51 0b17 	vmov	r0, r1, d7
 8011aec:	f7ee fd84 	bl	80005f8 <__aeabi_dmul>
 8011af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011af4:	f7ef f806 	bl	8000b04 <__aeabi_dcmpge>
 8011af8:	464f      	mov	r7, r9
 8011afa:	464e      	mov	r6, r9
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f040 8234 	bne.w	8011f6a <_dtoa_r+0x8f2>
 8011b02:	2331      	movs	r3, #49	; 0x31
 8011b04:	f10b 0501 	add.w	r5, fp, #1
 8011b08:	f88b 3000 	strb.w	r3, [fp]
 8011b0c:	f10a 0a01 	add.w	sl, sl, #1
 8011b10:	e22f      	b.n	8011f72 <_dtoa_r+0x8fa>
 8011b12:	07f2      	lsls	r2, r6, #31
 8011b14:	d505      	bpl.n	8011b22 <_dtoa_r+0x4aa>
 8011b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b1a:	f7ee fd6d 	bl	80005f8 <__aeabi_dmul>
 8011b1e:	3501      	adds	r5, #1
 8011b20:	2301      	movs	r3, #1
 8011b22:	1076      	asrs	r6, r6, #1
 8011b24:	3708      	adds	r7, #8
 8011b26:	e772      	b.n	8011a0e <_dtoa_r+0x396>
 8011b28:	2502      	movs	r5, #2
 8011b2a:	e774      	b.n	8011a16 <_dtoa_r+0x39e>
 8011b2c:	f8cd a020 	str.w	sl, [sp, #32]
 8011b30:	464f      	mov	r7, r9
 8011b32:	e791      	b.n	8011a58 <_dtoa_r+0x3e0>
 8011b34:	4b4d      	ldr	r3, [pc, #308]	; (8011c6c <_dtoa_r+0x5f4>)
 8011b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d047      	beq.n	8011bd4 <_dtoa_r+0x55c>
 8011b44:	4602      	mov	r2, r0
 8011b46:	460b      	mov	r3, r1
 8011b48:	2000      	movs	r0, #0
 8011b4a:	494e      	ldr	r1, [pc, #312]	; (8011c84 <_dtoa_r+0x60c>)
 8011b4c:	f7ee fe7e 	bl	800084c <__aeabi_ddiv>
 8011b50:	462a      	mov	r2, r5
 8011b52:	4633      	mov	r3, r6
 8011b54:	f7ee fb98 	bl	8000288 <__aeabi_dsub>
 8011b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011b5c:	465d      	mov	r5, fp
 8011b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b62:	f7ee fff9 	bl	8000b58 <__aeabi_d2iz>
 8011b66:	4606      	mov	r6, r0
 8011b68:	f7ee fcdc 	bl	8000524 <__aeabi_i2d>
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	460b      	mov	r3, r1
 8011b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b74:	f7ee fb88 	bl	8000288 <__aeabi_dsub>
 8011b78:	3630      	adds	r6, #48	; 0x30
 8011b7a:	f805 6b01 	strb.w	r6, [r5], #1
 8011b7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011b82:	e9cd 0100 	strd	r0, r1, [sp]
 8011b86:	f7ee ffa9 	bl	8000adc <__aeabi_dcmplt>
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d163      	bne.n	8011c56 <_dtoa_r+0x5de>
 8011b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b92:	2000      	movs	r0, #0
 8011b94:	4937      	ldr	r1, [pc, #220]	; (8011c74 <_dtoa_r+0x5fc>)
 8011b96:	f7ee fb77 	bl	8000288 <__aeabi_dsub>
 8011b9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011b9e:	f7ee ff9d 	bl	8000adc <__aeabi_dcmplt>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	f040 80b7 	bne.w	8011d16 <_dtoa_r+0x69e>
 8011ba8:	eba5 030b 	sub.w	r3, r5, fp
 8011bac:	429f      	cmp	r7, r3
 8011bae:	f77f af7c 	ble.w	8011aaa <_dtoa_r+0x432>
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	4b30      	ldr	r3, [pc, #192]	; (8011c78 <_dtoa_r+0x600>)
 8011bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bba:	f7ee fd1d 	bl	80005f8 <__aeabi_dmul>
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011bc4:	4b2c      	ldr	r3, [pc, #176]	; (8011c78 <_dtoa_r+0x600>)
 8011bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bca:	f7ee fd15 	bl	80005f8 <__aeabi_dmul>
 8011bce:	e9cd 0100 	strd	r0, r1, [sp]
 8011bd2:	e7c4      	b.n	8011b5e <_dtoa_r+0x4e6>
 8011bd4:	462a      	mov	r2, r5
 8011bd6:	4633      	mov	r3, r6
 8011bd8:	f7ee fd0e 	bl	80005f8 <__aeabi_dmul>
 8011bdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011be0:	eb0b 0507 	add.w	r5, fp, r7
 8011be4:	465e      	mov	r6, fp
 8011be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bea:	f7ee ffb5 	bl	8000b58 <__aeabi_d2iz>
 8011bee:	4607      	mov	r7, r0
 8011bf0:	f7ee fc98 	bl	8000524 <__aeabi_i2d>
 8011bf4:	3730      	adds	r7, #48	; 0x30
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bfe:	f7ee fb43 	bl	8000288 <__aeabi_dsub>
 8011c02:	f806 7b01 	strb.w	r7, [r6], #1
 8011c06:	42ae      	cmp	r6, r5
 8011c08:	e9cd 0100 	strd	r0, r1, [sp]
 8011c0c:	f04f 0200 	mov.w	r2, #0
 8011c10:	d126      	bne.n	8011c60 <_dtoa_r+0x5e8>
 8011c12:	4b1c      	ldr	r3, [pc, #112]	; (8011c84 <_dtoa_r+0x60c>)
 8011c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c18:	f7ee fb38 	bl	800028c <__adddf3>
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	460b      	mov	r3, r1
 8011c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c24:	f7ee ff78 	bl	8000b18 <__aeabi_dcmpgt>
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	d174      	bne.n	8011d16 <_dtoa_r+0x69e>
 8011c2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011c30:	2000      	movs	r0, #0
 8011c32:	4914      	ldr	r1, [pc, #80]	; (8011c84 <_dtoa_r+0x60c>)
 8011c34:	f7ee fb28 	bl	8000288 <__aeabi_dsub>
 8011c38:	4602      	mov	r2, r0
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c40:	f7ee ff4c 	bl	8000adc <__aeabi_dcmplt>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	f43f af30 	beq.w	8011aaa <_dtoa_r+0x432>
 8011c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c4e:	2b30      	cmp	r3, #48	; 0x30
 8011c50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011c54:	d002      	beq.n	8011c5c <_dtoa_r+0x5e4>
 8011c56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011c5a:	e04a      	b.n	8011cf2 <_dtoa_r+0x67a>
 8011c5c:	4615      	mov	r5, r2
 8011c5e:	e7f4      	b.n	8011c4a <_dtoa_r+0x5d2>
 8011c60:	4b05      	ldr	r3, [pc, #20]	; (8011c78 <_dtoa_r+0x600>)
 8011c62:	f7ee fcc9 	bl	80005f8 <__aeabi_dmul>
 8011c66:	e9cd 0100 	strd	r0, r1, [sp]
 8011c6a:	e7bc      	b.n	8011be6 <_dtoa_r+0x56e>
 8011c6c:	08015c68 	.word	0x08015c68
 8011c70:	08015c40 	.word	0x08015c40
 8011c74:	3ff00000 	.word	0x3ff00000
 8011c78:	40240000 	.word	0x40240000
 8011c7c:	401c0000 	.word	0x401c0000
 8011c80:	40140000 	.word	0x40140000
 8011c84:	3fe00000 	.word	0x3fe00000
 8011c88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011c8c:	465d      	mov	r5, fp
 8011c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c92:	4630      	mov	r0, r6
 8011c94:	4639      	mov	r1, r7
 8011c96:	f7ee fdd9 	bl	800084c <__aeabi_ddiv>
 8011c9a:	f7ee ff5d 	bl	8000b58 <__aeabi_d2iz>
 8011c9e:	4680      	mov	r8, r0
 8011ca0:	f7ee fc40 	bl	8000524 <__aeabi_i2d>
 8011ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ca8:	f7ee fca6 	bl	80005f8 <__aeabi_dmul>
 8011cac:	4602      	mov	r2, r0
 8011cae:	460b      	mov	r3, r1
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	4639      	mov	r1, r7
 8011cb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011cb8:	f7ee fae6 	bl	8000288 <__aeabi_dsub>
 8011cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8011cc0:	eba5 060b 	sub.w	r6, r5, fp
 8011cc4:	45b1      	cmp	r9, r6
 8011cc6:	4602      	mov	r2, r0
 8011cc8:	460b      	mov	r3, r1
 8011cca:	d139      	bne.n	8011d40 <_dtoa_r+0x6c8>
 8011ccc:	f7ee fade 	bl	800028c <__adddf3>
 8011cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	f7ee ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 8011cdc:	b9c8      	cbnz	r0, 8011d12 <_dtoa_r+0x69a>
 8011cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ce2:	4630      	mov	r0, r6
 8011ce4:	4639      	mov	r1, r7
 8011ce6:	f7ee feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cea:	b110      	cbz	r0, 8011cf2 <_dtoa_r+0x67a>
 8011cec:	f018 0f01 	tst.w	r8, #1
 8011cf0:	d10f      	bne.n	8011d12 <_dtoa_r+0x69a>
 8011cf2:	9904      	ldr	r1, [sp, #16]
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f000 fcb1 	bl	801265c <_Bfree>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011cfe:	702b      	strb	r3, [r5, #0]
 8011d00:	f10a 0301 	add.w	r3, sl, #1
 8011d04:	6013      	str	r3, [r2, #0]
 8011d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	f000 8241 	beq.w	8012190 <_dtoa_r+0xb18>
 8011d0e:	601d      	str	r5, [r3, #0]
 8011d10:	e23e      	b.n	8012190 <_dtoa_r+0xb18>
 8011d12:	f8cd a020 	str.w	sl, [sp, #32]
 8011d16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011d1a:	2a39      	cmp	r2, #57	; 0x39
 8011d1c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8011d20:	d108      	bne.n	8011d34 <_dtoa_r+0x6bc>
 8011d22:	459b      	cmp	fp, r3
 8011d24:	d10a      	bne.n	8011d3c <_dtoa_r+0x6c4>
 8011d26:	9b08      	ldr	r3, [sp, #32]
 8011d28:	3301      	adds	r3, #1
 8011d2a:	9308      	str	r3, [sp, #32]
 8011d2c:	2330      	movs	r3, #48	; 0x30
 8011d2e:	f88b 3000 	strb.w	r3, [fp]
 8011d32:	465b      	mov	r3, fp
 8011d34:	781a      	ldrb	r2, [r3, #0]
 8011d36:	3201      	adds	r2, #1
 8011d38:	701a      	strb	r2, [r3, #0]
 8011d3a:	e78c      	b.n	8011c56 <_dtoa_r+0x5de>
 8011d3c:	461d      	mov	r5, r3
 8011d3e:	e7ea      	b.n	8011d16 <_dtoa_r+0x69e>
 8011d40:	2200      	movs	r2, #0
 8011d42:	4b9b      	ldr	r3, [pc, #620]	; (8011fb0 <_dtoa_r+0x938>)
 8011d44:	f7ee fc58 	bl	80005f8 <__aeabi_dmul>
 8011d48:	2200      	movs	r2, #0
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	4606      	mov	r6, r0
 8011d4e:	460f      	mov	r7, r1
 8011d50:	f7ee feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d54:	2800      	cmp	r0, #0
 8011d56:	d09a      	beq.n	8011c8e <_dtoa_r+0x616>
 8011d58:	e7cb      	b.n	8011cf2 <_dtoa_r+0x67a>
 8011d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d5c:	2a00      	cmp	r2, #0
 8011d5e:	f000 808b 	beq.w	8011e78 <_dtoa_r+0x800>
 8011d62:	9a06      	ldr	r2, [sp, #24]
 8011d64:	2a01      	cmp	r2, #1
 8011d66:	dc6e      	bgt.n	8011e46 <_dtoa_r+0x7ce>
 8011d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d6a:	2a00      	cmp	r2, #0
 8011d6c:	d067      	beq.n	8011e3e <_dtoa_r+0x7c6>
 8011d6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011d72:	9f07      	ldr	r7, [sp, #28]
 8011d74:	9d05      	ldr	r5, [sp, #20]
 8011d76:	9a05      	ldr	r2, [sp, #20]
 8011d78:	2101      	movs	r1, #1
 8011d7a:	441a      	add	r2, r3
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	9205      	str	r2, [sp, #20]
 8011d80:	4498      	add	r8, r3
 8011d82:	f000 fd0b 	bl	801279c <__i2b>
 8011d86:	4606      	mov	r6, r0
 8011d88:	2d00      	cmp	r5, #0
 8011d8a:	dd0c      	ble.n	8011da6 <_dtoa_r+0x72e>
 8011d8c:	f1b8 0f00 	cmp.w	r8, #0
 8011d90:	dd09      	ble.n	8011da6 <_dtoa_r+0x72e>
 8011d92:	4545      	cmp	r5, r8
 8011d94:	9a05      	ldr	r2, [sp, #20]
 8011d96:	462b      	mov	r3, r5
 8011d98:	bfa8      	it	ge
 8011d9a:	4643      	movge	r3, r8
 8011d9c:	1ad2      	subs	r2, r2, r3
 8011d9e:	9205      	str	r2, [sp, #20]
 8011da0:	1aed      	subs	r5, r5, r3
 8011da2:	eba8 0803 	sub.w	r8, r8, r3
 8011da6:	9b07      	ldr	r3, [sp, #28]
 8011da8:	b1eb      	cbz	r3, 8011de6 <_dtoa_r+0x76e>
 8011daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d067      	beq.n	8011e80 <_dtoa_r+0x808>
 8011db0:	b18f      	cbz	r7, 8011dd6 <_dtoa_r+0x75e>
 8011db2:	4631      	mov	r1, r6
 8011db4:	463a      	mov	r2, r7
 8011db6:	4620      	mov	r0, r4
 8011db8:	f000 fd90 	bl	80128dc <__pow5mult>
 8011dbc:	9a04      	ldr	r2, [sp, #16]
 8011dbe:	4601      	mov	r1, r0
 8011dc0:	4606      	mov	r6, r0
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f000 fcf3 	bl	80127ae <__multiply>
 8011dc8:	9904      	ldr	r1, [sp, #16]
 8011dca:	9008      	str	r0, [sp, #32]
 8011dcc:	4620      	mov	r0, r4
 8011dce:	f000 fc45 	bl	801265c <_Bfree>
 8011dd2:	9b08      	ldr	r3, [sp, #32]
 8011dd4:	9304      	str	r3, [sp, #16]
 8011dd6:	9b07      	ldr	r3, [sp, #28]
 8011dd8:	1bda      	subs	r2, r3, r7
 8011dda:	d004      	beq.n	8011de6 <_dtoa_r+0x76e>
 8011ddc:	9904      	ldr	r1, [sp, #16]
 8011dde:	4620      	mov	r0, r4
 8011de0:	f000 fd7c 	bl	80128dc <__pow5mult>
 8011de4:	9004      	str	r0, [sp, #16]
 8011de6:	2101      	movs	r1, #1
 8011de8:	4620      	mov	r0, r4
 8011dea:	f000 fcd7 	bl	801279c <__i2b>
 8011dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011df0:	4607      	mov	r7, r0
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f000 81d0 	beq.w	8012198 <_dtoa_r+0xb20>
 8011df8:	461a      	mov	r2, r3
 8011dfa:	4601      	mov	r1, r0
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f000 fd6d 	bl	80128dc <__pow5mult>
 8011e02:	9b06      	ldr	r3, [sp, #24]
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	4607      	mov	r7, r0
 8011e08:	dc40      	bgt.n	8011e8c <_dtoa_r+0x814>
 8011e0a:	9b00      	ldr	r3, [sp, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d139      	bne.n	8011e84 <_dtoa_r+0x80c>
 8011e10:	9b01      	ldr	r3, [sp, #4]
 8011e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d136      	bne.n	8011e88 <_dtoa_r+0x810>
 8011e1a:	9b01      	ldr	r3, [sp, #4]
 8011e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e20:	0d1b      	lsrs	r3, r3, #20
 8011e22:	051b      	lsls	r3, r3, #20
 8011e24:	b12b      	cbz	r3, 8011e32 <_dtoa_r+0x7ba>
 8011e26:	9b05      	ldr	r3, [sp, #20]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	9305      	str	r3, [sp, #20]
 8011e2c:	f108 0801 	add.w	r8, r8, #1
 8011e30:	2301      	movs	r3, #1
 8011e32:	9307      	str	r3, [sp, #28]
 8011e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d12a      	bne.n	8011e90 <_dtoa_r+0x818>
 8011e3a:	2001      	movs	r0, #1
 8011e3c:	e030      	b.n	8011ea0 <_dtoa_r+0x828>
 8011e3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011e44:	e795      	b.n	8011d72 <_dtoa_r+0x6fa>
 8011e46:	9b07      	ldr	r3, [sp, #28]
 8011e48:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8011e4c:	42bb      	cmp	r3, r7
 8011e4e:	bfbf      	itttt	lt
 8011e50:	9b07      	ldrlt	r3, [sp, #28]
 8011e52:	9707      	strlt	r7, [sp, #28]
 8011e54:	1afa      	sublt	r2, r7, r3
 8011e56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011e58:	bfbb      	ittet	lt
 8011e5a:	189b      	addlt	r3, r3, r2
 8011e5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011e5e:	1bdf      	subge	r7, r3, r7
 8011e60:	2700      	movlt	r7, #0
 8011e62:	f1b9 0f00 	cmp.w	r9, #0
 8011e66:	bfb5      	itete	lt
 8011e68:	9b05      	ldrlt	r3, [sp, #20]
 8011e6a:	9d05      	ldrge	r5, [sp, #20]
 8011e6c:	eba3 0509 	sublt.w	r5, r3, r9
 8011e70:	464b      	movge	r3, r9
 8011e72:	bfb8      	it	lt
 8011e74:	2300      	movlt	r3, #0
 8011e76:	e77e      	b.n	8011d76 <_dtoa_r+0x6fe>
 8011e78:	9f07      	ldr	r7, [sp, #28]
 8011e7a:	9d05      	ldr	r5, [sp, #20]
 8011e7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011e7e:	e783      	b.n	8011d88 <_dtoa_r+0x710>
 8011e80:	9a07      	ldr	r2, [sp, #28]
 8011e82:	e7ab      	b.n	8011ddc <_dtoa_r+0x764>
 8011e84:	2300      	movs	r3, #0
 8011e86:	e7d4      	b.n	8011e32 <_dtoa_r+0x7ba>
 8011e88:	9b00      	ldr	r3, [sp, #0]
 8011e8a:	e7d2      	b.n	8011e32 <_dtoa_r+0x7ba>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	9307      	str	r3, [sp, #28]
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011e96:	6918      	ldr	r0, [r3, #16]
 8011e98:	f000 fc32 	bl	8012700 <__hi0bits>
 8011e9c:	f1c0 0020 	rsb	r0, r0, #32
 8011ea0:	4440      	add	r0, r8
 8011ea2:	f010 001f 	ands.w	r0, r0, #31
 8011ea6:	d047      	beq.n	8011f38 <_dtoa_r+0x8c0>
 8011ea8:	f1c0 0320 	rsb	r3, r0, #32
 8011eac:	2b04      	cmp	r3, #4
 8011eae:	dd3b      	ble.n	8011f28 <_dtoa_r+0x8b0>
 8011eb0:	9b05      	ldr	r3, [sp, #20]
 8011eb2:	f1c0 001c 	rsb	r0, r0, #28
 8011eb6:	4403      	add	r3, r0
 8011eb8:	9305      	str	r3, [sp, #20]
 8011eba:	4405      	add	r5, r0
 8011ebc:	4480      	add	r8, r0
 8011ebe:	9b05      	ldr	r3, [sp, #20]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	dd05      	ble.n	8011ed0 <_dtoa_r+0x858>
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	9904      	ldr	r1, [sp, #16]
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f000 fd55 	bl	8012978 <__lshift>
 8011ece:	9004      	str	r0, [sp, #16]
 8011ed0:	f1b8 0f00 	cmp.w	r8, #0
 8011ed4:	dd05      	ble.n	8011ee2 <_dtoa_r+0x86a>
 8011ed6:	4639      	mov	r1, r7
 8011ed8:	4642      	mov	r2, r8
 8011eda:	4620      	mov	r0, r4
 8011edc:	f000 fd4c 	bl	8012978 <__lshift>
 8011ee0:	4607      	mov	r7, r0
 8011ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ee4:	b353      	cbz	r3, 8011f3c <_dtoa_r+0x8c4>
 8011ee6:	4639      	mov	r1, r7
 8011ee8:	9804      	ldr	r0, [sp, #16]
 8011eea:	f000 fd99 	bl	8012a20 <__mcmp>
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	da24      	bge.n	8011f3c <_dtoa_r+0x8c4>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	220a      	movs	r2, #10
 8011ef6:	9904      	ldr	r1, [sp, #16]
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f000 fbc6 	bl	801268a <__multadd>
 8011efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f00:	9004      	str	r0, [sp, #16]
 8011f02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f000 814d 	beq.w	80121a6 <_dtoa_r+0xb2e>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	4631      	mov	r1, r6
 8011f10:	220a      	movs	r2, #10
 8011f12:	4620      	mov	r0, r4
 8011f14:	f000 fbb9 	bl	801268a <__multadd>
 8011f18:	9b02      	ldr	r3, [sp, #8]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	dc4f      	bgt.n	8011fc0 <_dtoa_r+0x948>
 8011f20:	9b06      	ldr	r3, [sp, #24]
 8011f22:	2b02      	cmp	r3, #2
 8011f24:	dd4c      	ble.n	8011fc0 <_dtoa_r+0x948>
 8011f26:	e011      	b.n	8011f4c <_dtoa_r+0x8d4>
 8011f28:	d0c9      	beq.n	8011ebe <_dtoa_r+0x846>
 8011f2a:	9a05      	ldr	r2, [sp, #20]
 8011f2c:	331c      	adds	r3, #28
 8011f2e:	441a      	add	r2, r3
 8011f30:	9205      	str	r2, [sp, #20]
 8011f32:	441d      	add	r5, r3
 8011f34:	4498      	add	r8, r3
 8011f36:	e7c2      	b.n	8011ebe <_dtoa_r+0x846>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	e7f6      	b.n	8011f2a <_dtoa_r+0x8b2>
 8011f3c:	f1b9 0f00 	cmp.w	r9, #0
 8011f40:	dc38      	bgt.n	8011fb4 <_dtoa_r+0x93c>
 8011f42:	9b06      	ldr	r3, [sp, #24]
 8011f44:	2b02      	cmp	r3, #2
 8011f46:	dd35      	ble.n	8011fb4 <_dtoa_r+0x93c>
 8011f48:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f4c:	9b02      	ldr	r3, [sp, #8]
 8011f4e:	b963      	cbnz	r3, 8011f6a <_dtoa_r+0x8f2>
 8011f50:	4639      	mov	r1, r7
 8011f52:	2205      	movs	r2, #5
 8011f54:	4620      	mov	r0, r4
 8011f56:	f000 fb98 	bl	801268a <__multadd>
 8011f5a:	4601      	mov	r1, r0
 8011f5c:	4607      	mov	r7, r0
 8011f5e:	9804      	ldr	r0, [sp, #16]
 8011f60:	f000 fd5e 	bl	8012a20 <__mcmp>
 8011f64:	2800      	cmp	r0, #0
 8011f66:	f73f adcc 	bgt.w	8011b02 <_dtoa_r+0x48a>
 8011f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f6c:	465d      	mov	r5, fp
 8011f6e:	ea6f 0a03 	mvn.w	sl, r3
 8011f72:	f04f 0900 	mov.w	r9, #0
 8011f76:	4639      	mov	r1, r7
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f000 fb6f 	bl	801265c <_Bfree>
 8011f7e:	2e00      	cmp	r6, #0
 8011f80:	f43f aeb7 	beq.w	8011cf2 <_dtoa_r+0x67a>
 8011f84:	f1b9 0f00 	cmp.w	r9, #0
 8011f88:	d005      	beq.n	8011f96 <_dtoa_r+0x91e>
 8011f8a:	45b1      	cmp	r9, r6
 8011f8c:	d003      	beq.n	8011f96 <_dtoa_r+0x91e>
 8011f8e:	4649      	mov	r1, r9
 8011f90:	4620      	mov	r0, r4
 8011f92:	f000 fb63 	bl	801265c <_Bfree>
 8011f96:	4631      	mov	r1, r6
 8011f98:	4620      	mov	r0, r4
 8011f9a:	f000 fb5f 	bl	801265c <_Bfree>
 8011f9e:	e6a8      	b.n	8011cf2 <_dtoa_r+0x67a>
 8011fa0:	2700      	movs	r7, #0
 8011fa2:	463e      	mov	r6, r7
 8011fa4:	e7e1      	b.n	8011f6a <_dtoa_r+0x8f2>
 8011fa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011faa:	463e      	mov	r6, r7
 8011fac:	e5a9      	b.n	8011b02 <_dtoa_r+0x48a>
 8011fae:	bf00      	nop
 8011fb0:	40240000 	.word	0x40240000
 8011fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f000 80fa 	beq.w	80121b4 <_dtoa_r+0xb3c>
 8011fc0:	2d00      	cmp	r5, #0
 8011fc2:	dd05      	ble.n	8011fd0 <_dtoa_r+0x958>
 8011fc4:	4631      	mov	r1, r6
 8011fc6:	462a      	mov	r2, r5
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f000 fcd5 	bl	8012978 <__lshift>
 8011fce:	4606      	mov	r6, r0
 8011fd0:	9b07      	ldr	r3, [sp, #28]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d04c      	beq.n	8012070 <_dtoa_r+0x9f8>
 8011fd6:	6871      	ldr	r1, [r6, #4]
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 fb0b 	bl	80125f4 <_Balloc>
 8011fde:	6932      	ldr	r2, [r6, #16]
 8011fe0:	3202      	adds	r2, #2
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	0092      	lsls	r2, r2, #2
 8011fe6:	f106 010c 	add.w	r1, r6, #12
 8011fea:	300c      	adds	r0, #12
 8011fec:	f7fe fcec 	bl	80109c8 <memcpy>
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	4629      	mov	r1, r5
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	f000 fcbf 	bl	8012978 <__lshift>
 8011ffa:	9b00      	ldr	r3, [sp, #0]
 8011ffc:	f8cd b014 	str.w	fp, [sp, #20]
 8012000:	f003 0301 	and.w	r3, r3, #1
 8012004:	46b1      	mov	r9, r6
 8012006:	9307      	str	r3, [sp, #28]
 8012008:	4606      	mov	r6, r0
 801200a:	4639      	mov	r1, r7
 801200c:	9804      	ldr	r0, [sp, #16]
 801200e:	f7ff faa7 	bl	8011560 <quorem>
 8012012:	4649      	mov	r1, r9
 8012014:	4605      	mov	r5, r0
 8012016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801201a:	9804      	ldr	r0, [sp, #16]
 801201c:	f000 fd00 	bl	8012a20 <__mcmp>
 8012020:	4632      	mov	r2, r6
 8012022:	9000      	str	r0, [sp, #0]
 8012024:	4639      	mov	r1, r7
 8012026:	4620      	mov	r0, r4
 8012028:	f000 fd14 	bl	8012a54 <__mdiff>
 801202c:	68c3      	ldr	r3, [r0, #12]
 801202e:	4602      	mov	r2, r0
 8012030:	bb03      	cbnz	r3, 8012074 <_dtoa_r+0x9fc>
 8012032:	4601      	mov	r1, r0
 8012034:	9008      	str	r0, [sp, #32]
 8012036:	9804      	ldr	r0, [sp, #16]
 8012038:	f000 fcf2 	bl	8012a20 <__mcmp>
 801203c:	9a08      	ldr	r2, [sp, #32]
 801203e:	4603      	mov	r3, r0
 8012040:	4611      	mov	r1, r2
 8012042:	4620      	mov	r0, r4
 8012044:	9308      	str	r3, [sp, #32]
 8012046:	f000 fb09 	bl	801265c <_Bfree>
 801204a:	9b08      	ldr	r3, [sp, #32]
 801204c:	b9a3      	cbnz	r3, 8012078 <_dtoa_r+0xa00>
 801204e:	9a06      	ldr	r2, [sp, #24]
 8012050:	b992      	cbnz	r2, 8012078 <_dtoa_r+0xa00>
 8012052:	9a07      	ldr	r2, [sp, #28]
 8012054:	b982      	cbnz	r2, 8012078 <_dtoa_r+0xa00>
 8012056:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801205a:	d029      	beq.n	80120b0 <_dtoa_r+0xa38>
 801205c:	9b00      	ldr	r3, [sp, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	dd01      	ble.n	8012066 <_dtoa_r+0x9ee>
 8012062:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012066:	9b05      	ldr	r3, [sp, #20]
 8012068:	1c5d      	adds	r5, r3, #1
 801206a:	f883 8000 	strb.w	r8, [r3]
 801206e:	e782      	b.n	8011f76 <_dtoa_r+0x8fe>
 8012070:	4630      	mov	r0, r6
 8012072:	e7c2      	b.n	8011ffa <_dtoa_r+0x982>
 8012074:	2301      	movs	r3, #1
 8012076:	e7e3      	b.n	8012040 <_dtoa_r+0x9c8>
 8012078:	9a00      	ldr	r2, [sp, #0]
 801207a:	2a00      	cmp	r2, #0
 801207c:	db04      	blt.n	8012088 <_dtoa_r+0xa10>
 801207e:	d125      	bne.n	80120cc <_dtoa_r+0xa54>
 8012080:	9a06      	ldr	r2, [sp, #24]
 8012082:	bb1a      	cbnz	r2, 80120cc <_dtoa_r+0xa54>
 8012084:	9a07      	ldr	r2, [sp, #28]
 8012086:	bb0a      	cbnz	r2, 80120cc <_dtoa_r+0xa54>
 8012088:	2b00      	cmp	r3, #0
 801208a:	ddec      	ble.n	8012066 <_dtoa_r+0x9ee>
 801208c:	2201      	movs	r2, #1
 801208e:	9904      	ldr	r1, [sp, #16]
 8012090:	4620      	mov	r0, r4
 8012092:	f000 fc71 	bl	8012978 <__lshift>
 8012096:	4639      	mov	r1, r7
 8012098:	9004      	str	r0, [sp, #16]
 801209a:	f000 fcc1 	bl	8012a20 <__mcmp>
 801209e:	2800      	cmp	r0, #0
 80120a0:	dc03      	bgt.n	80120aa <_dtoa_r+0xa32>
 80120a2:	d1e0      	bne.n	8012066 <_dtoa_r+0x9ee>
 80120a4:	f018 0f01 	tst.w	r8, #1
 80120a8:	d0dd      	beq.n	8012066 <_dtoa_r+0x9ee>
 80120aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80120ae:	d1d8      	bne.n	8012062 <_dtoa_r+0x9ea>
 80120b0:	9b05      	ldr	r3, [sp, #20]
 80120b2:	9a05      	ldr	r2, [sp, #20]
 80120b4:	1c5d      	adds	r5, r3, #1
 80120b6:	2339      	movs	r3, #57	; 0x39
 80120b8:	7013      	strb	r3, [r2, #0]
 80120ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80120be:	2b39      	cmp	r3, #57	; 0x39
 80120c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80120c4:	d04f      	beq.n	8012166 <_dtoa_r+0xaee>
 80120c6:	3301      	adds	r3, #1
 80120c8:	7013      	strb	r3, [r2, #0]
 80120ca:	e754      	b.n	8011f76 <_dtoa_r+0x8fe>
 80120cc:	9a05      	ldr	r2, [sp, #20]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	f102 0501 	add.w	r5, r2, #1
 80120d4:	dd06      	ble.n	80120e4 <_dtoa_r+0xa6c>
 80120d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80120da:	d0e9      	beq.n	80120b0 <_dtoa_r+0xa38>
 80120dc:	f108 0801 	add.w	r8, r8, #1
 80120e0:	9b05      	ldr	r3, [sp, #20]
 80120e2:	e7c2      	b.n	801206a <_dtoa_r+0x9f2>
 80120e4:	9a02      	ldr	r2, [sp, #8]
 80120e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80120ea:	eba5 030b 	sub.w	r3, r5, fp
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d021      	beq.n	8012136 <_dtoa_r+0xabe>
 80120f2:	2300      	movs	r3, #0
 80120f4:	220a      	movs	r2, #10
 80120f6:	9904      	ldr	r1, [sp, #16]
 80120f8:	4620      	mov	r0, r4
 80120fa:	f000 fac6 	bl	801268a <__multadd>
 80120fe:	45b1      	cmp	r9, r6
 8012100:	9004      	str	r0, [sp, #16]
 8012102:	f04f 0300 	mov.w	r3, #0
 8012106:	f04f 020a 	mov.w	r2, #10
 801210a:	4649      	mov	r1, r9
 801210c:	4620      	mov	r0, r4
 801210e:	d105      	bne.n	801211c <_dtoa_r+0xaa4>
 8012110:	f000 fabb 	bl	801268a <__multadd>
 8012114:	4681      	mov	r9, r0
 8012116:	4606      	mov	r6, r0
 8012118:	9505      	str	r5, [sp, #20]
 801211a:	e776      	b.n	801200a <_dtoa_r+0x992>
 801211c:	f000 fab5 	bl	801268a <__multadd>
 8012120:	4631      	mov	r1, r6
 8012122:	4681      	mov	r9, r0
 8012124:	2300      	movs	r3, #0
 8012126:	220a      	movs	r2, #10
 8012128:	4620      	mov	r0, r4
 801212a:	f000 faae 	bl	801268a <__multadd>
 801212e:	4606      	mov	r6, r0
 8012130:	e7f2      	b.n	8012118 <_dtoa_r+0xaa0>
 8012132:	f04f 0900 	mov.w	r9, #0
 8012136:	2201      	movs	r2, #1
 8012138:	9904      	ldr	r1, [sp, #16]
 801213a:	4620      	mov	r0, r4
 801213c:	f000 fc1c 	bl	8012978 <__lshift>
 8012140:	4639      	mov	r1, r7
 8012142:	9004      	str	r0, [sp, #16]
 8012144:	f000 fc6c 	bl	8012a20 <__mcmp>
 8012148:	2800      	cmp	r0, #0
 801214a:	dcb6      	bgt.n	80120ba <_dtoa_r+0xa42>
 801214c:	d102      	bne.n	8012154 <_dtoa_r+0xadc>
 801214e:	f018 0f01 	tst.w	r8, #1
 8012152:	d1b2      	bne.n	80120ba <_dtoa_r+0xa42>
 8012154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012158:	2b30      	cmp	r3, #48	; 0x30
 801215a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801215e:	f47f af0a 	bne.w	8011f76 <_dtoa_r+0x8fe>
 8012162:	4615      	mov	r5, r2
 8012164:	e7f6      	b.n	8012154 <_dtoa_r+0xadc>
 8012166:	4593      	cmp	fp, r2
 8012168:	d105      	bne.n	8012176 <_dtoa_r+0xafe>
 801216a:	2331      	movs	r3, #49	; 0x31
 801216c:	f10a 0a01 	add.w	sl, sl, #1
 8012170:	f88b 3000 	strb.w	r3, [fp]
 8012174:	e6ff      	b.n	8011f76 <_dtoa_r+0x8fe>
 8012176:	4615      	mov	r5, r2
 8012178:	e79f      	b.n	80120ba <_dtoa_r+0xa42>
 801217a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80121e0 <_dtoa_r+0xb68>
 801217e:	e007      	b.n	8012190 <_dtoa_r+0xb18>
 8012180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012182:	f8df b060 	ldr.w	fp, [pc, #96]	; 80121e4 <_dtoa_r+0xb6c>
 8012186:	b11b      	cbz	r3, 8012190 <_dtoa_r+0xb18>
 8012188:	f10b 0308 	add.w	r3, fp, #8
 801218c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801218e:	6013      	str	r3, [r2, #0]
 8012190:	4658      	mov	r0, fp
 8012192:	b017      	add	sp, #92	; 0x5c
 8012194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012198:	9b06      	ldr	r3, [sp, #24]
 801219a:	2b01      	cmp	r3, #1
 801219c:	f77f ae35 	ble.w	8011e0a <_dtoa_r+0x792>
 80121a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121a2:	9307      	str	r3, [sp, #28]
 80121a4:	e649      	b.n	8011e3a <_dtoa_r+0x7c2>
 80121a6:	9b02      	ldr	r3, [sp, #8]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	dc03      	bgt.n	80121b4 <_dtoa_r+0xb3c>
 80121ac:	9b06      	ldr	r3, [sp, #24]
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	f73f aecc 	bgt.w	8011f4c <_dtoa_r+0x8d4>
 80121b4:	465d      	mov	r5, fp
 80121b6:	4639      	mov	r1, r7
 80121b8:	9804      	ldr	r0, [sp, #16]
 80121ba:	f7ff f9d1 	bl	8011560 <quorem>
 80121be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80121c2:	f805 8b01 	strb.w	r8, [r5], #1
 80121c6:	9a02      	ldr	r2, [sp, #8]
 80121c8:	eba5 030b 	sub.w	r3, r5, fp
 80121cc:	429a      	cmp	r2, r3
 80121ce:	ddb0      	ble.n	8012132 <_dtoa_r+0xaba>
 80121d0:	2300      	movs	r3, #0
 80121d2:	220a      	movs	r2, #10
 80121d4:	9904      	ldr	r1, [sp, #16]
 80121d6:	4620      	mov	r0, r4
 80121d8:	f000 fa57 	bl	801268a <__multadd>
 80121dc:	9004      	str	r0, [sp, #16]
 80121de:	e7ea      	b.n	80121b6 <_dtoa_r+0xb3e>
 80121e0:	08015b9c 	.word	0x08015b9c
 80121e4:	08015bc0 	.word	0x08015bc0

080121e8 <__sflush_r>:
 80121e8:	898a      	ldrh	r2, [r1, #12]
 80121ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ee:	4605      	mov	r5, r0
 80121f0:	0710      	lsls	r0, r2, #28
 80121f2:	460c      	mov	r4, r1
 80121f4:	d458      	bmi.n	80122a8 <__sflush_r+0xc0>
 80121f6:	684b      	ldr	r3, [r1, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	dc05      	bgt.n	8012208 <__sflush_r+0x20>
 80121fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80121fe:	2b00      	cmp	r3, #0
 8012200:	dc02      	bgt.n	8012208 <__sflush_r+0x20>
 8012202:	2000      	movs	r0, #0
 8012204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801220a:	2e00      	cmp	r6, #0
 801220c:	d0f9      	beq.n	8012202 <__sflush_r+0x1a>
 801220e:	2300      	movs	r3, #0
 8012210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012214:	682f      	ldr	r7, [r5, #0]
 8012216:	6a21      	ldr	r1, [r4, #32]
 8012218:	602b      	str	r3, [r5, #0]
 801221a:	d032      	beq.n	8012282 <__sflush_r+0x9a>
 801221c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801221e:	89a3      	ldrh	r3, [r4, #12]
 8012220:	075a      	lsls	r2, r3, #29
 8012222:	d505      	bpl.n	8012230 <__sflush_r+0x48>
 8012224:	6863      	ldr	r3, [r4, #4]
 8012226:	1ac0      	subs	r0, r0, r3
 8012228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801222a:	b10b      	cbz	r3, 8012230 <__sflush_r+0x48>
 801222c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801222e:	1ac0      	subs	r0, r0, r3
 8012230:	2300      	movs	r3, #0
 8012232:	4602      	mov	r2, r0
 8012234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012236:	6a21      	ldr	r1, [r4, #32]
 8012238:	4628      	mov	r0, r5
 801223a:	47b0      	blx	r6
 801223c:	1c43      	adds	r3, r0, #1
 801223e:	89a3      	ldrh	r3, [r4, #12]
 8012240:	d106      	bne.n	8012250 <__sflush_r+0x68>
 8012242:	6829      	ldr	r1, [r5, #0]
 8012244:	291d      	cmp	r1, #29
 8012246:	d848      	bhi.n	80122da <__sflush_r+0xf2>
 8012248:	4a29      	ldr	r2, [pc, #164]	; (80122f0 <__sflush_r+0x108>)
 801224a:	40ca      	lsrs	r2, r1
 801224c:	07d6      	lsls	r6, r2, #31
 801224e:	d544      	bpl.n	80122da <__sflush_r+0xf2>
 8012250:	2200      	movs	r2, #0
 8012252:	6062      	str	r2, [r4, #4]
 8012254:	04d9      	lsls	r1, r3, #19
 8012256:	6922      	ldr	r2, [r4, #16]
 8012258:	6022      	str	r2, [r4, #0]
 801225a:	d504      	bpl.n	8012266 <__sflush_r+0x7e>
 801225c:	1c42      	adds	r2, r0, #1
 801225e:	d101      	bne.n	8012264 <__sflush_r+0x7c>
 8012260:	682b      	ldr	r3, [r5, #0]
 8012262:	b903      	cbnz	r3, 8012266 <__sflush_r+0x7e>
 8012264:	6560      	str	r0, [r4, #84]	; 0x54
 8012266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012268:	602f      	str	r7, [r5, #0]
 801226a:	2900      	cmp	r1, #0
 801226c:	d0c9      	beq.n	8012202 <__sflush_r+0x1a>
 801226e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012272:	4299      	cmp	r1, r3
 8012274:	d002      	beq.n	801227c <__sflush_r+0x94>
 8012276:	4628      	mov	r0, r5
 8012278:	f000 fca6 	bl	8012bc8 <_free_r>
 801227c:	2000      	movs	r0, #0
 801227e:	6360      	str	r0, [r4, #52]	; 0x34
 8012280:	e7c0      	b.n	8012204 <__sflush_r+0x1c>
 8012282:	2301      	movs	r3, #1
 8012284:	4628      	mov	r0, r5
 8012286:	47b0      	blx	r6
 8012288:	1c41      	adds	r1, r0, #1
 801228a:	d1c8      	bne.n	801221e <__sflush_r+0x36>
 801228c:	682b      	ldr	r3, [r5, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d0c5      	beq.n	801221e <__sflush_r+0x36>
 8012292:	2b1d      	cmp	r3, #29
 8012294:	d001      	beq.n	801229a <__sflush_r+0xb2>
 8012296:	2b16      	cmp	r3, #22
 8012298:	d101      	bne.n	801229e <__sflush_r+0xb6>
 801229a:	602f      	str	r7, [r5, #0]
 801229c:	e7b1      	b.n	8012202 <__sflush_r+0x1a>
 801229e:	89a3      	ldrh	r3, [r4, #12]
 80122a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122a4:	81a3      	strh	r3, [r4, #12]
 80122a6:	e7ad      	b.n	8012204 <__sflush_r+0x1c>
 80122a8:	690f      	ldr	r7, [r1, #16]
 80122aa:	2f00      	cmp	r7, #0
 80122ac:	d0a9      	beq.n	8012202 <__sflush_r+0x1a>
 80122ae:	0793      	lsls	r3, r2, #30
 80122b0:	680e      	ldr	r6, [r1, #0]
 80122b2:	bf08      	it	eq
 80122b4:	694b      	ldreq	r3, [r1, #20]
 80122b6:	600f      	str	r7, [r1, #0]
 80122b8:	bf18      	it	ne
 80122ba:	2300      	movne	r3, #0
 80122bc:	eba6 0807 	sub.w	r8, r6, r7
 80122c0:	608b      	str	r3, [r1, #8]
 80122c2:	f1b8 0f00 	cmp.w	r8, #0
 80122c6:	dd9c      	ble.n	8012202 <__sflush_r+0x1a>
 80122c8:	4643      	mov	r3, r8
 80122ca:	463a      	mov	r2, r7
 80122cc:	6a21      	ldr	r1, [r4, #32]
 80122ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b0      	blx	r6
 80122d4:	2800      	cmp	r0, #0
 80122d6:	dc06      	bgt.n	80122e6 <__sflush_r+0xfe>
 80122d8:	89a3      	ldrh	r3, [r4, #12]
 80122da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122de:	81a3      	strh	r3, [r4, #12]
 80122e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122e4:	e78e      	b.n	8012204 <__sflush_r+0x1c>
 80122e6:	4407      	add	r7, r0
 80122e8:	eba8 0800 	sub.w	r8, r8, r0
 80122ec:	e7e9      	b.n	80122c2 <__sflush_r+0xda>
 80122ee:	bf00      	nop
 80122f0:	20400001 	.word	0x20400001

080122f4 <_fflush_r>:
 80122f4:	b538      	push	{r3, r4, r5, lr}
 80122f6:	690b      	ldr	r3, [r1, #16]
 80122f8:	4605      	mov	r5, r0
 80122fa:	460c      	mov	r4, r1
 80122fc:	b1db      	cbz	r3, 8012336 <_fflush_r+0x42>
 80122fe:	b118      	cbz	r0, 8012308 <_fflush_r+0x14>
 8012300:	6983      	ldr	r3, [r0, #24]
 8012302:	b90b      	cbnz	r3, 8012308 <_fflush_r+0x14>
 8012304:	f000 f860 	bl	80123c8 <__sinit>
 8012308:	4b0c      	ldr	r3, [pc, #48]	; (801233c <_fflush_r+0x48>)
 801230a:	429c      	cmp	r4, r3
 801230c:	d109      	bne.n	8012322 <_fflush_r+0x2e>
 801230e:	686c      	ldr	r4, [r5, #4]
 8012310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012314:	b17b      	cbz	r3, 8012336 <_fflush_r+0x42>
 8012316:	4621      	mov	r1, r4
 8012318:	4628      	mov	r0, r5
 801231a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801231e:	f7ff bf63 	b.w	80121e8 <__sflush_r>
 8012322:	4b07      	ldr	r3, [pc, #28]	; (8012340 <_fflush_r+0x4c>)
 8012324:	429c      	cmp	r4, r3
 8012326:	d101      	bne.n	801232c <_fflush_r+0x38>
 8012328:	68ac      	ldr	r4, [r5, #8]
 801232a:	e7f1      	b.n	8012310 <_fflush_r+0x1c>
 801232c:	4b05      	ldr	r3, [pc, #20]	; (8012344 <_fflush_r+0x50>)
 801232e:	429c      	cmp	r4, r3
 8012330:	bf08      	it	eq
 8012332:	68ec      	ldreq	r4, [r5, #12]
 8012334:	e7ec      	b.n	8012310 <_fflush_r+0x1c>
 8012336:	2000      	movs	r0, #0
 8012338:	bd38      	pop	{r3, r4, r5, pc}
 801233a:	bf00      	nop
 801233c:	08015bf0 	.word	0x08015bf0
 8012340:	08015c10 	.word	0x08015c10
 8012344:	08015bd0 	.word	0x08015bd0

08012348 <std>:
 8012348:	2300      	movs	r3, #0
 801234a:	b510      	push	{r4, lr}
 801234c:	4604      	mov	r4, r0
 801234e:	e9c0 3300 	strd	r3, r3, [r0]
 8012352:	6083      	str	r3, [r0, #8]
 8012354:	8181      	strh	r1, [r0, #12]
 8012356:	6643      	str	r3, [r0, #100]	; 0x64
 8012358:	81c2      	strh	r2, [r0, #14]
 801235a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801235e:	6183      	str	r3, [r0, #24]
 8012360:	4619      	mov	r1, r3
 8012362:	2208      	movs	r2, #8
 8012364:	305c      	adds	r0, #92	; 0x5c
 8012366:	f7fe fb3a 	bl	80109de <memset>
 801236a:	4b05      	ldr	r3, [pc, #20]	; (8012380 <std+0x38>)
 801236c:	6263      	str	r3, [r4, #36]	; 0x24
 801236e:	4b05      	ldr	r3, [pc, #20]	; (8012384 <std+0x3c>)
 8012370:	62a3      	str	r3, [r4, #40]	; 0x28
 8012372:	4b05      	ldr	r3, [pc, #20]	; (8012388 <std+0x40>)
 8012374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012376:	4b05      	ldr	r3, [pc, #20]	; (801238c <std+0x44>)
 8012378:	6224      	str	r4, [r4, #32]
 801237a:	6323      	str	r3, [r4, #48]	; 0x30
 801237c:	bd10      	pop	{r4, pc}
 801237e:	bf00      	nop
 8012380:	08013269 	.word	0x08013269
 8012384:	0801328b 	.word	0x0801328b
 8012388:	080132c3 	.word	0x080132c3
 801238c:	080132e7 	.word	0x080132e7

08012390 <_cleanup_r>:
 8012390:	4901      	ldr	r1, [pc, #4]	; (8012398 <_cleanup_r+0x8>)
 8012392:	f000 b885 	b.w	80124a0 <_fwalk_reent>
 8012396:	bf00      	nop
 8012398:	080122f5 	.word	0x080122f5

0801239c <__sfmoreglue>:
 801239c:	b570      	push	{r4, r5, r6, lr}
 801239e:	1e4a      	subs	r2, r1, #1
 80123a0:	2568      	movs	r5, #104	; 0x68
 80123a2:	4355      	muls	r5, r2
 80123a4:	460e      	mov	r6, r1
 80123a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80123aa:	f000 fc5b 	bl	8012c64 <_malloc_r>
 80123ae:	4604      	mov	r4, r0
 80123b0:	b140      	cbz	r0, 80123c4 <__sfmoreglue+0x28>
 80123b2:	2100      	movs	r1, #0
 80123b4:	e9c0 1600 	strd	r1, r6, [r0]
 80123b8:	300c      	adds	r0, #12
 80123ba:	60a0      	str	r0, [r4, #8]
 80123bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80123c0:	f7fe fb0d 	bl	80109de <memset>
 80123c4:	4620      	mov	r0, r4
 80123c6:	bd70      	pop	{r4, r5, r6, pc}

080123c8 <__sinit>:
 80123c8:	6983      	ldr	r3, [r0, #24]
 80123ca:	b510      	push	{r4, lr}
 80123cc:	4604      	mov	r4, r0
 80123ce:	bb33      	cbnz	r3, 801241e <__sinit+0x56>
 80123d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80123d4:	6503      	str	r3, [r0, #80]	; 0x50
 80123d6:	4b12      	ldr	r3, [pc, #72]	; (8012420 <__sinit+0x58>)
 80123d8:	4a12      	ldr	r2, [pc, #72]	; (8012424 <__sinit+0x5c>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	6282      	str	r2, [r0, #40]	; 0x28
 80123de:	4298      	cmp	r0, r3
 80123e0:	bf04      	itt	eq
 80123e2:	2301      	moveq	r3, #1
 80123e4:	6183      	streq	r3, [r0, #24]
 80123e6:	f000 f81f 	bl	8012428 <__sfp>
 80123ea:	6060      	str	r0, [r4, #4]
 80123ec:	4620      	mov	r0, r4
 80123ee:	f000 f81b 	bl	8012428 <__sfp>
 80123f2:	60a0      	str	r0, [r4, #8]
 80123f4:	4620      	mov	r0, r4
 80123f6:	f000 f817 	bl	8012428 <__sfp>
 80123fa:	2200      	movs	r2, #0
 80123fc:	60e0      	str	r0, [r4, #12]
 80123fe:	2104      	movs	r1, #4
 8012400:	6860      	ldr	r0, [r4, #4]
 8012402:	f7ff ffa1 	bl	8012348 <std>
 8012406:	2201      	movs	r2, #1
 8012408:	2109      	movs	r1, #9
 801240a:	68a0      	ldr	r0, [r4, #8]
 801240c:	f7ff ff9c 	bl	8012348 <std>
 8012410:	2202      	movs	r2, #2
 8012412:	2112      	movs	r1, #18
 8012414:	68e0      	ldr	r0, [r4, #12]
 8012416:	f7ff ff97 	bl	8012348 <std>
 801241a:	2301      	movs	r3, #1
 801241c:	61a3      	str	r3, [r4, #24]
 801241e:	bd10      	pop	{r4, pc}
 8012420:	08015b88 	.word	0x08015b88
 8012424:	08012391 	.word	0x08012391

08012428 <__sfp>:
 8012428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801242a:	4b1b      	ldr	r3, [pc, #108]	; (8012498 <__sfp+0x70>)
 801242c:	681e      	ldr	r6, [r3, #0]
 801242e:	69b3      	ldr	r3, [r6, #24]
 8012430:	4607      	mov	r7, r0
 8012432:	b913      	cbnz	r3, 801243a <__sfp+0x12>
 8012434:	4630      	mov	r0, r6
 8012436:	f7ff ffc7 	bl	80123c8 <__sinit>
 801243a:	3648      	adds	r6, #72	; 0x48
 801243c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012440:	3b01      	subs	r3, #1
 8012442:	d503      	bpl.n	801244c <__sfp+0x24>
 8012444:	6833      	ldr	r3, [r6, #0]
 8012446:	b133      	cbz	r3, 8012456 <__sfp+0x2e>
 8012448:	6836      	ldr	r6, [r6, #0]
 801244a:	e7f7      	b.n	801243c <__sfp+0x14>
 801244c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012450:	b16d      	cbz	r5, 801246e <__sfp+0x46>
 8012452:	3468      	adds	r4, #104	; 0x68
 8012454:	e7f4      	b.n	8012440 <__sfp+0x18>
 8012456:	2104      	movs	r1, #4
 8012458:	4638      	mov	r0, r7
 801245a:	f7ff ff9f 	bl	801239c <__sfmoreglue>
 801245e:	6030      	str	r0, [r6, #0]
 8012460:	2800      	cmp	r0, #0
 8012462:	d1f1      	bne.n	8012448 <__sfp+0x20>
 8012464:	230c      	movs	r3, #12
 8012466:	603b      	str	r3, [r7, #0]
 8012468:	4604      	mov	r4, r0
 801246a:	4620      	mov	r0, r4
 801246c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801246e:	4b0b      	ldr	r3, [pc, #44]	; (801249c <__sfp+0x74>)
 8012470:	6665      	str	r5, [r4, #100]	; 0x64
 8012472:	e9c4 5500 	strd	r5, r5, [r4]
 8012476:	60a5      	str	r5, [r4, #8]
 8012478:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801247c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012480:	2208      	movs	r2, #8
 8012482:	4629      	mov	r1, r5
 8012484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012488:	f7fe faa9 	bl	80109de <memset>
 801248c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012494:	e7e9      	b.n	801246a <__sfp+0x42>
 8012496:	bf00      	nop
 8012498:	08015b88 	.word	0x08015b88
 801249c:	ffff0001 	.word	0xffff0001

080124a0 <_fwalk_reent>:
 80124a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a4:	4680      	mov	r8, r0
 80124a6:	4689      	mov	r9, r1
 80124a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80124ac:	2600      	movs	r6, #0
 80124ae:	b914      	cbnz	r4, 80124b6 <_fwalk_reent+0x16>
 80124b0:	4630      	mov	r0, r6
 80124b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80124ba:	3f01      	subs	r7, #1
 80124bc:	d501      	bpl.n	80124c2 <_fwalk_reent+0x22>
 80124be:	6824      	ldr	r4, [r4, #0]
 80124c0:	e7f5      	b.n	80124ae <_fwalk_reent+0xe>
 80124c2:	89ab      	ldrh	r3, [r5, #12]
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d907      	bls.n	80124d8 <_fwalk_reent+0x38>
 80124c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124cc:	3301      	adds	r3, #1
 80124ce:	d003      	beq.n	80124d8 <_fwalk_reent+0x38>
 80124d0:	4629      	mov	r1, r5
 80124d2:	4640      	mov	r0, r8
 80124d4:	47c8      	blx	r9
 80124d6:	4306      	orrs	r6, r0
 80124d8:	3568      	adds	r5, #104	; 0x68
 80124da:	e7ee      	b.n	80124ba <_fwalk_reent+0x1a>

080124dc <_localeconv_r>:
 80124dc:	4b04      	ldr	r3, [pc, #16]	; (80124f0 <_localeconv_r+0x14>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	6a18      	ldr	r0, [r3, #32]
 80124e2:	4b04      	ldr	r3, [pc, #16]	; (80124f4 <_localeconv_r+0x18>)
 80124e4:	2800      	cmp	r0, #0
 80124e6:	bf08      	it	eq
 80124e8:	4618      	moveq	r0, r3
 80124ea:	30f0      	adds	r0, #240	; 0xf0
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	20000154 	.word	0x20000154
 80124f4:	200001b8 	.word	0x200001b8

080124f8 <__swhatbuf_r>:
 80124f8:	b570      	push	{r4, r5, r6, lr}
 80124fa:	460e      	mov	r6, r1
 80124fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012500:	2900      	cmp	r1, #0
 8012502:	b096      	sub	sp, #88	; 0x58
 8012504:	4614      	mov	r4, r2
 8012506:	461d      	mov	r5, r3
 8012508:	da07      	bge.n	801251a <__swhatbuf_r+0x22>
 801250a:	2300      	movs	r3, #0
 801250c:	602b      	str	r3, [r5, #0]
 801250e:	89b3      	ldrh	r3, [r6, #12]
 8012510:	061a      	lsls	r2, r3, #24
 8012512:	d410      	bmi.n	8012536 <__swhatbuf_r+0x3e>
 8012514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012518:	e00e      	b.n	8012538 <__swhatbuf_r+0x40>
 801251a:	466a      	mov	r2, sp
 801251c:	f000 ff16 	bl	801334c <_fstat_r>
 8012520:	2800      	cmp	r0, #0
 8012522:	dbf2      	blt.n	801250a <__swhatbuf_r+0x12>
 8012524:	9a01      	ldr	r2, [sp, #4]
 8012526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801252a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801252e:	425a      	negs	r2, r3
 8012530:	415a      	adcs	r2, r3
 8012532:	602a      	str	r2, [r5, #0]
 8012534:	e7ee      	b.n	8012514 <__swhatbuf_r+0x1c>
 8012536:	2340      	movs	r3, #64	; 0x40
 8012538:	2000      	movs	r0, #0
 801253a:	6023      	str	r3, [r4, #0]
 801253c:	b016      	add	sp, #88	; 0x58
 801253e:	bd70      	pop	{r4, r5, r6, pc}

08012540 <__smakebuf_r>:
 8012540:	898b      	ldrh	r3, [r1, #12]
 8012542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012544:	079d      	lsls	r5, r3, #30
 8012546:	4606      	mov	r6, r0
 8012548:	460c      	mov	r4, r1
 801254a:	d507      	bpl.n	801255c <__smakebuf_r+0x1c>
 801254c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012550:	6023      	str	r3, [r4, #0]
 8012552:	6123      	str	r3, [r4, #16]
 8012554:	2301      	movs	r3, #1
 8012556:	6163      	str	r3, [r4, #20]
 8012558:	b002      	add	sp, #8
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	ab01      	add	r3, sp, #4
 801255e:	466a      	mov	r2, sp
 8012560:	f7ff ffca 	bl	80124f8 <__swhatbuf_r>
 8012564:	9900      	ldr	r1, [sp, #0]
 8012566:	4605      	mov	r5, r0
 8012568:	4630      	mov	r0, r6
 801256a:	f000 fb7b 	bl	8012c64 <_malloc_r>
 801256e:	b948      	cbnz	r0, 8012584 <__smakebuf_r+0x44>
 8012570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012574:	059a      	lsls	r2, r3, #22
 8012576:	d4ef      	bmi.n	8012558 <__smakebuf_r+0x18>
 8012578:	f023 0303 	bic.w	r3, r3, #3
 801257c:	f043 0302 	orr.w	r3, r3, #2
 8012580:	81a3      	strh	r3, [r4, #12]
 8012582:	e7e3      	b.n	801254c <__smakebuf_r+0xc>
 8012584:	4b0d      	ldr	r3, [pc, #52]	; (80125bc <__smakebuf_r+0x7c>)
 8012586:	62b3      	str	r3, [r6, #40]	; 0x28
 8012588:	89a3      	ldrh	r3, [r4, #12]
 801258a:	6020      	str	r0, [r4, #0]
 801258c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012590:	81a3      	strh	r3, [r4, #12]
 8012592:	9b00      	ldr	r3, [sp, #0]
 8012594:	6163      	str	r3, [r4, #20]
 8012596:	9b01      	ldr	r3, [sp, #4]
 8012598:	6120      	str	r0, [r4, #16]
 801259a:	b15b      	cbz	r3, 80125b4 <__smakebuf_r+0x74>
 801259c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125a0:	4630      	mov	r0, r6
 80125a2:	f000 fee5 	bl	8013370 <_isatty_r>
 80125a6:	b128      	cbz	r0, 80125b4 <__smakebuf_r+0x74>
 80125a8:	89a3      	ldrh	r3, [r4, #12]
 80125aa:	f023 0303 	bic.w	r3, r3, #3
 80125ae:	f043 0301 	orr.w	r3, r3, #1
 80125b2:	81a3      	strh	r3, [r4, #12]
 80125b4:	89a3      	ldrh	r3, [r4, #12]
 80125b6:	431d      	orrs	r5, r3
 80125b8:	81a5      	strh	r5, [r4, #12]
 80125ba:	e7cd      	b.n	8012558 <__smakebuf_r+0x18>
 80125bc:	08012391 	.word	0x08012391

080125c0 <malloc>:
 80125c0:	4b02      	ldr	r3, [pc, #8]	; (80125cc <malloc+0xc>)
 80125c2:	4601      	mov	r1, r0
 80125c4:	6818      	ldr	r0, [r3, #0]
 80125c6:	f000 bb4d 	b.w	8012c64 <_malloc_r>
 80125ca:	bf00      	nop
 80125cc:	20000154 	.word	0x20000154

080125d0 <__ascii_mbtowc>:
 80125d0:	b082      	sub	sp, #8
 80125d2:	b901      	cbnz	r1, 80125d6 <__ascii_mbtowc+0x6>
 80125d4:	a901      	add	r1, sp, #4
 80125d6:	b142      	cbz	r2, 80125ea <__ascii_mbtowc+0x1a>
 80125d8:	b14b      	cbz	r3, 80125ee <__ascii_mbtowc+0x1e>
 80125da:	7813      	ldrb	r3, [r2, #0]
 80125dc:	600b      	str	r3, [r1, #0]
 80125de:	7812      	ldrb	r2, [r2, #0]
 80125e0:	1c10      	adds	r0, r2, #0
 80125e2:	bf18      	it	ne
 80125e4:	2001      	movne	r0, #1
 80125e6:	b002      	add	sp, #8
 80125e8:	4770      	bx	lr
 80125ea:	4610      	mov	r0, r2
 80125ec:	e7fb      	b.n	80125e6 <__ascii_mbtowc+0x16>
 80125ee:	f06f 0001 	mvn.w	r0, #1
 80125f2:	e7f8      	b.n	80125e6 <__ascii_mbtowc+0x16>

080125f4 <_Balloc>:
 80125f4:	b570      	push	{r4, r5, r6, lr}
 80125f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80125f8:	4604      	mov	r4, r0
 80125fa:	460e      	mov	r6, r1
 80125fc:	b93d      	cbnz	r5, 801260e <_Balloc+0x1a>
 80125fe:	2010      	movs	r0, #16
 8012600:	f7ff ffde 	bl	80125c0 <malloc>
 8012604:	6260      	str	r0, [r4, #36]	; 0x24
 8012606:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801260a:	6005      	str	r5, [r0, #0]
 801260c:	60c5      	str	r5, [r0, #12]
 801260e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012610:	68eb      	ldr	r3, [r5, #12]
 8012612:	b183      	cbz	r3, 8012636 <_Balloc+0x42>
 8012614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801261c:	b9b8      	cbnz	r0, 801264e <_Balloc+0x5a>
 801261e:	2101      	movs	r1, #1
 8012620:	fa01 f506 	lsl.w	r5, r1, r6
 8012624:	1d6a      	adds	r2, r5, #5
 8012626:	0092      	lsls	r2, r2, #2
 8012628:	4620      	mov	r0, r4
 801262a:	f000 fabf 	bl	8012bac <_calloc_r>
 801262e:	b160      	cbz	r0, 801264a <_Balloc+0x56>
 8012630:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012634:	e00e      	b.n	8012654 <_Balloc+0x60>
 8012636:	2221      	movs	r2, #33	; 0x21
 8012638:	2104      	movs	r1, #4
 801263a:	4620      	mov	r0, r4
 801263c:	f000 fab6 	bl	8012bac <_calloc_r>
 8012640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012642:	60e8      	str	r0, [r5, #12]
 8012644:	68db      	ldr	r3, [r3, #12]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d1e4      	bne.n	8012614 <_Balloc+0x20>
 801264a:	2000      	movs	r0, #0
 801264c:	bd70      	pop	{r4, r5, r6, pc}
 801264e:	6802      	ldr	r2, [r0, #0]
 8012650:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012654:	2300      	movs	r3, #0
 8012656:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801265a:	e7f7      	b.n	801264c <_Balloc+0x58>

0801265c <_Bfree>:
 801265c:	b570      	push	{r4, r5, r6, lr}
 801265e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012660:	4606      	mov	r6, r0
 8012662:	460d      	mov	r5, r1
 8012664:	b93c      	cbnz	r4, 8012676 <_Bfree+0x1a>
 8012666:	2010      	movs	r0, #16
 8012668:	f7ff ffaa 	bl	80125c0 <malloc>
 801266c:	6270      	str	r0, [r6, #36]	; 0x24
 801266e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012672:	6004      	str	r4, [r0, #0]
 8012674:	60c4      	str	r4, [r0, #12]
 8012676:	b13d      	cbz	r5, 8012688 <_Bfree+0x2c>
 8012678:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801267a:	686a      	ldr	r2, [r5, #4]
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012682:	6029      	str	r1, [r5, #0]
 8012684:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012688:	bd70      	pop	{r4, r5, r6, pc}

0801268a <__multadd>:
 801268a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801268e:	690d      	ldr	r5, [r1, #16]
 8012690:	461f      	mov	r7, r3
 8012692:	4606      	mov	r6, r0
 8012694:	460c      	mov	r4, r1
 8012696:	f101 0c14 	add.w	ip, r1, #20
 801269a:	2300      	movs	r3, #0
 801269c:	f8dc 0000 	ldr.w	r0, [ip]
 80126a0:	b281      	uxth	r1, r0
 80126a2:	fb02 7101 	mla	r1, r2, r1, r7
 80126a6:	0c0f      	lsrs	r7, r1, #16
 80126a8:	0c00      	lsrs	r0, r0, #16
 80126aa:	fb02 7000 	mla	r0, r2, r0, r7
 80126ae:	b289      	uxth	r1, r1
 80126b0:	3301      	adds	r3, #1
 80126b2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80126b6:	429d      	cmp	r5, r3
 80126b8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80126bc:	f84c 1b04 	str.w	r1, [ip], #4
 80126c0:	dcec      	bgt.n	801269c <__multadd+0x12>
 80126c2:	b1d7      	cbz	r7, 80126fa <__multadd+0x70>
 80126c4:	68a3      	ldr	r3, [r4, #8]
 80126c6:	42ab      	cmp	r3, r5
 80126c8:	dc12      	bgt.n	80126f0 <__multadd+0x66>
 80126ca:	6861      	ldr	r1, [r4, #4]
 80126cc:	4630      	mov	r0, r6
 80126ce:	3101      	adds	r1, #1
 80126d0:	f7ff ff90 	bl	80125f4 <_Balloc>
 80126d4:	6922      	ldr	r2, [r4, #16]
 80126d6:	3202      	adds	r2, #2
 80126d8:	f104 010c 	add.w	r1, r4, #12
 80126dc:	4680      	mov	r8, r0
 80126de:	0092      	lsls	r2, r2, #2
 80126e0:	300c      	adds	r0, #12
 80126e2:	f7fe f971 	bl	80109c8 <memcpy>
 80126e6:	4621      	mov	r1, r4
 80126e8:	4630      	mov	r0, r6
 80126ea:	f7ff ffb7 	bl	801265c <_Bfree>
 80126ee:	4644      	mov	r4, r8
 80126f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80126f4:	3501      	adds	r5, #1
 80126f6:	615f      	str	r7, [r3, #20]
 80126f8:	6125      	str	r5, [r4, #16]
 80126fa:	4620      	mov	r0, r4
 80126fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012700 <__hi0bits>:
 8012700:	0c02      	lsrs	r2, r0, #16
 8012702:	0412      	lsls	r2, r2, #16
 8012704:	4603      	mov	r3, r0
 8012706:	b9b2      	cbnz	r2, 8012736 <__hi0bits+0x36>
 8012708:	0403      	lsls	r3, r0, #16
 801270a:	2010      	movs	r0, #16
 801270c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012710:	bf04      	itt	eq
 8012712:	021b      	lsleq	r3, r3, #8
 8012714:	3008      	addeq	r0, #8
 8012716:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801271a:	bf04      	itt	eq
 801271c:	011b      	lsleq	r3, r3, #4
 801271e:	3004      	addeq	r0, #4
 8012720:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012724:	bf04      	itt	eq
 8012726:	009b      	lsleq	r3, r3, #2
 8012728:	3002      	addeq	r0, #2
 801272a:	2b00      	cmp	r3, #0
 801272c:	db06      	blt.n	801273c <__hi0bits+0x3c>
 801272e:	005b      	lsls	r3, r3, #1
 8012730:	d503      	bpl.n	801273a <__hi0bits+0x3a>
 8012732:	3001      	adds	r0, #1
 8012734:	4770      	bx	lr
 8012736:	2000      	movs	r0, #0
 8012738:	e7e8      	b.n	801270c <__hi0bits+0xc>
 801273a:	2020      	movs	r0, #32
 801273c:	4770      	bx	lr

0801273e <__lo0bits>:
 801273e:	6803      	ldr	r3, [r0, #0]
 8012740:	f013 0207 	ands.w	r2, r3, #7
 8012744:	4601      	mov	r1, r0
 8012746:	d00b      	beq.n	8012760 <__lo0bits+0x22>
 8012748:	07da      	lsls	r2, r3, #31
 801274a:	d423      	bmi.n	8012794 <__lo0bits+0x56>
 801274c:	0798      	lsls	r0, r3, #30
 801274e:	bf49      	itett	mi
 8012750:	085b      	lsrmi	r3, r3, #1
 8012752:	089b      	lsrpl	r3, r3, #2
 8012754:	2001      	movmi	r0, #1
 8012756:	600b      	strmi	r3, [r1, #0]
 8012758:	bf5c      	itt	pl
 801275a:	600b      	strpl	r3, [r1, #0]
 801275c:	2002      	movpl	r0, #2
 801275e:	4770      	bx	lr
 8012760:	b298      	uxth	r0, r3
 8012762:	b9a8      	cbnz	r0, 8012790 <__lo0bits+0x52>
 8012764:	0c1b      	lsrs	r3, r3, #16
 8012766:	2010      	movs	r0, #16
 8012768:	f013 0fff 	tst.w	r3, #255	; 0xff
 801276c:	bf04      	itt	eq
 801276e:	0a1b      	lsreq	r3, r3, #8
 8012770:	3008      	addeq	r0, #8
 8012772:	071a      	lsls	r2, r3, #28
 8012774:	bf04      	itt	eq
 8012776:	091b      	lsreq	r3, r3, #4
 8012778:	3004      	addeq	r0, #4
 801277a:	079a      	lsls	r2, r3, #30
 801277c:	bf04      	itt	eq
 801277e:	089b      	lsreq	r3, r3, #2
 8012780:	3002      	addeq	r0, #2
 8012782:	07da      	lsls	r2, r3, #31
 8012784:	d402      	bmi.n	801278c <__lo0bits+0x4e>
 8012786:	085b      	lsrs	r3, r3, #1
 8012788:	d006      	beq.n	8012798 <__lo0bits+0x5a>
 801278a:	3001      	adds	r0, #1
 801278c:	600b      	str	r3, [r1, #0]
 801278e:	4770      	bx	lr
 8012790:	4610      	mov	r0, r2
 8012792:	e7e9      	b.n	8012768 <__lo0bits+0x2a>
 8012794:	2000      	movs	r0, #0
 8012796:	4770      	bx	lr
 8012798:	2020      	movs	r0, #32
 801279a:	4770      	bx	lr

0801279c <__i2b>:
 801279c:	b510      	push	{r4, lr}
 801279e:	460c      	mov	r4, r1
 80127a0:	2101      	movs	r1, #1
 80127a2:	f7ff ff27 	bl	80125f4 <_Balloc>
 80127a6:	2201      	movs	r2, #1
 80127a8:	6144      	str	r4, [r0, #20]
 80127aa:	6102      	str	r2, [r0, #16]
 80127ac:	bd10      	pop	{r4, pc}

080127ae <__multiply>:
 80127ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b2:	4614      	mov	r4, r2
 80127b4:	690a      	ldr	r2, [r1, #16]
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	bfb8      	it	lt
 80127bc:	460b      	movlt	r3, r1
 80127be:	4688      	mov	r8, r1
 80127c0:	bfbc      	itt	lt
 80127c2:	46a0      	movlt	r8, r4
 80127c4:	461c      	movlt	r4, r3
 80127c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80127ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80127ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80127d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80127d6:	eb07 0609 	add.w	r6, r7, r9
 80127da:	42b3      	cmp	r3, r6
 80127dc:	bfb8      	it	lt
 80127de:	3101      	addlt	r1, #1
 80127e0:	f7ff ff08 	bl	80125f4 <_Balloc>
 80127e4:	f100 0514 	add.w	r5, r0, #20
 80127e8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80127ec:	462b      	mov	r3, r5
 80127ee:	2200      	movs	r2, #0
 80127f0:	4573      	cmp	r3, lr
 80127f2:	d316      	bcc.n	8012822 <__multiply+0x74>
 80127f4:	f104 0214 	add.w	r2, r4, #20
 80127f8:	f108 0114 	add.w	r1, r8, #20
 80127fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012800:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	9b00      	ldr	r3, [sp, #0]
 8012808:	9201      	str	r2, [sp, #4]
 801280a:	4293      	cmp	r3, r2
 801280c:	d80c      	bhi.n	8012828 <__multiply+0x7a>
 801280e:	2e00      	cmp	r6, #0
 8012810:	dd03      	ble.n	801281a <__multiply+0x6c>
 8012812:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012816:	2b00      	cmp	r3, #0
 8012818:	d05d      	beq.n	80128d6 <__multiply+0x128>
 801281a:	6106      	str	r6, [r0, #16]
 801281c:	b003      	add	sp, #12
 801281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012822:	f843 2b04 	str.w	r2, [r3], #4
 8012826:	e7e3      	b.n	80127f0 <__multiply+0x42>
 8012828:	f8b2 b000 	ldrh.w	fp, [r2]
 801282c:	f1bb 0f00 	cmp.w	fp, #0
 8012830:	d023      	beq.n	801287a <__multiply+0xcc>
 8012832:	4689      	mov	r9, r1
 8012834:	46ac      	mov	ip, r5
 8012836:	f04f 0800 	mov.w	r8, #0
 801283a:	f859 4b04 	ldr.w	r4, [r9], #4
 801283e:	f8dc a000 	ldr.w	sl, [ip]
 8012842:	b2a3      	uxth	r3, r4
 8012844:	fa1f fa8a 	uxth.w	sl, sl
 8012848:	fb0b a303 	mla	r3, fp, r3, sl
 801284c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012850:	f8dc 4000 	ldr.w	r4, [ip]
 8012854:	4443      	add	r3, r8
 8012856:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801285a:	fb0b 840a 	mla	r4, fp, sl, r8
 801285e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012862:	46e2      	mov	sl, ip
 8012864:	b29b      	uxth	r3, r3
 8012866:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801286a:	454f      	cmp	r7, r9
 801286c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012870:	f84a 3b04 	str.w	r3, [sl], #4
 8012874:	d82b      	bhi.n	80128ce <__multiply+0x120>
 8012876:	f8cc 8004 	str.w	r8, [ip, #4]
 801287a:	9b01      	ldr	r3, [sp, #4]
 801287c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012880:	3204      	adds	r2, #4
 8012882:	f1ba 0f00 	cmp.w	sl, #0
 8012886:	d020      	beq.n	80128ca <__multiply+0x11c>
 8012888:	682b      	ldr	r3, [r5, #0]
 801288a:	4689      	mov	r9, r1
 801288c:	46a8      	mov	r8, r5
 801288e:	f04f 0b00 	mov.w	fp, #0
 8012892:	f8b9 c000 	ldrh.w	ip, [r9]
 8012896:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801289a:	fb0a 440c 	mla	r4, sl, ip, r4
 801289e:	445c      	add	r4, fp
 80128a0:	46c4      	mov	ip, r8
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80128a8:	f84c 3b04 	str.w	r3, [ip], #4
 80128ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80128b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80128b4:	0c1b      	lsrs	r3, r3, #16
 80128b6:	fb0a b303 	mla	r3, sl, r3, fp
 80128ba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80128be:	454f      	cmp	r7, r9
 80128c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80128c4:	d805      	bhi.n	80128d2 <__multiply+0x124>
 80128c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80128ca:	3504      	adds	r5, #4
 80128cc:	e79b      	b.n	8012806 <__multiply+0x58>
 80128ce:	46d4      	mov	ip, sl
 80128d0:	e7b3      	b.n	801283a <__multiply+0x8c>
 80128d2:	46e0      	mov	r8, ip
 80128d4:	e7dd      	b.n	8012892 <__multiply+0xe4>
 80128d6:	3e01      	subs	r6, #1
 80128d8:	e799      	b.n	801280e <__multiply+0x60>
	...

080128dc <__pow5mult>:
 80128dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128e0:	4615      	mov	r5, r2
 80128e2:	f012 0203 	ands.w	r2, r2, #3
 80128e6:	4606      	mov	r6, r0
 80128e8:	460f      	mov	r7, r1
 80128ea:	d007      	beq.n	80128fc <__pow5mult+0x20>
 80128ec:	3a01      	subs	r2, #1
 80128ee:	4c21      	ldr	r4, [pc, #132]	; (8012974 <__pow5mult+0x98>)
 80128f0:	2300      	movs	r3, #0
 80128f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80128f6:	f7ff fec8 	bl	801268a <__multadd>
 80128fa:	4607      	mov	r7, r0
 80128fc:	10ad      	asrs	r5, r5, #2
 80128fe:	d035      	beq.n	801296c <__pow5mult+0x90>
 8012900:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012902:	b93c      	cbnz	r4, 8012914 <__pow5mult+0x38>
 8012904:	2010      	movs	r0, #16
 8012906:	f7ff fe5b 	bl	80125c0 <malloc>
 801290a:	6270      	str	r0, [r6, #36]	; 0x24
 801290c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012910:	6004      	str	r4, [r0, #0]
 8012912:	60c4      	str	r4, [r0, #12]
 8012914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801291c:	b94c      	cbnz	r4, 8012932 <__pow5mult+0x56>
 801291e:	f240 2171 	movw	r1, #625	; 0x271
 8012922:	4630      	mov	r0, r6
 8012924:	f7ff ff3a 	bl	801279c <__i2b>
 8012928:	2300      	movs	r3, #0
 801292a:	f8c8 0008 	str.w	r0, [r8, #8]
 801292e:	4604      	mov	r4, r0
 8012930:	6003      	str	r3, [r0, #0]
 8012932:	f04f 0800 	mov.w	r8, #0
 8012936:	07eb      	lsls	r3, r5, #31
 8012938:	d50a      	bpl.n	8012950 <__pow5mult+0x74>
 801293a:	4639      	mov	r1, r7
 801293c:	4622      	mov	r2, r4
 801293e:	4630      	mov	r0, r6
 8012940:	f7ff ff35 	bl	80127ae <__multiply>
 8012944:	4639      	mov	r1, r7
 8012946:	4681      	mov	r9, r0
 8012948:	4630      	mov	r0, r6
 801294a:	f7ff fe87 	bl	801265c <_Bfree>
 801294e:	464f      	mov	r7, r9
 8012950:	106d      	asrs	r5, r5, #1
 8012952:	d00b      	beq.n	801296c <__pow5mult+0x90>
 8012954:	6820      	ldr	r0, [r4, #0]
 8012956:	b938      	cbnz	r0, 8012968 <__pow5mult+0x8c>
 8012958:	4622      	mov	r2, r4
 801295a:	4621      	mov	r1, r4
 801295c:	4630      	mov	r0, r6
 801295e:	f7ff ff26 	bl	80127ae <__multiply>
 8012962:	6020      	str	r0, [r4, #0]
 8012964:	f8c0 8000 	str.w	r8, [r0]
 8012968:	4604      	mov	r4, r0
 801296a:	e7e4      	b.n	8012936 <__pow5mult+0x5a>
 801296c:	4638      	mov	r0, r7
 801296e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012972:	bf00      	nop
 8012974:	08015d30 	.word	0x08015d30

08012978 <__lshift>:
 8012978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801297c:	460c      	mov	r4, r1
 801297e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012982:	6923      	ldr	r3, [r4, #16]
 8012984:	6849      	ldr	r1, [r1, #4]
 8012986:	eb0a 0903 	add.w	r9, sl, r3
 801298a:	68a3      	ldr	r3, [r4, #8]
 801298c:	4607      	mov	r7, r0
 801298e:	4616      	mov	r6, r2
 8012990:	f109 0501 	add.w	r5, r9, #1
 8012994:	42ab      	cmp	r3, r5
 8012996:	db32      	blt.n	80129fe <__lshift+0x86>
 8012998:	4638      	mov	r0, r7
 801299a:	f7ff fe2b 	bl	80125f4 <_Balloc>
 801299e:	2300      	movs	r3, #0
 80129a0:	4680      	mov	r8, r0
 80129a2:	f100 0114 	add.w	r1, r0, #20
 80129a6:	461a      	mov	r2, r3
 80129a8:	4553      	cmp	r3, sl
 80129aa:	db2b      	blt.n	8012a04 <__lshift+0x8c>
 80129ac:	6920      	ldr	r0, [r4, #16]
 80129ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80129b2:	f104 0314 	add.w	r3, r4, #20
 80129b6:	f016 021f 	ands.w	r2, r6, #31
 80129ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80129be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80129c2:	d025      	beq.n	8012a10 <__lshift+0x98>
 80129c4:	f1c2 0e20 	rsb	lr, r2, #32
 80129c8:	2000      	movs	r0, #0
 80129ca:	681e      	ldr	r6, [r3, #0]
 80129cc:	468a      	mov	sl, r1
 80129ce:	4096      	lsls	r6, r2
 80129d0:	4330      	orrs	r0, r6
 80129d2:	f84a 0b04 	str.w	r0, [sl], #4
 80129d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80129da:	459c      	cmp	ip, r3
 80129dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80129e0:	d814      	bhi.n	8012a0c <__lshift+0x94>
 80129e2:	6048      	str	r0, [r1, #4]
 80129e4:	b108      	cbz	r0, 80129ea <__lshift+0x72>
 80129e6:	f109 0502 	add.w	r5, r9, #2
 80129ea:	3d01      	subs	r5, #1
 80129ec:	4638      	mov	r0, r7
 80129ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80129f2:	4621      	mov	r1, r4
 80129f4:	f7ff fe32 	bl	801265c <_Bfree>
 80129f8:	4640      	mov	r0, r8
 80129fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129fe:	3101      	adds	r1, #1
 8012a00:	005b      	lsls	r3, r3, #1
 8012a02:	e7c7      	b.n	8012994 <__lshift+0x1c>
 8012a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	e7cd      	b.n	80129a8 <__lshift+0x30>
 8012a0c:	4651      	mov	r1, sl
 8012a0e:	e7dc      	b.n	80129ca <__lshift+0x52>
 8012a10:	3904      	subs	r1, #4
 8012a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a16:	f841 2f04 	str.w	r2, [r1, #4]!
 8012a1a:	459c      	cmp	ip, r3
 8012a1c:	d8f9      	bhi.n	8012a12 <__lshift+0x9a>
 8012a1e:	e7e4      	b.n	80129ea <__lshift+0x72>

08012a20 <__mcmp>:
 8012a20:	6903      	ldr	r3, [r0, #16]
 8012a22:	690a      	ldr	r2, [r1, #16]
 8012a24:	1a9b      	subs	r3, r3, r2
 8012a26:	b530      	push	{r4, r5, lr}
 8012a28:	d10c      	bne.n	8012a44 <__mcmp+0x24>
 8012a2a:	0092      	lsls	r2, r2, #2
 8012a2c:	3014      	adds	r0, #20
 8012a2e:	3114      	adds	r1, #20
 8012a30:	1884      	adds	r4, r0, r2
 8012a32:	4411      	add	r1, r2
 8012a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012a3c:	4295      	cmp	r5, r2
 8012a3e:	d003      	beq.n	8012a48 <__mcmp+0x28>
 8012a40:	d305      	bcc.n	8012a4e <__mcmp+0x2e>
 8012a42:	2301      	movs	r3, #1
 8012a44:	4618      	mov	r0, r3
 8012a46:	bd30      	pop	{r4, r5, pc}
 8012a48:	42a0      	cmp	r0, r4
 8012a4a:	d3f3      	bcc.n	8012a34 <__mcmp+0x14>
 8012a4c:	e7fa      	b.n	8012a44 <__mcmp+0x24>
 8012a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a52:	e7f7      	b.n	8012a44 <__mcmp+0x24>

08012a54 <__mdiff>:
 8012a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a58:	460d      	mov	r5, r1
 8012a5a:	4607      	mov	r7, r0
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	4628      	mov	r0, r5
 8012a60:	4614      	mov	r4, r2
 8012a62:	f7ff ffdd 	bl	8012a20 <__mcmp>
 8012a66:	1e06      	subs	r6, r0, #0
 8012a68:	d108      	bne.n	8012a7c <__mdiff+0x28>
 8012a6a:	4631      	mov	r1, r6
 8012a6c:	4638      	mov	r0, r7
 8012a6e:	f7ff fdc1 	bl	80125f4 <_Balloc>
 8012a72:	2301      	movs	r3, #1
 8012a74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a7c:	bfa4      	itt	ge
 8012a7e:	4623      	movge	r3, r4
 8012a80:	462c      	movge	r4, r5
 8012a82:	4638      	mov	r0, r7
 8012a84:	6861      	ldr	r1, [r4, #4]
 8012a86:	bfa6      	itte	ge
 8012a88:	461d      	movge	r5, r3
 8012a8a:	2600      	movge	r6, #0
 8012a8c:	2601      	movlt	r6, #1
 8012a8e:	f7ff fdb1 	bl	80125f4 <_Balloc>
 8012a92:	692b      	ldr	r3, [r5, #16]
 8012a94:	60c6      	str	r6, [r0, #12]
 8012a96:	6926      	ldr	r6, [r4, #16]
 8012a98:	f105 0914 	add.w	r9, r5, #20
 8012a9c:	f104 0214 	add.w	r2, r4, #20
 8012aa0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012aa4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012aa8:	f100 0514 	add.w	r5, r0, #20
 8012aac:	f04f 0e00 	mov.w	lr, #0
 8012ab0:	f852 ab04 	ldr.w	sl, [r2], #4
 8012ab4:	f859 4b04 	ldr.w	r4, [r9], #4
 8012ab8:	fa1e f18a 	uxtah	r1, lr, sl
 8012abc:	b2a3      	uxth	r3, r4
 8012abe:	1ac9      	subs	r1, r1, r3
 8012ac0:	0c23      	lsrs	r3, r4, #16
 8012ac2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012ac6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012aca:	b289      	uxth	r1, r1
 8012acc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012ad0:	45c8      	cmp	r8, r9
 8012ad2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012ad6:	4694      	mov	ip, r2
 8012ad8:	f845 3b04 	str.w	r3, [r5], #4
 8012adc:	d8e8      	bhi.n	8012ab0 <__mdiff+0x5c>
 8012ade:	45bc      	cmp	ip, r7
 8012ae0:	d304      	bcc.n	8012aec <__mdiff+0x98>
 8012ae2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012ae6:	b183      	cbz	r3, 8012b0a <__mdiff+0xb6>
 8012ae8:	6106      	str	r6, [r0, #16]
 8012aea:	e7c5      	b.n	8012a78 <__mdiff+0x24>
 8012aec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012af0:	fa1e f381 	uxtah	r3, lr, r1
 8012af4:	141a      	asrs	r2, r3, #16
 8012af6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012b04:	f845 3b04 	str.w	r3, [r5], #4
 8012b08:	e7e9      	b.n	8012ade <__mdiff+0x8a>
 8012b0a:	3e01      	subs	r6, #1
 8012b0c:	e7e9      	b.n	8012ae2 <__mdiff+0x8e>

08012b0e <__d2b>:
 8012b0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b12:	460e      	mov	r6, r1
 8012b14:	2101      	movs	r1, #1
 8012b16:	ec59 8b10 	vmov	r8, r9, d0
 8012b1a:	4615      	mov	r5, r2
 8012b1c:	f7ff fd6a 	bl	80125f4 <_Balloc>
 8012b20:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012b24:	4607      	mov	r7, r0
 8012b26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012b2a:	bb34      	cbnz	r4, 8012b7a <__d2b+0x6c>
 8012b2c:	9301      	str	r3, [sp, #4]
 8012b2e:	f1b8 0300 	subs.w	r3, r8, #0
 8012b32:	d027      	beq.n	8012b84 <__d2b+0x76>
 8012b34:	a802      	add	r0, sp, #8
 8012b36:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012b3a:	f7ff fe00 	bl	801273e <__lo0bits>
 8012b3e:	9900      	ldr	r1, [sp, #0]
 8012b40:	b1f0      	cbz	r0, 8012b80 <__d2b+0x72>
 8012b42:	9a01      	ldr	r2, [sp, #4]
 8012b44:	f1c0 0320 	rsb	r3, r0, #32
 8012b48:	fa02 f303 	lsl.w	r3, r2, r3
 8012b4c:	430b      	orrs	r3, r1
 8012b4e:	40c2      	lsrs	r2, r0
 8012b50:	617b      	str	r3, [r7, #20]
 8012b52:	9201      	str	r2, [sp, #4]
 8012b54:	9b01      	ldr	r3, [sp, #4]
 8012b56:	61bb      	str	r3, [r7, #24]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	bf14      	ite	ne
 8012b5c:	2102      	movne	r1, #2
 8012b5e:	2101      	moveq	r1, #1
 8012b60:	6139      	str	r1, [r7, #16]
 8012b62:	b1c4      	cbz	r4, 8012b96 <__d2b+0x88>
 8012b64:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012b68:	4404      	add	r4, r0
 8012b6a:	6034      	str	r4, [r6, #0]
 8012b6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012b70:	6028      	str	r0, [r5, #0]
 8012b72:	4638      	mov	r0, r7
 8012b74:	b003      	add	sp, #12
 8012b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b7e:	e7d5      	b.n	8012b2c <__d2b+0x1e>
 8012b80:	6179      	str	r1, [r7, #20]
 8012b82:	e7e7      	b.n	8012b54 <__d2b+0x46>
 8012b84:	a801      	add	r0, sp, #4
 8012b86:	f7ff fdda 	bl	801273e <__lo0bits>
 8012b8a:	9b01      	ldr	r3, [sp, #4]
 8012b8c:	617b      	str	r3, [r7, #20]
 8012b8e:	2101      	movs	r1, #1
 8012b90:	6139      	str	r1, [r7, #16]
 8012b92:	3020      	adds	r0, #32
 8012b94:	e7e5      	b.n	8012b62 <__d2b+0x54>
 8012b96:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012b9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012b9e:	6030      	str	r0, [r6, #0]
 8012ba0:	6918      	ldr	r0, [r3, #16]
 8012ba2:	f7ff fdad 	bl	8012700 <__hi0bits>
 8012ba6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012baa:	e7e1      	b.n	8012b70 <__d2b+0x62>

08012bac <_calloc_r>:
 8012bac:	b538      	push	{r3, r4, r5, lr}
 8012bae:	fb02 f401 	mul.w	r4, r2, r1
 8012bb2:	4621      	mov	r1, r4
 8012bb4:	f000 f856 	bl	8012c64 <_malloc_r>
 8012bb8:	4605      	mov	r5, r0
 8012bba:	b118      	cbz	r0, 8012bc4 <_calloc_r+0x18>
 8012bbc:	4622      	mov	r2, r4
 8012bbe:	2100      	movs	r1, #0
 8012bc0:	f7fd ff0d 	bl	80109de <memset>
 8012bc4:	4628      	mov	r0, r5
 8012bc6:	bd38      	pop	{r3, r4, r5, pc}

08012bc8 <_free_r>:
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4605      	mov	r5, r0
 8012bcc:	2900      	cmp	r1, #0
 8012bce:	d045      	beq.n	8012c5c <_free_r+0x94>
 8012bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bd4:	1f0c      	subs	r4, r1, #4
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	bfb8      	it	lt
 8012bda:	18e4      	addlt	r4, r4, r3
 8012bdc:	f000 fc03 	bl	80133e6 <__malloc_lock>
 8012be0:	4a1f      	ldr	r2, [pc, #124]	; (8012c60 <_free_r+0x98>)
 8012be2:	6813      	ldr	r3, [r2, #0]
 8012be4:	4610      	mov	r0, r2
 8012be6:	b933      	cbnz	r3, 8012bf6 <_free_r+0x2e>
 8012be8:	6063      	str	r3, [r4, #4]
 8012bea:	6014      	str	r4, [r2, #0]
 8012bec:	4628      	mov	r0, r5
 8012bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bf2:	f000 bbf9 	b.w	80133e8 <__malloc_unlock>
 8012bf6:	42a3      	cmp	r3, r4
 8012bf8:	d90c      	bls.n	8012c14 <_free_r+0x4c>
 8012bfa:	6821      	ldr	r1, [r4, #0]
 8012bfc:	1862      	adds	r2, r4, r1
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	bf04      	itt	eq
 8012c02:	681a      	ldreq	r2, [r3, #0]
 8012c04:	685b      	ldreq	r3, [r3, #4]
 8012c06:	6063      	str	r3, [r4, #4]
 8012c08:	bf04      	itt	eq
 8012c0a:	1852      	addeq	r2, r2, r1
 8012c0c:	6022      	streq	r2, [r4, #0]
 8012c0e:	6004      	str	r4, [r0, #0]
 8012c10:	e7ec      	b.n	8012bec <_free_r+0x24>
 8012c12:	4613      	mov	r3, r2
 8012c14:	685a      	ldr	r2, [r3, #4]
 8012c16:	b10a      	cbz	r2, 8012c1c <_free_r+0x54>
 8012c18:	42a2      	cmp	r2, r4
 8012c1a:	d9fa      	bls.n	8012c12 <_free_r+0x4a>
 8012c1c:	6819      	ldr	r1, [r3, #0]
 8012c1e:	1858      	adds	r0, r3, r1
 8012c20:	42a0      	cmp	r0, r4
 8012c22:	d10b      	bne.n	8012c3c <_free_r+0x74>
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	4401      	add	r1, r0
 8012c28:	1858      	adds	r0, r3, r1
 8012c2a:	4282      	cmp	r2, r0
 8012c2c:	6019      	str	r1, [r3, #0]
 8012c2e:	d1dd      	bne.n	8012bec <_free_r+0x24>
 8012c30:	6810      	ldr	r0, [r2, #0]
 8012c32:	6852      	ldr	r2, [r2, #4]
 8012c34:	605a      	str	r2, [r3, #4]
 8012c36:	4401      	add	r1, r0
 8012c38:	6019      	str	r1, [r3, #0]
 8012c3a:	e7d7      	b.n	8012bec <_free_r+0x24>
 8012c3c:	d902      	bls.n	8012c44 <_free_r+0x7c>
 8012c3e:	230c      	movs	r3, #12
 8012c40:	602b      	str	r3, [r5, #0]
 8012c42:	e7d3      	b.n	8012bec <_free_r+0x24>
 8012c44:	6820      	ldr	r0, [r4, #0]
 8012c46:	1821      	adds	r1, r4, r0
 8012c48:	428a      	cmp	r2, r1
 8012c4a:	bf04      	itt	eq
 8012c4c:	6811      	ldreq	r1, [r2, #0]
 8012c4e:	6852      	ldreq	r2, [r2, #4]
 8012c50:	6062      	str	r2, [r4, #4]
 8012c52:	bf04      	itt	eq
 8012c54:	1809      	addeq	r1, r1, r0
 8012c56:	6021      	streq	r1, [r4, #0]
 8012c58:	605c      	str	r4, [r3, #4]
 8012c5a:	e7c7      	b.n	8012bec <_free_r+0x24>
 8012c5c:	bd38      	pop	{r3, r4, r5, pc}
 8012c5e:	bf00      	nop
 8012c60:	2000086c 	.word	0x2000086c

08012c64 <_malloc_r>:
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	1ccd      	adds	r5, r1, #3
 8012c68:	f025 0503 	bic.w	r5, r5, #3
 8012c6c:	3508      	adds	r5, #8
 8012c6e:	2d0c      	cmp	r5, #12
 8012c70:	bf38      	it	cc
 8012c72:	250c      	movcc	r5, #12
 8012c74:	2d00      	cmp	r5, #0
 8012c76:	4606      	mov	r6, r0
 8012c78:	db01      	blt.n	8012c7e <_malloc_r+0x1a>
 8012c7a:	42a9      	cmp	r1, r5
 8012c7c:	d903      	bls.n	8012c86 <_malloc_r+0x22>
 8012c7e:	230c      	movs	r3, #12
 8012c80:	6033      	str	r3, [r6, #0]
 8012c82:	2000      	movs	r0, #0
 8012c84:	bd70      	pop	{r4, r5, r6, pc}
 8012c86:	f000 fbae 	bl	80133e6 <__malloc_lock>
 8012c8a:	4a21      	ldr	r2, [pc, #132]	; (8012d10 <_malloc_r+0xac>)
 8012c8c:	6814      	ldr	r4, [r2, #0]
 8012c8e:	4621      	mov	r1, r4
 8012c90:	b991      	cbnz	r1, 8012cb8 <_malloc_r+0x54>
 8012c92:	4c20      	ldr	r4, [pc, #128]	; (8012d14 <_malloc_r+0xb0>)
 8012c94:	6823      	ldr	r3, [r4, #0]
 8012c96:	b91b      	cbnz	r3, 8012ca0 <_malloc_r+0x3c>
 8012c98:	4630      	mov	r0, r6
 8012c9a:	f000 facf 	bl	801323c <_sbrk_r>
 8012c9e:	6020      	str	r0, [r4, #0]
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	f000 faca 	bl	801323c <_sbrk_r>
 8012ca8:	1c43      	adds	r3, r0, #1
 8012caa:	d124      	bne.n	8012cf6 <_malloc_r+0x92>
 8012cac:	230c      	movs	r3, #12
 8012cae:	6033      	str	r3, [r6, #0]
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	f000 fb99 	bl	80133e8 <__malloc_unlock>
 8012cb6:	e7e4      	b.n	8012c82 <_malloc_r+0x1e>
 8012cb8:	680b      	ldr	r3, [r1, #0]
 8012cba:	1b5b      	subs	r3, r3, r5
 8012cbc:	d418      	bmi.n	8012cf0 <_malloc_r+0x8c>
 8012cbe:	2b0b      	cmp	r3, #11
 8012cc0:	d90f      	bls.n	8012ce2 <_malloc_r+0x7e>
 8012cc2:	600b      	str	r3, [r1, #0]
 8012cc4:	50cd      	str	r5, [r1, r3]
 8012cc6:	18cc      	adds	r4, r1, r3
 8012cc8:	4630      	mov	r0, r6
 8012cca:	f000 fb8d 	bl	80133e8 <__malloc_unlock>
 8012cce:	f104 000b 	add.w	r0, r4, #11
 8012cd2:	1d23      	adds	r3, r4, #4
 8012cd4:	f020 0007 	bic.w	r0, r0, #7
 8012cd8:	1ac3      	subs	r3, r0, r3
 8012cda:	d0d3      	beq.n	8012c84 <_malloc_r+0x20>
 8012cdc:	425a      	negs	r2, r3
 8012cde:	50e2      	str	r2, [r4, r3]
 8012ce0:	e7d0      	b.n	8012c84 <_malloc_r+0x20>
 8012ce2:	428c      	cmp	r4, r1
 8012ce4:	684b      	ldr	r3, [r1, #4]
 8012ce6:	bf16      	itet	ne
 8012ce8:	6063      	strne	r3, [r4, #4]
 8012cea:	6013      	streq	r3, [r2, #0]
 8012cec:	460c      	movne	r4, r1
 8012cee:	e7eb      	b.n	8012cc8 <_malloc_r+0x64>
 8012cf0:	460c      	mov	r4, r1
 8012cf2:	6849      	ldr	r1, [r1, #4]
 8012cf4:	e7cc      	b.n	8012c90 <_malloc_r+0x2c>
 8012cf6:	1cc4      	adds	r4, r0, #3
 8012cf8:	f024 0403 	bic.w	r4, r4, #3
 8012cfc:	42a0      	cmp	r0, r4
 8012cfe:	d005      	beq.n	8012d0c <_malloc_r+0xa8>
 8012d00:	1a21      	subs	r1, r4, r0
 8012d02:	4630      	mov	r0, r6
 8012d04:	f000 fa9a 	bl	801323c <_sbrk_r>
 8012d08:	3001      	adds	r0, #1
 8012d0a:	d0cf      	beq.n	8012cac <_malloc_r+0x48>
 8012d0c:	6025      	str	r5, [r4, #0]
 8012d0e:	e7db      	b.n	8012cc8 <_malloc_r+0x64>
 8012d10:	2000086c 	.word	0x2000086c
 8012d14:	20000870 	.word	0x20000870

08012d18 <__ssputs_r>:
 8012d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d1c:	688e      	ldr	r6, [r1, #8]
 8012d1e:	429e      	cmp	r6, r3
 8012d20:	4682      	mov	sl, r0
 8012d22:	460c      	mov	r4, r1
 8012d24:	4690      	mov	r8, r2
 8012d26:	4699      	mov	r9, r3
 8012d28:	d837      	bhi.n	8012d9a <__ssputs_r+0x82>
 8012d2a:	898a      	ldrh	r2, [r1, #12]
 8012d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012d30:	d031      	beq.n	8012d96 <__ssputs_r+0x7e>
 8012d32:	6825      	ldr	r5, [r4, #0]
 8012d34:	6909      	ldr	r1, [r1, #16]
 8012d36:	1a6f      	subs	r7, r5, r1
 8012d38:	6965      	ldr	r5, [r4, #20]
 8012d3a:	2302      	movs	r3, #2
 8012d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8012d44:	f109 0301 	add.w	r3, r9, #1
 8012d48:	443b      	add	r3, r7
 8012d4a:	429d      	cmp	r5, r3
 8012d4c:	bf38      	it	cc
 8012d4e:	461d      	movcc	r5, r3
 8012d50:	0553      	lsls	r3, r2, #21
 8012d52:	d530      	bpl.n	8012db6 <__ssputs_r+0x9e>
 8012d54:	4629      	mov	r1, r5
 8012d56:	f7ff ff85 	bl	8012c64 <_malloc_r>
 8012d5a:	4606      	mov	r6, r0
 8012d5c:	b950      	cbnz	r0, 8012d74 <__ssputs_r+0x5c>
 8012d5e:	230c      	movs	r3, #12
 8012d60:	f8ca 3000 	str.w	r3, [sl]
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d6a:	81a3      	strh	r3, [r4, #12]
 8012d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d74:	463a      	mov	r2, r7
 8012d76:	6921      	ldr	r1, [r4, #16]
 8012d78:	f7fd fe26 	bl	80109c8 <memcpy>
 8012d7c:	89a3      	ldrh	r3, [r4, #12]
 8012d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d86:	81a3      	strh	r3, [r4, #12]
 8012d88:	6126      	str	r6, [r4, #16]
 8012d8a:	6165      	str	r5, [r4, #20]
 8012d8c:	443e      	add	r6, r7
 8012d8e:	1bed      	subs	r5, r5, r7
 8012d90:	6026      	str	r6, [r4, #0]
 8012d92:	60a5      	str	r5, [r4, #8]
 8012d94:	464e      	mov	r6, r9
 8012d96:	454e      	cmp	r6, r9
 8012d98:	d900      	bls.n	8012d9c <__ssputs_r+0x84>
 8012d9a:	464e      	mov	r6, r9
 8012d9c:	4632      	mov	r2, r6
 8012d9e:	4641      	mov	r1, r8
 8012da0:	6820      	ldr	r0, [r4, #0]
 8012da2:	f000 fb07 	bl	80133b4 <memmove>
 8012da6:	68a3      	ldr	r3, [r4, #8]
 8012da8:	1b9b      	subs	r3, r3, r6
 8012daa:	60a3      	str	r3, [r4, #8]
 8012dac:	6823      	ldr	r3, [r4, #0]
 8012dae:	441e      	add	r6, r3
 8012db0:	6026      	str	r6, [r4, #0]
 8012db2:	2000      	movs	r0, #0
 8012db4:	e7dc      	b.n	8012d70 <__ssputs_r+0x58>
 8012db6:	462a      	mov	r2, r5
 8012db8:	f000 fb17 	bl	80133ea <_realloc_r>
 8012dbc:	4606      	mov	r6, r0
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d1e2      	bne.n	8012d88 <__ssputs_r+0x70>
 8012dc2:	6921      	ldr	r1, [r4, #16]
 8012dc4:	4650      	mov	r0, sl
 8012dc6:	f7ff feff 	bl	8012bc8 <_free_r>
 8012dca:	e7c8      	b.n	8012d5e <__ssputs_r+0x46>

08012dcc <_svfiprintf_r>:
 8012dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd0:	461d      	mov	r5, r3
 8012dd2:	898b      	ldrh	r3, [r1, #12]
 8012dd4:	061f      	lsls	r7, r3, #24
 8012dd6:	b09d      	sub	sp, #116	; 0x74
 8012dd8:	4680      	mov	r8, r0
 8012dda:	460c      	mov	r4, r1
 8012ddc:	4616      	mov	r6, r2
 8012dde:	d50f      	bpl.n	8012e00 <_svfiprintf_r+0x34>
 8012de0:	690b      	ldr	r3, [r1, #16]
 8012de2:	b96b      	cbnz	r3, 8012e00 <_svfiprintf_r+0x34>
 8012de4:	2140      	movs	r1, #64	; 0x40
 8012de6:	f7ff ff3d 	bl	8012c64 <_malloc_r>
 8012dea:	6020      	str	r0, [r4, #0]
 8012dec:	6120      	str	r0, [r4, #16]
 8012dee:	b928      	cbnz	r0, 8012dfc <_svfiprintf_r+0x30>
 8012df0:	230c      	movs	r3, #12
 8012df2:	f8c8 3000 	str.w	r3, [r8]
 8012df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012dfa:	e0c8      	b.n	8012f8e <_svfiprintf_r+0x1c2>
 8012dfc:	2340      	movs	r3, #64	; 0x40
 8012dfe:	6163      	str	r3, [r4, #20]
 8012e00:	2300      	movs	r3, #0
 8012e02:	9309      	str	r3, [sp, #36]	; 0x24
 8012e04:	2320      	movs	r3, #32
 8012e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e0a:	2330      	movs	r3, #48	; 0x30
 8012e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e10:	9503      	str	r5, [sp, #12]
 8012e12:	f04f 0b01 	mov.w	fp, #1
 8012e16:	4637      	mov	r7, r6
 8012e18:	463d      	mov	r5, r7
 8012e1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012e1e:	b10b      	cbz	r3, 8012e24 <_svfiprintf_r+0x58>
 8012e20:	2b25      	cmp	r3, #37	; 0x25
 8012e22:	d13e      	bne.n	8012ea2 <_svfiprintf_r+0xd6>
 8012e24:	ebb7 0a06 	subs.w	sl, r7, r6
 8012e28:	d00b      	beq.n	8012e42 <_svfiprintf_r+0x76>
 8012e2a:	4653      	mov	r3, sl
 8012e2c:	4632      	mov	r2, r6
 8012e2e:	4621      	mov	r1, r4
 8012e30:	4640      	mov	r0, r8
 8012e32:	f7ff ff71 	bl	8012d18 <__ssputs_r>
 8012e36:	3001      	adds	r0, #1
 8012e38:	f000 80a4 	beq.w	8012f84 <_svfiprintf_r+0x1b8>
 8012e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e3e:	4453      	add	r3, sl
 8012e40:	9309      	str	r3, [sp, #36]	; 0x24
 8012e42:	783b      	ldrb	r3, [r7, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	f000 809d 	beq.w	8012f84 <_svfiprintf_r+0x1b8>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e54:	9304      	str	r3, [sp, #16]
 8012e56:	9307      	str	r3, [sp, #28]
 8012e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8012e5e:	462f      	mov	r7, r5
 8012e60:	2205      	movs	r2, #5
 8012e62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012e66:	4850      	ldr	r0, [pc, #320]	; (8012fa8 <_svfiprintf_r+0x1dc>)
 8012e68:	f7ed f9ba 	bl	80001e0 <memchr>
 8012e6c:	9b04      	ldr	r3, [sp, #16]
 8012e6e:	b9d0      	cbnz	r0, 8012ea6 <_svfiprintf_r+0xda>
 8012e70:	06d9      	lsls	r1, r3, #27
 8012e72:	bf44      	itt	mi
 8012e74:	2220      	movmi	r2, #32
 8012e76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e7a:	071a      	lsls	r2, r3, #28
 8012e7c:	bf44      	itt	mi
 8012e7e:	222b      	movmi	r2, #43	; 0x2b
 8012e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e84:	782a      	ldrb	r2, [r5, #0]
 8012e86:	2a2a      	cmp	r2, #42	; 0x2a
 8012e88:	d015      	beq.n	8012eb6 <_svfiprintf_r+0xea>
 8012e8a:	9a07      	ldr	r2, [sp, #28]
 8012e8c:	462f      	mov	r7, r5
 8012e8e:	2000      	movs	r0, #0
 8012e90:	250a      	movs	r5, #10
 8012e92:	4639      	mov	r1, r7
 8012e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e98:	3b30      	subs	r3, #48	; 0x30
 8012e9a:	2b09      	cmp	r3, #9
 8012e9c:	d94d      	bls.n	8012f3a <_svfiprintf_r+0x16e>
 8012e9e:	b1b8      	cbz	r0, 8012ed0 <_svfiprintf_r+0x104>
 8012ea0:	e00f      	b.n	8012ec2 <_svfiprintf_r+0xf6>
 8012ea2:	462f      	mov	r7, r5
 8012ea4:	e7b8      	b.n	8012e18 <_svfiprintf_r+0x4c>
 8012ea6:	4a40      	ldr	r2, [pc, #256]	; (8012fa8 <_svfiprintf_r+0x1dc>)
 8012ea8:	1a80      	subs	r0, r0, r2
 8012eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8012eae:	4318      	orrs	r0, r3
 8012eb0:	9004      	str	r0, [sp, #16]
 8012eb2:	463d      	mov	r5, r7
 8012eb4:	e7d3      	b.n	8012e5e <_svfiprintf_r+0x92>
 8012eb6:	9a03      	ldr	r2, [sp, #12]
 8012eb8:	1d11      	adds	r1, r2, #4
 8012eba:	6812      	ldr	r2, [r2, #0]
 8012ebc:	9103      	str	r1, [sp, #12]
 8012ebe:	2a00      	cmp	r2, #0
 8012ec0:	db01      	blt.n	8012ec6 <_svfiprintf_r+0xfa>
 8012ec2:	9207      	str	r2, [sp, #28]
 8012ec4:	e004      	b.n	8012ed0 <_svfiprintf_r+0x104>
 8012ec6:	4252      	negs	r2, r2
 8012ec8:	f043 0302 	orr.w	r3, r3, #2
 8012ecc:	9207      	str	r2, [sp, #28]
 8012ece:	9304      	str	r3, [sp, #16]
 8012ed0:	783b      	ldrb	r3, [r7, #0]
 8012ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8012ed4:	d10c      	bne.n	8012ef0 <_svfiprintf_r+0x124>
 8012ed6:	787b      	ldrb	r3, [r7, #1]
 8012ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8012eda:	d133      	bne.n	8012f44 <_svfiprintf_r+0x178>
 8012edc:	9b03      	ldr	r3, [sp, #12]
 8012ede:	1d1a      	adds	r2, r3, #4
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	9203      	str	r2, [sp, #12]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	bfb8      	it	lt
 8012ee8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012eec:	3702      	adds	r7, #2
 8012eee:	9305      	str	r3, [sp, #20]
 8012ef0:	4d2e      	ldr	r5, [pc, #184]	; (8012fac <_svfiprintf_r+0x1e0>)
 8012ef2:	7839      	ldrb	r1, [r7, #0]
 8012ef4:	2203      	movs	r2, #3
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f7ed f972 	bl	80001e0 <memchr>
 8012efc:	b138      	cbz	r0, 8012f0e <_svfiprintf_r+0x142>
 8012efe:	2340      	movs	r3, #64	; 0x40
 8012f00:	1b40      	subs	r0, r0, r5
 8012f02:	fa03 f000 	lsl.w	r0, r3, r0
 8012f06:	9b04      	ldr	r3, [sp, #16]
 8012f08:	4303      	orrs	r3, r0
 8012f0a:	3701      	adds	r7, #1
 8012f0c:	9304      	str	r3, [sp, #16]
 8012f0e:	7839      	ldrb	r1, [r7, #0]
 8012f10:	4827      	ldr	r0, [pc, #156]	; (8012fb0 <_svfiprintf_r+0x1e4>)
 8012f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f16:	2206      	movs	r2, #6
 8012f18:	1c7e      	adds	r6, r7, #1
 8012f1a:	f7ed f961 	bl	80001e0 <memchr>
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	d038      	beq.n	8012f94 <_svfiprintf_r+0x1c8>
 8012f22:	4b24      	ldr	r3, [pc, #144]	; (8012fb4 <_svfiprintf_r+0x1e8>)
 8012f24:	bb13      	cbnz	r3, 8012f6c <_svfiprintf_r+0x1a0>
 8012f26:	9b03      	ldr	r3, [sp, #12]
 8012f28:	3307      	adds	r3, #7
 8012f2a:	f023 0307 	bic.w	r3, r3, #7
 8012f2e:	3308      	adds	r3, #8
 8012f30:	9303      	str	r3, [sp, #12]
 8012f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f34:	444b      	add	r3, r9
 8012f36:	9309      	str	r3, [sp, #36]	; 0x24
 8012f38:	e76d      	b.n	8012e16 <_svfiprintf_r+0x4a>
 8012f3a:	fb05 3202 	mla	r2, r5, r2, r3
 8012f3e:	2001      	movs	r0, #1
 8012f40:	460f      	mov	r7, r1
 8012f42:	e7a6      	b.n	8012e92 <_svfiprintf_r+0xc6>
 8012f44:	2300      	movs	r3, #0
 8012f46:	3701      	adds	r7, #1
 8012f48:	9305      	str	r3, [sp, #20]
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	250a      	movs	r5, #10
 8012f4e:	4638      	mov	r0, r7
 8012f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f54:	3a30      	subs	r2, #48	; 0x30
 8012f56:	2a09      	cmp	r2, #9
 8012f58:	d903      	bls.n	8012f62 <_svfiprintf_r+0x196>
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d0c8      	beq.n	8012ef0 <_svfiprintf_r+0x124>
 8012f5e:	9105      	str	r1, [sp, #20]
 8012f60:	e7c6      	b.n	8012ef0 <_svfiprintf_r+0x124>
 8012f62:	fb05 2101 	mla	r1, r5, r1, r2
 8012f66:	2301      	movs	r3, #1
 8012f68:	4607      	mov	r7, r0
 8012f6a:	e7f0      	b.n	8012f4e <_svfiprintf_r+0x182>
 8012f6c:	ab03      	add	r3, sp, #12
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	4622      	mov	r2, r4
 8012f72:	4b11      	ldr	r3, [pc, #68]	; (8012fb8 <_svfiprintf_r+0x1ec>)
 8012f74:	a904      	add	r1, sp, #16
 8012f76:	4640      	mov	r0, r8
 8012f78:	f7fd fdce 	bl	8010b18 <_printf_float>
 8012f7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012f80:	4681      	mov	r9, r0
 8012f82:	d1d6      	bne.n	8012f32 <_svfiprintf_r+0x166>
 8012f84:	89a3      	ldrh	r3, [r4, #12]
 8012f86:	065b      	lsls	r3, r3, #25
 8012f88:	f53f af35 	bmi.w	8012df6 <_svfiprintf_r+0x2a>
 8012f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f8e:	b01d      	add	sp, #116	; 0x74
 8012f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f94:	ab03      	add	r3, sp, #12
 8012f96:	9300      	str	r3, [sp, #0]
 8012f98:	4622      	mov	r2, r4
 8012f9a:	4b07      	ldr	r3, [pc, #28]	; (8012fb8 <_svfiprintf_r+0x1ec>)
 8012f9c:	a904      	add	r1, sp, #16
 8012f9e:	4640      	mov	r0, r8
 8012fa0:	f7fe f870 	bl	8011084 <_printf_i>
 8012fa4:	e7ea      	b.n	8012f7c <_svfiprintf_r+0x1b0>
 8012fa6:	bf00      	nop
 8012fa8:	08015d3c 	.word	0x08015d3c
 8012fac:	08015d42 	.word	0x08015d42
 8012fb0:	08015d46 	.word	0x08015d46
 8012fb4:	08010b19 	.word	0x08010b19
 8012fb8:	08012d19 	.word	0x08012d19

08012fbc <__sfputc_r>:
 8012fbc:	6893      	ldr	r3, [r2, #8]
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	b410      	push	{r4}
 8012fc4:	6093      	str	r3, [r2, #8]
 8012fc6:	da08      	bge.n	8012fda <__sfputc_r+0x1e>
 8012fc8:	6994      	ldr	r4, [r2, #24]
 8012fca:	42a3      	cmp	r3, r4
 8012fcc:	db01      	blt.n	8012fd2 <__sfputc_r+0x16>
 8012fce:	290a      	cmp	r1, #10
 8012fd0:	d103      	bne.n	8012fda <__sfputc_r+0x1e>
 8012fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fd6:	f7fe ba03 	b.w	80113e0 <__swbuf_r>
 8012fda:	6813      	ldr	r3, [r2, #0]
 8012fdc:	1c58      	adds	r0, r3, #1
 8012fde:	6010      	str	r0, [r2, #0]
 8012fe0:	7019      	strb	r1, [r3, #0]
 8012fe2:	4608      	mov	r0, r1
 8012fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fe8:	4770      	bx	lr

08012fea <__sfputs_r>:
 8012fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fec:	4606      	mov	r6, r0
 8012fee:	460f      	mov	r7, r1
 8012ff0:	4614      	mov	r4, r2
 8012ff2:	18d5      	adds	r5, r2, r3
 8012ff4:	42ac      	cmp	r4, r5
 8012ff6:	d101      	bne.n	8012ffc <__sfputs_r+0x12>
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	e007      	b.n	801300c <__sfputs_r+0x22>
 8012ffc:	463a      	mov	r2, r7
 8012ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013002:	4630      	mov	r0, r6
 8013004:	f7ff ffda 	bl	8012fbc <__sfputc_r>
 8013008:	1c43      	adds	r3, r0, #1
 801300a:	d1f3      	bne.n	8012ff4 <__sfputs_r+0xa>
 801300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013010 <_vfiprintf_r>:
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	460c      	mov	r4, r1
 8013016:	b09d      	sub	sp, #116	; 0x74
 8013018:	4617      	mov	r7, r2
 801301a:	461d      	mov	r5, r3
 801301c:	4606      	mov	r6, r0
 801301e:	b118      	cbz	r0, 8013028 <_vfiprintf_r+0x18>
 8013020:	6983      	ldr	r3, [r0, #24]
 8013022:	b90b      	cbnz	r3, 8013028 <_vfiprintf_r+0x18>
 8013024:	f7ff f9d0 	bl	80123c8 <__sinit>
 8013028:	4b7c      	ldr	r3, [pc, #496]	; (801321c <_vfiprintf_r+0x20c>)
 801302a:	429c      	cmp	r4, r3
 801302c:	d158      	bne.n	80130e0 <_vfiprintf_r+0xd0>
 801302e:	6874      	ldr	r4, [r6, #4]
 8013030:	89a3      	ldrh	r3, [r4, #12]
 8013032:	0718      	lsls	r0, r3, #28
 8013034:	d55e      	bpl.n	80130f4 <_vfiprintf_r+0xe4>
 8013036:	6923      	ldr	r3, [r4, #16]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d05b      	beq.n	80130f4 <_vfiprintf_r+0xe4>
 801303c:	2300      	movs	r3, #0
 801303e:	9309      	str	r3, [sp, #36]	; 0x24
 8013040:	2320      	movs	r3, #32
 8013042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013046:	2330      	movs	r3, #48	; 0x30
 8013048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801304c:	9503      	str	r5, [sp, #12]
 801304e:	f04f 0b01 	mov.w	fp, #1
 8013052:	46b8      	mov	r8, r7
 8013054:	4645      	mov	r5, r8
 8013056:	f815 3b01 	ldrb.w	r3, [r5], #1
 801305a:	b10b      	cbz	r3, 8013060 <_vfiprintf_r+0x50>
 801305c:	2b25      	cmp	r3, #37	; 0x25
 801305e:	d154      	bne.n	801310a <_vfiprintf_r+0xfa>
 8013060:	ebb8 0a07 	subs.w	sl, r8, r7
 8013064:	d00b      	beq.n	801307e <_vfiprintf_r+0x6e>
 8013066:	4653      	mov	r3, sl
 8013068:	463a      	mov	r2, r7
 801306a:	4621      	mov	r1, r4
 801306c:	4630      	mov	r0, r6
 801306e:	f7ff ffbc 	bl	8012fea <__sfputs_r>
 8013072:	3001      	adds	r0, #1
 8013074:	f000 80c2 	beq.w	80131fc <_vfiprintf_r+0x1ec>
 8013078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801307a:	4453      	add	r3, sl
 801307c:	9309      	str	r3, [sp, #36]	; 0x24
 801307e:	f898 3000 	ldrb.w	r3, [r8]
 8013082:	2b00      	cmp	r3, #0
 8013084:	f000 80ba 	beq.w	80131fc <_vfiprintf_r+0x1ec>
 8013088:	2300      	movs	r3, #0
 801308a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801308e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013092:	9304      	str	r3, [sp, #16]
 8013094:	9307      	str	r3, [sp, #28]
 8013096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801309a:	931a      	str	r3, [sp, #104]	; 0x68
 801309c:	46a8      	mov	r8, r5
 801309e:	2205      	movs	r2, #5
 80130a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80130a4:	485e      	ldr	r0, [pc, #376]	; (8013220 <_vfiprintf_r+0x210>)
 80130a6:	f7ed f89b 	bl	80001e0 <memchr>
 80130aa:	9b04      	ldr	r3, [sp, #16]
 80130ac:	bb78      	cbnz	r0, 801310e <_vfiprintf_r+0xfe>
 80130ae:	06d9      	lsls	r1, r3, #27
 80130b0:	bf44      	itt	mi
 80130b2:	2220      	movmi	r2, #32
 80130b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80130b8:	071a      	lsls	r2, r3, #28
 80130ba:	bf44      	itt	mi
 80130bc:	222b      	movmi	r2, #43	; 0x2b
 80130be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80130c2:	782a      	ldrb	r2, [r5, #0]
 80130c4:	2a2a      	cmp	r2, #42	; 0x2a
 80130c6:	d02a      	beq.n	801311e <_vfiprintf_r+0x10e>
 80130c8:	9a07      	ldr	r2, [sp, #28]
 80130ca:	46a8      	mov	r8, r5
 80130cc:	2000      	movs	r0, #0
 80130ce:	250a      	movs	r5, #10
 80130d0:	4641      	mov	r1, r8
 80130d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130d6:	3b30      	subs	r3, #48	; 0x30
 80130d8:	2b09      	cmp	r3, #9
 80130da:	d969      	bls.n	80131b0 <_vfiprintf_r+0x1a0>
 80130dc:	b360      	cbz	r0, 8013138 <_vfiprintf_r+0x128>
 80130de:	e024      	b.n	801312a <_vfiprintf_r+0x11a>
 80130e0:	4b50      	ldr	r3, [pc, #320]	; (8013224 <_vfiprintf_r+0x214>)
 80130e2:	429c      	cmp	r4, r3
 80130e4:	d101      	bne.n	80130ea <_vfiprintf_r+0xda>
 80130e6:	68b4      	ldr	r4, [r6, #8]
 80130e8:	e7a2      	b.n	8013030 <_vfiprintf_r+0x20>
 80130ea:	4b4f      	ldr	r3, [pc, #316]	; (8013228 <_vfiprintf_r+0x218>)
 80130ec:	429c      	cmp	r4, r3
 80130ee:	bf08      	it	eq
 80130f0:	68f4      	ldreq	r4, [r6, #12]
 80130f2:	e79d      	b.n	8013030 <_vfiprintf_r+0x20>
 80130f4:	4621      	mov	r1, r4
 80130f6:	4630      	mov	r0, r6
 80130f8:	f7fe f9c4 	bl	8011484 <__swsetup_r>
 80130fc:	2800      	cmp	r0, #0
 80130fe:	d09d      	beq.n	801303c <_vfiprintf_r+0x2c>
 8013100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013104:	b01d      	add	sp, #116	; 0x74
 8013106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310a:	46a8      	mov	r8, r5
 801310c:	e7a2      	b.n	8013054 <_vfiprintf_r+0x44>
 801310e:	4a44      	ldr	r2, [pc, #272]	; (8013220 <_vfiprintf_r+0x210>)
 8013110:	1a80      	subs	r0, r0, r2
 8013112:	fa0b f000 	lsl.w	r0, fp, r0
 8013116:	4318      	orrs	r0, r3
 8013118:	9004      	str	r0, [sp, #16]
 801311a:	4645      	mov	r5, r8
 801311c:	e7be      	b.n	801309c <_vfiprintf_r+0x8c>
 801311e:	9a03      	ldr	r2, [sp, #12]
 8013120:	1d11      	adds	r1, r2, #4
 8013122:	6812      	ldr	r2, [r2, #0]
 8013124:	9103      	str	r1, [sp, #12]
 8013126:	2a00      	cmp	r2, #0
 8013128:	db01      	blt.n	801312e <_vfiprintf_r+0x11e>
 801312a:	9207      	str	r2, [sp, #28]
 801312c:	e004      	b.n	8013138 <_vfiprintf_r+0x128>
 801312e:	4252      	negs	r2, r2
 8013130:	f043 0302 	orr.w	r3, r3, #2
 8013134:	9207      	str	r2, [sp, #28]
 8013136:	9304      	str	r3, [sp, #16]
 8013138:	f898 3000 	ldrb.w	r3, [r8]
 801313c:	2b2e      	cmp	r3, #46	; 0x2e
 801313e:	d10e      	bne.n	801315e <_vfiprintf_r+0x14e>
 8013140:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013144:	2b2a      	cmp	r3, #42	; 0x2a
 8013146:	d138      	bne.n	80131ba <_vfiprintf_r+0x1aa>
 8013148:	9b03      	ldr	r3, [sp, #12]
 801314a:	1d1a      	adds	r2, r3, #4
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	9203      	str	r2, [sp, #12]
 8013150:	2b00      	cmp	r3, #0
 8013152:	bfb8      	it	lt
 8013154:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013158:	f108 0802 	add.w	r8, r8, #2
 801315c:	9305      	str	r3, [sp, #20]
 801315e:	4d33      	ldr	r5, [pc, #204]	; (801322c <_vfiprintf_r+0x21c>)
 8013160:	f898 1000 	ldrb.w	r1, [r8]
 8013164:	2203      	movs	r2, #3
 8013166:	4628      	mov	r0, r5
 8013168:	f7ed f83a 	bl	80001e0 <memchr>
 801316c:	b140      	cbz	r0, 8013180 <_vfiprintf_r+0x170>
 801316e:	2340      	movs	r3, #64	; 0x40
 8013170:	1b40      	subs	r0, r0, r5
 8013172:	fa03 f000 	lsl.w	r0, r3, r0
 8013176:	9b04      	ldr	r3, [sp, #16]
 8013178:	4303      	orrs	r3, r0
 801317a:	f108 0801 	add.w	r8, r8, #1
 801317e:	9304      	str	r3, [sp, #16]
 8013180:	f898 1000 	ldrb.w	r1, [r8]
 8013184:	482a      	ldr	r0, [pc, #168]	; (8013230 <_vfiprintf_r+0x220>)
 8013186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801318a:	2206      	movs	r2, #6
 801318c:	f108 0701 	add.w	r7, r8, #1
 8013190:	f7ed f826 	bl	80001e0 <memchr>
 8013194:	2800      	cmp	r0, #0
 8013196:	d037      	beq.n	8013208 <_vfiprintf_r+0x1f8>
 8013198:	4b26      	ldr	r3, [pc, #152]	; (8013234 <_vfiprintf_r+0x224>)
 801319a:	bb1b      	cbnz	r3, 80131e4 <_vfiprintf_r+0x1d4>
 801319c:	9b03      	ldr	r3, [sp, #12]
 801319e:	3307      	adds	r3, #7
 80131a0:	f023 0307 	bic.w	r3, r3, #7
 80131a4:	3308      	adds	r3, #8
 80131a6:	9303      	str	r3, [sp, #12]
 80131a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131aa:	444b      	add	r3, r9
 80131ac:	9309      	str	r3, [sp, #36]	; 0x24
 80131ae:	e750      	b.n	8013052 <_vfiprintf_r+0x42>
 80131b0:	fb05 3202 	mla	r2, r5, r2, r3
 80131b4:	2001      	movs	r0, #1
 80131b6:	4688      	mov	r8, r1
 80131b8:	e78a      	b.n	80130d0 <_vfiprintf_r+0xc0>
 80131ba:	2300      	movs	r3, #0
 80131bc:	f108 0801 	add.w	r8, r8, #1
 80131c0:	9305      	str	r3, [sp, #20]
 80131c2:	4619      	mov	r1, r3
 80131c4:	250a      	movs	r5, #10
 80131c6:	4640      	mov	r0, r8
 80131c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131cc:	3a30      	subs	r2, #48	; 0x30
 80131ce:	2a09      	cmp	r2, #9
 80131d0:	d903      	bls.n	80131da <_vfiprintf_r+0x1ca>
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d0c3      	beq.n	801315e <_vfiprintf_r+0x14e>
 80131d6:	9105      	str	r1, [sp, #20]
 80131d8:	e7c1      	b.n	801315e <_vfiprintf_r+0x14e>
 80131da:	fb05 2101 	mla	r1, r5, r1, r2
 80131de:	2301      	movs	r3, #1
 80131e0:	4680      	mov	r8, r0
 80131e2:	e7f0      	b.n	80131c6 <_vfiprintf_r+0x1b6>
 80131e4:	ab03      	add	r3, sp, #12
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	4622      	mov	r2, r4
 80131ea:	4b13      	ldr	r3, [pc, #76]	; (8013238 <_vfiprintf_r+0x228>)
 80131ec:	a904      	add	r1, sp, #16
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7fd fc92 	bl	8010b18 <_printf_float>
 80131f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80131f8:	4681      	mov	r9, r0
 80131fa:	d1d5      	bne.n	80131a8 <_vfiprintf_r+0x198>
 80131fc:	89a3      	ldrh	r3, [r4, #12]
 80131fe:	065b      	lsls	r3, r3, #25
 8013200:	f53f af7e 	bmi.w	8013100 <_vfiprintf_r+0xf0>
 8013204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013206:	e77d      	b.n	8013104 <_vfiprintf_r+0xf4>
 8013208:	ab03      	add	r3, sp, #12
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	4622      	mov	r2, r4
 801320e:	4b0a      	ldr	r3, [pc, #40]	; (8013238 <_vfiprintf_r+0x228>)
 8013210:	a904      	add	r1, sp, #16
 8013212:	4630      	mov	r0, r6
 8013214:	f7fd ff36 	bl	8011084 <_printf_i>
 8013218:	e7ec      	b.n	80131f4 <_vfiprintf_r+0x1e4>
 801321a:	bf00      	nop
 801321c:	08015bf0 	.word	0x08015bf0
 8013220:	08015d3c 	.word	0x08015d3c
 8013224:	08015c10 	.word	0x08015c10
 8013228:	08015bd0 	.word	0x08015bd0
 801322c:	08015d42 	.word	0x08015d42
 8013230:	08015d46 	.word	0x08015d46
 8013234:	08010b19 	.word	0x08010b19
 8013238:	08012feb 	.word	0x08012feb

0801323c <_sbrk_r>:
 801323c:	b538      	push	{r3, r4, r5, lr}
 801323e:	4c06      	ldr	r4, [pc, #24]	; (8013258 <_sbrk_r+0x1c>)
 8013240:	2300      	movs	r3, #0
 8013242:	4605      	mov	r5, r0
 8013244:	4608      	mov	r0, r1
 8013246:	6023      	str	r3, [r4, #0]
 8013248:	f7f0 ff08 	bl	800405c <_sbrk>
 801324c:	1c43      	adds	r3, r0, #1
 801324e:	d102      	bne.n	8013256 <_sbrk_r+0x1a>
 8013250:	6823      	ldr	r3, [r4, #0]
 8013252:	b103      	cbz	r3, 8013256 <_sbrk_r+0x1a>
 8013254:	602b      	str	r3, [r5, #0]
 8013256:	bd38      	pop	{r3, r4, r5, pc}
 8013258:	20016f10 	.word	0x20016f10

0801325c <nanf>:
 801325c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013264 <nanf+0x8>
 8013260:	4770      	bx	lr
 8013262:	bf00      	nop
 8013264:	7fc00000 	.word	0x7fc00000

08013268 <__sread>:
 8013268:	b510      	push	{r4, lr}
 801326a:	460c      	mov	r4, r1
 801326c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013270:	f000 f8e2 	bl	8013438 <_read_r>
 8013274:	2800      	cmp	r0, #0
 8013276:	bfab      	itete	ge
 8013278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801327a:	89a3      	ldrhlt	r3, [r4, #12]
 801327c:	181b      	addge	r3, r3, r0
 801327e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013282:	bfac      	ite	ge
 8013284:	6563      	strge	r3, [r4, #84]	; 0x54
 8013286:	81a3      	strhlt	r3, [r4, #12]
 8013288:	bd10      	pop	{r4, pc}

0801328a <__swrite>:
 801328a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801328e:	461f      	mov	r7, r3
 8013290:	898b      	ldrh	r3, [r1, #12]
 8013292:	05db      	lsls	r3, r3, #23
 8013294:	4605      	mov	r5, r0
 8013296:	460c      	mov	r4, r1
 8013298:	4616      	mov	r6, r2
 801329a:	d505      	bpl.n	80132a8 <__swrite+0x1e>
 801329c:	2302      	movs	r3, #2
 801329e:	2200      	movs	r2, #0
 80132a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132a4:	f000 f874 	bl	8013390 <_lseek_r>
 80132a8:	89a3      	ldrh	r3, [r4, #12]
 80132aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80132b2:	81a3      	strh	r3, [r4, #12]
 80132b4:	4632      	mov	r2, r6
 80132b6:	463b      	mov	r3, r7
 80132b8:	4628      	mov	r0, r5
 80132ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132be:	f000 b823 	b.w	8013308 <_write_r>

080132c2 <__sseek>:
 80132c2:	b510      	push	{r4, lr}
 80132c4:	460c      	mov	r4, r1
 80132c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132ca:	f000 f861 	bl	8013390 <_lseek_r>
 80132ce:	1c43      	adds	r3, r0, #1
 80132d0:	89a3      	ldrh	r3, [r4, #12]
 80132d2:	bf15      	itete	ne
 80132d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80132d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80132da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80132de:	81a3      	strheq	r3, [r4, #12]
 80132e0:	bf18      	it	ne
 80132e2:	81a3      	strhne	r3, [r4, #12]
 80132e4:	bd10      	pop	{r4, pc}

080132e6 <__sclose>:
 80132e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132ea:	f000 b81f 	b.w	801332c <_close_r>

080132ee <__ascii_wctomb>:
 80132ee:	b149      	cbz	r1, 8013304 <__ascii_wctomb+0x16>
 80132f0:	2aff      	cmp	r2, #255	; 0xff
 80132f2:	bf85      	ittet	hi
 80132f4:	238a      	movhi	r3, #138	; 0x8a
 80132f6:	6003      	strhi	r3, [r0, #0]
 80132f8:	700a      	strbls	r2, [r1, #0]
 80132fa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80132fe:	bf98      	it	ls
 8013300:	2001      	movls	r0, #1
 8013302:	4770      	bx	lr
 8013304:	4608      	mov	r0, r1
 8013306:	4770      	bx	lr

08013308 <_write_r>:
 8013308:	b538      	push	{r3, r4, r5, lr}
 801330a:	4c07      	ldr	r4, [pc, #28]	; (8013328 <_write_r+0x20>)
 801330c:	4605      	mov	r5, r0
 801330e:	4608      	mov	r0, r1
 8013310:	4611      	mov	r1, r2
 8013312:	2200      	movs	r2, #0
 8013314:	6022      	str	r2, [r4, #0]
 8013316:	461a      	mov	r2, r3
 8013318:	f7f0 fe50 	bl	8003fbc <_write>
 801331c:	1c43      	adds	r3, r0, #1
 801331e:	d102      	bne.n	8013326 <_write_r+0x1e>
 8013320:	6823      	ldr	r3, [r4, #0]
 8013322:	b103      	cbz	r3, 8013326 <_write_r+0x1e>
 8013324:	602b      	str	r3, [r5, #0]
 8013326:	bd38      	pop	{r3, r4, r5, pc}
 8013328:	20016f10 	.word	0x20016f10

0801332c <_close_r>:
 801332c:	b538      	push	{r3, r4, r5, lr}
 801332e:	4c06      	ldr	r4, [pc, #24]	; (8013348 <_close_r+0x1c>)
 8013330:	2300      	movs	r3, #0
 8013332:	4605      	mov	r5, r0
 8013334:	4608      	mov	r0, r1
 8013336:	6023      	str	r3, [r4, #0]
 8013338:	f7f0 fe5c 	bl	8003ff4 <_close>
 801333c:	1c43      	adds	r3, r0, #1
 801333e:	d102      	bne.n	8013346 <_close_r+0x1a>
 8013340:	6823      	ldr	r3, [r4, #0]
 8013342:	b103      	cbz	r3, 8013346 <_close_r+0x1a>
 8013344:	602b      	str	r3, [r5, #0]
 8013346:	bd38      	pop	{r3, r4, r5, pc}
 8013348:	20016f10 	.word	0x20016f10

0801334c <_fstat_r>:
 801334c:	b538      	push	{r3, r4, r5, lr}
 801334e:	4c07      	ldr	r4, [pc, #28]	; (801336c <_fstat_r+0x20>)
 8013350:	2300      	movs	r3, #0
 8013352:	4605      	mov	r5, r0
 8013354:	4608      	mov	r0, r1
 8013356:	4611      	mov	r1, r2
 8013358:	6023      	str	r3, [r4, #0]
 801335a:	f7f0 fe57 	bl	800400c <_fstat>
 801335e:	1c43      	adds	r3, r0, #1
 8013360:	d102      	bne.n	8013368 <_fstat_r+0x1c>
 8013362:	6823      	ldr	r3, [r4, #0]
 8013364:	b103      	cbz	r3, 8013368 <_fstat_r+0x1c>
 8013366:	602b      	str	r3, [r5, #0]
 8013368:	bd38      	pop	{r3, r4, r5, pc}
 801336a:	bf00      	nop
 801336c:	20016f10 	.word	0x20016f10

08013370 <_isatty_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	4c06      	ldr	r4, [pc, #24]	; (801338c <_isatty_r+0x1c>)
 8013374:	2300      	movs	r3, #0
 8013376:	4605      	mov	r5, r0
 8013378:	4608      	mov	r0, r1
 801337a:	6023      	str	r3, [r4, #0]
 801337c:	f7f0 fe56 	bl	800402c <_isatty>
 8013380:	1c43      	adds	r3, r0, #1
 8013382:	d102      	bne.n	801338a <_isatty_r+0x1a>
 8013384:	6823      	ldr	r3, [r4, #0]
 8013386:	b103      	cbz	r3, 801338a <_isatty_r+0x1a>
 8013388:	602b      	str	r3, [r5, #0]
 801338a:	bd38      	pop	{r3, r4, r5, pc}
 801338c:	20016f10 	.word	0x20016f10

08013390 <_lseek_r>:
 8013390:	b538      	push	{r3, r4, r5, lr}
 8013392:	4c07      	ldr	r4, [pc, #28]	; (80133b0 <_lseek_r+0x20>)
 8013394:	4605      	mov	r5, r0
 8013396:	4608      	mov	r0, r1
 8013398:	4611      	mov	r1, r2
 801339a:	2200      	movs	r2, #0
 801339c:	6022      	str	r2, [r4, #0]
 801339e:	461a      	mov	r2, r3
 80133a0:	f7f0 fe4f 	bl	8004042 <_lseek>
 80133a4:	1c43      	adds	r3, r0, #1
 80133a6:	d102      	bne.n	80133ae <_lseek_r+0x1e>
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	b103      	cbz	r3, 80133ae <_lseek_r+0x1e>
 80133ac:	602b      	str	r3, [r5, #0]
 80133ae:	bd38      	pop	{r3, r4, r5, pc}
 80133b0:	20016f10 	.word	0x20016f10

080133b4 <memmove>:
 80133b4:	4288      	cmp	r0, r1
 80133b6:	b510      	push	{r4, lr}
 80133b8:	eb01 0302 	add.w	r3, r1, r2
 80133bc:	d807      	bhi.n	80133ce <memmove+0x1a>
 80133be:	1e42      	subs	r2, r0, #1
 80133c0:	4299      	cmp	r1, r3
 80133c2:	d00a      	beq.n	80133da <memmove+0x26>
 80133c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80133cc:	e7f8      	b.n	80133c0 <memmove+0xc>
 80133ce:	4283      	cmp	r3, r0
 80133d0:	d9f5      	bls.n	80133be <memmove+0xa>
 80133d2:	1881      	adds	r1, r0, r2
 80133d4:	1ad2      	subs	r2, r2, r3
 80133d6:	42d3      	cmn	r3, r2
 80133d8:	d100      	bne.n	80133dc <memmove+0x28>
 80133da:	bd10      	pop	{r4, pc}
 80133dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80133e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80133e4:	e7f7      	b.n	80133d6 <memmove+0x22>

080133e6 <__malloc_lock>:
 80133e6:	4770      	bx	lr

080133e8 <__malloc_unlock>:
 80133e8:	4770      	bx	lr

080133ea <_realloc_r>:
 80133ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ec:	4607      	mov	r7, r0
 80133ee:	4614      	mov	r4, r2
 80133f0:	460e      	mov	r6, r1
 80133f2:	b921      	cbnz	r1, 80133fe <_realloc_r+0x14>
 80133f4:	4611      	mov	r1, r2
 80133f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80133fa:	f7ff bc33 	b.w	8012c64 <_malloc_r>
 80133fe:	b922      	cbnz	r2, 801340a <_realloc_r+0x20>
 8013400:	f7ff fbe2 	bl	8012bc8 <_free_r>
 8013404:	4625      	mov	r5, r4
 8013406:	4628      	mov	r0, r5
 8013408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801340a:	f000 f827 	bl	801345c <_malloc_usable_size_r>
 801340e:	42a0      	cmp	r0, r4
 8013410:	d20f      	bcs.n	8013432 <_realloc_r+0x48>
 8013412:	4621      	mov	r1, r4
 8013414:	4638      	mov	r0, r7
 8013416:	f7ff fc25 	bl	8012c64 <_malloc_r>
 801341a:	4605      	mov	r5, r0
 801341c:	2800      	cmp	r0, #0
 801341e:	d0f2      	beq.n	8013406 <_realloc_r+0x1c>
 8013420:	4631      	mov	r1, r6
 8013422:	4622      	mov	r2, r4
 8013424:	f7fd fad0 	bl	80109c8 <memcpy>
 8013428:	4631      	mov	r1, r6
 801342a:	4638      	mov	r0, r7
 801342c:	f7ff fbcc 	bl	8012bc8 <_free_r>
 8013430:	e7e9      	b.n	8013406 <_realloc_r+0x1c>
 8013432:	4635      	mov	r5, r6
 8013434:	e7e7      	b.n	8013406 <_realloc_r+0x1c>
	...

08013438 <_read_r>:
 8013438:	b538      	push	{r3, r4, r5, lr}
 801343a:	4c07      	ldr	r4, [pc, #28]	; (8013458 <_read_r+0x20>)
 801343c:	4605      	mov	r5, r0
 801343e:	4608      	mov	r0, r1
 8013440:	4611      	mov	r1, r2
 8013442:	2200      	movs	r2, #0
 8013444:	6022      	str	r2, [r4, #0]
 8013446:	461a      	mov	r2, r3
 8013448:	f7f0 fd9b 	bl	8003f82 <_read>
 801344c:	1c43      	adds	r3, r0, #1
 801344e:	d102      	bne.n	8013456 <_read_r+0x1e>
 8013450:	6823      	ldr	r3, [r4, #0]
 8013452:	b103      	cbz	r3, 8013456 <_read_r+0x1e>
 8013454:	602b      	str	r3, [r5, #0]
 8013456:	bd38      	pop	{r3, r4, r5, pc}
 8013458:	20016f10 	.word	0x20016f10

0801345c <_malloc_usable_size_r>:
 801345c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013460:	1f18      	subs	r0, r3, #4
 8013462:	2b00      	cmp	r3, #0
 8013464:	bfbc      	itt	lt
 8013466:	580b      	ldrlt	r3, [r1, r0]
 8013468:	18c0      	addlt	r0, r0, r3
 801346a:	4770      	bx	lr

0801346c <pow>:
 801346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013470:	ed2d 8b04 	vpush	{d8-d9}
 8013474:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013748 <pow+0x2dc>
 8013478:	b08d      	sub	sp, #52	; 0x34
 801347a:	ec57 6b10 	vmov	r6, r7, d0
 801347e:	ec55 4b11 	vmov	r4, r5, d1
 8013482:	f000 fb71 	bl	8013b68 <__ieee754_pow>
 8013486:	f999 3000 	ldrsb.w	r3, [r9]
 801348a:	9300      	str	r3, [sp, #0]
 801348c:	3301      	adds	r3, #1
 801348e:	eeb0 8a40 	vmov.f32	s16, s0
 8013492:	eef0 8a60 	vmov.f32	s17, s1
 8013496:	46c8      	mov	r8, r9
 8013498:	d05f      	beq.n	801355a <pow+0xee>
 801349a:	4622      	mov	r2, r4
 801349c:	462b      	mov	r3, r5
 801349e:	4620      	mov	r0, r4
 80134a0:	4629      	mov	r1, r5
 80134a2:	f7ed fb43 	bl	8000b2c <__aeabi_dcmpun>
 80134a6:	4683      	mov	fp, r0
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d156      	bne.n	801355a <pow+0xee>
 80134ac:	4632      	mov	r2, r6
 80134ae:	463b      	mov	r3, r7
 80134b0:	4630      	mov	r0, r6
 80134b2:	4639      	mov	r1, r7
 80134b4:	f7ed fb3a 	bl	8000b2c <__aeabi_dcmpun>
 80134b8:	9001      	str	r0, [sp, #4]
 80134ba:	b1e8      	cbz	r0, 80134f8 <pow+0x8c>
 80134bc:	2200      	movs	r2, #0
 80134be:	2300      	movs	r3, #0
 80134c0:	4620      	mov	r0, r4
 80134c2:	4629      	mov	r1, r5
 80134c4:	f7ed fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d046      	beq.n	801355a <pow+0xee>
 80134cc:	2301      	movs	r3, #1
 80134ce:	9302      	str	r3, [sp, #8]
 80134d0:	4b96      	ldr	r3, [pc, #600]	; (801372c <pow+0x2c0>)
 80134d2:	9303      	str	r3, [sp, #12]
 80134d4:	4b96      	ldr	r3, [pc, #600]	; (8013730 <pow+0x2c4>)
 80134d6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80134da:	2200      	movs	r2, #0
 80134dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80134e0:	9b00      	ldr	r3, [sp, #0]
 80134e2:	2b02      	cmp	r3, #2
 80134e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80134e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80134ec:	d033      	beq.n	8013556 <pow+0xea>
 80134ee:	a802      	add	r0, sp, #8
 80134f0:	f001 fbcc 	bl	8014c8c <matherr>
 80134f4:	bb48      	cbnz	r0, 801354a <pow+0xde>
 80134f6:	e05d      	b.n	80135b4 <pow+0x148>
 80134f8:	f04f 0a00 	mov.w	sl, #0
 80134fc:	f04f 0b00 	mov.w	fp, #0
 8013500:	4652      	mov	r2, sl
 8013502:	465b      	mov	r3, fp
 8013504:	4630      	mov	r0, r6
 8013506:	4639      	mov	r1, r7
 8013508:	f7ed fade 	bl	8000ac8 <__aeabi_dcmpeq>
 801350c:	ec4b ab19 	vmov	d9, sl, fp
 8013510:	2800      	cmp	r0, #0
 8013512:	d054      	beq.n	80135be <pow+0x152>
 8013514:	4652      	mov	r2, sl
 8013516:	465b      	mov	r3, fp
 8013518:	4620      	mov	r0, r4
 801351a:	4629      	mov	r1, r5
 801351c:	f7ed fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8013520:	4680      	mov	r8, r0
 8013522:	b318      	cbz	r0, 801356c <pow+0x100>
 8013524:	2301      	movs	r3, #1
 8013526:	9302      	str	r3, [sp, #8]
 8013528:	4b80      	ldr	r3, [pc, #512]	; (801372c <pow+0x2c0>)
 801352a:	9303      	str	r3, [sp, #12]
 801352c:	9b01      	ldr	r3, [sp, #4]
 801352e:	930a      	str	r3, [sp, #40]	; 0x28
 8013530:	9b00      	ldr	r3, [sp, #0]
 8013532:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013536:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801353a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d0d5      	beq.n	80134ee <pow+0x82>
 8013542:	4b7b      	ldr	r3, [pc, #492]	; (8013730 <pow+0x2c4>)
 8013544:	2200      	movs	r2, #0
 8013546:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801354a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801354c:	b11b      	cbz	r3, 8013556 <pow+0xea>
 801354e:	f7fd fa11 	bl	8010974 <__errno>
 8013552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013554:	6003      	str	r3, [r0, #0]
 8013556:	ed9d 8b08 	vldr	d8, [sp, #32]
 801355a:	eeb0 0a48 	vmov.f32	s0, s16
 801355e:	eef0 0a68 	vmov.f32	s1, s17
 8013562:	b00d      	add	sp, #52	; 0x34
 8013564:	ecbd 8b04 	vpop	{d8-d9}
 8013568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356c:	ec45 4b10 	vmov	d0, r4, r5
 8013570:	f001 fb84 	bl	8014c7c <finite>
 8013574:	2800      	cmp	r0, #0
 8013576:	d0f0      	beq.n	801355a <pow+0xee>
 8013578:	4652      	mov	r2, sl
 801357a:	465b      	mov	r3, fp
 801357c:	4620      	mov	r0, r4
 801357e:	4629      	mov	r1, r5
 8013580:	f7ed faac 	bl	8000adc <__aeabi_dcmplt>
 8013584:	2800      	cmp	r0, #0
 8013586:	d0e8      	beq.n	801355a <pow+0xee>
 8013588:	2301      	movs	r3, #1
 801358a:	9302      	str	r3, [sp, #8]
 801358c:	4b67      	ldr	r3, [pc, #412]	; (801372c <pow+0x2c0>)
 801358e:	9303      	str	r3, [sp, #12]
 8013590:	f999 3000 	ldrsb.w	r3, [r9]
 8013594:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013598:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801359c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80135a0:	b913      	cbnz	r3, 80135a8 <pow+0x13c>
 80135a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80135a6:	e7a2      	b.n	80134ee <pow+0x82>
 80135a8:	4962      	ldr	r1, [pc, #392]	; (8013734 <pow+0x2c8>)
 80135aa:	2000      	movs	r0, #0
 80135ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80135b0:	2b02      	cmp	r3, #2
 80135b2:	d19c      	bne.n	80134ee <pow+0x82>
 80135b4:	f7fd f9de 	bl	8010974 <__errno>
 80135b8:	2321      	movs	r3, #33	; 0x21
 80135ba:	6003      	str	r3, [r0, #0]
 80135bc:	e7c5      	b.n	801354a <pow+0xde>
 80135be:	eeb0 0a48 	vmov.f32	s0, s16
 80135c2:	eef0 0a68 	vmov.f32	s1, s17
 80135c6:	f001 fb59 	bl	8014c7c <finite>
 80135ca:	9000      	str	r0, [sp, #0]
 80135cc:	2800      	cmp	r0, #0
 80135ce:	f040 8081 	bne.w	80136d4 <pow+0x268>
 80135d2:	ec47 6b10 	vmov	d0, r6, r7
 80135d6:	f001 fb51 	bl	8014c7c <finite>
 80135da:	2800      	cmp	r0, #0
 80135dc:	d07a      	beq.n	80136d4 <pow+0x268>
 80135de:	ec45 4b10 	vmov	d0, r4, r5
 80135e2:	f001 fb4b 	bl	8014c7c <finite>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	d074      	beq.n	80136d4 <pow+0x268>
 80135ea:	ec53 2b18 	vmov	r2, r3, d8
 80135ee:	ee18 0a10 	vmov	r0, s16
 80135f2:	4619      	mov	r1, r3
 80135f4:	f7ed fa9a 	bl	8000b2c <__aeabi_dcmpun>
 80135f8:	f999 9000 	ldrsb.w	r9, [r9]
 80135fc:	4b4b      	ldr	r3, [pc, #300]	; (801372c <pow+0x2c0>)
 80135fe:	b1b0      	cbz	r0, 801362e <pow+0x1c2>
 8013600:	2201      	movs	r2, #1
 8013602:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013606:	9b00      	ldr	r3, [sp, #0]
 8013608:	930a      	str	r3, [sp, #40]	; 0x28
 801360a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801360e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013612:	f1b9 0f00 	cmp.w	r9, #0
 8013616:	d0c4      	beq.n	80135a2 <pow+0x136>
 8013618:	4652      	mov	r2, sl
 801361a:	465b      	mov	r3, fp
 801361c:	4650      	mov	r0, sl
 801361e:	4659      	mov	r1, fp
 8013620:	f7ed f914 	bl	800084c <__aeabi_ddiv>
 8013624:	f1b9 0f02 	cmp.w	r9, #2
 8013628:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801362c:	e7c1      	b.n	80135b2 <pow+0x146>
 801362e:	2203      	movs	r2, #3
 8013630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013634:	900a      	str	r0, [sp, #40]	; 0x28
 8013636:	4629      	mov	r1, r5
 8013638:	4620      	mov	r0, r4
 801363a:	2200      	movs	r2, #0
 801363c:	4b3e      	ldr	r3, [pc, #248]	; (8013738 <pow+0x2cc>)
 801363e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013642:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013646:	f7ec ffd7 	bl	80005f8 <__aeabi_dmul>
 801364a:	4604      	mov	r4, r0
 801364c:	460d      	mov	r5, r1
 801364e:	f1b9 0f00 	cmp.w	r9, #0
 8013652:	d124      	bne.n	801369e <pow+0x232>
 8013654:	4b39      	ldr	r3, [pc, #228]	; (801373c <pow+0x2d0>)
 8013656:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801365a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801365e:	4630      	mov	r0, r6
 8013660:	4652      	mov	r2, sl
 8013662:	465b      	mov	r3, fp
 8013664:	4639      	mov	r1, r7
 8013666:	f7ed fa39 	bl	8000adc <__aeabi_dcmplt>
 801366a:	2800      	cmp	r0, #0
 801366c:	d056      	beq.n	801371c <pow+0x2b0>
 801366e:	ec45 4b10 	vmov	d0, r4, r5
 8013672:	f001 fb15 	bl	8014ca0 <rint>
 8013676:	4622      	mov	r2, r4
 8013678:	462b      	mov	r3, r5
 801367a:	ec51 0b10 	vmov	r0, r1, d0
 801367e:	f7ed fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8013682:	b920      	cbnz	r0, 801368e <pow+0x222>
 8013684:	4b2e      	ldr	r3, [pc, #184]	; (8013740 <pow+0x2d4>)
 8013686:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801368a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801368e:	f998 3000 	ldrsb.w	r3, [r8]
 8013692:	2b02      	cmp	r3, #2
 8013694:	d142      	bne.n	801371c <pow+0x2b0>
 8013696:	f7fd f96d 	bl	8010974 <__errno>
 801369a:	2322      	movs	r3, #34	; 0x22
 801369c:	e78d      	b.n	80135ba <pow+0x14e>
 801369e:	4b29      	ldr	r3, [pc, #164]	; (8013744 <pow+0x2d8>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80136a6:	4630      	mov	r0, r6
 80136a8:	4652      	mov	r2, sl
 80136aa:	465b      	mov	r3, fp
 80136ac:	4639      	mov	r1, r7
 80136ae:	f7ed fa15 	bl	8000adc <__aeabi_dcmplt>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	d0eb      	beq.n	801368e <pow+0x222>
 80136b6:	ec45 4b10 	vmov	d0, r4, r5
 80136ba:	f001 faf1 	bl	8014ca0 <rint>
 80136be:	4622      	mov	r2, r4
 80136c0:	462b      	mov	r3, r5
 80136c2:	ec51 0b10 	vmov	r0, r1, d0
 80136c6:	f7ed f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d1df      	bne.n	801368e <pow+0x222>
 80136ce:	2200      	movs	r2, #0
 80136d0:	4b18      	ldr	r3, [pc, #96]	; (8013734 <pow+0x2c8>)
 80136d2:	e7da      	b.n	801368a <pow+0x21e>
 80136d4:	2200      	movs	r2, #0
 80136d6:	2300      	movs	r3, #0
 80136d8:	ec51 0b18 	vmov	r0, r1, d8
 80136dc:	f7ed f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80136e0:	2800      	cmp	r0, #0
 80136e2:	f43f af3a 	beq.w	801355a <pow+0xee>
 80136e6:	ec47 6b10 	vmov	d0, r6, r7
 80136ea:	f001 fac7 	bl	8014c7c <finite>
 80136ee:	2800      	cmp	r0, #0
 80136f0:	f43f af33 	beq.w	801355a <pow+0xee>
 80136f4:	ec45 4b10 	vmov	d0, r4, r5
 80136f8:	f001 fac0 	bl	8014c7c <finite>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	f43f af2c 	beq.w	801355a <pow+0xee>
 8013702:	2304      	movs	r3, #4
 8013704:	9302      	str	r3, [sp, #8]
 8013706:	4b09      	ldr	r3, [pc, #36]	; (801372c <pow+0x2c0>)
 8013708:	9303      	str	r3, [sp, #12]
 801370a:	2300      	movs	r3, #0
 801370c:	930a      	str	r3, [sp, #40]	; 0x28
 801370e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013712:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013716:	ed8d 9b08 	vstr	d9, [sp, #32]
 801371a:	e7b8      	b.n	801368e <pow+0x222>
 801371c:	a802      	add	r0, sp, #8
 801371e:	f001 fab5 	bl	8014c8c <matherr>
 8013722:	2800      	cmp	r0, #0
 8013724:	f47f af11 	bne.w	801354a <pow+0xde>
 8013728:	e7b5      	b.n	8013696 <pow+0x22a>
 801372a:	bf00      	nop
 801372c:	08015e4e 	.word	0x08015e4e
 8013730:	3ff00000 	.word	0x3ff00000
 8013734:	fff00000 	.word	0xfff00000
 8013738:	3fe00000 	.word	0x3fe00000
 801373c:	47efffff 	.word	0x47efffff
 8013740:	c7efffff 	.word	0xc7efffff
 8013744:	7ff00000 	.word	0x7ff00000
 8013748:	20000324 	.word	0x20000324

0801374c <sqrt>:
 801374c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013750:	ed2d 8b02 	vpush	{d8}
 8013754:	b08b      	sub	sp, #44	; 0x2c
 8013756:	ec55 4b10 	vmov	r4, r5, d0
 801375a:	f000 ff13 	bl	8014584 <__ieee754_sqrt>
 801375e:	4b26      	ldr	r3, [pc, #152]	; (80137f8 <sqrt+0xac>)
 8013760:	eeb0 8a40 	vmov.f32	s16, s0
 8013764:	eef0 8a60 	vmov.f32	s17, s1
 8013768:	f993 6000 	ldrsb.w	r6, [r3]
 801376c:	1c73      	adds	r3, r6, #1
 801376e:	d02a      	beq.n	80137c6 <sqrt+0x7a>
 8013770:	4622      	mov	r2, r4
 8013772:	462b      	mov	r3, r5
 8013774:	4620      	mov	r0, r4
 8013776:	4629      	mov	r1, r5
 8013778:	f7ed f9d8 	bl	8000b2c <__aeabi_dcmpun>
 801377c:	4607      	mov	r7, r0
 801377e:	bb10      	cbnz	r0, 80137c6 <sqrt+0x7a>
 8013780:	f04f 0800 	mov.w	r8, #0
 8013784:	f04f 0900 	mov.w	r9, #0
 8013788:	4642      	mov	r2, r8
 801378a:	464b      	mov	r3, r9
 801378c:	4620      	mov	r0, r4
 801378e:	4629      	mov	r1, r5
 8013790:	f7ed f9a4 	bl	8000adc <__aeabi_dcmplt>
 8013794:	b1b8      	cbz	r0, 80137c6 <sqrt+0x7a>
 8013796:	2301      	movs	r3, #1
 8013798:	9300      	str	r3, [sp, #0]
 801379a:	4b18      	ldr	r3, [pc, #96]	; (80137fc <sqrt+0xb0>)
 801379c:	9301      	str	r3, [sp, #4]
 801379e:	9708      	str	r7, [sp, #32]
 80137a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80137a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80137a8:	b9b6      	cbnz	r6, 80137d8 <sqrt+0x8c>
 80137aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80137ae:	4668      	mov	r0, sp
 80137b0:	f001 fa6c 	bl	8014c8c <matherr>
 80137b4:	b1d0      	cbz	r0, 80137ec <sqrt+0xa0>
 80137b6:	9b08      	ldr	r3, [sp, #32]
 80137b8:	b11b      	cbz	r3, 80137c2 <sqrt+0x76>
 80137ba:	f7fd f8db 	bl	8010974 <__errno>
 80137be:	9b08      	ldr	r3, [sp, #32]
 80137c0:	6003      	str	r3, [r0, #0]
 80137c2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80137c6:	eeb0 0a48 	vmov.f32	s0, s16
 80137ca:	eef0 0a68 	vmov.f32	s1, s17
 80137ce:	b00b      	add	sp, #44	; 0x2c
 80137d0:	ecbd 8b02 	vpop	{d8}
 80137d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137d8:	4642      	mov	r2, r8
 80137da:	464b      	mov	r3, r9
 80137dc:	4640      	mov	r0, r8
 80137de:	4649      	mov	r1, r9
 80137e0:	f7ed f834 	bl	800084c <__aeabi_ddiv>
 80137e4:	2e02      	cmp	r6, #2
 80137e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137ea:	d1e0      	bne.n	80137ae <sqrt+0x62>
 80137ec:	f7fd f8c2 	bl	8010974 <__errno>
 80137f0:	2321      	movs	r3, #33	; 0x21
 80137f2:	6003      	str	r3, [r0, #0]
 80137f4:	e7df      	b.n	80137b6 <sqrt+0x6a>
 80137f6:	bf00      	nop
 80137f8:	20000324 	.word	0x20000324
 80137fc:	08015e52 	.word	0x08015e52

08013800 <powf>:
 8013800:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8013804:	ed2d 8b04 	vpush	{d8-d9}
 8013808:	4ca7      	ldr	r4, [pc, #668]	; (8013aa8 <powf+0x2a8>)
 801380a:	b08a      	sub	sp, #40	; 0x28
 801380c:	eef0 8a40 	vmov.f32	s17, s0
 8013810:	eeb0 8a60 	vmov.f32	s16, s1
 8013814:	f000 ff66 	bl	80146e4 <__ieee754_powf>
 8013818:	f994 5000 	ldrsb.w	r5, [r4]
 801381c:	1c6b      	adds	r3, r5, #1
 801381e:	eeb0 9a40 	vmov.f32	s18, s0
 8013822:	4626      	mov	r6, r4
 8013824:	d05f      	beq.n	80138e6 <powf+0xe6>
 8013826:	eeb4 8a48 	vcmp.f32	s16, s16
 801382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801382e:	d65a      	bvs.n	80138e6 <powf+0xe6>
 8013830:	eef4 8a68 	vcmp.f32	s17, s17
 8013834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013838:	d721      	bvc.n	801387e <powf+0x7e>
 801383a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013842:	d150      	bne.n	80138e6 <powf+0xe6>
 8013844:	2301      	movs	r3, #1
 8013846:	9300      	str	r3, [sp, #0]
 8013848:	4b98      	ldr	r3, [pc, #608]	; (8013aac <powf+0x2ac>)
 801384a:	9301      	str	r3, [sp, #4]
 801384c:	ee18 0a90 	vmov	r0, s17
 8013850:	2300      	movs	r3, #0
 8013852:	9308      	str	r3, [sp, #32]
 8013854:	f7ec fe78 	bl	8000548 <__aeabi_f2d>
 8013858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801385c:	ee18 0a10 	vmov	r0, s16
 8013860:	f7ec fe72 	bl	8000548 <__aeabi_f2d>
 8013864:	4b92      	ldr	r3, [pc, #584]	; (8013ab0 <powf+0x2b0>)
 8013866:	2200      	movs	r2, #0
 8013868:	2d02      	cmp	r5, #2
 801386a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801386e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013872:	d032      	beq.n	80138da <powf+0xda>
 8013874:	4668      	mov	r0, sp
 8013876:	f001 fa09 	bl	8014c8c <matherr>
 801387a:	bb40      	cbnz	r0, 80138ce <powf+0xce>
 801387c:	e065      	b.n	801394a <powf+0x14a>
 801387e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8013ab4 <powf+0x2b4>
 8013882:	eef4 8a69 	vcmp.f32	s17, s19
 8013886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388a:	d163      	bne.n	8013954 <powf+0x154>
 801388c:	eeb4 8a69 	vcmp.f32	s16, s19
 8013890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013894:	d12e      	bne.n	80138f4 <powf+0xf4>
 8013896:	2301      	movs	r3, #1
 8013898:	9300      	str	r3, [sp, #0]
 801389a:	4b84      	ldr	r3, [pc, #528]	; (8013aac <powf+0x2ac>)
 801389c:	9301      	str	r3, [sp, #4]
 801389e:	ee18 0a90 	vmov	r0, s17
 80138a2:	2300      	movs	r3, #0
 80138a4:	9308      	str	r3, [sp, #32]
 80138a6:	f7ec fe4f 	bl	8000548 <__aeabi_f2d>
 80138aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80138ae:	ee18 0a10 	vmov	r0, s16
 80138b2:	f7ec fe49 	bl	8000548 <__aeabi_f2d>
 80138b6:	2200      	movs	r2, #0
 80138b8:	2300      	movs	r3, #0
 80138ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138c2:	2d00      	cmp	r5, #0
 80138c4:	d0d6      	beq.n	8013874 <powf+0x74>
 80138c6:	4b7a      	ldr	r3, [pc, #488]	; (8013ab0 <powf+0x2b0>)
 80138c8:	2200      	movs	r2, #0
 80138ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138ce:	9b08      	ldr	r3, [sp, #32]
 80138d0:	b11b      	cbz	r3, 80138da <powf+0xda>
 80138d2:	f7fd f84f 	bl	8010974 <__errno>
 80138d6:	9b08      	ldr	r3, [sp, #32]
 80138d8:	6003      	str	r3, [r0, #0]
 80138da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138de:	f7ed f983 	bl	8000be8 <__aeabi_d2f>
 80138e2:	ee09 0a10 	vmov	s18, r0
 80138e6:	eeb0 0a49 	vmov.f32	s0, s18
 80138ea:	b00a      	add	sp, #40	; 0x28
 80138ec:	ecbd 8b04 	vpop	{d8-d9}
 80138f0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80138f4:	eeb0 0a48 	vmov.f32	s0, s16
 80138f8:	f001 fad3 	bl	8014ea2 <finitef>
 80138fc:	2800      	cmp	r0, #0
 80138fe:	d0f2      	beq.n	80138e6 <powf+0xe6>
 8013900:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013908:	d5ed      	bpl.n	80138e6 <powf+0xe6>
 801390a:	2301      	movs	r3, #1
 801390c:	9300      	str	r3, [sp, #0]
 801390e:	4b67      	ldr	r3, [pc, #412]	; (8013aac <powf+0x2ac>)
 8013910:	9301      	str	r3, [sp, #4]
 8013912:	ee18 0a90 	vmov	r0, s17
 8013916:	2300      	movs	r3, #0
 8013918:	9308      	str	r3, [sp, #32]
 801391a:	f7ec fe15 	bl	8000548 <__aeabi_f2d>
 801391e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013922:	ee18 0a10 	vmov	r0, s16
 8013926:	f7ec fe0f 	bl	8000548 <__aeabi_f2d>
 801392a:	f994 3000 	ldrsb.w	r3, [r4]
 801392e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013932:	b923      	cbnz	r3, 801393e <powf+0x13e>
 8013934:	2200      	movs	r2, #0
 8013936:	2300      	movs	r3, #0
 8013938:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801393c:	e79a      	b.n	8013874 <powf+0x74>
 801393e:	495e      	ldr	r1, [pc, #376]	; (8013ab8 <powf+0x2b8>)
 8013940:	2000      	movs	r0, #0
 8013942:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013946:	2b02      	cmp	r3, #2
 8013948:	d194      	bne.n	8013874 <powf+0x74>
 801394a:	f7fd f813 	bl	8010974 <__errno>
 801394e:	2321      	movs	r3, #33	; 0x21
 8013950:	6003      	str	r3, [r0, #0]
 8013952:	e7bc      	b.n	80138ce <powf+0xce>
 8013954:	f001 faa5 	bl	8014ea2 <finitef>
 8013958:	4605      	mov	r5, r0
 801395a:	2800      	cmp	r0, #0
 801395c:	d173      	bne.n	8013a46 <powf+0x246>
 801395e:	eeb0 0a68 	vmov.f32	s0, s17
 8013962:	f001 fa9e 	bl	8014ea2 <finitef>
 8013966:	2800      	cmp	r0, #0
 8013968:	d06d      	beq.n	8013a46 <powf+0x246>
 801396a:	eeb0 0a48 	vmov.f32	s0, s16
 801396e:	f001 fa98 	bl	8014ea2 <finitef>
 8013972:	2800      	cmp	r0, #0
 8013974:	d067      	beq.n	8013a46 <powf+0x246>
 8013976:	ee18 0a90 	vmov	r0, s17
 801397a:	f7ec fde5 	bl	8000548 <__aeabi_f2d>
 801397e:	4680      	mov	r8, r0
 8013980:	ee18 0a10 	vmov	r0, s16
 8013984:	4689      	mov	r9, r1
 8013986:	f7ec fddf 	bl	8000548 <__aeabi_f2d>
 801398a:	eeb4 9a49 	vcmp.f32	s18, s18
 801398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013992:	f994 4000 	ldrsb.w	r4, [r4]
 8013996:	4b45      	ldr	r3, [pc, #276]	; (8013aac <powf+0x2ac>)
 8013998:	d713      	bvc.n	80139c2 <powf+0x1c2>
 801399a:	2201      	movs	r2, #1
 801399c:	e9cd 2300 	strd	r2, r3, [sp]
 80139a0:	9508      	str	r5, [sp, #32]
 80139a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80139a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139aa:	2c00      	cmp	r4, #0
 80139ac:	d0c2      	beq.n	8013934 <powf+0x134>
 80139ae:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80139b2:	ee17 0a90 	vmov	r0, s15
 80139b6:	f7ec fdc7 	bl	8000548 <__aeabi_f2d>
 80139ba:	2c02      	cmp	r4, #2
 80139bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80139c0:	e7c2      	b.n	8013948 <powf+0x148>
 80139c2:	2203      	movs	r2, #3
 80139c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80139c8:	e9cd 2300 	strd	r2, r3, [sp]
 80139cc:	9508      	str	r5, [sp, #32]
 80139ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80139d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80139da:	b9fc      	cbnz	r4, 8013a1c <powf+0x21c>
 80139dc:	4b37      	ldr	r3, [pc, #220]	; (8013abc <powf+0x2bc>)
 80139de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80139e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80139e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80139ee:	d553      	bpl.n	8013a98 <powf+0x298>
 80139f0:	eeb0 0a48 	vmov.f32	s0, s16
 80139f4:	f001 fa60 	bl	8014eb8 <rintf>
 80139f8:	eeb4 0a48 	vcmp.f32	s0, s16
 80139fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a00:	d004      	beq.n	8013a0c <powf+0x20c>
 8013a02:	4b2f      	ldr	r3, [pc, #188]	; (8013ac0 <powf+0x2c0>)
 8013a04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013a08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013a0c:	f996 3000 	ldrsb.w	r3, [r6]
 8013a10:	2b02      	cmp	r3, #2
 8013a12:	d141      	bne.n	8013a98 <powf+0x298>
 8013a14:	f7fc ffae 	bl	8010974 <__errno>
 8013a18:	2322      	movs	r3, #34	; 0x22
 8013a1a:	e799      	b.n	8013950 <powf+0x150>
 8013a1c:	4b29      	ldr	r3, [pc, #164]	; (8013ac4 <powf+0x2c4>)
 8013a1e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8013a22:	2200      	movs	r2, #0
 8013a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013a2c:	d5ee      	bpl.n	8013a0c <powf+0x20c>
 8013a2e:	eeb0 0a48 	vmov.f32	s0, s16
 8013a32:	f001 fa41 	bl	8014eb8 <rintf>
 8013a36:	eeb4 0a48 	vcmp.f32	s0, s16
 8013a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3e:	d0e5      	beq.n	8013a0c <powf+0x20c>
 8013a40:	2200      	movs	r2, #0
 8013a42:	4b1d      	ldr	r3, [pc, #116]	; (8013ab8 <powf+0x2b8>)
 8013a44:	e7e0      	b.n	8013a08 <powf+0x208>
 8013a46:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4e:	f47f af4a 	bne.w	80138e6 <powf+0xe6>
 8013a52:	eeb0 0a68 	vmov.f32	s0, s17
 8013a56:	f001 fa24 	bl	8014ea2 <finitef>
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	f43f af43 	beq.w	80138e6 <powf+0xe6>
 8013a60:	eeb0 0a48 	vmov.f32	s0, s16
 8013a64:	f001 fa1d 	bl	8014ea2 <finitef>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	f43f af3c 	beq.w	80138e6 <powf+0xe6>
 8013a6e:	2304      	movs	r3, #4
 8013a70:	9300      	str	r3, [sp, #0]
 8013a72:	4b0e      	ldr	r3, [pc, #56]	; (8013aac <powf+0x2ac>)
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	ee18 0a90 	vmov	r0, s17
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	9308      	str	r3, [sp, #32]
 8013a7e:	f7ec fd63 	bl	8000548 <__aeabi_f2d>
 8013a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a86:	ee18 0a10 	vmov	r0, s16
 8013a8a:	f7ec fd5d 	bl	8000548 <__aeabi_f2d>
 8013a8e:	2200      	movs	r2, #0
 8013a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a94:	2300      	movs	r3, #0
 8013a96:	e7b7      	b.n	8013a08 <powf+0x208>
 8013a98:	4668      	mov	r0, sp
 8013a9a:	f001 f8f7 	bl	8014c8c <matherr>
 8013a9e:	2800      	cmp	r0, #0
 8013aa0:	f47f af15 	bne.w	80138ce <powf+0xce>
 8013aa4:	e7b6      	b.n	8013a14 <powf+0x214>
 8013aa6:	bf00      	nop
 8013aa8:	20000324 	.word	0x20000324
 8013aac:	08015e57 	.word	0x08015e57
 8013ab0:	3ff00000 	.word	0x3ff00000
 8013ab4:	00000000 	.word	0x00000000
 8013ab8:	fff00000 	.word	0xfff00000
 8013abc:	47efffff 	.word	0x47efffff
 8013ac0:	c7efffff 	.word	0xc7efffff
 8013ac4:	7ff00000 	.word	0x7ff00000

08013ac8 <sqrtf>:
 8013ac8:	b510      	push	{r4, lr}
 8013aca:	ed2d 8b02 	vpush	{d8}
 8013ace:	b08a      	sub	sp, #40	; 0x28
 8013ad0:	eeb0 8a40 	vmov.f32	s16, s0
 8013ad4:	f001 f8c6 	bl	8014c64 <__ieee754_sqrtf>
 8013ad8:	4b21      	ldr	r3, [pc, #132]	; (8013b60 <sqrtf+0x98>)
 8013ada:	f993 4000 	ldrsb.w	r4, [r3]
 8013ade:	1c63      	adds	r3, r4, #1
 8013ae0:	d02c      	beq.n	8013b3c <sqrtf+0x74>
 8013ae2:	eeb4 8a48 	vcmp.f32	s16, s16
 8013ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aea:	d627      	bvs.n	8013b3c <sqrtf+0x74>
 8013aec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af4:	d522      	bpl.n	8013b3c <sqrtf+0x74>
 8013af6:	2301      	movs	r3, #1
 8013af8:	9300      	str	r3, [sp, #0]
 8013afa:	4b1a      	ldr	r3, [pc, #104]	; (8013b64 <sqrtf+0x9c>)
 8013afc:	9301      	str	r3, [sp, #4]
 8013afe:	ee18 0a10 	vmov	r0, s16
 8013b02:	2300      	movs	r3, #0
 8013b04:	9308      	str	r3, [sp, #32]
 8013b06:	f7ec fd1f 	bl	8000548 <__aeabi_f2d>
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b14:	2300      	movs	r3, #0
 8013b16:	b9ac      	cbnz	r4, 8013b44 <sqrtf+0x7c>
 8013b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013b1c:	4668      	mov	r0, sp
 8013b1e:	f001 f8b5 	bl	8014c8c <matherr>
 8013b22:	b1b8      	cbz	r0, 8013b54 <sqrtf+0x8c>
 8013b24:	9b08      	ldr	r3, [sp, #32]
 8013b26:	b11b      	cbz	r3, 8013b30 <sqrtf+0x68>
 8013b28:	f7fc ff24 	bl	8010974 <__errno>
 8013b2c:	9b08      	ldr	r3, [sp, #32]
 8013b2e:	6003      	str	r3, [r0, #0]
 8013b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b34:	f7ed f858 	bl	8000be8 <__aeabi_d2f>
 8013b38:	ee00 0a10 	vmov	s0, r0
 8013b3c:	b00a      	add	sp, #40	; 0x28
 8013b3e:	ecbd 8b02 	vpop	{d8}
 8013b42:	bd10      	pop	{r4, pc}
 8013b44:	4610      	mov	r0, r2
 8013b46:	4619      	mov	r1, r3
 8013b48:	f7ec fe80 	bl	800084c <__aeabi_ddiv>
 8013b4c:	2c02      	cmp	r4, #2
 8013b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b52:	d1e3      	bne.n	8013b1c <sqrtf+0x54>
 8013b54:	f7fc ff0e 	bl	8010974 <__errno>
 8013b58:	2321      	movs	r3, #33	; 0x21
 8013b5a:	6003      	str	r3, [r0, #0]
 8013b5c:	e7e2      	b.n	8013b24 <sqrtf+0x5c>
 8013b5e:	bf00      	nop
 8013b60:	20000324 	.word	0x20000324
 8013b64:	08015e5c 	.word	0x08015e5c

08013b68 <__ieee754_pow>:
 8013b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6c:	b091      	sub	sp, #68	; 0x44
 8013b6e:	ed8d 1b00 	vstr	d1, [sp]
 8013b72:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013b76:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013b7a:	ea58 0302 	orrs.w	r3, r8, r2
 8013b7e:	ec57 6b10 	vmov	r6, r7, d0
 8013b82:	f000 84be 	beq.w	8014502 <__ieee754_pow+0x99a>
 8013b86:	4b7a      	ldr	r3, [pc, #488]	; (8013d70 <__ieee754_pow+0x208>)
 8013b88:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013b8c:	429c      	cmp	r4, r3
 8013b8e:	463d      	mov	r5, r7
 8013b90:	ee10 aa10 	vmov	sl, s0
 8013b94:	dc09      	bgt.n	8013baa <__ieee754_pow+0x42>
 8013b96:	d103      	bne.n	8013ba0 <__ieee754_pow+0x38>
 8013b98:	b93e      	cbnz	r6, 8013baa <__ieee754_pow+0x42>
 8013b9a:	45a0      	cmp	r8, r4
 8013b9c:	dc0d      	bgt.n	8013bba <__ieee754_pow+0x52>
 8013b9e:	e001      	b.n	8013ba4 <__ieee754_pow+0x3c>
 8013ba0:	4598      	cmp	r8, r3
 8013ba2:	dc02      	bgt.n	8013baa <__ieee754_pow+0x42>
 8013ba4:	4598      	cmp	r8, r3
 8013ba6:	d10e      	bne.n	8013bc6 <__ieee754_pow+0x5e>
 8013ba8:	b16a      	cbz	r2, 8013bc6 <__ieee754_pow+0x5e>
 8013baa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013bae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013bb2:	ea54 030a 	orrs.w	r3, r4, sl
 8013bb6:	f000 84a4 	beq.w	8014502 <__ieee754_pow+0x99a>
 8013bba:	486e      	ldr	r0, [pc, #440]	; (8013d74 <__ieee754_pow+0x20c>)
 8013bbc:	b011      	add	sp, #68	; 0x44
 8013bbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc2:	f001 b865 	b.w	8014c90 <nan>
 8013bc6:	2d00      	cmp	r5, #0
 8013bc8:	da53      	bge.n	8013c72 <__ieee754_pow+0x10a>
 8013bca:	4b6b      	ldr	r3, [pc, #428]	; (8013d78 <__ieee754_pow+0x210>)
 8013bcc:	4598      	cmp	r8, r3
 8013bce:	dc4d      	bgt.n	8013c6c <__ieee754_pow+0x104>
 8013bd0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013bd4:	4598      	cmp	r8, r3
 8013bd6:	dd4c      	ble.n	8013c72 <__ieee754_pow+0x10a>
 8013bd8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013bdc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013be0:	2b14      	cmp	r3, #20
 8013be2:	dd26      	ble.n	8013c32 <__ieee754_pow+0xca>
 8013be4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013be8:	fa22 f103 	lsr.w	r1, r2, r3
 8013bec:	fa01 f303 	lsl.w	r3, r1, r3
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d13e      	bne.n	8013c72 <__ieee754_pow+0x10a>
 8013bf4:	f001 0101 	and.w	r1, r1, #1
 8013bf8:	f1c1 0b02 	rsb	fp, r1, #2
 8013bfc:	2a00      	cmp	r2, #0
 8013bfe:	d15b      	bne.n	8013cb8 <__ieee754_pow+0x150>
 8013c00:	4b5b      	ldr	r3, [pc, #364]	; (8013d70 <__ieee754_pow+0x208>)
 8013c02:	4598      	cmp	r8, r3
 8013c04:	d124      	bne.n	8013c50 <__ieee754_pow+0xe8>
 8013c06:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013c0a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013c0e:	ea53 030a 	orrs.w	r3, r3, sl
 8013c12:	f000 8476 	beq.w	8014502 <__ieee754_pow+0x99a>
 8013c16:	4b59      	ldr	r3, [pc, #356]	; (8013d7c <__ieee754_pow+0x214>)
 8013c18:	429c      	cmp	r4, r3
 8013c1a:	dd2d      	ble.n	8013c78 <__ieee754_pow+0x110>
 8013c1c:	f1b9 0f00 	cmp.w	r9, #0
 8013c20:	f280 8473 	bge.w	801450a <__ieee754_pow+0x9a2>
 8013c24:	2000      	movs	r0, #0
 8013c26:	2100      	movs	r1, #0
 8013c28:	ec41 0b10 	vmov	d0, r0, r1
 8013c2c:	b011      	add	sp, #68	; 0x44
 8013c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c32:	2a00      	cmp	r2, #0
 8013c34:	d13e      	bne.n	8013cb4 <__ieee754_pow+0x14c>
 8013c36:	f1c3 0314 	rsb	r3, r3, #20
 8013c3a:	fa48 f103 	asr.w	r1, r8, r3
 8013c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8013c42:	4543      	cmp	r3, r8
 8013c44:	f040 8469 	bne.w	801451a <__ieee754_pow+0x9b2>
 8013c48:	f001 0101 	and.w	r1, r1, #1
 8013c4c:	f1c1 0b02 	rsb	fp, r1, #2
 8013c50:	4b4b      	ldr	r3, [pc, #300]	; (8013d80 <__ieee754_pow+0x218>)
 8013c52:	4598      	cmp	r8, r3
 8013c54:	d118      	bne.n	8013c88 <__ieee754_pow+0x120>
 8013c56:	f1b9 0f00 	cmp.w	r9, #0
 8013c5a:	f280 845a 	bge.w	8014512 <__ieee754_pow+0x9aa>
 8013c5e:	4948      	ldr	r1, [pc, #288]	; (8013d80 <__ieee754_pow+0x218>)
 8013c60:	4632      	mov	r2, r6
 8013c62:	463b      	mov	r3, r7
 8013c64:	2000      	movs	r0, #0
 8013c66:	f7ec fdf1 	bl	800084c <__aeabi_ddiv>
 8013c6a:	e7dd      	b.n	8013c28 <__ieee754_pow+0xc0>
 8013c6c:	f04f 0b02 	mov.w	fp, #2
 8013c70:	e7c4      	b.n	8013bfc <__ieee754_pow+0x94>
 8013c72:	f04f 0b00 	mov.w	fp, #0
 8013c76:	e7c1      	b.n	8013bfc <__ieee754_pow+0x94>
 8013c78:	f1b9 0f00 	cmp.w	r9, #0
 8013c7c:	dad2      	bge.n	8013c24 <__ieee754_pow+0xbc>
 8013c7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013c82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013c86:	e7cf      	b.n	8013c28 <__ieee754_pow+0xc0>
 8013c88:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013c8c:	d106      	bne.n	8013c9c <__ieee754_pow+0x134>
 8013c8e:	4632      	mov	r2, r6
 8013c90:	463b      	mov	r3, r7
 8013c92:	4610      	mov	r0, r2
 8013c94:	4619      	mov	r1, r3
 8013c96:	f7ec fcaf 	bl	80005f8 <__aeabi_dmul>
 8013c9a:	e7c5      	b.n	8013c28 <__ieee754_pow+0xc0>
 8013c9c:	4b39      	ldr	r3, [pc, #228]	; (8013d84 <__ieee754_pow+0x21c>)
 8013c9e:	4599      	cmp	r9, r3
 8013ca0:	d10a      	bne.n	8013cb8 <__ieee754_pow+0x150>
 8013ca2:	2d00      	cmp	r5, #0
 8013ca4:	db08      	blt.n	8013cb8 <__ieee754_pow+0x150>
 8013ca6:	ec47 6b10 	vmov	d0, r6, r7
 8013caa:	b011      	add	sp, #68	; 0x44
 8013cac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb0:	f000 bc68 	b.w	8014584 <__ieee754_sqrt>
 8013cb4:	f04f 0b00 	mov.w	fp, #0
 8013cb8:	ec47 6b10 	vmov	d0, r6, r7
 8013cbc:	f000 ffd5 	bl	8014c6a <fabs>
 8013cc0:	ec51 0b10 	vmov	r0, r1, d0
 8013cc4:	f1ba 0f00 	cmp.w	sl, #0
 8013cc8:	d127      	bne.n	8013d1a <__ieee754_pow+0x1b2>
 8013cca:	b124      	cbz	r4, 8013cd6 <__ieee754_pow+0x16e>
 8013ccc:	4b2c      	ldr	r3, [pc, #176]	; (8013d80 <__ieee754_pow+0x218>)
 8013cce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	d121      	bne.n	8013d1a <__ieee754_pow+0x1b2>
 8013cd6:	f1b9 0f00 	cmp.w	r9, #0
 8013cda:	da05      	bge.n	8013ce8 <__ieee754_pow+0x180>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	460b      	mov	r3, r1
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	4927      	ldr	r1, [pc, #156]	; (8013d80 <__ieee754_pow+0x218>)
 8013ce4:	f7ec fdb2 	bl	800084c <__aeabi_ddiv>
 8013ce8:	2d00      	cmp	r5, #0
 8013cea:	da9d      	bge.n	8013c28 <__ieee754_pow+0xc0>
 8013cec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013cf0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013cf4:	ea54 030b 	orrs.w	r3, r4, fp
 8013cf8:	d108      	bne.n	8013d0c <__ieee754_pow+0x1a4>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	4610      	mov	r0, r2
 8013d00:	4619      	mov	r1, r3
 8013d02:	f7ec fac1 	bl	8000288 <__aeabi_dsub>
 8013d06:	4602      	mov	r2, r0
 8013d08:	460b      	mov	r3, r1
 8013d0a:	e7ac      	b.n	8013c66 <__ieee754_pow+0xfe>
 8013d0c:	f1bb 0f01 	cmp.w	fp, #1
 8013d10:	d18a      	bne.n	8013c28 <__ieee754_pow+0xc0>
 8013d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d16:	4619      	mov	r1, r3
 8013d18:	e786      	b.n	8013c28 <__ieee754_pow+0xc0>
 8013d1a:	0fed      	lsrs	r5, r5, #31
 8013d1c:	1e6b      	subs	r3, r5, #1
 8013d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8013d20:	ea5b 0303 	orrs.w	r3, fp, r3
 8013d24:	d102      	bne.n	8013d2c <__ieee754_pow+0x1c4>
 8013d26:	4632      	mov	r2, r6
 8013d28:	463b      	mov	r3, r7
 8013d2a:	e7e8      	b.n	8013cfe <__ieee754_pow+0x196>
 8013d2c:	4b16      	ldr	r3, [pc, #88]	; (8013d88 <__ieee754_pow+0x220>)
 8013d2e:	4598      	cmp	r8, r3
 8013d30:	f340 80fe 	ble.w	8013f30 <__ieee754_pow+0x3c8>
 8013d34:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013d38:	4598      	cmp	r8, r3
 8013d3a:	dd0a      	ble.n	8013d52 <__ieee754_pow+0x1ea>
 8013d3c:	4b0f      	ldr	r3, [pc, #60]	; (8013d7c <__ieee754_pow+0x214>)
 8013d3e:	429c      	cmp	r4, r3
 8013d40:	dc0d      	bgt.n	8013d5e <__ieee754_pow+0x1f6>
 8013d42:	f1b9 0f00 	cmp.w	r9, #0
 8013d46:	f6bf af6d 	bge.w	8013c24 <__ieee754_pow+0xbc>
 8013d4a:	a307      	add	r3, pc, #28	; (adr r3, 8013d68 <__ieee754_pow+0x200>)
 8013d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d50:	e79f      	b.n	8013c92 <__ieee754_pow+0x12a>
 8013d52:	4b0e      	ldr	r3, [pc, #56]	; (8013d8c <__ieee754_pow+0x224>)
 8013d54:	429c      	cmp	r4, r3
 8013d56:	ddf4      	ble.n	8013d42 <__ieee754_pow+0x1da>
 8013d58:	4b09      	ldr	r3, [pc, #36]	; (8013d80 <__ieee754_pow+0x218>)
 8013d5a:	429c      	cmp	r4, r3
 8013d5c:	dd18      	ble.n	8013d90 <__ieee754_pow+0x228>
 8013d5e:	f1b9 0f00 	cmp.w	r9, #0
 8013d62:	dcf2      	bgt.n	8013d4a <__ieee754_pow+0x1e2>
 8013d64:	e75e      	b.n	8013c24 <__ieee754_pow+0xbc>
 8013d66:	bf00      	nop
 8013d68:	8800759c 	.word	0x8800759c
 8013d6c:	7e37e43c 	.word	0x7e37e43c
 8013d70:	7ff00000 	.word	0x7ff00000
 8013d74:	08015d41 	.word	0x08015d41
 8013d78:	433fffff 	.word	0x433fffff
 8013d7c:	3fefffff 	.word	0x3fefffff
 8013d80:	3ff00000 	.word	0x3ff00000
 8013d84:	3fe00000 	.word	0x3fe00000
 8013d88:	41e00000 	.word	0x41e00000
 8013d8c:	3feffffe 	.word	0x3feffffe
 8013d90:	2200      	movs	r2, #0
 8013d92:	4b63      	ldr	r3, [pc, #396]	; (8013f20 <__ieee754_pow+0x3b8>)
 8013d94:	f7ec fa78 	bl	8000288 <__aeabi_dsub>
 8013d98:	a355      	add	r3, pc, #340	; (adr r3, 8013ef0 <__ieee754_pow+0x388>)
 8013d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9e:	4604      	mov	r4, r0
 8013da0:	460d      	mov	r5, r1
 8013da2:	f7ec fc29 	bl	80005f8 <__aeabi_dmul>
 8013da6:	a354      	add	r3, pc, #336	; (adr r3, 8013ef8 <__ieee754_pow+0x390>)
 8013da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dac:	4606      	mov	r6, r0
 8013dae:	460f      	mov	r7, r1
 8013db0:	4620      	mov	r0, r4
 8013db2:	4629      	mov	r1, r5
 8013db4:	f7ec fc20 	bl	80005f8 <__aeabi_dmul>
 8013db8:	2200      	movs	r2, #0
 8013dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013dbe:	4b59      	ldr	r3, [pc, #356]	; (8013f24 <__ieee754_pow+0x3bc>)
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	f7ec fc18 	bl	80005f8 <__aeabi_dmul>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	460b      	mov	r3, r1
 8013dcc:	a14c      	add	r1, pc, #304	; (adr r1, 8013f00 <__ieee754_pow+0x398>)
 8013dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dd2:	f7ec fa59 	bl	8000288 <__aeabi_dsub>
 8013dd6:	4622      	mov	r2, r4
 8013dd8:	462b      	mov	r3, r5
 8013dda:	f7ec fc0d 	bl	80005f8 <__aeabi_dmul>
 8013dde:	4602      	mov	r2, r0
 8013de0:	460b      	mov	r3, r1
 8013de2:	2000      	movs	r0, #0
 8013de4:	4950      	ldr	r1, [pc, #320]	; (8013f28 <__ieee754_pow+0x3c0>)
 8013de6:	f7ec fa4f 	bl	8000288 <__aeabi_dsub>
 8013dea:	4622      	mov	r2, r4
 8013dec:	462b      	mov	r3, r5
 8013dee:	4680      	mov	r8, r0
 8013df0:	4689      	mov	r9, r1
 8013df2:	4620      	mov	r0, r4
 8013df4:	4629      	mov	r1, r5
 8013df6:	f7ec fbff 	bl	80005f8 <__aeabi_dmul>
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	4640      	mov	r0, r8
 8013e00:	4649      	mov	r1, r9
 8013e02:	f7ec fbf9 	bl	80005f8 <__aeabi_dmul>
 8013e06:	a340      	add	r3, pc, #256	; (adr r3, 8013f08 <__ieee754_pow+0x3a0>)
 8013e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0c:	f7ec fbf4 	bl	80005f8 <__aeabi_dmul>
 8013e10:	4602      	mov	r2, r0
 8013e12:	460b      	mov	r3, r1
 8013e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e18:	f7ec fa36 	bl	8000288 <__aeabi_dsub>
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	460b      	mov	r3, r1
 8013e20:	4604      	mov	r4, r0
 8013e22:	460d      	mov	r5, r1
 8013e24:	4630      	mov	r0, r6
 8013e26:	4639      	mov	r1, r7
 8013e28:	f7ec fa30 	bl	800028c <__adddf3>
 8013e2c:	2000      	movs	r0, #0
 8013e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e32:	4632      	mov	r2, r6
 8013e34:	463b      	mov	r3, r7
 8013e36:	f7ec fa27 	bl	8000288 <__aeabi_dsub>
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	4620      	mov	r0, r4
 8013e40:	4629      	mov	r1, r5
 8013e42:	f7ec fa21 	bl	8000288 <__aeabi_dsub>
 8013e46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e48:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	4606      	mov	r6, r0
 8013e50:	460f      	mov	r7, r1
 8013e52:	f040 81eb 	bne.w	801422c <__ieee754_pow+0x6c4>
 8013e56:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013f10 <__ieee754_pow+0x3a8>
 8013e5a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013e5e:	2400      	movs	r4, #0
 8013e60:	4622      	mov	r2, r4
 8013e62:	462b      	mov	r3, r5
 8013e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e6c:	f7ec fa0c 	bl	8000288 <__aeabi_dsub>
 8013e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e74:	f7ec fbc0 	bl	80005f8 <__aeabi_dmul>
 8013e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e7c:	4680      	mov	r8, r0
 8013e7e:	4689      	mov	r9, r1
 8013e80:	4630      	mov	r0, r6
 8013e82:	4639      	mov	r1, r7
 8013e84:	f7ec fbb8 	bl	80005f8 <__aeabi_dmul>
 8013e88:	4602      	mov	r2, r0
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	4640      	mov	r0, r8
 8013e8e:	4649      	mov	r1, r9
 8013e90:	f7ec f9fc 	bl	800028c <__adddf3>
 8013e94:	4622      	mov	r2, r4
 8013e96:	462b      	mov	r3, r5
 8013e98:	4680      	mov	r8, r0
 8013e9a:	4689      	mov	r9, r1
 8013e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ea0:	f7ec fbaa 	bl	80005f8 <__aeabi_dmul>
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	460d      	mov	r5, r1
 8013eaa:	4602      	mov	r2, r0
 8013eac:	4649      	mov	r1, r9
 8013eae:	4640      	mov	r0, r8
 8013eb0:	e9cd 4500 	strd	r4, r5, [sp]
 8013eb4:	f7ec f9ea 	bl	800028c <__adddf3>
 8013eb8:	4b1c      	ldr	r3, [pc, #112]	; (8013f2c <__ieee754_pow+0x3c4>)
 8013eba:	4299      	cmp	r1, r3
 8013ebc:	4606      	mov	r6, r0
 8013ebe:	460f      	mov	r7, r1
 8013ec0:	468b      	mov	fp, r1
 8013ec2:	f340 82f7 	ble.w	80144b4 <__ieee754_pow+0x94c>
 8013ec6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013eca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013ece:	4303      	orrs	r3, r0
 8013ed0:	f000 81ea 	beq.w	80142a8 <__ieee754_pow+0x740>
 8013ed4:	a310      	add	r3, pc, #64	; (adr r3, 8013f18 <__ieee754_pow+0x3b0>)
 8013ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ede:	f7ec fb8b 	bl	80005f8 <__aeabi_dmul>
 8013ee2:	a30d      	add	r3, pc, #52	; (adr r3, 8013f18 <__ieee754_pow+0x3b0>)
 8013ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee8:	e6d5      	b.n	8013c96 <__ieee754_pow+0x12e>
 8013eea:	bf00      	nop
 8013eec:	f3af 8000 	nop.w
 8013ef0:	60000000 	.word	0x60000000
 8013ef4:	3ff71547 	.word	0x3ff71547
 8013ef8:	f85ddf44 	.word	0xf85ddf44
 8013efc:	3e54ae0b 	.word	0x3e54ae0b
 8013f00:	55555555 	.word	0x55555555
 8013f04:	3fd55555 	.word	0x3fd55555
 8013f08:	652b82fe 	.word	0x652b82fe
 8013f0c:	3ff71547 	.word	0x3ff71547
 8013f10:	00000000 	.word	0x00000000
 8013f14:	bff00000 	.word	0xbff00000
 8013f18:	8800759c 	.word	0x8800759c
 8013f1c:	7e37e43c 	.word	0x7e37e43c
 8013f20:	3ff00000 	.word	0x3ff00000
 8013f24:	3fd00000 	.word	0x3fd00000
 8013f28:	3fe00000 	.word	0x3fe00000
 8013f2c:	408fffff 	.word	0x408fffff
 8013f30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013f34:	f04f 0200 	mov.w	r2, #0
 8013f38:	da05      	bge.n	8013f46 <__ieee754_pow+0x3de>
 8013f3a:	4bd3      	ldr	r3, [pc, #844]	; (8014288 <__ieee754_pow+0x720>)
 8013f3c:	f7ec fb5c 	bl	80005f8 <__aeabi_dmul>
 8013f40:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013f44:	460c      	mov	r4, r1
 8013f46:	1523      	asrs	r3, r4, #20
 8013f48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013f4c:	4413      	add	r3, r2
 8013f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8013f50:	4bce      	ldr	r3, [pc, #824]	; (801428c <__ieee754_pow+0x724>)
 8013f52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013f56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013f5a:	429c      	cmp	r4, r3
 8013f5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013f60:	dd08      	ble.n	8013f74 <__ieee754_pow+0x40c>
 8013f62:	4bcb      	ldr	r3, [pc, #812]	; (8014290 <__ieee754_pow+0x728>)
 8013f64:	429c      	cmp	r4, r3
 8013f66:	f340 815e 	ble.w	8014226 <__ieee754_pow+0x6be>
 8013f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013f70:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013f74:	f04f 0a00 	mov.w	sl, #0
 8013f78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8013f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f80:	4bc4      	ldr	r3, [pc, #784]	; (8014294 <__ieee754_pow+0x72c>)
 8013f82:	4413      	add	r3, r2
 8013f84:	ed93 7b00 	vldr	d7, [r3]
 8013f88:	4629      	mov	r1, r5
 8013f8a:	ec53 2b17 	vmov	r2, r3, d7
 8013f8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013f92:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013f96:	f7ec f977 	bl	8000288 <__aeabi_dsub>
 8013f9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	460f      	mov	r7, r1
 8013fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fa6:	f7ec f971 	bl	800028c <__adddf3>
 8013faa:	4602      	mov	r2, r0
 8013fac:	460b      	mov	r3, r1
 8013fae:	2000      	movs	r0, #0
 8013fb0:	49b9      	ldr	r1, [pc, #740]	; (8014298 <__ieee754_pow+0x730>)
 8013fb2:	f7ec fc4b 	bl	800084c <__aeabi_ddiv>
 8013fb6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013fba:	4602      	mov	r2, r0
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	4630      	mov	r0, r6
 8013fc0:	4639      	mov	r1, r7
 8013fc2:	f7ec fb19 	bl	80005f8 <__aeabi_dmul>
 8013fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013fca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	9302      	str	r3, [sp, #8]
 8013fd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013fda:	106d      	asrs	r5, r5, #1
 8013fdc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013fe0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013fea:	4640      	mov	r0, r8
 8013fec:	4649      	mov	r1, r9
 8013fee:	4614      	mov	r4, r2
 8013ff0:	461d      	mov	r5, r3
 8013ff2:	f7ec fb01 	bl	80005f8 <__aeabi_dmul>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	4630      	mov	r0, r6
 8013ffc:	4639      	mov	r1, r7
 8013ffe:	f7ec f943 	bl	8000288 <__aeabi_dsub>
 8014002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014006:	4606      	mov	r6, r0
 8014008:	460f      	mov	r7, r1
 801400a:	4620      	mov	r0, r4
 801400c:	4629      	mov	r1, r5
 801400e:	f7ec f93b 	bl	8000288 <__aeabi_dsub>
 8014012:	4602      	mov	r2, r0
 8014014:	460b      	mov	r3, r1
 8014016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801401a:	f7ec f935 	bl	8000288 <__aeabi_dsub>
 801401e:	4642      	mov	r2, r8
 8014020:	464b      	mov	r3, r9
 8014022:	f7ec fae9 	bl	80005f8 <__aeabi_dmul>
 8014026:	4602      	mov	r2, r0
 8014028:	460b      	mov	r3, r1
 801402a:	4630      	mov	r0, r6
 801402c:	4639      	mov	r1, r7
 801402e:	f7ec f92b 	bl	8000288 <__aeabi_dsub>
 8014032:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014036:	f7ec fadf 	bl	80005f8 <__aeabi_dmul>
 801403a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801403e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014042:	4610      	mov	r0, r2
 8014044:	4619      	mov	r1, r3
 8014046:	f7ec fad7 	bl	80005f8 <__aeabi_dmul>
 801404a:	a37b      	add	r3, pc, #492	; (adr r3, 8014238 <__ieee754_pow+0x6d0>)
 801404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014050:	4604      	mov	r4, r0
 8014052:	460d      	mov	r5, r1
 8014054:	f7ec fad0 	bl	80005f8 <__aeabi_dmul>
 8014058:	a379      	add	r3, pc, #484	; (adr r3, 8014240 <__ieee754_pow+0x6d8>)
 801405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801405e:	f7ec f915 	bl	800028c <__adddf3>
 8014062:	4622      	mov	r2, r4
 8014064:	462b      	mov	r3, r5
 8014066:	f7ec fac7 	bl	80005f8 <__aeabi_dmul>
 801406a:	a377      	add	r3, pc, #476	; (adr r3, 8014248 <__ieee754_pow+0x6e0>)
 801406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014070:	f7ec f90c 	bl	800028c <__adddf3>
 8014074:	4622      	mov	r2, r4
 8014076:	462b      	mov	r3, r5
 8014078:	f7ec fabe 	bl	80005f8 <__aeabi_dmul>
 801407c:	a374      	add	r3, pc, #464	; (adr r3, 8014250 <__ieee754_pow+0x6e8>)
 801407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014082:	f7ec f903 	bl	800028c <__adddf3>
 8014086:	4622      	mov	r2, r4
 8014088:	462b      	mov	r3, r5
 801408a:	f7ec fab5 	bl	80005f8 <__aeabi_dmul>
 801408e:	a372      	add	r3, pc, #456	; (adr r3, 8014258 <__ieee754_pow+0x6f0>)
 8014090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014094:	f7ec f8fa 	bl	800028c <__adddf3>
 8014098:	4622      	mov	r2, r4
 801409a:	462b      	mov	r3, r5
 801409c:	f7ec faac 	bl	80005f8 <__aeabi_dmul>
 80140a0:	a36f      	add	r3, pc, #444	; (adr r3, 8014260 <__ieee754_pow+0x6f8>)
 80140a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a6:	f7ec f8f1 	bl	800028c <__adddf3>
 80140aa:	4622      	mov	r2, r4
 80140ac:	4606      	mov	r6, r0
 80140ae:	460f      	mov	r7, r1
 80140b0:	462b      	mov	r3, r5
 80140b2:	4620      	mov	r0, r4
 80140b4:	4629      	mov	r1, r5
 80140b6:	f7ec fa9f 	bl	80005f8 <__aeabi_dmul>
 80140ba:	4602      	mov	r2, r0
 80140bc:	460b      	mov	r3, r1
 80140be:	4630      	mov	r0, r6
 80140c0:	4639      	mov	r1, r7
 80140c2:	f7ec fa99 	bl	80005f8 <__aeabi_dmul>
 80140c6:	4642      	mov	r2, r8
 80140c8:	4604      	mov	r4, r0
 80140ca:	460d      	mov	r5, r1
 80140cc:	464b      	mov	r3, r9
 80140ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80140d2:	f7ec f8db 	bl	800028c <__adddf3>
 80140d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140da:	f7ec fa8d 	bl	80005f8 <__aeabi_dmul>
 80140de:	4622      	mov	r2, r4
 80140e0:	462b      	mov	r3, r5
 80140e2:	f7ec f8d3 	bl	800028c <__adddf3>
 80140e6:	4642      	mov	r2, r8
 80140e8:	4606      	mov	r6, r0
 80140ea:	460f      	mov	r7, r1
 80140ec:	464b      	mov	r3, r9
 80140ee:	4640      	mov	r0, r8
 80140f0:	4649      	mov	r1, r9
 80140f2:	f7ec fa81 	bl	80005f8 <__aeabi_dmul>
 80140f6:	2200      	movs	r2, #0
 80140f8:	4b68      	ldr	r3, [pc, #416]	; (801429c <__ieee754_pow+0x734>)
 80140fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80140fe:	f7ec f8c5 	bl	800028c <__adddf3>
 8014102:	4632      	mov	r2, r6
 8014104:	463b      	mov	r3, r7
 8014106:	f7ec f8c1 	bl	800028c <__adddf3>
 801410a:	9802      	ldr	r0, [sp, #8]
 801410c:	460d      	mov	r5, r1
 801410e:	4604      	mov	r4, r0
 8014110:	4602      	mov	r2, r0
 8014112:	460b      	mov	r3, r1
 8014114:	4640      	mov	r0, r8
 8014116:	4649      	mov	r1, r9
 8014118:	f7ec fa6e 	bl	80005f8 <__aeabi_dmul>
 801411c:	2200      	movs	r2, #0
 801411e:	4680      	mov	r8, r0
 8014120:	4689      	mov	r9, r1
 8014122:	4b5e      	ldr	r3, [pc, #376]	; (801429c <__ieee754_pow+0x734>)
 8014124:	4620      	mov	r0, r4
 8014126:	4629      	mov	r1, r5
 8014128:	f7ec f8ae 	bl	8000288 <__aeabi_dsub>
 801412c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014130:	f7ec f8aa 	bl	8000288 <__aeabi_dsub>
 8014134:	4602      	mov	r2, r0
 8014136:	460b      	mov	r3, r1
 8014138:	4630      	mov	r0, r6
 801413a:	4639      	mov	r1, r7
 801413c:	f7ec f8a4 	bl	8000288 <__aeabi_dsub>
 8014140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014144:	f7ec fa58 	bl	80005f8 <__aeabi_dmul>
 8014148:	4622      	mov	r2, r4
 801414a:	4606      	mov	r6, r0
 801414c:	460f      	mov	r7, r1
 801414e:	462b      	mov	r3, r5
 8014150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014154:	f7ec fa50 	bl	80005f8 <__aeabi_dmul>
 8014158:	4602      	mov	r2, r0
 801415a:	460b      	mov	r3, r1
 801415c:	4630      	mov	r0, r6
 801415e:	4639      	mov	r1, r7
 8014160:	f7ec f894 	bl	800028c <__adddf3>
 8014164:	4606      	mov	r6, r0
 8014166:	460f      	mov	r7, r1
 8014168:	4602      	mov	r2, r0
 801416a:	460b      	mov	r3, r1
 801416c:	4640      	mov	r0, r8
 801416e:	4649      	mov	r1, r9
 8014170:	f7ec f88c 	bl	800028c <__adddf3>
 8014174:	9802      	ldr	r0, [sp, #8]
 8014176:	a33c      	add	r3, pc, #240	; (adr r3, 8014268 <__ieee754_pow+0x700>)
 8014178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417c:	4604      	mov	r4, r0
 801417e:	460d      	mov	r5, r1
 8014180:	f7ec fa3a 	bl	80005f8 <__aeabi_dmul>
 8014184:	4642      	mov	r2, r8
 8014186:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801418a:	464b      	mov	r3, r9
 801418c:	4620      	mov	r0, r4
 801418e:	4629      	mov	r1, r5
 8014190:	f7ec f87a 	bl	8000288 <__aeabi_dsub>
 8014194:	4602      	mov	r2, r0
 8014196:	460b      	mov	r3, r1
 8014198:	4630      	mov	r0, r6
 801419a:	4639      	mov	r1, r7
 801419c:	f7ec f874 	bl	8000288 <__aeabi_dsub>
 80141a0:	a333      	add	r3, pc, #204	; (adr r3, 8014270 <__ieee754_pow+0x708>)
 80141a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a6:	f7ec fa27 	bl	80005f8 <__aeabi_dmul>
 80141aa:	a333      	add	r3, pc, #204	; (adr r3, 8014278 <__ieee754_pow+0x710>)
 80141ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b0:	4606      	mov	r6, r0
 80141b2:	460f      	mov	r7, r1
 80141b4:	4620      	mov	r0, r4
 80141b6:	4629      	mov	r1, r5
 80141b8:	f7ec fa1e 	bl	80005f8 <__aeabi_dmul>
 80141bc:	4602      	mov	r2, r0
 80141be:	460b      	mov	r3, r1
 80141c0:	4630      	mov	r0, r6
 80141c2:	4639      	mov	r1, r7
 80141c4:	f7ec f862 	bl	800028c <__adddf3>
 80141c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141ca:	4b35      	ldr	r3, [pc, #212]	; (80142a0 <__ieee754_pow+0x738>)
 80141cc:	4413      	add	r3, r2
 80141ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d2:	f7ec f85b 	bl	800028c <__adddf3>
 80141d6:	4604      	mov	r4, r0
 80141d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141da:	460d      	mov	r5, r1
 80141dc:	f7ec f9a2 	bl	8000524 <__aeabi_i2d>
 80141e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141e2:	4b30      	ldr	r3, [pc, #192]	; (80142a4 <__ieee754_pow+0x73c>)
 80141e4:	4413      	add	r3, r2
 80141e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80141ea:	4606      	mov	r6, r0
 80141ec:	460f      	mov	r7, r1
 80141ee:	4622      	mov	r2, r4
 80141f0:	462b      	mov	r3, r5
 80141f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141f6:	f7ec f849 	bl	800028c <__adddf3>
 80141fa:	4642      	mov	r2, r8
 80141fc:	464b      	mov	r3, r9
 80141fe:	f7ec f845 	bl	800028c <__adddf3>
 8014202:	4632      	mov	r2, r6
 8014204:	463b      	mov	r3, r7
 8014206:	f7ec f841 	bl	800028c <__adddf3>
 801420a:	9802      	ldr	r0, [sp, #8]
 801420c:	4632      	mov	r2, r6
 801420e:	463b      	mov	r3, r7
 8014210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014214:	f7ec f838 	bl	8000288 <__aeabi_dsub>
 8014218:	4642      	mov	r2, r8
 801421a:	464b      	mov	r3, r9
 801421c:	f7ec f834 	bl	8000288 <__aeabi_dsub>
 8014220:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014224:	e607      	b.n	8013e36 <__ieee754_pow+0x2ce>
 8014226:	f04f 0a01 	mov.w	sl, #1
 801422a:	e6a5      	b.n	8013f78 <__ieee754_pow+0x410>
 801422c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014280 <__ieee754_pow+0x718>
 8014230:	e613      	b.n	8013e5a <__ieee754_pow+0x2f2>
 8014232:	bf00      	nop
 8014234:	f3af 8000 	nop.w
 8014238:	4a454eef 	.word	0x4a454eef
 801423c:	3fca7e28 	.word	0x3fca7e28
 8014240:	93c9db65 	.word	0x93c9db65
 8014244:	3fcd864a 	.word	0x3fcd864a
 8014248:	a91d4101 	.word	0xa91d4101
 801424c:	3fd17460 	.word	0x3fd17460
 8014250:	518f264d 	.word	0x518f264d
 8014254:	3fd55555 	.word	0x3fd55555
 8014258:	db6fabff 	.word	0xdb6fabff
 801425c:	3fdb6db6 	.word	0x3fdb6db6
 8014260:	33333303 	.word	0x33333303
 8014264:	3fe33333 	.word	0x3fe33333
 8014268:	e0000000 	.word	0xe0000000
 801426c:	3feec709 	.word	0x3feec709
 8014270:	dc3a03fd 	.word	0xdc3a03fd
 8014274:	3feec709 	.word	0x3feec709
 8014278:	145b01f5 	.word	0x145b01f5
 801427c:	be3e2fe0 	.word	0xbe3e2fe0
 8014280:	00000000 	.word	0x00000000
 8014284:	3ff00000 	.word	0x3ff00000
 8014288:	43400000 	.word	0x43400000
 801428c:	0003988e 	.word	0x0003988e
 8014290:	000bb679 	.word	0x000bb679
 8014294:	08015e68 	.word	0x08015e68
 8014298:	3ff00000 	.word	0x3ff00000
 801429c:	40080000 	.word	0x40080000
 80142a0:	08015e88 	.word	0x08015e88
 80142a4:	08015e78 	.word	0x08015e78
 80142a8:	a3b4      	add	r3, pc, #720	; (adr r3, 801457c <__ieee754_pow+0xa14>)
 80142aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ae:	4640      	mov	r0, r8
 80142b0:	4649      	mov	r1, r9
 80142b2:	f7eb ffeb 	bl	800028c <__adddf3>
 80142b6:	4622      	mov	r2, r4
 80142b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142bc:	462b      	mov	r3, r5
 80142be:	4630      	mov	r0, r6
 80142c0:	4639      	mov	r1, r7
 80142c2:	f7eb ffe1 	bl	8000288 <__aeabi_dsub>
 80142c6:	4602      	mov	r2, r0
 80142c8:	460b      	mov	r3, r1
 80142ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80142ce:	f7ec fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80142d2:	2800      	cmp	r0, #0
 80142d4:	f47f adfe 	bne.w	8013ed4 <__ieee754_pow+0x36c>
 80142d8:	4aa3      	ldr	r2, [pc, #652]	; (8014568 <__ieee754_pow+0xa00>)
 80142da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80142de:	4293      	cmp	r3, r2
 80142e0:	f340 810a 	ble.w	80144f8 <__ieee754_pow+0x990>
 80142e4:	151b      	asrs	r3, r3, #20
 80142e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80142ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80142ee:	fa4a f303 	asr.w	r3, sl, r3
 80142f2:	445b      	add	r3, fp
 80142f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80142f8:	4e9c      	ldr	r6, [pc, #624]	; (801456c <__ieee754_pow+0xa04>)
 80142fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80142fe:	4116      	asrs	r6, r2
 8014300:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014304:	2000      	movs	r0, #0
 8014306:	ea23 0106 	bic.w	r1, r3, r6
 801430a:	f1c2 0214 	rsb	r2, r2, #20
 801430e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014312:	fa4a fa02 	asr.w	sl, sl, r2
 8014316:	f1bb 0f00 	cmp.w	fp, #0
 801431a:	4602      	mov	r2, r0
 801431c:	460b      	mov	r3, r1
 801431e:	4620      	mov	r0, r4
 8014320:	4629      	mov	r1, r5
 8014322:	bfb8      	it	lt
 8014324:	f1ca 0a00 	rsblt	sl, sl, #0
 8014328:	f7eb ffae 	bl	8000288 <__aeabi_dsub>
 801432c:	e9cd 0100 	strd	r0, r1, [sp]
 8014330:	4642      	mov	r2, r8
 8014332:	464b      	mov	r3, r9
 8014334:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014338:	f7eb ffa8 	bl	800028c <__adddf3>
 801433c:	2000      	movs	r0, #0
 801433e:	a378      	add	r3, pc, #480	; (adr r3, 8014520 <__ieee754_pow+0x9b8>)
 8014340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014344:	4604      	mov	r4, r0
 8014346:	460d      	mov	r5, r1
 8014348:	f7ec f956 	bl	80005f8 <__aeabi_dmul>
 801434c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014350:	4606      	mov	r6, r0
 8014352:	460f      	mov	r7, r1
 8014354:	4620      	mov	r0, r4
 8014356:	4629      	mov	r1, r5
 8014358:	f7eb ff96 	bl	8000288 <__aeabi_dsub>
 801435c:	4602      	mov	r2, r0
 801435e:	460b      	mov	r3, r1
 8014360:	4640      	mov	r0, r8
 8014362:	4649      	mov	r1, r9
 8014364:	f7eb ff90 	bl	8000288 <__aeabi_dsub>
 8014368:	a36f      	add	r3, pc, #444	; (adr r3, 8014528 <__ieee754_pow+0x9c0>)
 801436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801436e:	f7ec f943 	bl	80005f8 <__aeabi_dmul>
 8014372:	a36f      	add	r3, pc, #444	; (adr r3, 8014530 <__ieee754_pow+0x9c8>)
 8014374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014378:	4680      	mov	r8, r0
 801437a:	4689      	mov	r9, r1
 801437c:	4620      	mov	r0, r4
 801437e:	4629      	mov	r1, r5
 8014380:	f7ec f93a 	bl	80005f8 <__aeabi_dmul>
 8014384:	4602      	mov	r2, r0
 8014386:	460b      	mov	r3, r1
 8014388:	4640      	mov	r0, r8
 801438a:	4649      	mov	r1, r9
 801438c:	f7eb ff7e 	bl	800028c <__adddf3>
 8014390:	4604      	mov	r4, r0
 8014392:	460d      	mov	r5, r1
 8014394:	4602      	mov	r2, r0
 8014396:	460b      	mov	r3, r1
 8014398:	4630      	mov	r0, r6
 801439a:	4639      	mov	r1, r7
 801439c:	f7eb ff76 	bl	800028c <__adddf3>
 80143a0:	4632      	mov	r2, r6
 80143a2:	463b      	mov	r3, r7
 80143a4:	4680      	mov	r8, r0
 80143a6:	4689      	mov	r9, r1
 80143a8:	f7eb ff6e 	bl	8000288 <__aeabi_dsub>
 80143ac:	4602      	mov	r2, r0
 80143ae:	460b      	mov	r3, r1
 80143b0:	4620      	mov	r0, r4
 80143b2:	4629      	mov	r1, r5
 80143b4:	f7eb ff68 	bl	8000288 <__aeabi_dsub>
 80143b8:	4642      	mov	r2, r8
 80143ba:	4606      	mov	r6, r0
 80143bc:	460f      	mov	r7, r1
 80143be:	464b      	mov	r3, r9
 80143c0:	4640      	mov	r0, r8
 80143c2:	4649      	mov	r1, r9
 80143c4:	f7ec f918 	bl	80005f8 <__aeabi_dmul>
 80143c8:	a35b      	add	r3, pc, #364	; (adr r3, 8014538 <__ieee754_pow+0x9d0>)
 80143ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ce:	4604      	mov	r4, r0
 80143d0:	460d      	mov	r5, r1
 80143d2:	f7ec f911 	bl	80005f8 <__aeabi_dmul>
 80143d6:	a35a      	add	r3, pc, #360	; (adr r3, 8014540 <__ieee754_pow+0x9d8>)
 80143d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143dc:	f7eb ff54 	bl	8000288 <__aeabi_dsub>
 80143e0:	4622      	mov	r2, r4
 80143e2:	462b      	mov	r3, r5
 80143e4:	f7ec f908 	bl	80005f8 <__aeabi_dmul>
 80143e8:	a357      	add	r3, pc, #348	; (adr r3, 8014548 <__ieee754_pow+0x9e0>)
 80143ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ee:	f7eb ff4d 	bl	800028c <__adddf3>
 80143f2:	4622      	mov	r2, r4
 80143f4:	462b      	mov	r3, r5
 80143f6:	f7ec f8ff 	bl	80005f8 <__aeabi_dmul>
 80143fa:	a355      	add	r3, pc, #340	; (adr r3, 8014550 <__ieee754_pow+0x9e8>)
 80143fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014400:	f7eb ff42 	bl	8000288 <__aeabi_dsub>
 8014404:	4622      	mov	r2, r4
 8014406:	462b      	mov	r3, r5
 8014408:	f7ec f8f6 	bl	80005f8 <__aeabi_dmul>
 801440c:	a352      	add	r3, pc, #328	; (adr r3, 8014558 <__ieee754_pow+0x9f0>)
 801440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014412:	f7eb ff3b 	bl	800028c <__adddf3>
 8014416:	4622      	mov	r2, r4
 8014418:	462b      	mov	r3, r5
 801441a:	f7ec f8ed 	bl	80005f8 <__aeabi_dmul>
 801441e:	4602      	mov	r2, r0
 8014420:	460b      	mov	r3, r1
 8014422:	4640      	mov	r0, r8
 8014424:	4649      	mov	r1, r9
 8014426:	f7eb ff2f 	bl	8000288 <__aeabi_dsub>
 801442a:	4604      	mov	r4, r0
 801442c:	460d      	mov	r5, r1
 801442e:	4602      	mov	r2, r0
 8014430:	460b      	mov	r3, r1
 8014432:	4640      	mov	r0, r8
 8014434:	4649      	mov	r1, r9
 8014436:	f7ec f8df 	bl	80005f8 <__aeabi_dmul>
 801443a:	2200      	movs	r2, #0
 801443c:	e9cd 0100 	strd	r0, r1, [sp]
 8014440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014444:	4620      	mov	r0, r4
 8014446:	4629      	mov	r1, r5
 8014448:	f7eb ff1e 	bl	8000288 <__aeabi_dsub>
 801444c:	4602      	mov	r2, r0
 801444e:	460b      	mov	r3, r1
 8014450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014454:	f7ec f9fa 	bl	800084c <__aeabi_ddiv>
 8014458:	4632      	mov	r2, r6
 801445a:	4604      	mov	r4, r0
 801445c:	460d      	mov	r5, r1
 801445e:	463b      	mov	r3, r7
 8014460:	4640      	mov	r0, r8
 8014462:	4649      	mov	r1, r9
 8014464:	f7ec f8c8 	bl	80005f8 <__aeabi_dmul>
 8014468:	4632      	mov	r2, r6
 801446a:	463b      	mov	r3, r7
 801446c:	f7eb ff0e 	bl	800028c <__adddf3>
 8014470:	4602      	mov	r2, r0
 8014472:	460b      	mov	r3, r1
 8014474:	4620      	mov	r0, r4
 8014476:	4629      	mov	r1, r5
 8014478:	f7eb ff06 	bl	8000288 <__aeabi_dsub>
 801447c:	4642      	mov	r2, r8
 801447e:	464b      	mov	r3, r9
 8014480:	f7eb ff02 	bl	8000288 <__aeabi_dsub>
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	2000      	movs	r0, #0
 801448a:	4939      	ldr	r1, [pc, #228]	; (8014570 <__ieee754_pow+0xa08>)
 801448c:	f7eb fefc 	bl	8000288 <__aeabi_dsub>
 8014490:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014494:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014498:	4602      	mov	r2, r0
 801449a:	460b      	mov	r3, r1
 801449c:	da2f      	bge.n	80144fe <__ieee754_pow+0x996>
 801449e:	4650      	mov	r0, sl
 80144a0:	ec43 2b10 	vmov	d0, r2, r3
 80144a4:	f000 fc80 	bl	8014da8 <scalbn>
 80144a8:	ec51 0b10 	vmov	r0, r1, d0
 80144ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144b0:	f7ff bbf1 	b.w	8013c96 <__ieee754_pow+0x12e>
 80144b4:	4b2f      	ldr	r3, [pc, #188]	; (8014574 <__ieee754_pow+0xa0c>)
 80144b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80144ba:	429e      	cmp	r6, r3
 80144bc:	f77f af0c 	ble.w	80142d8 <__ieee754_pow+0x770>
 80144c0:	4b2d      	ldr	r3, [pc, #180]	; (8014578 <__ieee754_pow+0xa10>)
 80144c2:	440b      	add	r3, r1
 80144c4:	4303      	orrs	r3, r0
 80144c6:	d00b      	beq.n	80144e0 <__ieee754_pow+0x978>
 80144c8:	a325      	add	r3, pc, #148	; (adr r3, 8014560 <__ieee754_pow+0x9f8>)
 80144ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144d2:	f7ec f891 	bl	80005f8 <__aeabi_dmul>
 80144d6:	a322      	add	r3, pc, #136	; (adr r3, 8014560 <__ieee754_pow+0x9f8>)
 80144d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144dc:	f7ff bbdb 	b.w	8013c96 <__ieee754_pow+0x12e>
 80144e0:	4622      	mov	r2, r4
 80144e2:	462b      	mov	r3, r5
 80144e4:	f7eb fed0 	bl	8000288 <__aeabi_dsub>
 80144e8:	4642      	mov	r2, r8
 80144ea:	464b      	mov	r3, r9
 80144ec:	f7ec fb0a 	bl	8000b04 <__aeabi_dcmpge>
 80144f0:	2800      	cmp	r0, #0
 80144f2:	f43f aef1 	beq.w	80142d8 <__ieee754_pow+0x770>
 80144f6:	e7e7      	b.n	80144c8 <__ieee754_pow+0x960>
 80144f8:	f04f 0a00 	mov.w	sl, #0
 80144fc:	e718      	b.n	8014330 <__ieee754_pow+0x7c8>
 80144fe:	4621      	mov	r1, r4
 8014500:	e7d4      	b.n	80144ac <__ieee754_pow+0x944>
 8014502:	2000      	movs	r0, #0
 8014504:	491a      	ldr	r1, [pc, #104]	; (8014570 <__ieee754_pow+0xa08>)
 8014506:	f7ff bb8f 	b.w	8013c28 <__ieee754_pow+0xc0>
 801450a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801450e:	f7ff bb8b 	b.w	8013c28 <__ieee754_pow+0xc0>
 8014512:	4630      	mov	r0, r6
 8014514:	4639      	mov	r1, r7
 8014516:	f7ff bb87 	b.w	8013c28 <__ieee754_pow+0xc0>
 801451a:	4693      	mov	fp, r2
 801451c:	f7ff bb98 	b.w	8013c50 <__ieee754_pow+0xe8>
 8014520:	00000000 	.word	0x00000000
 8014524:	3fe62e43 	.word	0x3fe62e43
 8014528:	fefa39ef 	.word	0xfefa39ef
 801452c:	3fe62e42 	.word	0x3fe62e42
 8014530:	0ca86c39 	.word	0x0ca86c39
 8014534:	be205c61 	.word	0xbe205c61
 8014538:	72bea4d0 	.word	0x72bea4d0
 801453c:	3e663769 	.word	0x3e663769
 8014540:	c5d26bf1 	.word	0xc5d26bf1
 8014544:	3ebbbd41 	.word	0x3ebbbd41
 8014548:	af25de2c 	.word	0xaf25de2c
 801454c:	3f11566a 	.word	0x3f11566a
 8014550:	16bebd93 	.word	0x16bebd93
 8014554:	3f66c16c 	.word	0x3f66c16c
 8014558:	5555553e 	.word	0x5555553e
 801455c:	3fc55555 	.word	0x3fc55555
 8014560:	c2f8f359 	.word	0xc2f8f359
 8014564:	01a56e1f 	.word	0x01a56e1f
 8014568:	3fe00000 	.word	0x3fe00000
 801456c:	000fffff 	.word	0x000fffff
 8014570:	3ff00000 	.word	0x3ff00000
 8014574:	4090cbff 	.word	0x4090cbff
 8014578:	3f6f3400 	.word	0x3f6f3400
 801457c:	652b82fe 	.word	0x652b82fe
 8014580:	3c971547 	.word	0x3c971547

08014584 <__ieee754_sqrt>:
 8014584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014588:	4955      	ldr	r1, [pc, #340]	; (80146e0 <__ieee754_sqrt+0x15c>)
 801458a:	ec55 4b10 	vmov	r4, r5, d0
 801458e:	43a9      	bics	r1, r5
 8014590:	462b      	mov	r3, r5
 8014592:	462a      	mov	r2, r5
 8014594:	d112      	bne.n	80145bc <__ieee754_sqrt+0x38>
 8014596:	ee10 2a10 	vmov	r2, s0
 801459a:	ee10 0a10 	vmov	r0, s0
 801459e:	4629      	mov	r1, r5
 80145a0:	f7ec f82a 	bl	80005f8 <__aeabi_dmul>
 80145a4:	4602      	mov	r2, r0
 80145a6:	460b      	mov	r3, r1
 80145a8:	4620      	mov	r0, r4
 80145aa:	4629      	mov	r1, r5
 80145ac:	f7eb fe6e 	bl	800028c <__adddf3>
 80145b0:	4604      	mov	r4, r0
 80145b2:	460d      	mov	r5, r1
 80145b4:	ec45 4b10 	vmov	d0, r4, r5
 80145b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145bc:	2d00      	cmp	r5, #0
 80145be:	ee10 0a10 	vmov	r0, s0
 80145c2:	4621      	mov	r1, r4
 80145c4:	dc0f      	bgt.n	80145e6 <__ieee754_sqrt+0x62>
 80145c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80145ca:	4330      	orrs	r0, r6
 80145cc:	d0f2      	beq.n	80145b4 <__ieee754_sqrt+0x30>
 80145ce:	b155      	cbz	r5, 80145e6 <__ieee754_sqrt+0x62>
 80145d0:	ee10 2a10 	vmov	r2, s0
 80145d4:	4620      	mov	r0, r4
 80145d6:	4629      	mov	r1, r5
 80145d8:	f7eb fe56 	bl	8000288 <__aeabi_dsub>
 80145dc:	4602      	mov	r2, r0
 80145de:	460b      	mov	r3, r1
 80145e0:	f7ec f934 	bl	800084c <__aeabi_ddiv>
 80145e4:	e7e4      	b.n	80145b0 <__ieee754_sqrt+0x2c>
 80145e6:	151b      	asrs	r3, r3, #20
 80145e8:	d073      	beq.n	80146d2 <__ieee754_sqrt+0x14e>
 80145ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80145ee:	07dd      	lsls	r5, r3, #31
 80145f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80145f4:	bf48      	it	mi
 80145f6:	0fc8      	lsrmi	r0, r1, #31
 80145f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80145fc:	bf44      	itt	mi
 80145fe:	0049      	lslmi	r1, r1, #1
 8014600:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8014604:	2500      	movs	r5, #0
 8014606:	1058      	asrs	r0, r3, #1
 8014608:	0fcb      	lsrs	r3, r1, #31
 801460a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801460e:	0049      	lsls	r1, r1, #1
 8014610:	2316      	movs	r3, #22
 8014612:	462c      	mov	r4, r5
 8014614:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014618:	19a7      	adds	r7, r4, r6
 801461a:	4297      	cmp	r7, r2
 801461c:	bfde      	ittt	le
 801461e:	19bc      	addle	r4, r7, r6
 8014620:	1bd2      	suble	r2, r2, r7
 8014622:	19ad      	addle	r5, r5, r6
 8014624:	0fcf      	lsrs	r7, r1, #31
 8014626:	3b01      	subs	r3, #1
 8014628:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801462c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014630:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014634:	d1f0      	bne.n	8014618 <__ieee754_sqrt+0x94>
 8014636:	f04f 0c20 	mov.w	ip, #32
 801463a:	469e      	mov	lr, r3
 801463c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014640:	42a2      	cmp	r2, r4
 8014642:	eb06 070e 	add.w	r7, r6, lr
 8014646:	dc02      	bgt.n	801464e <__ieee754_sqrt+0xca>
 8014648:	d112      	bne.n	8014670 <__ieee754_sqrt+0xec>
 801464a:	428f      	cmp	r7, r1
 801464c:	d810      	bhi.n	8014670 <__ieee754_sqrt+0xec>
 801464e:	2f00      	cmp	r7, #0
 8014650:	eb07 0e06 	add.w	lr, r7, r6
 8014654:	da42      	bge.n	80146dc <__ieee754_sqrt+0x158>
 8014656:	f1be 0f00 	cmp.w	lr, #0
 801465a:	db3f      	blt.n	80146dc <__ieee754_sqrt+0x158>
 801465c:	f104 0801 	add.w	r8, r4, #1
 8014660:	1b12      	subs	r2, r2, r4
 8014662:	428f      	cmp	r7, r1
 8014664:	bf88      	it	hi
 8014666:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801466a:	1bc9      	subs	r1, r1, r7
 801466c:	4433      	add	r3, r6
 801466e:	4644      	mov	r4, r8
 8014670:	0052      	lsls	r2, r2, #1
 8014672:	f1bc 0c01 	subs.w	ip, ip, #1
 8014676:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801467a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801467e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014682:	d1dd      	bne.n	8014640 <__ieee754_sqrt+0xbc>
 8014684:	430a      	orrs	r2, r1
 8014686:	d006      	beq.n	8014696 <__ieee754_sqrt+0x112>
 8014688:	1c5c      	adds	r4, r3, #1
 801468a:	bf13      	iteet	ne
 801468c:	3301      	addne	r3, #1
 801468e:	3501      	addeq	r5, #1
 8014690:	4663      	moveq	r3, ip
 8014692:	f023 0301 	bicne.w	r3, r3, #1
 8014696:	106a      	asrs	r2, r5, #1
 8014698:	085b      	lsrs	r3, r3, #1
 801469a:	07e9      	lsls	r1, r5, #31
 801469c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80146a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80146a4:	bf48      	it	mi
 80146a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80146aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80146ae:	461c      	mov	r4, r3
 80146b0:	e780      	b.n	80145b4 <__ieee754_sqrt+0x30>
 80146b2:	0aca      	lsrs	r2, r1, #11
 80146b4:	3815      	subs	r0, #21
 80146b6:	0549      	lsls	r1, r1, #21
 80146b8:	2a00      	cmp	r2, #0
 80146ba:	d0fa      	beq.n	80146b2 <__ieee754_sqrt+0x12e>
 80146bc:	02d6      	lsls	r6, r2, #11
 80146be:	d50a      	bpl.n	80146d6 <__ieee754_sqrt+0x152>
 80146c0:	f1c3 0420 	rsb	r4, r3, #32
 80146c4:	fa21 f404 	lsr.w	r4, r1, r4
 80146c8:	1e5d      	subs	r5, r3, #1
 80146ca:	4099      	lsls	r1, r3
 80146cc:	4322      	orrs	r2, r4
 80146ce:	1b43      	subs	r3, r0, r5
 80146d0:	e78b      	b.n	80145ea <__ieee754_sqrt+0x66>
 80146d2:	4618      	mov	r0, r3
 80146d4:	e7f0      	b.n	80146b8 <__ieee754_sqrt+0x134>
 80146d6:	0052      	lsls	r2, r2, #1
 80146d8:	3301      	adds	r3, #1
 80146da:	e7ef      	b.n	80146bc <__ieee754_sqrt+0x138>
 80146dc:	46a0      	mov	r8, r4
 80146de:	e7bf      	b.n	8014660 <__ieee754_sqrt+0xdc>
 80146e0:	7ff00000 	.word	0x7ff00000

080146e4 <__ieee754_powf>:
 80146e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146e8:	ee10 5a90 	vmov	r5, s1
 80146ec:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80146f0:	ed2d 8b02 	vpush	{d8}
 80146f4:	eeb0 8a40 	vmov.f32	s16, s0
 80146f8:	eef0 8a60 	vmov.f32	s17, s1
 80146fc:	f000 8293 	beq.w	8014c26 <__ieee754_powf+0x542>
 8014700:	ee10 8a10 	vmov	r8, s0
 8014704:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8014708:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801470c:	dc06      	bgt.n	801471c <__ieee754_powf+0x38>
 801470e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8014712:	dd0a      	ble.n	801472a <__ieee754_powf+0x46>
 8014714:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014718:	f000 8285 	beq.w	8014c26 <__ieee754_powf+0x542>
 801471c:	ecbd 8b02 	vpop	{d8}
 8014720:	48d9      	ldr	r0, [pc, #868]	; (8014a88 <__ieee754_powf+0x3a4>)
 8014722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014726:	f7fe bd99 	b.w	801325c <nanf>
 801472a:	f1b8 0f00 	cmp.w	r8, #0
 801472e:	da1d      	bge.n	801476c <__ieee754_powf+0x88>
 8014730:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8014734:	da2c      	bge.n	8014790 <__ieee754_powf+0xac>
 8014736:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801473a:	db30      	blt.n	801479e <__ieee754_powf+0xba>
 801473c:	15fb      	asrs	r3, r7, #23
 801473e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014742:	fa47 f603 	asr.w	r6, r7, r3
 8014746:	fa06 f303 	lsl.w	r3, r6, r3
 801474a:	42bb      	cmp	r3, r7
 801474c:	d127      	bne.n	801479e <__ieee754_powf+0xba>
 801474e:	f006 0601 	and.w	r6, r6, #1
 8014752:	f1c6 0602 	rsb	r6, r6, #2
 8014756:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801475a:	d122      	bne.n	80147a2 <__ieee754_powf+0xbe>
 801475c:	2d00      	cmp	r5, #0
 801475e:	f280 8268 	bge.w	8014c32 <__ieee754_powf+0x54e>
 8014762:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014766:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801476a:	e00d      	b.n	8014788 <__ieee754_powf+0xa4>
 801476c:	2600      	movs	r6, #0
 801476e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8014772:	d1f0      	bne.n	8014756 <__ieee754_powf+0x72>
 8014774:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014778:	f000 8255 	beq.w	8014c26 <__ieee754_powf+0x542>
 801477c:	dd0a      	ble.n	8014794 <__ieee754_powf+0xb0>
 801477e:	2d00      	cmp	r5, #0
 8014780:	f280 8254 	bge.w	8014c2c <__ieee754_powf+0x548>
 8014784:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8014a8c <__ieee754_powf+0x3a8>
 8014788:	ecbd 8b02 	vpop	{d8}
 801478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014790:	2602      	movs	r6, #2
 8014792:	e7ec      	b.n	801476e <__ieee754_powf+0x8a>
 8014794:	2d00      	cmp	r5, #0
 8014796:	daf5      	bge.n	8014784 <__ieee754_powf+0xa0>
 8014798:	eeb1 0a68 	vneg.f32	s0, s17
 801479c:	e7f4      	b.n	8014788 <__ieee754_powf+0xa4>
 801479e:	2600      	movs	r6, #0
 80147a0:	e7d9      	b.n	8014756 <__ieee754_powf+0x72>
 80147a2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80147a6:	d102      	bne.n	80147ae <__ieee754_powf+0xca>
 80147a8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80147ac:	e7ec      	b.n	8014788 <__ieee754_powf+0xa4>
 80147ae:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80147b2:	eeb0 0a48 	vmov.f32	s0, s16
 80147b6:	d108      	bne.n	80147ca <__ieee754_powf+0xe6>
 80147b8:	f1b8 0f00 	cmp.w	r8, #0
 80147bc:	db05      	blt.n	80147ca <__ieee754_powf+0xe6>
 80147be:	ecbd 8b02 	vpop	{d8}
 80147c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147c6:	f000 ba4d 	b.w	8014c64 <__ieee754_sqrtf>
 80147ca:	f000 fb63 	bl	8014e94 <fabsf>
 80147ce:	b124      	cbz	r4, 80147da <__ieee754_powf+0xf6>
 80147d0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80147d4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80147d8:	d117      	bne.n	801480a <__ieee754_powf+0x126>
 80147da:	2d00      	cmp	r5, #0
 80147dc:	bfbc      	itt	lt
 80147de:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80147e2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80147e6:	f1b8 0f00 	cmp.w	r8, #0
 80147ea:	dacd      	bge.n	8014788 <__ieee754_powf+0xa4>
 80147ec:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80147f0:	ea54 0306 	orrs.w	r3, r4, r6
 80147f4:	d104      	bne.n	8014800 <__ieee754_powf+0x11c>
 80147f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80147fa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80147fe:	e7c3      	b.n	8014788 <__ieee754_powf+0xa4>
 8014800:	2e01      	cmp	r6, #1
 8014802:	d1c1      	bne.n	8014788 <__ieee754_powf+0xa4>
 8014804:	eeb1 0a40 	vneg.f32	s0, s0
 8014808:	e7be      	b.n	8014788 <__ieee754_powf+0xa4>
 801480a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801480e:	3801      	subs	r0, #1
 8014810:	ea56 0300 	orrs.w	r3, r6, r0
 8014814:	d104      	bne.n	8014820 <__ieee754_powf+0x13c>
 8014816:	ee38 8a48 	vsub.f32	s16, s16, s16
 801481a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801481e:	e7b3      	b.n	8014788 <__ieee754_powf+0xa4>
 8014820:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8014824:	dd6d      	ble.n	8014902 <__ieee754_powf+0x21e>
 8014826:	4b9a      	ldr	r3, [pc, #616]	; (8014a90 <__ieee754_powf+0x3ac>)
 8014828:	429c      	cmp	r4, r3
 801482a:	dc06      	bgt.n	801483a <__ieee754_powf+0x156>
 801482c:	2d00      	cmp	r5, #0
 801482e:	daa9      	bge.n	8014784 <__ieee754_powf+0xa0>
 8014830:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8014a94 <__ieee754_powf+0x3b0>
 8014834:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014838:	e7a6      	b.n	8014788 <__ieee754_powf+0xa4>
 801483a:	4b97      	ldr	r3, [pc, #604]	; (8014a98 <__ieee754_powf+0x3b4>)
 801483c:	429c      	cmp	r4, r3
 801483e:	dd02      	ble.n	8014846 <__ieee754_powf+0x162>
 8014840:	2d00      	cmp	r5, #0
 8014842:	dcf5      	bgt.n	8014830 <__ieee754_powf+0x14c>
 8014844:	e79e      	b.n	8014784 <__ieee754_powf+0xa0>
 8014846:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801484a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801484e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8014a9c <__ieee754_powf+0x3b8>
 8014852:	eef1 6a40 	vneg.f32	s13, s0
 8014856:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801485a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801485e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014862:	eee7 7a40 	vfms.f32	s15, s14, s0
 8014866:	ee60 0a00 	vmul.f32	s1, s0, s0
 801486a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8014aa0 <__ieee754_powf+0x3bc>
 801486e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014872:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8014aa4 <__ieee754_powf+0x3c0>
 8014876:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801487a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801487e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014aa8 <__ieee754_powf+0x3c4>
 8014882:	eeb0 6a67 	vmov.f32	s12, s15
 8014886:	eea0 6a07 	vfma.f32	s12, s0, s14
 801488a:	ee16 3a10 	vmov	r3, s12
 801488e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014892:	f023 030f 	bic.w	r3, r3, #15
 8014896:	ee00 3a90 	vmov	s1, r3
 801489a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801489e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80148a2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80148a6:	f025 050f 	bic.w	r5, r5, #15
 80148aa:	ee07 5a10 	vmov	s14, r5
 80148ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80148b2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80148b6:	ee07 3a90 	vmov	s15, r3
 80148ba:	eee7 0a27 	vfma.f32	s1, s14, s15
 80148be:	3e01      	subs	r6, #1
 80148c0:	ea56 0200 	orrs.w	r2, r6, r0
 80148c4:	ee07 5a10 	vmov	s14, r5
 80148c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80148d0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80148d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80148d8:	ee17 4a10 	vmov	r4, s14
 80148dc:	bf08      	it	eq
 80148de:	eeb0 8a40 	vmoveq.f32	s16, s0
 80148e2:	2c00      	cmp	r4, #0
 80148e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80148e8:	f340 8184 	ble.w	8014bf4 <__ieee754_powf+0x510>
 80148ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80148f0:	f340 80fc 	ble.w	8014aec <__ieee754_powf+0x408>
 80148f4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8014a94 <__ieee754_powf+0x3b0>
 80148f8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80148fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014900:	e742      	b.n	8014788 <__ieee754_powf+0xa4>
 8014902:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8014906:	bfbf      	itttt	lt
 8014908:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8014aac <__ieee754_powf+0x3c8>
 801490c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014910:	f06f 0217 	mvnlt.w	r2, #23
 8014914:	ee17 4a90 	vmovlt	r4, s15
 8014918:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801491c:	bfa8      	it	ge
 801491e:	2200      	movge	r2, #0
 8014920:	3b7f      	subs	r3, #127	; 0x7f
 8014922:	4413      	add	r3, r2
 8014924:	4a62      	ldr	r2, [pc, #392]	; (8014ab0 <__ieee754_powf+0x3cc>)
 8014926:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801492a:	4294      	cmp	r4, r2
 801492c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8014930:	dd06      	ble.n	8014940 <__ieee754_powf+0x25c>
 8014932:	4a60      	ldr	r2, [pc, #384]	; (8014ab4 <__ieee754_powf+0x3d0>)
 8014934:	4294      	cmp	r4, r2
 8014936:	f340 80a5 	ble.w	8014a84 <__ieee754_powf+0x3a0>
 801493a:	3301      	adds	r3, #1
 801493c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014940:	2400      	movs	r4, #0
 8014942:	4a5d      	ldr	r2, [pc, #372]	; (8014ab8 <__ieee754_powf+0x3d4>)
 8014944:	00a7      	lsls	r7, r4, #2
 8014946:	443a      	add	r2, r7
 8014948:	ee07 1a90 	vmov	s15, r1
 801494c:	ed92 7a00 	vldr	s14, [r2]
 8014950:	4a5a      	ldr	r2, [pc, #360]	; (8014abc <__ieee754_powf+0x3d8>)
 8014952:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014956:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801495a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801495e:	1049      	asrs	r1, r1, #1
 8014960:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014964:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014968:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801496c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8014970:	ee06 1a10 	vmov	s12, r1
 8014974:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8014978:	ee14 ca90 	vmov	ip, s9
 801497c:	ea02 0c0c 	and.w	ip, r2, ip
 8014980:	ee05 ca10 	vmov	s10, ip
 8014984:	eeb1 4a45 	vneg.f32	s8, s10
 8014988:	eee4 5a06 	vfma.f32	s11, s8, s12
 801498c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014990:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014ac0 <__ieee754_powf+0x3dc>
 8014994:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8014998:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801499c:	eee4 5a06 	vfma.f32	s11, s8, s12
 80149a0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80149a4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80149a8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8014ac4 <__ieee754_powf+0x3e0>
 80149ac:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80149b0:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014ac8 <__ieee754_powf+0x3e4>
 80149b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80149b8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014a9c <__ieee754_powf+0x3b8>
 80149bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80149c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8014acc <__ieee754_powf+0x3e8>
 80149c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80149c8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8014ad0 <__ieee754_powf+0x3ec>
 80149cc:	ee75 6a24 	vadd.f32	s13, s10, s9
 80149d0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80149d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80149d8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80149dc:	eef0 7a65 	vmov.f32	s15, s11
 80149e0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80149e4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80149e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149ec:	ee17 1a90 	vmov	r1, s15
 80149f0:	4011      	ands	r1, r2
 80149f2:	ee07 1a90 	vmov	s15, r1
 80149f6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80149fa:	eddf 5a36 	vldr	s11, [pc, #216]	; 8014ad4 <__ieee754_powf+0x3f0>
 80149fe:	eea4 7a05 	vfma.f32	s14, s8, s10
 8014a02:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014a06:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014a0a:	eea7 7a86 	vfma.f32	s14, s15, s12
 8014a0e:	eeb0 6a47 	vmov.f32	s12, s14
 8014a12:	eea5 6a27 	vfma.f32	s12, s10, s15
 8014a16:	ee16 1a10 	vmov	r1, s12
 8014a1a:	4011      	ands	r1, r2
 8014a1c:	ee06 1a90 	vmov	s13, r1
 8014a20:	eee4 6a27 	vfma.f32	s13, s8, s15
 8014a24:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014ad8 <__ieee754_powf+0x3f4>
 8014a28:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014a2c:	ee06 1a10 	vmov	s12, r1
 8014a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014a34:	eddf 7a29 	vldr	s15, [pc, #164]	; 8014adc <__ieee754_powf+0x3f8>
 8014a38:	4929      	ldr	r1, [pc, #164]	; (8014ae0 <__ieee754_powf+0x3fc>)
 8014a3a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014a3e:	4439      	add	r1, r7
 8014a40:	edd1 7a00 	vldr	s15, [r1]
 8014a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a48:	ee07 3a90 	vmov	s15, r3
 8014a4c:	eef0 0a47 	vmov.f32	s1, s14
 8014a50:	4b24      	ldr	r3, [pc, #144]	; (8014ae4 <__ieee754_powf+0x400>)
 8014a52:	eee6 0a25 	vfma.f32	s1, s12, s11
 8014a56:	443b      	add	r3, r7
 8014a58:	ed93 5a00 	vldr	s10, [r3]
 8014a5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014a60:	ee70 0a85 	vadd.f32	s1, s1, s10
 8014a64:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8014a68:	ee17 3a90 	vmov	r3, s15
 8014a6c:	4013      	ands	r3, r2
 8014a6e:	ee07 3a90 	vmov	s15, r3
 8014a72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a76:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8014a7a:	eee6 7a65 	vfms.f32	s15, s12, s11
 8014a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a82:	e70e      	b.n	80148a2 <__ieee754_powf+0x1be>
 8014a84:	2401      	movs	r4, #1
 8014a86:	e75c      	b.n	8014942 <__ieee754_powf+0x25e>
 8014a88:	08015d41 	.word	0x08015d41
 8014a8c:	00000000 	.word	0x00000000
 8014a90:	3f7ffff7 	.word	0x3f7ffff7
 8014a94:	7149f2ca 	.word	0x7149f2ca
 8014a98:	3f800007 	.word	0x3f800007
 8014a9c:	3eaaaaab 	.word	0x3eaaaaab
 8014aa0:	36eca570 	.word	0x36eca570
 8014aa4:	3fb8aa3b 	.word	0x3fb8aa3b
 8014aa8:	3fb8aa00 	.word	0x3fb8aa00
 8014aac:	4b800000 	.word	0x4b800000
 8014ab0:	001cc471 	.word	0x001cc471
 8014ab4:	005db3d6 	.word	0x005db3d6
 8014ab8:	08015e98 	.word	0x08015e98
 8014abc:	fffff000 	.word	0xfffff000
 8014ac0:	3e6c3255 	.word	0x3e6c3255
 8014ac4:	3e53f142 	.word	0x3e53f142
 8014ac8:	3e8ba305 	.word	0x3e8ba305
 8014acc:	3edb6db7 	.word	0x3edb6db7
 8014ad0:	3f19999a 	.word	0x3f19999a
 8014ad4:	3f763800 	.word	0x3f763800
 8014ad8:	3f76384f 	.word	0x3f76384f
 8014adc:	369dc3a0 	.word	0x369dc3a0
 8014ae0:	08015ea8 	.word	0x08015ea8
 8014ae4:	08015ea0 	.word	0x08015ea0
 8014ae8:	3338aa3c 	.word	0x3338aa3c
 8014aec:	f040 8092 	bne.w	8014c14 <__ieee754_powf+0x530>
 8014af0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014ae8 <__ieee754_powf+0x404>
 8014af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014af8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014afc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b04:	f73f aef6 	bgt.w	80148f4 <__ieee754_powf+0x210>
 8014b08:	15db      	asrs	r3, r3, #23
 8014b0a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014b0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014b12:	4103      	asrs	r3, r0
 8014b14:	4423      	add	r3, r4
 8014b16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014b1a:	4947      	ldr	r1, [pc, #284]	; (8014c38 <__ieee754_powf+0x554>)
 8014b1c:	3a7f      	subs	r2, #127	; 0x7f
 8014b1e:	4111      	asrs	r1, r2
 8014b20:	ea23 0101 	bic.w	r1, r3, r1
 8014b24:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014b28:	ee07 1a10 	vmov	s14, r1
 8014b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014b30:	f1c2 0217 	rsb	r2, r2, #23
 8014b34:	4110      	asrs	r0, r2
 8014b36:	2c00      	cmp	r4, #0
 8014b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b3c:	bfb8      	it	lt
 8014b3e:	4240      	neglt	r0, r0
 8014b40:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014b44:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014c3c <__ieee754_powf+0x558>
 8014b48:	ee17 3a10 	vmov	r3, s14
 8014b4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014b50:	f023 030f 	bic.w	r3, r3, #15
 8014b54:	ee07 3a10 	vmov	s14, r3
 8014b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b5c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014b60:	eddf 7a37 	vldr	s15, [pc, #220]	; 8014c40 <__ieee754_powf+0x55c>
 8014b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b68:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8014b6c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8014c44 <__ieee754_powf+0x560>
 8014b70:	eeb0 0a67 	vmov.f32	s0, s15
 8014b74:	eea7 0a26 	vfma.f32	s0, s14, s13
 8014b78:	eeb0 6a40 	vmov.f32	s12, s0
 8014b7c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014b80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014b84:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014b88:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014c48 <__ieee754_powf+0x564>
 8014b8c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014c4c <__ieee754_powf+0x568>
 8014b90:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014b94:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014c50 <__ieee754_powf+0x56c>
 8014b98:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014b9c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8014c54 <__ieee754_powf+0x570>
 8014ba0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014ba4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8014c58 <__ieee754_powf+0x574>
 8014ba8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014bac:	eeb0 6a40 	vmov.f32	s12, s0
 8014bb0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8014bb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014bb8:	eeb0 7a46 	vmov.f32	s14, s12
 8014bbc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014bc0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8014bc4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8014bc8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bd0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014bd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014bdc:	ee10 3a10 	vmov	r3, s0
 8014be0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014be8:	da1a      	bge.n	8014c20 <__ieee754_powf+0x53c>
 8014bea:	f000 f9bf 	bl	8014f6c <scalbnf>
 8014bee:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014bf2:	e5c9      	b.n	8014788 <__ieee754_powf+0xa4>
 8014bf4:	4a19      	ldr	r2, [pc, #100]	; (8014c5c <__ieee754_powf+0x578>)
 8014bf6:	4293      	cmp	r3, r2
 8014bf8:	dd02      	ble.n	8014c00 <__ieee754_powf+0x51c>
 8014bfa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014c60 <__ieee754_powf+0x57c>
 8014bfe:	e67b      	b.n	80148f8 <__ieee754_powf+0x214>
 8014c00:	d108      	bne.n	8014c14 <__ieee754_powf+0x530>
 8014c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c06:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c0e:	f6ff af7b 	blt.w	8014b08 <__ieee754_powf+0x424>
 8014c12:	e7f2      	b.n	8014bfa <__ieee754_powf+0x516>
 8014c14:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014c18:	f73f af76 	bgt.w	8014b08 <__ieee754_powf+0x424>
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	e78f      	b.n	8014b40 <__ieee754_powf+0x45c>
 8014c20:	ee00 3a10 	vmov	s0, r3
 8014c24:	e7e3      	b.n	8014bee <__ieee754_powf+0x50a>
 8014c26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c2a:	e5ad      	b.n	8014788 <__ieee754_powf+0xa4>
 8014c2c:	eeb0 0a68 	vmov.f32	s0, s17
 8014c30:	e5aa      	b.n	8014788 <__ieee754_powf+0xa4>
 8014c32:	eeb0 0a48 	vmov.f32	s0, s16
 8014c36:	e5a7      	b.n	8014788 <__ieee754_powf+0xa4>
 8014c38:	007fffff 	.word	0x007fffff
 8014c3c:	3f317218 	.word	0x3f317218
 8014c40:	35bfbe8c 	.word	0x35bfbe8c
 8014c44:	3f317200 	.word	0x3f317200
 8014c48:	3331bb4c 	.word	0x3331bb4c
 8014c4c:	b5ddea0e 	.word	0xb5ddea0e
 8014c50:	388ab355 	.word	0x388ab355
 8014c54:	bb360b61 	.word	0xbb360b61
 8014c58:	3e2aaaab 	.word	0x3e2aaaab
 8014c5c:	43160000 	.word	0x43160000
 8014c60:	0da24260 	.word	0x0da24260

08014c64 <__ieee754_sqrtf>:
 8014c64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014c68:	4770      	bx	lr

08014c6a <fabs>:
 8014c6a:	ec51 0b10 	vmov	r0, r1, d0
 8014c6e:	ee10 2a10 	vmov	r2, s0
 8014c72:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c76:	ec43 2b10 	vmov	d0, r2, r3
 8014c7a:	4770      	bx	lr

08014c7c <finite>:
 8014c7c:	ee10 3a90 	vmov	r3, s1
 8014c80:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014c84:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014c88:	0fc0      	lsrs	r0, r0, #31
 8014c8a:	4770      	bx	lr

08014c8c <matherr>:
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	4770      	bx	lr

08014c90 <nan>:
 8014c90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014c98 <nan+0x8>
 8014c94:	4770      	bx	lr
 8014c96:	bf00      	nop
 8014c98:	00000000 	.word	0x00000000
 8014c9c:	7ff80000 	.word	0x7ff80000

08014ca0 <rint>:
 8014ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ca2:	ec51 0b10 	vmov	r0, r1, d0
 8014ca6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014caa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014cae:	2e13      	cmp	r6, #19
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	ee10 4a10 	vmov	r4, s0
 8014cb6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014cba:	dc56      	bgt.n	8014d6a <rint+0xca>
 8014cbc:	2e00      	cmp	r6, #0
 8014cbe:	da2b      	bge.n	8014d18 <rint+0x78>
 8014cc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014cc4:	4302      	orrs	r2, r0
 8014cc6:	d023      	beq.n	8014d10 <rint+0x70>
 8014cc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014ccc:	4302      	orrs	r2, r0
 8014cce:	4254      	negs	r4, r2
 8014cd0:	4314      	orrs	r4, r2
 8014cd2:	0c4b      	lsrs	r3, r1, #17
 8014cd4:	0b24      	lsrs	r4, r4, #12
 8014cd6:	045b      	lsls	r3, r3, #17
 8014cd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014cdc:	ea44 0103 	orr.w	r1, r4, r3
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	492f      	ldr	r1, [pc, #188]	; (8014da0 <rint+0x100>)
 8014ce4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014ce8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014cec:	4602      	mov	r2, r0
 8014cee:	4639      	mov	r1, r7
 8014cf0:	4630      	mov	r0, r6
 8014cf2:	f7eb facb 	bl	800028c <__adddf3>
 8014cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8014cfa:	463b      	mov	r3, r7
 8014cfc:	4632      	mov	r2, r6
 8014cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d02:	f7eb fac1 	bl	8000288 <__aeabi_dsub>
 8014d06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014d0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014d0e:	4639      	mov	r1, r7
 8014d10:	ec41 0b10 	vmov	d0, r0, r1
 8014d14:	b003      	add	sp, #12
 8014d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d18:	4a22      	ldr	r2, [pc, #136]	; (8014da4 <rint+0x104>)
 8014d1a:	4132      	asrs	r2, r6
 8014d1c:	ea01 0702 	and.w	r7, r1, r2
 8014d20:	4307      	orrs	r7, r0
 8014d22:	d0f5      	beq.n	8014d10 <rint+0x70>
 8014d24:	0852      	lsrs	r2, r2, #1
 8014d26:	4011      	ands	r1, r2
 8014d28:	430c      	orrs	r4, r1
 8014d2a:	d00b      	beq.n	8014d44 <rint+0xa4>
 8014d2c:	ea23 0202 	bic.w	r2, r3, r2
 8014d30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014d34:	2e13      	cmp	r6, #19
 8014d36:	fa43 f306 	asr.w	r3, r3, r6
 8014d3a:	bf0c      	ite	eq
 8014d3c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014d40:	2400      	movne	r4, #0
 8014d42:	4313      	orrs	r3, r2
 8014d44:	4916      	ldr	r1, [pc, #88]	; (8014da0 <rint+0x100>)
 8014d46:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014d4a:	4622      	mov	r2, r4
 8014d4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d50:	4620      	mov	r0, r4
 8014d52:	4629      	mov	r1, r5
 8014d54:	f7eb fa9a 	bl	800028c <__adddf3>
 8014d58:	e9cd 0100 	strd	r0, r1, [sp]
 8014d5c:	4622      	mov	r2, r4
 8014d5e:	462b      	mov	r3, r5
 8014d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d64:	f7eb fa90 	bl	8000288 <__aeabi_dsub>
 8014d68:	e7d2      	b.n	8014d10 <rint+0x70>
 8014d6a:	2e33      	cmp	r6, #51	; 0x33
 8014d6c:	dd07      	ble.n	8014d7e <rint+0xde>
 8014d6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014d72:	d1cd      	bne.n	8014d10 <rint+0x70>
 8014d74:	ee10 2a10 	vmov	r2, s0
 8014d78:	f7eb fa88 	bl	800028c <__adddf3>
 8014d7c:	e7c8      	b.n	8014d10 <rint+0x70>
 8014d7e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d86:	40f2      	lsrs	r2, r6
 8014d88:	4210      	tst	r0, r2
 8014d8a:	d0c1      	beq.n	8014d10 <rint+0x70>
 8014d8c:	0852      	lsrs	r2, r2, #1
 8014d8e:	4210      	tst	r0, r2
 8014d90:	bf1f      	itttt	ne
 8014d92:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014d96:	ea20 0202 	bicne.w	r2, r0, r2
 8014d9a:	4134      	asrne	r4, r6
 8014d9c:	4314      	orrne	r4, r2
 8014d9e:	e7d1      	b.n	8014d44 <rint+0xa4>
 8014da0:	08015eb0 	.word	0x08015eb0
 8014da4:	000fffff 	.word	0x000fffff

08014da8 <scalbn>:
 8014da8:	b570      	push	{r4, r5, r6, lr}
 8014daa:	ec55 4b10 	vmov	r4, r5, d0
 8014dae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014db2:	4606      	mov	r6, r0
 8014db4:	462b      	mov	r3, r5
 8014db6:	b9aa      	cbnz	r2, 8014de4 <scalbn+0x3c>
 8014db8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014dbc:	4323      	orrs	r3, r4
 8014dbe:	d03b      	beq.n	8014e38 <scalbn+0x90>
 8014dc0:	4b31      	ldr	r3, [pc, #196]	; (8014e88 <scalbn+0xe0>)
 8014dc2:	4629      	mov	r1, r5
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	ee10 0a10 	vmov	r0, s0
 8014dca:	f7eb fc15 	bl	80005f8 <__aeabi_dmul>
 8014dce:	4b2f      	ldr	r3, [pc, #188]	; (8014e8c <scalbn+0xe4>)
 8014dd0:	429e      	cmp	r6, r3
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	460d      	mov	r5, r1
 8014dd6:	da12      	bge.n	8014dfe <scalbn+0x56>
 8014dd8:	a327      	add	r3, pc, #156	; (adr r3, 8014e78 <scalbn+0xd0>)
 8014dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dde:	f7eb fc0b 	bl	80005f8 <__aeabi_dmul>
 8014de2:	e009      	b.n	8014df8 <scalbn+0x50>
 8014de4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014de8:	428a      	cmp	r2, r1
 8014dea:	d10c      	bne.n	8014e06 <scalbn+0x5e>
 8014dec:	ee10 2a10 	vmov	r2, s0
 8014df0:	4620      	mov	r0, r4
 8014df2:	4629      	mov	r1, r5
 8014df4:	f7eb fa4a 	bl	800028c <__adddf3>
 8014df8:	4604      	mov	r4, r0
 8014dfa:	460d      	mov	r5, r1
 8014dfc:	e01c      	b.n	8014e38 <scalbn+0x90>
 8014dfe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014e02:	460b      	mov	r3, r1
 8014e04:	3a36      	subs	r2, #54	; 0x36
 8014e06:	4432      	add	r2, r6
 8014e08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014e0c:	428a      	cmp	r2, r1
 8014e0e:	dd0b      	ble.n	8014e28 <scalbn+0x80>
 8014e10:	ec45 4b11 	vmov	d1, r4, r5
 8014e14:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014e80 <scalbn+0xd8>
 8014e18:	f000 f908 	bl	801502c <copysign>
 8014e1c:	a318      	add	r3, pc, #96	; (adr r3, 8014e80 <scalbn+0xd8>)
 8014e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e22:	ec51 0b10 	vmov	r0, r1, d0
 8014e26:	e7da      	b.n	8014dde <scalbn+0x36>
 8014e28:	2a00      	cmp	r2, #0
 8014e2a:	dd08      	ble.n	8014e3e <scalbn+0x96>
 8014e2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014e30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014e34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014e38:	ec45 4b10 	vmov	d0, r4, r5
 8014e3c:	bd70      	pop	{r4, r5, r6, pc}
 8014e3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014e42:	da0d      	bge.n	8014e60 <scalbn+0xb8>
 8014e44:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014e48:	429e      	cmp	r6, r3
 8014e4a:	ec45 4b11 	vmov	d1, r4, r5
 8014e4e:	dce1      	bgt.n	8014e14 <scalbn+0x6c>
 8014e50:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014e78 <scalbn+0xd0>
 8014e54:	f000 f8ea 	bl	801502c <copysign>
 8014e58:	a307      	add	r3, pc, #28	; (adr r3, 8014e78 <scalbn+0xd0>)
 8014e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5e:	e7e0      	b.n	8014e22 <scalbn+0x7a>
 8014e60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014e64:	3236      	adds	r2, #54	; 0x36
 8014e66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014e6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014e6e:	4620      	mov	r0, r4
 8014e70:	4629      	mov	r1, r5
 8014e72:	2200      	movs	r2, #0
 8014e74:	4b06      	ldr	r3, [pc, #24]	; (8014e90 <scalbn+0xe8>)
 8014e76:	e7b2      	b.n	8014dde <scalbn+0x36>
 8014e78:	c2f8f359 	.word	0xc2f8f359
 8014e7c:	01a56e1f 	.word	0x01a56e1f
 8014e80:	8800759c 	.word	0x8800759c
 8014e84:	7e37e43c 	.word	0x7e37e43c
 8014e88:	43500000 	.word	0x43500000
 8014e8c:	ffff3cb0 	.word	0xffff3cb0
 8014e90:	3c900000 	.word	0x3c900000

08014e94 <fabsf>:
 8014e94:	ee10 3a10 	vmov	r3, s0
 8014e98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e9c:	ee00 3a10 	vmov	s0, r3
 8014ea0:	4770      	bx	lr

08014ea2 <finitef>:
 8014ea2:	ee10 3a10 	vmov	r3, s0
 8014ea6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014eaa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014eae:	bfac      	ite	ge
 8014eb0:	2000      	movge	r0, #0
 8014eb2:	2001      	movlt	r0, #1
 8014eb4:	4770      	bx	lr
	...

08014eb8 <rintf>:
 8014eb8:	b513      	push	{r0, r1, r4, lr}
 8014eba:	ee10 1a10 	vmov	r1, s0
 8014ebe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ec2:	0ddc      	lsrs	r4, r3, #23
 8014ec4:	3c7f      	subs	r4, #127	; 0x7f
 8014ec6:	2c16      	cmp	r4, #22
 8014ec8:	dc46      	bgt.n	8014f58 <rintf+0xa0>
 8014eca:	b32b      	cbz	r3, 8014f18 <rintf+0x60>
 8014ecc:	2c00      	cmp	r4, #0
 8014ece:	ee10 2a10 	vmov	r2, s0
 8014ed2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8014ed6:	da21      	bge.n	8014f1c <rintf+0x64>
 8014ed8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8014edc:	425b      	negs	r3, r3
 8014ede:	4a21      	ldr	r2, [pc, #132]	; (8014f64 <rintf+0xac>)
 8014ee0:	0a5b      	lsrs	r3, r3, #9
 8014ee2:	0d09      	lsrs	r1, r1, #20
 8014ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014ee8:	0509      	lsls	r1, r1, #20
 8014eea:	430b      	orrs	r3, r1
 8014eec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014ef0:	ee07 3a90 	vmov	s15, r3
 8014ef4:	edd2 6a00 	vldr	s13, [r2]
 8014ef8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8014efc:	ed8d 7a01 	vstr	s14, [sp, #4]
 8014f00:	eddd 7a01 	vldr	s15, [sp, #4]
 8014f04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014f08:	ee17 3a90 	vmov	r3, s15
 8014f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f10:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8014f14:	ee00 3a10 	vmov	s0, r3
 8014f18:	b002      	add	sp, #8
 8014f1a:	bd10      	pop	{r4, pc}
 8014f1c:	4b12      	ldr	r3, [pc, #72]	; (8014f68 <rintf+0xb0>)
 8014f1e:	4123      	asrs	r3, r4
 8014f20:	4219      	tst	r1, r3
 8014f22:	d0f9      	beq.n	8014f18 <rintf+0x60>
 8014f24:	085b      	lsrs	r3, r3, #1
 8014f26:	4219      	tst	r1, r3
 8014f28:	d006      	beq.n	8014f38 <rintf+0x80>
 8014f2a:	ea21 0203 	bic.w	r2, r1, r3
 8014f2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014f32:	fa43 f404 	asr.w	r4, r3, r4
 8014f36:	4322      	orrs	r2, r4
 8014f38:	4b0a      	ldr	r3, [pc, #40]	; (8014f64 <rintf+0xac>)
 8014f3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014f3e:	ed90 7a00 	vldr	s14, [r0]
 8014f42:	ee07 2a90 	vmov	s15, r2
 8014f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f4a:	edcd 7a01 	vstr	s15, [sp, #4]
 8014f4e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014f52:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014f56:	e7df      	b.n	8014f18 <rintf+0x60>
 8014f58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014f5c:	d3dc      	bcc.n	8014f18 <rintf+0x60>
 8014f5e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014f62:	e7d9      	b.n	8014f18 <rintf+0x60>
 8014f64:	08015ec0 	.word	0x08015ec0
 8014f68:	007fffff 	.word	0x007fffff

08014f6c <scalbnf>:
 8014f6c:	b508      	push	{r3, lr}
 8014f6e:	ee10 2a10 	vmov	r2, s0
 8014f72:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8014f76:	ed2d 8b02 	vpush	{d8}
 8014f7a:	eef0 0a40 	vmov.f32	s1, s0
 8014f7e:	d004      	beq.n	8014f8a <scalbnf+0x1e>
 8014f80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014f84:	d306      	bcc.n	8014f94 <scalbnf+0x28>
 8014f86:	ee70 0a00 	vadd.f32	s1, s0, s0
 8014f8a:	ecbd 8b02 	vpop	{d8}
 8014f8e:	eeb0 0a60 	vmov.f32	s0, s1
 8014f92:	bd08      	pop	{r3, pc}
 8014f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014f98:	d21c      	bcs.n	8014fd4 <scalbnf+0x68>
 8014f9a:	4b1f      	ldr	r3, [pc, #124]	; (8015018 <scalbnf+0xac>)
 8014f9c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801501c <scalbnf+0xb0>
 8014fa0:	4298      	cmp	r0, r3
 8014fa2:	ee60 0a27 	vmul.f32	s1, s0, s15
 8014fa6:	db10      	blt.n	8014fca <scalbnf+0x5e>
 8014fa8:	ee10 2a90 	vmov	r2, s1
 8014fac:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014fb0:	3b19      	subs	r3, #25
 8014fb2:	4403      	add	r3, r0
 8014fb4:	2bfe      	cmp	r3, #254	; 0xfe
 8014fb6:	dd0f      	ble.n	8014fd8 <scalbnf+0x6c>
 8014fb8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8015020 <scalbnf+0xb4>
 8014fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8014fc0:	f000 f843 	bl	801504a <copysignf>
 8014fc4:	ee60 0a08 	vmul.f32	s1, s0, s16
 8014fc8:	e7df      	b.n	8014f8a <scalbnf+0x1e>
 8014fca:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015024 <scalbnf+0xb8>
 8014fce:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014fd2:	e7da      	b.n	8014f8a <scalbnf+0x1e>
 8014fd4:	0ddb      	lsrs	r3, r3, #23
 8014fd6:	e7ec      	b.n	8014fb2 <scalbnf+0x46>
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	dd06      	ble.n	8014fea <scalbnf+0x7e>
 8014fdc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8014fe0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014fe4:	ee00 3a90 	vmov	s1, r3
 8014fe8:	e7cf      	b.n	8014f8a <scalbnf+0x1e>
 8014fea:	f113 0f16 	cmn.w	r3, #22
 8014fee:	da06      	bge.n	8014ffe <scalbnf+0x92>
 8014ff0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ff4:	4298      	cmp	r0, r3
 8014ff6:	dcdf      	bgt.n	8014fb8 <scalbnf+0x4c>
 8014ff8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8015024 <scalbnf+0xb8>
 8014ffc:	e7de      	b.n	8014fbc <scalbnf+0x50>
 8014ffe:	3319      	adds	r3, #25
 8015000:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015004:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015008:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015028 <scalbnf+0xbc>
 801500c:	ee07 3a10 	vmov	s14, r3
 8015010:	ee67 0a27 	vmul.f32	s1, s14, s15
 8015014:	e7b9      	b.n	8014f8a <scalbnf+0x1e>
 8015016:	bf00      	nop
 8015018:	ffff3cb0 	.word	0xffff3cb0
 801501c:	4c000000 	.word	0x4c000000
 8015020:	7149f2ca 	.word	0x7149f2ca
 8015024:	0da24260 	.word	0x0da24260
 8015028:	33000000 	.word	0x33000000

0801502c <copysign>:
 801502c:	ec51 0b10 	vmov	r0, r1, d0
 8015030:	ee11 0a90 	vmov	r0, s3
 8015034:	ee10 2a10 	vmov	r2, s0
 8015038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801503c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015040:	ea41 0300 	orr.w	r3, r1, r0
 8015044:	ec43 2b10 	vmov	d0, r2, r3
 8015048:	4770      	bx	lr

0801504a <copysignf>:
 801504a:	ee10 3a10 	vmov	r3, s0
 801504e:	ee10 2a90 	vmov	r2, s1
 8015052:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015056:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801505a:	4313      	orrs	r3, r2
 801505c:	ee00 3a10 	vmov	s0, r3
 8015060:	4770      	bx	lr
	...

08015064 <_init>:
 8015064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015066:	bf00      	nop
 8015068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801506a:	bc08      	pop	{r3}
 801506c:	469e      	mov	lr, r3
 801506e:	4770      	bx	lr

08015070 <_fini>:
 8015070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015072:	bf00      	nop
 8015074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015076:	bc08      	pop	{r3}
 8015078:	469e      	mov	lr, r3
 801507a:	4770      	bx	lr
