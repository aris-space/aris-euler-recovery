
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  0800dd08  0800dd08  0001dd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e0  0800e6e0  000202f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6e0  0800e6e0  0001e6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6e8  0800e6e8  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6e8  0800e6e8  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ec  0800e6ec  0001e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0800e6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059a0  200002f0  0800e9e0  000202f0  2**2
                  ALLOC
 10 ._user_heap_stack 00002248  20005c90  0800e9e0  00025c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa62  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046d0  00000000  00000000  0003fd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  00044458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  000458d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ae1  00000000  00000000  00046b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000182bc  00000000  00000000  0006c609  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c83e0  00000000  00000000  000848c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f34  00000000  00000000  0014cd20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcf0 	.word	0x0800dcf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	0800dcf0 	.word	0x0800dcf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <turn_off_HAWKs>:
void fire_HAWKs(void){
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
}

void turn_off_HAWKs(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <turn_off_HAWKs+0x20>)
 8000f94:	f004 f9c8 	bl	8005328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9e:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <turn_off_HAWKs+0x20>)
 8000fa0:	f004 f9c2 	bl	8005328 <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000

08000fac <turn_off_TDs>:
void fire_TDs(void){
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
}

void turn_off_TDs(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <turn_off_TDs+0x20>)
 8000fb8:	f004 f9b6 	bl	8005328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <turn_off_TDs+0x20>)
 8000fc4:	f004 f9b0 	bl	8005328 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <init_ADC>:

void init_ADC(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <init_ADC+0x18>)
 8000fd6:	f002 fffd 	bl	8003fd4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 8000fda:	2208      	movs	r2, #8
 8000fdc:	4903      	ldr	r1, [pc, #12]	; (8000fec <init_ADC+0x1c>)
 8000fde:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <init_ADC+0x18>)
 8000fe0:	f002 ff06 	bl	8003df0 <HAL_ADC_Start_DMA>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20003444 	.word	0x20003444
 8000fec:	20000384 	.word	0x20000384

08000ff0 <read_ADC>:

void read_ADC(float * out){
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8000ff8:	4b89      	ldr	r3, [pc, #548]	; (8001220 <read_ADC+0x230>)
 8000ffa:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 8000ffc:	4b89      	ldr	r3, [pc, #548]	; (8001224 <read_ADC+0x234>)
 8000ffe:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001000:	4b89      	ldr	r3, [pc, #548]	; (8001228 <read_ADC+0x238>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001014:	edd7 7a02 	vldr	s15, [r7, #8]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 8001022:	4b81      	ldr	r3, [pc, #516]	; (8001228 <read_ADC+0x238>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3304      	adds	r3, #4
 800103a:	edd7 7a02 	vldr	s15, [r7, #8]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 8001046:	4b78      	ldr	r3, [pc, #480]	; (8001228 <read_ADC+0x238>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3308      	adds	r3, #8
 800105e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <read_ADC+0x238>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	edd7 7a03 	vldr	s15, [r7, #12]
 800107a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107e:	ee17 0a90 	vmov	r0, s15
 8001082:	f7ff fa61 	bl	8000548 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	461a      	mov	r2, r3
 800108c:	4623      	mov	r3, r4
 800108e:	a15c      	add	r1, pc, #368	; (adr r1, 8001200 <read_ADC+0x210>)
 8001090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001094:	f7ff f8f8 	bl	8000288 <__aeabi_dsub>
 8001098:	4603      	mov	r3, r0
 800109a:	460c      	mov	r4, r1
 800109c:	4618      	mov	r0, r3
 800109e:	4621      	mov	r1, r4
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <read_ADC+0x23c>)
 80010a6:	f7ff faa7 	bl	80005f8 <__aeabi_dmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	4618      	mov	r0, r3
 80010b0:	4621      	mov	r1, r4
 80010b2:	a355      	add	r3, pc, #340	; (adr r3, 8001208 <read_ADC+0x218>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fbc8 	bl	800084c <__aeabi_ddiv>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4618      	mov	r0, r3
 80010c2:	4621      	mov	r1, r4
 80010c4:	f7ff fd90 	bl	8000be8 <__aeabi_d2f>
 80010c8:	4602      	mov	r2, r0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	330c      	adds	r3, #12
 80010ce:	ee07 2a90 	vmov	s15, r2
 80010d2:	eef1 7a67 	vneg.f32	s15, s15
 80010d6:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <read_ADC+0x238>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff fa29 	bl	8000548 <__aeabi_f2d>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	461a      	mov	r2, r3
 80010fc:	4623      	mov	r3, r4
 80010fe:	a140      	add	r1, pc, #256	; (adr r1, 8001200 <read_ADC+0x210>)
 8001100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001104:	f7ff f8c0 	bl	8000288 <__aeabi_dsub>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4618      	mov	r0, r3
 800110e:	4621      	mov	r1, r4
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <read_ADC+0x23c>)
 8001116:	f7ff fa6f 	bl	80005f8 <__aeabi_dmul>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	a339      	add	r3, pc, #228	; (adr r3, 8001208 <read_ADC+0x218>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fb90 	bl	800084c <__aeabi_ddiv>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4618      	mov	r0, r3
 8001132:	4621      	mov	r1, r4
 8001134:	f7ff fd58 	bl	8000be8 <__aeabi_d2f>
 8001138:	4602      	mov	r2, r0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3310      	adds	r3, #16
 800113e:	ee07 2a90 	vmov	s15, r2
 8001142:	eef1 7a67 	vneg.f32	s15, s15
 8001146:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <read_ADC+0x238>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3314      	adds	r3, #20
 8001162:	edd7 7a02 	vldr	s15, [r7, #8]
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <read_ADC+0x238>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800117a:	edd7 7a03 	vldr	s15, [r7, #12]
 800117e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3318      	adds	r3, #24
 8001186:	edd7 7a02 	vldr	s15, [r7, #8]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <read_ADC+0x238>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	ee17 0a90 	vmov	r0, s15
 80011aa:	f7ff f9cd 	bl	8000548 <__aeabi_f2d>
 80011ae:	a318      	add	r3, pc, #96	; (adr r3, 8001210 <read_ADC+0x220>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff f868 	bl	8000288 <__aeabi_dsub>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4618      	mov	r0, r3
 80011be:	4621      	mov	r1, r4
 80011c0:	a315      	add	r3, pc, #84	; (adr r3, 8001218 <read_ADC+0x228>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fb41 	bl	800084c <__aeabi_ddiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <read_ADC+0x240>)
 80011d8:	f7ff f858 	bl	800028c <__adddf3>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4619      	mov	r1, r3
 80011e2:	4622      	mov	r2, r4
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f103 041c 	add.w	r4, r3, #28
 80011ea:	4608      	mov	r0, r1
 80011ec:	4611      	mov	r1, r2
 80011ee:	f7ff fcfb 	bl	8000be8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	6023      	str	r3, [r4, #0]

}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	66666666 	.word	0x66666666
 8001204:	3ffa6666 	.word	0x3ffa6666
 8001208:	4189374c 	.word	0x4189374c
 800120c:	3fb0e560 	.word	0x3fb0e560
 8001210:	851eb852 	.word	0x851eb852
 8001214:	3fe851eb 	.word	0x3fe851eb
 8001218:	47ae147b 	.word	0x47ae147b
 800121c:	3f647ae1 	.word	0x3f647ae1
 8001220:	3a533333 	.word	0x3a533333
 8001224:	409b26ca 	.word	0x409b26ca
 8001228:	20000384 	.word	0x20000384
 800122c:	408f4000 	.word	0x408f4000
 8001230:	40390000 	.word	0x40390000

08001234 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b09b      	sub	sp, #108	; 0x6c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	/* capacity related variables */
	FATFS *pfs;
	DWORD fre_clust;
	uint32_t total, free_space;

	printf("mounting SD card...\n");
 800123e:	4860      	ldr	r0, [pc, #384]	; (80013c0 <init_sd+0x18c>)
 8001240:	f00a fea6 	bl	800bf90 <puts>

	FRESULT ret = f_mount(&fs, SDPath, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	495f      	ldr	r1, [pc, #380]	; (80013c4 <init_sd+0x190>)
 8001248:	485f      	ldr	r0, [pc, #380]	; (80013c8 <init_sd+0x194>)
 800124a:	f009 ff8b 	bl	800b164 <f_mount>
 800124e:	4603      	mov	r3, r0
 8001250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (ret == FR_OK)
 8001254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001258:	2b00      	cmp	r3, #0
 800125a:	d14e      	bne.n	80012fa <init_sd+0xc6>
	{
	  printf("mounted SD card\n");
 800125c:	485b      	ldr	r0, [pc, #364]	; (80013cc <init_sd+0x198>)
 800125e:	f00a fe97 	bl	800bf90 <puts>
	  printf("error: %d\n",ret);
	  return 0;
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 8001262:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800126a:	4619      	mov	r1, r3
 800126c:	4855      	ldr	r0, [pc, #340]	; (80013c4 <init_sd+0x190>)
 800126e:	f00a f86f 	bl	800b350 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	3b02      	subs	r3, #2
 8001278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800127a:	8952      	ldrh	r2, [r2, #10]
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f93f 	bl	8000504 <__aeabi_ui2d>
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <init_sd+0x19c>)
 800128c:	f7ff f9b4 	bl	80005f8 <__aeabi_dmul>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4618      	mov	r0, r3
 8001296:	4621      	mov	r1, r4
 8001298:	f7ff fc86 	bl	8000ba8 <__aeabi_d2uiz>
 800129c:	4603      	mov	r3, r0
 800129e:	663b      	str	r3, [r7, #96]	; 0x60
	printf("SD CARD Total Size: \t%lu\n",total);
 80012a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012a2:	484c      	ldr	r0, [pc, #304]	; (80013d4 <init_sd+0x1a0>)
 80012a4:	f00a fe00 	bl	800bea8 <iprintf>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80012a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012aa:	895b      	ldrh	r3, [r3, #10]
 80012ac:	461a      	mov	r2, r3
 80012ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012b0:	fb03 f302 	mul.w	r3, r3, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f925 	bl	8000504 <__aeabi_ui2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <init_sd+0x19c>)
 80012c0:	f7ff f99a 	bl	80005f8 <__aeabi_dmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fc6c 	bl	8000ba8 <__aeabi_d2uiz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	65fb      	str	r3, [r7, #92]	; 0x5c
	printf("SD CARD Free Space: \t%lu\n",free_space);
 80012d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80012d6:	4840      	ldr	r0, [pc, #256]	; (80013d8 <init_sd+0x1a4>)
 80012d8:	f00a fde6 	bl	800bea8 <iprintf>

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK) {
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4938      	ldr	r1, [pc, #224]	; (80013c4 <init_sd+0x190>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f009 ff84 	bl	800b1f0 <f_opendir>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <init_sd+0x1a8>)
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <init_sd+0x1a8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d157      	bne.n	80013a8 <init_sd+0x174>
 80012f8:	e043      	b.n	8001382 <init_sd+0x14e>
	  printf("no SD connection established\n");
 80012fa:	4839      	ldr	r0, [pc, #228]	; (80013e0 <init_sd+0x1ac>)
 80012fc:	f00a fe48 	bl	800bf90 <puts>
	  printf("error: %d\n",ret);
 8001300:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001304:	4619      	mov	r1, r3
 8001306:	4837      	ldr	r0, [pc, #220]	; (80013e4 <init_sd+0x1b0>)
 8001308:	f00a fdce 	bl	800bea8 <iprintf>
	  return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e052      	b.n	80013b6 <init_sd+0x182>
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
				fn = Finfo.fname;
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	3309      	adds	r3, #9
 8001316:	65bb      	str	r3, [r7, #88]	; 0x58

				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 8001318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b46      	cmp	r3, #70	; 0x46
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2da      	uxtb	r2, r3
 8001326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001328:	3301      	adds	r3, #1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b4c      	cmp	r3, #76	; 0x4c
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4013      	ands	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <init_sd+0x11a>
				{
					printf("found flight log: %s \n",fn);
 800133e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001340:	4829      	ldr	r0, [pc, #164]	; (80013e8 <init_sd+0x1b4>)
 8001342:	f00a fdb1 	bl	800bea8 <iprintf>
					*file_count ++;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3302      	adds	r3, #2
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	e019      	b.n	8001382 <init_sd+0x14e>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 800134e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b4c      	cmp	r3, #76	; 0x4c
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2da      	uxtb	r2, r3
 800135c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800135e:	3301      	adds	r3, #1
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b4f      	cmp	r3, #79	; 0x4f
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <init_sd+0x14e>
				{
					printf("found log file: %s \n",fn);
 8001374:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001376:	481d      	ldr	r0, [pc, #116]	; (80013ec <init_sd+0x1b8>)
 8001378:	f00a fd96 	bl	800bea8 <iprintf>
					*log_count ++;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3302      	adds	r3, #2
 8001380:	603b      	str	r3, [r7, #0]
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
 8001382:	f107 0208 	add.w	r2, r7, #8
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f009 ffa2 	bl	800b2d6 <f_readdir>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <init_sd+0x1a8>)
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <init_sd+0x1a8>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <init_sd+0x174>
 80013a2:	7c7b      	ldrb	r3, [r7, #17]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1b3      	bne.n	8001310 <init_sd+0xdc>
				}

			}
	}
	printf("\n this is the %hu th flight. \n", *file_count);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <init_sd+0x1bc>)
 80013b0:	f00a fd7a 	bl	800bea8 <iprintf>
	return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	376c      	adds	r7, #108	; 0x6c
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	0800dd10 	.word	0x0800dd10
 80013c4:	20003c24 	.word	0x20003c24
 80013c8:	200003a4 	.word	0x200003a4
 80013cc:	0800dd24 	.word	0x0800dd24
 80013d0:	3fe00000 	.word	0x3fe00000
 80013d4:	0800dd60 	.word	0x0800dd60
 80013d8:	0800dd7c 	.word	0x0800dd7c
 80013dc:	20002410 	.word	0x20002410
 80013e0:	0800dd34 	.word	0x0800dd34
 80013e4:	0800dd54 	.word	0x0800dd54
 80013e8:	0800dd98 	.word	0x0800dd98
 80013ec:	0800ddb0 	.word	0x0800ddb0
 80013f0:	0800ddc8 	.word	0x0800ddc8

080013f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001406:	4b52      	ldr	r3, [pc, #328]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <MX_ADC1_Init+0x160>)
 800140a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <MX_ADC1_Init+0x15c>)
 800140e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001412:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001414:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <MX_ADC1_Init+0x15c>)
 800141c:	2201      	movs	r2, #1
 800141e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001422:	2201      	movs	r2, #1
 8001424:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001430:	2200      	movs	r2, #0
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001436:	4a48      	ldr	r2, [pc, #288]	; (8001558 <MX_ADC1_Init+0x164>)
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143a:	4b45      	ldr	r3, [pc, #276]	; (8001550 <MX_ADC1_Init+0x15c>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001442:	2208      	movs	r2, #8
 8001444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001446:	4b42      	ldr	r3, [pc, #264]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144e:	4b40      	ldr	r3, [pc, #256]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001450:	2201      	movs	r2, #1
 8001452:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001454:	483e      	ldr	r0, [pc, #248]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001456:	f002 fc87 	bl	8003d68 <HAL_ADC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001460:	f000 fb86 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001468:	2301      	movs	r3, #1
 800146a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800146c:	2307      	movs	r3, #7
 800146e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	4619      	mov	r1, r3
 8001474:	4836      	ldr	r0, [pc, #216]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001476:	f002 fe15 	bl	80040a4 <HAL_ADC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001480:	f000 fb76 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001484:	2301      	movs	r3, #1
 8001486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001488:	2302      	movs	r3, #2
 800148a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	482f      	ldr	r0, [pc, #188]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001492:	f002 fe07 	bl	80040a4 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800149c:	f000 fb68 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80014a4:	2303      	movs	r3, #3
 80014a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	4619      	mov	r1, r3
 80014ac:	4828      	ldr	r0, [pc, #160]	; (8001550 <MX_ADC1_Init+0x15c>)
 80014ae:	f002 fdf9 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80014b8:	f000 fb5a 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014bc:	230a      	movs	r3, #10
 80014be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4821      	ldr	r0, [pc, #132]	; (8001550 <MX_ADC1_Init+0x15c>)
 80014ca:	f002 fdeb 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80014d4:	f000 fb4c 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014d8:	230b      	movs	r3, #11
 80014da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80014dc:	2305      	movs	r3, #5
 80014de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	481a      	ldr	r0, [pc, #104]	; (8001550 <MX_ADC1_Init+0x15c>)
 80014e6:	f002 fddd 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80014f0:	f000 fb3e 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014f4:	230c      	movs	r3, #12
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80014f8:	2306      	movs	r3, #6
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <MX_ADC1_Init+0x15c>)
 8001502:	f002 fdcf 	bl	80040a4 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800150c:	f000 fb30 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001510:	230d      	movs	r3, #13
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001514:	2307      	movs	r3, #7
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_ADC1_Init+0x15c>)
 800151e:	f002 fdc1 	bl	80040a4 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001528:	f000 fb22 	bl	8001b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800152c:	2310      	movs	r3, #16
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001530:	2308      	movs	r3, #8
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_ADC1_Init+0x15c>)
 800153a:	f002 fdb3 	bl	80040a4 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001544:	f000 fb14 	bl	8001b70 <Error_Handler>
  }

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20003444 	.word	0x20003444
 8001554:	40012000 	.word	0x40012000
 8001558:	0f000001 	.word	0x0f000001

0800155c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a3c      	ldr	r2, [pc, #240]	; (800166c <HAL_ADC_MspInit+0x110>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d171      	bne.n	8001662 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_ADC_MspInit+0x114>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a3a      	ldr	r2, [pc, #232]	; (8001670 <HAL_ADC_MspInit+0x114>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_ADC_MspInit+0x114>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_ADC_MspInit+0x114>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a33      	ldr	r2, [pc, #204]	; (8001670 <HAL_ADC_MspInit+0x114>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b31      	ldr	r3, [pc, #196]	; (8001670 <HAL_ADC_MspInit+0x114>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_ADC_MspInit+0x114>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <HAL_ADC_MspInit+0x114>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_ADC_MspInit+0x114>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015d2:	230f      	movs	r3, #15
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4823      	ldr	r0, [pc, #140]	; (8001674 <HAL_ADC_MspInit+0x118>)
 80015e6:	f003 fced 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80015ea:	2307      	movs	r3, #7
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <HAL_ADC_MspInit+0x11c>)
 80015fe:	f003 fce1 	bl	8004fc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_ADC_MspInit+0x120>)
 8001604:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_ADC_MspInit+0x124>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_ADC_MspInit+0x120>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_ADC_MspInit+0x120>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_ADC_MspInit+0x120>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_ADC_MspInit+0x120>)
 800161c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001620:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_ADC_MspInit+0x120>)
 8001624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001628:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_ADC_MspInit+0x120>)
 800162c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001630:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_ADC_MspInit+0x120>)
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_ADC_MspInit+0x120>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_ADC_MspInit+0x120>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <HAL_ADC_MspInit+0x120>)
 8001648:	f003 f8de 	bl	8004808 <HAL_DMA_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001652:	f000 fa8d 	bl	8001b70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_ADC_MspInit+0x120>)
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_ADC_MspInit+0x120>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40012000 	.word	0x40012000
 8001670:	40023800 	.word	0x40023800
 8001674:	40020800 	.word	0x40020800
 8001678:	40020000 	.word	0x40020000
 800167c:	2000348c 	.word	0x2000348c
 8001680:	40026410 	.word	0x40026410

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_DMA_Init+0x5c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <MX_DMA_Init+0x5c>)
 8001694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_DMA_Init+0x5c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2038      	movs	r0, #56	; 0x38
 80016ac:	f003 f875 	bl	800479a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016b0:	2038      	movs	r0, #56	; 0x38
 80016b2:	f003 f88e 	bl	80047d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	203b      	movs	r0, #59	; 0x3b
 80016bc:	f003 f86d 	bl	800479a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016c0:	203b      	movs	r0, #59	; 0x3b
 80016c2:	f003 f886 	bl	80047d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2045      	movs	r0, #69	; 0x45
 80016cc:	f003 f865 	bl	800479a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016d0:	2045      	movs	r0, #69	; 0x45
 80016d2:	f003 f87e 	bl	80047d2 <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b64      	ldr	r3, [pc, #400]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a63      	ldr	r2, [pc, #396]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001704:	f043 0310 	orr.w	r3, r3, #16
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b61      	ldr	r3, [pc, #388]	; (8001890 <MX_GPIO_Init+0x1ac>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <MX_GPIO_Init+0x1ac>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a5c      	ldr	r2, [pc, #368]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b56      	ldr	r3, [pc, #344]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a55      	ldr	r2, [pc, #340]	; (8001890 <MX_GPIO_Init+0x1ac>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b4f      	ldr	r3, [pc, #316]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b48      	ldr	r3, [pc, #288]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a47      	ldr	r2, [pc, #284]	; (8001890 <MX_GPIO_Init+0x1ac>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b45      	ldr	r3, [pc, #276]	; (8001890 <MX_GPIO_Init+0x1ac>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2110      	movs	r1, #16
 800178a:	4842      	ldr	r0, [pc, #264]	; (8001894 <MX_GPIO_Init+0x1b0>)
 800178c:	f003 fdcc 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2120      	movs	r1, #32
 8001794:	4840      	ldr	r0, [pc, #256]	; (8001898 <MX_GPIO_Init+0x1b4>)
 8001796:	f003 fdc7 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 800179a:	2200      	movs	r2, #0
 800179c:	f64f 7180 	movw	r1, #65408	; 0xff80
 80017a0:	483e      	ldr	r0, [pc, #248]	; (800189c <MX_GPIO_Init+0x1b8>)
 80017a2:	f003 fdc1 	bl	8005328 <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80017ac:	483c      	ldr	r0, [pc, #240]	; (80018a0 <MX_GPIO_Init+0x1bc>)
 80017ae:	f003 fdbb 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 80017b2:	2308      	movs	r3, #8
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4835      	ldr	r0, [pc, #212]	; (800189c <MX_GPIO_Init+0x1b8>)
 80017c6:	f003 fbfd 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 80017ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	482e      	ldr	r0, [pc, #184]	; (8001898 <MX_GPIO_Init+0x1b4>)
 80017e0:	f003 fbf0 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80017e4:	2310      	movs	r3, #16
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4826      	ldr	r0, [pc, #152]	; (8001894 <MX_GPIO_Init+0x1b0>)
 80017fc:	f003 fbe2 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001800:	2320      	movs	r3, #32
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4820      	ldr	r0, [pc, #128]	; (8001898 <MX_GPIO_Init+0x1b4>)
 8001818:	f003 fbd4 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 800181c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001820:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <MX_GPIO_Init+0x1b8>)
 8001836:	f003 fbc5 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 800183a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4813      	ldr	r0, [pc, #76]	; (80018a0 <MX_GPIO_Init+0x1bc>)
 8001854:	f003 fbb6 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8001858:	2301      	movs	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_GPIO_Init+0x1c0>)
 800186c:	f003 fbaa 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8001870:	2310      	movs	r3, #16
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MX_GPIO_Init+0x1bc>)
 8001884:	f003 fb9e 	bl	8004fc4 <HAL_GPIO_Init>

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020800 	.word	0x40020800
 800189c:	40021000 	.word	0x40021000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <MX_I2C1_Init+0x54>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_I2C1_Init+0x58>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e6:	f003 fd53 	bl	8005390 <HAL_I2C_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f0:	f000 f93e 	bl	8001b70 <Error_Handler>
  }

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200034ec 	.word	0x200034ec
 80018fc:	40005400 	.word	0x40005400
 8001900:	00061a80 	.word	0x00061a80

08001904 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C2_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <MX_I2C2_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C2_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <MX_I2C2_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C2_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2C2_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_I2C2_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_I2C2_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2C2_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2C2_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2C2_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2C2_Init+0x50>)
 8001942:	f003 fd25 	bl	8005390 <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800194c:	f000 f910 	bl	8001b70 <Error_Handler>
  }

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20003540 	.word	0x20003540
 8001958:	40005800 	.word	0x40005800
 800195c:	000186a0 	.word	0x000186a0

08001960 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_I2C_MspInit+0xe8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12c      	bne.n	80019dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199e:	23c0      	movs	r3, #192	; 0xc0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	2312      	movs	r3, #18
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ae:	2304      	movs	r3, #4
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <HAL_I2C_MspInit+0xf0>)
 80019ba:	f003 fb03 	bl	8004fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 80019c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80019da:	e031      	b.n	8001a40 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_I2C_MspInit+0xf4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12c      	bne.n	8001a40 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a14:	2304      	movs	r3, #4
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480c      	ldr	r0, [pc, #48]	; (8001a50 <HAL_I2C_MspInit+0xf0>)
 8001a20:	f003 fad0 	bl	8004fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 8001a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_I2C_MspInit+0xec>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40005800 	.word	0x40005800

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5c:	f002 f8f0 	bl	8003c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a60:	f000 f81c 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a64:	f7ff fe3e 	bl	80016e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a68:	f7ff fe0c 	bl	8001684 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a6c:	f7ff ff1c 	bl	80018a8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001a70:	f000 fcb4 	bl	80023dc <MX_SPI2_Init>
  MX_ADC1_Init();
 8001a74:	f7ff fcbe 	bl	80013f4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001a78:	f7ff ff44 	bl	8001904 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001a7c:	f000 fb70 	bl	8002160 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001a80:	f000 fc76 	bl	8002370 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a84:	f007 fda4 	bl	80095d0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8001a88:	f7ff fa7e 	bl	8000f88 <turn_off_HAWKs>
  turn_off_TDs();
 8001a8c:	f7ff fa8e 	bl	8000fac <turn_off_TDs>

  schedulerinit();
 8001a90:	f000 f876 	bl	8001b80 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8001a94:	f000 f8d6 	bl	8001c44 <scheduler>
 8001a98:	e7fc      	b.n	8001a94 <main+0x3c>
	...

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	; 0x50
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0320 	add.w	r3, r7, #32
 8001aa6:	2230      	movs	r2, #48	; 0x30
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f009 fd97 	bl	800b5de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <SystemClock_Config+0xcc>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <SystemClock_Config+0xcc>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <SystemClock_Config+0xcc>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <SystemClock_Config+0xd0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <SystemClock_Config+0xd0>)
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <SystemClock_Config+0xd0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b00:	2310      	movs	r3, #16
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b04:	2302      	movs	r3, #2
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b10:	23a8      	movs	r3, #168	; 0xa8
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	f107 0320 	add.w	r3, r7, #32
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fcf9 	bl	8006518 <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b2c:	f000 f820 	bl	8001b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b30:	230f      	movs	r3, #15
 8001b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2302      	movs	r3, #2
 8001b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 ff52 	bl	80069f8 <HAL_RCC_ClockConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b5a:	f000 f809 	bl	8001b70 <Error_Handler>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3750      	adds	r7, #80	; 0x50
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <schedulerinit>:

uint16_t num_dat_file = 0;
uint16_t num_log_file = 0;
uint8_t SD_state = 0;

void schedulerinit () {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	ms5607_init(&BARO1);
 8001b84:	4823      	ldr	r0, [pc, #140]	; (8001c14 <schedulerinit+0x94>)
 8001b86:	f001 fb99 	bl	80032bc <ms5607_init>
	ms5607_init(&BARO2);
 8001b8a:	4823      	ldr	r0, [pc, #140]	; (8001c18 <schedulerinit+0x98>)
 8001b8c:	f001 fb96 	bl	80032bc <ms5607_init>
	sht31_init(&TEMP);
 8001b90:	4822      	ldr	r0, [pc, #136]	; (8001c1c <schedulerinit+0x9c>)
 8001b92:	f001 ff3b 	bl	8003a0c <sht31_init>
	icm20601_init(&IMU1);
 8001b96:	4822      	ldr	r0, [pc, #136]	; (8001c20 <schedulerinit+0xa0>)
 8001b98:	f001 f8e7 	bl	8002d6a <icm20601_init>
	icm20601_init(&IMU2);
 8001b9c:	4821      	ldr	r0, [pc, #132]	; (8001c24 <schedulerinit+0xa4>)
 8001b9e:	f001 f8e4 	bl	8002d6a <icm20601_init>
	h3l_init(&ACCEL);
 8001ba2:	4821      	ldr	r0, [pc, #132]	; (8001c28 <schedulerinit+0xa8>)
 8001ba4:	f000 fe18 	bl	80027d8 <h3l_init>
	init_ADC();
 8001ba8:	f7ff fa12 	bl	8000fd0 <init_ADC>

	turn_on(&STAT);
 8001bac:	481f      	ldr	r0, [pc, #124]	; (8001c2c <schedulerinit+0xac>)
 8001bae:	f001 fb65 	bl	800327c <turn_on>
	HAL_Delay(300);
 8001bb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bb6:	f002 f8b5 	bl	8003d24 <HAL_Delay>
	turn_on(&SAVE);
 8001bba:	481d      	ldr	r0, [pc, #116]	; (8001c30 <schedulerinit+0xb0>)
 8001bbc:	f001 fb5e 	bl	800327c <turn_on>
	HAL_Delay(300);
 8001bc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bc4:	f002 f8ae 	bl	8003d24 <HAL_Delay>
	turn_on(&PRGM);
 8001bc8:	481a      	ldr	r0, [pc, #104]	; (8001c34 <schedulerinit+0xb4>)
 8001bca:	f001 fb57 	bl	800327c <turn_on>
	HAL_Delay(300);
 8001bce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bd2:	f002 f8a7 	bl	8003d24 <HAL_Delay>

	turn_off(&STAT);
 8001bd6:	4815      	ldr	r0, [pc, #84]	; (8001c2c <schedulerinit+0xac>)
 8001bd8:	f001 fb60 	bl	800329c <turn_off>
	turn_off(&SAVE);
 8001bdc:	4814      	ldr	r0, [pc, #80]	; (8001c30 <schedulerinit+0xb0>)
 8001bde:	f001 fb5d 	bl	800329c <turn_off>
	turn_off(&PRGM);
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <schedulerinit+0xb4>)
 8001be4:	f001 fb5a 	bl	800329c <turn_off>

	SD_state = init_sd(&num_dat_file, &num_log_file);
 8001be8:	4913      	ldr	r1, [pc, #76]	; (8001c38 <schedulerinit+0xb8>)
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <schedulerinit+0xbc>)
 8001bec:	f7ff fb22 	bl	8001234 <init_sd>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <schedulerinit+0xc0>)
 8001bf6:	701a      	strb	r2, [r3, #0]
	if (SD_state == 1){
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <schedulerinit+0xc0>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d102      	bne.n	8001c06 <schedulerinit+0x86>
		turn_on(&SAVE);
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <schedulerinit+0xb0>)
 8001c02:	f001 fb3b 	bl	800327c <turn_on>
	}

	HAL_Delay(1000);
 8001c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0a:	f002 f88b 	bl	8003d24 <HAL_Delay>

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000090 	.word	0x20000090
 8001c18:	200000b0 	.word	0x200000b0
 8001c1c:	200000f0 	.word	0x200000f0
 8001c20:	200000d0 	.word	0x200000d0
 8001c24:	200000e0 	.word	0x200000e0
 8001c28:	20000100 	.word	0x20000100
 8001c2c:	20000070 	.word	0x20000070
 8001c30:	20000078 	.word	0x20000078
 8001c34:	20000080 	.word	0x20000080
 8001c38:	2000033e 	.word	0x2000033e
 8001c3c:	2000033c 	.word	0x2000033c
 8001c40:	20000340 	.word	0x20000340

08001c44 <scheduler>:

void scheduler (){
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af02      	add	r7, sp, #8

	tick = HAL_GetTick();
 8001c4a:	f002 f85f 	bl	8003d0c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <scheduler+0xf4>)
 8001c52:	601a      	str	r2, [r3, #0]

	// TASK LED
	if(tick >= getNextExecution(&RDY_TASK)){
 8001c54:	4839      	ldr	r0, [pc, #228]	; (8001d3c <scheduler+0xf8>)
 8001c56:	f000 fa73 	bl	8002140 <getNextExecution>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <scheduler+0xf4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d807      	bhi.n	8001c74 <scheduler+0x30>
		RDY_TASK.last_call = HAL_GetTick();
 8001c64:	f002 f852 	bl	8003d0c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <scheduler+0xf8>)
 8001c6c:	601a      	str	r2, [r3, #0]
		toggle(&RDY);
 8001c6e:	4834      	ldr	r0, [pc, #208]	; (8001d40 <scheduler+0xfc>)
 8001c70:	f001 faf4 	bl	800325c <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 8001c74:	4833      	ldr	r0, [pc, #204]	; (8001d44 <scheduler+0x100>)
 8001c76:	f000 fa63 	bl	8002140 <getNextExecution>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <scheduler+0xf4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d807      	bhi.n	8001c94 <scheduler+0x50>
		SAVE_TASK.last_call = HAL_GetTick();
 8001c84:	f002 f842 	bl	8003d0c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <scheduler+0x100>)
 8001c8c:	601a      	str	r2, [r3, #0]
		toggle(&SAVE);
 8001c8e:	482e      	ldr	r0, [pc, #184]	; (8001d48 <scheduler+0x104>)
 8001c90:	f001 fae4 	bl	800325c <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 8001c94:	482d      	ldr	r0, [pc, #180]	; (8001d4c <scheduler+0x108>)
 8001c96:	f000 fa53 	bl	8002140 <getNextExecution>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <scheduler+0xf4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d807      	bhi.n	8001cb4 <scheduler+0x70>
		STAT_TASK.last_call = HAL_GetTick();
 8001ca4:	f002 f832 	bl	8003d0c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <scheduler+0x108>)
 8001cac:	601a      	str	r2, [r3, #0]
		toggle(&STAT);
 8001cae:	4828      	ldr	r0, [pc, #160]	; (8001d50 <scheduler+0x10c>)
 8001cb0:	f001 fad4 	bl	800325c <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 8001cb4:	4827      	ldr	r0, [pc, #156]	; (8001d54 <scheduler+0x110>)
 8001cb6:	f000 fa43 	bl	8002140 <getNextExecution>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <scheduler+0xf4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d807      	bhi.n	8001cd4 <scheduler+0x90>
		PRGM_TASK.last_call = HAL_GetTick();
 8001cc4:	f002 f822 	bl	8003d0c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <scheduler+0x110>)
 8001ccc:	601a      	str	r2, [r3, #0]
		toggle(&PRGM);
 8001cce:	4822      	ldr	r0, [pc, #136]	; (8001d58 <scheduler+0x114>)
 8001cd0:	f001 fac4 	bl	800325c <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 8001cd4:	4821      	ldr	r0, [pc, #132]	; (8001d5c <scheduler+0x118>)
 8001cd6:	f000 fa33 	bl	8002140 <getNextExecution>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <scheduler+0xf4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d809      	bhi.n	8001cf8 <scheduler+0xb4>
		SHT_TASK.last_call = HAL_GetTick();
 8001ce4:	f002 f812 	bl	8003d0c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <scheduler+0x118>)
 8001cec:	601a      	str	r2, [r3, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <scheduler+0x11c>)
 8001cf0:	491c      	ldr	r1, [pc, #112]	; (8001d64 <scheduler+0x120>)
 8001cf2:	481d      	ldr	r0, [pc, #116]	; (8001d68 <scheduler+0x124>)
 8001cf4:	f001 fee0 	bl	8003ab8 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 8001cf8:	481c      	ldr	r0, [pc, #112]	; (8001d6c <scheduler+0x128>)
 8001cfa:	f000 fa21 	bl	8002140 <getNextExecution>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <scheduler+0xf4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d856      	bhi.n	8001db6 <scheduler+0x172>

		switch(BARO_TASK.stage){
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <scheduler+0x128>)
 8001d0a:	7a1b      	ldrb	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <scheduler+0xd2>
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d035      	beq.n	8001d80 <scheduler+0x13c>
 8001d14:	e04f      	b.n	8001db6 <scheduler+0x172>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 8001d16:	4916      	ldr	r1, [pc, #88]	; (8001d70 <scheduler+0x12c>)
 8001d18:	4816      	ldr	r0, [pc, #88]	; (8001d74 <scheduler+0x130>)
 8001d1a:	f001 fb7d 	bl	8003418 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 8001d1e:	4916      	ldr	r1, [pc, #88]	; (8001d78 <scheduler+0x134>)
 8001d20:	4816      	ldr	r0, [pc, #88]	; (8001d7c <scheduler+0x138>)
 8001d22:	f001 fb79 	bl	8003418 <ms5607_prep_pressure>
				BARO_TASK.last_call = HAL_GetTick();
 8001d26:	f001 fff1 	bl	8003d0c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <scheduler+0x128>)
 8001d2e:	601a      	str	r2, [r3, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <scheduler+0x128>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	721a      	strb	r2, [r3, #8]
				break;
 8001d36:	e03e      	b.n	8001db6 <scheduler+0x172>
 8001d38:	200039bc 	.word	0x200039bc
 8001d3c:	20000030 	.word	0x20000030
 8001d40:	20000088 	.word	0x20000088
 8001d44:	20000050 	.word	0x20000050
 8001d48:	20000078 	.word	0x20000078
 8001d4c:	20000040 	.word	0x20000040
 8001d50:	20000070 	.word	0x20000070
 8001d54:	20000060 	.word	0x20000060
 8001d58:	20000080 	.word	0x20000080
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	200035b8 	.word	0x200035b8
 8001d64:	200039e8 	.word	0x200039e8
 8001d68:	200000f0 	.word	0x200000f0
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	200039c0 	.word	0x200039c0
 8001d74:	20000090 	.word	0x20000090
 8001d78:	20003594 	.word	0x20003594
 8001d7c:	200000b0 	.word	0x200000b0
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 8001d80:	49b7      	ldr	r1, [pc, #732]	; (8002060 <scheduler+0x41c>)
 8001d82:	48b8      	ldr	r0, [pc, #736]	; (8002064 <scheduler+0x420>)
 8001d84:	f001 fb91 	bl	80034aa <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 8001d88:	49b7      	ldr	r1, [pc, #732]	; (8002068 <scheduler+0x424>)
 8001d8a:	48b8      	ldr	r0, [pc, #736]	; (800206c <scheduler+0x428>)
 8001d8c:	f001 fb8d 	bl	80034aa <ms5607_read_pressure>
				BARO_TASK.last_call = HAL_GetTick();
 8001d90:	f001 ffbc 	bl	8003d0c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4bb6      	ldr	r3, [pc, #728]	; (8002070 <scheduler+0x42c>)
 8001d98:	601a      	str	r2, [r3, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 8001d9a:	4ab6      	ldr	r2, [pc, #728]	; (8002074 <scheduler+0x430>)
 8001d9c:	49b6      	ldr	r1, [pc, #728]	; (8002078 <scheduler+0x434>)
 8001d9e:	48b1      	ldr	r0, [pc, #708]	; (8002064 <scheduler+0x420>)
 8001da0:	f001 fbce 	bl	8003540 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 8001da4:	4ab5      	ldr	r2, [pc, #724]	; (800207c <scheduler+0x438>)
 8001da6:	49b6      	ldr	r1, [pc, #728]	; (8002080 <scheduler+0x43c>)
 8001da8:	48b0      	ldr	r0, [pc, #704]	; (800206c <scheduler+0x428>)
 8001daa:	f001 fbc9 	bl	8003540 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 8001dae:	4bb0      	ldr	r3, [pc, #704]	; (8002070 <scheduler+0x42c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	721a      	strb	r2, [r3, #8]
				break;
 8001db4:	bf00      	nop
		}
	}

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 8001db6:	48b3      	ldr	r0, [pc, #716]	; (8002084 <scheduler+0x440>)
 8001db8:	f000 f9c2 	bl	8002140 <getNextExecution>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4bb2      	ldr	r3, [pc, #712]	; (8002088 <scheduler+0x444>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d80c      	bhi.n	8001de0 <scheduler+0x19c>
		IMU_TASK.last_call = HAL_GetTick();
 8001dc6:	f001 ffa1 	bl	8003d0c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4bad      	ldr	r3, [pc, #692]	; (8002084 <scheduler+0x440>)
 8001dce:	601a      	str	r2, [r3, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 8001dd0:	49ae      	ldr	r1, [pc, #696]	; (800208c <scheduler+0x448>)
 8001dd2:	48af      	ldr	r0, [pc, #700]	; (8002090 <scheduler+0x44c>)
 8001dd4:	f001 f96c 	bl	80030b0 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 8001dd8:	49ae      	ldr	r1, [pc, #696]	; (8002094 <scheduler+0x450>)
 8001dda:	48af      	ldr	r0, [pc, #700]	; (8002098 <scheduler+0x454>)
 8001ddc:	f001 f968 	bl	80030b0 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 8001de0:	48ae      	ldr	r0, [pc, #696]	; (800209c <scheduler+0x458>)
 8001de2:	f000 f9ad 	bl	8002140 <getNextExecution>
 8001de6:	4602      	mov	r2, r0
 8001de8:	4ba7      	ldr	r3, [pc, #668]	; (8002088 <scheduler+0x444>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d80c      	bhi.n	8001e0a <scheduler+0x1c6>
		ACCEL_TASK.last_call = HAL_GetTick();
 8001df0:	f001 ff8c 	bl	8003d0c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4ba9      	ldr	r3, [pc, #676]	; (800209c <scheduler+0x458>)
 8001df8:	601a      	str	r2, [r3, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 8001dfa:	49a9      	ldr	r1, [pc, #676]	; (80020a0 <scheduler+0x45c>)
 8001dfc:	48a9      	ldr	r0, [pc, #676]	; (80020a4 <scheduler+0x460>)
 8001dfe:	f000 fd35 	bl	800286c <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 8001e02:	49a9      	ldr	r1, [pc, #676]	; (80020a8 <scheduler+0x464>)
 8001e04:	48a7      	ldr	r0, [pc, #668]	; (80020a4 <scheduler+0x460>)
 8001e06:	f000 fe2f 	bl	8002a68 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 8001e0a:	48a8      	ldr	r0, [pc, #672]	; (80020ac <scheduler+0x468>)
 8001e0c:	f000 f998 	bl	8002140 <getNextExecution>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b9d      	ldr	r3, [pc, #628]	; (8002088 <scheduler+0x444>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d867      	bhi.n	8001eea <scheduler+0x2a6>
		ADC_TASK.last_call = HAL_GetTick();
 8001e1a:	f001 ff77 	bl	8003d0c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4ba2      	ldr	r3, [pc, #648]	; (80020ac <scheduler+0x468>)
 8001e22:	601a      	str	r2, [r3, #0]
		read_ADC(adc_dat);
 8001e24:	48a2      	ldr	r0, [pc, #648]	; (80020b0 <scheduler+0x46c>)
 8001e26:	f7ff f8e3 	bl	8000ff0 <read_ADC>
		printf("1 %4.2f V \n", adc_dat[0]);
 8001e2a:	4ba1      	ldr	r3, [pc, #644]	; (80020b0 <scheduler+0x46c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb8a 	bl	8000548 <__aeabi_f2d>
 8001e34:	4603      	mov	r3, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	489d      	ldr	r0, [pc, #628]	; (80020b4 <scheduler+0x470>)
 8001e3e:	f00a f833 	bl	800bea8 <iprintf>
		printf("2 %4.2f V \n", adc_dat[1]);
 8001e42:	4b9b      	ldr	r3, [pc, #620]	; (80020b0 <scheduler+0x46c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb7e 	bl	8000548 <__aeabi_f2d>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	461a      	mov	r2, r3
 8001e52:	4623      	mov	r3, r4
 8001e54:	4898      	ldr	r0, [pc, #608]	; (80020b8 <scheduler+0x474>)
 8001e56:	f00a f827 	bl	800bea8 <iprintf>
		printf("3 %4.2f V \n", adc_dat[2]);
 8001e5a:	4b95      	ldr	r3, [pc, #596]	; (80020b0 <scheduler+0x46c>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb72 	bl	8000548 <__aeabi_f2d>
 8001e64:	4603      	mov	r3, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	4893      	ldr	r0, [pc, #588]	; (80020bc <scheduler+0x478>)
 8001e6e:	f00a f81b 	bl	800bea8 <iprintf>
		printf("4 %4.2f V \n", adc_dat[3]);
 8001e72:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <scheduler+0x46c>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb66 	bl	8000548 <__aeabi_f2d>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	461a      	mov	r2, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	488e      	ldr	r0, [pc, #568]	; (80020c0 <scheduler+0x47c>)
 8001e86:	f00a f80f 	bl	800bea8 <iprintf>
		printf("5 %4.2f V \n", adc_dat[4]);
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <scheduler+0x46c>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb5a 	bl	8000548 <__aeabi_f2d>
 8001e94:	4603      	mov	r3, r0
 8001e96:	460c      	mov	r4, r1
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	4889      	ldr	r0, [pc, #548]	; (80020c4 <scheduler+0x480>)
 8001e9e:	f00a f803 	bl	800bea8 <iprintf>
		printf("6 %4.2f V \n", adc_dat[5]);
 8001ea2:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <scheduler+0x46c>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb4e 	bl	8000548 <__aeabi_f2d>
 8001eac:	4603      	mov	r3, r0
 8001eae:	460c      	mov	r4, r1
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	4884      	ldr	r0, [pc, #528]	; (80020c8 <scheduler+0x484>)
 8001eb6:	f009 fff7 	bl	800bea8 <iprintf>
		printf("7 %4.2f V \n", adc_dat[6]);
 8001eba:	4b7d      	ldr	r3, [pc, #500]	; (80020b0 <scheduler+0x46c>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb42 	bl	8000548 <__aeabi_f2d>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4623      	mov	r3, r4
 8001ecc:	487f      	ldr	r0, [pc, #508]	; (80020cc <scheduler+0x488>)
 8001ece:	f009 ffeb 	bl	800bea8 <iprintf>
		printf("8 %4.2f C \n", adc_dat[7]);
 8001ed2:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <scheduler+0x46c>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb36 	bl	8000548 <__aeabi_f2d>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	487a      	ldr	r0, [pc, #488]	; (80020d0 <scheduler+0x48c>)
 8001ee6:	f009 ffdf 	bl	800bea8 <iprintf>
	// TASK LOGGING
	// .........



	printf("tick: %ld \n",tick);
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <scheduler+0x444>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4878      	ldr	r0, [pc, #480]	; (80020d4 <scheduler+0x490>)
 8001ef2:	f009 ffd9 	bl	800bea8 <iprintf>
	printf("p1 = %4.2f bar and t1 = %4.2f C \n",p1,t_p1);
 8001ef6:	4b60      	ldr	r3, [pc, #384]	; (8002078 <scheduler+0x434>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb24 	bl	8000548 <__aeabi_f2d>
 8001f00:	4605      	mov	r5, r0
 8001f02:	460e      	mov	r6, r1
 8001f04:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <scheduler+0x430>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb1d 	bl	8000548 <__aeabi_f2d>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	e9cd 3400 	strd	r3, r4, [sp]
 8001f16:	462a      	mov	r2, r5
 8001f18:	4633      	mov	r3, r6
 8001f1a:	486f      	ldr	r0, [pc, #444]	; (80020d8 <scheduler+0x494>)
 8001f1c:	f009 ffc4 	bl	800bea8 <iprintf>
	printf("p2 = %4.2f bar and t2 = %4.2f C \n",p2,t_p2);
 8001f20:	4b57      	ldr	r3, [pc, #348]	; (8002080 <scheduler+0x43c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb0f 	bl	8000548 <__aeabi_f2d>
 8001f2a:	4605      	mov	r5, r0
 8001f2c:	460e      	mov	r6, r1
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <scheduler+0x438>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fb08 	bl	8000548 <__aeabi_f2d>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	e9cd 3400 	strd	r3, r4, [sp]
 8001f40:	462a      	mov	r2, r5
 8001f42:	4633      	mov	r3, r6
 8001f44:	4865      	ldr	r0, [pc, #404]	; (80020dc <scheduler+0x498>)
 8001f46:	f009 ffaf 	bl	800bea8 <iprintf>
	printf("T = %4.2f C and H = %4.2f perc \n",t_val[0],t_val[1]);
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <scheduler+0x49c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fafa 	bl	8000548 <__aeabi_f2d>
 8001f54:	4605      	mov	r5, r0
 8001f56:	460e      	mov	r6, r1
 8001f58:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <scheduler+0x49c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe faf3 	bl	8000548 <__aeabi_f2d>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	e9cd 3400 	strd	r3, r4, [sp]
 8001f6a:	462a      	mov	r2, r5
 8001f6c:	4633      	mov	r3, r6
 8001f6e:	485d      	ldr	r0, [pc, #372]	; (80020e4 <scheduler+0x4a0>)
 8001f70:	f009 ff9a 	bl	800bea8 <iprintf>
	printf("IMU1 T: %4.2f C \n", accel1_val[0]);
 8001f74:	4b45      	ldr	r3, [pc, #276]	; (800208c <scheduler+0x448>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fae5 	bl	8000548 <__aeabi_f2d>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	461a      	mov	r2, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	4858      	ldr	r0, [pc, #352]	; (80020e8 <scheduler+0x4a4>)
 8001f88:	f009 ff8e 	bl	800bea8 <iprintf>
	printf("IMU1 ax: %4.2f m/s2 \n", accel1_val[1]);
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <scheduler+0x448>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fad9 	bl	8000548 <__aeabi_f2d>
 8001f96:	4603      	mov	r3, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	4853      	ldr	r0, [pc, #332]	; (80020ec <scheduler+0x4a8>)
 8001fa0:	f009 ff82 	bl	800bea8 <iprintf>
	printf("IMU1 ay: %4.2f m/s2 \n", accel1_val[2]);
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <scheduler+0x448>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe facd 	bl	8000548 <__aeabi_f2d>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	484e      	ldr	r0, [pc, #312]	; (80020f0 <scheduler+0x4ac>)
 8001fb8:	f009 ff76 	bl	800bea8 <iprintf>
	printf("IMU1 az: %4.2f m/s2 \n", accel1_val[3]);
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <scheduler+0x448>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fac1 	bl	8000548 <__aeabi_f2d>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4623      	mov	r3, r4
 8001fce:	4849      	ldr	r0, [pc, #292]	; (80020f4 <scheduler+0x4b0>)
 8001fd0:	f009 ff6a 	bl	800bea8 <iprintf>
	printf("IMU2 T: %4.2f C \n", accel2_val[0]);
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <scheduler+0x450>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fab5 	bl	8000548 <__aeabi_f2d>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	4844      	ldr	r0, [pc, #272]	; (80020f8 <scheduler+0x4b4>)
 8001fe8:	f009 ff5e 	bl	800bea8 <iprintf>
	printf("IMU2 ax: %4.2f m/s2 \n", accel2_val[1]);
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <scheduler+0x450>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe faa9 	bl	8000548 <__aeabi_f2d>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4623      	mov	r3, r4
 8001ffe:	483f      	ldr	r0, [pc, #252]	; (80020fc <scheduler+0x4b8>)
 8002000:	f009 ff52 	bl	800bea8 <iprintf>
	printf("IMU2 ay: %4.2f m/s2 \n", accel2_val[2]);
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <scheduler+0x450>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa9d 	bl	8000548 <__aeabi_f2d>
 800200e:	4603      	mov	r3, r0
 8002010:	460c      	mov	r4, r1
 8002012:	461a      	mov	r2, r3
 8002014:	4623      	mov	r3, r4
 8002016:	483a      	ldr	r0, [pc, #232]	; (8002100 <scheduler+0x4bc>)
 8002018:	f009 ff46 	bl	800bea8 <iprintf>
	printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <scheduler+0x450>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa91 	bl	8000548 <__aeabi_f2d>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	461a      	mov	r2, r3
 800202c:	4623      	mov	r3, r4
 800202e:	4835      	ldr	r0, [pc, #212]	; (8002104 <scheduler+0x4c0>)
 8002030:	f009 ff3a 	bl	800bea8 <iprintf>
	printf("ACC ax: %4.2f m/s2 \n", accel[0]);
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <scheduler+0x464>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa85 	bl	8000548 <__aeabi_f2d>
 800203e:	4603      	mov	r3, r0
 8002040:	460c      	mov	r4, r1
 8002042:	461a      	mov	r2, r3
 8002044:	4623      	mov	r3, r4
 8002046:	4830      	ldr	r0, [pc, #192]	; (8002108 <scheduler+0x4c4>)
 8002048:	f009 ff2e 	bl	800bea8 <iprintf>
	printf("ACC ay: %4.2f m/s2 \n", accel[1]);
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <scheduler+0x464>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa79 	bl	8000548 <__aeabi_f2d>
 8002056:	4603      	mov	r3, r0
 8002058:	460c      	mov	r4, r1
 800205a:	461a      	mov	r2, r3
 800205c:	4623      	mov	r3, r4
 800205e:	e055      	b.n	800210c <scheduler+0x4c8>
 8002060:	200039c0 	.word	0x200039c0
 8002064:	20000090 	.word	0x20000090
 8002068:	20003594 	.word	0x20003594
 800206c:	200000b0 	.word	0x200000b0
 8002070:	20000000 	.word	0x20000000
 8002074:	20000334 	.word	0x20000334
 8002078:	2000032c 	.word	0x2000032c
 800207c:	20000338 	.word	0x20000338
 8002080:	20000330 	.word	0x20000330
 8002084:	2000030c 	.word	0x2000030c
 8002088:	200039bc 	.word	0x200039bc
 800208c:	200039f0 	.word	0x200039f0
 8002090:	200000d0 	.word	0x200000d0
 8002094:	200039c4 	.word	0x200039c4
 8002098:	200000e0 	.word	0x200000e0
 800209c:	2000031c 	.word	0x2000031c
 80020a0:	20003598 	.word	0x20003598
 80020a4:	20000100 	.word	0x20000100
 80020a8:	200035ac 	.word	0x200035ac
 80020ac:	20000020 	.word	0x20000020
 80020b0:	20003a08 	.word	0x20003a08
 80020b4:	0800e04c 	.word	0x0800e04c
 80020b8:	0800e058 	.word	0x0800e058
 80020bc:	0800e064 	.word	0x0800e064
 80020c0:	0800e070 	.word	0x0800e070
 80020c4:	0800e07c 	.word	0x0800e07c
 80020c8:	0800e088 	.word	0x0800e088
 80020cc:	0800e094 	.word	0x0800e094
 80020d0:	0800e0a0 	.word	0x0800e0a0
 80020d4:	0800e0ac 	.word	0x0800e0ac
 80020d8:	0800e0b8 	.word	0x0800e0b8
 80020dc:	0800e0dc 	.word	0x0800e0dc
 80020e0:	200039e8 	.word	0x200039e8
 80020e4:	0800e100 	.word	0x0800e100
 80020e8:	0800e124 	.word	0x0800e124
 80020ec:	0800e138 	.word	0x0800e138
 80020f0:	0800e150 	.word	0x0800e150
 80020f4:	0800e168 	.word	0x0800e168
 80020f8:	0800e180 	.word	0x0800e180
 80020fc:	0800e194 	.word	0x0800e194
 8002100:	0800e1ac 	.word	0x0800e1ac
 8002104:	0800e1c4 	.word	0x0800e1c4
 8002108:	0800e1dc 	.word	0x0800e1dc
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <scheduler+0x4f0>)
 800210e:	f009 fecb 	bl	800bea8 <iprintf>
	printf("ACC az: %4.2f m/s2 \n", accel[2]);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <scheduler+0x4f4>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa16 	bl	8000548 <__aeabi_f2d>
 800211c:	4603      	mov	r3, r0
 800211e:	460c      	mov	r4, r1
 8002120:	461a      	mov	r2, r3
 8002122:	4623      	mov	r3, r4
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <scheduler+0x4f8>)
 8002126:	f009 febf 	bl	800bea8 <iprintf>

}
 800212a:	bf00      	nop
 800212c:	3704      	adds	r7, #4
 800212e:	46bd      	mov	sp, r7
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002132:	bf00      	nop
 8002134:	0800e1f4 	.word	0x0800e1f4
 8002138:	200035ac 	.word	0x200035ac
 800213c:	0800e20c 	.word	0x0800e20c

08002140 <getNextExecution>:

uint32_t getNextExecution(task_t * task){
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4413      	add	r3, r2
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_SDIO_SD_Init+0x38>)
 8002166:	4a0d      	ldr	r2, [pc, #52]	; (800219c <MX_SDIO_SD_Init+0x3c>)
 8002168:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_SDIO_SD_Init+0x38>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_SDIO_SD_Init+0x38>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_SDIO_SD_Init+0x38>)
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_SDIO_SD_Init+0x38>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <MX_SDIO_SD_Init+0x38>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <MX_SDIO_SD_Init+0x38>)
 800218a:	2203      	movs	r2, #3
 800218c:	619a      	str	r2, [r3, #24]

}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	20003ae8 	.word	0x20003ae8
 800219c:	40012c00 	.word	0x40012c00

080021a0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a64      	ldr	r2, [pc, #400]	; (8002350 <HAL_SD_MspInit+0x1b0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	f040 80c1 	bne.w	8002346 <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	4b62      	ldr	r3, [pc, #392]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	4a61      	ldr	r2, [pc, #388]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 80021ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d2:	6453      	str	r3, [r2, #68]	; 0x44
 80021d4:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6313      	str	r3, [r2, #48]	; 0x30
 80021f0:	4b58      	ldr	r3, [pc, #352]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	4b54      	ldr	r3, [pc, #336]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4a53      	ldr	r2, [pc, #332]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	6313      	str	r3, [r2, #48]	; 0x30
 800220c:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HAL_SD_MspInit+0x1b4>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002218:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800221c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800222a:	230c      	movs	r3, #12
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4848      	ldr	r0, [pc, #288]	; (8002358 <HAL_SD_MspInit+0x1b8>)
 8002236:	f002 fec5 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800223a:	2304      	movs	r3, #4
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800224a:	230c      	movs	r3, #12
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4841      	ldr	r0, [pc, #260]	; (800235c <HAL_SD_MspInit+0x1bc>)
 8002256:	f002 feb5 	bl	8004fc4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 800225c:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_SD_MspInit+0x1c4>)
 800225e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002260:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 8002262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002266:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 8002276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800227c:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 800227e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002282:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 8002286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800228a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 800228e:	2220      	movs	r2, #32
 8002290:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002298:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 800229a:	2204      	movs	r2, #4
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 80022a0:	2203      	movs	r2, #3
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80022a4:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 80022a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80022ac:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 80022ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80022b4:	482a      	ldr	r0, [pc, #168]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 80022b6:	f002 faa7 	bl	8004808 <HAL_DMA_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80022c0:	f7ff fc56 	bl	8001b70 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a26      	ldr	r2, [pc, #152]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_SD_MspInit+0x1c0>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 80022d2:	4a26      	ldr	r2, [pc, #152]	; (800236c <HAL_SD_MspInit+0x1cc>)
 80022d4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 80022d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022dc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 80022ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 80022f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 80022fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002300:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 8002304:	2220      	movs	r2, #32
 8002306:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 800230a:	2200      	movs	r2, #0
 800230c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 8002310:	2204      	movs	r2, #4
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 8002316:	2203      	movs	r2, #3
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 800231c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 8002324:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800232a:	480f      	ldr	r0, [pc, #60]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 800232c:	f002 fa6c 	bl	8004808 <HAL_DMA_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8002336:	f7ff fc1b 	bl	8001b70 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 800233e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002340:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_SD_MspInit+0x1c8>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002346:	bf00      	nop
 8002348:	3728      	adds	r7, #40	; 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40023800 	.word	0x40023800
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	20003a28 	.word	0x20003a28
 8002364:	40026458 	.word	0x40026458
 8002368:	20003a88 	.word	0x20003a88
 800236c:	400264a0 	.word	0x400264a0

08002370 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <MX_SPI1_Init+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_SPI1_Init+0x64>)
 800237c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_SPI1_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_SPI1_Init+0x64>)
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023bc:	220a      	movs	r2, #10
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023c2:	f005 fe4d 	bl	8008060 <HAL_SPI_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023cc:	f7ff fbd0 	bl	8001b70 <Error_Handler>
  }

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20003bc4 	.word	0x20003bc4
 80023d8:	40013000 	.word	0x40013000

080023dc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <MX_SPI2_Init+0x64>)
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <MX_SPI2_Init+0x68>)
 80023e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_SPI2_Init+0x64>)
 80023e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <MX_SPI2_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <MX_SPI2_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_SPI2_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_SPI2_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_SPI2_Init+0x64>)
 8002408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <MX_SPI2_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <MX_SPI2_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_SPI2_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <MX_SPI2_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_SPI2_Init+0x64>)
 8002428:	220a      	movs	r2, #10
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <MX_SPI2_Init+0x64>)
 800242e:	f005 fe17 	bl	8008060 <HAL_SPI_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002438:	f7ff fb9a 	bl	8001b70 <Error_Handler>
  }

}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20003b6c 	.word	0x20003b6c
 8002444:	40003800 	.word	0x40003800

08002448 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 031c 	add.w	r3, r7, #28
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_SPI_MspInit+0xe8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12c      	bne.n	80024c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_SPI_MspInit+0xec>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_SPI_MspInit+0xec>)
 8002474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_SPI_MspInit+0xec>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_SPI_MspInit+0xec>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a29      	ldr	r2, [pc, #164]	; (8002534 <HAL_SPI_MspInit+0xec>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_SPI_MspInit+0xec>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024a2:	23e0      	movs	r3, #224	; 0xe0
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024b2:	2305      	movs	r3, #5
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	481e      	ldr	r0, [pc, #120]	; (8002538 <HAL_SPI_MspInit+0xf0>)
 80024be:	f002 fd81 	bl	8004fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024c2:	e031      	b.n	8002528 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_SPI_MspInit+0xf4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d12c      	bne.n	8002528 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_SPI_MspInit+0xec>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_SPI_MspInit+0xec>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_SPI_MspInit+0xec>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_SPI_MspInit+0xec>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_SPI_MspInit+0xec>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_SPI_MspInit+0xec>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002506:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002518:	2305      	movs	r3, #5
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	4807      	ldr	r0, [pc, #28]	; (8002540 <HAL_SPI_MspInit+0xf8>)
 8002524:	f002 fd4e 	bl	8004fc4 <HAL_GPIO_Init>
}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40013000 	.word	0x40013000
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000
 800253c:	40003800 	.word	0x40003800
 8002540:	40020400 	.word	0x40020400

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_MspInit+0x4c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_MspInit+0x4c>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <MemManage_Handler+0x4>

080025ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler+0x4>

080025ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f001 fb7c 	bl	8003ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <DMA2_Stream0_IRQHandler+0x10>)
 80025f6:	f002 fa7d 	bl	8004af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000348c 	.word	0x2000348c

08002604 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <DMA2_Stream3_IRQHandler+0x10>)
 800260a:	f002 fa73 	bl	8004af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20003a28 	.word	0x20003a28

08002618 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <DMA2_Stream6_IRQHandler+0x10>)
 800261e:	f002 fa69 	bl	8004af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20003a88 	.word	0x20003a88

0800262c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002634:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002638:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002644:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002648:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800264c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002654:	e000      	b.n	8002658 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002656:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002658:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f9      	beq.n	8002656 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002662:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800266c:	687b      	ldr	r3, [r7, #4]
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e00a      	b.n	80026a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800268c:	f3af 8000 	nop.w
 8002690:	4601      	mov	r1, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	60ba      	str	r2, [r7, #8]
 8002698:	b2ca      	uxtb	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	dbf0      	blt.n	800268c <_read+0x12>
	}

return len;
 80026aa:	687b      	ldr	r3, [r7, #4]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e009      	b.n	80026da <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	60ba      	str	r2, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ffac 	bl	800262c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	dbf1      	blt.n	80026c6 <_write+0x12>
	}
	return len;
 80026e2:	687b      	ldr	r3, [r7, #4]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_close>:

int _close(int file)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	return -1;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002714:	605a      	str	r2, [r3, #4]
	return 0;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_isatty>:

int _isatty(int file)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	return 1;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
	return 0;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <_sbrk+0x50>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <_sbrk+0x16>
		heap_end = &end;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <_sbrk+0x50>)
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <_sbrk+0x54>)
 8002768:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <_sbrk+0x50>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <_sbrk+0x50>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	466a      	mov	r2, sp
 800277a:	4293      	cmp	r3, r2
 800277c:	d907      	bls.n	800278e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800277e:	f008 fef9 	bl	800b574 <__errno>
 8002782:	4602      	mov	r2, r0
 8002784:	230c      	movs	r3, #12
 8002786:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278c:	e006      	b.n	800279c <_sbrk+0x48>
	}

	heap_end += incr;
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <_sbrk+0x50>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	4a03      	ldr	r2, [pc, #12]	; (80027a4 <_sbrk+0x50>)
 8002798:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000344 	.word	0x20000344
 80027a8:	20005c90 	.word	0x20005c90

080027ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <SystemInit+0x28>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <SystemInit+0x28>)
 80027b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SystemInit+0x28>)
 80027c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027c6:	609a      	str	r2, [r3, #8]
#endif
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 fb5d 	bl	8005ea4 <HAL_I2C_GetState>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d003      	beq.n	80027f8 <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 80027f0:	481a      	ldr	r0, [pc, #104]	; (800285c <h3l_init+0x84>)
 80027f2:	f009 fbcd 	bl	800bf90 <puts>
 80027f6:	e002      	b.n	80027fe <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 80027f8:	4819      	ldr	r0, [pc, #100]	; (8002860 <h3l_init+0x88>)
 80027fa:	f009 fbc9 	bl	800bf90 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6858      	ldr	r0, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b299      	uxth	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7a1b      	ldrb	r3, [r3, #8]
 800280c:	220a      	movs	r2, #10
 800280e:	f003 fa1b 	bl	8005c48 <HAL_I2C_IsDeviceReady>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 800281c:	4811      	ldr	r0, [pc, #68]	; (8002864 <h3l_init+0x8c>)
 800281e:	f009 fbb7 	bl	800bf90 <puts>
		printf("Errorcode: %d\n", _ret);
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	4619      	mov	r1, r3
 8002826:	4810      	ldr	r0, [pc, #64]	; (8002868 <h3l_init+0x90>)
 8002828:	f009 fb3e 	bl	800bea8 <iprintf>
		return 0;
 800282c:	2300      	movs	r3, #0
 800282e:	e010      	b.n	8002852 <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8002830:	233f      	movs	r3, #63	; 0x3f
 8002832:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	461a      	mov	r2, r3
 8002838:	2120      	movs	r1, #32
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f9b0 	bl	8002ba0 <h3l_write>


	PWR_CONF = 0b10000000;
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 8002844:	7bbb      	ldrb	r3, [r7, #14]
 8002846:	461a      	mov	r2, r3
 8002848:	2123      	movs	r1, #35	; 0x23
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9a8 	bl	8002ba0 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8002850:	2301      	movs	r3, #1
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	0800e224 	.word	0x0800e224
 8002860:	0800e234 	.word	0x0800e234
 8002864:	0800e244 	.word	0x0800e244
 8002868:	0800e254 	.word	0x0800e254

0800286c <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b087      	sub	sp, #28
 8002870:	af02      	add	r7, sp, #8
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 8002876:	2328      	movs	r3, #40	; 0x28
 8002878:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6858      	ldr	r0, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b299      	uxth	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7a1b      	ldrb	r3, [r3, #8]
 8002888:	f107 020f 	add.w	r2, r7, #15
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2301      	movs	r3, #1
 8002890:	f002 feb6 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6858      	ldr	r0, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b299      	uxth	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7a1b      	ldrb	r3, [r3, #8]
 80028a2:	f107 0208 	add.w	r2, r7, #8
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2301      	movs	r3, #1
 80028aa:	f002 ffa7 	bl	80057fc <HAL_I2C_Master_Receive>
	reg = 0x29;
 80028ae:	2329      	movs	r3, #41	; 0x29
 80028b0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6858      	ldr	r0, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b299      	uxth	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7a1b      	ldrb	r3, [r3, #8]
 80028c0:	f107 020f 	add.w	r2, r7, #15
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2301      	movs	r3, #1
 80028c8:	f002 fe9a 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6858      	ldr	r0, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b299      	uxth	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	461c      	mov	r4, r3
 80028dc:	f107 0308 	add.w	r3, r7, #8
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	9400      	str	r4, [sp, #0]
 80028e4:	2301      	movs	r3, #1
 80028e6:	f002 ff89 	bl	80057fc <HAL_I2C_Master_Receive>
	reg = 0x2A;
 80028ea:	232a      	movs	r3, #42	; 0x2a
 80028ec:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6858      	ldr	r0, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b299      	uxth	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7a1b      	ldrb	r3, [r3, #8]
 80028fc:	f107 020f 	add.w	r2, r7, #15
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	f002 fe7c 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6858      	ldr	r0, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b299      	uxth	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7a1b      	ldrb	r3, [r3, #8]
 8002916:	461c      	mov	r4, r3
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	1c9a      	adds	r2, r3, #2
 800291e:	9400      	str	r4, [sp, #0]
 8002920:	2301      	movs	r3, #1
 8002922:	f002 ff6b 	bl	80057fc <HAL_I2C_Master_Receive>
	reg = 0x2B;
 8002926:	232b      	movs	r3, #43	; 0x2b
 8002928:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6858      	ldr	r0, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b299      	uxth	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7a1b      	ldrb	r3, [r3, #8]
 8002938:	f107 020f 	add.w	r2, r7, #15
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2301      	movs	r3, #1
 8002940:	f002 fe5e 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6858      	ldr	r0, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	b299      	uxth	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7a1b      	ldrb	r3, [r3, #8]
 8002952:	461c      	mov	r4, r3
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	1cda      	adds	r2, r3, #3
 800295a:	9400      	str	r4, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	f002 ff4d 	bl	80057fc <HAL_I2C_Master_Receive>
	reg = 0x2C;
 8002962:	232c      	movs	r3, #44	; 0x2c
 8002964:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6858      	ldr	r0, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b299      	uxth	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7a1b      	ldrb	r3, [r3, #8]
 8002974:	f107 020f 	add.w	r2, r7, #15
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2301      	movs	r3, #1
 800297c:	f002 fe40 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6858      	ldr	r0, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b299      	uxth	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7a1b      	ldrb	r3, [r3, #8]
 800298e:	461c      	mov	r4, r3
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	1d1a      	adds	r2, r3, #4
 8002996:	9400      	str	r4, [sp, #0]
 8002998:	2301      	movs	r3, #1
 800299a:	f002 ff2f 	bl	80057fc <HAL_I2C_Master_Receive>
	reg = 0x2D;
 800299e:	232d      	movs	r3, #45	; 0x2d
 80029a0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6858      	ldr	r0, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	b299      	uxth	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7a1b      	ldrb	r3, [r3, #8]
 80029b0:	f107 020f 	add.w	r2, r7, #15
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2301      	movs	r3, #1
 80029b8:	f002 fe22 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6858      	ldr	r0, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b299      	uxth	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7a1b      	ldrb	r3, [r3, #8]
 80029ca:	461c      	mov	r4, r3
 80029cc:	f107 0308 	add.w	r3, r7, #8
 80029d0:	1d5a      	adds	r2, r3, #5
 80029d2:	9400      	str	r4, [sp, #0]
 80029d4:	2301      	movs	r3, #1
 80029d6:	f002 ff11 	bl	80057fc <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 80029da:	7a3b      	ldrb	r3, [r7, #8]
 80029dc:	b21a      	sxth	r2, r3
 80029de:	7a7b      	ldrb	r3, [r7, #9]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 80029ec:	7abb      	ldrb	r3, [r7, #10]
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	7afb      	ldrb	r3, [r7, #11]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 80029fe:	7b3b      	ldrb	r3, [r7, #12]
 8002a00:	b21a      	sxth	r2, r3
 8002a02:	7b7b      	ldrb	r3, [r7, #13]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a16:	111b      	asrs	r3, r3, #4
 8002a18:	b21a      	sxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002a24:	111b      	asrs	r3, r3, #4
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a32:	111b      	asrs	r3, r3, #4
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3302      	adds	r3, #2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a4e:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3304      	adds	r3, #4
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a5a:	801a      	strh	r2, [r3, #0]

};
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	0000      	movs	r0, r0
	...

08002a68 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a80:	ee17 0a90 	vmov	r0, s15
 8002a84:	f7fd fd60 	bl	8000548 <__aeabi_f2d>
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <h3l_convert+0x130>)
 8002a8e:	f7fd fdb3 	bl	80005f8 <__aeabi_dmul>
 8002a92:	4603      	mov	r3, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	4618      	mov	r0, r3
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <h3l_convert+0x134>)
 8002aa0:	f7fd fed4 	bl	800084c <__aeabi_ddiv>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4621      	mov	r1, r4
 8002aac:	a338      	add	r3, pc, #224	; (adr r3, 8002b90 <h3l_convert+0x128>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fda1 	bl	80005f8 <__aeabi_dmul>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	460c      	mov	r4, r1
 8002aba:	4618      	mov	r0, r3
 8002abc:	4621      	mov	r1, r4
 8002abe:	f7fe f893 	bl	8000be8 <__aeabi_d2f>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad6:	ee17 0a90 	vmov	r0, s15
 8002ada:	f7fd fd35 	bl	8000548 <__aeabi_f2d>
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <h3l_convert+0x130>)
 8002ae4:	f7fd fd88 	bl	80005f8 <__aeabi_dmul>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	4618      	mov	r0, r3
 8002aee:	4621      	mov	r1, r4
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <h3l_convert+0x134>)
 8002af6:	f7fd fea9 	bl	800084c <__aeabi_ddiv>
 8002afa:	4603      	mov	r3, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	4618      	mov	r0, r3
 8002b00:	4621      	mov	r1, r4
 8002b02:	a323      	add	r3, pc, #140	; (adr r3, 8002b90 <h3l_convert+0x128>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fd76 	bl	80005f8 <__aeabi_dmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	4619      	mov	r1, r3
 8002b12:	4622      	mov	r2, r4
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	1d1c      	adds	r4, r3, #4
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	f7fe f864 	bl	8000be8 <__aeabi_d2f>
 8002b20:	4603      	mov	r3, r0
 8002b22:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b32:	ee17 0a90 	vmov	r0, s15
 8002b36:	f7fd fd07 	bl	8000548 <__aeabi_f2d>
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <h3l_convert+0x130>)
 8002b40:	f7fd fd5a 	bl	80005f8 <__aeabi_dmul>
 8002b44:	4603      	mov	r3, r0
 8002b46:	460c      	mov	r4, r1
 8002b48:	4618      	mov	r0, r3
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <h3l_convert+0x134>)
 8002b52:	f7fd fe7b 	bl	800084c <__aeabi_ddiv>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	a30c      	add	r3, pc, #48	; (adr r3, 8002b90 <h3l_convert+0x128>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fd48 	bl	80005f8 <__aeabi_dmul>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4622      	mov	r2, r4
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f103 0408 	add.w	r4, r3, #8
 8002b76:	4608      	mov	r0, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	f7fe f835 	bl	8000be8 <__aeabi_d2f>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	f3af 8000 	nop.w
 8002b90:	51eb851f 	.word	0x51eb851f
 8002b94:	40239eb8 	.word	0x40239eb8
 8002b98:	40488000 	.word	0x40488000
 8002b9c:	408f4000 	.word	0x408f4000

08002ba0 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
 8002bac:	4613      	mov	r3, r2
 8002bae:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 8002bb4:	78bb      	ldrb	r3, [r7, #2]
 8002bb6:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6858      	ldr	r0, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b299      	uxth	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7a1b      	ldrb	r3, [r3, #8]
 8002bc6:	f107 020c 	add.w	r2, r7, #12
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f002 fd17 	bl	8005600 <HAL_I2C_Master_Transmit>

};
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d81a      	bhi.n	8002c28 <_get_accel_sensitivity+0x4c>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <_get_accel_sensitivity+0x1c>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c11 	.word	0x08002c11
 8002c00:	08002c19 	.word	0x08002c19
 8002c04:	08002c21 	.word	0x08002c21
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 8002c08:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8002c0c:	60fb      	str	r3, [r7, #12]
    break;
 8002c0e:	e00b      	b.n	8002c28 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 8002c10:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8002c14:	60fb      	str	r3, [r7, #12]
    break;
 8002c16:	e007      	b.n	8002c28 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 8002c18:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8002c1c:	60fb      	str	r3, [r7, #12]
    break;
 8002c1e:	e003      	b.n	8002c28 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 8002c20:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8002c24:	60fb      	str	r3, [r7, #12]
    break;
 8002c26:	bf00      	nop
  }
  return f;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	ee07 3a90 	vmov	s15, r3
}
 8002c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d816      	bhi.n	8002c80 <_get_gyro_sensitivity+0x44>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <_get_gyro_sensitivity+0x1c>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c6f 	.word	0x08002c6f
 8002c60:	08002c75 	.word	0x08002c75
 8002c64:	08002c7b 	.word	0x08002c7b
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <_get_gyro_sensitivity+0x58>)
 8002c6a:	60fb      	str	r3, [r7, #12]
	break;
 8002c6c:	e008      	b.n	8002c80 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <_get_gyro_sensitivity+0x5c>)
 8002c70:	60fb      	str	r3, [r7, #12]
    break;
 8002c72:	e005      	b.n	8002c80 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <_get_gyro_sensitivity+0x60>)
 8002c76:	60fb      	str	r3, [r7, #12]
    break;
 8002c78:	e002      	b.n	8002c80 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <_get_gyro_sensitivity+0x64>)
 8002c7c:	60fb      	str	r3, [r7, #12]
    break;
 8002c7e:	bf00      	nop
  }
  return f;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	ee07 3a90 	vmov	s15, r3
}
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	42830000 	.word	0x42830000
 8002c98:	42033333 	.word	0x42033333
 8002c9c:	41833333 	.word	0x41833333
 8002ca0:	41033333 	.word	0x41033333

08002ca4 <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	72fb      	strb	r3, [r7, #11]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	889b      	ldrh	r3, [r3, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f002 fb2b 	bl	8005328 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6898      	ldr	r0, [r3, #8]
 8002cd6:	f107 010b 	add.w	r1, r7, #11
 8002cda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f005 fa22 	bl	8008128 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6898      	ldr	r0, [r3, #8]
 8002ce8:	893a      	ldrh	r2, [r7, #8]
 8002cea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	f005 fb4e 	bl	8008390 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	889b      	ldrh	r3, [r3, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f002 fb12 	bl	8005328 <HAL_GPIO_WritePin>
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	461a      	mov	r2, r3
 8002d18:	460b      	mov	r3, r1
 8002d1a:	72fb      	strb	r3, [r7, #11]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	889b      	ldrh	r3, [r3, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f002 fafc 	bl	8005328 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6898      	ldr	r0, [r3, #8]
 8002d34:	f107 010b 	add.w	r1, r7, #11
 8002d38:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f005 f9f3 	bl	8008128 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6898      	ldr	r0, [r3, #8]
 8002d46:	893a      	ldrh	r2, [r7, #8]
 8002d48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	f005 f9eb 	bl	8008128 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	889b      	ldrh	r3, [r3, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f002 fae3 	bl	8005328 <HAL_GPIO_WritePin>
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8002d76:	2300      	movs	r3, #0
 8002d78:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8002d7a:	2381      	movs	r3, #129	; 0x81
 8002d7c:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8002d7e:	f107 020f 	add.w	r2, r7, #15
 8002d82:	2301      	movs	r3, #1
 8002d84:	216b      	movs	r1, #107	; 0x6b
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffc0 	bl	8002d0c <_icm_write_bytes>
	HAL_Delay(1);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f000 ffc9 	bl	8003d24 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8002d96:	f107 020f 	add.w	r2, r7, #15
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	216b      	movs	r1, #107	; 0x6b
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ffb4 	bl	8002d0c <_icm_write_bytes>
    HAL_Delay(1);
 8002da4:	2001      	movs	r0, #1
 8002da6:	f000 ffbd 	bl	8003d24 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8002daa:	f107 020c 	add.w	r2, r7, #12
 8002dae:	2301      	movs	r3, #1
 8002db0:	2175      	movs	r1, #117	; 0x75
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ff76 	bl	8002ca4 <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8002db8:	7b3b      	ldrb	r3, [r7, #12]
 8002dba:	2bac      	cmp	r3, #172	; 0xac
 8002dbc:	d001      	beq.n	8002dc2 <icm20601_init+0x58>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e093      	b.n	8002eea <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8002dc2:	233f      	movs	r3, #63	; 0x3f
 8002dc4:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8002dc6:	f107 020f 	add.w	r2, r7, #15
 8002dca:	2301      	movs	r3, #1
 8002dcc:	216c      	movs	r1, #108	; 0x6c
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff9c 	bl	8002d0c <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8002dd8:	f107 020f 	add.w	r2, r7, #15
 8002ddc:	2301      	movs	r3, #1
 8002dde:	216a      	movs	r1, #106	; 0x6a
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff93 	bl	8002d0c <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8002de6:	2341      	movs	r3, #65	; 0x41
 8002de8:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8002dea:	f107 020f 	add.w	r2, r7, #15
 8002dee:	2301      	movs	r3, #1
 8002df0:	216a      	movs	r1, #106	; 0x6a
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ff8a 	bl	8002d0c <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7b1b      	ldrb	r3, [r3, #12]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d102      	bne.n	8002e06 <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8002e00:	2308      	movs	r3, #8
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e002      	b.n	8002e0c <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7b1b      	ldrb	r3, [r3, #12]
 8002e0a:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8002e0c:	f107 020f 	add.w	r2, r7, #15
 8002e10:	2301      	movs	r3, #1
 8002e12:	211d      	movs	r1, #29
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff79 	bl	8002d0c <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7b5b      	ldrb	r3, [r3, #13]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8002e24:	f107 020f 	add.w	r2, r7, #15
 8002e28:	2301      	movs	r3, #1
 8002e2a:	211c      	movs	r1, #28
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff6d 	bl	8002d0c <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7b9b      	ldrb	r3, [r3, #14]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d119      	bne.n	8002e6e <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8002e3e:	f107 020f 	add.w	r2, r7, #15
 8002e42:	2301      	movs	r3, #1
 8002e44:	211a      	movs	r1, #26
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff60 	bl	8002d0c <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7bdb      	ldrb	r3, [r3, #15]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8002e5e:	f107 020f 	add.w	r2, r7, #15
 8002e62:	2301      	movs	r3, #1
 8002e64:	211b      	movs	r1, #27
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff ff50 	bl	8002d0c <_icm_write_bytes>
 8002e6c:	e033      	b.n	8002ed6 <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7b9b      	ldrb	r3, [r3, #14]
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d119      	bne.n	8002eaa <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8002e7a:	f107 020f 	add.w	r2, r7, #15
 8002e7e:	2301      	movs	r3, #1
 8002e80:	211a      	movs	r1, #26
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff42 	bl	8002d0c <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7bdb      	ldrb	r3, [r3, #15]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8002e9a:	f107 020f 	add.w	r2, r7, #15
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	211b      	movs	r1, #27
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ff32 	bl	8002d0c <_icm_write_bytes>
 8002ea8:	e015      	b.n	8002ed6 <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7b9b      	ldrb	r3, [r3, #14]
 8002eae:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8002eb0:	f107 020f 	add.w	r2, r7, #15
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	211a      	movs	r1, #26
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff27 	bl	8002d0c <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7bdb      	ldrb	r3, [r3, #15]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8002ec8:	f107 020f 	add.w	r2, r7, #15
 8002ecc:	2301      	movs	r3, #1
 8002ece:	211b      	movs	r1, #27
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff1b 	bl	8002d0c <_icm_write_bytes>
     }


    tmp = 0x00;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8002eda:	f107 020f 	add.w	r2, r7, #15
 8002ede:	2301      	movs	r3, #1
 8002ee0:	216c      	movs	r1, #108	; 0x6c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff12 	bl	8002d0c <_icm_write_bytes>


    return 1;
 8002ee8:	2301      	movs	r3, #1
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8002f06:	f107 0208 	add.w	r2, r7, #8
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	213b      	movs	r1, #59	; 0x3b
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fec8 	bl	8002ca4 <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8002f14:	7a3b      	ldrb	r3, [r7, #8]
 8002f16:	b21a      	sxth	r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	801a      	strh	r2, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	b21a      	sxth	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f30:	7a7b      	ldrb	r3, [r7, #9]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21a      	sxth	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8002f3c:	7aba      	ldrb	r2, [r7, #10]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	3302      	adds	r3, #2
 8002f42:	b212      	sxth	r2, r2
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4e:	021a      	lsls	r2, r3, #8
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	3302      	adds	r3, #2
 8002f54:	b212      	sxth	r2, r2
 8002f56:	801a      	strh	r2, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002f60:	7afb      	ldrb	r3, [r7, #11]
 8002f62:	b21a      	sxth	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	3302      	adds	r3, #2
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	b212      	sxth	r2, r2
 8002f6c:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8002f6e:	7b3a      	ldrb	r2, [r7, #12]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	3304      	adds	r3, #4
 8002f74:	b212      	sxth	r2, r2
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	3304      	adds	r3, #4
 8002f86:	b212      	sxth	r2, r2
 8002f88:	801a      	strh	r2, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	b212      	sxth	r2, r2
 8002f9e:	801a      	strh	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 8002fb2:	f107 0308 	add.w	r3, r7, #8
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8002fbc:	f107 0208 	add.w	r2, r7, #8
 8002fc0:	2306      	movs	r3, #6
 8002fc2:	2143      	movs	r1, #67	; 0x43
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fe6d 	bl	8002ca4 <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8002fca:	7a3b      	ldrb	r3, [r7, #8]
 8002fcc:	b21a      	sxth	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	b21a      	sxth	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fe6:	7a7b      	ldrb	r3, [r7, #9]
 8002fe8:	b21b      	sxth	r3, r3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b21a      	sxth	r2, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 8002ff2:	7aba      	ldrb	r2, [r7, #10]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	b212      	sxth	r2, r2
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	3302      	adds	r3, #2
 8003000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	3302      	adds	r3, #2
 800300a:	b212      	sxth	r2, r2
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	3302      	adds	r3, #2
 8003012:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003016:	7afb      	ldrb	r3, [r7, #11]
 8003018:	b21a      	sxth	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	3302      	adds	r3, #2
 800301e:	430a      	orrs	r2, r1
 8003020:	b212      	sxth	r2, r2
 8003022:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8003024:	7b3a      	ldrb	r2, [r7, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	3304      	adds	r3, #4
 800302a:	b212      	sxth	r2, r2
 800302c:	801a      	strh	r2, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	3304      	adds	r3, #4
 8003032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003036:	021a      	lsls	r2, r3, #8
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	3304      	adds	r3, #4
 800303c:	b212      	sxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	3304      	adds	r3, #4
 8003044:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003048:	7b7b      	ldrb	r3, [r7, #13]
 800304a:	b21a      	sxth	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3304      	adds	r3, #4
 8003050:	430a      	orrs	r2, r1
 8003052:	b212      	sxth	r2, r2
 8003054:	801a      	strh	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8003068:	2300      	movs	r3, #0
 800306a:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 800306c:	f107 020c 	add.w	r2, r7, #12
 8003070:	2302      	movs	r3, #2
 8003072:	2141      	movs	r1, #65	; 0x41
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fe15 	bl	8002ca4 <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 800307a:	7b3b      	ldrb	r3, [r7, #12]
 800307c:	b21a      	sxth	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	b21a      	sxth	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003096:	7b7b      	ldrb	r3, [r7, #13]
 8003098:	b21b      	sxth	r3, r3
 800309a:	4313      	orrs	r3, r2
 800309c:	b21a      	sxth	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	801a      	strh	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	0000      	movs	r0, r0
 80030ac:	0000      	movs	r0, r0
	...

080030b0 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 80030ba:	f107 0316 	add.w	r3, r7, #22
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffcc 	bl	800305e <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 80030c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030d2:	4b61      	ldr	r3, [pc, #388]	; (8003258 <icm20601_read_data+0x1a8>)
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030dc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80030e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 80030ea:	f107 0310 	add.w	r3, r7, #16
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7b5b      	ldrb	r3, [r3, #13]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fd6f 	bl	8002bdc <_get_accel_sensitivity>
 80030fe:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fef2 	bl	8002ef2 <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 800310e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800311a:	edd7 7a07 	vldr	s15, [r7, #28]
 800311e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003122:	ee16 0a90 	vmov	r0, s13
 8003126:	f7fd fa0f 	bl	8000548 <__aeabi_f2d>
 800312a:	a349      	add	r3, pc, #292	; (adr r3, 8003250 <icm20601_read_data+0x1a0>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f7fd fa62 	bl	80005f8 <__aeabi_dmul>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	4619      	mov	r1, r3
 800313a:	4622      	mov	r2, r4
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	1d1c      	adds	r4, r3, #4
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	f7fd fd50 	bl	8000be8 <__aeabi_d2f>
 8003148:	4603      	mov	r3, r0
 800314a:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 800314c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003158:	edd7 7a07 	vldr	s15, [r7, #28]
 800315c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003160:	ee16 0a90 	vmov	r0, s13
 8003164:	f7fd f9f0 	bl	8000548 <__aeabi_f2d>
 8003168:	a339      	add	r3, pc, #228	; (adr r3, 8003250 <icm20601_read_data+0x1a0>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd fa43 	bl	80005f8 <__aeabi_dmul>
 8003172:	4603      	mov	r3, r0
 8003174:	460c      	mov	r4, r1
 8003176:	4619      	mov	r1, r3
 8003178:	4622      	mov	r2, r4
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f103 0408 	add.w	r4, r3, #8
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	f7fd fd30 	bl	8000be8 <__aeabi_d2f>
 8003188:	4603      	mov	r3, r0
 800318a:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 800318c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003198:	edd7 7a07 	vldr	s15, [r7, #28]
 800319c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031a0:	ee16 0a90 	vmov	r0, s13
 80031a4:	f7fd f9d0 	bl	8000548 <__aeabi_f2d>
 80031a8:	a329      	add	r3, pc, #164	; (adr r3, 8003250 <icm20601_read_data+0x1a0>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f7fd fa23 	bl	80005f8 <__aeabi_dmul>
 80031b2:	4603      	mov	r3, r0
 80031b4:	460c      	mov	r4, r1
 80031b6:	4619      	mov	r1, r3
 80031b8:	4622      	mov	r2, r4
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f103 040c 	add.w	r4, r3, #12
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	f7fd fd10 	bl	8000be8 <__aeabi_d2f>
 80031c8:	4603      	mov	r3, r0
 80031ca:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->accel_g);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7b5b      	ldrb	r3, [r3, #13]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fd2e 	bl	8002c3c <_get_gyro_sensitivity>
 80031e0:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fedc 	bl	8002fa8 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 80031f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	3310      	adds	r3, #16
 8003200:	ed97 7a06 	vldr	s14, [r7, #24]
 8003204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003208:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 800320c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	3314      	adds	r3, #20
 800321c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003224:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8003228:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	3318      	adds	r3, #24
 8003238:	ed97 7a06 	vldr	s14, [r7, #24]
 800323c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003240:	edc3 7a00 	vstr	s15, [r3]
}
 8003244:	bf00      	nop
 8003246:	3724      	adds	r7, #36	; 0x24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	f3af 8000 	nop.w
 8003250:	51eb851f 	.word	0x51eb851f
 8003254:	40239eb8 	.word	0x40239eb8
 8003258:	20000114 	.word	0x20000114

0800325c <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	889b      	ldrh	r3, [r3, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f002 f873 	bl	800535a <HAL_GPIO_TogglePin>
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <turn_on>:

void turn_on(struct LED_dev * ctrl){
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	889b      	ldrh	r3, [r3, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	4619      	mov	r1, r3
 8003290:	f002 f84a 	bl	8005328 <HAL_GPIO_WritePin>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <turn_off>:

void turn_off(struct LED_dev * ctrl){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	889b      	ldrh	r3, [r3, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	4619      	mov	r1, r3
 80032b0:	f002 f83a 	bl	8005328 <HAL_GPIO_WritePin>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <ms5607_init>:

#include <devices/MS5607.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f002 fdeb 	bl	8005ea4 <HAL_I2C_GetState>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d003      	beq.n	80032dc <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 80032d4:	484a      	ldr	r0, [pc, #296]	; (8003400 <ms5607_init+0x144>)
 80032d6:	f008 fe5b 	bl	800bf90 <puts>
 80032da:	e002      	b.n	80032e2 <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 80032dc:	4849      	ldr	r0, [pc, #292]	; (8003404 <ms5607_init+0x148>)
 80032de:	f008 fe57 	bl	800bf90 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6858      	ldr	r0, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b299      	uxth	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	220a      	movs	r2, #10
 80032f2:	f002 fca9 	bl	8005c48 <HAL_I2C_IsDeviceReady>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 8003300:	4841      	ldr	r0, [pc, #260]	; (8003408 <ms5607_init+0x14c>)
 8003302:	f008 fe45 	bl	800bf90 <puts>
		printf("Errorcode: %d\n", _ret);
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	4619      	mov	r1, r3
 800330a:	4840      	ldr	r0, [pc, #256]	; (800340c <ms5607_init+0x150>)
 800330c:	f008 fdcc 	bl	800bea8 <iprintf>
		return 0;
 8003310:	2300      	movs	r3, #0
 8003312:	e070      	b.n	80033f6 <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 8003314:	231e      	movs	r3, #30
 8003316:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6858      	ldr	r0, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b299      	uxth	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7a1b      	ldrb	r3, [r3, #8]
 8003326:	f107 0210 	add.w	r2, r7, #16
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2301      	movs	r3, #1
 800332e:	f002 f967 	bl	8005600 <HAL_I2C_Master_Transmit>
 8003332:	4603      	mov	r3, r0
 8003334:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 8003336:	2064      	movs	r0, #100	; 0x64
 8003338:	f000 fcf4 	bl	8003d24 <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 800333c:	2301      	movs	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e043      	b.n	80033ca <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 8003342:	23a0      	movs	r3, #160	; 0xa0
 8003344:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	4413      	add	r3, r2
 8003352:	b2db      	uxtb	r3, r3
 8003354:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6858      	ldr	r0, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b299      	uxth	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7a1b      	ldrb	r3, [r3, #8]
 8003364:	f107 020f 	add.w	r2, r7, #15
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	f002 f948 	bl	8005600 <HAL_I2C_Master_Transmit>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 8003374:	200f      	movs	r0, #15
 8003376:	f000 fcd5 	bl	8003d24 <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6858      	ldr	r0, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b299      	uxth	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7a1b      	ldrb	r3, [r3, #8]
 8003388:	f107 020c 	add.w	r2, r7, #12
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2302      	movs	r3, #2
 8003390:	f002 fa34 	bl	80057fc <HAL_I2C_Master_Receive>
 8003394:	4603      	mov	r3, r0
 8003396:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8003398:	7b3b      	ldrb	r3, [r7, #12]
 800339a:	b29b      	uxth	r3, r3
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	b299      	uxth	r1, r3
 80033a0:	7b7b      	ldrb	r3, [r7, #13]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	b291      	uxth	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	460a      	mov	r2, r1
 80033b6:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 80033be:	4814      	ldr	r0, [pc, #80]	; (8003410 <ms5607_init+0x154>)
 80033c0:	f008 fde6 	bl	800bf90 <puts>
	for(int i = 1; i < 7; i++){
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	ddb8      	ble.n	8003342 <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 80033d0:	4810      	ldr	r0, [pc, #64]	; (8003414 <ms5607_init+0x158>)
 80033d2:	f008 fddd 	bl	800bf90 <puts>

	buf[0] = 0x44;
 80033d6:	2344      	movs	r3, #68	; 0x44
 80033d8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6858      	ldr	r0, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b299      	uxth	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7a1b      	ldrb	r3, [r3, #8]
 80033e8:	f107 020c 	add.w	r2, r7, #12
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2301      	movs	r3, #1
 80033f0:	f002 f906 	bl	8005600 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 80033f4:	2301      	movs	r3, #1
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	0800e264 	.word	0x0800e264
 8003404:	0800e274 	.word	0x0800e274
 8003408:	0800e284 	.word	0x0800e284
 800340c:	0800e294 	.word	0x0800e294
 8003410:	0800e2a4 	.word	0x0800e2a4
 8003414:	0800e2bc 	.word	0x0800e2bc

08003418 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8003422:	2300      	movs	r3, #0
 8003424:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6858      	ldr	r0, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b299      	uxth	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7a1b      	ldrb	r3, [r3, #8]
 8003434:	f107 020c 	add.w	r2, r7, #12
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2301      	movs	r3, #1
 800343c:	f002 f8e0 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6858      	ldr	r0, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b299      	uxth	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7a1b      	ldrb	r3, [r3, #8]
 800344e:	f107 020c 	add.w	r2, r7, #12
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2303      	movs	r3, #3
 8003456:	f002 f9d1 	bl	80057fc <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 800345a:	7b3b      	ldrb	r3, [r7, #12]
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	461a      	mov	r2, r3
 8003460:	7b7b      	ldrb	r3, [r7, #13]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	4313      	orrs	r3, r2
 8003466:	7bba      	ldrb	r2, [r7, #14]
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 800346e:	7b3a      	ldrb	r2, [r7, #12]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	7b7a      	ldrb	r2, [r7, #13]
 800347a:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	3302      	adds	r3, #2
 8003480:	7bba      	ldrb	r2, [r7, #14]
 8003482:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 8003484:	2354      	movs	r3, #84	; 0x54
 8003486:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6858      	ldr	r0, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b299      	uxth	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	7a1b      	ldrb	r3, [r3, #8]
 8003496:	f107 020c 	add.w	r2, r7, #12
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	f002 f8af 	bl	8005600 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af02      	add	r7, sp, #8
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 80034b4:	2300      	movs	r3, #0
 80034b6:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6858      	ldr	r0, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b299      	uxth	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7a1b      	ldrb	r3, [r3, #8]
 80034c6:	f107 020c 	add.w	r2, r7, #12
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2301      	movs	r3, #1
 80034ce:	f002 f897 	bl	8005600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6858      	ldr	r0, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b299      	uxth	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7a1b      	ldrb	r3, [r3, #8]
 80034e0:	f107 020c 	add.w	r2, r7, #12
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2303      	movs	r3, #3
 80034e8:	f002 f988 	bl	80057fc <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 80034ec:	7b3b      	ldrb	r3, [r7, #12]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	461a      	mov	r2, r3
 80034f2:	7b7b      	ldrb	r3, [r7, #13]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	4313      	orrs	r3, r2
 80034f8:	7bba      	ldrb	r2, [r7, #14]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	3303      	adds	r3, #3
 8003504:	7b3a      	ldrb	r2, [r7, #12]
 8003506:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	3304      	adds	r3, #4
 800350c:	7b7a      	ldrb	r2, [r7, #13]
 800350e:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	3305      	adds	r3, #5
 8003514:	7bba      	ldrb	r2, [r7, #14]
 8003516:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 8003518:	2344      	movs	r3, #68	; 0x44
 800351a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6858      	ldr	r0, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b299      	uxth	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7a1b      	ldrb	r3, [r3, #8]
 800352a:	f107 020c 	add.w	r2, r7, #12
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2301      	movs	r3, #1
 8003532:	f002 f865 	bl	8005600 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8003540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003544:	b092      	sub	sp, #72	; 0x48
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	895b      	ldrh	r3, [r3, #10]
 8003552:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	899b      	ldrh	r3, [r3, #12]
 8003558:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	89db      	ldrh	r3, [r3, #14]
 800355e:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8a1b      	ldrh	r3, [r3, #16]
 8003564:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8a5b      	ldrh	r3, [r3, #18]
 800356a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8a9b      	ldrh	r3, [r3, #20]
 8003570:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003588:	ee17 0a90 	vmov	r0, s15
 800358c:	f7fc ffdc 	bl	8000548 <__aeabi_f2d>
 8003590:	4604      	mov	r4, r0
 8003592:	460d      	mov	r5, r1
 8003594:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ffc4 	bl	8000524 <__aeabi_i2d>
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	4bd9      	ldr	r3, [pc, #868]	; (8003908 <ms5607_convert+0x3c8>)
 80035a2:	f7fd f829 	bl	80005f8 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4620      	mov	r0, r4
 80035ac:	4629      	mov	r1, r5
 80035ae:	f7fc fe6b 	bl	8000288 <__aeabi_dsub>
 80035b2:	4603      	mov	r3, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	4618      	mov	r0, r3
 80035b8:	4621      	mov	r1, r4
 80035ba:	f7fd fb15 	bl	8000be8 <__aeabi_d2f>
 80035be:	4603      	mov	r3, r0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 80035c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffad 	bl	8000524 <__aeabi_i2d>
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80035d2:	f7fd f811 	bl	80005f8 <__aeabi_dmul>
 80035d6:	4603      	mov	r3, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	4625      	mov	r5, r4
 80035dc:	461c      	mov	r4, r3
 80035de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f0:	ee17 0a90 	vmov	r0, s15
 80035f4:	f7fc ffa8 	bl	8000548 <__aeabi_f2d>
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	4bc3      	ldr	r3, [pc, #780]	; (800390c <ms5607_convert+0x3cc>)
 80035fe:	f7fd f925 	bl	800084c <__aeabi_ddiv>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4620      	mov	r0, r4
 8003608:	4629      	mov	r1, r5
 800360a:	f7fc fe3f 	bl	800028c <__adddf3>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	4618      	mov	r0, r3
 8003614:	4621      	mov	r1, r4
 8003616:	f7fd fae7 	bl	8000be8 <__aeabi_d2f>
 800361a:	4603      	mov	r3, r0
 800361c:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 800361e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff7f 	bl	8000524 <__aeabi_i2d>
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	4bb9      	ldr	r3, [pc, #740]	; (8003910 <ms5607_convert+0x3d0>)
 800362c:	f7fc ffe4 	bl	80005f8 <__aeabi_dmul>
 8003630:	4603      	mov	r3, r0
 8003632:	460c      	mov	r4, r1
 8003634:	4625      	mov	r5, r4
 8003636:	461c      	mov	r4, r3
 8003638:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003642:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	ee17 0a90 	vmov	r0, s15
 800364e:	f7fc ff7b 	bl	8000548 <__aeabi_f2d>
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	4baf      	ldr	r3, [pc, #700]	; (8003914 <ms5607_convert+0x3d4>)
 8003658:	f7fd f8f8 	bl	800084c <__aeabi_ddiv>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4620      	mov	r0, r4
 8003662:	4629      	mov	r1, r5
 8003664:	f7fc fe12 	bl	800028c <__adddf3>
 8003668:	4603      	mov	r3, r0
 800366a:	460c      	mov	r4, r1
 800366c:	4618      	mov	r0, r3
 800366e:	4621      	mov	r1, r4
 8003670:	f7fd faba 	bl	8000be8 <__aeabi_d2f>
 8003674:	4603      	mov	r3, r0
 8003676:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8003678:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003682:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368a:	ee17 0a90 	vmov	r0, s15
 800368e:	f7fc ff5b 	bl	8000548 <__aeabi_f2d>
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	4ba0      	ldr	r3, [pc, #640]	; (8003918 <ms5607_convert+0x3d8>)
 8003698:	f7fd f8d8 	bl	800084c <__aeabi_ddiv>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	4618      	mov	r0, r3
 80036a2:	4621      	mov	r1, r4
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	4b9c      	ldr	r3, [pc, #624]	; (800391c <ms5607_convert+0x3dc>)
 80036aa:	f7fc fdef 	bl	800028c <__adddf3>
 80036ae:	4603      	mov	r3, r0
 80036b0:	460c      	mov	r4, r1
 80036b2:	4618      	mov	r0, r3
 80036b4:	4621      	mov	r1, r4
 80036b6:	f7fd fa97 	bl	8000be8 <__aeabi_d2f>
 80036ba:	4603      	mov	r3, r0
 80036bc:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80036cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d0:	ee17 0a90 	vmov	r0, s15
 80036d4:	f7fc ff38 	bl	8000548 <__aeabi_f2d>
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	4b90      	ldr	r3, [pc, #576]	; (8003920 <ms5607_convert+0x3e0>)
 80036de:	f7fd f8b5 	bl	800084c <__aeabi_ddiv>
 80036e2:	4603      	mov	r3, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	4625      	mov	r5, r4
 80036e8:	461c      	mov	r4, r3
 80036ea:	6a38      	ldr	r0, [r7, #32]
 80036ec:	f7fc ff2c 	bl	8000548 <__aeabi_f2d>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4620      	mov	r0, r4
 80036f6:	4629      	mov	r1, r5
 80036f8:	f7fc fdc6 	bl	8000288 <__aeabi_dsub>
 80036fc:	4603      	mov	r3, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	4618      	mov	r0, r3
 8003702:	4621      	mov	r1, r4
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	4b86      	ldr	r3, [pc, #536]	; (8003924 <ms5607_convert+0x3e4>)
 800370a:	f7fd f89f 	bl	800084c <__aeabi_ddiv>
 800370e:	4603      	mov	r3, r0
 8003710:	460c      	mov	r4, r1
 8003712:	4618      	mov	r0, r3
 8003714:	4621      	mov	r1, r4
 8003716:	f7fd fa67 	bl	8000be8 <__aeabi_d2f>
 800371a:	4603      	mov	r3, r0
 800371c:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	647b      	str	r3, [r7, #68]	; 0x44
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	643b      	str	r3, [r7, #64]	; 0x40
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8003730:	edd7 7a06 	vldr	s15, [r7, #24]
 8003734:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003928 <ms5607_convert+0x3e8>
 8003738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	f140 8104 	bpl.w	800394c <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 8003744:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003748:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800374c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003750:	eddf 6a76 	vldr	s13, [pc, #472]	; 800392c <ms5607_convert+0x3ec>
 8003754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003758:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 800375c:	69b8      	ldr	r0, [r7, #24]
 800375e:	f7fc fef3 	bl	8000548 <__aeabi_f2d>
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <ms5607_convert+0x3dc>)
 8003768:	f7fc fd8e 	bl	8000288 <__aeabi_dsub>
 800376c:	4603      	mov	r3, r0
 800376e:	460c      	mov	r4, r1
 8003770:	4618      	mov	r0, r3
 8003772:	4621      	mov	r1, r4
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	4b6d      	ldr	r3, [pc, #436]	; (8003930 <ms5607_convert+0x3f0>)
 800377a:	f7fc ff3d 	bl	80005f8 <__aeabi_dmul>
 800377e:	4603      	mov	r3, r0
 8003780:	460c      	mov	r4, r1
 8003782:	4625      	mov	r5, r4
 8003784:	461c      	mov	r4, r3
 8003786:	69b8      	ldr	r0, [r7, #24]
 8003788:	f7fc fede 	bl	8000548 <__aeabi_f2d>
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	4b62      	ldr	r3, [pc, #392]	; (800391c <ms5607_convert+0x3dc>)
 8003792:	f7fc fd79 	bl	8000288 <__aeabi_dsub>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fc ff2b 	bl	80005f8 <__aeabi_dmul>
 80037a2:	4603      	mov	r3, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	4618      	mov	r0, r3
 80037a8:	4621      	mov	r1, r4
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	4b61      	ldr	r3, [pc, #388]	; (8003934 <ms5607_convert+0x3f4>)
 80037b0:	f7fd f84c 	bl	800084c <__aeabi_ddiv>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	4618      	mov	r0, r3
 80037ba:	4621      	mov	r1, r4
 80037bc:	f7fd fa14 	bl	8000be8 <__aeabi_d2f>
 80037c0:	4603      	mov	r3, r0
 80037c2:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 80037c4:	69b8      	ldr	r0, [r7, #24]
 80037c6:	f7fc febf 	bl	8000548 <__aeabi_f2d>
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	4b53      	ldr	r3, [pc, #332]	; (800391c <ms5607_convert+0x3dc>)
 80037d0:	f7fc fd5a 	bl	8000288 <__aeabi_dsub>
 80037d4:	4603      	mov	r3, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	4618      	mov	r0, r3
 80037da:	4621      	mov	r1, r4
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	f7fc fd54 	bl	800028c <__adddf3>
 80037e4:	4603      	mov	r3, r0
 80037e6:	460c      	mov	r4, r1
 80037e8:	4625      	mov	r5, r4
 80037ea:	461c      	mov	r4, r3
 80037ec:	69b8      	ldr	r0, [r7, #24]
 80037ee:	f7fc feab 	bl	8000548 <__aeabi_f2d>
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	4b49      	ldr	r3, [pc, #292]	; (800391c <ms5607_convert+0x3dc>)
 80037f8:	f7fc fd46 	bl	8000288 <__aeabi_dsub>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4620      	mov	r0, r4
 8003802:	4629      	mov	r1, r5
 8003804:	f7fc fef8 	bl	80005f8 <__aeabi_dmul>
 8003808:	4603      	mov	r3, r0
 800380a:	460c      	mov	r4, r1
 800380c:	4618      	mov	r0, r3
 800380e:	4621      	mov	r1, r4
 8003810:	f7fd f9ea 	bl	8000be8 <__aeabi_d2f>
 8003814:	4603      	mov	r3, r0
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8003818:	edd7 7a06 	vldr	s15, [r7, #24]
 800381c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003938 <ms5607_convert+0x3f8>
 8003820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	f140 8090 	bpl.w	800394c <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 800382c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800382e:	f7fc fe8b 	bl	8000548 <__aeabi_f2d>
 8003832:	4604      	mov	r4, r0
 8003834:	460d      	mov	r5, r1
 8003836:	edd7 7a06 	vldr	s15, [r7, #24]
 800383a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800393c <ms5607_convert+0x3fc>
 800383e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003842:	ee17 0a90 	vmov	r0, s15
 8003846:	f7fc fe7f 	bl	8000548 <__aeabi_f2d>
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <ms5607_convert+0x400>)
 8003850:	f7fc fed2 	bl	80005f8 <__aeabi_dmul>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4690      	mov	r8, r2
 800385a:	4699      	mov	r9, r3
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f7fc fe73 	bl	8000548 <__aeabi_f2d>
 8003862:	a327      	add	r3, pc, #156	; (adr r3, 8003900 <ms5607_convert+0x3c0>)
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f7fc fd10 	bl	800028c <__adddf3>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4640      	mov	r0, r8
 8003872:	4649      	mov	r1, r9
 8003874:	f7fc fec0 	bl	80005f8 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	f7fc fd04 	bl	800028c <__adddf3>
 8003884:	4603      	mov	r3, r0
 8003886:	460c      	mov	r4, r1
 8003888:	4618      	mov	r0, r3
 800388a:	4621      	mov	r1, r4
 800388c:	f7fd f9ac 	bl	8000be8 <__aeabi_d2f>
 8003890:	4603      	mov	r3, r0
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8003894:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003896:	f7fc fe57 	bl	8000548 <__aeabi_f2d>
 800389a:	4604      	mov	r4, r0
 800389c:	460d      	mov	r5, r1
 800389e:	edd7 7a06 	vldr	s15, [r7, #24]
 80038a2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800393c <ms5607_convert+0x3fc>
 80038a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038aa:	ee17 0a90 	vmov	r0, s15
 80038ae:	f7fc fe4b 	bl	8000548 <__aeabi_f2d>
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <ms5607_convert+0x404>)
 80038b8:	f7fc fe9e 	bl	80005f8 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4690      	mov	r8, r2
 80038c2:	4699      	mov	r9, r3
 80038c4:	69b8      	ldr	r0, [r7, #24]
 80038c6:	f7fc fe3f 	bl	8000548 <__aeabi_f2d>
 80038ca:	a30d      	add	r3, pc, #52	; (adr r3, 8003900 <ms5607_convert+0x3c0>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fcdc 	bl	800028c <__adddf3>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4640      	mov	r0, r8
 80038da:	4649      	mov	r1, r9
 80038dc:	f7fc fe8c 	bl	80005f8 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4620      	mov	r0, r4
 80038e6:	4629      	mov	r1, r5
 80038e8:	f7fc fcd0 	bl	800028c <__adddf3>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	4618      	mov	r0, r3
 80038f2:	4621      	mov	r1, r4
 80038f4:	f7fd f978 	bl	8000be8 <__aeabi_d2f>
 80038f8:	4603      	mov	r3, r0
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fc:	e026      	b.n	800394c <ms5607_convert+0x40c>
 80038fe:	bf00      	nop
 8003900:	00000000 	.word	0x00000000
 8003904:	40977000 	.word	0x40977000
 8003908:	40700000 	.word	0x40700000
 800390c:	40500000 	.word	0x40500000
 8003910:	40f00000 	.word	0x40f00000
 8003914:	40600000 	.word	0x40600000
 8003918:	41600000 	.word	0x41600000
 800391c:	409f4000 	.word	0x409f4000
 8003920:	41400000 	.word	0x41400000
 8003924:	40e00000 	.word	0x40e00000
 8003928:	44fa0000 	.word	0x44fa0000
 800392c:	4f000000 	.word	0x4f000000
 8003930:	404e8000 	.word	0x404e8000
 8003934:	40300000 	.word	0x40300000
 8003938:	c4bb8000 	.word	0xc4bb8000
 800393c:	44bb8000 	.word	0x44bb8000
 8003940:	402e0000 	.word	0x402e0000
 8003944:	40200000 	.word	0x40200000
 8003948:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 800394c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003950:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003958:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 800395c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003960:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003968:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 800396c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003970:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003978:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 800397c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003980:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8003948 <ms5607_convert+0x408>
 8003984:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003988:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003996:	edd7 7a07 	vldr	s15, [r7, #28]
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	ee17 0a90 	vmov	r0, s15
 80039a2:	f7fc fdd1 	bl	8000548 <__aeabi_f2d>
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <ms5607_convert+0x4c4>)
 80039ac:	f7fc ff4e 	bl	800084c <__aeabi_ddiv>
 80039b0:	4603      	mov	r3, r0
 80039b2:	460c      	mov	r4, r1
 80039b4:	4625      	mov	r5, r4
 80039b6:	461c      	mov	r4, r3
 80039b8:	6a38      	ldr	r0, [r7, #32]
 80039ba:	f7fc fdc5 	bl	8000548 <__aeabi_f2d>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	f7fc fc5f 	bl	8000288 <__aeabi_dsub>
 80039ca:	4603      	mov	r3, r0
 80039cc:	460c      	mov	r4, r1
 80039ce:	4618      	mov	r0, r3
 80039d0:	4621      	mov	r1, r4
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <ms5607_convert+0x4c8>)
 80039d8:	f7fc ff38 	bl	800084c <__aeabi_ddiv>
 80039dc:	4603      	mov	r3, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	4618      	mov	r0, r3
 80039e2:	4621      	mov	r1, r4
 80039e4:	f7fd f900 	bl	8000be8 <__aeabi_d2f>
 80039e8:	4603      	mov	r3, r0
 80039ea:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	601a      	str	r2, [r3, #0]
	*p = pressure;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 80039f8:	bf00      	nop
 80039fa:	3748      	adds	r7, #72	; 0x48
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a02:	bf00      	nop
 8003a04:	41400000 	.word	0x41400000
 8003a08:	40e00000 	.word	0x40e00000

08003a0c <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f002 fa43 	bl	8005ea4 <HAL_I2C_GetState>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d003      	beq.n	8003a2c <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8003a24:	481f      	ldr	r0, [pc, #124]	; (8003aa4 <sht31_init+0x98>)
 8003a26:	f008 fab3 	bl	800bf90 <puts>
 8003a2a:	e002      	b.n	8003a32 <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8003a2c:	481e      	ldr	r0, [pc, #120]	; (8003aa8 <sht31_init+0x9c>)
 8003a2e:	f008 faaf 	bl	800bf90 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6858      	ldr	r0, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b299      	uxth	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7a1b      	ldrb	r3, [r3, #8]
 8003a40:	220a      	movs	r2, #10
 8003a42:	f002 f901 	bl	8005c48 <HAL_I2C_IsDeviceReady>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8003a50:	4816      	ldr	r0, [pc, #88]	; (8003aac <sht31_init+0xa0>)
 8003a52:	f008 fa9d 	bl	800bf90 <puts>
		printf("Errorcode: %d\n", _ret);
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4815      	ldr	r0, [pc, #84]	; (8003ab0 <sht31_init+0xa4>)
 8003a5c:	f008 fa24 	bl	800bea8 <iprintf>
		return 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e01b      	b.n	8003a9c <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8003a64:	4813      	ldr	r0, [pc, #76]	; (8003ab4 <sht31_init+0xa8>)
 8003a66:	f008 fa93 	bl	800bf90 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8003a6a:	f242 4316 	movw	r3, #9238	; 0x2416
 8003a6e:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8003a70:	89bb      	ldrh	r3, [r7, #12]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8003a7a:	89bb      	ldrh	r3, [r7, #12]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6858      	ldr	r0, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b299      	uxth	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7a1b      	ldrb	r3, [r3, #8]
 8003a8e:	f107 0208 	add.w	r2, r7, #8
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2302      	movs	r3, #2
 8003a96:	f001 fdb3 	bl	8005600 <HAL_I2C_Master_Transmit>
	return 1;
 8003a9a:	2301      	movs	r3, #1
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	0800e2d0 	.word	0x0800e2d0
 8003aa8:	0800e2e0 	.word	0x0800e2e0
 8003aac:	0800e2f0 	.word	0x0800e2f0
 8003ab0:	0800e304 	.word	0x0800e304
 8003ab4:	0800e314 	.word	0x0800e314

08003ab8 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b08d      	sub	sp, #52	; 0x34
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6858      	ldr	r0, [r3, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b299      	uxth	r1, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	7a1b      	ldrb	r3, [r3, #8]
 8003ad2:	f107 0214 	add.w	r2, r7, #20
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2306      	movs	r3, #6
 8003ada:	f001 fe8f 	bl	80057fc <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8003ade:	7d3b      	ldrb	r3, [r7, #20]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	b21a      	sxth	r2, r3
 8003ae4:	7d7b      	ldrb	r3, [r7, #21]
 8003ae6:	b21b      	sxth	r3, r3
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	b21b      	sxth	r3, r3
 8003aec:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	b21a      	sxth	r2, r3
 8003af4:	7e3b      	ldrb	r3, [r7, #24]
 8003af6:	b21b      	sxth	r3, r3
 8003af8:	4313      	orrs	r3, r2
 8003afa:	b21b      	sxth	r3, r3
 8003afc:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 8003afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b08:	ee17 0a90 	vmov	r0, s15
 8003b0c:	f7fc fd1c 	bl	8000548 <__aeabi_f2d>
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <sht31_read+0x128>)
 8003b16:	f7fc fd6f 	bl	80005f8 <__aeabi_dmul>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	4621      	mov	r1, r4
 8003b22:	a32d      	add	r3, pc, #180	; (adr r3, 8003bd8 <sht31_read+0x120>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f7fc fe90 	bl	800084c <__aeabi_ddiv>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	4618      	mov	r0, r3
 8003b32:	4621      	mov	r1, r4
 8003b34:	f7fd f858 	bl	8000be8 <__aeabi_d2f>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8003b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003be4 <sht31_read+0x12c>
 8003b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b4e:	ee17 0a90 	vmov	r0, s15
 8003b52:	f7fc fcf9 	bl	8000548 <__aeabi_f2d>
 8003b56:	a320      	add	r3, pc, #128	; (adr r3, 8003bd8 <sht31_read+0x120>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f7fc fe76 	bl	800084c <__aeabi_ddiv>
 8003b60:	4603      	mov	r3, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	4618      	mov	r0, r3
 8003b66:	4621      	mov	r1, r4
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <sht31_read+0x130>)
 8003b6e:	f7fc fb8b 	bl	8000288 <__aeabi_dsub>
 8003b72:	4603      	mov	r3, r0
 8003b74:	460c      	mov	r4, r1
 8003b76:	4618      	mov	r0, r3
 8003b78:	4621      	mov	r1, r4
 8003b7a:	f7fd f835 	bl	8000be8 <__aeabi_d2f>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	6a3a      	ldr	r2, [r7, #32]
 8003b8e:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b94:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3302      	adds	r3, #2
 8003b9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b9c:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8003b9e:	f242 4316 	movw	r3, #9238	; 0x2416
 8003ba2:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 8003ba4:	8b7b      	ldrh	r3, [r7, #26]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8003bae:	8b7b      	ldrh	r3, [r7, #26]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6858      	ldr	r0, [r3, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b299      	uxth	r1, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	7a1b      	ldrb	r3, [r3, #8]
 8003bc2:	f107 0214 	add.w	r2, r7, #20
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f001 fd19 	bl	8005600 <HAL_I2C_Master_Transmit>

};
 8003bce:	bf00      	nop
 8003bd0:	372c      	adds	r7, #44	; 0x2c
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	40efffe0 	.word	0x40efffe0
 8003be0:	40590000 	.word	0x40590000
 8003be4:	432f0000 	.word	0x432f0000
 8003be8:	40468000 	.word	0x40468000

08003bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bf2:	e003      	b.n	8003bfc <LoopCopyDataInit>

08003bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bfa:	3104      	adds	r1, #4

08003bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bfc:	480b      	ldr	r0, [pc, #44]	; (8003c2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c04:	d3f6      	bcc.n	8003bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c08:	e002      	b.n	8003c10 <LoopFillZerobss>

08003c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c0c:	f842 3b04 	str.w	r3, [r2], #4

08003c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c14:	d3f9      	bcc.n	8003c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c16:	f7fe fdc9 	bl	80027ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1a:	f007 fcb1 	bl	800b580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1e:	f7fd ff1b 	bl	8001a58 <main>
  bx  lr    
 8003c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c28:	0800e6f0 	.word	0x0800e6f0
  ldr  r0, =_sdata
 8003c2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c30:	200002f0 	.word	0x200002f0
  ldr  r2, =_sbss
 8003c34:	200002f0 	.word	0x200002f0
  ldr  r3, = _ebss
 8003c38:	20005c90 	.word	0x20005c90

08003c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c3c:	e7fe      	b.n	8003c3c <ADC_IRQHandler>
	...

08003c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_Init+0x40>)
 8003c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_Init+0x40>)
 8003c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_Init+0x40>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f000 fd8b 	bl	8004784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f000 f808 	bl	8003c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c74:	f7fe fc66 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x54>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_InitTick+0x58>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fda3 	bl	80047ee <HAL_SYSTICK_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00e      	b.n	8003cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d80a      	bhi.n	8003cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc0:	f000 fd6b 	bl	800479a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc4:	4a06      	ldr	r2, [pc, #24]	; (8003ce0 <HAL_InitTick+0x5c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000110 	.word	0x20000110
 8003cdc:	2000011c 	.word	0x2000011c
 8003ce0:	20000118 	.word	0x20000118

08003ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x20>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000011c 	.word	0x2000011c
 8003d08:	20003c1c 	.word	0x20003c1c

08003d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_GetTick+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20003c1c 	.word	0x20003c1c

08003d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7ff ffee 	bl	8003d0c <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3c:	d005      	beq.n	8003d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_Delay+0x40>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d4a:	bf00      	nop
 8003d4c:	f7ff ffde 	bl	8003d0c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d8f7      	bhi.n	8003d4c <HAL_Delay+0x28>
  {
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	2000011c 	.word	0x2000011c

08003d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e033      	b.n	8003de6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fbe8 	bl	800155c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d118      	bne.n	8003dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dae:	f023 0302 	bic.w	r3, r3, #2
 8003db2:	f043 0202 	orr.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa94 	bl	80042e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd6:	e001      	b.n	8003ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_ADC_Start_DMA+0x1e>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0cc      	b.n	8003fa8 <HAL_ADC_Start_DMA+0x1b8>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d018      	beq.n	8003e56 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e34:	4b5e      	ldr	r3, [pc, #376]	; (8003fb0 <HAL_ADC_Start_DMA+0x1c0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5e      	ldr	r2, [pc, #376]	; (8003fb4 <HAL_ADC_Start_DMA+0x1c4>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0c9a      	lsrs	r2, r3, #18
 8003e40:	4613      	mov	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4413      	add	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e48:	e002      	b.n	8003e50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f9      	bne.n	8003e4a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 80a0 	bne.w	8003fa6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f023 0206 	bic.w	r2, r3, #6
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
 8003eb2:	e002      	b.n	8003eba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_ADC_Start_DMA+0x1c8>)
 8003ec4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <HAL_ADC_Start_DMA+0x1cc>)
 8003ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <HAL_ADC_Start_DMA+0x1d0>)
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <HAL_ADC_Start_DMA+0x1d4>)
 8003edc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ef6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f06:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	334c      	adds	r3, #76	; 0x4c
 8003f12:	4619      	mov	r1, r3
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f000 fd24 	bl	8004964 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d12a      	bne.n	8003f7e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <HAL_ADC_Start_DMA+0x1d8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d015      	beq.n	8003f5e <HAL_ADC_Start_DMA+0x16e>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <HAL_ADC_Start_DMA+0x1dc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d105      	bne.n	8003f48 <HAL_ADC_Start_DMA+0x158>
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <HAL_ADC_Start_DMA+0x1c8>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_ADC_Start_DMA+0x1e0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d129      	bne.n	8003fa6 <HAL_ADC_Start_DMA+0x1b6>
 8003f52:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_ADC_Start_DMA+0x1c8>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d823      	bhi.n	8003fa6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11c      	bne.n	8003fa6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	e013      	b.n	8003fa6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <HAL_ADC_Start_DMA+0x1d8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10e      	bne.n	8003fa6 <HAL_ADC_Start_DMA+0x1b6>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fa4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000110 	.word	0x20000110
 8003fb4:	431bde83 	.word	0x431bde83
 8003fb8:	40012300 	.word	0x40012300
 8003fbc:	080044e1 	.word	0x080044e1
 8003fc0:	0800459b 	.word	0x0800459b
 8003fc4:	080045b7 	.word	0x080045b7
 8003fc8:	40012000 	.word	0x40012000
 8003fcc:	40012100 	.word	0x40012100
 8003fd0:	40012200 	.word	0x40012200

08003fd4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_Stop_DMA+0x1a>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e038      	b.n	8004060 <HAL_ADC_Stop_DMA+0x8c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d120      	bne.n	8004056 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004022:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fcf3 	bl	8004a14 <HAL_DMA_Abort>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004040:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1c>
 80040bc:	2302      	movs	r3, #2
 80040be:	e105      	b.n	80042cc <HAL_ADC_ConfigChannel+0x228>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b09      	cmp	r3, #9
 80040ce:	d925      	bls.n	800411c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	3b1e      	subs	r3, #30
 80040e6:	2207      	movs	r2, #7
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43da      	mvns	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	400a      	ands	r2, r1
 80040f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68d9      	ldr	r1, [r3, #12]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	4618      	mov	r0, r3
 8004108:	4603      	mov	r3, r0
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4403      	add	r3, r0
 800410e:	3b1e      	subs	r3, #30
 8004110:	409a      	lsls	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	e022      	b.n	8004162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6919      	ldr	r1, [r3, #16]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	2207      	movs	r2, #7
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	400a      	ands	r2, r1
 800413e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6919      	ldr	r1, [r3, #16]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	4618      	mov	r0, r3
 8004152:	4603      	mov	r3, r0
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4403      	add	r3, r0
 8004158:	409a      	lsls	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b06      	cmp	r3, #6
 8004168:	d824      	bhi.n	80041b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b05      	subs	r3, #5
 800417c:	221f      	movs	r2, #31
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	400a      	ands	r2, r1
 800418a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	4618      	mov	r0, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	3b05      	subs	r3, #5
 80041a6:	fa00 f203 	lsl.w	r2, r0, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
 80041b2:	e04c      	b.n	800424e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d824      	bhi.n	8004206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b23      	subs	r3, #35	; 0x23
 80041ce:	221f      	movs	r2, #31
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43da      	mvns	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	400a      	ands	r2, r1
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	3b23      	subs	r3, #35	; 0x23
 80041f8:	fa00 f203 	lsl.w	r2, r0, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
 8004204:	e023      	b.n	800424e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	3b41      	subs	r3, #65	; 0x41
 8004218:	221f      	movs	r2, #31
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	400a      	ands	r2, r1
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	4618      	mov	r0, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	3b41      	subs	r3, #65	; 0x41
 8004242:	fa00 f203 	lsl.w	r2, r0, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_ADC_ConfigChannel+0x234>)
 8004250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a21      	ldr	r2, [pc, #132]	; (80042dc <HAL_ADC_ConfigChannel+0x238>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d109      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x1cc>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b12      	cmp	r3, #18
 8004262:	d105      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_ADC_ConfigChannel+0x238>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d123      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x21e>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b10      	cmp	r3, #16
 8004280:	d003      	beq.n	800428a <HAL_ADC_ConfigChannel+0x1e6>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b11      	cmp	r3, #17
 8004288:	d11b      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b10      	cmp	r3, #16
 800429c:	d111      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <HAL_ADC_ConfigChannel+0x23c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <HAL_ADC_ConfigChannel+0x240>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	0c9a      	lsrs	r2, r3, #18
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042b4:	e002      	b.n	80042bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f9      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40012300 	.word	0x40012300
 80042dc:	40012000 	.word	0x40012000
 80042e0:	20000110 	.word	0x20000110
 80042e4:	431bde83 	.word	0x431bde83

080042e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042f0:	4b79      	ldr	r3, [pc, #484]	; (80044d8 <ADC_Init+0x1f0>)
 80042f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	021a      	lsls	r2, r3, #8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	4a58      	ldr	r2, [pc, #352]	; (80044dc <ADC_Init+0x1f4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800438e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6899      	ldr	r1, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	e00f      	b.n	80043e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0202 	bic.w	r2, r2, #2
 80043f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7e1b      	ldrb	r3, [r3, #24]
 8004400:	005a      	lsls	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01b      	beq.n	800444c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	3b01      	subs	r3, #1
 8004440:	035a      	lsls	r2, r3, #13
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	e007      	b.n	800445c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	3b01      	subs	r3, #1
 8004478:	051a      	lsls	r2, r3, #20
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6899      	ldr	r1, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800449e:	025a      	lsls	r2, r3, #9
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6899      	ldr	r1, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	029a      	lsls	r2, r3, #10
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40012300 	.word	0x40012300
 80044dc:	0f000001 	.word	0x0f000001

080044e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d13c      	bne.n	8004574 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d12b      	bne.n	800456c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004518:	2b00      	cmp	r3, #0
 800451a:	d127      	bne.n	800456c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004534:	2b00      	cmp	r3, #0
 8004536:	d119      	bne.n	800456c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0220 	bic.w	r2, r2, #32
 8004546:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff fd7b 	bl	8004068 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004572:	e00e      	b.n	8004592 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff fd85 	bl	8004090 <HAL_ADC_ErrorCallback>
}
 8004586:	e004      	b.n	8004592 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff fd67 	bl	800407c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2240      	movs	r2, #64	; 0x40
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f043 0204 	orr.w	r2, r3, #4
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff fd5a 	bl	8004090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <__NVIC_SetPriorityGrouping>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <__NVIC_SetPriorityGrouping+0x44>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004600:	4013      	ands	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800460c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004616:	4a04      	ldr	r2, [pc, #16]	; (8004628 <__NVIC_SetPriorityGrouping+0x44>)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	60d3      	str	r3, [r2, #12]
}
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <__NVIC_GetPriorityGrouping>:
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <__NVIC_GetPriorityGrouping+0x18>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	f003 0307 	and.w	r3, r3, #7
}
 800463a:	4618      	mov	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <__NVIC_EnableIRQ>:
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	2b00      	cmp	r3, #0
 8004658:	db0b      	blt.n	8004672 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	f003 021f 	and.w	r2, r3, #31
 8004660:	4907      	ldr	r1, [pc, #28]	; (8004680 <__NVIC_EnableIRQ+0x38>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2001      	movs	r0, #1
 800466a:	fa00 f202 	lsl.w	r2, r0, r2
 800466e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	e000e100 	.word	0xe000e100

08004684 <__NVIC_SetPriority>:
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	6039      	str	r1, [r7, #0]
 800468e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004694:	2b00      	cmp	r3, #0
 8004696:	db0a      	blt.n	80046ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	490c      	ldr	r1, [pc, #48]	; (80046d0 <__NVIC_SetPriority+0x4c>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	0112      	lsls	r2, r2, #4
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	440b      	add	r3, r1
 80046a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046ac:	e00a      	b.n	80046c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4908      	ldr	r1, [pc, #32]	; (80046d4 <__NVIC_SetPriority+0x50>)
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	3b04      	subs	r3, #4
 80046bc:	0112      	lsls	r2, r2, #4
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	440b      	add	r3, r1
 80046c2:	761a      	strb	r2, [r3, #24]
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	e000e100 	.word	0xe000e100
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <NVIC_EncodePriority>:
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	; 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f1c3 0307 	rsb	r3, r3, #7
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	bf28      	it	cs
 80046f6:	2304      	movcs	r3, #4
 80046f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3304      	adds	r3, #4
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d902      	bls.n	8004708 <NVIC_EncodePriority+0x30>
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3b03      	subs	r3, #3
 8004706:	e000      	b.n	800470a <NVIC_EncodePriority+0x32>
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43da      	mvns	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	401a      	ands	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fa01 f303 	lsl.w	r3, r1, r3
 800472a:	43d9      	mvns	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	4313      	orrs	r3, r2
}
 8004732:	4618      	mov	r0, r3
 8004734:	3724      	adds	r7, #36	; 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <SysTick_Config>:
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3b01      	subs	r3, #1
 800474c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004750:	d301      	bcc.n	8004756 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004752:	2301      	movs	r3, #1
 8004754:	e00f      	b.n	8004776 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004756:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <SysTick_Config+0x40>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800475e:	210f      	movs	r1, #15
 8004760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004764:	f7ff ff8e 	bl	8004684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <SysTick_Config+0x40>)
 800476a:	2200      	movs	r2, #0
 800476c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <SysTick_Config+0x40>)
 8004770:	2207      	movs	r2, #7
 8004772:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	e000e010 	.word	0xe000e010

08004784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ff29 	bl	80045e4 <__NVIC_SetPriorityGrouping>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4603      	mov	r3, r0
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047ac:	f7ff ff3e 	bl	800462c <__NVIC_GetPriorityGrouping>
 80047b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7ff ff8e 	bl	80046d8 <NVIC_EncodePriority>
 80047bc:	4602      	mov	r2, r0
 80047be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff5d 	bl	8004684 <__NVIC_SetPriority>
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff31 	bl	8004648 <__NVIC_EnableIRQ>
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff ffa2 	bl	8004740 <SysTick_Config>
 80047fc:	4603      	mov	r3, r0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004814:	f7ff fa7a 	bl	8003d0c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e099      	b.n	8004958 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004844:	e00f      	b.n	8004866 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004846:	f7ff fa61 	bl	8003d0c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b05      	cmp	r3, #5
 8004852:	d908      	bls.n	8004866 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2203      	movs	r2, #3
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e078      	b.n	8004958 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e8      	bne.n	8004846 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4b38      	ldr	r3, [pc, #224]	; (8004960 <HAL_DMA_Init+0x158>)
 8004880:	4013      	ands	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004892:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d107      	bne.n	80048d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	4313      	orrs	r3, r2
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0307 	bic.w	r3, r3, #7
 80048e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d117      	bne.n	800492a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fadf 	bl	8004ed0 <DMA_CheckFifoParam>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004926:	2301      	movs	r3, #1
 8004928:	e016      	b.n	8004958 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fa96 	bl	8004e64 <DMA_CalcBaseAndBitshift>
 8004938:	4603      	mov	r3, r0
 800493a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	223f      	movs	r2, #63	; 0x3f
 8004942:	409a      	lsls	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	f010803f 	.word	0xf010803f

08004964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_DMA_Start_IT+0x26>
 8004986:	2302      	movs	r3, #2
 8004988:	e040      	b.n	8004a0c <HAL_DMA_Start_IT+0xa8>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d12f      	bne.n	80049fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fa28 	bl	8004e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	223f      	movs	r2, #63	; 0x3f
 80049be:	409a      	lsls	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0216 	orr.w	r2, r2, #22
 80049d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0208 	orr.w	r2, r2, #8
 80049ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e005      	b.n	8004a0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
 8004a08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a22:	f7ff f973 	bl	8003d0c <HAL_GetTick>
 8004a26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d008      	beq.n	8004a46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2280      	movs	r2, #128	; 0x80
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e052      	b.n	8004aec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0216 	bic.w	r2, r2, #22
 8004a54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <HAL_DMA_Abort+0x62>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0208 	bic.w	r2, r2, #8
 8004a84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a96:	e013      	b.n	8004ac0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a98:	f7ff f938 	bl	8003d0c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d90c      	bls.n	8004ac0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e015      	b.n	8004aec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e4      	bne.n	8004a98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	223f      	movs	r2, #63	; 0x3f
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b00:	4b92      	ldr	r3, [pc, #584]	; (8004d4c <HAL_DMA_IRQHandler+0x258>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a92      	ldr	r2, [pc, #584]	; (8004d50 <HAL_DMA_IRQHandler+0x25c>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	2208      	movs	r2, #8
 8004b20:	409a      	lsls	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01a      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	f043 0201 	orr.w	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	2201      	movs	r2, #1
 8004b66:	409a      	lsls	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	2201      	movs	r2, #1
 8004b84:	409a      	lsls	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f043 0202 	orr.w	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d012      	beq.n	8004bcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	2204      	movs	r2, #4
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d043      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d03c      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	2210      	movs	r2, #16
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d018      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d024      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
 8004c22:	e01f      	b.n	8004c64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
 8004c34:	e016      	b.n	8004c64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0208 	bic.w	r2, r2, #8
 8004c52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	2220      	movs	r2, #32
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 808e 	beq.w	8004d92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8086 	beq.w	8004d92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d136      	bne.n	8004d0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0216 	bic.w	r2, r2, #22
 8004cac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <HAL_DMA_IRQHandler+0x1da>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0208 	bic.w	r2, r2, #8
 8004cdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	223f      	movs	r2, #63	; 0x3f
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d07d      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
        }
        return;
 8004d0a:	e078      	b.n	8004dfe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01c      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d030      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
 8004d38:	e02b      	b.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d027      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e022      	b.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
 8004d4c:	20000110 	.word	0x20000110
 8004d50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10f      	bne.n	8004d82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0210 	bic.w	r2, r2, #16
 8004d70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d032      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d022      	beq.n	8004dec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2205      	movs	r2, #5
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d307      	bcc.n	8004dda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f2      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x2ca>
 8004dd8:	e000      	b.n	8004ddc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004dda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e000      	b.n	8004e00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004dfe:	bf00      	nop
    }
  }
}
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d108      	bne.n	8004e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e46:	e007      	b.n	8004e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	60da      	str	r2, [r3, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	3b10      	subs	r3, #16
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <DMA_CalcBaseAndBitshift+0x68>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d909      	bls.n	8004ea6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ea4:	e007      	b.n	8004eb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	aaaaaaab 	.word	0xaaaaaaab
 8004ecc:	0800e384 	.word	0x0800e384

08004ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d11f      	bne.n	8004f2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d855      	bhi.n	8004f9c <DMA_CheckFifoParam+0xcc>
 8004ef0:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <DMA_CheckFifoParam+0x28>)
 8004ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef6:	bf00      	nop
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f1b 	.word	0x08004f1b
 8004f00:	08004f09 	.word	0x08004f09
 8004f04:	08004f9d 	.word	0x08004f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d045      	beq.n	8004fa0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f18:	e042      	b.n	8004fa0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f22:	d13f      	bne.n	8004fa4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f28:	e03c      	b.n	8004fa4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f32:	d121      	bne.n	8004f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d836      	bhi.n	8004fa8 <DMA_CheckFifoParam+0xd8>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <DMA_CheckFifoParam+0x70>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f57 	.word	0x08004f57
 8004f48:	08004f51 	.word	0x08004f51
 8004f4c:	08004f69 	.word	0x08004f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      break;
 8004f54:	e02f      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d024      	beq.n	8004fac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f66:	e021      	b.n	8004fac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f70:	d11e      	bne.n	8004fb0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f76:	e01b      	b.n	8004fb0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d902      	bls.n	8004f84 <DMA_CheckFifoParam+0xb4>
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d003      	beq.n	8004f8a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f82:	e018      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e015      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9a:	e00b      	b.n	8004fb4 <DMA_CheckFifoParam+0xe4>
      break;
 8004f9c:	bf00      	nop
 8004f9e:	e00a      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fa0:	bf00      	nop
 8004fa2:	e008      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fa4:	bf00      	nop
 8004fa6:	e006      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fa8:	bf00      	nop
 8004faa:	e004      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fac:	bf00      	nop
 8004fae:	e002      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      break;   
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fb4:	bf00      	nop
    }
  } 
  
  return status; 
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e16b      	b.n	80052b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	f040 815a 	bne.w	80052b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d00b      	beq.n	800501e <HAL_GPIO_Init+0x5a>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d007      	beq.n	800501e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005012:	2b11      	cmp	r3, #17
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b12      	cmp	r3, #18
 800501c:	d130      	bne.n	8005080 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	2203      	movs	r2, #3
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005054:	2201      	movs	r2, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 0201 	and.w	r2, r3, #1
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2203      	movs	r2, #3
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d003      	beq.n	80050c0 <HAL_GPIO_Init+0xfc>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b12      	cmp	r3, #18
 80050be:	d123      	bne.n	8005108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	08da      	lsrs	r2, r3, #3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3208      	adds	r2, #8
 80050c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	220f      	movs	r2, #15
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	08da      	lsrs	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3208      	adds	r2, #8
 8005102:	69b9      	ldr	r1, [r7, #24]
 8005104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	2203      	movs	r2, #3
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 0203 	and.w	r2, r3, #3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4313      	orrs	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80b4 	beq.w	80052b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	4b5f      	ldr	r3, [pc, #380]	; (80052cc <HAL_GPIO_Init+0x308>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	4a5e      	ldr	r2, [pc, #376]	; (80052cc <HAL_GPIO_Init+0x308>)
 8005154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005158:	6453      	str	r3, [r2, #68]	; 0x44
 800515a:	4b5c      	ldr	r3, [pc, #368]	; (80052cc <HAL_GPIO_Init+0x308>)
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005166:	4a5a      	ldr	r2, [pc, #360]	; (80052d0 <HAL_GPIO_Init+0x30c>)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	3302      	adds	r3, #2
 800516e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	220f      	movs	r2, #15
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a51      	ldr	r2, [pc, #324]	; (80052d4 <HAL_GPIO_Init+0x310>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02b      	beq.n	80051ea <HAL_GPIO_Init+0x226>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a50      	ldr	r2, [pc, #320]	; (80052d8 <HAL_GPIO_Init+0x314>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d025      	beq.n	80051e6 <HAL_GPIO_Init+0x222>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4f      	ldr	r2, [pc, #316]	; (80052dc <HAL_GPIO_Init+0x318>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01f      	beq.n	80051e2 <HAL_GPIO_Init+0x21e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4e      	ldr	r2, [pc, #312]	; (80052e0 <HAL_GPIO_Init+0x31c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d019      	beq.n	80051de <HAL_GPIO_Init+0x21a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4d      	ldr	r2, [pc, #308]	; (80052e4 <HAL_GPIO_Init+0x320>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <HAL_GPIO_Init+0x216>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4c      	ldr	r2, [pc, #304]	; (80052e8 <HAL_GPIO_Init+0x324>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00d      	beq.n	80051d6 <HAL_GPIO_Init+0x212>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a4b      	ldr	r2, [pc, #300]	; (80052ec <HAL_GPIO_Init+0x328>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <HAL_GPIO_Init+0x20e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a4a      	ldr	r2, [pc, #296]	; (80052f0 <HAL_GPIO_Init+0x32c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d101      	bne.n	80051ce <HAL_GPIO_Init+0x20a>
 80051ca:	2307      	movs	r3, #7
 80051cc:	e00e      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051ce:	2308      	movs	r3, #8
 80051d0:	e00c      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051d2:	2306      	movs	r3, #6
 80051d4:	e00a      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051d6:	2305      	movs	r3, #5
 80051d8:	e008      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051da:	2304      	movs	r3, #4
 80051dc:	e006      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051de:	2303      	movs	r3, #3
 80051e0:	e004      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e002      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_GPIO_Init+0x228>
 80051ea:	2300      	movs	r3, #0
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	f002 0203 	and.w	r2, r2, #3
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	4093      	lsls	r3, r2
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051fc:	4934      	ldr	r1, [pc, #208]	; (80052d0 <HAL_GPIO_Init+0x30c>)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	3302      	adds	r3, #2
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800520a:	4b3a      	ldr	r3, [pc, #232]	; (80052f4 <HAL_GPIO_Init+0x330>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800522e:	4a31      	ldr	r2, [pc, #196]	; (80052f4 <HAL_GPIO_Init+0x330>)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005234:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <HAL_GPIO_Init+0x330>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005258:	4a26      	ldr	r2, [pc, #152]	; (80052f4 <HAL_GPIO_Init+0x330>)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800525e:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <HAL_GPIO_Init+0x330>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005282:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <HAL_GPIO_Init+0x330>)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005288:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <HAL_GPIO_Init+0x330>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052ac:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <HAL_GPIO_Init+0x330>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	f67f ae90 	bls.w	8004fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052c0:	bf00      	nop
 80052c2:	3724      	adds	r7, #36	; 0x24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40013800 	.word	0x40013800
 80052d4:	40020000 	.word	0x40020000
 80052d8:	40020400 	.word	0x40020400
 80052dc:	40020800 	.word	0x40020800
 80052e0:	40020c00 	.word	0x40020c00
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40021400 	.word	0x40021400
 80052ec:	40021800 	.word	0x40021800
 80052f0:	40021c00 	.word	0x40021c00
 80052f4:	40013c00 	.word	0x40013c00

080052f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	e001      	b.n	800531a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]
 8005334:	4613      	mov	r3, r2
 8005336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005338:	787b      	ldrb	r3, [r7, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800533e:	887a      	ldrh	r2, [r7, #2]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005344:	e003      	b.n	800534e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005346:	887b      	ldrh	r3, [r7, #2]
 8005348:	041a      	lsls	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	619a      	str	r2, [r3, #24]
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695a      	ldr	r2, [r3, #20]
 800536a:	887b      	ldrh	r3, [r7, #2]
 800536c:	401a      	ands	r2, r3
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	429a      	cmp	r2, r3
 8005372:	d104      	bne.n	800537e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	041a      	lsls	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800537c:	e002      	b.n	8005384 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800537e:	887a      	ldrh	r2, [r7, #2]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	619a      	str	r2, [r3, #24]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e11f      	b.n	80055e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fad2 	bl	8001960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	; 0x24
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053f4:	f001 fca4 	bl	8006d40 <HAL_RCC_GetPCLK1Freq>
 80053f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4a7b      	ldr	r2, [pc, #492]	; (80055ec <HAL_I2C_Init+0x25c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d807      	bhi.n	8005414 <HAL_I2C_Init+0x84>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a7a      	ldr	r2, [pc, #488]	; (80055f0 <HAL_I2C_Init+0x260>)
 8005408:	4293      	cmp	r3, r2
 800540a:	bf94      	ite	ls
 800540c:	2301      	movls	r3, #1
 800540e:	2300      	movhi	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e006      	b.n	8005422 <HAL_I2C_Init+0x92>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a77      	ldr	r2, [pc, #476]	; (80055f4 <HAL_I2C_Init+0x264>)
 8005418:	4293      	cmp	r3, r2
 800541a:	bf94      	ite	ls
 800541c:	2301      	movls	r3, #1
 800541e:	2300      	movhi	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0db      	b.n	80055e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a72      	ldr	r2, [pc, #456]	; (80055f8 <HAL_I2C_Init+0x268>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0c9b      	lsrs	r3, r3, #18
 8005434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a64      	ldr	r2, [pc, #400]	; (80055ec <HAL_I2C_Init+0x25c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d802      	bhi.n	8005464 <HAL_I2C_Init+0xd4>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3301      	adds	r3, #1
 8005462:	e009      	b.n	8005478 <HAL_I2C_Init+0xe8>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800546a:	fb02 f303 	mul.w	r3, r2, r3
 800546e:	4a63      	ldr	r2, [pc, #396]	; (80055fc <HAL_I2C_Init+0x26c>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	099b      	lsrs	r3, r3, #6
 8005476:	3301      	adds	r3, #1
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	430b      	orrs	r3, r1
 800547e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800548a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4956      	ldr	r1, [pc, #344]	; (80055ec <HAL_I2C_Init+0x25c>)
 8005494:	428b      	cmp	r3, r1
 8005496:	d80d      	bhi.n	80054b4 <HAL_I2C_Init+0x124>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1e59      	subs	r1, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80054a6:	3301      	adds	r3, #1
 80054a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	bf38      	it	cc
 80054b0:	2304      	movcc	r3, #4
 80054b2:	e04f      	b.n	8005554 <HAL_I2C_Init+0x1c4>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d111      	bne.n	80054e0 <HAL_I2C_Init+0x150>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1e58      	subs	r0, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6859      	ldr	r1, [r3, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	440b      	add	r3, r1
 80054ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ce:	3301      	adds	r3, #1
 80054d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e012      	b.n	8005506 <HAL_I2C_Init+0x176>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1e58      	subs	r0, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	0099      	lsls	r1, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054f6:	3301      	adds	r3, #1
 80054f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_I2C_Init+0x17e>
 800550a:	2301      	movs	r3, #1
 800550c:	e022      	b.n	8005554 <HAL_I2C_Init+0x1c4>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10e      	bne.n	8005534 <HAL_I2C_Init+0x1a4>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1e58      	subs	r0, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6859      	ldr	r1, [r3, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	440b      	add	r3, r1
 8005524:	fbb0 f3f3 	udiv	r3, r0, r3
 8005528:	3301      	adds	r3, #1
 800552a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	e00f      	b.n	8005554 <HAL_I2C_Init+0x1c4>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1e58      	subs	r0, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	0099      	lsls	r1, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	fbb0 f3f3 	udiv	r3, r0, r3
 800554a:	3301      	adds	r3, #1
 800554c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	6809      	ldr	r1, [r1, #0]
 8005558:	4313      	orrs	r3, r2
 800555a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6911      	ldr	r1, [r2, #16]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68d2      	ldr	r2, [r2, #12]
 800558e:	4311      	orrs	r1, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	430b      	orrs	r3, r1
 8005596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	000186a0 	.word	0x000186a0
 80055f0:	001e847f 	.word	0x001e847f
 80055f4:	003d08ff 	.word	0x003d08ff
 80055f8:	431bde83 	.word	0x431bde83
 80055fc:	10624dd3 	.word	0x10624dd3

08005600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	461a      	mov	r2, r3
 800560c:	460b      	mov	r3, r1
 800560e:	817b      	strh	r3, [r7, #10]
 8005610:	4613      	mov	r3, r2
 8005612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005614:	f7fe fb7a 	bl	8003d0c <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	f040 80e0 	bne.w	80057e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	2319      	movs	r3, #25
 800562e:	2201      	movs	r2, #1
 8005630:	4970      	ldr	r1, [pc, #448]	; (80057f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fd92 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
 8005640:	e0d3      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_I2C_Master_Transmit+0x50>
 800564c:	2302      	movs	r3, #2
 800564e:	e0cc      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b01      	cmp	r3, #1
 8005664:	d007      	beq.n	8005676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2221      	movs	r2, #33	; 0x21
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2210      	movs	r2, #16
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	893a      	ldrh	r2, [r7, #8]
 80056a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a50      	ldr	r2, [pc, #320]	; (80057f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056b8:	8979      	ldrh	r1, [r7, #10]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fbfe 	bl	8005ec0 <I2C_MasterRequestWrite>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e08d      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ce:	2300      	movs	r3, #0
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056e4:	e066      	b.n	80057b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fe0c 	bl	8006308 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d107      	bne.n	800570e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e06b      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d11b      	bne.n	8005788 <HAL_I2C_Master_Transmit+0x188>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	6a39      	ldr	r1, [r7, #32]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fdfc 	bl	800638a <I2C_WaitOnBTFFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	2b04      	cmp	r3, #4
 800579e:	d107      	bne.n	80057b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e01a      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d194      	bne.n	80056e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	00100002 	.word	0x00100002
 80057f8:	ffff0000 	.word	0xffff0000

080057fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	461a      	mov	r2, r3
 8005808:	460b      	mov	r3, r1
 800580a:	817b      	strh	r3, [r7, #10]
 800580c:	4613      	mov	r3, r2
 800580e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005810:	f7fe fa7c 	bl	8003d0c <HAL_GetTick>
 8005814:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b20      	cmp	r3, #32
 8005820:	f040 820b 	bne.w	8005c3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2319      	movs	r3, #25
 800582a:	2201      	movs	r2, #1
 800582c:	497c      	ldr	r1, [pc, #496]	; (8005a20 <HAL_I2C_Master_Receive+0x224>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fc94 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800583a:	2302      	movs	r3, #2
 800583c:	e1fe      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_I2C_Master_Receive+0x50>
 8005848:	2302      	movs	r3, #2
 800584a:	e1f7      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d007      	beq.n	8005872 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2222      	movs	r2, #34	; 0x22
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2210      	movs	r2, #16
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	893a      	ldrh	r2, [r7, #8]
 80058a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a5c      	ldr	r2, [pc, #368]	; (8005a24 <HAL_I2C_Master_Receive+0x228>)
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058b4:	8979      	ldrh	r1, [r7, #10]
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fb82 	bl	8005fc4 <I2C_MasterRequestRead>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e1b8      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d113      	bne.n	80058fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d2:	2300      	movs	r3, #0
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e18c      	b.n	8005c14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d11b      	bne.n	800593a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e16c      	b.n	8005c14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	2b02      	cmp	r3, #2
 8005940:	d11b      	bne.n	800597a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	e14c      	b.n	8005c14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059a0:	e138      	b.n	8005c14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	f200 80f1 	bhi.w	8005b8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d123      	bne.n	80059fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fd27 	bl	800640c <I2C_WaitOnRXNEFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e139      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059fa:	e10b      	b.n	8005c14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d14e      	bne.n	8005aa2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	4906      	ldr	r1, [pc, #24]	; (8005a28 <HAL_I2C_Master_Receive+0x22c>)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fba4 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e10e      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
 8005a1e:	bf00      	nop
 8005a20:	00100002 	.word	0x00100002
 8005a24:	ffff0000 	.word	0xffff0000
 8005a28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aa0:	e0b8      	b.n	8005c14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	4966      	ldr	r1, [pc, #408]	; (8005c44 <HAL_I2C_Master_Receive+0x448>)
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fb55 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0bf      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	2200      	movs	r2, #0
 8005b06:	494f      	ldr	r1, [pc, #316]	; (8005c44 <HAL_I2C_Master_Receive+0x448>)
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fb27 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e091      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b8c:	e042      	b.n	8005c14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fc3a 	bl	800640c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e04c      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d118      	bne.n	8005c14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f aec2 	bne.w	80059a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e000      	b.n	8005c3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3728      	adds	r7, #40	; 0x28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	00010004 	.word	0x00010004

08005c48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	460b      	mov	r3, r1
 8005c56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005c58:	f7fe f858 	bl	8003d0c <HAL_GetTick>
 8005c5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	f040 8110 	bne.w	8005e90 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2319      	movs	r3, #25
 8005c76:	2201      	movs	r2, #1
 8005c78:	4988      	ldr	r1, [pc, #544]	; (8005e9c <HAL_I2C_IsDeviceReady+0x254>)
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fa6e 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
 8005c88:	e103      	b.n	8005e92 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_I2C_IsDeviceReady+0x50>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e0fc      	b.n	8005e92 <HAL_I2C_IsDeviceReady+0x24a>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d007      	beq.n	8005cbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ccc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2224      	movs	r2, #36	; 0x24
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a70      	ldr	r2, [pc, #448]	; (8005ea0 <HAL_I2C_IsDeviceReady+0x258>)
 8005ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fa2c 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e0b6      	b.n	8005e92 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d24:	897b      	ldrh	r3, [r7, #10]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d32:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005d34:	f7fd ffea 	bl	8003d0c <HAL_GetTick>
 8005d38:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d68:	e025      	b.n	8005db6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d6a:	f7fd ffcf 	bl	8003d0c <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d302      	bcc.n	8005d80 <HAL_I2C_IsDeviceReady+0x138>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	22a0      	movs	r2, #160	; 0xa0
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dac:	bf0c      	ite	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	2300      	movne	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8005dc0:	d005      	beq.n	8005dce <HAL_I2C_IsDeviceReady+0x186>
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <HAL_I2C_IsDeviceReady+0x186>
 8005dc8:	7dbb      	ldrb	r3, [r7, #22]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0cd      	beq.n	8005d6a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d129      	bne.n	8005e38 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	2319      	movs	r3, #25
 8005e10:	2201      	movs	r2, #1
 8005e12:	4922      	ldr	r1, [pc, #136]	; (8005e9c <HAL_I2C_IsDeviceReady+0x254>)
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f9a1 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e036      	b.n	8005e92 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e02c      	b.n	8005e92 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e46:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e50:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2319      	movs	r3, #25
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4910      	ldr	r1, [pc, #64]	; (8005e9c <HAL_I2C_IsDeviceReady+0x254>)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f97d 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e012      	b.n	8005e92 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	f4ff af33 	bcc.w	8005ce2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	00100002 	.word	0x00100002
 8005ea0:	ffff0000 	.word	0xffff0000

08005ea4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d006      	beq.n	8005eea <I2C_MasterRequestWrite+0x2a>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d003      	beq.n	8005eea <I2C_MasterRequestWrite+0x2a>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ee8:	d108      	bne.n	8005efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e00b      	b.n	8005f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	2b12      	cmp	r3, #18
 8005f02:	d107      	bne.n	8005f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f91b 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00c      	beq.n	8005f46 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e035      	b.n	8005fb2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f4e:	d108      	bne.n	8005f62 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f50:	897b      	ldrh	r3, [r7, #10]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f5e:	611a      	str	r2, [r3, #16]
 8005f60:	e01b      	b.n	8005f9a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f62:	897b      	ldrh	r3, [r7, #10]
 8005f64:	11db      	asrs	r3, r3, #7
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	f003 0306 	and.w	r3, r3, #6
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f063 030f 	orn	r3, r3, #15
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	490f      	ldr	r1, [pc, #60]	; (8005fbc <I2C_MasterRequestWrite+0xfc>)
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f942 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e010      	b.n	8005fb2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f90:	897b      	ldrh	r3, [r7, #10]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	4908      	ldr	r1, [pc, #32]	; (8005fc0 <I2C_MasterRequestWrite+0x100>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f932 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	00010008 	.word	0x00010008
 8005fc0:	00010002 	.word	0x00010002

08005fc4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fe8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d006      	beq.n	8005ffe <I2C_MasterRequestRead+0x3a>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d003      	beq.n	8005ffe <I2C_MasterRequestRead+0x3a>
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ffc:	d108      	bne.n	8006010 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e00b      	b.n	8006028 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	2b11      	cmp	r3, #17
 8006016:	d107      	bne.n	8006028 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006026:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f891 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e078      	b.n	800614c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006062:	d108      	bne.n	8006076 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006064:	897b      	ldrh	r3, [r7, #10]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	611a      	str	r2, [r3, #16]
 8006074:	e05e      	b.n	8006134 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006076:	897b      	ldrh	r3, [r7, #10]
 8006078:	11db      	asrs	r3, r3, #7
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f003 0306 	and.w	r3, r3, #6
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f063 030f 	orn	r3, r3, #15
 8006086:	b2da      	uxtb	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	4930      	ldr	r1, [pc, #192]	; (8006154 <I2C_MasterRequestRead+0x190>)
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f8b8 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e053      	b.n	800614c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060a4:	897b      	ldrh	r3, [r7, #10]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4929      	ldr	r1, [pc, #164]	; (8006158 <I2C_MasterRequestRead+0x194>)
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f8a8 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e043      	b.n	800614c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f830 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e017      	b.n	800614c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800611c:	897b      	ldrh	r3, [r7, #10]
 800611e:	11db      	asrs	r3, r3, #7
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f003 0306 	and.w	r3, r3, #6
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f063 030e 	orn	r3, r3, #14
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4907      	ldr	r1, [pc, #28]	; (8006158 <I2C_MasterRequestRead+0x194>)
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f865 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	00010008 	.word	0x00010008
 8006158:	00010002 	.word	0x00010002

0800615c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	4613      	mov	r3, r2
 800616a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800616c:	e025      	b.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006174:	d021      	beq.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fd fdc9 	bl	8003d0c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e023      	b.n	8006202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d10d      	bne.n	80061e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	43da      	mvns	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4013      	ands	r3, r2
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	e00c      	b.n	80061fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf0c      	ite	eq
 80061f2:	2301      	moveq	r3, #1
 80061f4:	2300      	movne	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d0b6      	beq.n	800616e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006218:	e051      	b.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d123      	bne.n	8006272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006242:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f043 0204 	orr.w	r2, r3, #4
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e046      	b.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006278:	d021      	beq.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627a:	f7fd fd47 	bl	8003d0c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d302      	bcc.n	8006290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d116      	bne.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e020      	b.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10c      	bne.n	80062e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	43da      	mvns	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4013      	ands	r3, r2
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	e00b      	b.n	80062fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	43da      	mvns	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d18d      	bne.n	800621a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006314:	e02d      	b.n	8006372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f8ce 	bl	80064b8 <I2C_IsAcknowledgeFailed>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e02d      	b.n	8006382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632c:	d021      	beq.n	8006372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fd fced 	bl	8003d0c <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d116      	bne.n	8006372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e007      	b.n	8006382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637c:	2b80      	cmp	r3, #128	; 0x80
 800637e:	d1ca      	bne.n	8006316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006396:	e02d      	b.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f88d 	bl	80064b8 <I2C_IsAcknowledgeFailed>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e02d      	b.n	8006404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ae:	d021      	beq.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b0:	f7fd fcac 	bl	8003d0c <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e007      	b.n	8006404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d1ca      	bne.n	8006398 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006418:	e042      	b.n	80064a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b10      	cmp	r3, #16
 8006426:	d119      	bne.n	800645c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0210 	mvn.w	r2, #16
 8006430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e029      	b.n	80064b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645c:	f7fd fc56 	bl	8003d0c <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d116      	bne.n	80064a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e007      	b.n	80064b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d1b5      	bne.n	800641a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ce:	d11b      	bne.n	8006508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	f043 0204 	orr.w	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e25b      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d075      	beq.n	8006622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006536:	4ba3      	ldr	r3, [pc, #652]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b04      	cmp	r3, #4
 8006540:	d00c      	beq.n	800655c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006542:	4ba0      	ldr	r3, [pc, #640]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800654a:	2b08      	cmp	r3, #8
 800654c:	d112      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800654e:	4b9d      	ldr	r3, [pc, #628]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655a:	d10b      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655c:	4b99      	ldr	r3, [pc, #612]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05b      	beq.n	8006620 <HAL_RCC_OscConfig+0x108>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d157      	bne.n	8006620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e236      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d106      	bne.n	800658c <HAL_RCC_OscConfig+0x74>
 800657e:	4b91      	ldr	r3, [pc, #580]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a90      	ldr	r2, [pc, #576]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e01d      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x98>
 8006596:	4b8b      	ldr	r3, [pc, #556]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a8a      	ldr	r2, [pc, #552]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800659c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	4b88      	ldr	r3, [pc, #544]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a87      	ldr	r2, [pc, #540]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e00b      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 80065b0:	4b84      	ldr	r3, [pc, #528]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a83      	ldr	r2, [pc, #524]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b81      	ldr	r3, [pc, #516]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a80      	ldr	r2, [pc, #512]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d013      	beq.n	80065f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fd fb9c 	bl	8003d0c <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fd fb98 	bl	8003d0c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b64      	cmp	r3, #100	; 0x64
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e1fb      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0xc0>
 80065f6:	e014      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fd fb88 	bl	8003d0c <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006600:	f7fd fb84 	bl	8003d0c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	; 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e1e7      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006612:	4b6c      	ldr	r3, [pc, #432]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0xe8>
 800661e:	e000      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d063      	beq.n	80066f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800662e:	4b65      	ldr	r3, [pc, #404]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663a:	4b62      	ldr	r3, [pc, #392]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006642:	2b08      	cmp	r3, #8
 8006644:	d11c      	bne.n	8006680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006646:	4b5f      	ldr	r3, [pc, #380]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d116      	bne.n	8006680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006652:	4b5c      	ldr	r3, [pc, #368]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_RCC_OscConfig+0x152>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d001      	beq.n	800666a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e1bb      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666a:	4b56      	ldr	r3, [pc, #344]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4952      	ldr	r1, [pc, #328]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800667e:	e03a      	b.n	80066f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006688:	4b4f      	ldr	r3, [pc, #316]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fd fb3d 	bl	8003d0c <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006696:	f7fd fb39 	bl	8003d0c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e19c      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a8:	4b46      	ldr	r3, [pc, #280]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b4:	4b43      	ldr	r3, [pc, #268]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4940      	ldr	r1, [pc, #256]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]
 80066c8:	e015      	b.n	80066f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ca:	4b3f      	ldr	r3, [pc, #252]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d0:	f7fd fb1c 	bl	8003d0c <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d8:	f7fd fb18 	bl	8003d0c <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e17b      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ea:	4b36      	ldr	r3, [pc, #216]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f0      	bne.n	80066d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d030      	beq.n	8006764 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d016      	beq.n	8006738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800670a:	4b30      	ldr	r3, [pc, #192]	; (80067cc <HAL_RCC_OscConfig+0x2b4>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7fd fafc 	bl	8003d0c <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006718:	f7fd faf8 	bl	8003d0c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e15b      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x200>
 8006736:	e015      	b.n	8006764 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006738:	4b24      	ldr	r3, [pc, #144]	; (80067cc <HAL_RCC_OscConfig+0x2b4>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800673e:	f7fd fae5 	bl	8003d0c <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006746:	f7fd fae1 	bl	8003d0c <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e144      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006758:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800675a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f0      	bne.n	8006746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80a0 	beq.w	80068b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	4a0e      	ldr	r2, [pc, #56]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6413      	str	r3, [r2, #64]	; 0x40
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800679e:	2301      	movs	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d121      	bne.n	80067f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ba:	f7fd faa7 	bl	8003d0c <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c0:	e011      	b.n	80067e6 <HAL_RCC_OscConfig+0x2ce>
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	42470e80 	.word	0x42470e80
 80067d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d4:	f7fd fa9a 	bl	8003d0c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e0fd      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e6:	4b81      	ldr	r3, [pc, #516]	; (80069ec <HAL_RCC_OscConfig+0x4d4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d106      	bne.n	8006808 <HAL_RCC_OscConfig+0x2f0>
 80067fa:	4b7d      	ldr	r3, [pc, #500]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a7c      	ldr	r2, [pc, #496]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
 8006806:	e01c      	b.n	8006842 <HAL_RCC_OscConfig+0x32a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b05      	cmp	r3, #5
 800680e:	d10c      	bne.n	800682a <HAL_RCC_OscConfig+0x312>
 8006810:	4b77      	ldr	r3, [pc, #476]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a76      	ldr	r2, [pc, #472]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006816:	f043 0304 	orr.w	r3, r3, #4
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
 800681c:	4b74      	ldr	r3, [pc, #464]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a73      	ldr	r2, [pc, #460]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
 8006828:	e00b      	b.n	8006842 <HAL_RCC_OscConfig+0x32a>
 800682a:	4b71      	ldr	r3, [pc, #452]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	4a70      	ldr	r2, [pc, #448]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	6713      	str	r3, [r2, #112]	; 0x70
 8006836:	4b6e      	ldr	r3, [pc, #440]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	4a6d      	ldr	r2, [pc, #436]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800683c:	f023 0304 	bic.w	r3, r3, #4
 8006840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d015      	beq.n	8006876 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fd fa5f 	bl	8003d0c <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006850:	e00a      	b.n	8006868 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fd fa5b 	bl	8003d0c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e0bc      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006868:	4b61      	ldr	r3, [pc, #388]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0ee      	beq.n	8006852 <HAL_RCC_OscConfig+0x33a>
 8006874:	e014      	b.n	80068a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006876:	f7fd fa49 	bl	8003d0c <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800687c:	e00a      	b.n	8006894 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800687e:	f7fd fa45 	bl	8003d0c <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f241 3288 	movw	r2, #5000	; 0x1388
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e0a6      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006894:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1ee      	bne.n	800687e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a6:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	4a51      	ldr	r2, [pc, #324]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8092 	beq.w	80069e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068bc:	4b4c      	ldr	r3, [pc, #304]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d05c      	beq.n	8006982 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d141      	bne.n	8006954 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d0:	4b48      	ldr	r3, [pc, #288]	; (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d6:	f7fd fa19 	bl	8003d0c <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068de:	f7fd fa15 	bl	8003d0c <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e078      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f0:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f0      	bne.n	80068de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	019b      	lsls	r3, r3, #6
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	3b01      	subs	r3, #1
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	061b      	lsls	r3, r3, #24
 8006920:	4933      	ldr	r1, [pc, #204]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006922:	4313      	orrs	r3, r2
 8006924:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006926:	4b33      	ldr	r3, [pc, #204]	; (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006928:	2201      	movs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd f9ee 	bl	8003d0c <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006934:	f7fd f9ea 	bl	8003d0c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e04d      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006946:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f0      	beq.n	8006934 <HAL_RCC_OscConfig+0x41c>
 8006952:	e045      	b.n	80069e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006954:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695a:	f7fd f9d7 	bl	8003d0c <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006962:	f7fd f9d3 	bl	8003d0c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e036      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006974:	4b1e      	ldr	r3, [pc, #120]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <HAL_RCC_OscConfig+0x44a>
 8006980:	e02e      	b.n	80069e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e029      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800698e:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <HAL_RCC_OscConfig+0x4d8>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d11c      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d115      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069b6:	4013      	ands	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10d      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d106      	bne.n	80069dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40007000 	.word	0x40007000
 80069f0:	40023800 	.word	0x40023800
 80069f4:	42470060 	.word	0x42470060

080069f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0cc      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a0c:	4b68      	ldr	r3, [pc, #416]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d90c      	bls.n	8006a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1a:	4b65      	ldr	r3, [pc, #404]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a22:	4b63      	ldr	r3, [pc, #396]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d001      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0b8      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d020      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a4c:	4b59      	ldr	r3, [pc, #356]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4a58      	ldr	r2, [pc, #352]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a64:	4b53      	ldr	r3, [pc, #332]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	4a52      	ldr	r2, [pc, #328]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a70:	4b50      	ldr	r3, [pc, #320]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	494d      	ldr	r1, [pc, #308]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d044      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d107      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a96:	4b47      	ldr	r3, [pc, #284]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d119      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e07f      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d003      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab6:	4b3f      	ldr	r3, [pc, #252]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e06f      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac6:	4b3b      	ldr	r3, [pc, #236]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e067      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ad6:	4b37      	ldr	r3, [pc, #220]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f023 0203 	bic.w	r2, r3, #3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4934      	ldr	r1, [pc, #208]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ae8:	f7fd f910 	bl	8003d0c <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aee:	e00a      	b.n	8006b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af0:	f7fd f90c 	bl	8003d0c <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e04f      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b06:	4b2b      	ldr	r3, [pc, #172]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 020c 	and.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d1eb      	bne.n	8006af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b18:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d20c      	bcs.n	8006b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b26:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2e:	4b20      	ldr	r3, [pc, #128]	; (8006bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e032      	b.n	8006ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b4c:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4916      	ldr	r1, [pc, #88]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	490e      	ldr	r1, [pc, #56]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b7e:	f000 f821 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8006b82:	4601      	mov	r1, r0
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
 8006b92:	fa21 f303 	lsr.w	r3, r1, r3
 8006b96:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd f870 	bl	8003c84 <HAL_InitTick>

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	40023c00 	.word	0x40023c00
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	0800e36c 	.word	0x0800e36c
 8006bbc:	20000110 	.word	0x20000110
 8006bc0:	20000118 	.word	0x20000118

08006bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bda:	4b50      	ldr	r3, [pc, #320]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 030c 	and.w	r3, r3, #12
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d007      	beq.n	8006bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d008      	beq.n	8006bfc <HAL_RCC_GetSysClockFreq+0x38>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 808d 	bne.w	8006d0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bf0:	4b4b      	ldr	r3, [pc, #300]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006bf2:	60bb      	str	r3, [r7, #8]
       break;
 8006bf4:	e08c      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bf6:	4b4b      	ldr	r3, [pc, #300]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bf8:	60bb      	str	r3, [r7, #8]
      break;
 8006bfa:	e089      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bfc:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c06:	4b45      	ldr	r3, [pc, #276]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d023      	beq.n	8006c5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c12:	4b42      	ldr	r3, [pc, #264]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	f04f 0400 	mov.w	r4, #0
 8006c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	ea03 0501 	and.w	r5, r3, r1
 8006c28:	ea04 0602 	and.w	r6, r4, r2
 8006c2c:	4a3d      	ldr	r2, [pc, #244]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c2e:	fb02 f106 	mul.w	r1, r2, r6
 8006c32:	2200      	movs	r2, #0
 8006c34:	fb02 f205 	mul.w	r2, r2, r5
 8006c38:	440a      	add	r2, r1
 8006c3a:	493a      	ldr	r1, [pc, #232]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c3c:	fba5 0101 	umull	r0, r1, r5, r1
 8006c40:	1853      	adds	r3, r2, r1
 8006c42:	4619      	mov	r1, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f04f 0400 	mov.w	r4, #0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	f7fa f81b 	bl	8000c88 <__aeabi_uldivmod>
 8006c52:	4603      	mov	r3, r0
 8006c54:	460c      	mov	r4, r1
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e049      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5a:	4b30      	ldr	r3, [pc, #192]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	099b      	lsrs	r3, r3, #6
 8006c60:	f04f 0400 	mov.w	r4, #0
 8006c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	ea03 0501 	and.w	r5, r3, r1
 8006c70:	ea04 0602 	and.w	r6, r4, r2
 8006c74:	4629      	mov	r1, r5
 8006c76:	4632      	mov	r2, r6
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	f04f 0400 	mov.w	r4, #0
 8006c80:	0154      	lsls	r4, r2, #5
 8006c82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c86:	014b      	lsls	r3, r1, #5
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	1b49      	subs	r1, r1, r5
 8006c8e:	eb62 0206 	sbc.w	r2, r2, r6
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	f04f 0400 	mov.w	r4, #0
 8006c9a:	0194      	lsls	r4, r2, #6
 8006c9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ca0:	018b      	lsls	r3, r1, #6
 8006ca2:	1a5b      	subs	r3, r3, r1
 8006ca4:	eb64 0402 	sbc.w	r4, r4, r2
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	00e2      	lsls	r2, r4, #3
 8006cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006cb6:	00d9      	lsls	r1, r3, #3
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4614      	mov	r4, r2
 8006cbc:	195b      	adds	r3, r3, r5
 8006cbe:	eb44 0406 	adc.w	r4, r4, r6
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	02a2      	lsls	r2, r4, #10
 8006ccc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006cd0:	0299      	lsls	r1, r3, #10
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	4621      	mov	r1, r4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f04f 0400 	mov.w	r4, #0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4623      	mov	r3, r4
 8006ce4:	f7f9 ffd0 	bl	8000c88 <__aeabi_uldivmod>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	60bb      	str	r3, [r7, #8]
      break;
 8006d08:	e002      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d0c:	60bb      	str	r3, [r7, #8]
      break;
 8006d0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d10:	68bb      	ldr	r3, [r7, #8]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	00f42400 	.word	0x00f42400
 8006d24:	017d7840 	.word	0x017d7840

08006d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000110 	.word	0x20000110

08006d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d44:	f7ff fff0 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8006d48:	4601      	mov	r1, r0
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	0a9b      	lsrs	r3, r3, #10
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	4a03      	ldr	r2, [pc, #12]	; (8006d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d56:	5cd3      	ldrb	r3, [r2, r3]
 8006d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40023800 	.word	0x40023800
 8006d64:	0800e37c 	.word	0x0800e37c

08006d68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e022      	b.n	8006dc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7fb fa07 	bl	80021a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2203      	movs	r2, #3
 8006d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f814 	bl	8006dc8 <HAL_SD_InitCard>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e00a      	b.n	8006dc0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006dc8:	b5b0      	push	{r4, r5, r7, lr}
 8006dca:	b08e      	sub	sp, #56	; 0x38
 8006dcc:	af04      	add	r7, sp, #16
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006de4:	2376      	movs	r3, #118	; 0x76
 8006de6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681d      	ldr	r5, [r3, #0]
 8006dec:	466c      	mov	r4, sp
 8006dee:	f107 0314 	add.w	r3, r7, #20
 8006df2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006df6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e00:	4628      	mov	r0, r5
 8006e02:	f001 fe81 	bl	8008b08 <SDIO_Init>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e031      	b.n	8006e7c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <HAL_SD_InitCard+0xbc>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f001 feb9 	bl	8008b9a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006e28:	4b16      	ldr	r3, [pc, #88]	; (8006e84 <HAL_SD_InitCard+0xbc>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 ff00 	bl	8007c34 <SD_PowerON>
 8006e34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e013      	b.n	8006e7c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fe1f 	bl	8007a98 <SD_InitCard>
 8006e5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00b      	beq.n	8006e7a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3728      	adds	r7, #40	; 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bdb0      	pop	{r4, r5, r7, pc}
 8006e84:	422580a0 	.word	0x422580a0

08006e88 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b092      	sub	sp, #72	; 0x48
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e96:	f7fc ff39 	bl	8003d0c <HAL_GetTick>
 8006e9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d107      	bne.n	8006eba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e1d9      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	f040 81cc 	bne.w	8007260 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d907      	bls.n	8006eec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e1c0      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2203      	movs	r2, #3
 8006ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d002      	beq.n	8006f0a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	025b      	lsls	r3, r3, #9
 8006f08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fed4 	bl	8008cc0 <SDMMC_CmdBlockLength>
 8006f18:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00f      	beq.n	8006f40 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a9b      	ldr	r2, [pc, #620]	; (8007194 <HAL_SD_ReadBlocks+0x30c>)
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e196      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f44:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	025b      	lsls	r3, r3, #9
 8006f4a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006f4c:	2390      	movs	r3, #144	; 0x90
 8006f4e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006f50:	2302      	movs	r3, #2
 8006f52:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f107 0214 	add.w	r2, r7, #20
 8006f64:	4611      	mov	r1, r2
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fe7e 	bl	8008c68 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d90a      	bls.n	8006f88 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2202      	movs	r2, #2
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fee2 	bl	8008d48 <SDMMC_CmdReadMultiBlock>
 8006f84:	6478      	str	r0, [r7, #68]	; 0x44
 8006f86:	e009      	b.n	8006f9c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 feb5 	bl	8008d04 <SDMMC_CmdReadSingleBlock>
 8006f9a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d012      	beq.n	8006fc8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a7b      	ldr	r2, [pc, #492]	; (8007194 <HAL_SD_ReadBlocks+0x30c>)
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e152      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006fcc:	e061      	b.n	8007092 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d03c      	beq.n	8007056 <HAL_SD_ReadBlocks+0x1ce>
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d039      	beq.n	8007056 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe6:	e033      	b.n	8007050 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 fdb6 	bl	8008b5e <SDIO_ReadFIFO>
 8006ff2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	3301      	adds	r3, #1
 8007000:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007004:	3b01      	subs	r3, #1
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b2da      	uxtb	r2, r3
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007014:	3301      	adds	r3, #1
 8007016:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	3b01      	subs	r3, #1
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	b2da      	uxtb	r2, r3
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702a:	3301      	adds	r3, #1
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800702e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007030:	3b01      	subs	r3, #1
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	0e1b      	lsrs	r3, r3, #24
 8007038:	b2da      	uxtb	r2, r3
 800703a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007040:	3301      	adds	r3, #1
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007046:	3b01      	subs	r3, #1
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800704a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704c:	3301      	adds	r3, #1
 800704e:	643b      	str	r3, [r7, #64]	; 0x40
 8007050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007052:	2b07      	cmp	r3, #7
 8007054:	d9c8      	bls.n	8006fe8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007056:	f7fc fe59 	bl	8003d0c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007062:	429a      	cmp	r2, r3
 8007064:	d902      	bls.n	800706c <HAL_SD_ReadBlocks+0x1e4>
 8007066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007068:	2b00      	cmp	r3, #0
 800706a:	d112      	bne.n	8007092 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a48      	ldr	r2, [pc, #288]	; (8007194 <HAL_SD_ReadBlocks+0x30c>)
 8007072:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e0ed      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007098:	f240 332a 	movw	r3, #810	; 0x32a
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d095      	beq.n	8006fce <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d022      	beq.n	80070f6 <HAL_SD_ReadBlocks+0x26e>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d91f      	bls.n	80070f6 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d01b      	beq.n	80070f6 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 fea6 	bl	8008e14 <SDMMC_CmdStopTransfer>
 80070c8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80070ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d012      	beq.n	80070f6 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2f      	ldr	r2, [pc, #188]	; (8007194 <HAL_SD_ReadBlocks+0x30c>)
 80070d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070de:	431a      	orrs	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e0bb      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d012      	beq.n	800712a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a22      	ldr	r2, [pc, #136]	; (8007194 <HAL_SD_ReadBlocks+0x30c>)
 800710a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	f043 0208 	orr.w	r2, r3, #8
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e0a1      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d012      	beq.n	800715e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a15      	ldr	r2, [pc, #84]	; (8007194 <HAL_SD_ReadBlocks+0x30c>)
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	f043 0202 	orr.w	r2, r3, #2
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e087      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d064      	beq.n	8007236 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a08      	ldr	r2, [pc, #32]	; (8007194 <HAL_SD_ReadBlocks+0x30c>)
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	f043 0220 	orr.w	r2, r3, #32
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e06d      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
 8007192:	bf00      	nop
 8007194:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f001 fcde 	bl	8008b5e <SDIO_ReadFIFO>
 80071a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80071ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ae:	3301      	adds	r3, #1
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	3b01      	subs	r3, #1
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	3301      	adds	r3, #1
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80071c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ca:	3b01      	subs	r3, #1
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	3301      	adds	r3, #1
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	3b01      	subs	r3, #1
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	0e1b      	lsrs	r3, r3, #24
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f0:	3301      	adds	r3, #1
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f6:	3b01      	subs	r3, #1
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80071fa:	f7fc fd87 	bl	8003d0c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007206:	429a      	cmp	r2, r3
 8007208:	d902      	bls.n	8007210 <HAL_SD_ReadBlocks+0x388>
 800720a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800720c:	2b00      	cmp	r3, #0
 800720e:	d112      	bne.n	8007236 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a18      	ldr	r2, [pc, #96]	; (8007278 <HAL_SD_ReadBlocks+0x3f0>)
 8007216:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e01b      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <HAL_SD_ReadBlocks+0x3c2>
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1a6      	bne.n	8007198 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007252:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e006      	b.n	800726e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	3748      	adds	r7, #72	; 0x48
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	004005ff 	.word	0x004005ff

0800727c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b092      	sub	sp, #72	; 0x48
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800728a:	f7fc fd3f 	bl	8003d0c <HAL_GetTick>
 800728e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d107      	bne.n	80072ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e184      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	f040 8177 	bne.w	80075aa <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80072c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	441a      	add	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d907      	bls.n	80072e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e16b      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2203      	movs	r2, #3
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2200      	movs	r2, #0
 80072ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d002      	beq.n	80072fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	025b      	lsls	r3, r3, #9
 80072fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fcda 	bl	8008cc0 <SDMMC_CmdBlockLength>
 800730c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800730e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00f      	beq.n	8007334 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a9d      	ldr	r2, [pc, #628]	; (8007590 <HAL_SD_WriteBlocks+0x314>)
 800731a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007322:	431a      	orrs	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e141      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007338:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	025b      	lsls	r3, r3, #9
 800733e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007340:	2390      	movs	r3, #144	; 0x90
 8007342:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007344:	2300      	movs	r3, #0
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007348:	2300      	movs	r3, #0
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800734c:	2301      	movs	r3, #1
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f107 0218 	add.w	r2, r7, #24
 8007358:	4611      	mov	r1, r2
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fc84 	bl	8008c68 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d90a      	bls.n	800737c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fd2c 	bl	8008dd0 <SDMMC_CmdWriteMultiBlock>
 8007378:	6478      	str	r0, [r7, #68]	; 0x44
 800737a:	e009      	b.n	8007390 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2210      	movs	r2, #16
 8007380:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fcff 	bl	8008d8c <SDMMC_CmdWriteSingleBlock>
 800738e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007392:	2b00      	cmp	r3, #0
 8007394:	d012      	beq.n	80073bc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a7d      	ldr	r2, [pc, #500]	; (8007590 <HAL_SD_WriteBlocks+0x314>)
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073a4:	431a      	orrs	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0fd      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80073c0:	e065      	b.n	800748e <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d040      	beq.n	8007452 <HAL_SD_WriteBlocks+0x1d6>
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d03d      	beq.n	8007452 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80073d6:	2300      	movs	r3, #0
 80073d8:	643b      	str	r3, [r7, #64]	; 0x40
 80073da:	e037      	b.n	800744c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80073e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e4:	3301      	adds	r3, #1
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	3b01      	subs	r3, #1
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	021a      	lsls	r2, r3, #8
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	3301      	adds	r3, #1
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	3b01      	subs	r3, #1
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	041a      	lsls	r2, r3, #16
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	3301      	adds	r3, #1
 8007416:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741a:	3b01      	subs	r3, #1
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	061a      	lsls	r2, r3, #24
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	3301      	adds	r3, #1
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007432:	3b01      	subs	r3, #1
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f107 0214 	add.w	r2, r7, #20
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fb99 	bl	8008b78 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007448:	3301      	adds	r3, #1
 800744a:	643b      	str	r3, [r7, #64]	; 0x40
 800744c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744e:	2b07      	cmp	r3, #7
 8007450:	d9c4      	bls.n	80073dc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007452:	f7fc fc5b 	bl	8003d0c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800745e:	429a      	cmp	r2, r3
 8007460:	d902      	bls.n	8007468 <HAL_SD_WriteBlocks+0x1ec>
 8007462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007464:	2b00      	cmp	r3, #0
 8007466:	d112      	bne.n	800748e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a48      	ldr	r2, [pc, #288]	; (8007590 <HAL_SD_WriteBlocks+0x314>)
 800746e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007476:	431a      	orrs	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e094      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007494:	f240 331a 	movw	r3, #794	; 0x31a
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d091      	beq.n	80073c2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d022      	beq.n	80074f2 <HAL_SD_WriteBlocks+0x276>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d91f      	bls.n	80074f2 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d01b      	beq.n	80074f2 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fca8 	bl	8008e14 <SDMMC_CmdStopTransfer>
 80074c4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80074c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d012      	beq.n	80074f2 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a2f      	ldr	r2, [pc, #188]	; (8007590 <HAL_SD_WriteBlocks+0x314>)
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074da:	431a      	orrs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e062      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d012      	beq.n	8007526 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a22      	ldr	r2, [pc, #136]	; (8007590 <HAL_SD_WriteBlocks+0x314>)
 8007506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	f043 0208 	orr.w	r2, r3, #8
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e048      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d012      	beq.n	800755a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a15      	ldr	r2, [pc, #84]	; (8007590 <HAL_SD_WriteBlocks+0x314>)
 800753a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	f043 0202 	orr.w	r2, r3, #2
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e02e      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a08      	ldr	r2, [pc, #32]	; (8007590 <HAL_SD_WriteBlocks+0x314>)
 800756e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	f043 0210 	orr.w	r2, r3, #16
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e014      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
 800758e:	bf00      	nop
 8007590:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f240 523a 	movw	r2, #1338	; 0x53a
 800759c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	e006      	b.n	80075b8 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3748      	adds	r7, #72	; 0x48
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ce:	0f9b      	lsrs	r3, r3, #30
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075da:	0e9b      	lsrs	r3, r3, #26
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	b2da      	uxtb	r2, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	b2da      	uxtb	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007616:	b2da      	uxtb	r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007620:	0d1b      	lsrs	r3, r3, #20
 8007622:	b29a      	uxth	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	b2da      	uxtb	r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800763e:	0bdb      	lsrs	r3, r3, #15
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	b2da      	uxtb	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007650:	0b9b      	lsrs	r3, r3, #14
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007662:	0b5b      	lsrs	r3, r3, #13
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007674:	0b1b      	lsrs	r3, r3, #12
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	b2da      	uxtb	r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2200      	movs	r2, #0
 8007686:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768c:	2b00      	cmp	r3, #0
 800768e:	d163      	bne.n	8007758 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007694:	009a      	lsls	r2, r3, #2
 8007696:	f640 73fc 	movw	r3, #4092	; 0xffc
 800769a:	4013      	ands	r3, r2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80076a0:	0f92      	lsrs	r2, r2, #30
 80076a2:	431a      	orrs	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ac:	0edb      	lsrs	r3, r3, #27
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076be:	0e1b      	lsrs	r3, r3, #24
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d0:	0d5b      	lsrs	r3, r3, #21
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e2:	0c9b      	lsrs	r3, r3, #18
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f4:	0bdb      	lsrs	r3, r3, #15
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	7e1b      	ldrb	r3, [r3, #24]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	3302      	adds	r3, #2
 8007718:	2201      	movs	r2, #1
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007722:	fb02 f203 	mul.w	r2, r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	7a1b      	ldrb	r3, [r3, #8]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	2201      	movs	r2, #1
 8007736:	409a      	lsls	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007744:	0a52      	lsrs	r2, r2, #9
 8007746:	fb02 f203 	mul.w	r2, r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007754:	661a      	str	r2, [r3, #96]	; 0x60
 8007756:	e031      	b.n	80077bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775c:	2b01      	cmp	r3, #1
 800775e:	d11d      	bne.n	800779c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007764:	041b      	lsls	r3, r3, #16
 8007766:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776e:	0c1b      	lsrs	r3, r3, #16
 8007770:	431a      	orrs	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	3301      	adds	r3, #1
 800777c:	029a      	lsls	r2, r3, #10
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007790:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	661a      	str	r2, [r3, #96]	; 0x60
 800779a:	e00f      	b.n	80077bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a58      	ldr	r2, [pc, #352]	; (8007904 <HAL_SD_GetCardCSD+0x344>)
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e09d      	b.n	80078f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c0:	0b9b      	lsrs	r3, r3, #14
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d2:	09db      	lsrs	r3, r3, #7
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f4:	0fdb      	lsrs	r3, r3, #31
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	0f5b      	lsrs	r3, r3, #29
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 0303 	and.w	r3, r3, #3
 8007808:	b2da      	uxtb	r2, r3
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	0e9b      	lsrs	r3, r3, #26
 8007814:	b2db      	uxtb	r3, r3
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	b2da      	uxtb	r2, r3
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	0d9b      	lsrs	r3, r3, #22
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 030f 	and.w	r3, r3, #15
 800782c:	b2da      	uxtb	r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007836:	0d5b      	lsrs	r3, r3, #21
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	b2da      	uxtb	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	b2da      	uxtb	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	0bdb      	lsrs	r3, r3, #15
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	b2da      	uxtb	r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	0b9b      	lsrs	r3, r3, #14
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	b2da      	uxtb	r2, r3
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	0b5b      	lsrs	r3, r3, #13
 8007890:	b2db      	uxtb	r3, r3
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	b2da      	uxtb	r2, r3
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a2:	0b1b      	lsrs	r3, r3, #12
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b6:	0a9b      	lsrs	r3, r3, #10
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	004005ff 	.word	0x004005ff

08007908 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007960:	b5b0      	push	{r4, r5, r7, lr}
 8007962:	b08e      	sub	sp, #56	; 0x38
 8007964:	af04      	add	r7, sp, #16
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2203      	movs	r2, #3
 800796e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	2b03      	cmp	r3, #3
 8007978:	d02e      	beq.n	80079d8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007980:	d106      	bne.n	8007990 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007986:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
 800798e:	e029      	b.n	80079e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007996:	d10a      	bne.n	80079ae <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fa01 	bl	8007da0 <SD_WideBus_Enable>
 800799e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
 80079ac:	e01a      	b.n	80079e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fa3e 	bl	8007e36 <SD_WideBus_Disable>
 80079ba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
 80079c8:	e00c      	b.n	80079e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
 80079d6:	e005      	b.n	80079e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d009      	beq.n	8007a00 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a18      	ldr	r2, [pc, #96]	; (8007a54 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e024      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681d      	ldr	r5, [r3, #0]
 8007a26:	466c      	mov	r4, sp
 8007a28:	f107 0318 	add.w	r3, r7, #24
 8007a2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a34:	f107 030c 	add.w	r3, r7, #12
 8007a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f001 f864 	bl	8008b08 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3728      	adds	r7, #40	; 0x28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bdb0      	pop	{r4, r5, r7, pc}
 8007a52:	bf00      	nop
 8007a54:	004005ff 	.word	0x004005ff

08007a58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f970 	bl	8007d50 <SD_SendStatus>
 8007a70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	0a5b      	lsrs	r3, r3, #9
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007a8e:	693b      	ldr	r3, [r7, #16]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a98:	b5b0      	push	{r4, r5, r7, lr}
 8007a9a:	b094      	sub	sp, #80	; 0x50
 8007a9c:	af04      	add	r7, sp, #16
 8007a9e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f001 f885 	bl	8008bb8 <SDIO_GetPowerState>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ab4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007ab8:	e0b7      	b.n	8007c2a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d02f      	beq.n	8007b22 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 faae 	bl	8009028 <SDMMC_CmdSendCID>
 8007acc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <SD_InitCard+0x40>
    {
      return errorstate;
 8007ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad6:	e0a8      	b.n	8007c2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 f8af 	bl	8008c42 <SDIO_GetResponse>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2104      	movs	r1, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f8a6 	bl	8008c42 <SDIO_GetResponse>
 8007af6:	4602      	mov	r2, r0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2108      	movs	r1, #8
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 f89d 	bl	8008c42 <SDIO_GetResponse>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	210c      	movs	r1, #12
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 f894 	bl	8008c42 <SDIO_GetResponse>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d00d      	beq.n	8007b46 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f107 020e 	add.w	r2, r7, #14
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 fab4 	bl	80090a2 <SDMMC_CmdSetRelAdd>
 8007b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <SD_InitCard+0xae>
    {
      return errorstate;
 8007b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b44:	e071      	b.n	8007c2a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d036      	beq.n	8007bbc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b4e:	89fb      	ldrh	r3, [r7, #14]
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	041b      	lsls	r3, r3, #16
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f001 fa7e 	bl	8009064 <SDMMC_CmdSendCSD>
 8007b68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b72:	e05a      	b.n	8007c2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 f861 	bl	8008c42 <SDIO_GetResponse>
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f001 f858 	bl	8008c42 <SDIO_GetResponse>
 8007b92:	4602      	mov	r2, r0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2108      	movs	r1, #8
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 f84f 	bl	8008c42 <SDIO_GetResponse>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	210c      	movs	r1, #12
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 f846 	bl	8008c42 <SDIO_GetResponse>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2104      	movs	r1, #4
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f83d 	bl	8008c42 <SDIO_GetResponse>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	0d1a      	lsrs	r2, r3, #20
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007bd0:	f107 0310 	add.w	r3, r7, #16
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7ff fcf2 	bl	80075c0 <HAL_SD_GetCardCSD>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007be2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007be6:	e020      	b.n	8007c2a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6819      	ldr	r1, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	f04f 0400 	mov.w	r4, #0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	4623      	mov	r3, r4
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	f001 f92c 	bl	8008e58 <SDMMC_CmdSelDesel>
 8007c00:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <SD_InitCard+0x174>
  {
    return errorstate;
 8007c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0a:	e00e      	b.n	8007c2a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681d      	ldr	r5, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	466c      	mov	r4, sp
 8007c14:	f103 0210 	add.w	r2, r3, #16
 8007c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c1e:	3304      	adds	r3, #4
 8007c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c22:	4628      	mov	r0, r5
 8007c24:	f000 ff70 	bl	8008b08 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3740      	adds	r7, #64	; 0x40
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007c34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 f926 	bl	8008e9e <SDMMC_CmdGoIdleState>
 8007c52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	e072      	b.n	8007d44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 f939 	bl	8008eda <SDMMC_CmdOperCond>
 8007c68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00d      	beq.n	8007c8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f90f 	bl	8008e9e <SDMMC_CmdGoIdleState>
 8007c80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	e05b      	b.n	8007d44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d137      	bne.n	8007d0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 f939 	bl	8008f18 <SDMMC_CmdAppCommand>
 8007ca6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02d      	beq.n	8007d0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cb2:	e047      	b.n	8007d44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 f92c 	bl	8008f18 <SDMMC_CmdAppCommand>
 8007cc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <SD_PowerON+0x98>
    {
      return errorstate;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	e03b      	b.n	8007d44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	491e      	ldr	r1, [pc, #120]	; (8007d4c <SD_PowerON+0x118>)
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f942 	bl	8008f5c <SDMMC_CmdAppOperCommand>
 8007cd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ce0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ce4:	e02e      	b.n	8007d44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 ffa8 	bl	8008c42 <SDIO_GetResponse>
 8007cf2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	0fdb      	lsrs	r3, r3, #31
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <SD_PowerON+0xcc>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <SD_PowerON+0xce>
 8007d00:	2300      	movs	r3, #0
 8007d02:	613b      	str	r3, [r7, #16]

    count++;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d802      	bhi.n	8007d1a <SD_PowerON+0xe6>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0cc      	beq.n	8007cb4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d902      	bls.n	8007d2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d28:	e00c      	b.n	8007d44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	645a      	str	r2, [r3, #68]	; 0x44
 8007d3a:	e002      	b.n	8007d42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	c1100000 	.word	0xc1100000

08007d50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007d60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d64:	e018      	b.n	8007d98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6e:	041b      	lsls	r3, r3, #16
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f001 f9b6 	bl	80090e4 <SDMMC_CmdSendStatus>
 8007d78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	e009      	b.n	8007d98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 ff59 	bl	8008c42 <SDIO_GetResponse>
 8007d90:	4602      	mov	r2, r0
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	2300      	movs	r3, #0
 8007dae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 ff43 	bl	8008c42 <SDIO_GetResponse>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dc6:	d102      	bne.n	8007dce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dcc:	e02f      	b.n	8007e2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007dce:	f107 030c 	add.w	r3, r7, #12
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f879 	bl	8007ecc <SD_FindSCR>
 8007dda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	e023      	b.n	8007e2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01c      	beq.n	8007e2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	041b      	lsls	r3, r3, #16
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	f001 f88b 	bl	8008f18 <SDMMC_CmdAppCommand>
 8007e02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	e00f      	b.n	8007e2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 f8c4 	bl	8008fa2 <SDMMC_CmdBusWidth>
 8007e1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	e003      	b.n	8007e2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e001      	b.n	8007e2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b086      	sub	sp, #24
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fef8 	bl	8008c42 <SDIO_GetResponse>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e5c:	d102      	bne.n	8007e64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e62:	e02f      	b.n	8007ec4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e64:	f107 030c 	add.w	r3, r7, #12
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f82e 	bl	8007ecc <SD_FindSCR>
 8007e70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	e023      	b.n	8007ec4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01c      	beq.n	8007ec0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f001 f840 	bl	8008f18 <SDMMC_CmdAppCommand>
 8007e98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	e00f      	b.n	8007ec4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 f879 	bl	8008fa2 <SDMMC_CmdBusWidth>
 8007eb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	e003      	b.n	8007ec4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e001      	b.n	8007ec4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ec0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b08f      	sub	sp, #60	; 0x3c
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ed6:	f7fb ff19 	bl	8003d0c <HAL_GetTick>
 8007eda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60bb      	str	r3, [r7, #8]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2108      	movs	r1, #8
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fee4 	bl	8008cc0 <SDMMC_CmdBlockLength>
 8007ef8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	e0a9      	b.n	8008058 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f001 f801 	bl	8008f18 <SDMMC_CmdAppCommand>
 8007f16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	e09a      	b.n	8008058 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007f28:	2308      	movs	r3, #8
 8007f2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007f2c:	2330      	movs	r3, #48	; 0x30
 8007f2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f30:	2302      	movs	r3, #2
 8007f32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f107 0210 	add.w	r2, r7, #16
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fe8e 	bl	8008c68 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 f848 	bl	8008fe6 <SDMMC_CmdSendSCR>
 8007f56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d022      	beq.n	8007fa4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	e07a      	b.n	8008058 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00e      	beq.n	8007f8e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	f107 0208 	add.w	r2, r7, #8
 8007f7c:	18d4      	adds	r4, r2, r3
 8007f7e:	4608      	mov	r0, r1
 8007f80:	f000 fded 	bl	8008b5e <SDIO_ReadFIFO>
 8007f84:	4603      	mov	r3, r0
 8007f86:	6023      	str	r3, [r4, #0]
      index++;
 8007f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f8e:	f7fb febd 	bl	8003d0c <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f9c:	d102      	bne.n	8007fa4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fa2:	e059      	b.n	8008058 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007faa:	f240 432a 	movw	r3, #1066	; 0x42a
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0d6      	beq.n	8007f62 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007fca:	2308      	movs	r3, #8
 8007fcc:	e044      	b.n	8008058 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e037      	b.n	8008058 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ffe:	2320      	movs	r3, #32
 8008000:	e02a      	b.n	8008058 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f240 523a 	movw	r2, #1338	; 0x53a
 800800a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	061a      	lsls	r2, r3, #24
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008018:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	0a1b      	lsrs	r3, r3, #8
 800801e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008022:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	0e1b      	lsrs	r3, r3, #24
 8008028:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	601a      	str	r2, [r3, #0]
    scr++;
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	3304      	adds	r3, #4
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	061a      	lsls	r2, r3, #24
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008040:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	0a1b      	lsrs	r3, r3, #8
 8008046:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800804a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	0e1b      	lsrs	r3, r3, #24
 8008050:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	373c      	adds	r7, #60	; 0x3c
 800805c:	46bd      	mov	sp, r7
 800805e:	bd90      	pop	{r4, r7, pc}

08008060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e056      	b.n	8008120 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fa f9db 	bl	8002448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	ea42 0103 	orr.w	r1, r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	0c1b      	lsrs	r3, r3, #16
 80080f0:	f003 0104 	and.w	r1, r3, #4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69da      	ldr	r2, [r3, #28]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800810e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	4613      	mov	r3, r2
 8008136:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_SPI_Transmit+0x22>
 8008146:	2302      	movs	r3, #2
 8008148:	e11e      	b.n	8008388 <HAL_SPI_Transmit+0x260>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008152:	f7fb fddb 	bl	8003d0c <HAL_GetTick>
 8008156:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	d002      	beq.n	800816e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008168:	2302      	movs	r3, #2
 800816a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800816c:	e103      	b.n	8008376 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_SPI_Transmit+0x52>
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800817e:	e0fa      	b.n	8008376 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2203      	movs	r2, #3
 8008184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	88fa      	ldrh	r2, [r7, #6]
 800819e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c6:	d107      	bne.n	80081d8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d007      	beq.n	80081f6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081fe:	d14b      	bne.n	8008298 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_SPI_Transmit+0xe6>
 8008208:	8afb      	ldrh	r3, [r7, #22]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d13e      	bne.n	800828c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	881a      	ldrh	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	1c9a      	adds	r2, r3, #2
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008232:	e02b      	b.n	800828c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b02      	cmp	r3, #2
 8008240:	d112      	bne.n	8008268 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	881a      	ldrh	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	1c9a      	adds	r2, r3, #2
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	86da      	strh	r2, [r3, #54]	; 0x36
 8008266:	e011      	b.n	800828c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008268:	f7fb fd50 	bl	8003d0c <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d803      	bhi.n	8008280 <HAL_SPI_Transmit+0x158>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800827e:	d102      	bne.n	8008286 <HAL_SPI_Transmit+0x15e>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d102      	bne.n	800828c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	77fb      	strb	r3, [r7, #31]
          goto error;
 800828a:	e074      	b.n	8008376 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1ce      	bne.n	8008234 <HAL_SPI_Transmit+0x10c>
 8008296:	e04c      	b.n	8008332 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_SPI_Transmit+0x17e>
 80082a0:	8afb      	ldrh	r3, [r7, #22]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d140      	bne.n	8008328 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	330c      	adds	r3, #12
 80082b0:	7812      	ldrb	r2, [r2, #0]
 80082b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80082cc:	e02c      	b.n	8008328 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d113      	bne.n	8008304 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	86da      	strh	r2, [r3, #54]	; 0x36
 8008302:	e011      	b.n	8008328 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008304:	f7fb fd02 	bl	8003d0c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d803      	bhi.n	800831c <HAL_SPI_Transmit+0x1f4>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831a:	d102      	bne.n	8008322 <HAL_SPI_Transmit+0x1fa>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d102      	bne.n	8008328 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008326:	e026      	b.n	8008376 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1cd      	bne.n	80082ce <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fba4 	bl	8008a84 <SPI_EndRxTxTransaction>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2220      	movs	r2, #32
 8008346:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	77fb      	strb	r3, [r7, #31]
 8008372:	e000      	b.n	8008376 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008386:	7ffb      	ldrb	r3, [r7, #31]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af02      	add	r7, sp, #8
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	4613      	mov	r3, r2
 800839e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083ac:	d112      	bne.n	80083d4 <HAL_SPI_Receive+0x44>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10e      	bne.n	80083d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2204      	movs	r2, #4
 80083ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	4613      	mov	r3, r2
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 f8e9 	bl	80085a2 <HAL_SPI_TransmitReceive>
 80083d0:	4603      	mov	r3, r0
 80083d2:	e0e2      	b.n	800859a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_SPI_Receive+0x52>
 80083de:	2302      	movs	r3, #2
 80083e0:	e0db      	b.n	800859a <HAL_SPI_Receive+0x20a>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ea:	f7fb fc8f 	bl	8003d0c <HAL_GetTick>
 80083ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d002      	beq.n	8008402 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80083fc:	2302      	movs	r3, #2
 80083fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008400:	e0c2      	b.n	8008588 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <HAL_SPI_Receive+0x7e>
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008412:	e0b9      	b.n	8008588 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2204      	movs	r2, #4
 8008418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800845a:	d107      	bne.n	800846c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800846a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d007      	beq.n	800848a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008488:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d162      	bne.n	8008558 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008492:	e02e      	b.n	80084f2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d115      	bne.n	80084ce <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f103 020c 	add.w	r2, r3, #12
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084cc:	e011      	b.n	80084f2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ce:	f7fb fc1d 	bl	8003d0c <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d803      	bhi.n	80084e6 <HAL_SPI_Receive+0x156>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e4:	d102      	bne.n	80084ec <HAL_SPI_Receive+0x15c>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084f0:	e04a      	b.n	8008588 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1cb      	bne.n	8008494 <HAL_SPI_Receive+0x104>
 80084fc:	e031      	b.n	8008562 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b01      	cmp	r3, #1
 800850a:	d113      	bne.n	8008534 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	b292      	uxth	r2, r2
 8008518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	1c9a      	adds	r2, r3, #2
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008532:	e011      	b.n	8008558 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008534:	f7fb fbea 	bl	8003d0c <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d803      	bhi.n	800854c <HAL_SPI_Receive+0x1bc>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800854a:	d102      	bne.n	8008552 <HAL_SPI_Receive+0x1c2>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008556:	e017      	b.n	8008588 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1cd      	bne.n	80084fe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 fa27 	bl	80089ba <SPI_EndRxTransaction>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2220      	movs	r2, #32
 8008576:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
 8008584:	e000      	b.n	8008588 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008586:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b08c      	sub	sp, #48	; 0x30
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
 80085ae:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085b0:	2301      	movs	r3, #1
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_SPI_TransmitReceive+0x26>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e18a      	b.n	80088de <HAL_SPI_TransmitReceive+0x33c>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085d0:	f7fb fb9c 	bl	8003d0c <HAL_GetTick>
 80085d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d00f      	beq.n	8008612 <HAL_SPI_TransmitReceive+0x70>
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085f8:	d107      	bne.n	800860a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d103      	bne.n	800860a <HAL_SPI_TransmitReceive+0x68>
 8008602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008606:	2b04      	cmp	r3, #4
 8008608:	d003      	beq.n	8008612 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800860a:	2302      	movs	r3, #2
 800860c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008610:	e15b      	b.n	80088ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x82>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x82>
 800861e:	887b      	ldrh	r3, [r7, #2]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d103      	bne.n	800862c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800862a:	e14e      	b.n	80088ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b04      	cmp	r3, #4
 8008636:	d003      	beq.n	8008640 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2205      	movs	r2, #5
 800863c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	887a      	ldrh	r2, [r7, #2]
 8008650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	887a      	ldrh	r2, [r7, #2]
 8008656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	887a      	ldrh	r2, [r7, #2]
 8008662:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	887a      	ldrh	r2, [r7, #2]
 8008668:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008680:	2b40      	cmp	r3, #64	; 0x40
 8008682:	d007      	beq.n	8008694 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800869c:	d178      	bne.n	8008790 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_SPI_TransmitReceive+0x10a>
 80086a6:	8b7b      	ldrh	r3, [r7, #26]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d166      	bne.n	800877a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	881a      	ldrh	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086bc:	1c9a      	adds	r2, r3, #2
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086d0:	e053      	b.n	800877a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d11b      	bne.n	8008718 <HAL_SPI_TransmitReceive+0x176>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d016      	beq.n	8008718 <HAL_SPI_TransmitReceive+0x176>
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d113      	bne.n	8008718 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	881a      	ldrh	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	1c9a      	adds	r2, r3, #2
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b01      	cmp	r3, #1
 8008724:	d119      	bne.n	800875a <HAL_SPI_TransmitReceive+0x1b8>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800872a:	b29b      	uxth	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d014      	beq.n	800875a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	b292      	uxth	r2, r2
 800873c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008756:	2301      	movs	r3, #1
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800875a:	f7fb fad7 	bl	8003d0c <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008766:	429a      	cmp	r2, r3
 8008768:	d807      	bhi.n	800877a <HAL_SPI_TransmitReceive+0x1d8>
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008770:	d003      	beq.n	800877a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008778:	e0a7      	b.n	80088ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1a6      	bne.n	80086d2 <HAL_SPI_TransmitReceive+0x130>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1a1      	bne.n	80086d2 <HAL_SPI_TransmitReceive+0x130>
 800878e:	e07c      	b.n	800888a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <HAL_SPI_TransmitReceive+0x1fc>
 8008798:	8b7b      	ldrh	r3, [r7, #26]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d16b      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	330c      	adds	r3, #12
 80087a8:	7812      	ldrb	r2, [r2, #0]
 80087aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087c4:	e057      	b.n	8008876 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d11c      	bne.n	800880e <HAL_SPI_TransmitReceive+0x26c>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d017      	beq.n	800880e <HAL_SPI_TransmitReceive+0x26c>
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d114      	bne.n	800880e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	330c      	adds	r3, #12
 80087ee:	7812      	ldrb	r2, [r2, #0]
 80087f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d119      	bne.n	8008850 <HAL_SPI_TransmitReceive+0x2ae>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008820:	b29b      	uxth	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d014      	beq.n	8008850 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800884c:	2301      	movs	r3, #1
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008850:	f7fb fa5c 	bl	8003d0c <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885c:	429a      	cmp	r2, r3
 800885e:	d803      	bhi.n	8008868 <HAL_SPI_TransmitReceive+0x2c6>
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008866:	d102      	bne.n	800886e <HAL_SPI_TransmitReceive+0x2cc>
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	2b00      	cmp	r3, #0
 800886c:	d103      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008874:	e029      	b.n	80088ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1a2      	bne.n	80087c6 <HAL_SPI_TransmitReceive+0x224>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008884:	b29b      	uxth	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d19d      	bne.n	80087c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800888a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f8f8 	bl	8008a84 <SPI_EndRxTxTransaction>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d006      	beq.n	80088a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80088a6:	e010      	b.n	80088ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	e000      	b.n	80088ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80088c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80088da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3730      	adds	r7, #48	; 0x30
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4613      	mov	r3, r2
 80088f4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088f6:	e04c      	b.n	8008992 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088fe:	d048      	beq.n	8008992 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008900:	f7fb fa04 	bl	8003d0c <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d902      	bls.n	8008916 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d13d      	bne.n	8008992 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800892e:	d111      	bne.n	8008954 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008938:	d004      	beq.n	8008944 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008942:	d107      	bne.n	8008954 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800895c:	d10f      	bne.n	800897e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800897c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e00f      	b.n	80089b2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4013      	ands	r3, r2
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	429a      	cmp	r2, r3
 80089a0:	bf0c      	ite	eq
 80089a2:	2301      	moveq	r3, #1
 80089a4:	2300      	movne	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d1a3      	bne.n	80088f8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af02      	add	r7, sp, #8
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089ce:	d111      	bne.n	80089f4 <SPI_EndRxTransaction+0x3a>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d8:	d004      	beq.n	80089e4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e2:	d107      	bne.n	80089f4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089fc:	d12a      	bne.n	8008a54 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a06:	d012      	beq.n	8008a2e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2180      	movs	r1, #128	; 0x80
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7ff ff67 	bl	80088e6 <SPI_WaitFlagStateUntilTimeout>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d02d      	beq.n	8008a7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a22:	f043 0220 	orr.w	r2, r3, #32
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e026      	b.n	8008a7c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2101      	movs	r1, #1
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff ff54 	bl	80088e6 <SPI_WaitFlagStateUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01a      	beq.n	8008a7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a48:	f043 0220 	orr.w	r2, r3, #32
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e013      	b.n	8008a7c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7ff ff41 	bl	80088e6 <SPI_WaitFlagStateUntilTimeout>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	f043 0220 	orr.w	r2, r3, #32
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e000      	b.n	8008a7c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a90:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <SPI_EndRxTxTransaction+0x7c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <SPI_EndRxTxTransaction+0x80>)
 8008a96:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9a:	0d5b      	lsrs	r3, r3, #21
 8008a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008aa0:	fb02 f303 	mul.w	r3, r2, r3
 8008aa4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aae:	d112      	bne.n	8008ad6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2180      	movs	r1, #128	; 0x80
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff ff13 	bl	80088e6 <SPI_WaitFlagStateUntilTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d016      	beq.n	8008af4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	f043 0220 	orr.w	r2, r3, #32
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e00f      	b.n	8008af6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aec:	2b80      	cmp	r3, #128	; 0x80
 8008aee:	d0f2      	beq.n	8008ad6 <SPI_EndRxTxTransaction+0x52>
 8008af0:	e000      	b.n	8008af4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008af2:	bf00      	nop
  }

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000110 	.word	0x20000110
 8008b04:	165e9f81 	.word	0x165e9f81

08008b08 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008b08:	b084      	sub	sp, #16
 8008b0a:	b480      	push	{r7}
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	f107 001c 	add.w	r0, r7, #28
 8008b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008b1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008b20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008b22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008b26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008b2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008b2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008b32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008b42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	b004      	add	sp, #16
 8008b5c:	4770      	bx	lr

08008b5e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008ba8:	2002      	movs	r0, #2
 8008baa:	f7fb f8bb 	bl	8003d24 <HAL_Delay>
  
  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0303 	and.w	r3, r3, #3
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008bf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008bf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008bfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c0e:	f023 030f 	bic.w	r3, r3, #15
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	b2db      	uxtb	r3, r3
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3314      	adds	r3, #20
 8008c50:	461a      	mov	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	4413      	add	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
}  
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008c8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008c94:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008c9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0

}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008cce:	2310      	movs	r3, #16
 8008cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cd2:	2340      	movs	r3, #64	; 0x40
 8008cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff ff74 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf0:	2110      	movs	r1, #16
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fa40 	bl	8009178 <SDMMC_GetCmdResp1>
 8008cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008d12:	2311      	movs	r3, #17
 8008d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d16:	2340      	movs	r3, #64	; 0x40
 8008d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d24:	f107 0308 	add.w	r3, r7, #8
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff ff52 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d34:	2111      	movs	r1, #17
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa1e 	bl	8009178 <SDMMC_GetCmdResp1>
 8008d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d3e:	69fb      	ldr	r3, [r7, #28]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008d56:	2312      	movs	r3, #18
 8008d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d5a:	2340      	movs	r3, #64	; 0x40
 8008d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d68:	f107 0308 	add.w	r3, r7, #8
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff ff30 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	2112      	movs	r1, #18
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f9fc 	bl	8009178 <SDMMC_GetCmdResp1>
 8008d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d82:	69fb      	ldr	r3, [r7, #28]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3720      	adds	r7, #32
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008d9a:	2318      	movs	r3, #24
 8008d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d9e:	2340      	movs	r3, #64	; 0x40
 8008da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008daa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dac:	f107 0308 	add.w	r3, r7, #8
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ff0e 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbc:	2118      	movs	r1, #24
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f9da 	bl	8009178 <SDMMC_GetCmdResp1>
 8008dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008dde:	2319      	movs	r3, #25
 8008de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff feec 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e00:	2119      	movs	r1, #25
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f9b8 	bl	8009178 <SDMMC_GetCmdResp1>
 8008e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3720      	adds	r7, #32
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008e20:	230c      	movs	r3, #12
 8008e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e24:	2340      	movs	r3, #64	; 0x40
 8008e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e32:	f107 0308 	add.w	r3, r7, #8
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff fecb 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008e3e:	4a05      	ldr	r2, [pc, #20]	; (8008e54 <SDMMC_CmdStopTransfer+0x40>)
 8008e40:	210c      	movs	r1, #12
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f998 	bl	8009178 <SDMMC_GetCmdResp1>
 8008e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4a:	69fb      	ldr	r3, [r7, #28]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	05f5e100 	.word	0x05f5e100

08008e58 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	; 0x28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008e68:	2307      	movs	r3, #7
 8008e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e6c:	2340      	movs	r3, #64	; 0x40
 8008e6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e70:	2300      	movs	r3, #0
 8008e72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e78:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e7a:	f107 0310 	add.w	r3, r7, #16
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f7ff fea7 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e8a:	2107      	movs	r1, #7
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f973 	bl	8009178 <SDMMC_GetCmdResp1>
 8008e92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3728      	adds	r7, #40	; 0x28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b088      	sub	sp, #32
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fe86 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f92d 	bl	8009128 <SDMMC_GetCmdError>
 8008ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008ee2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008ee8:	2308      	movs	r3, #8
 8008eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eec:	2340      	movs	r3, #64	; 0x40
 8008eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fe67 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fb16 	bl	8009538 <SDMMC_GetCmdResp7>
 8008f0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008f26:	2337      	movs	r3, #55	; 0x37
 8008f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f2a:	2340      	movs	r3, #64	; 0x40
 8008f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fe48 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f48:	2137      	movs	r1, #55	; 0x37
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f914 	bl	8009178 <SDMMC_GetCmdResp1>
 8008f50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f52:	69fb      	ldr	r3, [r7, #28]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3720      	adds	r7, #32
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008f72:	2329      	movs	r3, #41	; 0x29
 8008f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fe22 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fa23 	bl	80093dc <SDMMC_GetCmdResp3>
 8008f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f98:	69fb      	ldr	r3, [r7, #28]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b088      	sub	sp, #32
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008fb0:	2306      	movs	r3, #6
 8008fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fc2:	f107 0308 	add.w	r3, r7, #8
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff fe03 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd2:	2106      	movs	r1, #6
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f8cf 	bl	8009178 <SDMMC_GetCmdResp1>
 8008fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3720      	adds	r7, #32
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b088      	sub	sp, #32
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008ff2:	2333      	movs	r3, #51	; 0x33
 8008ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ff6:	2340      	movs	r3, #64	; 0x40
 8008ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009004:	f107 0308 	add.w	r3, r7, #8
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff fde2 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009010:	f241 3288 	movw	r2, #5000	; 0x1388
 8009014:	2133      	movs	r1, #51	; 0x33
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f8ae 	bl	8009178 <SDMMC_GetCmdResp1>
 800901c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901e:	69fb      	ldr	r3, [r7, #28]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009034:	2302      	movs	r3, #2
 8009036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009038:	23c0      	movs	r3, #192	; 0xc0
 800903a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009044:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009046:	f107 0308 	add.w	r3, r7, #8
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fdc1 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f97c 	bl	8009350 <SDMMC_GetCmdResp2>
 8009058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800905a:	69fb      	ldr	r3, [r7, #28]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009072:	2309      	movs	r3, #9
 8009074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009076:	23c0      	movs	r3, #192	; 0xc0
 8009078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800907a:	2300      	movs	r3, #0
 800907c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800907e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009082:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009084:	f107 0308 	add.w	r3, r7, #8
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff fda2 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f95d 	bl	8009350 <SDMMC_GetCmdResp2>
 8009096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009098:	69fb      	ldr	r3, [r7, #28]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3720      	adds	r7, #32
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b088      	sub	sp, #32
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80090b0:	2303      	movs	r3, #3
 80090b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff fd83 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	2103      	movs	r1, #3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9bc 	bl	8009450 <SDMMC_GetCmdResp6>
 80090d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80090f2:	230d      	movs	r3, #13
 80090f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090fa:	2300      	movs	r3, #0
 80090fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009102:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009104:	f107 0308 	add.w	r3, r7, #8
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff fd62 	bl	8008bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009110:	f241 3288 	movw	r2, #5000	; 0x1388
 8009114:	210d      	movs	r1, #13
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f82e 	bl	8009178 <SDMMC_GetCmdResp1>
 800911c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800911e:	69fb      	ldr	r3, [r7, #28]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3720      	adds	r7, #32
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009128:	b490      	push	{r4, r7}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009130:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <SDMMC_GetCmdError+0x48>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a0f      	ldr	r2, [pc, #60]	; (8009174 <SDMMC_GetCmdError+0x4c>)
 8009136:	fba2 2303 	umull	r2, r3, r2, r3
 800913a:	0a5b      	lsrs	r3, r3, #9
 800913c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009140:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009144:	4623      	mov	r3, r4
 8009146:	1e5c      	subs	r4, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800914c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009150:	e009      	b.n	8009166 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0f2      	beq.n	8009144 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	22c5      	movs	r2, #197	; 0xc5
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bc90      	pop	{r4, r7}
 800916e:	4770      	bx	lr
 8009170:	20000110 	.word	0x20000110
 8009174:	10624dd3 	.word	0x10624dd3

08009178 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009178:	b590      	push	{r4, r7, lr}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	460b      	mov	r3, r1
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009186:	4b6f      	ldr	r3, [pc, #444]	; (8009344 <SDMMC_GetCmdResp1+0x1cc>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a6f      	ldr	r2, [pc, #444]	; (8009348 <SDMMC_GetCmdResp1+0x1d0>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	0a5b      	lsrs	r3, r3, #9
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009198:	4623      	mov	r3, r4
 800919a:	1e5c      	subs	r4, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d102      	bne.n	80091a6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091a4:	e0c9      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091aa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f0      	beq.n	8009198 <SDMMC_GetCmdResp1+0x20>
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1eb      	bne.n	8009198 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2204      	movs	r2, #4
 80091d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091d2:	2304      	movs	r3, #4
 80091d4:	e0b1      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d004      	beq.n	80091ec <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e0a6      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	22c5      	movs	r2, #197	; 0xc5
 80091f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7ff fd18 	bl	8008c28 <SDIO_GetCommandResponse>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461a      	mov	r2, r3
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	4293      	cmp	r3, r2
 8009200:	d001      	beq.n	8009206 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009202:	2301      	movs	r3, #1
 8009204:	e099      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009206:	2100      	movs	r1, #0
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7ff fd1a 	bl	8008c42 <SDIO_GetResponse>
 800920e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4b4e      	ldr	r3, [pc, #312]	; (800934c <SDMMC_GetCmdResp1+0x1d4>)
 8009214:	4013      	ands	r3, r2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800921a:	2300      	movs	r3, #0
 800921c:	e08d      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	da02      	bge.n	800922a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009228:	e087      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	e080      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009242:	2380      	movs	r3, #128	; 0x80
 8009244:	e079      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009254:	e071      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009264:	e069      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009274:	e061      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009284:	e059      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009294:	e051      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092a4:	e049      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80092b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092b4:	e041      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80092c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092c4:	e039      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80092d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80092d4:	e031      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80092e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80092e4:	e029      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80092f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092f4:	e021      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009304:	e019      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009314:	e011      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009324:	e009      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009330:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009334:	e001      	b.n	800933a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800933a:	4618      	mov	r0, r3
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	bf00      	nop
 8009344:	20000110 	.word	0x20000110
 8009348:	10624dd3 	.word	0x10624dd3
 800934c:	fdffe008 	.word	0xfdffe008

08009350 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009350:	b490      	push	{r4, r7}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009358:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <SDMMC_GetCmdResp2+0x84>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a1e      	ldr	r2, [pc, #120]	; (80093d8 <SDMMC_GetCmdResp2+0x88>)
 800935e:	fba2 2303 	umull	r2, r3, r2, r3
 8009362:	0a5b      	lsrs	r3, r3, #9
 8009364:	f241 3288 	movw	r2, #5000	; 0x1388
 8009368:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800936c:	4623      	mov	r3, r4
 800936e:	1e5c      	subs	r4, r3, #1
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009378:	e026      	b.n	80093c8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0f0      	beq.n	800936c <SDMMC_GetCmdResp2+0x1c>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1eb      	bne.n	800936c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2204      	movs	r2, #4
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093a6:	2304      	movs	r3, #4
 80093a8:	e00e      	b.n	80093c8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d004      	beq.n	80093c0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093bc:	2301      	movs	r3, #1
 80093be:	e003      	b.n	80093c8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	22c5      	movs	r2, #197	; 0xc5
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc90      	pop	{r4, r7}
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000110 	.word	0x20000110
 80093d8:	10624dd3 	.word	0x10624dd3

080093dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80093dc:	b490      	push	{r4, r7}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093e4:	4b18      	ldr	r3, [pc, #96]	; (8009448 <SDMMC_GetCmdResp3+0x6c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a18      	ldr	r2, [pc, #96]	; (800944c <SDMMC_GetCmdResp3+0x70>)
 80093ea:	fba2 2303 	umull	r2, r3, r2, r3
 80093ee:	0a5b      	lsrs	r3, r3, #9
 80093f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80093f8:	4623      	mov	r3, r4
 80093fa:	1e5c      	subs	r4, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009404:	e01b      	b.n	800943e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f0      	beq.n	80093f8 <SDMMC_GetCmdResp3+0x1c>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1eb      	bne.n	80093f8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d004      	beq.n	8009436 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2204      	movs	r2, #4
 8009430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009432:	2304      	movs	r3, #4
 8009434:	e003      	b.n	800943e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	22c5      	movs	r2, #197	; 0xc5
 800943a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bc90      	pop	{r4, r7}
 8009446:	4770      	bx	lr
 8009448:	20000110 	.word	0x20000110
 800944c:	10624dd3 	.word	0x10624dd3

08009450 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	460b      	mov	r3, r1
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800945e:	4b34      	ldr	r3, [pc, #208]	; (8009530 <SDMMC_GetCmdResp6+0xe0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a34      	ldr	r2, [pc, #208]	; (8009534 <SDMMC_GetCmdResp6+0xe4>)
 8009464:	fba2 2303 	umull	r2, r3, r2, r3
 8009468:	0a5b      	lsrs	r3, r3, #9
 800946a:	f241 3288 	movw	r2, #5000	; 0x1388
 800946e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009472:	4623      	mov	r3, r4
 8009474:	1e5c      	subs	r4, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d102      	bne.n	8009480 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800947a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800947e:	e052      	b.n	8009526 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009484:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0f0      	beq.n	8009472 <SDMMC_GetCmdResp6+0x22>
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1eb      	bne.n	8009472 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2204      	movs	r2, #4
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094ac:	2304      	movs	r3, #4
 80094ae:	e03a      	b.n	8009526 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2201      	movs	r2, #1
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e02f      	b.n	8009526 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff fbae 	bl	8008c28 <SDIO_GetCommandResponse>
 80094cc:	4603      	mov	r3, r0
 80094ce:	461a      	mov	r2, r3
 80094d0:	7afb      	ldrb	r3, [r7, #11]
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d001      	beq.n	80094da <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e025      	b.n	8009526 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	22c5      	movs	r2, #197	; 0xc5
 80094de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80094e0:	2100      	movs	r1, #0
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff fbad 	bl	8008c42 <SDIO_GetResponse>
 80094e8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d106      	bne.n	8009502 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80094fe:	2300      	movs	r3, #0
 8009500:	e011      	b.n	8009526 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800950c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009510:	e009      	b.n	8009526 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800951c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009520:	e001      	b.n	8009526 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009526:	4618      	mov	r0, r3
 8009528:	371c      	adds	r7, #28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}
 800952e:	bf00      	nop
 8009530:	20000110 	.word	0x20000110
 8009534:	10624dd3 	.word	0x10624dd3

08009538 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009538:	b490      	push	{r4, r7}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009540:	4b21      	ldr	r3, [pc, #132]	; (80095c8 <SDMMC_GetCmdResp7+0x90>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a21      	ldr	r2, [pc, #132]	; (80095cc <SDMMC_GetCmdResp7+0x94>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	0a5b      	lsrs	r3, r3, #9
 800954c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009550:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009554:	4623      	mov	r3, r4
 8009556:	1e5c      	subs	r4, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d102      	bne.n	8009562 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800955c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009560:	e02c      	b.n	80095bc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0f0      	beq.n	8009554 <SDMMC_GetCmdResp7+0x1c>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1eb      	bne.n	8009554 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2204      	movs	r2, #4
 800958c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800958e:	2304      	movs	r3, #4
 8009590:	e014      	b.n	80095bc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e009      	b.n	80095bc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2240      	movs	r2, #64	; 0x40
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80095ba:	2300      	movs	r3, #0
  
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc90      	pop	{r4, r7}
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	20000110 	.word	0x20000110
 80095cc:	10624dd3 	.word	0x10624dd3

080095d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <MX_FATFS_Init+0x18>)
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <MX_FATFS_Init+0x1c>)
 80095d8:	f001 ffbc 	bl	800b554 <FATFS_LinkDriver>
 80095dc:	4603      	mov	r3, r0
 80095de:	461a      	mov	r2, r3
 80095e0:	4b03      	ldr	r3, [pc, #12]	; (80095f0 <MX_FATFS_Init+0x20>)
 80095e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80095e4:	bf00      	nop
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20003c24 	.word	0x20003c24
 80095ec:	0800e38c 	.word	0x0800e38c
 80095f0:	20003c20 	.word	0x20003c20

080095f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80095fe:	f000 f879 	bl	80096f4 <BSP_SD_IsDetected>
 8009602:	4603      	mov	r3, r0
 8009604:	2b01      	cmp	r3, #1
 8009606:	d001      	beq.n	800960c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e012      	b.n	8009632 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800960c:	480b      	ldr	r0, [pc, #44]	; (800963c <BSP_SD_Init+0x48>)
 800960e:	f7fd fbab 	bl	8006d68 <HAL_SD_Init>
 8009612:	4603      	mov	r3, r0
 8009614:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800961c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009620:	4806      	ldr	r0, [pc, #24]	; (800963c <BSP_SD_Init+0x48>)
 8009622:	f7fe f99d 	bl	8007960 <HAL_SD_ConfigWideBusOperation>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009630:	79fb      	ldrb	r3, [r7, #7]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20003ae8 	.word	0x20003ae8

08009640 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af02      	add	r7, sp, #8
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	4806      	ldr	r0, [pc, #24]	; (8009678 <BSP_SD_ReadBlocks+0x38>)
 800965e:	f7fd fc13 	bl	8006e88 <HAL_SD_ReadBlocks>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20003ae8 	.word	0x20003ae8

0800967c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af02      	add	r7, sp, #8
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	68f9      	ldr	r1, [r7, #12]
 8009698:	4806      	ldr	r0, [pc, #24]	; (80096b4 <BSP_SD_WriteBlocks+0x38>)
 800969a:	f7fd fdef 	bl	800727c <HAL_SD_WriteBlocks>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20003ae8 	.word	0x20003ae8

080096b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80096bc:	4805      	ldr	r0, [pc, #20]	; (80096d4 <BSP_SD_GetCardState+0x1c>)
 80096be:	f7fe f9cb 	bl	8007a58 <HAL_SD_GetCardState>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	bf14      	ite	ne
 80096c8:	2301      	movne	r3, #1
 80096ca:	2300      	moveq	r3, #0
 80096cc:	b2db      	uxtb	r3, r3
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20003ae8 	.word	0x20003ae8

080096d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4803      	ldr	r0, [pc, #12]	; (80096f0 <BSP_SD_GetCardInfo+0x18>)
 80096e4:	f7fe f910 	bl	8007908 <HAL_SD_GetCardInfo>
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20003ae8 	.word	0x20003ae8

080096f4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80096fa:	2301      	movs	r3, #1
 80096fc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80096fe:	f000 f80b 	bl	8009718 <BSP_PlatformIsDetected>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009708:	2300      	movs	r3, #0
 800970a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	b2db      	uxtb	r3, r3
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800971e:	2301      	movs	r3, #1
 8009720:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009722:	2101      	movs	r1, #1
 8009724:	4807      	ldr	r0, [pc, #28]	; (8009744 <BSP_PlatformIsDetected+0x2c>)
 8009726:	f7fb fde7 	bl	80052f8 <HAL_GPIO_ReadPin>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009730:	2300      	movs	r3, #0
 8009732:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 8009734:	2301      	movs	r3, #1
 8009736:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 8009738:	79fb      	ldrb	r3, [r7, #7]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	40020c00 	.word	0x40020c00

08009748 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009752:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <SD_CheckStatus+0x38>)
 8009754:	2201      	movs	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009758:	f7ff ffae 	bl	80096b8 <BSP_SD_GetCardState>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d107      	bne.n	8009772 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <SD_CheckStatus+0x38>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f023 0301 	bic.w	r3, r3, #1
 800976c:	b2da      	uxtb	r2, r3
 800976e:	4b04      	ldr	r3, [pc, #16]	; (8009780 <SD_CheckStatus+0x38>)
 8009770:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009772:	4b03      	ldr	r3, [pc, #12]	; (8009780 <SD_CheckStatus+0x38>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	b2db      	uxtb	r3, r3
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	2000011d 	.word	0x2000011d

08009784 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800978e:	4b0b      	ldr	r3, [pc, #44]	; (80097bc <SD_initialize+0x38>)
 8009790:	2201      	movs	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009794:	f7ff ff2e 	bl	80095f4 <BSP_SD_Init>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d107      	bne.n	80097ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff ffd1 	bl	8009748 <SD_CheckStatus>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	4b04      	ldr	r3, [pc, #16]	; (80097bc <SD_initialize+0x38>)
 80097ac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80097ae:	4b03      	ldr	r3, [pc, #12]	; (80097bc <SD_initialize+0x38>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b2db      	uxtb	r3, r3
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	2000011d 	.word	0x2000011d

080097c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff ffbb 	bl	8009748 <SD_CheckStatus>
 80097d2:	4603      	mov	r3, r0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80097f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	68b8      	ldr	r0, [r7, #8]
 80097fa:	f7ff ff21 	bl	8009640 <BSP_SD_ReadBlocks>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d107      	bne.n	8009814 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009804:	bf00      	nop
 8009806:	f7ff ff57 	bl	80096b8 <BSP_SD_GetCardState>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1fa      	bne.n	8009806 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b086      	sub	sp, #24
 8009822:	af00      	add	r7, sp, #0
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
 800982a:	4603      	mov	r3, r0
 800982c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	68b8      	ldr	r0, [r7, #8]
 800983c:	f7ff ff1e 	bl	800967c <BSP_SD_WriteBlocks>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d107      	bne.n	8009856 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009846:	bf00      	nop
 8009848:	f7ff ff36 	bl	80096b8 <BSP_SD_GetCardState>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1fa      	bne.n	8009848 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009856:	7dfb      	ldrb	r3, [r7, #23]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08c      	sub	sp, #48	; 0x30
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	603a      	str	r2, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
 800986c:	460b      	mov	r3, r1
 800986e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009876:	4b25      	ldr	r3, [pc, #148]	; (800990c <SD_ioctl+0xac>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <SD_ioctl+0x28>
 8009884:	2303      	movs	r3, #3
 8009886:	e03c      	b.n	8009902 <SD_ioctl+0xa2>

  switch (cmd)
 8009888:	79bb      	ldrb	r3, [r7, #6]
 800988a:	2b03      	cmp	r3, #3
 800988c:	d834      	bhi.n	80098f8 <SD_ioctl+0x98>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <SD_ioctl+0x34>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098a5 	.word	0x080098a5
 8009898:	080098ad 	.word	0x080098ad
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098df 	.word	0x080098df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098aa:	e028      	b.n	80098fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ac:	f107 030c 	add.w	r3, r7, #12
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff ff11 	bl	80096d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098c2:	e01c      	b.n	80098fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098c4:	f107 030c 	add.w	r3, r7, #12
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff ff05 	bl	80096d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098dc:	e00f      	b.n	80098fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098de:	f107 030c 	add.w	r3, r7, #12
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff fef8 	bl	80096d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	0a5a      	lsrs	r2, r3, #9
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098f6:	e002      	b.n	80098fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098f8:	2304      	movs	r3, #4
 80098fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80098fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009902:	4618      	mov	r0, r3
 8009904:	3730      	adds	r7, #48	; 0x30
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	2000011d 	.word	0x2000011d

08009910 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	4a08      	ldr	r2, [pc, #32]	; (8009940 <disk_status+0x30>)
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	79fa      	ldrb	r2, [r7, #7]
 8009928:	4905      	ldr	r1, [pc, #20]	; (8009940 <disk_status+0x30>)
 800992a:	440a      	add	r2, r1
 800992c:	7a12      	ldrb	r2, [r2, #8]
 800992e:	4610      	mov	r0, r2
 8009930:	4798      	blx	r3
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000370 	.word	0x20000370

08009944 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <disk_initialize+0x48>)
 8009956:	5cd3      	ldrb	r3, [r2, r3]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d111      	bne.n	8009980 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	4a0b      	ldr	r2, [pc, #44]	; (800998c <disk_initialize+0x48>)
 8009960:	2101      	movs	r1, #1
 8009962:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	4a09      	ldr	r2, [pc, #36]	; (800998c <disk_initialize+0x48>)
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	79fa      	ldrb	r2, [r7, #7]
 8009972:	4906      	ldr	r1, [pc, #24]	; (800998c <disk_initialize+0x48>)
 8009974:	440a      	add	r2, r1
 8009976:	7a12      	ldrb	r2, [r2, #8]
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000370 	.word	0x20000370

08009990 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009990:	b590      	push	{r4, r7, lr}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <disk_read+0x3c>)
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	689c      	ldr	r4, [r3, #8]
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4a07      	ldr	r2, [pc, #28]	; (80099cc <disk_read+0x3c>)
 80099b0:	4413      	add	r3, r2
 80099b2:	7a18      	ldrb	r0, [r3, #8]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	47a0      	blx	r4
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]
  return res;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd90      	pop	{r4, r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20000370 	.word	0x20000370

080099d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <disk_write+0x3c>)
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	68dc      	ldr	r4, [r3, #12]
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4a07      	ldr	r2, [pc, #28]	; (8009a0c <disk_write+0x3c>)
 80099f0:	4413      	add	r3, r2
 80099f2:	7a18      	ldrb	r0, [r3, #8]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68b9      	ldr	r1, [r7, #8]
 80099fa:	47a0      	blx	r4
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd90      	pop	{r4, r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20000370 	.word	0x20000370

08009a10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	603a      	str	r2, [r7, #0]
 8009a1a:	71fb      	strb	r3, [r7, #7]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <disk_ioctl+0x38>)
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	79fa      	ldrb	r2, [r7, #7]
 8009a2e:	4906      	ldr	r1, [pc, #24]	; (8009a48 <disk_ioctl+0x38>)
 8009a30:	440a      	add	r2, r1
 8009a32:	7a10      	ldrb	r0, [r2, #8]
 8009a34:	79b9      	ldrb	r1, [r7, #6]
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4798      	blx	r3
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000370 	.word	0x20000370

08009a4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3301      	adds	r3, #1
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a5c:	89fb      	ldrh	r3, [r7, #14]
 8009a5e:	021b      	lsls	r3, r3, #8
 8009a60:	b21a      	sxth	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b21b      	sxth	r3, r3
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	b21b      	sxth	r3, r3
 8009a6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a6e:	89fb      	ldrh	r3, [r7, #14]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3303      	adds	r3, #3
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	021b      	lsls	r3, r3, #8
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	3202      	adds	r2, #2
 8009a94:	7812      	ldrb	r2, [r2, #0]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	021b      	lsls	r3, r3, #8
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	3201      	adds	r2, #1
 8009aa2:	7812      	ldrb	r2, [r2, #0]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	021b      	lsls	r3, r3, #8
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	7812      	ldrb	r2, [r2, #0]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b083      	sub	sp, #12
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	887a      	ldrh	r2, [r7, #2]
 8009ad6:	b2d2      	uxtb	r2, r2
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	887b      	ldrh	r3, [r7, #2]
 8009adc:	0a1b      	lsrs	r3, r3, #8
 8009ade:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	607a      	str	r2, [r7, #4]
 8009ae6:	887a      	ldrh	r2, [r7, #2]
 8009ae8:	b2d2      	uxtb	r2, r2
 8009aea:	701a      	strb	r2, [r3, #0]
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	0a1b      	lsrs	r3, r3, #8
 8009b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	0a1b      	lsrs	r3, r3, #8
 8009b24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	0a1b      	lsrs	r3, r3, #8
 8009b36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	607a      	str	r2, [r7, #4]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	617a      	str	r2, [r7, #20]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	607b      	str	r3, [r7, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1f3      	bne.n	8009b60 <mem_set+0x10>
}
 8009b78:	bf00      	nop
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b84:	b480      	push	{r7}
 8009b86:	b089      	sub	sp, #36	; 0x24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	61fb      	str	r3, [r7, #28]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	61fa      	str	r2, [r7, #28]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	61ba      	str	r2, [r7, #24]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	1acb      	subs	r3, r1, r3
 8009bb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	607b      	str	r3, [r7, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <mem_cmp+0x40>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0eb      	beq.n	8009b9c <mem_cmp+0x18>

	return r;
 8009bc4:	697b      	ldr	r3, [r7, #20]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3724      	adds	r7, #36	; 0x24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009bdc:	e002      	b.n	8009be4 <chk_chr+0x12>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3301      	adds	r3, #1
 8009be2:	607b      	str	r3, [r7, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <chk_chr+0x26>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d1f2      	bne.n	8009bde <chk_chr+0xc>
	return *str;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	e01f      	b.n	8009c58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009c18:	4a41      	ldr	r2, [pc, #260]	; (8009d20 <inc_lock+0x118>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	4413      	add	r3, r2
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d113      	bne.n	8009c52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009c2a:	4a3d      	ldr	r2, [pc, #244]	; (8009d20 <inc_lock+0x118>)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	4413      	add	r3, r2
 8009c32:	3304      	adds	r3, #4
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d109      	bne.n	8009c52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009c3e:	4a38      	ldr	r2, [pc, #224]	; (8009d20 <inc_lock+0x118>)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	4413      	add	r3, r2
 8009c46:	3308      	adds	r3, #8
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d006      	beq.n	8009c60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3301      	adds	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d9dc      	bls.n	8009c18 <inc_lock+0x10>
 8009c5e:	e000      	b.n	8009c62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009c60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d132      	bne.n	8009cce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	e002      	b.n	8009c74 <inc_lock+0x6c>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3301      	adds	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d806      	bhi.n	8009c88 <inc_lock+0x80>
 8009c7a:	4a29      	ldr	r2, [pc, #164]	; (8009d20 <inc_lock+0x118>)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	4413      	add	r3, r2
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1f2      	bne.n	8009c6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d101      	bne.n	8009c92 <inc_lock+0x8a>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e040      	b.n	8009d14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4922      	ldr	r1, [pc, #136]	; (8009d20 <inc_lock+0x118>)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	440b      	add	r3, r1
 8009c9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	491e      	ldr	r1, [pc, #120]	; (8009d20 <inc_lock+0x118>)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	011b      	lsls	r3, r3, #4
 8009caa:	440b      	add	r3, r1
 8009cac:	3304      	adds	r3, #4
 8009cae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	695a      	ldr	r2, [r3, #20]
 8009cb4:	491a      	ldr	r1, [pc, #104]	; (8009d20 <inc_lock+0x118>)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	440b      	add	r3, r1
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009cc0:	4a17      	ldr	r2, [pc, #92]	; (8009d20 <inc_lock+0x118>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	4413      	add	r3, r2
 8009cc8:	330c      	adds	r3, #12
 8009cca:	2200      	movs	r2, #0
 8009ccc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d009      	beq.n	8009ce8 <inc_lock+0xe0>
 8009cd4:	4a12      	ldr	r2, [pc, #72]	; (8009d20 <inc_lock+0x118>)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	4413      	add	r3, r2
 8009cdc:	330c      	adds	r3, #12
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <inc_lock+0xe0>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	e015      	b.n	8009d14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d108      	bne.n	8009d00 <inc_lock+0xf8>
 8009cee:	4a0c      	ldr	r2, [pc, #48]	; (8009d20 <inc_lock+0x118>)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	4413      	add	r3, r2
 8009cf6:	330c      	adds	r3, #12
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	e001      	b.n	8009d04 <inc_lock+0xfc>
 8009d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d04:	4906      	ldr	r1, [pc, #24]	; (8009d20 <inc_lock+0x118>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	440b      	add	r3, r1
 8009d0c:	330c      	adds	r3, #12
 8009d0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3301      	adds	r3, #1
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	20000350 	.word	0x20000350

08009d24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	e010      	b.n	8009d54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009d32:	4a0d      	ldr	r2, [pc, #52]	; (8009d68 <clear_lock+0x44>)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	4413      	add	r3, r2
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d105      	bne.n	8009d4e <clear_lock+0x2a>
 8009d42:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <clear_lock+0x44>)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	011b      	lsls	r3, r3, #4
 8009d48:	4413      	add	r3, r2
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d9eb      	bls.n	8009d32 <clear_lock+0xe>
	}
}
 8009d5a:	bf00      	nop
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20000350 	.word	0x20000350

08009d6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	78db      	ldrb	r3, [r3, #3]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d034      	beq.n	8009dea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	7858      	ldrb	r0, [r3, #1]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d90:	2301      	movs	r3, #1
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	f7ff fe1c 	bl	80099d0 <disk_write>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d002      	beq.n	8009da4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	73fb      	strb	r3, [r7, #15]
 8009da2:	e022      	b.n	8009dea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	1ad2      	subs	r2, r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d217      	bcs.n	8009dea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	789b      	ldrb	r3, [r3, #2]
 8009dbe:	613b      	str	r3, [r7, #16]
 8009dc0:	e010      	b.n	8009de4 <sync_window+0x78>
					wsect += fs->fsize;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4413      	add	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7858      	ldrb	r0, [r3, #1]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	f7ff fdf9 	bl	80099d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d8eb      	bhi.n	8009dc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d01b      	beq.n	8009e44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff ffad 	bl	8009d6c <sync_window>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d113      	bne.n	8009e44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7858      	ldrb	r0, [r3, #1]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e26:	2301      	movs	r3, #1
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	f7ff fdb1 	bl	8009990 <disk_read>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d004      	beq.n	8009e3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	3b02      	subs	r3, #2
 8009e5c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	3b02      	subs	r3, #2
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d301      	bcc.n	8009e6e <clust2sect+0x20>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e008      	b.n	8009e80 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	895b      	ldrh	r3, [r3, #10]
 8009e72:	461a      	mov	r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	fb03 f202 	mul.w	r2, r3, r2
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	4413      	add	r3, r2
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d904      	bls.n	8009eac <get_fat+0x20>
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d302      	bcc.n	8009eb2 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009eac:	2301      	movs	r3, #1
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e0b7      	b.n	800a022 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eb6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d05a      	beq.n	8009f76 <get_fat+0xea>
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d07d      	beq.n	8009fc0 <get_fat+0x134>
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	f040 80a2 	bne.w	800a00e <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	085b      	lsrs	r3, r3, #1
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	899b      	ldrh	r3, [r3, #12]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ee8:	4413      	add	r3, r2
 8009eea:	4619      	mov	r1, r3
 8009eec:	6938      	ldr	r0, [r7, #16]
 8009eee:	f7ff ff81 	bl	8009df4 <move_window>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f040 808d 	bne.w	800a014 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	60fa      	str	r2, [r7, #12]
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	8992      	ldrh	r2, [r2, #12]
 8009f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f08:	fb02 f201 	mul.w	r2, r2, r1
 8009f0c:	1a9b      	subs	r3, r3, r2
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4413      	add	r3, r2
 8009f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f16:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	899b      	ldrh	r3, [r3, #12]
 8009f20:	4619      	mov	r1, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f28:	4413      	add	r3, r2
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6938      	ldr	r0, [r7, #16]
 8009f2e:	f7ff ff61 	bl	8009df4 <move_window>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d16f      	bne.n	800a018 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	899b      	ldrh	r3, [r3, #12]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f44:	fb02 f201 	mul.w	r2, r2, r1
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f52:	021b      	lsls	r3, r3, #8
 8009f54:	461a      	mov	r2, r3
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <get_fat+0xe0>
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	091b      	lsrs	r3, r3, #4
 8009f6a:	e002      	b.n	8009f72 <get_fat+0xe6>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f72:	617b      	str	r3, [r7, #20]
			break;
 8009f74:	e055      	b.n	800a022 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	899b      	ldrh	r3, [r3, #12]
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4619      	mov	r1, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f8a:	4413      	add	r3, r2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6938      	ldr	r0, [r7, #16]
 8009f90:	f7ff ff30 	bl	8009df4 <move_window>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d140      	bne.n	800a01c <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	005b      	lsls	r3, r3, #1
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	8992      	ldrh	r2, [r2, #12]
 8009fa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fac:	fb02 f200 	mul.w	r2, r2, r0
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	440b      	add	r3, r1
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7ff fd49 	bl	8009a4c <ld_word>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	617b      	str	r3, [r7, #20]
			break;
 8009fbe:	e030      	b.n	800a022 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	899b      	ldrh	r3, [r3, #12]
 8009fc8:	089b      	lsrs	r3, r3, #2
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4619      	mov	r1, r3
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6938      	ldr	r0, [r7, #16]
 8009fda:	f7ff ff0b 	bl	8009df4 <move_window>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d11d      	bne.n	800a020 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	8992      	ldrh	r2, [r2, #12]
 8009ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ff6:	fb02 f200 	mul.w	r2, r2, r0
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff fd3c 	bl	8009a7c <ld_dword>
 800a004:	4603      	mov	r3, r0
 800a006:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a00a:	617b      	str	r3, [r7, #20]
			break;
 800a00c:	e009      	b.n	800a022 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a00e:	2301      	movs	r3, #1
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	e006      	b.n	800a022 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a014:	bf00      	nop
 800a016:	e004      	b.n	800a022 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a018:	bf00      	nop
 800a01a:	e002      	b.n	800a022 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a020:	bf00      	nop
		}
	}

	return val;
 800a022:	697b      	ldr	r3, [r7, #20]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a02c:	b590      	push	{r4, r7, lr}
 800a02e:	b089      	sub	sp, #36	; 0x24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a038:	2302      	movs	r3, #2
 800a03a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	f240 8106 	bls.w	800a250 <put_fat+0x224>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	f080 8100 	bcs.w	800a250 <put_fat+0x224>
		switch (fs->fs_type) {
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b02      	cmp	r3, #2
 800a056:	f000 8088 	beq.w	800a16a <put_fat+0x13e>
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	f000 80b0 	beq.w	800a1c0 <put_fat+0x194>
 800a060:	2b01      	cmp	r3, #1
 800a062:	f040 80f5 	bne.w	800a250 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	61bb      	str	r3, [r7, #24]
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	085b      	lsrs	r3, r3, #1
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	4413      	add	r3, r2
 800a072:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	899b      	ldrh	r3, [r3, #12]
 800a07c:	4619      	mov	r1, r3
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	fbb3 f3f1 	udiv	r3, r3, r1
 800a084:	4413      	add	r3, r2
 800a086:	4619      	mov	r1, r3
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7ff feb3 	bl	8009df4 <move_window>
 800a08e:	4603      	mov	r3, r0
 800a090:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a092:	7ffb      	ldrb	r3, [r7, #31]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f040 80d4 	bne.w	800a242 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	61ba      	str	r2, [r7, #24]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	8992      	ldrh	r2, [r2, #12]
 800a0aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0ae:	fb02 f200 	mul.w	r2, r2, r0
 800a0b2:	1a9b      	subs	r3, r3, r2
 800a0b4:	440b      	add	r3, r1
 800a0b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00d      	beq.n	800a0de <put_fat+0xb2>
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	b25b      	sxtb	r3, r3
 800a0c8:	f003 030f 	and.w	r3, r3, #15
 800a0cc:	b25a      	sxtb	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	b25b      	sxtb	r3, r3
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	b25b      	sxtb	r3, r3
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	e001      	b.n	800a0e2 <put_fat+0xb6>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	899b      	ldrh	r3, [r3, #12]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0fc:	4413      	add	r3, r2
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff fe77 	bl	8009df4 <move_window>
 800a106:	4603      	mov	r3, r0
 800a108:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a10a:	7ffb      	ldrb	r3, [r7, #31]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 809a 	bne.w	800a246 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	899b      	ldrh	r3, [r3, #12]
 800a11c:	461a      	mov	r2, r3
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	fbb3 f0f2 	udiv	r0, r3, r2
 800a124:	fb02 f200 	mul.w	r2, r2, r0
 800a128:	1a9b      	subs	r3, r3, r2
 800a12a:	440b      	add	r3, r1
 800a12c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	2b00      	cmp	r3, #0
 800a136:	d003      	beq.n	800a140 <put_fat+0x114>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	091b      	lsrs	r3, r3, #4
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	e00e      	b.n	800a15e <put_fat+0x132>
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	b25b      	sxtb	r3, r3
 800a146:	f023 030f 	bic.w	r3, r3, #15
 800a14a:	b25a      	sxtb	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	0a1b      	lsrs	r3, r3, #8
 800a150:	b25b      	sxtb	r3, r3
 800a152:	f003 030f 	and.w	r3, r3, #15
 800a156:	b25b      	sxtb	r3, r3
 800a158:	4313      	orrs	r3, r2
 800a15a:	b25b      	sxtb	r3, r3
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	70da      	strb	r2, [r3, #3]
			break;
 800a168:	e072      	b.n	800a250 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	899b      	ldrh	r3, [r3, #12]
 800a172:	085b      	lsrs	r3, r3, #1
 800a174:	b29b      	uxth	r3, r3
 800a176:	4619      	mov	r1, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a17e:	4413      	add	r3, r2
 800a180:	4619      	mov	r1, r3
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff fe36 	bl	8009df4 <move_window>
 800a188:	4603      	mov	r3, r0
 800a18a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a18c:	7ffb      	ldrb	r3, [r7, #31]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d15b      	bne.n	800a24a <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	8992      	ldrh	r2, [r2, #12]
 800a1a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1a4:	fb02 f200 	mul.w	r2, r2, r0
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	b292      	uxth	r2, r2
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff fc85 	bl	8009ac2 <st_word>
			fs->wflag = 1;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	70da      	strb	r2, [r3, #3]
			break;
 800a1be:	e047      	b.n	800a250 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	899b      	ldrh	r3, [r3, #12]
 800a1c8:	089b      	lsrs	r3, r3, #2
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fe0b 	bl	8009df4 <move_window>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1e2:	7ffb      	ldrb	r3, [r7, #31]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d132      	bne.n	800a24e <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	8992      	ldrh	r2, [r2, #12]
 800a1fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a200:	fb02 f200 	mul.w	r2, r2, r0
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	440b      	add	r3, r1
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fc37 	bl	8009a7c <ld_dword>
 800a20e:	4603      	mov	r3, r0
 800a210:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a214:	4323      	orrs	r3, r4
 800a216:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	8992      	ldrh	r2, [r2, #12]
 800a226:	fbb3 f0f2 	udiv	r0, r3, r2
 800a22a:	fb02 f200 	mul.w	r2, r2, r0
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	440b      	add	r3, r1
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff fc5f 	bl	8009af8 <st_dword>
			fs->wflag = 1;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	70da      	strb	r2, [r3, #3]
			break;
 800a240:	e006      	b.n	800a250 <put_fat+0x224>
			if (res != FR_OK) break;
 800a242:	bf00      	nop
 800a244:	e004      	b.n	800a250 <put_fat+0x224>
			if (res != FR_OK) break;
 800a246:	bf00      	nop
 800a248:	e002      	b.n	800a250 <put_fat+0x224>
			if (res != FR_OK) break;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <put_fat+0x224>
			if (res != FR_OK) break;
 800a24e:	bf00      	nop
		}
	}
	return res;
 800a250:	7ffb      	ldrb	r3, [r7, #31]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3724      	adds	r7, #36	; 0x24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd90      	pop	{r4, r7, pc}

0800a25a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b088      	sub	sp, #32
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10d      	bne.n	800a28c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d004      	beq.n	800a286 <create_chain+0x2c>
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	69ba      	ldr	r2, [r7, #24]
 800a282:	429a      	cmp	r2, r3
 800a284:	d31b      	bcc.n	800a2be <create_chain+0x64>
 800a286:	2301      	movs	r3, #1
 800a288:	61bb      	str	r3, [r7, #24]
 800a28a:	e018      	b.n	800a2be <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7ff fdfc 	bl	8009e8c <get_fat>
 800a294:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d801      	bhi.n	800a2a0 <create_chain+0x46>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e070      	b.n	800a382 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2a6:	d101      	bne.n	800a2ac <create_chain+0x52>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	e06a      	b.n	800a382 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d201      	bcs.n	800a2ba <create_chain+0x60>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	e063      	b.n	800a382 <create_chain+0x128>
		scl = clst;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	69fa      	ldr	r2, [r7, #28]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d307      	bcc.n	800a2e2 <create_chain+0x88>
				ncl = 2;
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d901      	bls.n	800a2e2 <create_chain+0x88>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e04f      	b.n	800a382 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a2e2:	69f9      	ldr	r1, [r7, #28]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fdd1 	bl	8009e8c <get_fat>
 800a2ea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00e      	beq.n	800a310 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d003      	beq.n	800a300 <create_chain+0xa6>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2fe:	d101      	bne.n	800a304 <create_chain+0xaa>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	e03e      	b.n	800a382 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a304:	69fa      	ldr	r2, [r7, #28]
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d1da      	bne.n	800a2c2 <create_chain+0x68>
 800a30c:	2300      	movs	r3, #0
 800a30e:	e038      	b.n	800a382 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a310:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a316:	69f9      	ldr	r1, [r7, #28]
 800a318:	6938      	ldr	r0, [r7, #16]
 800a31a:	f7ff fe87 	bl	800a02c <put_fat>
 800a31e:	4603      	mov	r3, r0
 800a320:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d109      	bne.n	800a33c <create_chain+0xe2>
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d006      	beq.n	800a33c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6938      	ldr	r0, [r7, #16]
 800a334:	f7ff fe7a 	bl	800a02c <put_fat>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d116      	bne.n	800a370 <create_chain+0x116>
		fs->last_clst = ncl;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	695a      	ldr	r2, [r3, #20]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	3b02      	subs	r3, #2
 800a352:	429a      	cmp	r2, r3
 800a354:	d804      	bhi.n	800a360 <create_chain+0x106>
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	1e5a      	subs	r2, r3, #1
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	791b      	ldrb	r3, [r3, #4]
 800a364:	f043 0301 	orr.w	r3, r3, #1
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	711a      	strb	r2, [r3, #4]
 800a36e:	e007      	b.n	800a380 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d102      	bne.n	800a37c <create_chain+0x122>
 800a376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a37a:	e000      	b.n	800a37e <create_chain+0x124>
 800a37c:	2301      	movs	r3, #1
 800a37e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a380:	69fb      	ldr	r3, [r7, #28]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3720      	adds	r7, #32
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3a0:	d204      	bcs.n	800a3ac <dir_sdi+0x22>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	f003 031f 	and.w	r3, r3, #31
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	e071      	b.n	800a494 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <dir_sdi+0x46>
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d902      	bls.n	800a3d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10c      	bne.n	800a3f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	095b      	lsrs	r3, r3, #5
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	8912      	ldrh	r2, [r2, #8]
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d301      	bcc.n	800a3e6 <dir_sdi+0x5c>
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e056      	b.n	800a494 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	61da      	str	r2, [r3, #28]
 800a3ee:	e02d      	b.n	800a44c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	895b      	ldrh	r3, [r3, #10]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	899b      	ldrh	r3, [r3, #12]
 800a3fa:	fb03 f302 	mul.w	r3, r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a400:	e019      	b.n	800a436 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6979      	ldr	r1, [r7, #20]
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff fd40 	bl	8009e8c <get_fat>
 800a40c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a414:	d101      	bne.n	800a41a <dir_sdi+0x90>
 800a416:	2301      	movs	r3, #1
 800a418:	e03c      	b.n	800a494 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d904      	bls.n	800a42a <dir_sdi+0xa0>
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	429a      	cmp	r2, r3
 800a428:	d301      	bcc.n	800a42e <dir_sdi+0xa4>
 800a42a:	2302      	movs	r3, #2
 800a42c:	e032      	b.n	800a494 <dir_sdi+0x10a>
			ofs -= csz;
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d2e1      	bcs.n	800a402 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	6938      	ldr	r0, [r7, #16]
 800a442:	f7ff fd04 	bl	8009e4e <clust2sect>
 800a446:	4602      	mov	r2, r0
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <dir_sdi+0xd4>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e01a      	b.n	800a494 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	69da      	ldr	r2, [r3, #28]
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	899b      	ldrh	r3, [r3, #12]
 800a466:	4619      	mov	r1, r3
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a46e:	441a      	add	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	899b      	ldrh	r3, [r3, #12]
 800a47e:	461a      	mov	r2, r3
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	fbb3 f0f2 	udiv	r0, r3, r2
 800a486:	fb02 f200 	mul.w	r2, r2, r0
 800a48a:	1a9b      	subs	r3, r3, r2
 800a48c:	18ca      	adds	r2, r1, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	3320      	adds	r3, #32
 800a4b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <dir_next+0x28>
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4c2:	d301      	bcc.n	800a4c8 <dir_next+0x2c>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	e0bb      	b.n	800a640 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	899b      	ldrh	r3, [r3, #12]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4d4:	fb02 f201 	mul.w	r2, r2, r1
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f040 809d 	bne.w	800a61a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	1c5a      	adds	r2, r3, #1
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10b      	bne.n	800a50a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	095b      	lsrs	r3, r3, #5
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	8912      	ldrh	r2, [r2, #8]
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	f0c0 808d 	bcc.w	800a61a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	61da      	str	r2, [r3, #28]
 800a506:	2304      	movs	r3, #4
 800a508:	e09a      	b.n	800a640 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	899b      	ldrh	r3, [r3, #12]
 800a50e:	461a      	mov	r2, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	fbb3 f3f2 	udiv	r3, r3, r2
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	8952      	ldrh	r2, [r2, #10]
 800a51a:	3a01      	subs	r2, #1
 800a51c:	4013      	ands	r3, r2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d17b      	bne.n	800a61a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	4619      	mov	r1, r3
 800a52a:	4610      	mov	r0, r2
 800a52c:	f7ff fcae 	bl	8009e8c <get_fat>
 800a530:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d801      	bhi.n	800a53c <dir_next+0xa0>
 800a538:	2302      	movs	r3, #2
 800a53a:	e081      	b.n	800a640 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a542:	d101      	bne.n	800a548 <dir_next+0xac>
 800a544:	2301      	movs	r3, #1
 800a546:	e07b      	b.n	800a640 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d359      	bcc.n	800a606 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d104      	bne.n	800a562 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	61da      	str	r2, [r3, #28]
 800a55e:	2304      	movs	r3, #4
 800a560:	e06e      	b.n	800a640 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f7ff fe75 	bl	800a25a <create_chain>
 800a570:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <dir_next+0xe0>
 800a578:	2307      	movs	r3, #7
 800a57a:	e061      	b.n	800a640 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <dir_next+0xea>
 800a582:	2302      	movs	r3, #2
 800a584:	e05c      	b.n	800a640 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a58c:	d101      	bne.n	800a592 <dir_next+0xf6>
 800a58e:	2301      	movs	r3, #1
 800a590:	e056      	b.n	800a640 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7ff fbea 	bl	8009d6c <sync_window>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <dir_next+0x106>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e04e      	b.n	800a640 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	899b      	ldrh	r3, [r3, #12]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	f7ff face 	bl	8009b50 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	613b      	str	r3, [r7, #16]
 800a5b8:	6979      	ldr	r1, [r7, #20]
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f7ff fc47 	bl	8009e4e <clust2sect>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	631a      	str	r2, [r3, #48]	; 0x30
 800a5c6:	e012      	b.n	800a5ee <dir_next+0x152>
						fs->wflag = 1;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fbcc 	bl	8009d6c <sync_window>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <dir_next+0x142>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e030      	b.n	800a640 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	613b      	str	r3, [r7, #16]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	631a      	str	r2, [r3, #48]	; 0x30
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	895b      	ldrh	r3, [r3, #10]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d3e6      	bcc.n	800a5c8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	1ad2      	subs	r2, r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a60c:	6979      	ldr	r1, [r7, #20]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7ff fc1d 	bl	8009e4e <clust2sect>
 800a614:	4602      	mov	r2, r0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	899b      	ldrh	r3, [r3, #12]
 800a62a:	461a      	mov	r2, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a632:	fb02 f200 	mul.w	r2, r2, r0
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	18ca      	adds	r2, r1, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	331a      	adds	r3, #26
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff f9f8 	bl	8009a4c <ld_word>
 800a65c:	4603      	mov	r3, r0
 800a65e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b03      	cmp	r3, #3
 800a666:	d109      	bne.n	800a67c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	3314      	adds	r3, #20
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff f9ed 	bl	8009a4c <ld_word>
 800a672:	4603      	mov	r3, r0
 800a674:	041b      	lsls	r3, r3, #16
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	4313      	orrs	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a67c:	68fb      	ldr	r3, [r7, #12]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a690:	2304      	movs	r3, #4
 800a692:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a69a:	e03c      	b.n	800a716 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6938      	ldr	r0, [r7, #16]
 800a6a4:	f7ff fba6 	bl	8009df4 <move_window>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d136      	bne.n	800a720 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a6c0:	2304      	movs	r3, #4
 800a6c2:	75fb      	strb	r3, [r7, #23]
 800a6c4:	e031      	b.n	800a72a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	330b      	adds	r3, #11
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6d2:	73bb      	strb	r3, [r7, #14]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7bba      	ldrb	r2, [r7, #14]
 800a6d8:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	2be5      	cmp	r3, #229	; 0xe5
 800a6de:	d011      	beq.n	800a704 <dir_read+0x7e>
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e4:	d00e      	beq.n	800a704 <dir_read+0x7e>
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b0f      	cmp	r3, #15
 800a6ea:	d00b      	beq.n	800a704 <dir_read+0x7e>
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	f023 0320 	bic.w	r3, r3, #32
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	bf0c      	ite	eq
 800a6f6:	2301      	moveq	r3, #1
 800a6f8:	2300      	movne	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	4293      	cmp	r3, r2
 800a702:	d00f      	beq.n	800a724 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a704:	2100      	movs	r1, #0
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fec8 	bl	800a49c <dir_next>
 800a70c:	4603      	mov	r3, r0
 800a70e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a710:	7dfb      	ldrb	r3, [r7, #23]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d108      	bne.n	800a728 <dir_read+0xa2>
	while (dp->sect) {
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1be      	bne.n	800a69c <dir_read+0x16>
 800a71e:	e004      	b.n	800a72a <dir_read+0xa4>
		if (res != FR_OK) break;
 800a720:	bf00      	nop
 800a722:	e002      	b.n	800a72a <dir_read+0xa4>
				break;
 800a724:	bf00      	nop
 800a726:	e000      	b.n	800a72a <dir_read+0xa4>
		if (res != FR_OK) break;
 800a728:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <dir_read+0xb0>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	61da      	str	r2, [r3, #28]
	return res;
 800a736:	7dfb      	ldrb	r3, [r7, #23]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a74e:	2100      	movs	r1, #0
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff fe1a 	bl	800a38a <dir_sdi>
 800a756:	4603      	mov	r3, r0
 800a758:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <dir_find+0x24>
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	e03e      	b.n	800a7e2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	4619      	mov	r1, r3
 800a76a:	6938      	ldr	r0, [r7, #16]
 800a76c:	f7ff fb42 	bl	8009df4 <move_window>
 800a770:	4603      	mov	r3, r0
 800a772:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d12f      	bne.n	800a7da <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a782:	7bfb      	ldrb	r3, [r7, #15]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <dir_find+0x4e>
 800a788:	2304      	movs	r3, #4
 800a78a:	75fb      	strb	r3, [r7, #23]
 800a78c:	e028      	b.n	800a7e0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	330b      	adds	r3, #11
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a1b      	ldr	r3, [r3, #32]
 800a7a4:	330b      	adds	r3, #11
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	f003 0308 	and.w	r3, r3, #8
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10a      	bne.n	800a7c6 <dir_find+0x86>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a18      	ldr	r0, [r3, #32]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3324      	adds	r3, #36	; 0x24
 800a7b8:	220b      	movs	r2, #11
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	f7ff f9e2 	bl	8009b84 <mem_cmp>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00b      	beq.n	800a7de <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff fe67 	bl	800a49c <dir_next>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0c5      	beq.n	800a764 <dir_find+0x24>
 800a7d8:	e002      	b.n	800a7e0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a7da:	bf00      	nop
 800a7dc:	e000      	b.n	800a7e0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a7de:	bf00      	nop

	return res;
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b086      	sub	sp, #24
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d04e      	beq.n	800a8a0 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a80a:	e021      	b.n	800a850 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a1a      	ldr	r2, [r3, #32]
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	1c59      	adds	r1, r3, #1
 800a814:	6179      	str	r1, [r7, #20]
 800a816:	4413      	add	r3, r2
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d100      	bne.n	800a824 <get_fileinfo+0x3a>
 800a822:	e015      	b.n	800a850 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	2b05      	cmp	r3, #5
 800a828:	d101      	bne.n	800a82e <get_fileinfo+0x44>
 800a82a:	23e5      	movs	r3, #229	; 0xe5
 800a82c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b09      	cmp	r3, #9
 800a832:	d106      	bne.n	800a842 <get_fileinfo+0x58>
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	613a      	str	r2, [r7, #16]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	4413      	add	r3, r2
 800a83e:	222e      	movs	r2, #46	; 0x2e
 800a840:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	613a      	str	r2, [r7, #16]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	4413      	add	r3, r2
 800a84c:	7bfa      	ldrb	r2, [r7, #15]
 800a84e:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2b0a      	cmp	r3, #10
 800a854:	d9da      	bls.n	800a80c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	4413      	add	r3, r2
 800a85c:	3309      	adds	r3, #9
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	7ada      	ldrb	r2, [r3, #11]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	331c      	adds	r3, #28
 800a872:	4618      	mov	r0, r3
 800a874:	f7ff f902 	bl	8009a7c <ld_dword>
 800a878:	4602      	mov	r2, r0
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	3316      	adds	r3, #22
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff f8f9 	bl	8009a7c <ld_dword>
 800a88a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	b29a      	uxth	r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	80da      	strh	r2, [r3, #6]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	0c1b      	lsrs	r3, r3, #16
 800a898:	b29a      	uxth	r2, r3
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	809a      	strh	r2, [r3, #4]
 800a89e:	e000      	b.n	800a8a2 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a8a0:	bf00      	nop
}
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3324      	adds	r3, #36	; 0x24
 800a8bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a8be:	220b      	movs	r2, #11
 800a8c0:	2120      	movs	r1, #32
 800a8c2:	68b8      	ldr	r0, [r7, #8]
 800a8c4:	f7ff f944 	bl	8009b50 <mem_set>
	si = i = 0; ni = 8;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	613b      	str	r3, [r7, #16]
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	2308      	movs	r3, #8
 800a8d2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	617a      	str	r2, [r7, #20]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4413      	add	r3, r2
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a8e2:	7ffb      	ldrb	r3, [r7, #31]
 800a8e4:	2b20      	cmp	r3, #32
 800a8e6:	d94e      	bls.n	800a986 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a8e8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ea:	2b2f      	cmp	r3, #47	; 0x2f
 800a8ec:	d006      	beq.n	800a8fc <create_name+0x54>
 800a8ee:	7ffb      	ldrb	r3, [r7, #31]
 800a8f0:	2b5c      	cmp	r3, #92	; 0x5c
 800a8f2:	d110      	bne.n	800a916 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a8f4:	e002      	b.n	800a8fc <create_name+0x54>
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	4413      	add	r3, r2
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	2b2f      	cmp	r3, #47	; 0x2f
 800a906:	d0f6      	beq.n	800a8f6 <create_name+0x4e>
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	4413      	add	r3, r2
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	2b5c      	cmp	r3, #92	; 0x5c
 800a912:	d0f0      	beq.n	800a8f6 <create_name+0x4e>
			break;
 800a914:	e038      	b.n	800a988 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a916:	7ffb      	ldrb	r3, [r7, #31]
 800a918:	2b2e      	cmp	r3, #46	; 0x2e
 800a91a:	d003      	beq.n	800a924 <create_name+0x7c>
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	429a      	cmp	r2, r3
 800a922:	d30c      	bcc.n	800a93e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	2b0b      	cmp	r3, #11
 800a928:	d002      	beq.n	800a930 <create_name+0x88>
 800a92a:	7ffb      	ldrb	r3, [r7, #31]
 800a92c:	2b2e      	cmp	r3, #46	; 0x2e
 800a92e:	d001      	beq.n	800a934 <create_name+0x8c>
 800a930:	2306      	movs	r3, #6
 800a932:	e044      	b.n	800a9be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a934:	2308      	movs	r3, #8
 800a936:	613b      	str	r3, [r7, #16]
 800a938:	230b      	movs	r3, #11
 800a93a:	61bb      	str	r3, [r7, #24]
			continue;
 800a93c:	e022      	b.n	800a984 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a93e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a942:	2b00      	cmp	r3, #0
 800a944:	da04      	bge.n	800a950 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a946:	7ffb      	ldrb	r3, [r7, #31]
 800a948:	3b80      	subs	r3, #128	; 0x80
 800a94a:	4a1f      	ldr	r2, [pc, #124]	; (800a9c8 <create_name+0x120>)
 800a94c:	5cd3      	ldrb	r3, [r2, r3]
 800a94e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a950:	7ffb      	ldrb	r3, [r7, #31]
 800a952:	4619      	mov	r1, r3
 800a954:	481d      	ldr	r0, [pc, #116]	; (800a9cc <create_name+0x124>)
 800a956:	f7ff f93c 	bl	8009bd2 <chk_chr>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <create_name+0xbc>
 800a960:	2306      	movs	r3, #6
 800a962:	e02c      	b.n	800a9be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a964:	7ffb      	ldrb	r3, [r7, #31]
 800a966:	2b60      	cmp	r3, #96	; 0x60
 800a968:	d905      	bls.n	800a976 <create_name+0xce>
 800a96a:	7ffb      	ldrb	r3, [r7, #31]
 800a96c:	2b7a      	cmp	r3, #122	; 0x7a
 800a96e:	d802      	bhi.n	800a976 <create_name+0xce>
 800a970:	7ffb      	ldrb	r3, [r7, #31]
 800a972:	3b20      	subs	r3, #32
 800a974:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	613a      	str	r2, [r7, #16]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	4413      	add	r3, r2
 800a980:	7ffa      	ldrb	r2, [r7, #31]
 800a982:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a984:	e7a6      	b.n	800a8d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a986:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	441a      	add	r2, r3
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <create_name+0xf4>
 800a998:	2306      	movs	r3, #6
 800a99a:	e010      	b.n	800a9be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2be5      	cmp	r3, #229	; 0xe5
 800a9a2:	d102      	bne.n	800a9aa <create_name+0x102>
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2205      	movs	r2, #5
 800a9a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a9aa:	7ffb      	ldrb	r3, [r7, #31]
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	d801      	bhi.n	800a9b4 <create_name+0x10c>
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	e000      	b.n	800a9b6 <create_name+0x10e>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	330b      	adds	r3, #11
 800a9ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a9bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3720      	adds	r7, #32
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	0800e3a0 	.word	0x0800e3a0
 800a9cc:	0800e328 	.word	0x0800e328

0800a9d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a9e4:	e002      	b.n	800a9ec <follow_path+0x1c>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	2b2f      	cmp	r3, #47	; 0x2f
 800a9f2:	d0f8      	beq.n	800a9e6 <follow_path+0x16>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b5c      	cmp	r3, #92	; 0x5c
 800a9fa:	d0f4      	beq.n	800a9e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b1f      	cmp	r3, #31
 800aa08:	d80a      	bhi.n	800aa20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2280      	movs	r2, #128	; 0x80
 800aa0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aa12:	2100      	movs	r1, #0
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7ff fcb8 	bl	800a38a <dir_sdi>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	75fb      	strb	r3, [r7, #23]
 800aa1e:	e048      	b.n	800aab2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa20:	463b      	mov	r3, r7
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ff3f 	bl	800a8a8 <create_name>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d139      	bne.n	800aaa8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fe83 	bl	800a740 <dir_find>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00a      	beq.n	800aa62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d12c      	bne.n	800aaac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aa52:	7afb      	ldrb	r3, [r7, #11]
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d127      	bne.n	800aaac <follow_path+0xdc>
 800aa5c:	2305      	movs	r3, #5
 800aa5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aa60:	e024      	b.n	800aaac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aa62:	7afb      	ldrb	r3, [r7, #11]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d121      	bne.n	800aab0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	799b      	ldrb	r3, [r3, #6]
 800aa70:	f003 0310 	and.w	r3, r3, #16
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aa78:	2305      	movs	r3, #5
 800aa7a:	75fb      	strb	r3, [r7, #23]
 800aa7c:	e019      	b.n	800aab2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	8992      	ldrh	r2, [r2, #12]
 800aa8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa90:	fb02 f200 	mul.w	r2, r2, r0
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	440b      	add	r3, r1
 800aa98:	4619      	mov	r1, r3
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff fdd4 	bl	800a648 <ld_clust>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aaa6:	e7bb      	b.n	800aa20 <follow_path+0x50>
			if (res != FR_OK) break;
 800aaa8:	bf00      	nop
 800aaaa:	e002      	b.n	800aab2 <follow_path+0xe2>
				break;
 800aaac:	bf00      	nop
 800aaae:	e000      	b.n	800aab2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aab0:	bf00      	nop
			}
		}
	}

	return res;
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aac8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d031      	beq.n	800ab36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	617b      	str	r3, [r7, #20]
 800aad8:	e002      	b.n	800aae0 <get_ldnumber+0x24>
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	3301      	adds	r3, #1
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b20      	cmp	r3, #32
 800aae6:	d903      	bls.n	800aaf0 <get_ldnumber+0x34>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b3a      	cmp	r3, #58	; 0x3a
 800aaee:	d1f4      	bne.n	800aada <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b3a      	cmp	r3, #58	; 0x3a
 800aaf6:	d11c      	bne.n	800ab32 <get_ldnumber+0x76>
			tp = *path;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	60fa      	str	r2, [r7, #12]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	3b30      	subs	r3, #48	; 0x30
 800ab08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b09      	cmp	r3, #9
 800ab0e:	d80e      	bhi.n	800ab2e <get_ldnumber+0x72>
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d10a      	bne.n	800ab2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d107      	bne.n	800ab2e <get_ldnumber+0x72>
					vol = (int)i;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	3301      	adds	r3, #1
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	e002      	b.n	800ab38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab32:	2300      	movs	r3, #0
 800ab34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ab36:	693b      	ldr	r3, [r7, #16]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	371c      	adds	r7, #28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	70da      	strb	r2, [r3, #3]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab5a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff f948 	bl	8009df4 <move_window>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <check_fs+0x2a>
 800ab6a:	2304      	movs	r3, #4
 800ab6c:	e038      	b.n	800abe0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3334      	adds	r3, #52	; 0x34
 800ab72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe ff68 	bl	8009a4c <ld_word>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461a      	mov	r2, r3
 800ab80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d001      	beq.n	800ab8c <check_fs+0x48>
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e029      	b.n	800abe0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab92:	2be9      	cmp	r3, #233	; 0xe9
 800ab94:	d009      	beq.n	800abaa <check_fs+0x66>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab9c:	2beb      	cmp	r3, #235	; 0xeb
 800ab9e:	d11e      	bne.n	800abde <check_fs+0x9a>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aba6:	2b90      	cmp	r3, #144	; 0x90
 800aba8:	d119      	bne.n	800abde <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3334      	adds	r3, #52	; 0x34
 800abae:	3336      	adds	r3, #54	; 0x36
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fe ff63 	bl	8009a7c <ld_dword>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800abbc:	4a0a      	ldr	r2, [pc, #40]	; (800abe8 <check_fs+0xa4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d101      	bne.n	800abc6 <check_fs+0x82>
 800abc2:	2300      	movs	r3, #0
 800abc4:	e00c      	b.n	800abe0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3334      	adds	r3, #52	; 0x34
 800abca:	3352      	adds	r3, #82	; 0x52
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fe ff55 	bl	8009a7c <ld_dword>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4b05      	ldr	r3, [pc, #20]	; (800abec <check_fs+0xa8>)
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d101      	bne.n	800abde <check_fs+0x9a>
 800abda:	2300      	movs	r3, #0
 800abdc:	e000      	b.n	800abe0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800abde:	2302      	movs	r3, #2
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	00544146 	.word	0x00544146
 800abec:	33544146 	.word	0x33544146

0800abf0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b096      	sub	sp, #88	; 0x58
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff ff59 	bl	800aabc <get_ldnumber>
 800ac0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	da01      	bge.n	800ac16 <find_volume+0x26>
 800ac12:	230b      	movs	r3, #11
 800ac14:	e265      	b.n	800b0e2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac16:	4ab0      	ldr	r2, [pc, #704]	; (800aed8 <find_volume+0x2e8>)
 800ac18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <find_volume+0x3a>
 800ac26:	230c      	movs	r3, #12
 800ac28:	e25b      	b.n	800b0e2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ac30:	79fb      	ldrb	r3, [r7, #7]
 800ac32:	f023 0301 	bic.w	r3, r3, #1
 800ac36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01a      	beq.n	800ac76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fe fe63 	bl	8009910 <disk_status>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ac50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10c      	bne.n	800ac76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d007      	beq.n	800ac72 <find_volume+0x82>
 800ac62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ac6e:	230a      	movs	r3, #10
 800ac70:	e237      	b.n	800b0e2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ac72:	2300      	movs	r3, #0
 800ac74:	e235      	b.n	800b0e2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	2200      	movs	r2, #0
 800ac7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fe fe5b 	bl	8009944 <disk_initialize>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ac94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aca0:	2303      	movs	r3, #3
 800aca2:	e21e      	b.n	800b0e2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d007      	beq.n	800acba <find_volume+0xca>
 800acaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acae:	f003 0304 	and.w	r3, r3, #4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800acb6:	230a      	movs	r3, #10
 800acb8:	e213      	b.n	800b0e2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	7858      	ldrb	r0, [r3, #1]
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	330c      	adds	r3, #12
 800acc2:	461a      	mov	r2, r3
 800acc4:	2102      	movs	r1, #2
 800acc6:	f7fe fea3 	bl	8009a10 <disk_ioctl>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <find_volume+0xe4>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e206      	b.n	800b0e2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	899b      	ldrh	r3, [r3, #12]
 800acd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acdc:	d80d      	bhi.n	800acfa <find_volume+0x10a>
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	899b      	ldrh	r3, [r3, #12]
 800ace2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace6:	d308      	bcc.n	800acfa <find_volume+0x10a>
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	899b      	ldrh	r3, [r3, #12]
 800acec:	461a      	mov	r2, r3
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	899b      	ldrh	r3, [r3, #12]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	4013      	ands	r3, r2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <find_volume+0x10e>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e1f1      	b.n	800b0e2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ad02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad06:	f7ff ff1d 	bl	800ab44 <check_fs>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ad10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d14b      	bne.n	800adb0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad18:	2300      	movs	r3, #0
 800ad1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ad1c:	e01f      	b.n	800ad5e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad26:	011b      	lsls	r3, r3, #4
 800ad28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ad2c:	4413      	add	r3, r2
 800ad2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	3304      	adds	r3, #4
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d006      	beq.n	800ad48 <find_volume+0x158>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fe9c 	bl	8009a7c <ld_dword>
 800ad44:	4602      	mov	r2, r0
 800ad46:	e000      	b.n	800ad4a <find_volume+0x15a>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ad52:	440b      	add	r3, r1
 800ad54:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	643b      	str	r3, [r7, #64]	; 0x40
 800ad5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d9dc      	bls.n	800ad1e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ad64:	2300      	movs	r3, #0
 800ad66:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ad68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <find_volume+0x184>
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad70:	3b01      	subs	r3, #1
 800ad72:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ad74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ad82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ad84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <find_volume+0x1a6>
 800ad8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad8e:	f7ff fed9 	bl	800ab44 <check_fs>
 800ad92:	4603      	mov	r3, r0
 800ad94:	e000      	b.n	800ad98 <find_volume+0x1a8>
 800ad96:	2303      	movs	r3, #3
 800ad98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ad9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d905      	bls.n	800adb0 <find_volume+0x1c0>
 800ada4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada6:	3301      	adds	r3, #1
 800ada8:	643b      	str	r3, [r7, #64]	; 0x40
 800adaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adac:	2b03      	cmp	r3, #3
 800adae:	d9e1      	bls.n	800ad74 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800adb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adb4:	2b04      	cmp	r3, #4
 800adb6:	d101      	bne.n	800adbc <find_volume+0x1cc>
 800adb8:	2301      	movs	r3, #1
 800adba:	e192      	b.n	800b0e2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800adbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d901      	bls.n	800adc8 <find_volume+0x1d8>
 800adc4:	230d      	movs	r3, #13
 800adc6:	e18c      	b.n	800b0e2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800adc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adca:	3334      	adds	r3, #52	; 0x34
 800adcc:	330b      	adds	r3, #11
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fe3c 	bl	8009a4c <ld_word>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adda:	899b      	ldrh	r3, [r3, #12]
 800addc:	429a      	cmp	r2, r3
 800adde:	d001      	beq.n	800ade4 <find_volume+0x1f4>
 800ade0:	230d      	movs	r3, #13
 800ade2:	e17e      	b.n	800b0e2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	3334      	adds	r3, #52	; 0x34
 800ade8:	3316      	adds	r3, #22
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fe2e 	bl	8009a4c <ld_word>
 800adf0:	4603      	mov	r3, r0
 800adf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800adf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d106      	bne.n	800ae08 <find_volume+0x218>
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	3334      	adds	r3, #52	; 0x34
 800adfe:	3324      	adds	r3, #36	; 0x24
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fe fe3b 	bl	8009a7c <ld_dword>
 800ae06:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae0c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae10:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	789b      	ldrb	r3, [r3, #2]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d005      	beq.n	800ae2c <find_volume+0x23c>
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	789b      	ldrb	r3, [r3, #2]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d001      	beq.n	800ae2c <find_volume+0x23c>
 800ae28:	230d      	movs	r3, #13
 800ae2a:	e15a      	b.n	800b0e2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2e:	789b      	ldrb	r3, [r3, #2]
 800ae30:	461a      	mov	r2, r3
 800ae32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae34:	fb02 f303 	mul.w	r3, r2, r3
 800ae38:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	895b      	ldrh	r3, [r3, #10]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d008      	beq.n	800ae60 <find_volume+0x270>
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae50:	895b      	ldrh	r3, [r3, #10]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae56:	895b      	ldrh	r3, [r3, #10]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <find_volume+0x274>
 800ae60:	230d      	movs	r3, #13
 800ae62:	e13e      	b.n	800b0e2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	3334      	adds	r3, #52	; 0x34
 800ae68:	3311      	adds	r3, #17
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fdee 	bl	8009a4c <ld_word>
 800ae70:	4603      	mov	r3, r0
 800ae72:	461a      	mov	r2, r3
 800ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7a:	891b      	ldrh	r3, [r3, #8]
 800ae7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae7e:	8992      	ldrh	r2, [r2, #12]
 800ae80:	0952      	lsrs	r2, r2, #5
 800ae82:	b292      	uxth	r2, r2
 800ae84:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae88:	fb02 f201 	mul.w	r2, r2, r1
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <find_volume+0x2a8>
 800ae94:	230d      	movs	r3, #13
 800ae96:	e124      	b.n	800b0e2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9a:	3334      	adds	r3, #52	; 0x34
 800ae9c:	3313      	adds	r3, #19
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fdd4 	bl	8009a4c <ld_word>
 800aea4:	4603      	mov	r3, r0
 800aea6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <find_volume+0x2cc>
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	3334      	adds	r3, #52	; 0x34
 800aeb2:	3320      	adds	r3, #32
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe fde1 	bl	8009a7c <ld_dword>
 800aeba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	3334      	adds	r3, #52	; 0x34
 800aec0:	330e      	adds	r3, #14
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fdc2 	bl	8009a4c <ld_word>
 800aec8:	4603      	mov	r3, r0
 800aeca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aecc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d104      	bne.n	800aedc <find_volume+0x2ec>
 800aed2:	230d      	movs	r3, #13
 800aed4:	e105      	b.n	800b0e2 <find_volume+0x4f2>
 800aed6:	bf00      	nop
 800aed8:	20000348 	.word	0x20000348

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aedc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee0:	4413      	add	r3, r2
 800aee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aee4:	8911      	ldrh	r1, [r2, #8]
 800aee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aee8:	8992      	ldrh	r2, [r2, #12]
 800aeea:	0952      	lsrs	r2, r2, #5
 800aeec:	b292      	uxth	r2, r2
 800aeee:	fbb1 f2f2 	udiv	r2, r1, r2
 800aef2:	b292      	uxth	r2, r2
 800aef4:	4413      	add	r3, r2
 800aef6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d201      	bcs.n	800af04 <find_volume+0x314>
 800af00:	230d      	movs	r3, #13
 800af02:	e0ee      	b.n	800b0e2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800af04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af0c:	8952      	ldrh	r2, [r2, #10]
 800af0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800af12:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	2b00      	cmp	r3, #0
 800af18:	d101      	bne.n	800af1e <find_volume+0x32e>
 800af1a:	230d      	movs	r3, #13
 800af1c:	e0e1      	b.n	800b0e2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800af1e:	2303      	movs	r3, #3
 800af20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d802      	bhi.n	800af34 <find_volume+0x344>
 800af2e:	2302      	movs	r3, #2
 800af30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	f640 72f5 	movw	r2, #4085	; 0xff5
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d802      	bhi.n	800af44 <find_volume+0x354>
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	1c9a      	adds	r2, r3, #2
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af50:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800af52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af56:	441a      	add	r2, r3
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800af5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	441a      	add	r2, r3
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800af66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d11e      	bne.n	800afac <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	3334      	adds	r3, #52	; 0x34
 800af72:	332a      	adds	r3, #42	; 0x2a
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe fd69 	bl	8009a4c <ld_word>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <find_volume+0x394>
 800af80:	230d      	movs	r3, #13
 800af82:	e0ae      	b.n	800b0e2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	891b      	ldrh	r3, [r3, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <find_volume+0x3a0>
 800af8c:	230d      	movs	r3, #13
 800af8e:	e0a8      	b.n	800b0e2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	3334      	adds	r3, #52	; 0x34
 800af94:	332c      	adds	r3, #44	; 0x2c
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fd70 	bl	8009a7c <ld_dword>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800afa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	647b      	str	r3, [r7, #68]	; 0x44
 800afaa:	e01f      	b.n	800afec <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	891b      	ldrh	r3, [r3, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <find_volume+0x3c8>
 800afb4:	230d      	movs	r3, #13
 800afb6:	e094      	b.n	800b0e2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800afb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afbe:	441a      	add	r2, r3
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800afc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d103      	bne.n	800afd4 <find_volume+0x3e4>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	e00a      	b.n	800afea <find_volume+0x3fa>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	699a      	ldr	r2, [r3, #24]
 800afd8:	4613      	mov	r3, r2
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	4413      	add	r3, r2
 800afde:	085a      	lsrs	r2, r3, #1
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800afea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	69da      	ldr	r2, [r3, #28]
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	899b      	ldrh	r3, [r3, #12]
 800aff4:	4619      	mov	r1, r3
 800aff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aff8:	440b      	add	r3, r1
 800affa:	3b01      	subs	r3, #1
 800affc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800affe:	8989      	ldrh	r1, [r1, #12]
 800b000:	fbb3 f3f1 	udiv	r3, r3, r1
 800b004:	429a      	cmp	r2, r3
 800b006:	d201      	bcs.n	800b00c <find_volume+0x41c>
 800b008:	230d      	movs	r3, #13
 800b00a:	e06a      	b.n	800b0e2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b012:	615a      	str	r2, [r3, #20]
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	695a      	ldr	r2, [r3, #20]
 800b018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	2280      	movs	r2, #128	; 0x80
 800b020:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b026:	2b03      	cmp	r3, #3
 800b028:	d149      	bne.n	800b0be <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	3334      	adds	r3, #52	; 0x34
 800b02e:	3330      	adds	r3, #48	; 0x30
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe fd0b 	bl	8009a4c <ld_word>
 800b036:	4603      	mov	r3, r0
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d140      	bne.n	800b0be <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b03e:	3301      	adds	r3, #1
 800b040:	4619      	mov	r1, r3
 800b042:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b044:	f7fe fed6 	bl	8009df4 <move_window>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d137      	bne.n	800b0be <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	2200      	movs	r2, #0
 800b052:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	3334      	adds	r3, #52	; 0x34
 800b058:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe fcf5 	bl	8009a4c <ld_word>
 800b062:	4603      	mov	r3, r0
 800b064:	461a      	mov	r2, r3
 800b066:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d127      	bne.n	800b0be <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	3334      	adds	r3, #52	; 0x34
 800b072:	4618      	mov	r0, r3
 800b074:	f7fe fd02 	bl	8009a7c <ld_dword>
 800b078:	4602      	mov	r2, r0
 800b07a:	4b1c      	ldr	r3, [pc, #112]	; (800b0ec <find_volume+0x4fc>)
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d11e      	bne.n	800b0be <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	3334      	adds	r3, #52	; 0x34
 800b084:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fcf7 	bl	8009a7c <ld_dword>
 800b08e:	4602      	mov	r2, r0
 800b090:	4b17      	ldr	r3, [pc, #92]	; (800b0f0 <find_volume+0x500>)
 800b092:	429a      	cmp	r2, r3
 800b094:	d113      	bne.n	800b0be <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	3334      	adds	r3, #52	; 0x34
 800b09a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fcec 	bl	8009a7c <ld_dword>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	3334      	adds	r3, #52	; 0x34
 800b0ae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe fce2 	bl	8009a7c <ld_dword>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b0c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b0c6:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <find_volume+0x504>)
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <find_volume+0x504>)
 800b0d0:	801a      	strh	r2, [r3, #0]
 800b0d2:	4b08      	ldr	r3, [pc, #32]	; (800b0f4 <find_volume+0x504>)
 800b0d4:	881a      	ldrh	r2, [r3, #0]
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b0da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0dc:	f7fe fe22 	bl	8009d24 <clear_lock>
#endif
	return FR_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3758      	adds	r7, #88	; 0x58
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	41615252 	.word	0x41615252
 800b0f0:	61417272 	.word	0x61417272
 800b0f4:	2000034c 	.word	0x2000034c

0800b0f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b102:	2309      	movs	r3, #9
 800b104:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01c      	beq.n	800b146 <validate+0x4e>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d018      	beq.n	800b146 <validate+0x4e>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d013      	beq.n	800b146 <validate+0x4e>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	889a      	ldrh	r2, [r3, #4]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	88db      	ldrh	r3, [r3, #6]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d10c      	bne.n	800b146 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	785b      	ldrb	r3, [r3, #1]
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe fbec 	bl	8009910 <disk_status>
 800b138:	4603      	mov	r3, r0
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <validate+0x4e>
			res = FR_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <validate+0x5a>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	e000      	b.n	800b154 <validate+0x5c>
 800b152:	2300      	movs	r3, #0
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	6013      	str	r3, [r2, #0]
	return res;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b176:	f107 0310 	add.w	r3, r7, #16
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fc9e 	bl	800aabc <get_ldnumber>
 800b180:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	2b00      	cmp	r3, #0
 800b186:	da01      	bge.n	800b18c <f_mount+0x28>
 800b188:	230b      	movs	r3, #11
 800b18a:	e02b      	b.n	800b1e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b18c:	4a17      	ldr	r2, [pc, #92]	; (800b1ec <f_mount+0x88>)
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b194:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b19c:	69b8      	ldr	r0, [r7, #24]
 800b19e:	f7fe fdc1 	bl	8009d24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	490d      	ldr	r1, [pc, #52]	; (800b1ec <f_mount+0x88>)
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <f_mount+0x66>
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d001      	beq.n	800b1ce <f_mount+0x6a>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e00a      	b.n	800b1e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b1ce:	f107 010c 	add.w	r1, r7, #12
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fd09 	bl	800abf0 <find_volume>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3720      	adds	r7, #32
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20000348 	.word	0x20000348

0800b1f0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <f_opendir+0x14>
 800b200:	2309      	movs	r3, #9
 800b202:	e064      	b.n	800b2ce <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b208:	f107 010c 	add.w	r1, r7, #12
 800b20c:	463b      	mov	r3, r7
 800b20e:	2200      	movs	r2, #0
 800b210:	4618      	mov	r0, r3
 800b212:	f7ff fced 	bl	800abf0 <find_volume>
 800b216:	4603      	mov	r3, r0
 800b218:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d14f      	bne.n	800b2c0 <f_opendir+0xd0>
		obj->fs = fs;
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fbd0 	bl	800a9d0 <follow_path>
 800b230:	4603      	mov	r3, r0
 800b232:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d13d      	bne.n	800b2b6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b240:	b25b      	sxtb	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	db12      	blt.n	800b26c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	799b      	ldrb	r3, [r3, #6]
 800b24a:	f003 0310 	and.w	r3, r3, #16
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00a      	beq.n	800b268 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7ff f9f4 	bl	800a648 <ld_clust>
 800b260:	4602      	mov	r2, r0
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	609a      	str	r2, [r3, #8]
 800b266:	e001      	b.n	800b26c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b268:	2305      	movs	r3, #5
 800b26a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b26c:	7dfb      	ldrb	r3, [r7, #23]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d121      	bne.n	800b2b6 <f_opendir+0xc6>
				obj->id = fs->id;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	88da      	ldrh	r2, [r3, #6]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b27a:	2100      	movs	r1, #0
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7ff f884 	bl	800a38a <dir_sdi>
 800b282:	4603      	mov	r3, r0
 800b284:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d114      	bne.n	800b2b6 <f_opendir+0xc6>
					if (obj->sclust) {
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00d      	beq.n	800b2b0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b294:	2100      	movs	r1, #0
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7fe fcb6 	bl	8009c08 <inc_lock>
 800b29c:	4602      	mov	r2, r0
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <f_opendir+0xc6>
 800b2aa:	2312      	movs	r3, #18
 800b2ac:	75fb      	strb	r3, [r7, #23]
 800b2ae:	e002      	b.n	800b2b6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d101      	bne.n	800b2c0 <f_opendir+0xd0>
 800b2bc:	2305      	movs	r3, #5
 800b2be:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <f_opendir+0xdc>
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f107 0208 	add.w	r2, r7, #8
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff ff05 	bl	800b0f8 <validate>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d126      	bne.n	800b346 <f_readdir+0x70>
		if (!fno) {
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b2fe:	2100      	movs	r1, #0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff f842 	bl	800a38a <dir_sdi>
 800b306:	4603      	mov	r3, r0
 800b308:	73fb      	strb	r3, [r7, #15]
 800b30a:	e01c      	b.n	800b346 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b30c:	2100      	movs	r1, #0
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff f9b9 	bl	800a686 <dir_read>
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	2b04      	cmp	r3, #4
 800b31c:	d101      	bne.n	800b322 <f_readdir+0x4c>
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10e      	bne.n	800b346 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff fa5d 	bl	800a7ea <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b330:	2100      	movs	r1, #0
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff f8b2 	bl	800a49c <dir_next>
 800b338:	4603      	mov	r3, r0
 800b33a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d101      	bne.n	800b346 <f_readdir+0x70>
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b346:	7bfb      	ldrb	r3, [r7, #15]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b092      	sub	sp, #72	; 0x48
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b35c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b360:	f107 030c 	add.w	r3, r7, #12
 800b364:	2200      	movs	r2, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fc42 	bl	800abf0 <find_volume>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b372:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 8099 	bne.w	800b4ae <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b37c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	695a      	ldr	r2, [r3, #20]
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	3b02      	subs	r3, #2
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d804      	bhi.n	800b39a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	695a      	ldr	r2, [r3, #20]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	e089      	b.n	800b4ae <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d128      	bne.n	800b3f8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b3ae:	f107 0314 	add.w	r3, r7, #20
 800b3b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe fd69 	bl	8009e8c <get_fat>
 800b3ba:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3c2:	d103      	bne.n	800b3cc <f_getfree+0x7c>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b3ca:	e063      	b.n	800b494 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d103      	bne.n	800b3da <f_getfree+0x8a>
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b3d8:	e05c      	b.n	800b494 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <f_getfree+0x96>
 800b3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d3db      	bcc.n	800b3ae <f_getfree+0x5e>
 800b3f6:	e04d      	b.n	800b494 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b402:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	637b      	str	r3, [r7, #52]	; 0x34
 800b408:	2300      	movs	r3, #0
 800b40a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d113      	bne.n	800b43a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	63ba      	str	r2, [r7, #56]	; 0x38
 800b41a:	4619      	mov	r1, r3
 800b41c:	f7fe fcea 	bl	8009df4 <move_window>
 800b420:	4603      	mov	r3, r0
 800b422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b426:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d131      	bne.n	800b492 <f_getfree+0x142>
							p = fs->win;
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	3334      	adds	r3, #52	; 0x34
 800b432:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	899b      	ldrh	r3, [r3, #12]
 800b438:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d10f      	bne.n	800b462 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b444:	f7fe fb02 	bl	8009a4c <ld_word>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <f_getfree+0x104>
 800b44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b450:	3301      	adds	r3, #1
 800b452:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b456:	3302      	adds	r3, #2
 800b458:	633b      	str	r3, [r7, #48]	; 0x30
 800b45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45c:	3b02      	subs	r3, #2
 800b45e:	637b      	str	r3, [r7, #52]	; 0x34
 800b460:	e010      	b.n	800b484 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b464:	f7fe fb0a 	bl	8009a7c <ld_dword>
 800b468:	4603      	mov	r3, r0
 800b46a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d102      	bne.n	800b478 <f_getfree+0x128>
 800b472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b474:	3301      	adds	r3, #1
 800b476:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	3304      	adds	r3, #4
 800b47c:	633b      	str	r3, [r7, #48]	; 0x30
 800b47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b480:	3b04      	subs	r3, #4
 800b482:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b486:	3b01      	subs	r3, #1
 800b488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1bd      	bne.n	800b40c <f_getfree+0xbc>
 800b490:	e000      	b.n	800b494 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b492:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b498:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b49e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a2:	791a      	ldrb	r2, [r3, #4]
 800b4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a6:	f042 0201 	orr.w	r2, r2, #1
 800b4aa:	b2d2      	uxtb	r2, r2
 800b4ac:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b4ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3748      	adds	r7, #72	; 0x48
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b4d2:	4b1f      	ldr	r3, [pc, #124]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b4d4:	7a5b      	ldrb	r3, [r3, #9]
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d131      	bne.n	800b540 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b4dc:	4b1c      	ldr	r3, [pc, #112]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b4de:	7a5b      	ldrb	r3, [r3, #9]
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b4ea:	4b19      	ldr	r3, [pc, #100]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b4ec:	7a5b      	ldrb	r3, [r3, #9]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	4a17      	ldr	r2, [pc, #92]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b4fa:	4b15      	ldr	r3, [pc, #84]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b4fc:	7a5b      	ldrb	r3, [r3, #9]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	461a      	mov	r2, r3
 800b502:	4b13      	ldr	r3, [pc, #76]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b504:	4413      	add	r3, r2
 800b506:	79fa      	ldrb	r2, [r7, #7]
 800b508:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b50a:	4b11      	ldr	r3, [pc, #68]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b50c:	7a5b      	ldrb	r3, [r3, #9]
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	b2d1      	uxtb	r1, r2
 800b514:	4a0e      	ldr	r2, [pc, #56]	; (800b550 <FATFS_LinkDriverEx+0x94>)
 800b516:	7251      	strb	r1, [r2, #9]
 800b518:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b51a:	7dbb      	ldrb	r3, [r7, #22]
 800b51c:	3330      	adds	r3, #48	; 0x30
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	3301      	adds	r3, #1
 800b528:	223a      	movs	r2, #58	; 0x3a
 800b52a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	3302      	adds	r3, #2
 800b530:	222f      	movs	r2, #47	; 0x2f
 800b532:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	3303      	adds	r3, #3
 800b538:	2200      	movs	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
}
 800b542:	4618      	mov	r0, r3
 800b544:	371c      	adds	r7, #28
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	20000370 	.word	0x20000370

0800b554 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b55e:	2200      	movs	r2, #0
 800b560:	6839      	ldr	r1, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff ffaa 	bl	800b4bc <FATFS_LinkDriverEx>
 800b568:	4603      	mov	r3, r0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <__errno>:
 800b574:	4b01      	ldr	r3, [pc, #4]	; (800b57c <__errno+0x8>)
 800b576:	6818      	ldr	r0, [r3, #0]
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20000120 	.word	0x20000120

0800b580 <__libc_init_array>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	4e0d      	ldr	r6, [pc, #52]	; (800b5b8 <__libc_init_array+0x38>)
 800b584:	4c0d      	ldr	r4, [pc, #52]	; (800b5bc <__libc_init_array+0x3c>)
 800b586:	1ba4      	subs	r4, r4, r6
 800b588:	10a4      	asrs	r4, r4, #2
 800b58a:	2500      	movs	r5, #0
 800b58c:	42a5      	cmp	r5, r4
 800b58e:	d109      	bne.n	800b5a4 <__libc_init_array+0x24>
 800b590:	4e0b      	ldr	r6, [pc, #44]	; (800b5c0 <__libc_init_array+0x40>)
 800b592:	4c0c      	ldr	r4, [pc, #48]	; (800b5c4 <__libc_init_array+0x44>)
 800b594:	f002 fbac 	bl	800dcf0 <_init>
 800b598:	1ba4      	subs	r4, r4, r6
 800b59a:	10a4      	asrs	r4, r4, #2
 800b59c:	2500      	movs	r5, #0
 800b59e:	42a5      	cmp	r5, r4
 800b5a0:	d105      	bne.n	800b5ae <__libc_init_array+0x2e>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5a8:	4798      	blx	r3
 800b5aa:	3501      	adds	r5, #1
 800b5ac:	e7ee      	b.n	800b58c <__libc_init_array+0xc>
 800b5ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5b2:	4798      	blx	r3
 800b5b4:	3501      	adds	r5, #1
 800b5b6:	e7f2      	b.n	800b59e <__libc_init_array+0x1e>
 800b5b8:	0800e6e8 	.word	0x0800e6e8
 800b5bc:	0800e6e8 	.word	0x0800e6e8
 800b5c0:	0800e6e8 	.word	0x0800e6e8
 800b5c4:	0800e6ec 	.word	0x0800e6ec

0800b5c8 <memcpy>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	1e43      	subs	r3, r0, #1
 800b5cc:	440a      	add	r2, r1
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	d100      	bne.n	800b5d4 <memcpy+0xc>
 800b5d2:	bd10      	pop	{r4, pc}
 800b5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5dc:	e7f7      	b.n	800b5ce <memcpy+0x6>

0800b5de <memset>:
 800b5de:	4402      	add	r2, r0
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d100      	bne.n	800b5e8 <memset+0xa>
 800b5e6:	4770      	bx	lr
 800b5e8:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ec:	e7f9      	b.n	800b5e2 <memset+0x4>

0800b5ee <__cvt>:
 800b5ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f2:	ec55 4b10 	vmov	r4, r5, d0
 800b5f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b5f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b5fc:	2d00      	cmp	r5, #0
 800b5fe:	460e      	mov	r6, r1
 800b600:	4691      	mov	r9, r2
 800b602:	4619      	mov	r1, r3
 800b604:	bfb8      	it	lt
 800b606:	4622      	movlt	r2, r4
 800b608:	462b      	mov	r3, r5
 800b60a:	f027 0720 	bic.w	r7, r7, #32
 800b60e:	bfbb      	ittet	lt
 800b610:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b614:	461d      	movlt	r5, r3
 800b616:	2300      	movge	r3, #0
 800b618:	232d      	movlt	r3, #45	; 0x2d
 800b61a:	bfb8      	it	lt
 800b61c:	4614      	movlt	r4, r2
 800b61e:	2f46      	cmp	r7, #70	; 0x46
 800b620:	700b      	strb	r3, [r1, #0]
 800b622:	d004      	beq.n	800b62e <__cvt+0x40>
 800b624:	2f45      	cmp	r7, #69	; 0x45
 800b626:	d100      	bne.n	800b62a <__cvt+0x3c>
 800b628:	3601      	adds	r6, #1
 800b62a:	2102      	movs	r1, #2
 800b62c:	e000      	b.n	800b630 <__cvt+0x42>
 800b62e:	2103      	movs	r1, #3
 800b630:	ab03      	add	r3, sp, #12
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	ab02      	add	r3, sp, #8
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	4632      	mov	r2, r6
 800b63a:	4653      	mov	r3, sl
 800b63c:	ec45 4b10 	vmov	d0, r4, r5
 800b640:	f000 fdfa 	bl	800c238 <_dtoa_r>
 800b644:	2f47      	cmp	r7, #71	; 0x47
 800b646:	4680      	mov	r8, r0
 800b648:	d102      	bne.n	800b650 <__cvt+0x62>
 800b64a:	f019 0f01 	tst.w	r9, #1
 800b64e:	d026      	beq.n	800b69e <__cvt+0xb0>
 800b650:	2f46      	cmp	r7, #70	; 0x46
 800b652:	eb08 0906 	add.w	r9, r8, r6
 800b656:	d111      	bne.n	800b67c <__cvt+0x8e>
 800b658:	f898 3000 	ldrb.w	r3, [r8]
 800b65c:	2b30      	cmp	r3, #48	; 0x30
 800b65e:	d10a      	bne.n	800b676 <__cvt+0x88>
 800b660:	2200      	movs	r2, #0
 800b662:	2300      	movs	r3, #0
 800b664:	4620      	mov	r0, r4
 800b666:	4629      	mov	r1, r5
 800b668:	f7f5 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b66c:	b918      	cbnz	r0, 800b676 <__cvt+0x88>
 800b66e:	f1c6 0601 	rsb	r6, r6, #1
 800b672:	f8ca 6000 	str.w	r6, [sl]
 800b676:	f8da 3000 	ldr.w	r3, [sl]
 800b67a:	4499      	add	r9, r3
 800b67c:	2200      	movs	r2, #0
 800b67e:	2300      	movs	r3, #0
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f7f5 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 800b688:	b938      	cbnz	r0, 800b69a <__cvt+0xac>
 800b68a:	2230      	movs	r2, #48	; 0x30
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	454b      	cmp	r3, r9
 800b690:	d205      	bcs.n	800b69e <__cvt+0xb0>
 800b692:	1c59      	adds	r1, r3, #1
 800b694:	9103      	str	r1, [sp, #12]
 800b696:	701a      	strb	r2, [r3, #0]
 800b698:	e7f8      	b.n	800b68c <__cvt+0x9e>
 800b69a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b69e:	9b03      	ldr	r3, [sp, #12]
 800b6a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6a2:	eba3 0308 	sub.w	r3, r3, r8
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	b004      	add	sp, #16
 800b6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b6b0 <__exponent>:
 800b6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6b2:	2900      	cmp	r1, #0
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	bfba      	itte	lt
 800b6b8:	4249      	neglt	r1, r1
 800b6ba:	232d      	movlt	r3, #45	; 0x2d
 800b6bc:	232b      	movge	r3, #43	; 0x2b
 800b6be:	2909      	cmp	r1, #9
 800b6c0:	f804 2b02 	strb.w	r2, [r4], #2
 800b6c4:	7043      	strb	r3, [r0, #1]
 800b6c6:	dd20      	ble.n	800b70a <__exponent+0x5a>
 800b6c8:	f10d 0307 	add.w	r3, sp, #7
 800b6cc:	461f      	mov	r7, r3
 800b6ce:	260a      	movs	r6, #10
 800b6d0:	fb91 f5f6 	sdiv	r5, r1, r6
 800b6d4:	fb06 1115 	mls	r1, r6, r5, r1
 800b6d8:	3130      	adds	r1, #48	; 0x30
 800b6da:	2d09      	cmp	r5, #9
 800b6dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b6e0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	dc09      	bgt.n	800b6fc <__exponent+0x4c>
 800b6e8:	3130      	adds	r1, #48	; 0x30
 800b6ea:	3b02      	subs	r3, #2
 800b6ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b6f0:	42bb      	cmp	r3, r7
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	d304      	bcc.n	800b700 <__exponent+0x50>
 800b6f6:	1a10      	subs	r0, r2, r0
 800b6f8:	b003      	add	sp, #12
 800b6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	e7e7      	b.n	800b6d0 <__exponent+0x20>
 800b700:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b704:	f804 2b01 	strb.w	r2, [r4], #1
 800b708:	e7f2      	b.n	800b6f0 <__exponent+0x40>
 800b70a:	2330      	movs	r3, #48	; 0x30
 800b70c:	4419      	add	r1, r3
 800b70e:	7083      	strb	r3, [r0, #2]
 800b710:	1d02      	adds	r2, r0, #4
 800b712:	70c1      	strb	r1, [r0, #3]
 800b714:	e7ef      	b.n	800b6f6 <__exponent+0x46>
	...

0800b718 <_printf_float>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	b08d      	sub	sp, #52	; 0x34
 800b71e:	460c      	mov	r4, r1
 800b720:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b724:	4616      	mov	r6, r2
 800b726:	461f      	mov	r7, r3
 800b728:	4605      	mov	r5, r0
 800b72a:	f001 fcb7 	bl	800d09c <_localeconv_r>
 800b72e:	6803      	ldr	r3, [r0, #0]
 800b730:	9304      	str	r3, [sp, #16]
 800b732:	4618      	mov	r0, r3
 800b734:	f7f4 fd4c 	bl	80001d0 <strlen>
 800b738:	2300      	movs	r3, #0
 800b73a:	930a      	str	r3, [sp, #40]	; 0x28
 800b73c:	f8d8 3000 	ldr.w	r3, [r8]
 800b740:	9005      	str	r0, [sp, #20]
 800b742:	3307      	adds	r3, #7
 800b744:	f023 0307 	bic.w	r3, r3, #7
 800b748:	f103 0208 	add.w	r2, r3, #8
 800b74c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b750:	f8d4 b000 	ldr.w	fp, [r4]
 800b754:	f8c8 2000 	str.w	r2, [r8]
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b760:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b764:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b768:	9307      	str	r3, [sp, #28]
 800b76a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b772:	4ba7      	ldr	r3, [pc, #668]	; (800ba10 <_printf_float+0x2f8>)
 800b774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b778:	f7f5 f9d8 	bl	8000b2c <__aeabi_dcmpun>
 800b77c:	bb70      	cbnz	r0, 800b7dc <_printf_float+0xc4>
 800b77e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b782:	4ba3      	ldr	r3, [pc, #652]	; (800ba10 <_printf_float+0x2f8>)
 800b784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b788:	f7f5 f9b2 	bl	8000af0 <__aeabi_dcmple>
 800b78c:	bb30      	cbnz	r0, 800b7dc <_printf_float+0xc4>
 800b78e:	2200      	movs	r2, #0
 800b790:	2300      	movs	r3, #0
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	f7f5 f9a1 	bl	8000adc <__aeabi_dcmplt>
 800b79a:	b110      	cbz	r0, 800b7a2 <_printf_float+0x8a>
 800b79c:	232d      	movs	r3, #45	; 0x2d
 800b79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a2:	4a9c      	ldr	r2, [pc, #624]	; (800ba14 <_printf_float+0x2fc>)
 800b7a4:	4b9c      	ldr	r3, [pc, #624]	; (800ba18 <_printf_float+0x300>)
 800b7a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b7aa:	bf8c      	ite	hi
 800b7ac:	4690      	movhi	r8, r2
 800b7ae:	4698      	movls	r8, r3
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	f02b 0204 	bic.w	r2, fp, #4
 800b7b6:	6123      	str	r3, [r4, #16]
 800b7b8:	6022      	str	r2, [r4, #0]
 800b7ba:	f04f 0900 	mov.w	r9, #0
 800b7be:	9700      	str	r7, [sp, #0]
 800b7c0:	4633      	mov	r3, r6
 800b7c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	f000 f9e6 	bl	800bb98 <_printf_common>
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	f040 808d 	bne.w	800b8ec <_printf_float+0x1d4>
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7d6:	b00d      	add	sp, #52	; 0x34
 800b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7dc:	4642      	mov	r2, r8
 800b7de:	464b      	mov	r3, r9
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	f7f5 f9a2 	bl	8000b2c <__aeabi_dcmpun>
 800b7e8:	b110      	cbz	r0, 800b7f0 <_printf_float+0xd8>
 800b7ea:	4a8c      	ldr	r2, [pc, #560]	; (800ba1c <_printf_float+0x304>)
 800b7ec:	4b8c      	ldr	r3, [pc, #560]	; (800ba20 <_printf_float+0x308>)
 800b7ee:	e7da      	b.n	800b7a6 <_printf_float+0x8e>
 800b7f0:	6861      	ldr	r1, [r4, #4]
 800b7f2:	1c4b      	adds	r3, r1, #1
 800b7f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b7f8:	a80a      	add	r0, sp, #40	; 0x28
 800b7fa:	d13e      	bne.n	800b87a <_printf_float+0x162>
 800b7fc:	2306      	movs	r3, #6
 800b7fe:	6063      	str	r3, [r4, #4]
 800b800:	2300      	movs	r3, #0
 800b802:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b806:	ab09      	add	r3, sp, #36	; 0x24
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	ec49 8b10 	vmov	d0, r8, r9
 800b80e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b812:	6022      	str	r2, [r4, #0]
 800b814:	f8cd a004 	str.w	sl, [sp, #4]
 800b818:	6861      	ldr	r1, [r4, #4]
 800b81a:	4628      	mov	r0, r5
 800b81c:	f7ff fee7 	bl	800b5ee <__cvt>
 800b820:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b824:	2b47      	cmp	r3, #71	; 0x47
 800b826:	4680      	mov	r8, r0
 800b828:	d109      	bne.n	800b83e <_printf_float+0x126>
 800b82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82c:	1cd8      	adds	r0, r3, #3
 800b82e:	db02      	blt.n	800b836 <_printf_float+0x11e>
 800b830:	6862      	ldr	r2, [r4, #4]
 800b832:	4293      	cmp	r3, r2
 800b834:	dd47      	ble.n	800b8c6 <_printf_float+0x1ae>
 800b836:	f1aa 0a02 	sub.w	sl, sl, #2
 800b83a:	fa5f fa8a 	uxtb.w	sl, sl
 800b83e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b842:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b844:	d824      	bhi.n	800b890 <_printf_float+0x178>
 800b846:	3901      	subs	r1, #1
 800b848:	4652      	mov	r2, sl
 800b84a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b84e:	9109      	str	r1, [sp, #36]	; 0x24
 800b850:	f7ff ff2e 	bl	800b6b0 <__exponent>
 800b854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b856:	1813      	adds	r3, r2, r0
 800b858:	2a01      	cmp	r2, #1
 800b85a:	4681      	mov	r9, r0
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	dc02      	bgt.n	800b866 <_printf_float+0x14e>
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	07d1      	lsls	r1, r2, #31
 800b864:	d501      	bpl.n	800b86a <_printf_float+0x152>
 800b866:	3301      	adds	r3, #1
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0a5      	beq.n	800b7be <_printf_float+0xa6>
 800b872:	232d      	movs	r3, #45	; 0x2d
 800b874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b878:	e7a1      	b.n	800b7be <_printf_float+0xa6>
 800b87a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b87e:	f000 8177 	beq.w	800bb70 <_printf_float+0x458>
 800b882:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b886:	d1bb      	bne.n	800b800 <_printf_float+0xe8>
 800b888:	2900      	cmp	r1, #0
 800b88a:	d1b9      	bne.n	800b800 <_printf_float+0xe8>
 800b88c:	2301      	movs	r3, #1
 800b88e:	e7b6      	b.n	800b7fe <_printf_float+0xe6>
 800b890:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b894:	d119      	bne.n	800b8ca <_printf_float+0x1b2>
 800b896:	2900      	cmp	r1, #0
 800b898:	6863      	ldr	r3, [r4, #4]
 800b89a:	dd0c      	ble.n	800b8b6 <_printf_float+0x19e>
 800b89c:	6121      	str	r1, [r4, #16]
 800b89e:	b913      	cbnz	r3, 800b8a6 <_printf_float+0x18e>
 800b8a0:	6822      	ldr	r2, [r4, #0]
 800b8a2:	07d2      	lsls	r2, r2, #31
 800b8a4:	d502      	bpl.n	800b8ac <_printf_float+0x194>
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	440b      	add	r3, r1
 800b8aa:	6123      	str	r3, [r4, #16]
 800b8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ae:	65a3      	str	r3, [r4, #88]	; 0x58
 800b8b0:	f04f 0900 	mov.w	r9, #0
 800b8b4:	e7d9      	b.n	800b86a <_printf_float+0x152>
 800b8b6:	b913      	cbnz	r3, 800b8be <_printf_float+0x1a6>
 800b8b8:	6822      	ldr	r2, [r4, #0]
 800b8ba:	07d0      	lsls	r0, r2, #31
 800b8bc:	d501      	bpl.n	800b8c2 <_printf_float+0x1aa>
 800b8be:	3302      	adds	r3, #2
 800b8c0:	e7f3      	b.n	800b8aa <_printf_float+0x192>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e7f1      	b.n	800b8aa <_printf_float+0x192>
 800b8c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b8ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	db05      	blt.n	800b8de <_printf_float+0x1c6>
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	6123      	str	r3, [r4, #16]
 800b8d6:	07d1      	lsls	r1, r2, #31
 800b8d8:	d5e8      	bpl.n	800b8ac <_printf_float+0x194>
 800b8da:	3301      	adds	r3, #1
 800b8dc:	e7e5      	b.n	800b8aa <_printf_float+0x192>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	bfd4      	ite	le
 800b8e2:	f1c3 0302 	rsble	r3, r3, #2
 800b8e6:	2301      	movgt	r3, #1
 800b8e8:	4413      	add	r3, r2
 800b8ea:	e7de      	b.n	800b8aa <_printf_float+0x192>
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	055a      	lsls	r2, r3, #21
 800b8f0:	d407      	bmi.n	800b902 <_printf_float+0x1ea>
 800b8f2:	6923      	ldr	r3, [r4, #16]
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	47b8      	blx	r7
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d12b      	bne.n	800b958 <_printf_float+0x240>
 800b900:	e767      	b.n	800b7d2 <_printf_float+0xba>
 800b902:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b906:	f240 80dc 	bls.w	800bac2 <_printf_float+0x3aa>
 800b90a:	2200      	movs	r2, #0
 800b90c:	2300      	movs	r3, #0
 800b90e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b912:	f7f5 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b916:	2800      	cmp	r0, #0
 800b918:	d033      	beq.n	800b982 <_printf_float+0x26a>
 800b91a:	2301      	movs	r3, #1
 800b91c:	4a41      	ldr	r2, [pc, #260]	; (800ba24 <_printf_float+0x30c>)
 800b91e:	4631      	mov	r1, r6
 800b920:	4628      	mov	r0, r5
 800b922:	47b8      	blx	r7
 800b924:	3001      	adds	r0, #1
 800b926:	f43f af54 	beq.w	800b7d2 <_printf_float+0xba>
 800b92a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b92e:	429a      	cmp	r2, r3
 800b930:	db02      	blt.n	800b938 <_printf_float+0x220>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	07d8      	lsls	r0, r3, #31
 800b936:	d50f      	bpl.n	800b958 <_printf_float+0x240>
 800b938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b93c:	4631      	mov	r1, r6
 800b93e:	4628      	mov	r0, r5
 800b940:	47b8      	blx	r7
 800b942:	3001      	adds	r0, #1
 800b944:	f43f af45 	beq.w	800b7d2 <_printf_float+0xba>
 800b948:	f04f 0800 	mov.w	r8, #0
 800b94c:	f104 091a 	add.w	r9, r4, #26
 800b950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b952:	3b01      	subs	r3, #1
 800b954:	4543      	cmp	r3, r8
 800b956:	dc09      	bgt.n	800b96c <_printf_float+0x254>
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	079b      	lsls	r3, r3, #30
 800b95c:	f100 8103 	bmi.w	800bb66 <_printf_float+0x44e>
 800b960:	68e0      	ldr	r0, [r4, #12]
 800b962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b964:	4298      	cmp	r0, r3
 800b966:	bfb8      	it	lt
 800b968:	4618      	movlt	r0, r3
 800b96a:	e734      	b.n	800b7d6 <_printf_float+0xbe>
 800b96c:	2301      	movs	r3, #1
 800b96e:	464a      	mov	r2, r9
 800b970:	4631      	mov	r1, r6
 800b972:	4628      	mov	r0, r5
 800b974:	47b8      	blx	r7
 800b976:	3001      	adds	r0, #1
 800b978:	f43f af2b 	beq.w	800b7d2 <_printf_float+0xba>
 800b97c:	f108 0801 	add.w	r8, r8, #1
 800b980:	e7e6      	b.n	800b950 <_printf_float+0x238>
 800b982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b984:	2b00      	cmp	r3, #0
 800b986:	dc2b      	bgt.n	800b9e0 <_printf_float+0x2c8>
 800b988:	2301      	movs	r3, #1
 800b98a:	4a26      	ldr	r2, [pc, #152]	; (800ba24 <_printf_float+0x30c>)
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f af1d 	beq.w	800b7d2 <_printf_float+0xba>
 800b998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99a:	b923      	cbnz	r3, 800b9a6 <_printf_float+0x28e>
 800b99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b99e:	b913      	cbnz	r3, 800b9a6 <_printf_float+0x28e>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	07d9      	lsls	r1, r3, #31
 800b9a4:	d5d8      	bpl.n	800b958 <_printf_float+0x240>
 800b9a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	47b8      	blx	r7
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	f43f af0e 	beq.w	800b7d2 <_printf_float+0xba>
 800b9b6:	f04f 0900 	mov.w	r9, #0
 800b9ba:	f104 0a1a 	add.w	sl, r4, #26
 800b9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c0:	425b      	negs	r3, r3
 800b9c2:	454b      	cmp	r3, r9
 800b9c4:	dc01      	bgt.n	800b9ca <_printf_float+0x2b2>
 800b9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c8:	e794      	b.n	800b8f4 <_printf_float+0x1dc>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	4652      	mov	r2, sl
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	47b8      	blx	r7
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	f43f aefc 	beq.w	800b7d2 <_printf_float+0xba>
 800b9da:	f109 0901 	add.w	r9, r9, #1
 800b9de:	e7ee      	b.n	800b9be <_printf_float+0x2a6>
 800b9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	bfa8      	it	ge
 800b9e8:	461a      	movge	r2, r3
 800b9ea:	2a00      	cmp	r2, #0
 800b9ec:	4691      	mov	r9, r2
 800b9ee:	dd07      	ble.n	800ba00 <_printf_float+0x2e8>
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	47b8      	blx	r7
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	f43f aee9 	beq.w	800b7d2 <_printf_float+0xba>
 800ba00:	f104 031a 	add.w	r3, r4, #26
 800ba04:	f04f 0b00 	mov.w	fp, #0
 800ba08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba0c:	9306      	str	r3, [sp, #24]
 800ba0e:	e015      	b.n	800ba3c <_printf_float+0x324>
 800ba10:	7fefffff 	.word	0x7fefffff
 800ba14:	0800e428 	.word	0x0800e428
 800ba18:	0800e424 	.word	0x0800e424
 800ba1c:	0800e430 	.word	0x0800e430
 800ba20:	0800e42c 	.word	0x0800e42c
 800ba24:	0800e434 	.word	0x0800e434
 800ba28:	2301      	movs	r3, #1
 800ba2a:	9a06      	ldr	r2, [sp, #24]
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	4628      	mov	r0, r5
 800ba30:	47b8      	blx	r7
 800ba32:	3001      	adds	r0, #1
 800ba34:	f43f aecd 	beq.w	800b7d2 <_printf_float+0xba>
 800ba38:	f10b 0b01 	add.w	fp, fp, #1
 800ba3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ba40:	ebaa 0309 	sub.w	r3, sl, r9
 800ba44:	455b      	cmp	r3, fp
 800ba46:	dcef      	bgt.n	800ba28 <_printf_float+0x310>
 800ba48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	44d0      	add	r8, sl
 800ba50:	db15      	blt.n	800ba7e <_printf_float+0x366>
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	07da      	lsls	r2, r3, #31
 800ba56:	d412      	bmi.n	800ba7e <_printf_float+0x366>
 800ba58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba5c:	eba3 020a 	sub.w	r2, r3, sl
 800ba60:	eba3 0a01 	sub.w	sl, r3, r1
 800ba64:	4592      	cmp	sl, r2
 800ba66:	bfa8      	it	ge
 800ba68:	4692      	movge	sl, r2
 800ba6a:	f1ba 0f00 	cmp.w	sl, #0
 800ba6e:	dc0e      	bgt.n	800ba8e <_printf_float+0x376>
 800ba70:	f04f 0800 	mov.w	r8, #0
 800ba74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba78:	f104 091a 	add.w	r9, r4, #26
 800ba7c:	e019      	b.n	800bab2 <_printf_float+0x39a>
 800ba7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba82:	4631      	mov	r1, r6
 800ba84:	4628      	mov	r0, r5
 800ba86:	47b8      	blx	r7
 800ba88:	3001      	adds	r0, #1
 800ba8a:	d1e5      	bne.n	800ba58 <_printf_float+0x340>
 800ba8c:	e6a1      	b.n	800b7d2 <_printf_float+0xba>
 800ba8e:	4653      	mov	r3, sl
 800ba90:	4642      	mov	r2, r8
 800ba92:	4631      	mov	r1, r6
 800ba94:	4628      	mov	r0, r5
 800ba96:	47b8      	blx	r7
 800ba98:	3001      	adds	r0, #1
 800ba9a:	d1e9      	bne.n	800ba70 <_printf_float+0x358>
 800ba9c:	e699      	b.n	800b7d2 <_printf_float+0xba>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	464a      	mov	r2, r9
 800baa2:	4631      	mov	r1, r6
 800baa4:	4628      	mov	r0, r5
 800baa6:	47b8      	blx	r7
 800baa8:	3001      	adds	r0, #1
 800baaa:	f43f ae92 	beq.w	800b7d2 <_printf_float+0xba>
 800baae:	f108 0801 	add.w	r8, r8, #1
 800bab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	eba3 030a 	sub.w	r3, r3, sl
 800babc:	4543      	cmp	r3, r8
 800babe:	dcee      	bgt.n	800ba9e <_printf_float+0x386>
 800bac0:	e74a      	b.n	800b958 <_printf_float+0x240>
 800bac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bac4:	2a01      	cmp	r2, #1
 800bac6:	dc01      	bgt.n	800bacc <_printf_float+0x3b4>
 800bac8:	07db      	lsls	r3, r3, #31
 800baca:	d53a      	bpl.n	800bb42 <_printf_float+0x42a>
 800bacc:	2301      	movs	r3, #1
 800bace:	4642      	mov	r2, r8
 800bad0:	4631      	mov	r1, r6
 800bad2:	4628      	mov	r0, r5
 800bad4:	47b8      	blx	r7
 800bad6:	3001      	adds	r0, #1
 800bad8:	f43f ae7b 	beq.w	800b7d2 <_printf_float+0xba>
 800badc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bae0:	4631      	mov	r1, r6
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b8      	blx	r7
 800bae6:	3001      	adds	r0, #1
 800bae8:	f108 0801 	add.w	r8, r8, #1
 800baec:	f43f ae71 	beq.w	800b7d2 <_printf_float+0xba>
 800baf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baf2:	2200      	movs	r2, #0
 800baf4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800baf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bafc:	2300      	movs	r3, #0
 800bafe:	f7f4 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb02:	b9c8      	cbnz	r0, 800bb38 <_printf_float+0x420>
 800bb04:	4653      	mov	r3, sl
 800bb06:	4642      	mov	r2, r8
 800bb08:	4631      	mov	r1, r6
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	47b8      	blx	r7
 800bb0e:	3001      	adds	r0, #1
 800bb10:	d10e      	bne.n	800bb30 <_printf_float+0x418>
 800bb12:	e65e      	b.n	800b7d2 <_printf_float+0xba>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4652      	mov	r2, sl
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	f43f ae57 	beq.w	800b7d2 <_printf_float+0xba>
 800bb24:	f108 0801 	add.w	r8, r8, #1
 800bb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	4543      	cmp	r3, r8
 800bb2e:	dcf1      	bgt.n	800bb14 <_printf_float+0x3fc>
 800bb30:	464b      	mov	r3, r9
 800bb32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb36:	e6de      	b.n	800b8f6 <_printf_float+0x1de>
 800bb38:	f04f 0800 	mov.w	r8, #0
 800bb3c:	f104 0a1a 	add.w	sl, r4, #26
 800bb40:	e7f2      	b.n	800bb28 <_printf_float+0x410>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e7df      	b.n	800bb06 <_printf_float+0x3ee>
 800bb46:	2301      	movs	r3, #1
 800bb48:	464a      	mov	r2, r9
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	47b8      	blx	r7
 800bb50:	3001      	adds	r0, #1
 800bb52:	f43f ae3e 	beq.w	800b7d2 <_printf_float+0xba>
 800bb56:	f108 0801 	add.w	r8, r8, #1
 800bb5a:	68e3      	ldr	r3, [r4, #12]
 800bb5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb5e:	1a9b      	subs	r3, r3, r2
 800bb60:	4543      	cmp	r3, r8
 800bb62:	dcf0      	bgt.n	800bb46 <_printf_float+0x42e>
 800bb64:	e6fc      	b.n	800b960 <_printf_float+0x248>
 800bb66:	f04f 0800 	mov.w	r8, #0
 800bb6a:	f104 0919 	add.w	r9, r4, #25
 800bb6e:	e7f4      	b.n	800bb5a <_printf_float+0x442>
 800bb70:	2900      	cmp	r1, #0
 800bb72:	f43f ae8b 	beq.w	800b88c <_printf_float+0x174>
 800bb76:	2300      	movs	r3, #0
 800bb78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bb7c:	ab09      	add	r3, sp, #36	; 0x24
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	ec49 8b10 	vmov	d0, r8, r9
 800bb84:	6022      	str	r2, [r4, #0]
 800bb86:	f8cd a004 	str.w	sl, [sp, #4]
 800bb8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f7ff fd2d 	bl	800b5ee <__cvt>
 800bb94:	4680      	mov	r8, r0
 800bb96:	e648      	b.n	800b82a <_printf_float+0x112>

0800bb98 <_printf_common>:
 800bb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9c:	4691      	mov	r9, r2
 800bb9e:	461f      	mov	r7, r3
 800bba0:	688a      	ldr	r2, [r1, #8]
 800bba2:	690b      	ldr	r3, [r1, #16]
 800bba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	bfb8      	it	lt
 800bbac:	4613      	movlt	r3, r2
 800bbae:	f8c9 3000 	str.w	r3, [r9]
 800bbb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460c      	mov	r4, r1
 800bbba:	b112      	cbz	r2, 800bbc2 <_printf_common+0x2a>
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	f8c9 3000 	str.w	r3, [r9]
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	0699      	lsls	r1, r3, #26
 800bbc6:	bf42      	ittt	mi
 800bbc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bbcc:	3302      	addmi	r3, #2
 800bbce:	f8c9 3000 	strmi.w	r3, [r9]
 800bbd2:	6825      	ldr	r5, [r4, #0]
 800bbd4:	f015 0506 	ands.w	r5, r5, #6
 800bbd8:	d107      	bne.n	800bbea <_printf_common+0x52>
 800bbda:	f104 0a19 	add.w	sl, r4, #25
 800bbde:	68e3      	ldr	r3, [r4, #12]
 800bbe0:	f8d9 2000 	ldr.w	r2, [r9]
 800bbe4:	1a9b      	subs	r3, r3, r2
 800bbe6:	42ab      	cmp	r3, r5
 800bbe8:	dc28      	bgt.n	800bc3c <_printf_common+0xa4>
 800bbea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bbee:	6822      	ldr	r2, [r4, #0]
 800bbf0:	3300      	adds	r3, #0
 800bbf2:	bf18      	it	ne
 800bbf4:	2301      	movne	r3, #1
 800bbf6:	0692      	lsls	r2, r2, #26
 800bbf8:	d42d      	bmi.n	800bc56 <_printf_common+0xbe>
 800bbfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbfe:	4639      	mov	r1, r7
 800bc00:	4630      	mov	r0, r6
 800bc02:	47c0      	blx	r8
 800bc04:	3001      	adds	r0, #1
 800bc06:	d020      	beq.n	800bc4a <_printf_common+0xb2>
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	68e5      	ldr	r5, [r4, #12]
 800bc0c:	f8d9 2000 	ldr.w	r2, [r9]
 800bc10:	f003 0306 	and.w	r3, r3, #6
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	bf08      	it	eq
 800bc18:	1aad      	subeq	r5, r5, r2
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	6922      	ldr	r2, [r4, #16]
 800bc1e:	bf0c      	ite	eq
 800bc20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc24:	2500      	movne	r5, #0
 800bc26:	4293      	cmp	r3, r2
 800bc28:	bfc4      	itt	gt
 800bc2a:	1a9b      	subgt	r3, r3, r2
 800bc2c:	18ed      	addgt	r5, r5, r3
 800bc2e:	f04f 0900 	mov.w	r9, #0
 800bc32:	341a      	adds	r4, #26
 800bc34:	454d      	cmp	r5, r9
 800bc36:	d11a      	bne.n	800bc6e <_printf_common+0xd6>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e008      	b.n	800bc4e <_printf_common+0xb6>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4652      	mov	r2, sl
 800bc40:	4639      	mov	r1, r7
 800bc42:	4630      	mov	r0, r6
 800bc44:	47c0      	blx	r8
 800bc46:	3001      	adds	r0, #1
 800bc48:	d103      	bne.n	800bc52 <_printf_common+0xba>
 800bc4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc52:	3501      	adds	r5, #1
 800bc54:	e7c3      	b.n	800bbde <_printf_common+0x46>
 800bc56:	18e1      	adds	r1, r4, r3
 800bc58:	1c5a      	adds	r2, r3, #1
 800bc5a:	2030      	movs	r0, #48	; 0x30
 800bc5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc60:	4422      	add	r2, r4
 800bc62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc6a:	3302      	adds	r3, #2
 800bc6c:	e7c5      	b.n	800bbfa <_printf_common+0x62>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	4622      	mov	r2, r4
 800bc72:	4639      	mov	r1, r7
 800bc74:	4630      	mov	r0, r6
 800bc76:	47c0      	blx	r8
 800bc78:	3001      	adds	r0, #1
 800bc7a:	d0e6      	beq.n	800bc4a <_printf_common+0xb2>
 800bc7c:	f109 0901 	add.w	r9, r9, #1
 800bc80:	e7d8      	b.n	800bc34 <_printf_common+0x9c>
	...

0800bc84 <_printf_i>:
 800bc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	7e09      	ldrb	r1, [r1, #24]
 800bc90:	b085      	sub	sp, #20
 800bc92:	296e      	cmp	r1, #110	; 0x6e
 800bc94:	4617      	mov	r7, r2
 800bc96:	4606      	mov	r6, r0
 800bc98:	4698      	mov	r8, r3
 800bc9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc9c:	f000 80b3 	beq.w	800be06 <_printf_i+0x182>
 800bca0:	d822      	bhi.n	800bce8 <_printf_i+0x64>
 800bca2:	2963      	cmp	r1, #99	; 0x63
 800bca4:	d036      	beq.n	800bd14 <_printf_i+0x90>
 800bca6:	d80a      	bhi.n	800bcbe <_printf_i+0x3a>
 800bca8:	2900      	cmp	r1, #0
 800bcaa:	f000 80b9 	beq.w	800be20 <_printf_i+0x19c>
 800bcae:	2958      	cmp	r1, #88	; 0x58
 800bcb0:	f000 8083 	beq.w	800bdba <_printf_i+0x136>
 800bcb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bcbc:	e032      	b.n	800bd24 <_printf_i+0xa0>
 800bcbe:	2964      	cmp	r1, #100	; 0x64
 800bcc0:	d001      	beq.n	800bcc6 <_printf_i+0x42>
 800bcc2:	2969      	cmp	r1, #105	; 0x69
 800bcc4:	d1f6      	bne.n	800bcb4 <_printf_i+0x30>
 800bcc6:	6820      	ldr	r0, [r4, #0]
 800bcc8:	6813      	ldr	r3, [r2, #0]
 800bcca:	0605      	lsls	r5, r0, #24
 800bccc:	f103 0104 	add.w	r1, r3, #4
 800bcd0:	d52a      	bpl.n	800bd28 <_printf_i+0xa4>
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6011      	str	r1, [r2, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	da03      	bge.n	800bce2 <_printf_i+0x5e>
 800bcda:	222d      	movs	r2, #45	; 0x2d
 800bcdc:	425b      	negs	r3, r3
 800bcde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bce2:	486f      	ldr	r0, [pc, #444]	; (800bea0 <_printf_i+0x21c>)
 800bce4:	220a      	movs	r2, #10
 800bce6:	e039      	b.n	800bd5c <_printf_i+0xd8>
 800bce8:	2973      	cmp	r1, #115	; 0x73
 800bcea:	f000 809d 	beq.w	800be28 <_printf_i+0x1a4>
 800bcee:	d808      	bhi.n	800bd02 <_printf_i+0x7e>
 800bcf0:	296f      	cmp	r1, #111	; 0x6f
 800bcf2:	d020      	beq.n	800bd36 <_printf_i+0xb2>
 800bcf4:	2970      	cmp	r1, #112	; 0x70
 800bcf6:	d1dd      	bne.n	800bcb4 <_printf_i+0x30>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	f043 0320 	orr.w	r3, r3, #32
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	e003      	b.n	800bd0a <_printf_i+0x86>
 800bd02:	2975      	cmp	r1, #117	; 0x75
 800bd04:	d017      	beq.n	800bd36 <_printf_i+0xb2>
 800bd06:	2978      	cmp	r1, #120	; 0x78
 800bd08:	d1d4      	bne.n	800bcb4 <_printf_i+0x30>
 800bd0a:	2378      	movs	r3, #120	; 0x78
 800bd0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd10:	4864      	ldr	r0, [pc, #400]	; (800bea4 <_printf_i+0x220>)
 800bd12:	e055      	b.n	800bdc0 <_printf_i+0x13c>
 800bd14:	6813      	ldr	r3, [r2, #0]
 800bd16:	1d19      	adds	r1, r3, #4
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6011      	str	r1, [r2, #0]
 800bd1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd24:	2301      	movs	r3, #1
 800bd26:	e08c      	b.n	800be42 <_printf_i+0x1be>
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	6011      	str	r1, [r2, #0]
 800bd2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd30:	bf18      	it	ne
 800bd32:	b21b      	sxthne	r3, r3
 800bd34:	e7cf      	b.n	800bcd6 <_printf_i+0x52>
 800bd36:	6813      	ldr	r3, [r2, #0]
 800bd38:	6825      	ldr	r5, [r4, #0]
 800bd3a:	1d18      	adds	r0, r3, #4
 800bd3c:	6010      	str	r0, [r2, #0]
 800bd3e:	0628      	lsls	r0, r5, #24
 800bd40:	d501      	bpl.n	800bd46 <_printf_i+0xc2>
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	e002      	b.n	800bd4c <_printf_i+0xc8>
 800bd46:	0668      	lsls	r0, r5, #25
 800bd48:	d5fb      	bpl.n	800bd42 <_printf_i+0xbe>
 800bd4a:	881b      	ldrh	r3, [r3, #0]
 800bd4c:	4854      	ldr	r0, [pc, #336]	; (800bea0 <_printf_i+0x21c>)
 800bd4e:	296f      	cmp	r1, #111	; 0x6f
 800bd50:	bf14      	ite	ne
 800bd52:	220a      	movne	r2, #10
 800bd54:	2208      	moveq	r2, #8
 800bd56:	2100      	movs	r1, #0
 800bd58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd5c:	6865      	ldr	r5, [r4, #4]
 800bd5e:	60a5      	str	r5, [r4, #8]
 800bd60:	2d00      	cmp	r5, #0
 800bd62:	f2c0 8095 	blt.w	800be90 <_printf_i+0x20c>
 800bd66:	6821      	ldr	r1, [r4, #0]
 800bd68:	f021 0104 	bic.w	r1, r1, #4
 800bd6c:	6021      	str	r1, [r4, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d13d      	bne.n	800bdee <_printf_i+0x16a>
 800bd72:	2d00      	cmp	r5, #0
 800bd74:	f040 808e 	bne.w	800be94 <_printf_i+0x210>
 800bd78:	4665      	mov	r5, ip
 800bd7a:	2a08      	cmp	r2, #8
 800bd7c:	d10b      	bne.n	800bd96 <_printf_i+0x112>
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	07db      	lsls	r3, r3, #31
 800bd82:	d508      	bpl.n	800bd96 <_printf_i+0x112>
 800bd84:	6923      	ldr	r3, [r4, #16]
 800bd86:	6862      	ldr	r2, [r4, #4]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	bfde      	ittt	le
 800bd8c:	2330      	movle	r3, #48	; 0x30
 800bd8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd92:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bd96:	ebac 0305 	sub.w	r3, ip, r5
 800bd9a:	6123      	str	r3, [r4, #16]
 800bd9c:	f8cd 8000 	str.w	r8, [sp]
 800bda0:	463b      	mov	r3, r7
 800bda2:	aa03      	add	r2, sp, #12
 800bda4:	4621      	mov	r1, r4
 800bda6:	4630      	mov	r0, r6
 800bda8:	f7ff fef6 	bl	800bb98 <_printf_common>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d14d      	bne.n	800be4c <_printf_i+0x1c8>
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdb4:	b005      	add	sp, #20
 800bdb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdba:	4839      	ldr	r0, [pc, #228]	; (800bea0 <_printf_i+0x21c>)
 800bdbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bdc0:	6813      	ldr	r3, [r2, #0]
 800bdc2:	6821      	ldr	r1, [r4, #0]
 800bdc4:	1d1d      	adds	r5, r3, #4
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6015      	str	r5, [r2, #0]
 800bdca:	060a      	lsls	r2, r1, #24
 800bdcc:	d50b      	bpl.n	800bde6 <_printf_i+0x162>
 800bdce:	07ca      	lsls	r2, r1, #31
 800bdd0:	bf44      	itt	mi
 800bdd2:	f041 0120 	orrmi.w	r1, r1, #32
 800bdd6:	6021      	strmi	r1, [r4, #0]
 800bdd8:	b91b      	cbnz	r3, 800bde2 <_printf_i+0x15e>
 800bdda:	6822      	ldr	r2, [r4, #0]
 800bddc:	f022 0220 	bic.w	r2, r2, #32
 800bde0:	6022      	str	r2, [r4, #0]
 800bde2:	2210      	movs	r2, #16
 800bde4:	e7b7      	b.n	800bd56 <_printf_i+0xd2>
 800bde6:	064d      	lsls	r5, r1, #25
 800bde8:	bf48      	it	mi
 800bdea:	b29b      	uxthmi	r3, r3
 800bdec:	e7ef      	b.n	800bdce <_printf_i+0x14a>
 800bdee:	4665      	mov	r5, ip
 800bdf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdf4:	fb02 3311 	mls	r3, r2, r1, r3
 800bdf8:	5cc3      	ldrb	r3, [r0, r3]
 800bdfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bdfe:	460b      	mov	r3, r1
 800be00:	2900      	cmp	r1, #0
 800be02:	d1f5      	bne.n	800bdf0 <_printf_i+0x16c>
 800be04:	e7b9      	b.n	800bd7a <_printf_i+0xf6>
 800be06:	6813      	ldr	r3, [r2, #0]
 800be08:	6825      	ldr	r5, [r4, #0]
 800be0a:	6961      	ldr	r1, [r4, #20]
 800be0c:	1d18      	adds	r0, r3, #4
 800be0e:	6010      	str	r0, [r2, #0]
 800be10:	0628      	lsls	r0, r5, #24
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	d501      	bpl.n	800be1a <_printf_i+0x196>
 800be16:	6019      	str	r1, [r3, #0]
 800be18:	e002      	b.n	800be20 <_printf_i+0x19c>
 800be1a:	066a      	lsls	r2, r5, #25
 800be1c:	d5fb      	bpl.n	800be16 <_printf_i+0x192>
 800be1e:	8019      	strh	r1, [r3, #0]
 800be20:	2300      	movs	r3, #0
 800be22:	6123      	str	r3, [r4, #16]
 800be24:	4665      	mov	r5, ip
 800be26:	e7b9      	b.n	800bd9c <_printf_i+0x118>
 800be28:	6813      	ldr	r3, [r2, #0]
 800be2a:	1d19      	adds	r1, r3, #4
 800be2c:	6011      	str	r1, [r2, #0]
 800be2e:	681d      	ldr	r5, [r3, #0]
 800be30:	6862      	ldr	r2, [r4, #4]
 800be32:	2100      	movs	r1, #0
 800be34:	4628      	mov	r0, r5
 800be36:	f7f4 f9d3 	bl	80001e0 <memchr>
 800be3a:	b108      	cbz	r0, 800be40 <_printf_i+0x1bc>
 800be3c:	1b40      	subs	r0, r0, r5
 800be3e:	6060      	str	r0, [r4, #4]
 800be40:	6863      	ldr	r3, [r4, #4]
 800be42:	6123      	str	r3, [r4, #16]
 800be44:	2300      	movs	r3, #0
 800be46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be4a:	e7a7      	b.n	800bd9c <_printf_i+0x118>
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	462a      	mov	r2, r5
 800be50:	4639      	mov	r1, r7
 800be52:	4630      	mov	r0, r6
 800be54:	47c0      	blx	r8
 800be56:	3001      	adds	r0, #1
 800be58:	d0aa      	beq.n	800bdb0 <_printf_i+0x12c>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	079b      	lsls	r3, r3, #30
 800be5e:	d413      	bmi.n	800be88 <_printf_i+0x204>
 800be60:	68e0      	ldr	r0, [r4, #12]
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	4298      	cmp	r0, r3
 800be66:	bfb8      	it	lt
 800be68:	4618      	movlt	r0, r3
 800be6a:	e7a3      	b.n	800bdb4 <_printf_i+0x130>
 800be6c:	2301      	movs	r3, #1
 800be6e:	464a      	mov	r2, r9
 800be70:	4639      	mov	r1, r7
 800be72:	4630      	mov	r0, r6
 800be74:	47c0      	blx	r8
 800be76:	3001      	adds	r0, #1
 800be78:	d09a      	beq.n	800bdb0 <_printf_i+0x12c>
 800be7a:	3501      	adds	r5, #1
 800be7c:	68e3      	ldr	r3, [r4, #12]
 800be7e:	9a03      	ldr	r2, [sp, #12]
 800be80:	1a9b      	subs	r3, r3, r2
 800be82:	42ab      	cmp	r3, r5
 800be84:	dcf2      	bgt.n	800be6c <_printf_i+0x1e8>
 800be86:	e7eb      	b.n	800be60 <_printf_i+0x1dc>
 800be88:	2500      	movs	r5, #0
 800be8a:	f104 0919 	add.w	r9, r4, #25
 800be8e:	e7f5      	b.n	800be7c <_printf_i+0x1f8>
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1ac      	bne.n	800bdee <_printf_i+0x16a>
 800be94:	7803      	ldrb	r3, [r0, #0]
 800be96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be9e:	e76c      	b.n	800bd7a <_printf_i+0xf6>
 800bea0:	0800e436 	.word	0x0800e436
 800bea4:	0800e447 	.word	0x0800e447

0800bea8 <iprintf>:
 800bea8:	b40f      	push	{r0, r1, r2, r3}
 800beaa:	4b0a      	ldr	r3, [pc, #40]	; (800bed4 <iprintf+0x2c>)
 800beac:	b513      	push	{r0, r1, r4, lr}
 800beae:	681c      	ldr	r4, [r3, #0]
 800beb0:	b124      	cbz	r4, 800bebc <iprintf+0x14>
 800beb2:	69a3      	ldr	r3, [r4, #24]
 800beb4:	b913      	cbnz	r3, 800bebc <iprintf+0x14>
 800beb6:	4620      	mov	r0, r4
 800beb8:	f001 f866 	bl	800cf88 <__sinit>
 800bebc:	ab05      	add	r3, sp, #20
 800bebe:	9a04      	ldr	r2, [sp, #16]
 800bec0:	68a1      	ldr	r1, [r4, #8]
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	4620      	mov	r0, r4
 800bec6:	f001 fd1f 	bl	800d908 <_vfiprintf_r>
 800beca:	b002      	add	sp, #8
 800becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed0:	b004      	add	sp, #16
 800bed2:	4770      	bx	lr
 800bed4:	20000120 	.word	0x20000120

0800bed8 <_puts_r>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	460e      	mov	r6, r1
 800bedc:	4605      	mov	r5, r0
 800bede:	b118      	cbz	r0, 800bee8 <_puts_r+0x10>
 800bee0:	6983      	ldr	r3, [r0, #24]
 800bee2:	b90b      	cbnz	r3, 800bee8 <_puts_r+0x10>
 800bee4:	f001 f850 	bl	800cf88 <__sinit>
 800bee8:	69ab      	ldr	r3, [r5, #24]
 800beea:	68ac      	ldr	r4, [r5, #8]
 800beec:	b913      	cbnz	r3, 800bef4 <_puts_r+0x1c>
 800beee:	4628      	mov	r0, r5
 800bef0:	f001 f84a 	bl	800cf88 <__sinit>
 800bef4:	4b23      	ldr	r3, [pc, #140]	; (800bf84 <_puts_r+0xac>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d117      	bne.n	800bf2a <_puts_r+0x52>
 800befa:	686c      	ldr	r4, [r5, #4]
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	071b      	lsls	r3, r3, #28
 800bf00:	d51d      	bpl.n	800bf3e <_puts_r+0x66>
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	b1db      	cbz	r3, 800bf3e <_puts_r+0x66>
 800bf06:	3e01      	subs	r6, #1
 800bf08:	68a3      	ldr	r3, [r4, #8]
 800bf0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	60a3      	str	r3, [r4, #8]
 800bf12:	b9e9      	cbnz	r1, 800bf50 <_puts_r+0x78>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	da2e      	bge.n	800bf76 <_puts_r+0x9e>
 800bf18:	4622      	mov	r2, r4
 800bf1a:	210a      	movs	r1, #10
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f000 f83f 	bl	800bfa0 <__swbuf_r>
 800bf22:	3001      	adds	r0, #1
 800bf24:	d011      	beq.n	800bf4a <_puts_r+0x72>
 800bf26:	200a      	movs	r0, #10
 800bf28:	e011      	b.n	800bf4e <_puts_r+0x76>
 800bf2a:	4b17      	ldr	r3, [pc, #92]	; (800bf88 <_puts_r+0xb0>)
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	d101      	bne.n	800bf34 <_puts_r+0x5c>
 800bf30:	68ac      	ldr	r4, [r5, #8]
 800bf32:	e7e3      	b.n	800befc <_puts_r+0x24>
 800bf34:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <_puts_r+0xb4>)
 800bf36:	429c      	cmp	r4, r3
 800bf38:	bf08      	it	eq
 800bf3a:	68ec      	ldreq	r4, [r5, #12]
 800bf3c:	e7de      	b.n	800befc <_puts_r+0x24>
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4628      	mov	r0, r5
 800bf42:	f000 f87f 	bl	800c044 <__swsetup_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d0dd      	beq.n	800bf06 <_puts_r+0x2e>
 800bf4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	da04      	bge.n	800bf5e <_puts_r+0x86>
 800bf54:	69a2      	ldr	r2, [r4, #24]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	dc06      	bgt.n	800bf68 <_puts_r+0x90>
 800bf5a:	290a      	cmp	r1, #10
 800bf5c:	d004      	beq.n	800bf68 <_puts_r+0x90>
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	1c5a      	adds	r2, r3, #1
 800bf62:	6022      	str	r2, [r4, #0]
 800bf64:	7019      	strb	r1, [r3, #0]
 800bf66:	e7cf      	b.n	800bf08 <_puts_r+0x30>
 800bf68:	4622      	mov	r2, r4
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f000 f818 	bl	800bfa0 <__swbuf_r>
 800bf70:	3001      	adds	r0, #1
 800bf72:	d1c9      	bne.n	800bf08 <_puts_r+0x30>
 800bf74:	e7e9      	b.n	800bf4a <_puts_r+0x72>
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	200a      	movs	r0, #10
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	6022      	str	r2, [r4, #0]
 800bf7e:	7018      	strb	r0, [r3, #0]
 800bf80:	e7e5      	b.n	800bf4e <_puts_r+0x76>
 800bf82:	bf00      	nop
 800bf84:	0800e488 	.word	0x0800e488
 800bf88:	0800e4a8 	.word	0x0800e4a8
 800bf8c:	0800e468 	.word	0x0800e468

0800bf90 <puts>:
 800bf90:	4b02      	ldr	r3, [pc, #8]	; (800bf9c <puts+0xc>)
 800bf92:	4601      	mov	r1, r0
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	f7ff bf9f 	b.w	800bed8 <_puts_r>
 800bf9a:	bf00      	nop
 800bf9c:	20000120 	.word	0x20000120

0800bfa0 <__swbuf_r>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	460e      	mov	r6, r1
 800bfa4:	4614      	mov	r4, r2
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	b118      	cbz	r0, 800bfb2 <__swbuf_r+0x12>
 800bfaa:	6983      	ldr	r3, [r0, #24]
 800bfac:	b90b      	cbnz	r3, 800bfb2 <__swbuf_r+0x12>
 800bfae:	f000 ffeb 	bl	800cf88 <__sinit>
 800bfb2:	4b21      	ldr	r3, [pc, #132]	; (800c038 <__swbuf_r+0x98>)
 800bfb4:	429c      	cmp	r4, r3
 800bfb6:	d12a      	bne.n	800c00e <__swbuf_r+0x6e>
 800bfb8:	686c      	ldr	r4, [r5, #4]
 800bfba:	69a3      	ldr	r3, [r4, #24]
 800bfbc:	60a3      	str	r3, [r4, #8]
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	071a      	lsls	r2, r3, #28
 800bfc2:	d52e      	bpl.n	800c022 <__swbuf_r+0x82>
 800bfc4:	6923      	ldr	r3, [r4, #16]
 800bfc6:	b363      	cbz	r3, 800c022 <__swbuf_r+0x82>
 800bfc8:	6923      	ldr	r3, [r4, #16]
 800bfca:	6820      	ldr	r0, [r4, #0]
 800bfcc:	1ac0      	subs	r0, r0, r3
 800bfce:	6963      	ldr	r3, [r4, #20]
 800bfd0:	b2f6      	uxtb	r6, r6
 800bfd2:	4283      	cmp	r3, r0
 800bfd4:	4637      	mov	r7, r6
 800bfd6:	dc04      	bgt.n	800bfe2 <__swbuf_r+0x42>
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f000 ff6a 	bl	800ceb4 <_fflush_r>
 800bfe0:	bb28      	cbnz	r0, 800c02e <__swbuf_r+0x8e>
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	60a3      	str	r3, [r4, #8]
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	6022      	str	r2, [r4, #0]
 800bfee:	701e      	strb	r6, [r3, #0]
 800bff0:	6963      	ldr	r3, [r4, #20]
 800bff2:	3001      	adds	r0, #1
 800bff4:	4283      	cmp	r3, r0
 800bff6:	d004      	beq.n	800c002 <__swbuf_r+0x62>
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	07db      	lsls	r3, r3, #31
 800bffc:	d519      	bpl.n	800c032 <__swbuf_r+0x92>
 800bffe:	2e0a      	cmp	r6, #10
 800c000:	d117      	bne.n	800c032 <__swbuf_r+0x92>
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 ff55 	bl	800ceb4 <_fflush_r>
 800c00a:	b190      	cbz	r0, 800c032 <__swbuf_r+0x92>
 800c00c:	e00f      	b.n	800c02e <__swbuf_r+0x8e>
 800c00e:	4b0b      	ldr	r3, [pc, #44]	; (800c03c <__swbuf_r+0x9c>)
 800c010:	429c      	cmp	r4, r3
 800c012:	d101      	bne.n	800c018 <__swbuf_r+0x78>
 800c014:	68ac      	ldr	r4, [r5, #8]
 800c016:	e7d0      	b.n	800bfba <__swbuf_r+0x1a>
 800c018:	4b09      	ldr	r3, [pc, #36]	; (800c040 <__swbuf_r+0xa0>)
 800c01a:	429c      	cmp	r4, r3
 800c01c:	bf08      	it	eq
 800c01e:	68ec      	ldreq	r4, [r5, #12]
 800c020:	e7cb      	b.n	800bfba <__swbuf_r+0x1a>
 800c022:	4621      	mov	r1, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 f80d 	bl	800c044 <__swsetup_r>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	d0cc      	beq.n	800bfc8 <__swbuf_r+0x28>
 800c02e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c032:	4638      	mov	r0, r7
 800c034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c036:	bf00      	nop
 800c038:	0800e488 	.word	0x0800e488
 800c03c:	0800e4a8 	.word	0x0800e4a8
 800c040:	0800e468 	.word	0x0800e468

0800c044 <__swsetup_r>:
 800c044:	4b32      	ldr	r3, [pc, #200]	; (800c110 <__swsetup_r+0xcc>)
 800c046:	b570      	push	{r4, r5, r6, lr}
 800c048:	681d      	ldr	r5, [r3, #0]
 800c04a:	4606      	mov	r6, r0
 800c04c:	460c      	mov	r4, r1
 800c04e:	b125      	cbz	r5, 800c05a <__swsetup_r+0x16>
 800c050:	69ab      	ldr	r3, [r5, #24]
 800c052:	b913      	cbnz	r3, 800c05a <__swsetup_r+0x16>
 800c054:	4628      	mov	r0, r5
 800c056:	f000 ff97 	bl	800cf88 <__sinit>
 800c05a:	4b2e      	ldr	r3, [pc, #184]	; (800c114 <__swsetup_r+0xd0>)
 800c05c:	429c      	cmp	r4, r3
 800c05e:	d10f      	bne.n	800c080 <__swsetup_r+0x3c>
 800c060:	686c      	ldr	r4, [r5, #4]
 800c062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c066:	b29a      	uxth	r2, r3
 800c068:	0715      	lsls	r5, r2, #28
 800c06a:	d42c      	bmi.n	800c0c6 <__swsetup_r+0x82>
 800c06c:	06d0      	lsls	r0, r2, #27
 800c06e:	d411      	bmi.n	800c094 <__swsetup_r+0x50>
 800c070:	2209      	movs	r2, #9
 800c072:	6032      	str	r2, [r6, #0]
 800c074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c078:	81a3      	strh	r3, [r4, #12]
 800c07a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c07e:	e03e      	b.n	800c0fe <__swsetup_r+0xba>
 800c080:	4b25      	ldr	r3, [pc, #148]	; (800c118 <__swsetup_r+0xd4>)
 800c082:	429c      	cmp	r4, r3
 800c084:	d101      	bne.n	800c08a <__swsetup_r+0x46>
 800c086:	68ac      	ldr	r4, [r5, #8]
 800c088:	e7eb      	b.n	800c062 <__swsetup_r+0x1e>
 800c08a:	4b24      	ldr	r3, [pc, #144]	; (800c11c <__swsetup_r+0xd8>)
 800c08c:	429c      	cmp	r4, r3
 800c08e:	bf08      	it	eq
 800c090:	68ec      	ldreq	r4, [r5, #12]
 800c092:	e7e6      	b.n	800c062 <__swsetup_r+0x1e>
 800c094:	0751      	lsls	r1, r2, #29
 800c096:	d512      	bpl.n	800c0be <__swsetup_r+0x7a>
 800c098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c09a:	b141      	cbz	r1, 800c0ae <__swsetup_r+0x6a>
 800c09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0a0:	4299      	cmp	r1, r3
 800c0a2:	d002      	beq.n	800c0aa <__swsetup_r+0x66>
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f001 fb5d 	bl	800d764 <_free_r>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	6363      	str	r3, [r4, #52]	; 0x34
 800c0ae:	89a3      	ldrh	r3, [r4, #12]
 800c0b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0b4:	81a3      	strh	r3, [r4, #12]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	6063      	str	r3, [r4, #4]
 800c0ba:	6923      	ldr	r3, [r4, #16]
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	f043 0308 	orr.w	r3, r3, #8
 800c0c4:	81a3      	strh	r3, [r4, #12]
 800c0c6:	6923      	ldr	r3, [r4, #16]
 800c0c8:	b94b      	cbnz	r3, 800c0de <__swsetup_r+0x9a>
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d4:	d003      	beq.n	800c0de <__swsetup_r+0x9a>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f001 f811 	bl	800d100 <__smakebuf_r>
 800c0de:	89a2      	ldrh	r2, [r4, #12]
 800c0e0:	f012 0301 	ands.w	r3, r2, #1
 800c0e4:	d00c      	beq.n	800c100 <__swsetup_r+0xbc>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60a3      	str	r3, [r4, #8]
 800c0ea:	6963      	ldr	r3, [r4, #20]
 800c0ec:	425b      	negs	r3, r3
 800c0ee:	61a3      	str	r3, [r4, #24]
 800c0f0:	6923      	ldr	r3, [r4, #16]
 800c0f2:	b953      	cbnz	r3, 800c10a <__swsetup_r+0xc6>
 800c0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c0fc:	d1ba      	bne.n	800c074 <__swsetup_r+0x30>
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}
 800c100:	0792      	lsls	r2, r2, #30
 800c102:	bf58      	it	pl
 800c104:	6963      	ldrpl	r3, [r4, #20]
 800c106:	60a3      	str	r3, [r4, #8]
 800c108:	e7f2      	b.n	800c0f0 <__swsetup_r+0xac>
 800c10a:	2000      	movs	r0, #0
 800c10c:	e7f7      	b.n	800c0fe <__swsetup_r+0xba>
 800c10e:	bf00      	nop
 800c110:	20000120 	.word	0x20000120
 800c114:	0800e488 	.word	0x0800e488
 800c118:	0800e4a8 	.word	0x0800e4a8
 800c11c:	0800e468 	.word	0x0800e468

0800c120 <quorem>:
 800c120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	6903      	ldr	r3, [r0, #16]
 800c126:	690c      	ldr	r4, [r1, #16]
 800c128:	42a3      	cmp	r3, r4
 800c12a:	4680      	mov	r8, r0
 800c12c:	f2c0 8082 	blt.w	800c234 <quorem+0x114>
 800c130:	3c01      	subs	r4, #1
 800c132:	f101 0714 	add.w	r7, r1, #20
 800c136:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c13a:	f100 0614 	add.w	r6, r0, #20
 800c13e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c142:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c146:	eb06 030c 	add.w	r3, r6, ip
 800c14a:	3501      	adds	r5, #1
 800c14c:	eb07 090c 	add.w	r9, r7, ip
 800c150:	9301      	str	r3, [sp, #4]
 800c152:	fbb0 f5f5 	udiv	r5, r0, r5
 800c156:	b395      	cbz	r5, 800c1be <quorem+0x9e>
 800c158:	f04f 0a00 	mov.w	sl, #0
 800c15c:	4638      	mov	r0, r7
 800c15e:	46b6      	mov	lr, r6
 800c160:	46d3      	mov	fp, sl
 800c162:	f850 2b04 	ldr.w	r2, [r0], #4
 800c166:	b293      	uxth	r3, r2
 800c168:	fb05 a303 	mla	r3, r5, r3, sl
 800c16c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c170:	b29b      	uxth	r3, r3
 800c172:	ebab 0303 	sub.w	r3, fp, r3
 800c176:	0c12      	lsrs	r2, r2, #16
 800c178:	f8de b000 	ldr.w	fp, [lr]
 800c17c:	fb05 a202 	mla	r2, r5, r2, sl
 800c180:	fa13 f38b 	uxtah	r3, r3, fp
 800c184:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c188:	fa1f fb82 	uxth.w	fp, r2
 800c18c:	f8de 2000 	ldr.w	r2, [lr]
 800c190:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c198:	b29b      	uxth	r3, r3
 800c19a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c19e:	4581      	cmp	r9, r0
 800c1a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c1a4:	f84e 3b04 	str.w	r3, [lr], #4
 800c1a8:	d2db      	bcs.n	800c162 <quorem+0x42>
 800c1aa:	f856 300c 	ldr.w	r3, [r6, ip]
 800c1ae:	b933      	cbnz	r3, 800c1be <quorem+0x9e>
 800c1b0:	9b01      	ldr	r3, [sp, #4]
 800c1b2:	3b04      	subs	r3, #4
 800c1b4:	429e      	cmp	r6, r3
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	d330      	bcc.n	800c21c <quorem+0xfc>
 800c1ba:	f8c8 4010 	str.w	r4, [r8, #16]
 800c1be:	4640      	mov	r0, r8
 800c1c0:	f001 f9fc 	bl	800d5bc <__mcmp>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	db25      	blt.n	800c214 <quorem+0xf4>
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f04f 0c00 	mov.w	ip, #0
 800c1d0:	f857 2b04 	ldr.w	r2, [r7], #4
 800c1d4:	f8d0 e000 	ldr.w	lr, [r0]
 800c1d8:	b293      	uxth	r3, r2
 800c1da:	ebac 0303 	sub.w	r3, ip, r3
 800c1de:	0c12      	lsrs	r2, r2, #16
 800c1e0:	fa13 f38e 	uxtah	r3, r3, lr
 800c1e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c1e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1f2:	45b9      	cmp	r9, r7
 800c1f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1f8:	f840 3b04 	str.w	r3, [r0], #4
 800c1fc:	d2e8      	bcs.n	800c1d0 <quorem+0xb0>
 800c1fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c202:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c206:	b92a      	cbnz	r2, 800c214 <quorem+0xf4>
 800c208:	3b04      	subs	r3, #4
 800c20a:	429e      	cmp	r6, r3
 800c20c:	461a      	mov	r2, r3
 800c20e:	d30b      	bcc.n	800c228 <quorem+0x108>
 800c210:	f8c8 4010 	str.w	r4, [r8, #16]
 800c214:	4628      	mov	r0, r5
 800c216:	b003      	add	sp, #12
 800c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21c:	6812      	ldr	r2, [r2, #0]
 800c21e:	3b04      	subs	r3, #4
 800c220:	2a00      	cmp	r2, #0
 800c222:	d1ca      	bne.n	800c1ba <quorem+0x9a>
 800c224:	3c01      	subs	r4, #1
 800c226:	e7c5      	b.n	800c1b4 <quorem+0x94>
 800c228:	6812      	ldr	r2, [r2, #0]
 800c22a:	3b04      	subs	r3, #4
 800c22c:	2a00      	cmp	r2, #0
 800c22e:	d1ef      	bne.n	800c210 <quorem+0xf0>
 800c230:	3c01      	subs	r4, #1
 800c232:	e7ea      	b.n	800c20a <quorem+0xea>
 800c234:	2000      	movs	r0, #0
 800c236:	e7ee      	b.n	800c216 <quorem+0xf6>

0800c238 <_dtoa_r>:
 800c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	ec57 6b10 	vmov	r6, r7, d0
 800c240:	b097      	sub	sp, #92	; 0x5c
 800c242:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c244:	9106      	str	r1, [sp, #24]
 800c246:	4604      	mov	r4, r0
 800c248:	920b      	str	r2, [sp, #44]	; 0x2c
 800c24a:	9312      	str	r3, [sp, #72]	; 0x48
 800c24c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c250:	e9cd 6700 	strd	r6, r7, [sp]
 800c254:	b93d      	cbnz	r5, 800c266 <_dtoa_r+0x2e>
 800c256:	2010      	movs	r0, #16
 800c258:	f000 ff92 	bl	800d180 <malloc>
 800c25c:	6260      	str	r0, [r4, #36]	; 0x24
 800c25e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c262:	6005      	str	r5, [r0, #0]
 800c264:	60c5      	str	r5, [r0, #12]
 800c266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c268:	6819      	ldr	r1, [r3, #0]
 800c26a:	b151      	cbz	r1, 800c282 <_dtoa_r+0x4a>
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	604a      	str	r2, [r1, #4]
 800c270:	2301      	movs	r3, #1
 800c272:	4093      	lsls	r3, r2
 800c274:	608b      	str	r3, [r1, #8]
 800c276:	4620      	mov	r0, r4
 800c278:	f000 ffbe 	bl	800d1f8 <_Bfree>
 800c27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	1e3b      	subs	r3, r7, #0
 800c284:	bfbb      	ittet	lt
 800c286:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c28a:	9301      	strlt	r3, [sp, #4]
 800c28c:	2300      	movge	r3, #0
 800c28e:	2201      	movlt	r2, #1
 800c290:	bfac      	ite	ge
 800c292:	f8c8 3000 	strge.w	r3, [r8]
 800c296:	f8c8 2000 	strlt.w	r2, [r8]
 800c29a:	4baf      	ldr	r3, [pc, #700]	; (800c558 <_dtoa_r+0x320>)
 800c29c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2a0:	ea33 0308 	bics.w	r3, r3, r8
 800c2a4:	d114      	bne.n	800c2d0 <_dtoa_r+0x98>
 800c2a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	9b00      	ldr	r3, [sp, #0]
 800c2b0:	b923      	cbnz	r3, 800c2bc <_dtoa_r+0x84>
 800c2b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f000 8542 	beq.w	800cd40 <_dtoa_r+0xb08>
 800c2bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c56c <_dtoa_r+0x334>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 8544 	beq.w	800cd50 <_dtoa_r+0xb18>
 800c2c8:	f10b 0303 	add.w	r3, fp, #3
 800c2cc:	f000 bd3e 	b.w	800cd4c <_dtoa_r+0xb14>
 800c2d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	4630      	mov	r0, r6
 800c2da:	4639      	mov	r1, r7
 800c2dc:	f7f4 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2e0:	4681      	mov	r9, r0
 800c2e2:	b168      	cbz	r0, 800c300 <_dtoa_r+0xc8>
 800c2e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 8524 	beq.w	800cd3a <_dtoa_r+0xb02>
 800c2f2:	4b9a      	ldr	r3, [pc, #616]	; (800c55c <_dtoa_r+0x324>)
 800c2f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2f6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c2fa:	6013      	str	r3, [r2, #0]
 800c2fc:	f000 bd28 	b.w	800cd50 <_dtoa_r+0xb18>
 800c300:	aa14      	add	r2, sp, #80	; 0x50
 800c302:	a915      	add	r1, sp, #84	; 0x54
 800c304:	ec47 6b10 	vmov	d0, r6, r7
 800c308:	4620      	mov	r0, r4
 800c30a:	f001 f9ce 	bl	800d6aa <__d2b>
 800c30e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c312:	9004      	str	r0, [sp, #16]
 800c314:	2d00      	cmp	r5, #0
 800c316:	d07c      	beq.n	800c412 <_dtoa_r+0x1da>
 800c318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c31c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c320:	46b2      	mov	sl, r6
 800c322:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c32a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c32e:	2200      	movs	r2, #0
 800c330:	4b8b      	ldr	r3, [pc, #556]	; (800c560 <_dtoa_r+0x328>)
 800c332:	4650      	mov	r0, sl
 800c334:	4659      	mov	r1, fp
 800c336:	f7f3 ffa7 	bl	8000288 <__aeabi_dsub>
 800c33a:	a381      	add	r3, pc, #516	; (adr r3, 800c540 <_dtoa_r+0x308>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	f7f4 f95a 	bl	80005f8 <__aeabi_dmul>
 800c344:	a380      	add	r3, pc, #512	; (adr r3, 800c548 <_dtoa_r+0x310>)
 800c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34a:	f7f3 ff9f 	bl	800028c <__adddf3>
 800c34e:	4606      	mov	r6, r0
 800c350:	4628      	mov	r0, r5
 800c352:	460f      	mov	r7, r1
 800c354:	f7f4 f8e6 	bl	8000524 <__aeabi_i2d>
 800c358:	a37d      	add	r3, pc, #500	; (adr r3, 800c550 <_dtoa_r+0x318>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	f7f4 f94b 	bl	80005f8 <__aeabi_dmul>
 800c362:	4602      	mov	r2, r0
 800c364:	460b      	mov	r3, r1
 800c366:	4630      	mov	r0, r6
 800c368:	4639      	mov	r1, r7
 800c36a:	f7f3 ff8f 	bl	800028c <__adddf3>
 800c36e:	4606      	mov	r6, r0
 800c370:	460f      	mov	r7, r1
 800c372:	f7f4 fbf1 	bl	8000b58 <__aeabi_d2iz>
 800c376:	2200      	movs	r2, #0
 800c378:	4682      	mov	sl, r0
 800c37a:	2300      	movs	r3, #0
 800c37c:	4630      	mov	r0, r6
 800c37e:	4639      	mov	r1, r7
 800c380:	f7f4 fbac 	bl	8000adc <__aeabi_dcmplt>
 800c384:	b148      	cbz	r0, 800c39a <_dtoa_r+0x162>
 800c386:	4650      	mov	r0, sl
 800c388:	f7f4 f8cc 	bl	8000524 <__aeabi_i2d>
 800c38c:	4632      	mov	r2, r6
 800c38e:	463b      	mov	r3, r7
 800c390:	f7f4 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c394:	b908      	cbnz	r0, 800c39a <_dtoa_r+0x162>
 800c396:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c39a:	f1ba 0f16 	cmp.w	sl, #22
 800c39e:	d859      	bhi.n	800c454 <_dtoa_r+0x21c>
 800c3a0:	4970      	ldr	r1, [pc, #448]	; (800c564 <_dtoa_r+0x32c>)
 800c3a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c3a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ae:	f7f4 fbb3 	bl	8000b18 <__aeabi_dcmpgt>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d050      	beq.n	800c458 <_dtoa_r+0x220>
 800c3b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3c0:	1b5d      	subs	r5, r3, r5
 800c3c2:	f1b5 0801 	subs.w	r8, r5, #1
 800c3c6:	bf49      	itett	mi
 800c3c8:	f1c5 0301 	rsbmi	r3, r5, #1
 800c3cc:	2300      	movpl	r3, #0
 800c3ce:	9305      	strmi	r3, [sp, #20]
 800c3d0:	f04f 0800 	movmi.w	r8, #0
 800c3d4:	bf58      	it	pl
 800c3d6:	9305      	strpl	r3, [sp, #20]
 800c3d8:	f1ba 0f00 	cmp.w	sl, #0
 800c3dc:	db3e      	blt.n	800c45c <_dtoa_r+0x224>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	44d0      	add	r8, sl
 800c3e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c3e6:	9307      	str	r3, [sp, #28]
 800c3e8:	9b06      	ldr	r3, [sp, #24]
 800c3ea:	2b09      	cmp	r3, #9
 800c3ec:	f200 8090 	bhi.w	800c510 <_dtoa_r+0x2d8>
 800c3f0:	2b05      	cmp	r3, #5
 800c3f2:	bfc4      	itt	gt
 800c3f4:	3b04      	subgt	r3, #4
 800c3f6:	9306      	strgt	r3, [sp, #24]
 800c3f8:	9b06      	ldr	r3, [sp, #24]
 800c3fa:	f1a3 0302 	sub.w	r3, r3, #2
 800c3fe:	bfcc      	ite	gt
 800c400:	2500      	movgt	r5, #0
 800c402:	2501      	movle	r5, #1
 800c404:	2b03      	cmp	r3, #3
 800c406:	f200 808f 	bhi.w	800c528 <_dtoa_r+0x2f0>
 800c40a:	e8df f003 	tbb	[pc, r3]
 800c40e:	7f7d      	.short	0x7f7d
 800c410:	7131      	.short	0x7131
 800c412:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c416:	441d      	add	r5, r3
 800c418:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c41c:	2820      	cmp	r0, #32
 800c41e:	dd13      	ble.n	800c448 <_dtoa_r+0x210>
 800c420:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c424:	9b00      	ldr	r3, [sp, #0]
 800c426:	fa08 f800 	lsl.w	r8, r8, r0
 800c42a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c42e:	fa23 f000 	lsr.w	r0, r3, r0
 800c432:	ea48 0000 	orr.w	r0, r8, r0
 800c436:	f7f4 f865 	bl	8000504 <__aeabi_ui2d>
 800c43a:	2301      	movs	r3, #1
 800c43c:	4682      	mov	sl, r0
 800c43e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c442:	3d01      	subs	r5, #1
 800c444:	9313      	str	r3, [sp, #76]	; 0x4c
 800c446:	e772      	b.n	800c32e <_dtoa_r+0xf6>
 800c448:	9b00      	ldr	r3, [sp, #0]
 800c44a:	f1c0 0020 	rsb	r0, r0, #32
 800c44e:	fa03 f000 	lsl.w	r0, r3, r0
 800c452:	e7f0      	b.n	800c436 <_dtoa_r+0x1fe>
 800c454:	2301      	movs	r3, #1
 800c456:	e7b1      	b.n	800c3bc <_dtoa_r+0x184>
 800c458:	900f      	str	r0, [sp, #60]	; 0x3c
 800c45a:	e7b0      	b.n	800c3be <_dtoa_r+0x186>
 800c45c:	9b05      	ldr	r3, [sp, #20]
 800c45e:	eba3 030a 	sub.w	r3, r3, sl
 800c462:	9305      	str	r3, [sp, #20]
 800c464:	f1ca 0300 	rsb	r3, sl, #0
 800c468:	9307      	str	r3, [sp, #28]
 800c46a:	2300      	movs	r3, #0
 800c46c:	930e      	str	r3, [sp, #56]	; 0x38
 800c46e:	e7bb      	b.n	800c3e8 <_dtoa_r+0x1b0>
 800c470:	2301      	movs	r3, #1
 800c472:	930a      	str	r3, [sp, #40]	; 0x28
 800c474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c476:	2b00      	cmp	r3, #0
 800c478:	dd59      	ble.n	800c52e <_dtoa_r+0x2f6>
 800c47a:	9302      	str	r3, [sp, #8]
 800c47c:	4699      	mov	r9, r3
 800c47e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c480:	2200      	movs	r2, #0
 800c482:	6072      	str	r2, [r6, #4]
 800c484:	2204      	movs	r2, #4
 800c486:	f102 0014 	add.w	r0, r2, #20
 800c48a:	4298      	cmp	r0, r3
 800c48c:	6871      	ldr	r1, [r6, #4]
 800c48e:	d953      	bls.n	800c538 <_dtoa_r+0x300>
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fe7d 	bl	800d190 <_Balloc>
 800c496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c498:	6030      	str	r0, [r6, #0]
 800c49a:	f1b9 0f0e 	cmp.w	r9, #14
 800c49e:	f8d3 b000 	ldr.w	fp, [r3]
 800c4a2:	f200 80e6 	bhi.w	800c672 <_dtoa_r+0x43a>
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	f000 80e3 	beq.w	800c672 <_dtoa_r+0x43a>
 800c4ac:	ed9d 7b00 	vldr	d7, [sp]
 800c4b0:	f1ba 0f00 	cmp.w	sl, #0
 800c4b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c4b8:	dd74      	ble.n	800c5a4 <_dtoa_r+0x36c>
 800c4ba:	4a2a      	ldr	r2, [pc, #168]	; (800c564 <_dtoa_r+0x32c>)
 800c4bc:	f00a 030f 	and.w	r3, sl, #15
 800c4c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4c4:	ed93 7b00 	vldr	d7, [r3]
 800c4c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c4cc:	06f0      	lsls	r0, r6, #27
 800c4ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c4d2:	d565      	bpl.n	800c5a0 <_dtoa_r+0x368>
 800c4d4:	4b24      	ldr	r3, [pc, #144]	; (800c568 <_dtoa_r+0x330>)
 800c4d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c4da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4de:	f7f4 f9b5 	bl	800084c <__aeabi_ddiv>
 800c4e2:	e9cd 0100 	strd	r0, r1, [sp]
 800c4e6:	f006 060f 	and.w	r6, r6, #15
 800c4ea:	2503      	movs	r5, #3
 800c4ec:	4f1e      	ldr	r7, [pc, #120]	; (800c568 <_dtoa_r+0x330>)
 800c4ee:	e04c      	b.n	800c58a <_dtoa_r+0x352>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4f6:	4453      	add	r3, sl
 800c4f8:	f103 0901 	add.w	r9, r3, #1
 800c4fc:	9302      	str	r3, [sp, #8]
 800c4fe:	464b      	mov	r3, r9
 800c500:	2b01      	cmp	r3, #1
 800c502:	bfb8      	it	lt
 800c504:	2301      	movlt	r3, #1
 800c506:	e7ba      	b.n	800c47e <_dtoa_r+0x246>
 800c508:	2300      	movs	r3, #0
 800c50a:	e7b2      	b.n	800c472 <_dtoa_r+0x23a>
 800c50c:	2300      	movs	r3, #0
 800c50e:	e7f0      	b.n	800c4f2 <_dtoa_r+0x2ba>
 800c510:	2501      	movs	r5, #1
 800c512:	2300      	movs	r3, #0
 800c514:	9306      	str	r3, [sp, #24]
 800c516:	950a      	str	r5, [sp, #40]	; 0x28
 800c518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c51c:	9302      	str	r3, [sp, #8]
 800c51e:	4699      	mov	r9, r3
 800c520:	2200      	movs	r2, #0
 800c522:	2312      	movs	r3, #18
 800c524:	920b      	str	r2, [sp, #44]	; 0x2c
 800c526:	e7aa      	b.n	800c47e <_dtoa_r+0x246>
 800c528:	2301      	movs	r3, #1
 800c52a:	930a      	str	r3, [sp, #40]	; 0x28
 800c52c:	e7f4      	b.n	800c518 <_dtoa_r+0x2e0>
 800c52e:	2301      	movs	r3, #1
 800c530:	9302      	str	r3, [sp, #8]
 800c532:	4699      	mov	r9, r3
 800c534:	461a      	mov	r2, r3
 800c536:	e7f5      	b.n	800c524 <_dtoa_r+0x2ec>
 800c538:	3101      	adds	r1, #1
 800c53a:	6071      	str	r1, [r6, #4]
 800c53c:	0052      	lsls	r2, r2, #1
 800c53e:	e7a2      	b.n	800c486 <_dtoa_r+0x24e>
 800c540:	636f4361 	.word	0x636f4361
 800c544:	3fd287a7 	.word	0x3fd287a7
 800c548:	8b60c8b3 	.word	0x8b60c8b3
 800c54c:	3fc68a28 	.word	0x3fc68a28
 800c550:	509f79fb 	.word	0x509f79fb
 800c554:	3fd34413 	.word	0x3fd34413
 800c558:	7ff00000 	.word	0x7ff00000
 800c55c:	0800e435 	.word	0x0800e435
 800c560:	3ff80000 	.word	0x3ff80000
 800c564:	0800e4f0 	.word	0x0800e4f0
 800c568:	0800e4c8 	.word	0x0800e4c8
 800c56c:	0800e461 	.word	0x0800e461
 800c570:	07f1      	lsls	r1, r6, #31
 800c572:	d508      	bpl.n	800c586 <_dtoa_r+0x34e>
 800c574:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c57c:	f7f4 f83c 	bl	80005f8 <__aeabi_dmul>
 800c580:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c584:	3501      	adds	r5, #1
 800c586:	1076      	asrs	r6, r6, #1
 800c588:	3708      	adds	r7, #8
 800c58a:	2e00      	cmp	r6, #0
 800c58c:	d1f0      	bne.n	800c570 <_dtoa_r+0x338>
 800c58e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c592:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c596:	f7f4 f959 	bl	800084c <__aeabi_ddiv>
 800c59a:	e9cd 0100 	strd	r0, r1, [sp]
 800c59e:	e01a      	b.n	800c5d6 <_dtoa_r+0x39e>
 800c5a0:	2502      	movs	r5, #2
 800c5a2:	e7a3      	b.n	800c4ec <_dtoa_r+0x2b4>
 800c5a4:	f000 80a0 	beq.w	800c6e8 <_dtoa_r+0x4b0>
 800c5a8:	f1ca 0600 	rsb	r6, sl, #0
 800c5ac:	4b9f      	ldr	r3, [pc, #636]	; (800c82c <_dtoa_r+0x5f4>)
 800c5ae:	4fa0      	ldr	r7, [pc, #640]	; (800c830 <_dtoa_r+0x5f8>)
 800c5b0:	f006 020f 	and.w	r2, r6, #15
 800c5b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c5c0:	f7f4 f81a 	bl	80005f8 <__aeabi_dmul>
 800c5c4:	e9cd 0100 	strd	r0, r1, [sp]
 800c5c8:	1136      	asrs	r6, r6, #4
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	2502      	movs	r5, #2
 800c5ce:	2e00      	cmp	r6, #0
 800c5d0:	d17f      	bne.n	800c6d2 <_dtoa_r+0x49a>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e1      	bne.n	800c59a <_dtoa_r+0x362>
 800c5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 8087 	beq.w	800c6ec <_dtoa_r+0x4b4>
 800c5de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	4b93      	ldr	r3, [pc, #588]	; (800c834 <_dtoa_r+0x5fc>)
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	f7f4 fa77 	bl	8000adc <__aeabi_dcmplt>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d07c      	beq.n	800c6ec <_dtoa_r+0x4b4>
 800c5f2:	f1b9 0f00 	cmp.w	r9, #0
 800c5f6:	d079      	beq.n	800c6ec <_dtoa_r+0x4b4>
 800c5f8:	9b02      	ldr	r3, [sp, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dd35      	ble.n	800c66a <_dtoa_r+0x432>
 800c5fe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c602:	9308      	str	r3, [sp, #32]
 800c604:	4639      	mov	r1, r7
 800c606:	2200      	movs	r2, #0
 800c608:	4b8b      	ldr	r3, [pc, #556]	; (800c838 <_dtoa_r+0x600>)
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7f3 fff4 	bl	80005f8 <__aeabi_dmul>
 800c610:	e9cd 0100 	strd	r0, r1, [sp]
 800c614:	9f02      	ldr	r7, [sp, #8]
 800c616:	3501      	adds	r5, #1
 800c618:	4628      	mov	r0, r5
 800c61a:	f7f3 ff83 	bl	8000524 <__aeabi_i2d>
 800c61e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c622:	f7f3 ffe9 	bl	80005f8 <__aeabi_dmul>
 800c626:	2200      	movs	r2, #0
 800c628:	4b84      	ldr	r3, [pc, #528]	; (800c83c <_dtoa_r+0x604>)
 800c62a:	f7f3 fe2f 	bl	800028c <__adddf3>
 800c62e:	4605      	mov	r5, r0
 800c630:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c634:	2f00      	cmp	r7, #0
 800c636:	d15d      	bne.n	800c6f4 <_dtoa_r+0x4bc>
 800c638:	2200      	movs	r2, #0
 800c63a:	4b81      	ldr	r3, [pc, #516]	; (800c840 <_dtoa_r+0x608>)
 800c63c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c640:	f7f3 fe22 	bl	8000288 <__aeabi_dsub>
 800c644:	462a      	mov	r2, r5
 800c646:	4633      	mov	r3, r6
 800c648:	e9cd 0100 	strd	r0, r1, [sp]
 800c64c:	f7f4 fa64 	bl	8000b18 <__aeabi_dcmpgt>
 800c650:	2800      	cmp	r0, #0
 800c652:	f040 8288 	bne.w	800cb66 <_dtoa_r+0x92e>
 800c656:	462a      	mov	r2, r5
 800c658:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c65c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c660:	f7f4 fa3c 	bl	8000adc <__aeabi_dcmplt>
 800c664:	2800      	cmp	r0, #0
 800c666:	f040 827c 	bne.w	800cb62 <_dtoa_r+0x92a>
 800c66a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c66e:	e9cd 2300 	strd	r2, r3, [sp]
 800c672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c674:	2b00      	cmp	r3, #0
 800c676:	f2c0 8150 	blt.w	800c91a <_dtoa_r+0x6e2>
 800c67a:	f1ba 0f0e 	cmp.w	sl, #14
 800c67e:	f300 814c 	bgt.w	800c91a <_dtoa_r+0x6e2>
 800c682:	4b6a      	ldr	r3, [pc, #424]	; (800c82c <_dtoa_r+0x5f4>)
 800c684:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c688:	ed93 7b00 	vldr	d7, [r3]
 800c68c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c68e:	2b00      	cmp	r3, #0
 800c690:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c694:	f280 80d8 	bge.w	800c848 <_dtoa_r+0x610>
 800c698:	f1b9 0f00 	cmp.w	r9, #0
 800c69c:	f300 80d4 	bgt.w	800c848 <_dtoa_r+0x610>
 800c6a0:	f040 825e 	bne.w	800cb60 <_dtoa_r+0x928>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	4b66      	ldr	r3, [pc, #408]	; (800c840 <_dtoa_r+0x608>)
 800c6a8:	ec51 0b17 	vmov	r0, r1, d7
 800c6ac:	f7f3 ffa4 	bl	80005f8 <__aeabi_dmul>
 800c6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6b4:	f7f4 fa26 	bl	8000b04 <__aeabi_dcmpge>
 800c6b8:	464f      	mov	r7, r9
 800c6ba:	464e      	mov	r6, r9
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f040 8234 	bne.w	800cb2a <_dtoa_r+0x8f2>
 800c6c2:	2331      	movs	r3, #49	; 0x31
 800c6c4:	f10b 0501 	add.w	r5, fp, #1
 800c6c8:	f88b 3000 	strb.w	r3, [fp]
 800c6cc:	f10a 0a01 	add.w	sl, sl, #1
 800c6d0:	e22f      	b.n	800cb32 <_dtoa_r+0x8fa>
 800c6d2:	07f2      	lsls	r2, r6, #31
 800c6d4:	d505      	bpl.n	800c6e2 <_dtoa_r+0x4aa>
 800c6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6da:	f7f3 ff8d 	bl	80005f8 <__aeabi_dmul>
 800c6de:	3501      	adds	r5, #1
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	1076      	asrs	r6, r6, #1
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	e772      	b.n	800c5ce <_dtoa_r+0x396>
 800c6e8:	2502      	movs	r5, #2
 800c6ea:	e774      	b.n	800c5d6 <_dtoa_r+0x39e>
 800c6ec:	f8cd a020 	str.w	sl, [sp, #32]
 800c6f0:	464f      	mov	r7, r9
 800c6f2:	e791      	b.n	800c618 <_dtoa_r+0x3e0>
 800c6f4:	4b4d      	ldr	r3, [pc, #308]	; (800c82c <_dtoa_r+0x5f4>)
 800c6f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c6fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c700:	2b00      	cmp	r3, #0
 800c702:	d047      	beq.n	800c794 <_dtoa_r+0x55c>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	2000      	movs	r0, #0
 800c70a:	494e      	ldr	r1, [pc, #312]	; (800c844 <_dtoa_r+0x60c>)
 800c70c:	f7f4 f89e 	bl	800084c <__aeabi_ddiv>
 800c710:	462a      	mov	r2, r5
 800c712:	4633      	mov	r3, r6
 800c714:	f7f3 fdb8 	bl	8000288 <__aeabi_dsub>
 800c718:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c71c:	465d      	mov	r5, fp
 800c71e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c722:	f7f4 fa19 	bl	8000b58 <__aeabi_d2iz>
 800c726:	4606      	mov	r6, r0
 800c728:	f7f3 fefc 	bl	8000524 <__aeabi_i2d>
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c734:	f7f3 fda8 	bl	8000288 <__aeabi_dsub>
 800c738:	3630      	adds	r6, #48	; 0x30
 800c73a:	f805 6b01 	strb.w	r6, [r5], #1
 800c73e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c742:	e9cd 0100 	strd	r0, r1, [sp]
 800c746:	f7f4 f9c9 	bl	8000adc <__aeabi_dcmplt>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d163      	bne.n	800c816 <_dtoa_r+0x5de>
 800c74e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c752:	2000      	movs	r0, #0
 800c754:	4937      	ldr	r1, [pc, #220]	; (800c834 <_dtoa_r+0x5fc>)
 800c756:	f7f3 fd97 	bl	8000288 <__aeabi_dsub>
 800c75a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c75e:	f7f4 f9bd 	bl	8000adc <__aeabi_dcmplt>
 800c762:	2800      	cmp	r0, #0
 800c764:	f040 80b7 	bne.w	800c8d6 <_dtoa_r+0x69e>
 800c768:	eba5 030b 	sub.w	r3, r5, fp
 800c76c:	429f      	cmp	r7, r3
 800c76e:	f77f af7c 	ble.w	800c66a <_dtoa_r+0x432>
 800c772:	2200      	movs	r2, #0
 800c774:	4b30      	ldr	r3, [pc, #192]	; (800c838 <_dtoa_r+0x600>)
 800c776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c77a:	f7f3 ff3d 	bl	80005f8 <__aeabi_dmul>
 800c77e:	2200      	movs	r2, #0
 800c780:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c784:	4b2c      	ldr	r3, [pc, #176]	; (800c838 <_dtoa_r+0x600>)
 800c786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c78a:	f7f3 ff35 	bl	80005f8 <__aeabi_dmul>
 800c78e:	e9cd 0100 	strd	r0, r1, [sp]
 800c792:	e7c4      	b.n	800c71e <_dtoa_r+0x4e6>
 800c794:	462a      	mov	r2, r5
 800c796:	4633      	mov	r3, r6
 800c798:	f7f3 ff2e 	bl	80005f8 <__aeabi_dmul>
 800c79c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c7a0:	eb0b 0507 	add.w	r5, fp, r7
 800c7a4:	465e      	mov	r6, fp
 800c7a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7aa:	f7f4 f9d5 	bl	8000b58 <__aeabi_d2iz>
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	f7f3 feb8 	bl	8000524 <__aeabi_i2d>
 800c7b4:	3730      	adds	r7, #48	; 0x30
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7be:	f7f3 fd63 	bl	8000288 <__aeabi_dsub>
 800c7c2:	f806 7b01 	strb.w	r7, [r6], #1
 800c7c6:	42ae      	cmp	r6, r5
 800c7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800c7cc:	f04f 0200 	mov.w	r2, #0
 800c7d0:	d126      	bne.n	800c820 <_dtoa_r+0x5e8>
 800c7d2:	4b1c      	ldr	r3, [pc, #112]	; (800c844 <_dtoa_r+0x60c>)
 800c7d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7d8:	f7f3 fd58 	bl	800028c <__adddf3>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7e4:	f7f4 f998 	bl	8000b18 <__aeabi_dcmpgt>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d174      	bne.n	800c8d6 <_dtoa_r+0x69e>
 800c7ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	4914      	ldr	r1, [pc, #80]	; (800c844 <_dtoa_r+0x60c>)
 800c7f4:	f7f3 fd48 	bl	8000288 <__aeabi_dsub>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c800:	f7f4 f96c 	bl	8000adc <__aeabi_dcmplt>
 800c804:	2800      	cmp	r0, #0
 800c806:	f43f af30 	beq.w	800c66a <_dtoa_r+0x432>
 800c80a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c80e:	2b30      	cmp	r3, #48	; 0x30
 800c810:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c814:	d002      	beq.n	800c81c <_dtoa_r+0x5e4>
 800c816:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c81a:	e04a      	b.n	800c8b2 <_dtoa_r+0x67a>
 800c81c:	4615      	mov	r5, r2
 800c81e:	e7f4      	b.n	800c80a <_dtoa_r+0x5d2>
 800c820:	4b05      	ldr	r3, [pc, #20]	; (800c838 <_dtoa_r+0x600>)
 800c822:	f7f3 fee9 	bl	80005f8 <__aeabi_dmul>
 800c826:	e9cd 0100 	strd	r0, r1, [sp]
 800c82a:	e7bc      	b.n	800c7a6 <_dtoa_r+0x56e>
 800c82c:	0800e4f0 	.word	0x0800e4f0
 800c830:	0800e4c8 	.word	0x0800e4c8
 800c834:	3ff00000 	.word	0x3ff00000
 800c838:	40240000 	.word	0x40240000
 800c83c:	401c0000 	.word	0x401c0000
 800c840:	40140000 	.word	0x40140000
 800c844:	3fe00000 	.word	0x3fe00000
 800c848:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c84c:	465d      	mov	r5, fp
 800c84e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c852:	4630      	mov	r0, r6
 800c854:	4639      	mov	r1, r7
 800c856:	f7f3 fff9 	bl	800084c <__aeabi_ddiv>
 800c85a:	f7f4 f97d 	bl	8000b58 <__aeabi_d2iz>
 800c85e:	4680      	mov	r8, r0
 800c860:	f7f3 fe60 	bl	8000524 <__aeabi_i2d>
 800c864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c868:	f7f3 fec6 	bl	80005f8 <__aeabi_dmul>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	4630      	mov	r0, r6
 800c872:	4639      	mov	r1, r7
 800c874:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c878:	f7f3 fd06 	bl	8000288 <__aeabi_dsub>
 800c87c:	f805 6b01 	strb.w	r6, [r5], #1
 800c880:	eba5 060b 	sub.w	r6, r5, fp
 800c884:	45b1      	cmp	r9, r6
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	d139      	bne.n	800c900 <_dtoa_r+0x6c8>
 800c88c:	f7f3 fcfe 	bl	800028c <__adddf3>
 800c890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c894:	4606      	mov	r6, r0
 800c896:	460f      	mov	r7, r1
 800c898:	f7f4 f93e 	bl	8000b18 <__aeabi_dcmpgt>
 800c89c:	b9c8      	cbnz	r0, 800c8d2 <_dtoa_r+0x69a>
 800c89e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	4639      	mov	r1, r7
 800c8a6:	f7f4 f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8aa:	b110      	cbz	r0, 800c8b2 <_dtoa_r+0x67a>
 800c8ac:	f018 0f01 	tst.w	r8, #1
 800c8b0:	d10f      	bne.n	800c8d2 <_dtoa_r+0x69a>
 800c8b2:	9904      	ldr	r1, [sp, #16]
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f000 fc9f 	bl	800d1f8 <_Bfree>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8be:	702b      	strb	r3, [r5, #0]
 800c8c0:	f10a 0301 	add.w	r3, sl, #1
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f000 8241 	beq.w	800cd50 <_dtoa_r+0xb18>
 800c8ce:	601d      	str	r5, [r3, #0]
 800c8d0:	e23e      	b.n	800cd50 <_dtoa_r+0xb18>
 800c8d2:	f8cd a020 	str.w	sl, [sp, #32]
 800c8d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c8da:	2a39      	cmp	r2, #57	; 0x39
 800c8dc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c8e0:	d108      	bne.n	800c8f4 <_dtoa_r+0x6bc>
 800c8e2:	459b      	cmp	fp, r3
 800c8e4:	d10a      	bne.n	800c8fc <_dtoa_r+0x6c4>
 800c8e6:	9b08      	ldr	r3, [sp, #32]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	9308      	str	r3, [sp, #32]
 800c8ec:	2330      	movs	r3, #48	; 0x30
 800c8ee:	f88b 3000 	strb.w	r3, [fp]
 800c8f2:	465b      	mov	r3, fp
 800c8f4:	781a      	ldrb	r2, [r3, #0]
 800c8f6:	3201      	adds	r2, #1
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	e78c      	b.n	800c816 <_dtoa_r+0x5de>
 800c8fc:	461d      	mov	r5, r3
 800c8fe:	e7ea      	b.n	800c8d6 <_dtoa_r+0x69e>
 800c900:	2200      	movs	r2, #0
 800c902:	4b9b      	ldr	r3, [pc, #620]	; (800cb70 <_dtoa_r+0x938>)
 800c904:	f7f3 fe78 	bl	80005f8 <__aeabi_dmul>
 800c908:	2200      	movs	r2, #0
 800c90a:	2300      	movs	r3, #0
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	f7f4 f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 800c914:	2800      	cmp	r0, #0
 800c916:	d09a      	beq.n	800c84e <_dtoa_r+0x616>
 800c918:	e7cb      	b.n	800c8b2 <_dtoa_r+0x67a>
 800c91a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c91c:	2a00      	cmp	r2, #0
 800c91e:	f000 808b 	beq.w	800ca38 <_dtoa_r+0x800>
 800c922:	9a06      	ldr	r2, [sp, #24]
 800c924:	2a01      	cmp	r2, #1
 800c926:	dc6e      	bgt.n	800ca06 <_dtoa_r+0x7ce>
 800c928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c92a:	2a00      	cmp	r2, #0
 800c92c:	d067      	beq.n	800c9fe <_dtoa_r+0x7c6>
 800c92e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c932:	9f07      	ldr	r7, [sp, #28]
 800c934:	9d05      	ldr	r5, [sp, #20]
 800c936:	9a05      	ldr	r2, [sp, #20]
 800c938:	2101      	movs	r1, #1
 800c93a:	441a      	add	r2, r3
 800c93c:	4620      	mov	r0, r4
 800c93e:	9205      	str	r2, [sp, #20]
 800c940:	4498      	add	r8, r3
 800c942:	f000 fcf9 	bl	800d338 <__i2b>
 800c946:	4606      	mov	r6, r0
 800c948:	2d00      	cmp	r5, #0
 800c94a:	dd0c      	ble.n	800c966 <_dtoa_r+0x72e>
 800c94c:	f1b8 0f00 	cmp.w	r8, #0
 800c950:	dd09      	ble.n	800c966 <_dtoa_r+0x72e>
 800c952:	4545      	cmp	r5, r8
 800c954:	9a05      	ldr	r2, [sp, #20]
 800c956:	462b      	mov	r3, r5
 800c958:	bfa8      	it	ge
 800c95a:	4643      	movge	r3, r8
 800c95c:	1ad2      	subs	r2, r2, r3
 800c95e:	9205      	str	r2, [sp, #20]
 800c960:	1aed      	subs	r5, r5, r3
 800c962:	eba8 0803 	sub.w	r8, r8, r3
 800c966:	9b07      	ldr	r3, [sp, #28]
 800c968:	b1eb      	cbz	r3, 800c9a6 <_dtoa_r+0x76e>
 800c96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d067      	beq.n	800ca40 <_dtoa_r+0x808>
 800c970:	b18f      	cbz	r7, 800c996 <_dtoa_r+0x75e>
 800c972:	4631      	mov	r1, r6
 800c974:	463a      	mov	r2, r7
 800c976:	4620      	mov	r0, r4
 800c978:	f000 fd7e 	bl	800d478 <__pow5mult>
 800c97c:	9a04      	ldr	r2, [sp, #16]
 800c97e:	4601      	mov	r1, r0
 800c980:	4606      	mov	r6, r0
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fce1 	bl	800d34a <__multiply>
 800c988:	9904      	ldr	r1, [sp, #16]
 800c98a:	9008      	str	r0, [sp, #32]
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fc33 	bl	800d1f8 <_Bfree>
 800c992:	9b08      	ldr	r3, [sp, #32]
 800c994:	9304      	str	r3, [sp, #16]
 800c996:	9b07      	ldr	r3, [sp, #28]
 800c998:	1bda      	subs	r2, r3, r7
 800c99a:	d004      	beq.n	800c9a6 <_dtoa_r+0x76e>
 800c99c:	9904      	ldr	r1, [sp, #16]
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 fd6a 	bl	800d478 <__pow5mult>
 800c9a4:	9004      	str	r0, [sp, #16]
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f000 fcc5 	bl	800d338 <__i2b>
 800c9ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 81d0 	beq.w	800cd58 <_dtoa_r+0xb20>
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f000 fd5b 	bl	800d478 <__pow5mult>
 800c9c2:	9b06      	ldr	r3, [sp, #24]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	4607      	mov	r7, r0
 800c9c8:	dc40      	bgt.n	800ca4c <_dtoa_r+0x814>
 800c9ca:	9b00      	ldr	r3, [sp, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d139      	bne.n	800ca44 <_dtoa_r+0x80c>
 800c9d0:	9b01      	ldr	r3, [sp, #4]
 800c9d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d136      	bne.n	800ca48 <_dtoa_r+0x810>
 800c9da:	9b01      	ldr	r3, [sp, #4]
 800c9dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9e0:	0d1b      	lsrs	r3, r3, #20
 800c9e2:	051b      	lsls	r3, r3, #20
 800c9e4:	b12b      	cbz	r3, 800c9f2 <_dtoa_r+0x7ba>
 800c9e6:	9b05      	ldr	r3, [sp, #20]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	9305      	str	r3, [sp, #20]
 800c9ec:	f108 0801 	add.w	r8, r8, #1
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	9307      	str	r3, [sp, #28]
 800c9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d12a      	bne.n	800ca50 <_dtoa_r+0x818>
 800c9fa:	2001      	movs	r0, #1
 800c9fc:	e030      	b.n	800ca60 <_dtoa_r+0x828>
 800c9fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca04:	e795      	b.n	800c932 <_dtoa_r+0x6fa>
 800ca06:	9b07      	ldr	r3, [sp, #28]
 800ca08:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800ca0c:	42bb      	cmp	r3, r7
 800ca0e:	bfbf      	itttt	lt
 800ca10:	9b07      	ldrlt	r3, [sp, #28]
 800ca12:	9707      	strlt	r7, [sp, #28]
 800ca14:	1afa      	sublt	r2, r7, r3
 800ca16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ca18:	bfbb      	ittet	lt
 800ca1a:	189b      	addlt	r3, r3, r2
 800ca1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ca1e:	1bdf      	subge	r7, r3, r7
 800ca20:	2700      	movlt	r7, #0
 800ca22:	f1b9 0f00 	cmp.w	r9, #0
 800ca26:	bfb5      	itete	lt
 800ca28:	9b05      	ldrlt	r3, [sp, #20]
 800ca2a:	9d05      	ldrge	r5, [sp, #20]
 800ca2c:	eba3 0509 	sublt.w	r5, r3, r9
 800ca30:	464b      	movge	r3, r9
 800ca32:	bfb8      	it	lt
 800ca34:	2300      	movlt	r3, #0
 800ca36:	e77e      	b.n	800c936 <_dtoa_r+0x6fe>
 800ca38:	9f07      	ldr	r7, [sp, #28]
 800ca3a:	9d05      	ldr	r5, [sp, #20]
 800ca3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ca3e:	e783      	b.n	800c948 <_dtoa_r+0x710>
 800ca40:	9a07      	ldr	r2, [sp, #28]
 800ca42:	e7ab      	b.n	800c99c <_dtoa_r+0x764>
 800ca44:	2300      	movs	r3, #0
 800ca46:	e7d4      	b.n	800c9f2 <_dtoa_r+0x7ba>
 800ca48:	9b00      	ldr	r3, [sp, #0]
 800ca4a:	e7d2      	b.n	800c9f2 <_dtoa_r+0x7ba>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9307      	str	r3, [sp, #28]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ca56:	6918      	ldr	r0, [r3, #16]
 800ca58:	f000 fc20 	bl	800d29c <__hi0bits>
 800ca5c:	f1c0 0020 	rsb	r0, r0, #32
 800ca60:	4440      	add	r0, r8
 800ca62:	f010 001f 	ands.w	r0, r0, #31
 800ca66:	d047      	beq.n	800caf8 <_dtoa_r+0x8c0>
 800ca68:	f1c0 0320 	rsb	r3, r0, #32
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	dd3b      	ble.n	800cae8 <_dtoa_r+0x8b0>
 800ca70:	9b05      	ldr	r3, [sp, #20]
 800ca72:	f1c0 001c 	rsb	r0, r0, #28
 800ca76:	4403      	add	r3, r0
 800ca78:	9305      	str	r3, [sp, #20]
 800ca7a:	4405      	add	r5, r0
 800ca7c:	4480      	add	r8, r0
 800ca7e:	9b05      	ldr	r3, [sp, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	dd05      	ble.n	800ca90 <_dtoa_r+0x858>
 800ca84:	461a      	mov	r2, r3
 800ca86:	9904      	ldr	r1, [sp, #16]
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 fd43 	bl	800d514 <__lshift>
 800ca8e:	9004      	str	r0, [sp, #16]
 800ca90:	f1b8 0f00 	cmp.w	r8, #0
 800ca94:	dd05      	ble.n	800caa2 <_dtoa_r+0x86a>
 800ca96:	4639      	mov	r1, r7
 800ca98:	4642      	mov	r2, r8
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f000 fd3a 	bl	800d514 <__lshift>
 800caa0:	4607      	mov	r7, r0
 800caa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caa4:	b353      	cbz	r3, 800cafc <_dtoa_r+0x8c4>
 800caa6:	4639      	mov	r1, r7
 800caa8:	9804      	ldr	r0, [sp, #16]
 800caaa:	f000 fd87 	bl	800d5bc <__mcmp>
 800caae:	2800      	cmp	r0, #0
 800cab0:	da24      	bge.n	800cafc <_dtoa_r+0x8c4>
 800cab2:	2300      	movs	r3, #0
 800cab4:	220a      	movs	r2, #10
 800cab6:	9904      	ldr	r1, [sp, #16]
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fbb4 	bl	800d226 <__multadd>
 800cabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cac0:	9004      	str	r0, [sp, #16]
 800cac2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f000 814d 	beq.w	800cd66 <_dtoa_r+0xb2e>
 800cacc:	2300      	movs	r3, #0
 800cace:	4631      	mov	r1, r6
 800cad0:	220a      	movs	r2, #10
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fba7 	bl	800d226 <__multadd>
 800cad8:	9b02      	ldr	r3, [sp, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	4606      	mov	r6, r0
 800cade:	dc4f      	bgt.n	800cb80 <_dtoa_r+0x948>
 800cae0:	9b06      	ldr	r3, [sp, #24]
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	dd4c      	ble.n	800cb80 <_dtoa_r+0x948>
 800cae6:	e011      	b.n	800cb0c <_dtoa_r+0x8d4>
 800cae8:	d0c9      	beq.n	800ca7e <_dtoa_r+0x846>
 800caea:	9a05      	ldr	r2, [sp, #20]
 800caec:	331c      	adds	r3, #28
 800caee:	441a      	add	r2, r3
 800caf0:	9205      	str	r2, [sp, #20]
 800caf2:	441d      	add	r5, r3
 800caf4:	4498      	add	r8, r3
 800caf6:	e7c2      	b.n	800ca7e <_dtoa_r+0x846>
 800caf8:	4603      	mov	r3, r0
 800cafa:	e7f6      	b.n	800caea <_dtoa_r+0x8b2>
 800cafc:	f1b9 0f00 	cmp.w	r9, #0
 800cb00:	dc38      	bgt.n	800cb74 <_dtoa_r+0x93c>
 800cb02:	9b06      	ldr	r3, [sp, #24]
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	dd35      	ble.n	800cb74 <_dtoa_r+0x93c>
 800cb08:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb0c:	9b02      	ldr	r3, [sp, #8]
 800cb0e:	b963      	cbnz	r3, 800cb2a <_dtoa_r+0x8f2>
 800cb10:	4639      	mov	r1, r7
 800cb12:	2205      	movs	r2, #5
 800cb14:	4620      	mov	r0, r4
 800cb16:	f000 fb86 	bl	800d226 <__multadd>
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	9804      	ldr	r0, [sp, #16]
 800cb20:	f000 fd4c 	bl	800d5bc <__mcmp>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f73f adcc 	bgt.w	800c6c2 <_dtoa_r+0x48a>
 800cb2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb2c:	465d      	mov	r5, fp
 800cb2e:	ea6f 0a03 	mvn.w	sl, r3
 800cb32:	f04f 0900 	mov.w	r9, #0
 800cb36:	4639      	mov	r1, r7
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f000 fb5d 	bl	800d1f8 <_Bfree>
 800cb3e:	2e00      	cmp	r6, #0
 800cb40:	f43f aeb7 	beq.w	800c8b2 <_dtoa_r+0x67a>
 800cb44:	f1b9 0f00 	cmp.w	r9, #0
 800cb48:	d005      	beq.n	800cb56 <_dtoa_r+0x91e>
 800cb4a:	45b1      	cmp	r9, r6
 800cb4c:	d003      	beq.n	800cb56 <_dtoa_r+0x91e>
 800cb4e:	4649      	mov	r1, r9
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fb51 	bl	800d1f8 <_Bfree>
 800cb56:	4631      	mov	r1, r6
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 fb4d 	bl	800d1f8 <_Bfree>
 800cb5e:	e6a8      	b.n	800c8b2 <_dtoa_r+0x67a>
 800cb60:	2700      	movs	r7, #0
 800cb62:	463e      	mov	r6, r7
 800cb64:	e7e1      	b.n	800cb2a <_dtoa_r+0x8f2>
 800cb66:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cb6a:	463e      	mov	r6, r7
 800cb6c:	e5a9      	b.n	800c6c2 <_dtoa_r+0x48a>
 800cb6e:	bf00      	nop
 800cb70:	40240000 	.word	0x40240000
 800cb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb76:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f000 80fa 	beq.w	800cd74 <_dtoa_r+0xb3c>
 800cb80:	2d00      	cmp	r5, #0
 800cb82:	dd05      	ble.n	800cb90 <_dtoa_r+0x958>
 800cb84:	4631      	mov	r1, r6
 800cb86:	462a      	mov	r2, r5
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fcc3 	bl	800d514 <__lshift>
 800cb8e:	4606      	mov	r6, r0
 800cb90:	9b07      	ldr	r3, [sp, #28]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d04c      	beq.n	800cc30 <_dtoa_r+0x9f8>
 800cb96:	6871      	ldr	r1, [r6, #4]
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 faf9 	bl	800d190 <_Balloc>
 800cb9e:	6932      	ldr	r2, [r6, #16]
 800cba0:	3202      	adds	r2, #2
 800cba2:	4605      	mov	r5, r0
 800cba4:	0092      	lsls	r2, r2, #2
 800cba6:	f106 010c 	add.w	r1, r6, #12
 800cbaa:	300c      	adds	r0, #12
 800cbac:	f7fe fd0c 	bl	800b5c8 <memcpy>
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fcad 	bl	800d514 <__lshift>
 800cbba:	9b00      	ldr	r3, [sp, #0]
 800cbbc:	f8cd b014 	str.w	fp, [sp, #20]
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	46b1      	mov	r9, r6
 800cbc6:	9307      	str	r3, [sp, #28]
 800cbc8:	4606      	mov	r6, r0
 800cbca:	4639      	mov	r1, r7
 800cbcc:	9804      	ldr	r0, [sp, #16]
 800cbce:	f7ff faa7 	bl	800c120 <quorem>
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cbda:	9804      	ldr	r0, [sp, #16]
 800cbdc:	f000 fcee 	bl	800d5bc <__mcmp>
 800cbe0:	4632      	mov	r2, r6
 800cbe2:	9000      	str	r0, [sp, #0]
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f000 fd02 	bl	800d5f0 <__mdiff>
 800cbec:	68c3      	ldr	r3, [r0, #12]
 800cbee:	4602      	mov	r2, r0
 800cbf0:	bb03      	cbnz	r3, 800cc34 <_dtoa_r+0x9fc>
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	9008      	str	r0, [sp, #32]
 800cbf6:	9804      	ldr	r0, [sp, #16]
 800cbf8:	f000 fce0 	bl	800d5bc <__mcmp>
 800cbfc:	9a08      	ldr	r2, [sp, #32]
 800cbfe:	4603      	mov	r3, r0
 800cc00:	4611      	mov	r1, r2
 800cc02:	4620      	mov	r0, r4
 800cc04:	9308      	str	r3, [sp, #32]
 800cc06:	f000 faf7 	bl	800d1f8 <_Bfree>
 800cc0a:	9b08      	ldr	r3, [sp, #32]
 800cc0c:	b9a3      	cbnz	r3, 800cc38 <_dtoa_r+0xa00>
 800cc0e:	9a06      	ldr	r2, [sp, #24]
 800cc10:	b992      	cbnz	r2, 800cc38 <_dtoa_r+0xa00>
 800cc12:	9a07      	ldr	r2, [sp, #28]
 800cc14:	b982      	cbnz	r2, 800cc38 <_dtoa_r+0xa00>
 800cc16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc1a:	d029      	beq.n	800cc70 <_dtoa_r+0xa38>
 800cc1c:	9b00      	ldr	r3, [sp, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	dd01      	ble.n	800cc26 <_dtoa_r+0x9ee>
 800cc22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cc26:	9b05      	ldr	r3, [sp, #20]
 800cc28:	1c5d      	adds	r5, r3, #1
 800cc2a:	f883 8000 	strb.w	r8, [r3]
 800cc2e:	e782      	b.n	800cb36 <_dtoa_r+0x8fe>
 800cc30:	4630      	mov	r0, r6
 800cc32:	e7c2      	b.n	800cbba <_dtoa_r+0x982>
 800cc34:	2301      	movs	r3, #1
 800cc36:	e7e3      	b.n	800cc00 <_dtoa_r+0x9c8>
 800cc38:	9a00      	ldr	r2, [sp, #0]
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	db04      	blt.n	800cc48 <_dtoa_r+0xa10>
 800cc3e:	d125      	bne.n	800cc8c <_dtoa_r+0xa54>
 800cc40:	9a06      	ldr	r2, [sp, #24]
 800cc42:	bb1a      	cbnz	r2, 800cc8c <_dtoa_r+0xa54>
 800cc44:	9a07      	ldr	r2, [sp, #28]
 800cc46:	bb0a      	cbnz	r2, 800cc8c <_dtoa_r+0xa54>
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	ddec      	ble.n	800cc26 <_dtoa_r+0x9ee>
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	9904      	ldr	r1, [sp, #16]
 800cc50:	4620      	mov	r0, r4
 800cc52:	f000 fc5f 	bl	800d514 <__lshift>
 800cc56:	4639      	mov	r1, r7
 800cc58:	9004      	str	r0, [sp, #16]
 800cc5a:	f000 fcaf 	bl	800d5bc <__mcmp>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	dc03      	bgt.n	800cc6a <_dtoa_r+0xa32>
 800cc62:	d1e0      	bne.n	800cc26 <_dtoa_r+0x9ee>
 800cc64:	f018 0f01 	tst.w	r8, #1
 800cc68:	d0dd      	beq.n	800cc26 <_dtoa_r+0x9ee>
 800cc6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc6e:	d1d8      	bne.n	800cc22 <_dtoa_r+0x9ea>
 800cc70:	9b05      	ldr	r3, [sp, #20]
 800cc72:	9a05      	ldr	r2, [sp, #20]
 800cc74:	1c5d      	adds	r5, r3, #1
 800cc76:	2339      	movs	r3, #57	; 0x39
 800cc78:	7013      	strb	r3, [r2, #0]
 800cc7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc7e:	2b39      	cmp	r3, #57	; 0x39
 800cc80:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800cc84:	d04f      	beq.n	800cd26 <_dtoa_r+0xaee>
 800cc86:	3301      	adds	r3, #1
 800cc88:	7013      	strb	r3, [r2, #0]
 800cc8a:	e754      	b.n	800cb36 <_dtoa_r+0x8fe>
 800cc8c:	9a05      	ldr	r2, [sp, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f102 0501 	add.w	r5, r2, #1
 800cc94:	dd06      	ble.n	800cca4 <_dtoa_r+0xa6c>
 800cc96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc9a:	d0e9      	beq.n	800cc70 <_dtoa_r+0xa38>
 800cc9c:	f108 0801 	add.w	r8, r8, #1
 800cca0:	9b05      	ldr	r3, [sp, #20]
 800cca2:	e7c2      	b.n	800cc2a <_dtoa_r+0x9f2>
 800cca4:	9a02      	ldr	r2, [sp, #8]
 800cca6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ccaa:	eba5 030b 	sub.w	r3, r5, fp
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d021      	beq.n	800ccf6 <_dtoa_r+0xabe>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	220a      	movs	r2, #10
 800ccb6:	9904      	ldr	r1, [sp, #16]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 fab4 	bl	800d226 <__multadd>
 800ccbe:	45b1      	cmp	r9, r6
 800ccc0:	9004      	str	r0, [sp, #16]
 800ccc2:	f04f 0300 	mov.w	r3, #0
 800ccc6:	f04f 020a 	mov.w	r2, #10
 800ccca:	4649      	mov	r1, r9
 800cccc:	4620      	mov	r0, r4
 800ccce:	d105      	bne.n	800ccdc <_dtoa_r+0xaa4>
 800ccd0:	f000 faa9 	bl	800d226 <__multadd>
 800ccd4:	4681      	mov	r9, r0
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	9505      	str	r5, [sp, #20]
 800ccda:	e776      	b.n	800cbca <_dtoa_r+0x992>
 800ccdc:	f000 faa3 	bl	800d226 <__multadd>
 800cce0:	4631      	mov	r1, r6
 800cce2:	4681      	mov	r9, r0
 800cce4:	2300      	movs	r3, #0
 800cce6:	220a      	movs	r2, #10
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 fa9c 	bl	800d226 <__multadd>
 800ccee:	4606      	mov	r6, r0
 800ccf0:	e7f2      	b.n	800ccd8 <_dtoa_r+0xaa0>
 800ccf2:	f04f 0900 	mov.w	r9, #0
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	9904      	ldr	r1, [sp, #16]
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fc0a 	bl	800d514 <__lshift>
 800cd00:	4639      	mov	r1, r7
 800cd02:	9004      	str	r0, [sp, #16]
 800cd04:	f000 fc5a 	bl	800d5bc <__mcmp>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	dcb6      	bgt.n	800cc7a <_dtoa_r+0xa42>
 800cd0c:	d102      	bne.n	800cd14 <_dtoa_r+0xadc>
 800cd0e:	f018 0f01 	tst.w	r8, #1
 800cd12:	d1b2      	bne.n	800cc7a <_dtoa_r+0xa42>
 800cd14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd18:	2b30      	cmp	r3, #48	; 0x30
 800cd1a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800cd1e:	f47f af0a 	bne.w	800cb36 <_dtoa_r+0x8fe>
 800cd22:	4615      	mov	r5, r2
 800cd24:	e7f6      	b.n	800cd14 <_dtoa_r+0xadc>
 800cd26:	4593      	cmp	fp, r2
 800cd28:	d105      	bne.n	800cd36 <_dtoa_r+0xafe>
 800cd2a:	2331      	movs	r3, #49	; 0x31
 800cd2c:	f10a 0a01 	add.w	sl, sl, #1
 800cd30:	f88b 3000 	strb.w	r3, [fp]
 800cd34:	e6ff      	b.n	800cb36 <_dtoa_r+0x8fe>
 800cd36:	4615      	mov	r5, r2
 800cd38:	e79f      	b.n	800cc7a <_dtoa_r+0xa42>
 800cd3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cda0 <_dtoa_r+0xb68>
 800cd3e:	e007      	b.n	800cd50 <_dtoa_r+0xb18>
 800cd40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd42:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cda4 <_dtoa_r+0xb6c>
 800cd46:	b11b      	cbz	r3, 800cd50 <_dtoa_r+0xb18>
 800cd48:	f10b 0308 	add.w	r3, fp, #8
 800cd4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	4658      	mov	r0, fp
 800cd52:	b017      	add	sp, #92	; 0x5c
 800cd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd58:	9b06      	ldr	r3, [sp, #24]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	f77f ae35 	ble.w	800c9ca <_dtoa_r+0x792>
 800cd60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd62:	9307      	str	r3, [sp, #28]
 800cd64:	e649      	b.n	800c9fa <_dtoa_r+0x7c2>
 800cd66:	9b02      	ldr	r3, [sp, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	dc03      	bgt.n	800cd74 <_dtoa_r+0xb3c>
 800cd6c:	9b06      	ldr	r3, [sp, #24]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	f73f aecc 	bgt.w	800cb0c <_dtoa_r+0x8d4>
 800cd74:	465d      	mov	r5, fp
 800cd76:	4639      	mov	r1, r7
 800cd78:	9804      	ldr	r0, [sp, #16]
 800cd7a:	f7ff f9d1 	bl	800c120 <quorem>
 800cd7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cd82:	f805 8b01 	strb.w	r8, [r5], #1
 800cd86:	9a02      	ldr	r2, [sp, #8]
 800cd88:	eba5 030b 	sub.w	r3, r5, fp
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	ddb0      	ble.n	800ccf2 <_dtoa_r+0xaba>
 800cd90:	2300      	movs	r3, #0
 800cd92:	220a      	movs	r2, #10
 800cd94:	9904      	ldr	r1, [sp, #16]
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 fa45 	bl	800d226 <__multadd>
 800cd9c:	9004      	str	r0, [sp, #16]
 800cd9e:	e7ea      	b.n	800cd76 <_dtoa_r+0xb3e>
 800cda0:	0800e434 	.word	0x0800e434
 800cda4:	0800e458 	.word	0x0800e458

0800cda8 <__sflush_r>:
 800cda8:	898a      	ldrh	r2, [r1, #12]
 800cdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdae:	4605      	mov	r5, r0
 800cdb0:	0710      	lsls	r0, r2, #28
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	d458      	bmi.n	800ce68 <__sflush_r+0xc0>
 800cdb6:	684b      	ldr	r3, [r1, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	dc05      	bgt.n	800cdc8 <__sflush_r+0x20>
 800cdbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dc02      	bgt.n	800cdc8 <__sflush_r+0x20>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdca:	2e00      	cmp	r6, #0
 800cdcc:	d0f9      	beq.n	800cdc2 <__sflush_r+0x1a>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cdd4:	682f      	ldr	r7, [r5, #0]
 800cdd6:	6a21      	ldr	r1, [r4, #32]
 800cdd8:	602b      	str	r3, [r5, #0]
 800cdda:	d032      	beq.n	800ce42 <__sflush_r+0x9a>
 800cddc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	075a      	lsls	r2, r3, #29
 800cde2:	d505      	bpl.n	800cdf0 <__sflush_r+0x48>
 800cde4:	6863      	ldr	r3, [r4, #4]
 800cde6:	1ac0      	subs	r0, r0, r3
 800cde8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdea:	b10b      	cbz	r3, 800cdf0 <__sflush_r+0x48>
 800cdec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cdee:	1ac0      	subs	r0, r0, r3
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdf6:	6a21      	ldr	r1, [r4, #32]
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	47b0      	blx	r6
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	d106      	bne.n	800ce10 <__sflush_r+0x68>
 800ce02:	6829      	ldr	r1, [r5, #0]
 800ce04:	291d      	cmp	r1, #29
 800ce06:	d848      	bhi.n	800ce9a <__sflush_r+0xf2>
 800ce08:	4a29      	ldr	r2, [pc, #164]	; (800ceb0 <__sflush_r+0x108>)
 800ce0a:	40ca      	lsrs	r2, r1
 800ce0c:	07d6      	lsls	r6, r2, #31
 800ce0e:	d544      	bpl.n	800ce9a <__sflush_r+0xf2>
 800ce10:	2200      	movs	r2, #0
 800ce12:	6062      	str	r2, [r4, #4]
 800ce14:	04d9      	lsls	r1, r3, #19
 800ce16:	6922      	ldr	r2, [r4, #16]
 800ce18:	6022      	str	r2, [r4, #0]
 800ce1a:	d504      	bpl.n	800ce26 <__sflush_r+0x7e>
 800ce1c:	1c42      	adds	r2, r0, #1
 800ce1e:	d101      	bne.n	800ce24 <__sflush_r+0x7c>
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	b903      	cbnz	r3, 800ce26 <__sflush_r+0x7e>
 800ce24:	6560      	str	r0, [r4, #84]	; 0x54
 800ce26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce28:	602f      	str	r7, [r5, #0]
 800ce2a:	2900      	cmp	r1, #0
 800ce2c:	d0c9      	beq.n	800cdc2 <__sflush_r+0x1a>
 800ce2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce32:	4299      	cmp	r1, r3
 800ce34:	d002      	beq.n	800ce3c <__sflush_r+0x94>
 800ce36:	4628      	mov	r0, r5
 800ce38:	f000 fc94 	bl	800d764 <_free_r>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	6360      	str	r0, [r4, #52]	; 0x34
 800ce40:	e7c0      	b.n	800cdc4 <__sflush_r+0x1c>
 800ce42:	2301      	movs	r3, #1
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b0      	blx	r6
 800ce48:	1c41      	adds	r1, r0, #1
 800ce4a:	d1c8      	bne.n	800cdde <__sflush_r+0x36>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0c5      	beq.n	800cdde <__sflush_r+0x36>
 800ce52:	2b1d      	cmp	r3, #29
 800ce54:	d001      	beq.n	800ce5a <__sflush_r+0xb2>
 800ce56:	2b16      	cmp	r3, #22
 800ce58:	d101      	bne.n	800ce5e <__sflush_r+0xb6>
 800ce5a:	602f      	str	r7, [r5, #0]
 800ce5c:	e7b1      	b.n	800cdc2 <__sflush_r+0x1a>
 800ce5e:	89a3      	ldrh	r3, [r4, #12]
 800ce60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce64:	81a3      	strh	r3, [r4, #12]
 800ce66:	e7ad      	b.n	800cdc4 <__sflush_r+0x1c>
 800ce68:	690f      	ldr	r7, [r1, #16]
 800ce6a:	2f00      	cmp	r7, #0
 800ce6c:	d0a9      	beq.n	800cdc2 <__sflush_r+0x1a>
 800ce6e:	0793      	lsls	r3, r2, #30
 800ce70:	680e      	ldr	r6, [r1, #0]
 800ce72:	bf08      	it	eq
 800ce74:	694b      	ldreq	r3, [r1, #20]
 800ce76:	600f      	str	r7, [r1, #0]
 800ce78:	bf18      	it	ne
 800ce7a:	2300      	movne	r3, #0
 800ce7c:	eba6 0807 	sub.w	r8, r6, r7
 800ce80:	608b      	str	r3, [r1, #8]
 800ce82:	f1b8 0f00 	cmp.w	r8, #0
 800ce86:	dd9c      	ble.n	800cdc2 <__sflush_r+0x1a>
 800ce88:	4643      	mov	r3, r8
 800ce8a:	463a      	mov	r2, r7
 800ce8c:	6a21      	ldr	r1, [r4, #32]
 800ce8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce90:	4628      	mov	r0, r5
 800ce92:	47b0      	blx	r6
 800ce94:	2800      	cmp	r0, #0
 800ce96:	dc06      	bgt.n	800cea6 <__sflush_r+0xfe>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce9e:	81a3      	strh	r3, [r4, #12]
 800cea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cea4:	e78e      	b.n	800cdc4 <__sflush_r+0x1c>
 800cea6:	4407      	add	r7, r0
 800cea8:	eba8 0800 	sub.w	r8, r8, r0
 800ceac:	e7e9      	b.n	800ce82 <__sflush_r+0xda>
 800ceae:	bf00      	nop
 800ceb0:	20400001 	.word	0x20400001

0800ceb4 <_fflush_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	690b      	ldr	r3, [r1, #16]
 800ceb8:	4605      	mov	r5, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	b1db      	cbz	r3, 800cef6 <_fflush_r+0x42>
 800cebe:	b118      	cbz	r0, 800cec8 <_fflush_r+0x14>
 800cec0:	6983      	ldr	r3, [r0, #24]
 800cec2:	b90b      	cbnz	r3, 800cec8 <_fflush_r+0x14>
 800cec4:	f000 f860 	bl	800cf88 <__sinit>
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <_fflush_r+0x48>)
 800ceca:	429c      	cmp	r4, r3
 800cecc:	d109      	bne.n	800cee2 <_fflush_r+0x2e>
 800cece:	686c      	ldr	r4, [r5, #4]
 800ced0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced4:	b17b      	cbz	r3, 800cef6 <_fflush_r+0x42>
 800ced6:	4621      	mov	r1, r4
 800ced8:	4628      	mov	r0, r5
 800ceda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cede:	f7ff bf63 	b.w	800cda8 <__sflush_r>
 800cee2:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <_fflush_r+0x4c>)
 800cee4:	429c      	cmp	r4, r3
 800cee6:	d101      	bne.n	800ceec <_fflush_r+0x38>
 800cee8:	68ac      	ldr	r4, [r5, #8]
 800ceea:	e7f1      	b.n	800ced0 <_fflush_r+0x1c>
 800ceec:	4b05      	ldr	r3, [pc, #20]	; (800cf04 <_fflush_r+0x50>)
 800ceee:	429c      	cmp	r4, r3
 800cef0:	bf08      	it	eq
 800cef2:	68ec      	ldreq	r4, [r5, #12]
 800cef4:	e7ec      	b.n	800ced0 <_fflush_r+0x1c>
 800cef6:	2000      	movs	r0, #0
 800cef8:	bd38      	pop	{r3, r4, r5, pc}
 800cefa:	bf00      	nop
 800cefc:	0800e488 	.word	0x0800e488
 800cf00:	0800e4a8 	.word	0x0800e4a8
 800cf04:	0800e468 	.word	0x0800e468

0800cf08 <std>:
 800cf08:	2300      	movs	r3, #0
 800cf0a:	b510      	push	{r4, lr}
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf12:	6083      	str	r3, [r0, #8]
 800cf14:	8181      	strh	r1, [r0, #12]
 800cf16:	6643      	str	r3, [r0, #100]	; 0x64
 800cf18:	81c2      	strh	r2, [r0, #14]
 800cf1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf1e:	6183      	str	r3, [r0, #24]
 800cf20:	4619      	mov	r1, r3
 800cf22:	2208      	movs	r2, #8
 800cf24:	305c      	adds	r0, #92	; 0x5c
 800cf26:	f7fe fb5a 	bl	800b5de <memset>
 800cf2a:	4b05      	ldr	r3, [pc, #20]	; (800cf40 <std+0x38>)
 800cf2c:	6263      	str	r3, [r4, #36]	; 0x24
 800cf2e:	4b05      	ldr	r3, [pc, #20]	; (800cf44 <std+0x3c>)
 800cf30:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf32:	4b05      	ldr	r3, [pc, #20]	; (800cf48 <std+0x40>)
 800cf34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf36:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <std+0x44>)
 800cf38:	6224      	str	r4, [r4, #32]
 800cf3a:	6323      	str	r3, [r4, #48]	; 0x30
 800cf3c:	bd10      	pop	{r4, pc}
 800cf3e:	bf00      	nop
 800cf40:	0800db55 	.word	0x0800db55
 800cf44:	0800db77 	.word	0x0800db77
 800cf48:	0800dbaf 	.word	0x0800dbaf
 800cf4c:	0800dbd3 	.word	0x0800dbd3

0800cf50 <_cleanup_r>:
 800cf50:	4901      	ldr	r1, [pc, #4]	; (800cf58 <_cleanup_r+0x8>)
 800cf52:	f000 b885 	b.w	800d060 <_fwalk_reent>
 800cf56:	bf00      	nop
 800cf58:	0800ceb5 	.word	0x0800ceb5

0800cf5c <__sfmoreglue>:
 800cf5c:	b570      	push	{r4, r5, r6, lr}
 800cf5e:	1e4a      	subs	r2, r1, #1
 800cf60:	2568      	movs	r5, #104	; 0x68
 800cf62:	4355      	muls	r5, r2
 800cf64:	460e      	mov	r6, r1
 800cf66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf6a:	f000 fc49 	bl	800d800 <_malloc_r>
 800cf6e:	4604      	mov	r4, r0
 800cf70:	b140      	cbz	r0, 800cf84 <__sfmoreglue+0x28>
 800cf72:	2100      	movs	r1, #0
 800cf74:	e9c0 1600 	strd	r1, r6, [r0]
 800cf78:	300c      	adds	r0, #12
 800cf7a:	60a0      	str	r0, [r4, #8]
 800cf7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf80:	f7fe fb2d 	bl	800b5de <memset>
 800cf84:	4620      	mov	r0, r4
 800cf86:	bd70      	pop	{r4, r5, r6, pc}

0800cf88 <__sinit>:
 800cf88:	6983      	ldr	r3, [r0, #24]
 800cf8a:	b510      	push	{r4, lr}
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	bb33      	cbnz	r3, 800cfde <__sinit+0x56>
 800cf90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cf94:	6503      	str	r3, [r0, #80]	; 0x50
 800cf96:	4b12      	ldr	r3, [pc, #72]	; (800cfe0 <__sinit+0x58>)
 800cf98:	4a12      	ldr	r2, [pc, #72]	; (800cfe4 <__sinit+0x5c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6282      	str	r2, [r0, #40]	; 0x28
 800cf9e:	4298      	cmp	r0, r3
 800cfa0:	bf04      	itt	eq
 800cfa2:	2301      	moveq	r3, #1
 800cfa4:	6183      	streq	r3, [r0, #24]
 800cfa6:	f000 f81f 	bl	800cfe8 <__sfp>
 800cfaa:	6060      	str	r0, [r4, #4]
 800cfac:	4620      	mov	r0, r4
 800cfae:	f000 f81b 	bl	800cfe8 <__sfp>
 800cfb2:	60a0      	str	r0, [r4, #8]
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f000 f817 	bl	800cfe8 <__sfp>
 800cfba:	2200      	movs	r2, #0
 800cfbc:	60e0      	str	r0, [r4, #12]
 800cfbe:	2104      	movs	r1, #4
 800cfc0:	6860      	ldr	r0, [r4, #4]
 800cfc2:	f7ff ffa1 	bl	800cf08 <std>
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	2109      	movs	r1, #9
 800cfca:	68a0      	ldr	r0, [r4, #8]
 800cfcc:	f7ff ff9c 	bl	800cf08 <std>
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	2112      	movs	r1, #18
 800cfd4:	68e0      	ldr	r0, [r4, #12]
 800cfd6:	f7ff ff97 	bl	800cf08 <std>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	61a3      	str	r3, [r4, #24]
 800cfde:	bd10      	pop	{r4, pc}
 800cfe0:	0800e420 	.word	0x0800e420
 800cfe4:	0800cf51 	.word	0x0800cf51

0800cfe8 <__sfp>:
 800cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfea:	4b1b      	ldr	r3, [pc, #108]	; (800d058 <__sfp+0x70>)
 800cfec:	681e      	ldr	r6, [r3, #0]
 800cfee:	69b3      	ldr	r3, [r6, #24]
 800cff0:	4607      	mov	r7, r0
 800cff2:	b913      	cbnz	r3, 800cffa <__sfp+0x12>
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7ff ffc7 	bl	800cf88 <__sinit>
 800cffa:	3648      	adds	r6, #72	; 0x48
 800cffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d000:	3b01      	subs	r3, #1
 800d002:	d503      	bpl.n	800d00c <__sfp+0x24>
 800d004:	6833      	ldr	r3, [r6, #0]
 800d006:	b133      	cbz	r3, 800d016 <__sfp+0x2e>
 800d008:	6836      	ldr	r6, [r6, #0]
 800d00a:	e7f7      	b.n	800cffc <__sfp+0x14>
 800d00c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d010:	b16d      	cbz	r5, 800d02e <__sfp+0x46>
 800d012:	3468      	adds	r4, #104	; 0x68
 800d014:	e7f4      	b.n	800d000 <__sfp+0x18>
 800d016:	2104      	movs	r1, #4
 800d018:	4638      	mov	r0, r7
 800d01a:	f7ff ff9f 	bl	800cf5c <__sfmoreglue>
 800d01e:	6030      	str	r0, [r6, #0]
 800d020:	2800      	cmp	r0, #0
 800d022:	d1f1      	bne.n	800d008 <__sfp+0x20>
 800d024:	230c      	movs	r3, #12
 800d026:	603b      	str	r3, [r7, #0]
 800d028:	4604      	mov	r4, r0
 800d02a:	4620      	mov	r0, r4
 800d02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d02e:	4b0b      	ldr	r3, [pc, #44]	; (800d05c <__sfp+0x74>)
 800d030:	6665      	str	r5, [r4, #100]	; 0x64
 800d032:	e9c4 5500 	strd	r5, r5, [r4]
 800d036:	60a5      	str	r5, [r4, #8]
 800d038:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d03c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d040:	2208      	movs	r2, #8
 800d042:	4629      	mov	r1, r5
 800d044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d048:	f7fe fac9 	bl	800b5de <memset>
 800d04c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d054:	e7e9      	b.n	800d02a <__sfp+0x42>
 800d056:	bf00      	nop
 800d058:	0800e420 	.word	0x0800e420
 800d05c:	ffff0001 	.word	0xffff0001

0800d060 <_fwalk_reent>:
 800d060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d064:	4680      	mov	r8, r0
 800d066:	4689      	mov	r9, r1
 800d068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d06c:	2600      	movs	r6, #0
 800d06e:	b914      	cbnz	r4, 800d076 <_fwalk_reent+0x16>
 800d070:	4630      	mov	r0, r6
 800d072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d076:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d07a:	3f01      	subs	r7, #1
 800d07c:	d501      	bpl.n	800d082 <_fwalk_reent+0x22>
 800d07e:	6824      	ldr	r4, [r4, #0]
 800d080:	e7f5      	b.n	800d06e <_fwalk_reent+0xe>
 800d082:	89ab      	ldrh	r3, [r5, #12]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d907      	bls.n	800d098 <_fwalk_reent+0x38>
 800d088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d08c:	3301      	adds	r3, #1
 800d08e:	d003      	beq.n	800d098 <_fwalk_reent+0x38>
 800d090:	4629      	mov	r1, r5
 800d092:	4640      	mov	r0, r8
 800d094:	47c8      	blx	r9
 800d096:	4306      	orrs	r6, r0
 800d098:	3568      	adds	r5, #104	; 0x68
 800d09a:	e7ee      	b.n	800d07a <_fwalk_reent+0x1a>

0800d09c <_localeconv_r>:
 800d09c:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <_localeconv_r+0x14>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6a18      	ldr	r0, [r3, #32]
 800d0a2:	4b04      	ldr	r3, [pc, #16]	; (800d0b4 <_localeconv_r+0x18>)
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	bf08      	it	eq
 800d0a8:	4618      	moveq	r0, r3
 800d0aa:	30f0      	adds	r0, #240	; 0xf0
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	20000120 	.word	0x20000120
 800d0b4:	20000184 	.word	0x20000184

0800d0b8 <__swhatbuf_r>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	460e      	mov	r6, r1
 800d0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c0:	2900      	cmp	r1, #0
 800d0c2:	b096      	sub	sp, #88	; 0x58
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	461d      	mov	r5, r3
 800d0c8:	da07      	bge.n	800d0da <__swhatbuf_r+0x22>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	89b3      	ldrh	r3, [r6, #12]
 800d0d0:	061a      	lsls	r2, r3, #24
 800d0d2:	d410      	bmi.n	800d0f6 <__swhatbuf_r+0x3e>
 800d0d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0d8:	e00e      	b.n	800d0f8 <__swhatbuf_r+0x40>
 800d0da:	466a      	mov	r2, sp
 800d0dc:	f000 fda0 	bl	800dc20 <_fstat_r>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	dbf2      	blt.n	800d0ca <__swhatbuf_r+0x12>
 800d0e4:	9a01      	ldr	r2, [sp, #4]
 800d0e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d0ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d0ee:	425a      	negs	r2, r3
 800d0f0:	415a      	adcs	r2, r3
 800d0f2:	602a      	str	r2, [r5, #0]
 800d0f4:	e7ee      	b.n	800d0d4 <__swhatbuf_r+0x1c>
 800d0f6:	2340      	movs	r3, #64	; 0x40
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	b016      	add	sp, #88	; 0x58
 800d0fe:	bd70      	pop	{r4, r5, r6, pc}

0800d100 <__smakebuf_r>:
 800d100:	898b      	ldrh	r3, [r1, #12]
 800d102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d104:	079d      	lsls	r5, r3, #30
 800d106:	4606      	mov	r6, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	d507      	bpl.n	800d11c <__smakebuf_r+0x1c>
 800d10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	6123      	str	r3, [r4, #16]
 800d114:	2301      	movs	r3, #1
 800d116:	6163      	str	r3, [r4, #20]
 800d118:	b002      	add	sp, #8
 800d11a:	bd70      	pop	{r4, r5, r6, pc}
 800d11c:	ab01      	add	r3, sp, #4
 800d11e:	466a      	mov	r2, sp
 800d120:	f7ff ffca 	bl	800d0b8 <__swhatbuf_r>
 800d124:	9900      	ldr	r1, [sp, #0]
 800d126:	4605      	mov	r5, r0
 800d128:	4630      	mov	r0, r6
 800d12a:	f000 fb69 	bl	800d800 <_malloc_r>
 800d12e:	b948      	cbnz	r0, 800d144 <__smakebuf_r+0x44>
 800d130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d134:	059a      	lsls	r2, r3, #22
 800d136:	d4ef      	bmi.n	800d118 <__smakebuf_r+0x18>
 800d138:	f023 0303 	bic.w	r3, r3, #3
 800d13c:	f043 0302 	orr.w	r3, r3, #2
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	e7e3      	b.n	800d10c <__smakebuf_r+0xc>
 800d144:	4b0d      	ldr	r3, [pc, #52]	; (800d17c <__smakebuf_r+0x7c>)
 800d146:	62b3      	str	r3, [r6, #40]	; 0x28
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	6020      	str	r0, [r4, #0]
 800d14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d150:	81a3      	strh	r3, [r4, #12]
 800d152:	9b00      	ldr	r3, [sp, #0]
 800d154:	6163      	str	r3, [r4, #20]
 800d156:	9b01      	ldr	r3, [sp, #4]
 800d158:	6120      	str	r0, [r4, #16]
 800d15a:	b15b      	cbz	r3, 800d174 <__smakebuf_r+0x74>
 800d15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d160:	4630      	mov	r0, r6
 800d162:	f000 fd6f 	bl	800dc44 <_isatty_r>
 800d166:	b128      	cbz	r0, 800d174 <__smakebuf_r+0x74>
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	f023 0303 	bic.w	r3, r3, #3
 800d16e:	f043 0301 	orr.w	r3, r3, #1
 800d172:	81a3      	strh	r3, [r4, #12]
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	431d      	orrs	r5, r3
 800d178:	81a5      	strh	r5, [r4, #12]
 800d17a:	e7cd      	b.n	800d118 <__smakebuf_r+0x18>
 800d17c:	0800cf51 	.word	0x0800cf51

0800d180 <malloc>:
 800d180:	4b02      	ldr	r3, [pc, #8]	; (800d18c <malloc+0xc>)
 800d182:	4601      	mov	r1, r0
 800d184:	6818      	ldr	r0, [r3, #0]
 800d186:	f000 bb3b 	b.w	800d800 <_malloc_r>
 800d18a:	bf00      	nop
 800d18c:	20000120 	.word	0x20000120

0800d190 <_Balloc>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d194:	4604      	mov	r4, r0
 800d196:	460e      	mov	r6, r1
 800d198:	b93d      	cbnz	r5, 800d1aa <_Balloc+0x1a>
 800d19a:	2010      	movs	r0, #16
 800d19c:	f7ff fff0 	bl	800d180 <malloc>
 800d1a0:	6260      	str	r0, [r4, #36]	; 0x24
 800d1a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1a6:	6005      	str	r5, [r0, #0]
 800d1a8:	60c5      	str	r5, [r0, #12]
 800d1aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d1ac:	68eb      	ldr	r3, [r5, #12]
 800d1ae:	b183      	cbz	r3, 800d1d2 <_Balloc+0x42>
 800d1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d1b8:	b9b8      	cbnz	r0, 800d1ea <_Balloc+0x5a>
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	fa01 f506 	lsl.w	r5, r1, r6
 800d1c0:	1d6a      	adds	r2, r5, #5
 800d1c2:	0092      	lsls	r2, r2, #2
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f000 fabf 	bl	800d748 <_calloc_r>
 800d1ca:	b160      	cbz	r0, 800d1e6 <_Balloc+0x56>
 800d1cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d1d0:	e00e      	b.n	800d1f0 <_Balloc+0x60>
 800d1d2:	2221      	movs	r2, #33	; 0x21
 800d1d4:	2104      	movs	r1, #4
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f000 fab6 	bl	800d748 <_calloc_r>
 800d1dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1de:	60e8      	str	r0, [r5, #12]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e4      	bne.n	800d1b0 <_Balloc+0x20>
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	bd70      	pop	{r4, r5, r6, pc}
 800d1ea:	6802      	ldr	r2, [r0, #0]
 800d1ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1f6:	e7f7      	b.n	800d1e8 <_Balloc+0x58>

0800d1f8 <_Bfree>:
 800d1f8:	b570      	push	{r4, r5, r6, lr}
 800d1fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	460d      	mov	r5, r1
 800d200:	b93c      	cbnz	r4, 800d212 <_Bfree+0x1a>
 800d202:	2010      	movs	r0, #16
 800d204:	f7ff ffbc 	bl	800d180 <malloc>
 800d208:	6270      	str	r0, [r6, #36]	; 0x24
 800d20a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d20e:	6004      	str	r4, [r0, #0]
 800d210:	60c4      	str	r4, [r0, #12]
 800d212:	b13d      	cbz	r5, 800d224 <_Bfree+0x2c>
 800d214:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d216:	686a      	ldr	r2, [r5, #4]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d21e:	6029      	str	r1, [r5, #0]
 800d220:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d224:	bd70      	pop	{r4, r5, r6, pc}

0800d226 <__multadd>:
 800d226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d22a:	690d      	ldr	r5, [r1, #16]
 800d22c:	461f      	mov	r7, r3
 800d22e:	4606      	mov	r6, r0
 800d230:	460c      	mov	r4, r1
 800d232:	f101 0c14 	add.w	ip, r1, #20
 800d236:	2300      	movs	r3, #0
 800d238:	f8dc 0000 	ldr.w	r0, [ip]
 800d23c:	b281      	uxth	r1, r0
 800d23e:	fb02 7101 	mla	r1, r2, r1, r7
 800d242:	0c0f      	lsrs	r7, r1, #16
 800d244:	0c00      	lsrs	r0, r0, #16
 800d246:	fb02 7000 	mla	r0, r2, r0, r7
 800d24a:	b289      	uxth	r1, r1
 800d24c:	3301      	adds	r3, #1
 800d24e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d252:	429d      	cmp	r5, r3
 800d254:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d258:	f84c 1b04 	str.w	r1, [ip], #4
 800d25c:	dcec      	bgt.n	800d238 <__multadd+0x12>
 800d25e:	b1d7      	cbz	r7, 800d296 <__multadd+0x70>
 800d260:	68a3      	ldr	r3, [r4, #8]
 800d262:	42ab      	cmp	r3, r5
 800d264:	dc12      	bgt.n	800d28c <__multadd+0x66>
 800d266:	6861      	ldr	r1, [r4, #4]
 800d268:	4630      	mov	r0, r6
 800d26a:	3101      	adds	r1, #1
 800d26c:	f7ff ff90 	bl	800d190 <_Balloc>
 800d270:	6922      	ldr	r2, [r4, #16]
 800d272:	3202      	adds	r2, #2
 800d274:	f104 010c 	add.w	r1, r4, #12
 800d278:	4680      	mov	r8, r0
 800d27a:	0092      	lsls	r2, r2, #2
 800d27c:	300c      	adds	r0, #12
 800d27e:	f7fe f9a3 	bl	800b5c8 <memcpy>
 800d282:	4621      	mov	r1, r4
 800d284:	4630      	mov	r0, r6
 800d286:	f7ff ffb7 	bl	800d1f8 <_Bfree>
 800d28a:	4644      	mov	r4, r8
 800d28c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d290:	3501      	adds	r5, #1
 800d292:	615f      	str	r7, [r3, #20]
 800d294:	6125      	str	r5, [r4, #16]
 800d296:	4620      	mov	r0, r4
 800d298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d29c <__hi0bits>:
 800d29c:	0c02      	lsrs	r2, r0, #16
 800d29e:	0412      	lsls	r2, r2, #16
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	b9b2      	cbnz	r2, 800d2d2 <__hi0bits+0x36>
 800d2a4:	0403      	lsls	r3, r0, #16
 800d2a6:	2010      	movs	r0, #16
 800d2a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d2ac:	bf04      	itt	eq
 800d2ae:	021b      	lsleq	r3, r3, #8
 800d2b0:	3008      	addeq	r0, #8
 800d2b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2b6:	bf04      	itt	eq
 800d2b8:	011b      	lsleq	r3, r3, #4
 800d2ba:	3004      	addeq	r0, #4
 800d2bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2c0:	bf04      	itt	eq
 800d2c2:	009b      	lsleq	r3, r3, #2
 800d2c4:	3002      	addeq	r0, #2
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	db06      	blt.n	800d2d8 <__hi0bits+0x3c>
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	d503      	bpl.n	800d2d6 <__hi0bits+0x3a>
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	4770      	bx	lr
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	e7e8      	b.n	800d2a8 <__hi0bits+0xc>
 800d2d6:	2020      	movs	r0, #32
 800d2d8:	4770      	bx	lr

0800d2da <__lo0bits>:
 800d2da:	6803      	ldr	r3, [r0, #0]
 800d2dc:	f013 0207 	ands.w	r2, r3, #7
 800d2e0:	4601      	mov	r1, r0
 800d2e2:	d00b      	beq.n	800d2fc <__lo0bits+0x22>
 800d2e4:	07da      	lsls	r2, r3, #31
 800d2e6:	d423      	bmi.n	800d330 <__lo0bits+0x56>
 800d2e8:	0798      	lsls	r0, r3, #30
 800d2ea:	bf49      	itett	mi
 800d2ec:	085b      	lsrmi	r3, r3, #1
 800d2ee:	089b      	lsrpl	r3, r3, #2
 800d2f0:	2001      	movmi	r0, #1
 800d2f2:	600b      	strmi	r3, [r1, #0]
 800d2f4:	bf5c      	itt	pl
 800d2f6:	600b      	strpl	r3, [r1, #0]
 800d2f8:	2002      	movpl	r0, #2
 800d2fa:	4770      	bx	lr
 800d2fc:	b298      	uxth	r0, r3
 800d2fe:	b9a8      	cbnz	r0, 800d32c <__lo0bits+0x52>
 800d300:	0c1b      	lsrs	r3, r3, #16
 800d302:	2010      	movs	r0, #16
 800d304:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d308:	bf04      	itt	eq
 800d30a:	0a1b      	lsreq	r3, r3, #8
 800d30c:	3008      	addeq	r0, #8
 800d30e:	071a      	lsls	r2, r3, #28
 800d310:	bf04      	itt	eq
 800d312:	091b      	lsreq	r3, r3, #4
 800d314:	3004      	addeq	r0, #4
 800d316:	079a      	lsls	r2, r3, #30
 800d318:	bf04      	itt	eq
 800d31a:	089b      	lsreq	r3, r3, #2
 800d31c:	3002      	addeq	r0, #2
 800d31e:	07da      	lsls	r2, r3, #31
 800d320:	d402      	bmi.n	800d328 <__lo0bits+0x4e>
 800d322:	085b      	lsrs	r3, r3, #1
 800d324:	d006      	beq.n	800d334 <__lo0bits+0x5a>
 800d326:	3001      	adds	r0, #1
 800d328:	600b      	str	r3, [r1, #0]
 800d32a:	4770      	bx	lr
 800d32c:	4610      	mov	r0, r2
 800d32e:	e7e9      	b.n	800d304 <__lo0bits+0x2a>
 800d330:	2000      	movs	r0, #0
 800d332:	4770      	bx	lr
 800d334:	2020      	movs	r0, #32
 800d336:	4770      	bx	lr

0800d338 <__i2b>:
 800d338:	b510      	push	{r4, lr}
 800d33a:	460c      	mov	r4, r1
 800d33c:	2101      	movs	r1, #1
 800d33e:	f7ff ff27 	bl	800d190 <_Balloc>
 800d342:	2201      	movs	r2, #1
 800d344:	6144      	str	r4, [r0, #20]
 800d346:	6102      	str	r2, [r0, #16]
 800d348:	bd10      	pop	{r4, pc}

0800d34a <__multiply>:
 800d34a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34e:	4614      	mov	r4, r2
 800d350:	690a      	ldr	r2, [r1, #16]
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	429a      	cmp	r2, r3
 800d356:	bfb8      	it	lt
 800d358:	460b      	movlt	r3, r1
 800d35a:	4688      	mov	r8, r1
 800d35c:	bfbc      	itt	lt
 800d35e:	46a0      	movlt	r8, r4
 800d360:	461c      	movlt	r4, r3
 800d362:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d366:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d36a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d36e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d372:	eb07 0609 	add.w	r6, r7, r9
 800d376:	42b3      	cmp	r3, r6
 800d378:	bfb8      	it	lt
 800d37a:	3101      	addlt	r1, #1
 800d37c:	f7ff ff08 	bl	800d190 <_Balloc>
 800d380:	f100 0514 	add.w	r5, r0, #20
 800d384:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d388:	462b      	mov	r3, r5
 800d38a:	2200      	movs	r2, #0
 800d38c:	4573      	cmp	r3, lr
 800d38e:	d316      	bcc.n	800d3be <__multiply+0x74>
 800d390:	f104 0214 	add.w	r2, r4, #20
 800d394:	f108 0114 	add.w	r1, r8, #20
 800d398:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d39c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	9b00      	ldr	r3, [sp, #0]
 800d3a4:	9201      	str	r2, [sp, #4]
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d80c      	bhi.n	800d3c4 <__multiply+0x7a>
 800d3aa:	2e00      	cmp	r6, #0
 800d3ac:	dd03      	ble.n	800d3b6 <__multiply+0x6c>
 800d3ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d05d      	beq.n	800d472 <__multiply+0x128>
 800d3b6:	6106      	str	r6, [r0, #16]
 800d3b8:	b003      	add	sp, #12
 800d3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3be:	f843 2b04 	str.w	r2, [r3], #4
 800d3c2:	e7e3      	b.n	800d38c <__multiply+0x42>
 800d3c4:	f8b2 b000 	ldrh.w	fp, [r2]
 800d3c8:	f1bb 0f00 	cmp.w	fp, #0
 800d3cc:	d023      	beq.n	800d416 <__multiply+0xcc>
 800d3ce:	4689      	mov	r9, r1
 800d3d0:	46ac      	mov	ip, r5
 800d3d2:	f04f 0800 	mov.w	r8, #0
 800d3d6:	f859 4b04 	ldr.w	r4, [r9], #4
 800d3da:	f8dc a000 	ldr.w	sl, [ip]
 800d3de:	b2a3      	uxth	r3, r4
 800d3e0:	fa1f fa8a 	uxth.w	sl, sl
 800d3e4:	fb0b a303 	mla	r3, fp, r3, sl
 800d3e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3ec:	f8dc 4000 	ldr.w	r4, [ip]
 800d3f0:	4443      	add	r3, r8
 800d3f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3f6:	fb0b 840a 	mla	r4, fp, sl, r8
 800d3fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d3fe:	46e2      	mov	sl, ip
 800d400:	b29b      	uxth	r3, r3
 800d402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d406:	454f      	cmp	r7, r9
 800d408:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d40c:	f84a 3b04 	str.w	r3, [sl], #4
 800d410:	d82b      	bhi.n	800d46a <__multiply+0x120>
 800d412:	f8cc 8004 	str.w	r8, [ip, #4]
 800d416:	9b01      	ldr	r3, [sp, #4]
 800d418:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d41c:	3204      	adds	r2, #4
 800d41e:	f1ba 0f00 	cmp.w	sl, #0
 800d422:	d020      	beq.n	800d466 <__multiply+0x11c>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	4689      	mov	r9, r1
 800d428:	46a8      	mov	r8, r5
 800d42a:	f04f 0b00 	mov.w	fp, #0
 800d42e:	f8b9 c000 	ldrh.w	ip, [r9]
 800d432:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d436:	fb0a 440c 	mla	r4, sl, ip, r4
 800d43a:	445c      	add	r4, fp
 800d43c:	46c4      	mov	ip, r8
 800d43e:	b29b      	uxth	r3, r3
 800d440:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d444:	f84c 3b04 	str.w	r3, [ip], #4
 800d448:	f859 3b04 	ldr.w	r3, [r9], #4
 800d44c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d450:	0c1b      	lsrs	r3, r3, #16
 800d452:	fb0a b303 	mla	r3, sl, r3, fp
 800d456:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d45a:	454f      	cmp	r7, r9
 800d45c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d460:	d805      	bhi.n	800d46e <__multiply+0x124>
 800d462:	f8c8 3004 	str.w	r3, [r8, #4]
 800d466:	3504      	adds	r5, #4
 800d468:	e79b      	b.n	800d3a2 <__multiply+0x58>
 800d46a:	46d4      	mov	ip, sl
 800d46c:	e7b3      	b.n	800d3d6 <__multiply+0x8c>
 800d46e:	46e0      	mov	r8, ip
 800d470:	e7dd      	b.n	800d42e <__multiply+0xe4>
 800d472:	3e01      	subs	r6, #1
 800d474:	e799      	b.n	800d3aa <__multiply+0x60>
	...

0800d478 <__pow5mult>:
 800d478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d47c:	4615      	mov	r5, r2
 800d47e:	f012 0203 	ands.w	r2, r2, #3
 800d482:	4606      	mov	r6, r0
 800d484:	460f      	mov	r7, r1
 800d486:	d007      	beq.n	800d498 <__pow5mult+0x20>
 800d488:	3a01      	subs	r2, #1
 800d48a:	4c21      	ldr	r4, [pc, #132]	; (800d510 <__pow5mult+0x98>)
 800d48c:	2300      	movs	r3, #0
 800d48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d492:	f7ff fec8 	bl	800d226 <__multadd>
 800d496:	4607      	mov	r7, r0
 800d498:	10ad      	asrs	r5, r5, #2
 800d49a:	d035      	beq.n	800d508 <__pow5mult+0x90>
 800d49c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d49e:	b93c      	cbnz	r4, 800d4b0 <__pow5mult+0x38>
 800d4a0:	2010      	movs	r0, #16
 800d4a2:	f7ff fe6d 	bl	800d180 <malloc>
 800d4a6:	6270      	str	r0, [r6, #36]	; 0x24
 800d4a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4ac:	6004      	str	r4, [r0, #0]
 800d4ae:	60c4      	str	r4, [r0, #12]
 800d4b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4b8:	b94c      	cbnz	r4, 800d4ce <__pow5mult+0x56>
 800d4ba:	f240 2171 	movw	r1, #625	; 0x271
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff ff3a 	bl	800d338 <__i2b>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	6003      	str	r3, [r0, #0]
 800d4ce:	f04f 0800 	mov.w	r8, #0
 800d4d2:	07eb      	lsls	r3, r5, #31
 800d4d4:	d50a      	bpl.n	800d4ec <__pow5mult+0x74>
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	4622      	mov	r2, r4
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f7ff ff35 	bl	800d34a <__multiply>
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	4681      	mov	r9, r0
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7ff fe87 	bl	800d1f8 <_Bfree>
 800d4ea:	464f      	mov	r7, r9
 800d4ec:	106d      	asrs	r5, r5, #1
 800d4ee:	d00b      	beq.n	800d508 <__pow5mult+0x90>
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	b938      	cbnz	r0, 800d504 <__pow5mult+0x8c>
 800d4f4:	4622      	mov	r2, r4
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f7ff ff26 	bl	800d34a <__multiply>
 800d4fe:	6020      	str	r0, [r4, #0]
 800d500:	f8c0 8000 	str.w	r8, [r0]
 800d504:	4604      	mov	r4, r0
 800d506:	e7e4      	b.n	800d4d2 <__pow5mult+0x5a>
 800d508:	4638      	mov	r0, r7
 800d50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50e:	bf00      	nop
 800d510:	0800e5b8 	.word	0x0800e5b8

0800d514 <__lshift>:
 800d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	460c      	mov	r4, r1
 800d51a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d51e:	6923      	ldr	r3, [r4, #16]
 800d520:	6849      	ldr	r1, [r1, #4]
 800d522:	eb0a 0903 	add.w	r9, sl, r3
 800d526:	68a3      	ldr	r3, [r4, #8]
 800d528:	4607      	mov	r7, r0
 800d52a:	4616      	mov	r6, r2
 800d52c:	f109 0501 	add.w	r5, r9, #1
 800d530:	42ab      	cmp	r3, r5
 800d532:	db32      	blt.n	800d59a <__lshift+0x86>
 800d534:	4638      	mov	r0, r7
 800d536:	f7ff fe2b 	bl	800d190 <_Balloc>
 800d53a:	2300      	movs	r3, #0
 800d53c:	4680      	mov	r8, r0
 800d53e:	f100 0114 	add.w	r1, r0, #20
 800d542:	461a      	mov	r2, r3
 800d544:	4553      	cmp	r3, sl
 800d546:	db2b      	blt.n	800d5a0 <__lshift+0x8c>
 800d548:	6920      	ldr	r0, [r4, #16]
 800d54a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d54e:	f104 0314 	add.w	r3, r4, #20
 800d552:	f016 021f 	ands.w	r2, r6, #31
 800d556:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d55a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d55e:	d025      	beq.n	800d5ac <__lshift+0x98>
 800d560:	f1c2 0e20 	rsb	lr, r2, #32
 800d564:	2000      	movs	r0, #0
 800d566:	681e      	ldr	r6, [r3, #0]
 800d568:	468a      	mov	sl, r1
 800d56a:	4096      	lsls	r6, r2
 800d56c:	4330      	orrs	r0, r6
 800d56e:	f84a 0b04 	str.w	r0, [sl], #4
 800d572:	f853 0b04 	ldr.w	r0, [r3], #4
 800d576:	459c      	cmp	ip, r3
 800d578:	fa20 f00e 	lsr.w	r0, r0, lr
 800d57c:	d814      	bhi.n	800d5a8 <__lshift+0x94>
 800d57e:	6048      	str	r0, [r1, #4]
 800d580:	b108      	cbz	r0, 800d586 <__lshift+0x72>
 800d582:	f109 0502 	add.w	r5, r9, #2
 800d586:	3d01      	subs	r5, #1
 800d588:	4638      	mov	r0, r7
 800d58a:	f8c8 5010 	str.w	r5, [r8, #16]
 800d58e:	4621      	mov	r1, r4
 800d590:	f7ff fe32 	bl	800d1f8 <_Bfree>
 800d594:	4640      	mov	r0, r8
 800d596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59a:	3101      	adds	r1, #1
 800d59c:	005b      	lsls	r3, r3, #1
 800d59e:	e7c7      	b.n	800d530 <__lshift+0x1c>
 800d5a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	e7cd      	b.n	800d544 <__lshift+0x30>
 800d5a8:	4651      	mov	r1, sl
 800d5aa:	e7dc      	b.n	800d566 <__lshift+0x52>
 800d5ac:	3904      	subs	r1, #4
 800d5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5b6:	459c      	cmp	ip, r3
 800d5b8:	d8f9      	bhi.n	800d5ae <__lshift+0x9a>
 800d5ba:	e7e4      	b.n	800d586 <__lshift+0x72>

0800d5bc <__mcmp>:
 800d5bc:	6903      	ldr	r3, [r0, #16]
 800d5be:	690a      	ldr	r2, [r1, #16]
 800d5c0:	1a9b      	subs	r3, r3, r2
 800d5c2:	b530      	push	{r4, r5, lr}
 800d5c4:	d10c      	bne.n	800d5e0 <__mcmp+0x24>
 800d5c6:	0092      	lsls	r2, r2, #2
 800d5c8:	3014      	adds	r0, #20
 800d5ca:	3114      	adds	r1, #20
 800d5cc:	1884      	adds	r4, r0, r2
 800d5ce:	4411      	add	r1, r2
 800d5d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5d8:	4295      	cmp	r5, r2
 800d5da:	d003      	beq.n	800d5e4 <__mcmp+0x28>
 800d5dc:	d305      	bcc.n	800d5ea <__mcmp+0x2e>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	bd30      	pop	{r4, r5, pc}
 800d5e4:	42a0      	cmp	r0, r4
 800d5e6:	d3f3      	bcc.n	800d5d0 <__mcmp+0x14>
 800d5e8:	e7fa      	b.n	800d5e0 <__mcmp+0x24>
 800d5ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5ee:	e7f7      	b.n	800d5e0 <__mcmp+0x24>

0800d5f0 <__mdiff>:
 800d5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f4:	460d      	mov	r5, r1
 800d5f6:	4607      	mov	r7, r0
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	4614      	mov	r4, r2
 800d5fe:	f7ff ffdd 	bl	800d5bc <__mcmp>
 800d602:	1e06      	subs	r6, r0, #0
 800d604:	d108      	bne.n	800d618 <__mdiff+0x28>
 800d606:	4631      	mov	r1, r6
 800d608:	4638      	mov	r0, r7
 800d60a:	f7ff fdc1 	bl	800d190 <_Balloc>
 800d60e:	2301      	movs	r3, #1
 800d610:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d618:	bfa4      	itt	ge
 800d61a:	4623      	movge	r3, r4
 800d61c:	462c      	movge	r4, r5
 800d61e:	4638      	mov	r0, r7
 800d620:	6861      	ldr	r1, [r4, #4]
 800d622:	bfa6      	itte	ge
 800d624:	461d      	movge	r5, r3
 800d626:	2600      	movge	r6, #0
 800d628:	2601      	movlt	r6, #1
 800d62a:	f7ff fdb1 	bl	800d190 <_Balloc>
 800d62e:	692b      	ldr	r3, [r5, #16]
 800d630:	60c6      	str	r6, [r0, #12]
 800d632:	6926      	ldr	r6, [r4, #16]
 800d634:	f105 0914 	add.w	r9, r5, #20
 800d638:	f104 0214 	add.w	r2, r4, #20
 800d63c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d640:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d644:	f100 0514 	add.w	r5, r0, #20
 800d648:	f04f 0e00 	mov.w	lr, #0
 800d64c:	f852 ab04 	ldr.w	sl, [r2], #4
 800d650:	f859 4b04 	ldr.w	r4, [r9], #4
 800d654:	fa1e f18a 	uxtah	r1, lr, sl
 800d658:	b2a3      	uxth	r3, r4
 800d65a:	1ac9      	subs	r1, r1, r3
 800d65c:	0c23      	lsrs	r3, r4, #16
 800d65e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d662:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d666:	b289      	uxth	r1, r1
 800d668:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d66c:	45c8      	cmp	r8, r9
 800d66e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d672:	4694      	mov	ip, r2
 800d674:	f845 3b04 	str.w	r3, [r5], #4
 800d678:	d8e8      	bhi.n	800d64c <__mdiff+0x5c>
 800d67a:	45bc      	cmp	ip, r7
 800d67c:	d304      	bcc.n	800d688 <__mdiff+0x98>
 800d67e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d682:	b183      	cbz	r3, 800d6a6 <__mdiff+0xb6>
 800d684:	6106      	str	r6, [r0, #16]
 800d686:	e7c5      	b.n	800d614 <__mdiff+0x24>
 800d688:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d68c:	fa1e f381 	uxtah	r3, lr, r1
 800d690:	141a      	asrs	r2, r3, #16
 800d692:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d696:	b29b      	uxth	r3, r3
 800d698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d69c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d6a0:	f845 3b04 	str.w	r3, [r5], #4
 800d6a4:	e7e9      	b.n	800d67a <__mdiff+0x8a>
 800d6a6:	3e01      	subs	r6, #1
 800d6a8:	e7e9      	b.n	800d67e <__mdiff+0x8e>

0800d6aa <__d2b>:
 800d6aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6ae:	460e      	mov	r6, r1
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	ec59 8b10 	vmov	r8, r9, d0
 800d6b6:	4615      	mov	r5, r2
 800d6b8:	f7ff fd6a 	bl	800d190 <_Balloc>
 800d6bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6c6:	bb34      	cbnz	r4, 800d716 <__d2b+0x6c>
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	f1b8 0300 	subs.w	r3, r8, #0
 800d6ce:	d027      	beq.n	800d720 <__d2b+0x76>
 800d6d0:	a802      	add	r0, sp, #8
 800d6d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d6d6:	f7ff fe00 	bl	800d2da <__lo0bits>
 800d6da:	9900      	ldr	r1, [sp, #0]
 800d6dc:	b1f0      	cbz	r0, 800d71c <__d2b+0x72>
 800d6de:	9a01      	ldr	r2, [sp, #4]
 800d6e0:	f1c0 0320 	rsb	r3, r0, #32
 800d6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	40c2      	lsrs	r2, r0
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	9201      	str	r2, [sp, #4]
 800d6f0:	9b01      	ldr	r3, [sp, #4]
 800d6f2:	61bb      	str	r3, [r7, #24]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	bf14      	ite	ne
 800d6f8:	2102      	movne	r1, #2
 800d6fa:	2101      	moveq	r1, #1
 800d6fc:	6139      	str	r1, [r7, #16]
 800d6fe:	b1c4      	cbz	r4, 800d732 <__d2b+0x88>
 800d700:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d704:	4404      	add	r4, r0
 800d706:	6034      	str	r4, [r6, #0]
 800d708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d70c:	6028      	str	r0, [r5, #0]
 800d70e:	4638      	mov	r0, r7
 800d710:	b003      	add	sp, #12
 800d712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d71a:	e7d5      	b.n	800d6c8 <__d2b+0x1e>
 800d71c:	6179      	str	r1, [r7, #20]
 800d71e:	e7e7      	b.n	800d6f0 <__d2b+0x46>
 800d720:	a801      	add	r0, sp, #4
 800d722:	f7ff fdda 	bl	800d2da <__lo0bits>
 800d726:	9b01      	ldr	r3, [sp, #4]
 800d728:	617b      	str	r3, [r7, #20]
 800d72a:	2101      	movs	r1, #1
 800d72c:	6139      	str	r1, [r7, #16]
 800d72e:	3020      	adds	r0, #32
 800d730:	e7e5      	b.n	800d6fe <__d2b+0x54>
 800d732:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d736:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d73a:	6030      	str	r0, [r6, #0]
 800d73c:	6918      	ldr	r0, [r3, #16]
 800d73e:	f7ff fdad 	bl	800d29c <__hi0bits>
 800d742:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d746:	e7e1      	b.n	800d70c <__d2b+0x62>

0800d748 <_calloc_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	fb02 f401 	mul.w	r4, r2, r1
 800d74e:	4621      	mov	r1, r4
 800d750:	f000 f856 	bl	800d800 <_malloc_r>
 800d754:	4605      	mov	r5, r0
 800d756:	b118      	cbz	r0, 800d760 <_calloc_r+0x18>
 800d758:	4622      	mov	r2, r4
 800d75a:	2100      	movs	r1, #0
 800d75c:	f7fd ff3f 	bl	800b5de <memset>
 800d760:	4628      	mov	r0, r5
 800d762:	bd38      	pop	{r3, r4, r5, pc}

0800d764 <_free_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4605      	mov	r5, r0
 800d768:	2900      	cmp	r1, #0
 800d76a:	d045      	beq.n	800d7f8 <_free_r+0x94>
 800d76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d770:	1f0c      	subs	r4, r1, #4
 800d772:	2b00      	cmp	r3, #0
 800d774:	bfb8      	it	lt
 800d776:	18e4      	addlt	r4, r4, r3
 800d778:	f000 fa98 	bl	800dcac <__malloc_lock>
 800d77c:	4a1f      	ldr	r2, [pc, #124]	; (800d7fc <_free_r+0x98>)
 800d77e:	6813      	ldr	r3, [r2, #0]
 800d780:	4610      	mov	r0, r2
 800d782:	b933      	cbnz	r3, 800d792 <_free_r+0x2e>
 800d784:	6063      	str	r3, [r4, #4]
 800d786:	6014      	str	r4, [r2, #0]
 800d788:	4628      	mov	r0, r5
 800d78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d78e:	f000 ba8e 	b.w	800dcae <__malloc_unlock>
 800d792:	42a3      	cmp	r3, r4
 800d794:	d90c      	bls.n	800d7b0 <_free_r+0x4c>
 800d796:	6821      	ldr	r1, [r4, #0]
 800d798:	1862      	adds	r2, r4, r1
 800d79a:	4293      	cmp	r3, r2
 800d79c:	bf04      	itt	eq
 800d79e:	681a      	ldreq	r2, [r3, #0]
 800d7a0:	685b      	ldreq	r3, [r3, #4]
 800d7a2:	6063      	str	r3, [r4, #4]
 800d7a4:	bf04      	itt	eq
 800d7a6:	1852      	addeq	r2, r2, r1
 800d7a8:	6022      	streq	r2, [r4, #0]
 800d7aa:	6004      	str	r4, [r0, #0]
 800d7ac:	e7ec      	b.n	800d788 <_free_r+0x24>
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	b10a      	cbz	r2, 800d7b8 <_free_r+0x54>
 800d7b4:	42a2      	cmp	r2, r4
 800d7b6:	d9fa      	bls.n	800d7ae <_free_r+0x4a>
 800d7b8:	6819      	ldr	r1, [r3, #0]
 800d7ba:	1858      	adds	r0, r3, r1
 800d7bc:	42a0      	cmp	r0, r4
 800d7be:	d10b      	bne.n	800d7d8 <_free_r+0x74>
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	4401      	add	r1, r0
 800d7c4:	1858      	adds	r0, r3, r1
 800d7c6:	4282      	cmp	r2, r0
 800d7c8:	6019      	str	r1, [r3, #0]
 800d7ca:	d1dd      	bne.n	800d788 <_free_r+0x24>
 800d7cc:	6810      	ldr	r0, [r2, #0]
 800d7ce:	6852      	ldr	r2, [r2, #4]
 800d7d0:	605a      	str	r2, [r3, #4]
 800d7d2:	4401      	add	r1, r0
 800d7d4:	6019      	str	r1, [r3, #0]
 800d7d6:	e7d7      	b.n	800d788 <_free_r+0x24>
 800d7d8:	d902      	bls.n	800d7e0 <_free_r+0x7c>
 800d7da:	230c      	movs	r3, #12
 800d7dc:	602b      	str	r3, [r5, #0]
 800d7de:	e7d3      	b.n	800d788 <_free_r+0x24>
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	1821      	adds	r1, r4, r0
 800d7e4:	428a      	cmp	r2, r1
 800d7e6:	bf04      	itt	eq
 800d7e8:	6811      	ldreq	r1, [r2, #0]
 800d7ea:	6852      	ldreq	r2, [r2, #4]
 800d7ec:	6062      	str	r2, [r4, #4]
 800d7ee:	bf04      	itt	eq
 800d7f0:	1809      	addeq	r1, r1, r0
 800d7f2:	6021      	streq	r1, [r4, #0]
 800d7f4:	605c      	str	r4, [r3, #4]
 800d7f6:	e7c7      	b.n	800d788 <_free_r+0x24>
 800d7f8:	bd38      	pop	{r3, r4, r5, pc}
 800d7fa:	bf00      	nop
 800d7fc:	2000037c 	.word	0x2000037c

0800d800 <_malloc_r>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	1ccd      	adds	r5, r1, #3
 800d804:	f025 0503 	bic.w	r5, r5, #3
 800d808:	3508      	adds	r5, #8
 800d80a:	2d0c      	cmp	r5, #12
 800d80c:	bf38      	it	cc
 800d80e:	250c      	movcc	r5, #12
 800d810:	2d00      	cmp	r5, #0
 800d812:	4606      	mov	r6, r0
 800d814:	db01      	blt.n	800d81a <_malloc_r+0x1a>
 800d816:	42a9      	cmp	r1, r5
 800d818:	d903      	bls.n	800d822 <_malloc_r+0x22>
 800d81a:	230c      	movs	r3, #12
 800d81c:	6033      	str	r3, [r6, #0]
 800d81e:	2000      	movs	r0, #0
 800d820:	bd70      	pop	{r4, r5, r6, pc}
 800d822:	f000 fa43 	bl	800dcac <__malloc_lock>
 800d826:	4a21      	ldr	r2, [pc, #132]	; (800d8ac <_malloc_r+0xac>)
 800d828:	6814      	ldr	r4, [r2, #0]
 800d82a:	4621      	mov	r1, r4
 800d82c:	b991      	cbnz	r1, 800d854 <_malloc_r+0x54>
 800d82e:	4c20      	ldr	r4, [pc, #128]	; (800d8b0 <_malloc_r+0xb0>)
 800d830:	6823      	ldr	r3, [r4, #0]
 800d832:	b91b      	cbnz	r3, 800d83c <_malloc_r+0x3c>
 800d834:	4630      	mov	r0, r6
 800d836:	f000 f97d 	bl	800db34 <_sbrk_r>
 800d83a:	6020      	str	r0, [r4, #0]
 800d83c:	4629      	mov	r1, r5
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 f978 	bl	800db34 <_sbrk_r>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d124      	bne.n	800d892 <_malloc_r+0x92>
 800d848:	230c      	movs	r3, #12
 800d84a:	6033      	str	r3, [r6, #0]
 800d84c:	4630      	mov	r0, r6
 800d84e:	f000 fa2e 	bl	800dcae <__malloc_unlock>
 800d852:	e7e4      	b.n	800d81e <_malloc_r+0x1e>
 800d854:	680b      	ldr	r3, [r1, #0]
 800d856:	1b5b      	subs	r3, r3, r5
 800d858:	d418      	bmi.n	800d88c <_malloc_r+0x8c>
 800d85a:	2b0b      	cmp	r3, #11
 800d85c:	d90f      	bls.n	800d87e <_malloc_r+0x7e>
 800d85e:	600b      	str	r3, [r1, #0]
 800d860:	50cd      	str	r5, [r1, r3]
 800d862:	18cc      	adds	r4, r1, r3
 800d864:	4630      	mov	r0, r6
 800d866:	f000 fa22 	bl	800dcae <__malloc_unlock>
 800d86a:	f104 000b 	add.w	r0, r4, #11
 800d86e:	1d23      	adds	r3, r4, #4
 800d870:	f020 0007 	bic.w	r0, r0, #7
 800d874:	1ac3      	subs	r3, r0, r3
 800d876:	d0d3      	beq.n	800d820 <_malloc_r+0x20>
 800d878:	425a      	negs	r2, r3
 800d87a:	50e2      	str	r2, [r4, r3]
 800d87c:	e7d0      	b.n	800d820 <_malloc_r+0x20>
 800d87e:	428c      	cmp	r4, r1
 800d880:	684b      	ldr	r3, [r1, #4]
 800d882:	bf16      	itet	ne
 800d884:	6063      	strne	r3, [r4, #4]
 800d886:	6013      	streq	r3, [r2, #0]
 800d888:	460c      	movne	r4, r1
 800d88a:	e7eb      	b.n	800d864 <_malloc_r+0x64>
 800d88c:	460c      	mov	r4, r1
 800d88e:	6849      	ldr	r1, [r1, #4]
 800d890:	e7cc      	b.n	800d82c <_malloc_r+0x2c>
 800d892:	1cc4      	adds	r4, r0, #3
 800d894:	f024 0403 	bic.w	r4, r4, #3
 800d898:	42a0      	cmp	r0, r4
 800d89a:	d005      	beq.n	800d8a8 <_malloc_r+0xa8>
 800d89c:	1a21      	subs	r1, r4, r0
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f000 f948 	bl	800db34 <_sbrk_r>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d0cf      	beq.n	800d848 <_malloc_r+0x48>
 800d8a8:	6025      	str	r5, [r4, #0]
 800d8aa:	e7db      	b.n	800d864 <_malloc_r+0x64>
 800d8ac:	2000037c 	.word	0x2000037c
 800d8b0:	20000380 	.word	0x20000380

0800d8b4 <__sfputc_r>:
 800d8b4:	6893      	ldr	r3, [r2, #8]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	b410      	push	{r4}
 800d8bc:	6093      	str	r3, [r2, #8]
 800d8be:	da08      	bge.n	800d8d2 <__sfputc_r+0x1e>
 800d8c0:	6994      	ldr	r4, [r2, #24]
 800d8c2:	42a3      	cmp	r3, r4
 800d8c4:	db01      	blt.n	800d8ca <__sfputc_r+0x16>
 800d8c6:	290a      	cmp	r1, #10
 800d8c8:	d103      	bne.n	800d8d2 <__sfputc_r+0x1e>
 800d8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8ce:	f7fe bb67 	b.w	800bfa0 <__swbuf_r>
 800d8d2:	6813      	ldr	r3, [r2, #0]
 800d8d4:	1c58      	adds	r0, r3, #1
 800d8d6:	6010      	str	r0, [r2, #0]
 800d8d8:	7019      	strb	r1, [r3, #0]
 800d8da:	4608      	mov	r0, r1
 800d8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <__sfputs_r>:
 800d8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	460f      	mov	r7, r1
 800d8e8:	4614      	mov	r4, r2
 800d8ea:	18d5      	adds	r5, r2, r3
 800d8ec:	42ac      	cmp	r4, r5
 800d8ee:	d101      	bne.n	800d8f4 <__sfputs_r+0x12>
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	e007      	b.n	800d904 <__sfputs_r+0x22>
 800d8f4:	463a      	mov	r2, r7
 800d8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f7ff ffda 	bl	800d8b4 <__sfputc_r>
 800d900:	1c43      	adds	r3, r0, #1
 800d902:	d1f3      	bne.n	800d8ec <__sfputs_r+0xa>
 800d904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d908 <_vfiprintf_r>:
 800d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90c:	460c      	mov	r4, r1
 800d90e:	b09d      	sub	sp, #116	; 0x74
 800d910:	4617      	mov	r7, r2
 800d912:	461d      	mov	r5, r3
 800d914:	4606      	mov	r6, r0
 800d916:	b118      	cbz	r0, 800d920 <_vfiprintf_r+0x18>
 800d918:	6983      	ldr	r3, [r0, #24]
 800d91a:	b90b      	cbnz	r3, 800d920 <_vfiprintf_r+0x18>
 800d91c:	f7ff fb34 	bl	800cf88 <__sinit>
 800d920:	4b7c      	ldr	r3, [pc, #496]	; (800db14 <_vfiprintf_r+0x20c>)
 800d922:	429c      	cmp	r4, r3
 800d924:	d158      	bne.n	800d9d8 <_vfiprintf_r+0xd0>
 800d926:	6874      	ldr	r4, [r6, #4]
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	0718      	lsls	r0, r3, #28
 800d92c:	d55e      	bpl.n	800d9ec <_vfiprintf_r+0xe4>
 800d92e:	6923      	ldr	r3, [r4, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d05b      	beq.n	800d9ec <_vfiprintf_r+0xe4>
 800d934:	2300      	movs	r3, #0
 800d936:	9309      	str	r3, [sp, #36]	; 0x24
 800d938:	2320      	movs	r3, #32
 800d93a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d93e:	2330      	movs	r3, #48	; 0x30
 800d940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d944:	9503      	str	r5, [sp, #12]
 800d946:	f04f 0b01 	mov.w	fp, #1
 800d94a:	46b8      	mov	r8, r7
 800d94c:	4645      	mov	r5, r8
 800d94e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d952:	b10b      	cbz	r3, 800d958 <_vfiprintf_r+0x50>
 800d954:	2b25      	cmp	r3, #37	; 0x25
 800d956:	d154      	bne.n	800da02 <_vfiprintf_r+0xfa>
 800d958:	ebb8 0a07 	subs.w	sl, r8, r7
 800d95c:	d00b      	beq.n	800d976 <_vfiprintf_r+0x6e>
 800d95e:	4653      	mov	r3, sl
 800d960:	463a      	mov	r2, r7
 800d962:	4621      	mov	r1, r4
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff ffbc 	bl	800d8e2 <__sfputs_r>
 800d96a:	3001      	adds	r0, #1
 800d96c:	f000 80c2 	beq.w	800daf4 <_vfiprintf_r+0x1ec>
 800d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d972:	4453      	add	r3, sl
 800d974:	9309      	str	r3, [sp, #36]	; 0x24
 800d976:	f898 3000 	ldrb.w	r3, [r8]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f000 80ba 	beq.w	800daf4 <_vfiprintf_r+0x1ec>
 800d980:	2300      	movs	r3, #0
 800d982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d98a:	9304      	str	r3, [sp, #16]
 800d98c:	9307      	str	r3, [sp, #28]
 800d98e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d992:	931a      	str	r3, [sp, #104]	; 0x68
 800d994:	46a8      	mov	r8, r5
 800d996:	2205      	movs	r2, #5
 800d998:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d99c:	485e      	ldr	r0, [pc, #376]	; (800db18 <_vfiprintf_r+0x210>)
 800d99e:	f7f2 fc1f 	bl	80001e0 <memchr>
 800d9a2:	9b04      	ldr	r3, [sp, #16]
 800d9a4:	bb78      	cbnz	r0, 800da06 <_vfiprintf_r+0xfe>
 800d9a6:	06d9      	lsls	r1, r3, #27
 800d9a8:	bf44      	itt	mi
 800d9aa:	2220      	movmi	r2, #32
 800d9ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9b0:	071a      	lsls	r2, r3, #28
 800d9b2:	bf44      	itt	mi
 800d9b4:	222b      	movmi	r2, #43	; 0x2b
 800d9b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9ba:	782a      	ldrb	r2, [r5, #0]
 800d9bc:	2a2a      	cmp	r2, #42	; 0x2a
 800d9be:	d02a      	beq.n	800da16 <_vfiprintf_r+0x10e>
 800d9c0:	9a07      	ldr	r2, [sp, #28]
 800d9c2:	46a8      	mov	r8, r5
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	250a      	movs	r5, #10
 800d9c8:	4641      	mov	r1, r8
 800d9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9ce:	3b30      	subs	r3, #48	; 0x30
 800d9d0:	2b09      	cmp	r3, #9
 800d9d2:	d969      	bls.n	800daa8 <_vfiprintf_r+0x1a0>
 800d9d4:	b360      	cbz	r0, 800da30 <_vfiprintf_r+0x128>
 800d9d6:	e024      	b.n	800da22 <_vfiprintf_r+0x11a>
 800d9d8:	4b50      	ldr	r3, [pc, #320]	; (800db1c <_vfiprintf_r+0x214>)
 800d9da:	429c      	cmp	r4, r3
 800d9dc:	d101      	bne.n	800d9e2 <_vfiprintf_r+0xda>
 800d9de:	68b4      	ldr	r4, [r6, #8]
 800d9e0:	e7a2      	b.n	800d928 <_vfiprintf_r+0x20>
 800d9e2:	4b4f      	ldr	r3, [pc, #316]	; (800db20 <_vfiprintf_r+0x218>)
 800d9e4:	429c      	cmp	r4, r3
 800d9e6:	bf08      	it	eq
 800d9e8:	68f4      	ldreq	r4, [r6, #12]
 800d9ea:	e79d      	b.n	800d928 <_vfiprintf_r+0x20>
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7fe fb28 	bl	800c044 <__swsetup_r>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d09d      	beq.n	800d934 <_vfiprintf_r+0x2c>
 800d9f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9fc:	b01d      	add	sp, #116	; 0x74
 800d9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da02:	46a8      	mov	r8, r5
 800da04:	e7a2      	b.n	800d94c <_vfiprintf_r+0x44>
 800da06:	4a44      	ldr	r2, [pc, #272]	; (800db18 <_vfiprintf_r+0x210>)
 800da08:	1a80      	subs	r0, r0, r2
 800da0a:	fa0b f000 	lsl.w	r0, fp, r0
 800da0e:	4318      	orrs	r0, r3
 800da10:	9004      	str	r0, [sp, #16]
 800da12:	4645      	mov	r5, r8
 800da14:	e7be      	b.n	800d994 <_vfiprintf_r+0x8c>
 800da16:	9a03      	ldr	r2, [sp, #12]
 800da18:	1d11      	adds	r1, r2, #4
 800da1a:	6812      	ldr	r2, [r2, #0]
 800da1c:	9103      	str	r1, [sp, #12]
 800da1e:	2a00      	cmp	r2, #0
 800da20:	db01      	blt.n	800da26 <_vfiprintf_r+0x11e>
 800da22:	9207      	str	r2, [sp, #28]
 800da24:	e004      	b.n	800da30 <_vfiprintf_r+0x128>
 800da26:	4252      	negs	r2, r2
 800da28:	f043 0302 	orr.w	r3, r3, #2
 800da2c:	9207      	str	r2, [sp, #28]
 800da2e:	9304      	str	r3, [sp, #16]
 800da30:	f898 3000 	ldrb.w	r3, [r8]
 800da34:	2b2e      	cmp	r3, #46	; 0x2e
 800da36:	d10e      	bne.n	800da56 <_vfiprintf_r+0x14e>
 800da38:	f898 3001 	ldrb.w	r3, [r8, #1]
 800da3c:	2b2a      	cmp	r3, #42	; 0x2a
 800da3e:	d138      	bne.n	800dab2 <_vfiprintf_r+0x1aa>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	9203      	str	r2, [sp, #12]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	bfb8      	it	lt
 800da4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800da50:	f108 0802 	add.w	r8, r8, #2
 800da54:	9305      	str	r3, [sp, #20]
 800da56:	4d33      	ldr	r5, [pc, #204]	; (800db24 <_vfiprintf_r+0x21c>)
 800da58:	f898 1000 	ldrb.w	r1, [r8]
 800da5c:	2203      	movs	r2, #3
 800da5e:	4628      	mov	r0, r5
 800da60:	f7f2 fbbe 	bl	80001e0 <memchr>
 800da64:	b140      	cbz	r0, 800da78 <_vfiprintf_r+0x170>
 800da66:	2340      	movs	r3, #64	; 0x40
 800da68:	1b40      	subs	r0, r0, r5
 800da6a:	fa03 f000 	lsl.w	r0, r3, r0
 800da6e:	9b04      	ldr	r3, [sp, #16]
 800da70:	4303      	orrs	r3, r0
 800da72:	f108 0801 	add.w	r8, r8, #1
 800da76:	9304      	str	r3, [sp, #16]
 800da78:	f898 1000 	ldrb.w	r1, [r8]
 800da7c:	482a      	ldr	r0, [pc, #168]	; (800db28 <_vfiprintf_r+0x220>)
 800da7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da82:	2206      	movs	r2, #6
 800da84:	f108 0701 	add.w	r7, r8, #1
 800da88:	f7f2 fbaa 	bl	80001e0 <memchr>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d037      	beq.n	800db00 <_vfiprintf_r+0x1f8>
 800da90:	4b26      	ldr	r3, [pc, #152]	; (800db2c <_vfiprintf_r+0x224>)
 800da92:	bb1b      	cbnz	r3, 800dadc <_vfiprintf_r+0x1d4>
 800da94:	9b03      	ldr	r3, [sp, #12]
 800da96:	3307      	adds	r3, #7
 800da98:	f023 0307 	bic.w	r3, r3, #7
 800da9c:	3308      	adds	r3, #8
 800da9e:	9303      	str	r3, [sp, #12]
 800daa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa2:	444b      	add	r3, r9
 800daa4:	9309      	str	r3, [sp, #36]	; 0x24
 800daa6:	e750      	b.n	800d94a <_vfiprintf_r+0x42>
 800daa8:	fb05 3202 	mla	r2, r5, r2, r3
 800daac:	2001      	movs	r0, #1
 800daae:	4688      	mov	r8, r1
 800dab0:	e78a      	b.n	800d9c8 <_vfiprintf_r+0xc0>
 800dab2:	2300      	movs	r3, #0
 800dab4:	f108 0801 	add.w	r8, r8, #1
 800dab8:	9305      	str	r3, [sp, #20]
 800daba:	4619      	mov	r1, r3
 800dabc:	250a      	movs	r5, #10
 800dabe:	4640      	mov	r0, r8
 800dac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dac4:	3a30      	subs	r2, #48	; 0x30
 800dac6:	2a09      	cmp	r2, #9
 800dac8:	d903      	bls.n	800dad2 <_vfiprintf_r+0x1ca>
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d0c3      	beq.n	800da56 <_vfiprintf_r+0x14e>
 800dace:	9105      	str	r1, [sp, #20]
 800dad0:	e7c1      	b.n	800da56 <_vfiprintf_r+0x14e>
 800dad2:	fb05 2101 	mla	r1, r5, r1, r2
 800dad6:	2301      	movs	r3, #1
 800dad8:	4680      	mov	r8, r0
 800dada:	e7f0      	b.n	800dabe <_vfiprintf_r+0x1b6>
 800dadc:	ab03      	add	r3, sp, #12
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	4622      	mov	r2, r4
 800dae2:	4b13      	ldr	r3, [pc, #76]	; (800db30 <_vfiprintf_r+0x228>)
 800dae4:	a904      	add	r1, sp, #16
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7fd fe16 	bl	800b718 <_printf_float>
 800daec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800daf0:	4681      	mov	r9, r0
 800daf2:	d1d5      	bne.n	800daa0 <_vfiprintf_r+0x198>
 800daf4:	89a3      	ldrh	r3, [r4, #12]
 800daf6:	065b      	lsls	r3, r3, #25
 800daf8:	f53f af7e 	bmi.w	800d9f8 <_vfiprintf_r+0xf0>
 800dafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dafe:	e77d      	b.n	800d9fc <_vfiprintf_r+0xf4>
 800db00:	ab03      	add	r3, sp, #12
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	4622      	mov	r2, r4
 800db06:	4b0a      	ldr	r3, [pc, #40]	; (800db30 <_vfiprintf_r+0x228>)
 800db08:	a904      	add	r1, sp, #16
 800db0a:	4630      	mov	r0, r6
 800db0c:	f7fe f8ba 	bl	800bc84 <_printf_i>
 800db10:	e7ec      	b.n	800daec <_vfiprintf_r+0x1e4>
 800db12:	bf00      	nop
 800db14:	0800e488 	.word	0x0800e488
 800db18:	0800e5c4 	.word	0x0800e5c4
 800db1c:	0800e4a8 	.word	0x0800e4a8
 800db20:	0800e468 	.word	0x0800e468
 800db24:	0800e5ca 	.word	0x0800e5ca
 800db28:	0800e5ce 	.word	0x0800e5ce
 800db2c:	0800b719 	.word	0x0800b719
 800db30:	0800d8e3 	.word	0x0800d8e3

0800db34 <_sbrk_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4c06      	ldr	r4, [pc, #24]	; (800db50 <_sbrk_r+0x1c>)
 800db38:	2300      	movs	r3, #0
 800db3a:	4605      	mov	r5, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	6023      	str	r3, [r4, #0]
 800db40:	f7f4 fe08 	bl	8002754 <_sbrk>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_sbrk_r+0x1a>
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_sbrk_r+0x1a>
 800db4c:	602b      	str	r3, [r5, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	20005c8c 	.word	0x20005c8c

0800db54 <__sread>:
 800db54:	b510      	push	{r4, lr}
 800db56:	460c      	mov	r4, r1
 800db58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db5c:	f000 f8a8 	bl	800dcb0 <_read_r>
 800db60:	2800      	cmp	r0, #0
 800db62:	bfab      	itete	ge
 800db64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db66:	89a3      	ldrhlt	r3, [r4, #12]
 800db68:	181b      	addge	r3, r3, r0
 800db6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db6e:	bfac      	ite	ge
 800db70:	6563      	strge	r3, [r4, #84]	; 0x54
 800db72:	81a3      	strhlt	r3, [r4, #12]
 800db74:	bd10      	pop	{r4, pc}

0800db76 <__swrite>:
 800db76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7a:	461f      	mov	r7, r3
 800db7c:	898b      	ldrh	r3, [r1, #12]
 800db7e:	05db      	lsls	r3, r3, #23
 800db80:	4605      	mov	r5, r0
 800db82:	460c      	mov	r4, r1
 800db84:	4616      	mov	r6, r2
 800db86:	d505      	bpl.n	800db94 <__swrite+0x1e>
 800db88:	2302      	movs	r3, #2
 800db8a:	2200      	movs	r2, #0
 800db8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db90:	f000 f868 	bl	800dc64 <_lseek_r>
 800db94:	89a3      	ldrh	r3, [r4, #12]
 800db96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db9e:	81a3      	strh	r3, [r4, #12]
 800dba0:	4632      	mov	r2, r6
 800dba2:	463b      	mov	r3, r7
 800dba4:	4628      	mov	r0, r5
 800dba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	f000 b817 	b.w	800dbdc <_write_r>

0800dbae <__sseek>:
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb6:	f000 f855 	bl	800dc64 <_lseek_r>
 800dbba:	1c43      	adds	r3, r0, #1
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	bf15      	itete	ne
 800dbc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbca:	81a3      	strheq	r3, [r4, #12]
 800dbcc:	bf18      	it	ne
 800dbce:	81a3      	strhne	r3, [r4, #12]
 800dbd0:	bd10      	pop	{r4, pc}

0800dbd2 <__sclose>:
 800dbd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd6:	f000 b813 	b.w	800dc00 <_close_r>
	...

0800dbdc <_write_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4c07      	ldr	r4, [pc, #28]	; (800dbfc <_write_r+0x20>)
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	6022      	str	r2, [r4, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	f7f4 fd62 	bl	80026b4 <_write>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d102      	bne.n	800dbfa <_write_r+0x1e>
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	b103      	cbz	r3, 800dbfa <_write_r+0x1e>
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	20005c8c 	.word	0x20005c8c

0800dc00 <_close_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4c06      	ldr	r4, [pc, #24]	; (800dc1c <_close_r+0x1c>)
 800dc04:	2300      	movs	r3, #0
 800dc06:	4605      	mov	r5, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	6023      	str	r3, [r4, #0]
 800dc0c:	f7f4 fd6e 	bl	80026ec <_close>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d102      	bne.n	800dc1a <_close_r+0x1a>
 800dc14:	6823      	ldr	r3, [r4, #0]
 800dc16:	b103      	cbz	r3, 800dc1a <_close_r+0x1a>
 800dc18:	602b      	str	r3, [r5, #0]
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	20005c8c 	.word	0x20005c8c

0800dc20 <_fstat_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	4c07      	ldr	r4, [pc, #28]	; (800dc40 <_fstat_r+0x20>)
 800dc24:	2300      	movs	r3, #0
 800dc26:	4605      	mov	r5, r0
 800dc28:	4608      	mov	r0, r1
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	f7f4 fd69 	bl	8002704 <_fstat>
 800dc32:	1c43      	adds	r3, r0, #1
 800dc34:	d102      	bne.n	800dc3c <_fstat_r+0x1c>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	b103      	cbz	r3, 800dc3c <_fstat_r+0x1c>
 800dc3a:	602b      	str	r3, [r5, #0]
 800dc3c:	bd38      	pop	{r3, r4, r5, pc}
 800dc3e:	bf00      	nop
 800dc40:	20005c8c 	.word	0x20005c8c

0800dc44 <_isatty_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4c06      	ldr	r4, [pc, #24]	; (800dc60 <_isatty_r+0x1c>)
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4605      	mov	r5, r0
 800dc4c:	4608      	mov	r0, r1
 800dc4e:	6023      	str	r3, [r4, #0]
 800dc50:	f7f4 fd68 	bl	8002724 <_isatty>
 800dc54:	1c43      	adds	r3, r0, #1
 800dc56:	d102      	bne.n	800dc5e <_isatty_r+0x1a>
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	b103      	cbz	r3, 800dc5e <_isatty_r+0x1a>
 800dc5c:	602b      	str	r3, [r5, #0]
 800dc5e:	bd38      	pop	{r3, r4, r5, pc}
 800dc60:	20005c8c 	.word	0x20005c8c

0800dc64 <_lseek_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4c07      	ldr	r4, [pc, #28]	; (800dc84 <_lseek_r+0x20>)
 800dc68:	4605      	mov	r5, r0
 800dc6a:	4608      	mov	r0, r1
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	2200      	movs	r2, #0
 800dc70:	6022      	str	r2, [r4, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	f7f4 fd61 	bl	800273a <_lseek>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d102      	bne.n	800dc82 <_lseek_r+0x1e>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	b103      	cbz	r3, 800dc82 <_lseek_r+0x1e>
 800dc80:	602b      	str	r3, [r5, #0]
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	20005c8c 	.word	0x20005c8c

0800dc88 <__ascii_mbtowc>:
 800dc88:	b082      	sub	sp, #8
 800dc8a:	b901      	cbnz	r1, 800dc8e <__ascii_mbtowc+0x6>
 800dc8c:	a901      	add	r1, sp, #4
 800dc8e:	b142      	cbz	r2, 800dca2 <__ascii_mbtowc+0x1a>
 800dc90:	b14b      	cbz	r3, 800dca6 <__ascii_mbtowc+0x1e>
 800dc92:	7813      	ldrb	r3, [r2, #0]
 800dc94:	600b      	str	r3, [r1, #0]
 800dc96:	7812      	ldrb	r2, [r2, #0]
 800dc98:	1c10      	adds	r0, r2, #0
 800dc9a:	bf18      	it	ne
 800dc9c:	2001      	movne	r0, #1
 800dc9e:	b002      	add	sp, #8
 800dca0:	4770      	bx	lr
 800dca2:	4610      	mov	r0, r2
 800dca4:	e7fb      	b.n	800dc9e <__ascii_mbtowc+0x16>
 800dca6:	f06f 0001 	mvn.w	r0, #1
 800dcaa:	e7f8      	b.n	800dc9e <__ascii_mbtowc+0x16>

0800dcac <__malloc_lock>:
 800dcac:	4770      	bx	lr

0800dcae <__malloc_unlock>:
 800dcae:	4770      	bx	lr

0800dcb0 <_read_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4c07      	ldr	r4, [pc, #28]	; (800dcd0 <_read_r+0x20>)
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	4611      	mov	r1, r2
 800dcba:	2200      	movs	r2, #0
 800dcbc:	6022      	str	r2, [r4, #0]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	f7f4 fcdb 	bl	800267a <_read>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d102      	bne.n	800dcce <_read_r+0x1e>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	b103      	cbz	r3, 800dcce <_read_r+0x1e>
 800dccc:	602b      	str	r3, [r5, #0]
 800dcce:	bd38      	pop	{r3, r4, r5, pc}
 800dcd0:	20005c8c 	.word	0x20005c8c

0800dcd4 <__ascii_wctomb>:
 800dcd4:	b149      	cbz	r1, 800dcea <__ascii_wctomb+0x16>
 800dcd6:	2aff      	cmp	r2, #255	; 0xff
 800dcd8:	bf85      	ittet	hi
 800dcda:	238a      	movhi	r3, #138	; 0x8a
 800dcdc:	6003      	strhi	r3, [r0, #0]
 800dcde:	700a      	strbls	r2, [r1, #0]
 800dce0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dce4:	bf98      	it	ls
 800dce6:	2001      	movls	r0, #1
 800dce8:	4770      	bx	lr
 800dcea:	4608      	mov	r0, r1
 800dcec:	4770      	bx	lr
	...

0800dcf0 <_init>:
 800dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf2:	bf00      	nop
 800dcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf6:	bc08      	pop	{r3}
 800dcf8:	469e      	mov	lr, r3
 800dcfa:	4770      	bx	lr

0800dcfc <_fini>:
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	bf00      	nop
 800dd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd02:	bc08      	pop	{r3}
 800dd04:	469e      	mov	lr, r3
 800dd06:	4770      	bx	lr
